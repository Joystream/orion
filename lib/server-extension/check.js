"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestCheck = void 0;
const auth_1 = require("../utils/auth");
const type_graphql_1 = require("type-graphql");
const autogeneratedOperatorQueries = [
    'reports',
    'reportById',
    'reportsConnection',
    'reportByUniqueInput',
    'videoViewEvents',
    'videoViewEventById',
    'videoViewEventByUniqueInput',
    'videoViewEventsConnection',
    'channelFollows',
    'channelFollowById',
    'channelFollowByUniqueInput',
    'channelFollowsConnection',
    'nftFeaturingRequests',
    'nftFeaturingRequestById',
    'nftFeaturingRequestsConnection',
];
const requestCheck = async (ctx) => {
    const context = ctx.context;
    const authContext = await (0, auth_1.authenticate)(context.req, 'cookie');
    Object.assign(context, authContext);
    if ((!authContext || !authContext.user.isRoot) &&
        ctx.operation.selectionSet.selections.some((s) => s.kind === 'Field' && autogeneratedOperatorQueries.includes(s.name.value))) {
        throw new type_graphql_1.UnauthorizedError();
    }
    // Set search_path accordingly if it's an operator request
    if (authContext?.user.isRoot) {
        const em = await context.openreader.getEntityManager();
        await em.query('SET LOCAL search_path TO admin,public');
    }
    return true;
};
exports.requestCheck = requestCheck;
exports.default = exports.requestCheck;
//# sourceMappingURL=check.js.map