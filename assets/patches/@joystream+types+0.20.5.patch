diff --git a/node_modules/@joystream/types/.gitignore b/node_modules/@joystream/types/.gitignore
new file mode 100644
index 0000000..206991f
--- /dev/null
+++ b/node_modules/@joystream/types/.gitignore
@@ -0,0 +1,4 @@
+# Don't track build artifacts
+**/*.js
+**/*.d.ts
+!.eslintrc.js
\ No newline at end of file
diff --git a/node_modules/@joystream/types/.npmignore b/node_modules/@joystream/types/.npmignore
new file mode 100644
index 0000000..acdb6a9
--- /dev/null
+++ b/node_modules/@joystream/types/.npmignore
@@ -0,0 +1,6 @@
+# keep src/ files, packages is compiled when installed
+# src/
+
+# old build artifacts
+lib/
+build/
diff --git a/node_modules/@joystream/types/CHANGELOG.md b/node_modules/@joystream/types/CHANGELOG.md
index 23c9cea..55a63c3 100644
--- a/node_modules/@joystream/types/CHANGELOG.md
+++ b/node_modules/@joystream/types/CHANGELOG.md
@@ -1,3 +1,27 @@
+### 2.1.0
+
+- Bumped version for dependants version release to get the proper types version. [ref](https://github.com/Joystream/joystream/commit/f899922645013cd5aad6d8036aeae2180f123cf7)
+
+### 2.0.0 (Ephesus release)
+
+- Generated Ephesus augment api from metadata
+
+### 1.0.0
+
+- No changes, version bumped for consistency with mainnet release versioning.
+
+### 2.1.0
+
+- Bumped version for dependants version release to get the proper types version. [ref](https://github.com/Joystream/joystream/commit/f899922645013cd5aad6d8036aeae2180f123cf7)
+
+### 2.0.0 (Ephesus release)
+
+- Generated Ephesus augment api from metadata
+
+### 1.0.0
+
+- No changes, version bumped for consistency with mainnet release versioning.
+
 ### 0.20.0
 
 - `@polkadot/api` upgraded from `5.9.1` to `8.9.1` (along with related dependencies)
diff --git a/node_modules/@joystream/types/augment/augment-types.ts b/node_modules/@joystream/types/augment/augment-types.ts
deleted file mode 100644
index a68d386..0000000
--- a/node_modules/@joystream/types/augment/augment-types.ts
+++ /dev/null
@@ -1,2394 +0,0 @@
-// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
-/* eslint-disable */
-
-import type {
-  BitVec,
-  Bool,
-  Bytes,
-  Data,
-  I128,
-  I16,
-  I256,
-  I32,
-  I64,
-  I8,
-  Json,
-  Null,
-  Raw,
-  StorageKey,
-  Text,
-  Type,
-  U128,
-  U16,
-  U256,
-  U32,
-  U64,
-  U8,
-  USize,
-  bool,
-  i128,
-  i16,
-  i256,
-  i32,
-  i64,
-  i8,
-  u128,
-  u16,
-  u256,
-  u32,
-  u64,
-  u8,
-  usize,
-} from '@polkadot/types'
-import type {
-  ActorId,
-  Application,
-  ApplicationId,
-  ApplicationIdSet,
-  ApplicationIdToWorkerIdMap,
-  ApplicationInfo,
-  ApplyOnOpeningParameters,
-  Approved,
-  AssuranceContractType,
-  AssuranceContractType_Closed,
-  Bag,
-  BagId,
-  BagIdType,
-  BalanceKind,
-  BlockAndTime,
-  BlockRate,
-  BountyActor,
-  BountyCreationParameters,
-  BountyId,
-  BountyMilestone,
-  BountyMilestone_BountyMaxFundingReached,
-  BountyMilestone_Created,
-  BountyMilestone_JudgmentSubmitted,
-  BountyMilestone_WorkSubmitted,
-  BuyMembershipParameters,
-  Candidate,
-  CastVoteOf,
-  Category,
-  CategoryId,
-  Channel,
-  ChannelActionPermission,
-  ChannelAgentPermissions,
-  ChannelCreationParameters,
-  ChannelId,
-  ChannelOwner,
-  ChannelPayoutsPayloadParameters,
-  ChannelPrivilegeLevel,
-  ChannelTransferStatus,
-  ChannelTransferStatus_PendingTransfer,
-  ChannelUpdateParameters,
-  Cid,
-  ConstitutionInfo,
-  ContentActor,
-  ContentIdSet,
-  ContentModerationAction,
-  ContentModerationActionsSet,
-  CouncilMemberOf,
-  CouncilStage,
-  CouncilStageAnnouncing,
-  CouncilStageElection,
-  CouncilStageUpdate,
-  CreateOpeningParameters,
-  CuratorGroup,
-  CuratorGroupId,
-  CuratorId,
-  DataObject,
-  DataObjectCreationParameters,
-  DataObjectId,
-  DataObjectIdMap,
-  DataObjectIdSet,
-  DiscussionPost,
-  DiscussionThread,
-  DistributionBucket,
-  DistributionBucketFamily,
-  DistributionBucketFamilyId,
-  DistributionBucketId,
-  DistributionBucketIndex,
-  DistributionBucketIndexSet,
-  DistributionBucketsPerBagValueConstraint,
-  DynBagCreationParameters,
-  Dynamic,
-  DynamicBagCreationPolicy,
-  DynamicBagCreationPolicyDistributorFamiliesMap,
-  DynamicBagId,
-  DynamicBagType,
-  EnglishAuction,
-  EnglishAuctionBid,
-  EnglishAuctionParams,
-  Entry,
-  EntryId,
-  ExecutionFailed,
-  ExecutionStatus,
-  ExtendedPostId,
-  FillOpeningParameters,
-  ForumUserId,
-  FundingRequestParameters,
-  FundingType,
-  FundingType_Limited,
-  FundingType_Perpetual,
-  GeneralProposalParameters,
-  InitTransactionalStatus,
-  InputValidationLengthConstraintU64,
-  InviteMembershipParameters,
-  IsCensored,
-  JoyBalance,
-  LimitPerPeriod,
-  MaxNumber,
-  MemberId,
-  Membership,
-  MerkleProof,
-  MerkleSide,
-  ModerationPermissionsByLevel,
-  ModeratorId,
-  NftCounter,
-  NftIssuanceParameters,
-  NftLimitId,
-  NftLimitPeriod,
-  NftMetadata,
-  NftOwner,
-  OfferingState,
-  OpenAuction,
-  OpenAuctionBid,
-  OpenAuctionId,
-  OpenAuctionParams,
-  Opening,
-  OpeningId,
-  OpeningType,
-  OptionResult,
-  OracleJudgment,
-  OracleWorkEntryJudgment,
-  OracleWorkEntryJudgment_Winner,
-  OwnedNft,
-  ParticipantId,
-  PausableChannelFeature,
-  Payment,
-  PaymentWithVesting,
-  Penalty,
-  Poll,
-  PollAlternative,
-  PollInput,
-  Post,
-  PostId,
-  PostReactionId,
-  PrivilegedActor,
-  ProofElement,
-  ProposalDecision,
-  ProposalDetails,
-  ProposalDetailsOf,
-  ProposalId,
-  ProposalOf,
-  ProposalParameters,
-  ProposalStatus,
-  PullPayment,
-  ReferendumStage,
-  ReferendumStageRevealing,
-  ReferendumStageVoting,
-  Reply,
-  ReplyId,
-  ReplyToDelete,
-  RewardPaymentType,
-  Royalty,
-  SetLeadParams,
-  Side,
-  SingleDataObjectUploadParams,
-  StakeParameters,
-  StakePolicy,
-  StakingAccountMemberBinding,
-  Static,
-  StaticBagId,
-  StorageAssets,
-  StorageBucket,
-  StorageBucketId,
-  StorageBucketIdSet,
-  StorageBucketOperatorStatus,
-  StorageBucketsPerBagValueConstraint,
-  StorageProviderId,
-  TerminateRoleParameters,
-  Thread,
-  ThreadId,
-  ThreadMode,
-  ThreadOf,
-  Title,
-  TokenAllocation,
-  TokenId,
-  TokenIssuanceParams,
-  TokenSale,
-  TokenSaleId,
-  TokenSaleParams,
-  TransactionalStatus,
-  TransferParameters,
-  TransferPolicy,
-  TransferPolicyParams,
-  UpdateChannelPayoutsParameters,
-  UpdatedBody,
-  UpdatedTitle,
-  UploadContent,
-  UploadParameters,
-  Url,
-  ValidatedPayment,
-  VestingScheduleParams,
-  VestingSource,
-  Video,
-  VideoCreationParameters,
-  VideoId,
-  VideoUpdateParameters,
-  VoteKind,
-  VotePower,
-  VotingResults,
-  Voucher,
-  WhitelistParams,
-  Worker,
-  WorkerId,
-  WorkerInfo,
-  WorkingGroup,
-  YearlyRate,
-} from './all'
-import type {
-  AssetApproval,
-  AssetApprovalKey,
-  AssetBalance,
-  AssetDestroyWitness,
-  AssetDetails,
-  AssetMetadata,
-  TAssetBalance,
-  TAssetDepositBalance,
-} from '@polkadot/types/interfaces/assets'
-import type { BlockAttestations, IncludedBlocks, MoreAttestations } from '@polkadot/types/interfaces/attestations'
-import type { RawAuraPreDigest } from '@polkadot/types/interfaces/aura'
-import type { ExtrinsicOrHash, ExtrinsicStatus } from '@polkadot/types/interfaces/author'
-import type { UncleEntryItem } from '@polkadot/types/interfaces/authorship'
-import type {
-  AllowedSlots,
-  BabeAuthorityWeight,
-  BabeBlockWeight,
-  BabeEpochConfiguration,
-  BabeEquivocationProof,
-  BabeWeight,
-  EpochAuthorship,
-  MaybeRandomness,
-  MaybeVrf,
-  NextConfigDescriptor,
-  NextConfigDescriptorV1,
-  Randomness,
-  RawBabePreDigest,
-  RawBabePreDigestCompat,
-  RawBabePreDigestPrimary,
-  RawBabePreDigestPrimaryTo159,
-  RawBabePreDigestSecondaryPlain,
-  RawBabePreDigestSecondaryTo159,
-  RawBabePreDigestSecondaryVRF,
-  RawBabePreDigestTo159,
-  SlotNumber,
-  VrfData,
-  VrfOutput,
-  VrfProof,
-} from '@polkadot/types/interfaces/babe'
-import type {
-  AccountData,
-  BalanceLock,
-  BalanceLockTo212,
-  BalanceStatus,
-  Reasons,
-  ReserveData,
-  ReserveIdentifier,
-  VestingSchedule,
-  WithdrawReasons,
-} from '@polkadot/types/interfaces/balances'
-import type {
-  BeefyCommitment,
-  BeefyId,
-  BeefyNextAuthoritySet,
-  BeefyPayload,
-  BeefySignedCommitment,
-  MmrRootHash,
-  ValidatorSetId,
-} from '@polkadot/types/interfaces/beefy'
-import type {
-  BridgedBlockHash,
-  BridgedBlockNumber,
-  BridgedHeader,
-  CallOrigin,
-  ChainId,
-  DeliveredMessages,
-  DispatchFeePayment,
-  InboundLaneData,
-  InboundRelayer,
-  InitializationData,
-  LaneId,
-  MessageData,
-  MessageKey,
-  MessageNonce,
-  MessagesDeliveryProofOf,
-  MessagesProofOf,
-  OperatingMode,
-  OutboundLaneData,
-  OutboundMessageFee,
-  OutboundPayload,
-  Parameter,
-  RelayerId,
-  UnrewardedRelayer,
-  UnrewardedRelayersState,
-} from '@polkadot/types/interfaces/bridges'
-import type { BlockHash } from '@polkadot/types/interfaces/chain'
-import type { PrefixedStorageKey } from '@polkadot/types/interfaces/childstate'
-import type { EthereumAddress, StatementKind } from '@polkadot/types/interfaces/claims'
-import type {
-  CollectiveOrigin,
-  MemberCount,
-  ProposalIndex,
-  Votes,
-  VotesTo230,
-} from '@polkadot/types/interfaces/collective'
-import type { AuthorityId, RawVRFOutput } from '@polkadot/types/interfaces/consensus'
-import type {
-  AliveContractInfo,
-  CodeHash,
-  ContractCallRequest,
-  ContractExecResult,
-  ContractExecResultErr,
-  ContractExecResultErrModule,
-  ContractExecResultOk,
-  ContractExecResultResult,
-  ContractExecResultSuccessTo255,
-  ContractExecResultSuccessTo260,
-  ContractExecResultTo255,
-  ContractExecResultTo260,
-  ContractExecResultTo267,
-  ContractInfo,
-  ContractInstantiateResult,
-  ContractStorageKey,
-  DeletedContract,
-  ExecReturnValue,
-  Gas,
-  HostFnWeights,
-  HostFnWeightsTo264,
-  InstantiateRequest,
-  InstantiateReturnValue,
-  InstructionWeights,
-  Limits,
-  LimitsTo264,
-  PrefabWasmModule,
-  RentProjection,
-  Schedule,
-  ScheduleTo212,
-  ScheduleTo258,
-  ScheduleTo264,
-  SeedOf,
-  TombstoneContractInfo,
-  TrieId,
-} from '@polkadot/types/interfaces/contracts'
-import type {
-  ContractConstructorSpec,
-  ContractContractSpec,
-  ContractCryptoHasher,
-  ContractDiscriminant,
-  ContractDisplayName,
-  ContractEventParamSpec,
-  ContractEventSpec,
-  ContractLayoutArray,
-  ContractLayoutCell,
-  ContractLayoutEnum,
-  ContractLayoutHash,
-  ContractLayoutHashingStrategy,
-  ContractLayoutKey,
-  ContractLayoutStruct,
-  ContractLayoutStructField,
-  ContractMessageParamSpec,
-  ContractMessageSpec,
-  ContractProject,
-  ContractProjectContract,
-  ContractProjectSource,
-  ContractSelector,
-  ContractStorageLayout,
-  ContractTypeSpec,
-} from '@polkadot/types/interfaces/contractsAbi'
-import type { FundIndex, FundInfo, LastContribution, TrieIndex } from '@polkadot/types/interfaces/crowdloan'
-import type {
-  ConfigData,
-  MessageId,
-  OverweightIndex,
-  PageCounter,
-  PageIndexData,
-} from '@polkadot/types/interfaces/cumulus'
-import type {
-  AccountVote,
-  AccountVoteSplit,
-  AccountVoteStandard,
-  Conviction,
-  Delegations,
-  PreimageStatus,
-  PreimageStatusAvailable,
-  PriorLock,
-  PropIndex,
-  Proposal,
-  ProxyState,
-  ReferendumIndex,
-  ReferendumInfo,
-  ReferendumInfoFinished,
-  ReferendumInfoTo239,
-  ReferendumStatus,
-  Tally,
-  Voting,
-  VotingDelegating,
-  VotingDirect,
-  VotingDirectVote,
-} from '@polkadot/types/interfaces/democracy'
-import type {
-  ApprovalFlag,
-  DefunctVoter,
-  Renouncing,
-  SetIndex,
-  Vote,
-  VoteIndex,
-  VoteThreshold,
-  VoterInfo,
-} from '@polkadot/types/interfaces/elections'
-import type { CreatedBlock, ImportedAux } from '@polkadot/types/interfaces/engine'
-import type {
-  EthAccount,
-  EthBlock,
-  EthBloom,
-  EthCallRequest,
-  EthFilter,
-  EthFilterAddress,
-  EthFilterChanges,
-  EthFilterTopic,
-  EthFilterTopicEntry,
-  EthFilterTopicInner,
-  EthHeader,
-  EthLog,
-  EthReceipt,
-  EthRichBlock,
-  EthRichHeader,
-  EthStorageProof,
-  EthSubKind,
-  EthSubParams,
-  EthSubResult,
-  EthSyncInfo,
-  EthSyncStatus,
-  EthTransaction,
-  EthTransactionAction,
-  EthTransactionCondition,
-  EthTransactionRequest,
-  EthTransactionSignature,
-  EthTransactionStatus,
-  EthWork,
-  EthereumAccountId,
-  EthereumLookupSource,
-  EthereumSignature,
-} from '@polkadot/types/interfaces/eth'
-import type {
-  EvmAccount,
-  EvmLog,
-  EvmVicinity,
-  ExitError,
-  ExitFatal,
-  ExitReason,
-  ExitRevert,
-  ExitSucceed,
-} from '@polkadot/types/interfaces/evm'
-import type {
-  AnySignature,
-  EcdsaSignature,
-  Ed25519Signature,
-  Era,
-  Extrinsic,
-  ExtrinsicEra,
-  ExtrinsicPayload,
-  ExtrinsicPayloadUnknown,
-  ExtrinsicPayloadV4,
-  ExtrinsicSignature,
-  ExtrinsicSignatureV4,
-  ExtrinsicUnknown,
-  ExtrinsicV4,
-  ImmortalEra,
-  MortalEra,
-  MultiSignature,
-  Signature,
-  SignerPayload,
-  Sr25519Signature,
-} from '@polkadot/types/interfaces/extrinsics'
-import type {
-  AssetOptions,
-  Owner,
-  PermissionLatest,
-  PermissionVersions,
-  PermissionsV1,
-} from '@polkadot/types/interfaces/genericAsset'
-import type { ActiveGilt, ActiveGiltsTotal, ActiveIndex, GiltBid } from '@polkadot/types/interfaces/gilt'
-import type {
-  AuthorityIndex,
-  AuthorityList,
-  AuthoritySet,
-  AuthoritySetChange,
-  AuthoritySetChanges,
-  AuthorityWeight,
-  DelayKind,
-  DelayKindBest,
-  EncodedFinalityProofs,
-  ForkTreePendingChange,
-  ForkTreePendingChangeNode,
-  GrandpaCommit,
-  GrandpaEquivocation,
-  GrandpaEquivocationProof,
-  GrandpaEquivocationValue,
-  GrandpaJustification,
-  GrandpaPrecommit,
-  GrandpaPrevote,
-  GrandpaSignedPrecommit,
-  JustificationNotification,
-  KeyOwnerProof,
-  NextAuthority,
-  PendingChange,
-  PendingPause,
-  PendingResume,
-  Precommits,
-  Prevotes,
-  ReportedRoundStates,
-  RoundState,
-  SetId,
-  StoredPendingChange,
-  StoredState,
-} from '@polkadot/types/interfaces/grandpa'
-import type {
-  IdentityFields,
-  IdentityInfo,
-  IdentityInfoAdditional,
-  IdentityJudgement,
-  RegistrarIndex,
-  RegistrarInfo,
-  Registration,
-  RegistrationJudgement,
-} from '@polkadot/types/interfaces/identity'
-import type {
-  AuthIndex,
-  AuthoritySignature,
-  Heartbeat,
-  HeartbeatTo244,
-  OpaqueMultiaddr,
-  OpaqueNetworkState,
-  OpaquePeerId,
-} from '@polkadot/types/interfaces/imOnline'
-import type { CallIndex, LotteryConfig } from '@polkadot/types/interfaces/lottery'
-import type {
-  ErrorMetadataLatest,
-  ErrorMetadataV10,
-  ErrorMetadataV11,
-  ErrorMetadataV12,
-  ErrorMetadataV13,
-  ErrorMetadataV14,
-  ErrorMetadataV9,
-  EventMetadataLatest,
-  EventMetadataV10,
-  EventMetadataV11,
-  EventMetadataV12,
-  EventMetadataV13,
-  EventMetadataV14,
-  EventMetadataV9,
-  ExtrinsicMetadataLatest,
-  ExtrinsicMetadataV11,
-  ExtrinsicMetadataV12,
-  ExtrinsicMetadataV13,
-  ExtrinsicMetadataV14,
-  FunctionArgumentMetadataLatest,
-  FunctionArgumentMetadataV10,
-  FunctionArgumentMetadataV11,
-  FunctionArgumentMetadataV12,
-  FunctionArgumentMetadataV13,
-  FunctionArgumentMetadataV14,
-  FunctionArgumentMetadataV9,
-  FunctionMetadataLatest,
-  FunctionMetadataV10,
-  FunctionMetadataV11,
-  FunctionMetadataV12,
-  FunctionMetadataV13,
-  FunctionMetadataV14,
-  FunctionMetadataV9,
-  MetadataAll,
-  MetadataLatest,
-  MetadataV10,
-  MetadataV11,
-  MetadataV12,
-  MetadataV13,
-  MetadataV14,
-  MetadataV9,
-  ModuleConstantMetadataLatest,
-  ModuleConstantMetadataV10,
-  ModuleConstantMetadataV11,
-  ModuleConstantMetadataV12,
-  ModuleConstantMetadataV13,
-  ModuleConstantMetadataV9,
-  ModuleMetadataLatest,
-  ModuleMetadataV10,
-  ModuleMetadataV11,
-  ModuleMetadataV12,
-  ModuleMetadataV13,
-  ModuleMetadataV9,
-  PalletCallMetadataLatest,
-  PalletCallMetadataV14,
-  PalletConstantMetadataLatest,
-  PalletConstantMetadataV14,
-  PalletErrorMetadataLatest,
-  PalletErrorMetadataV14,
-  PalletEventMetadataLatest,
-  PalletEventMetadataV14,
-  PalletMetadataLatest,
-  PalletMetadataV14,
-  PalletStorageMetadataLatest,
-  PalletStorageMetadataV14,
-  PortableRegistry,
-  PortableType,
-  SignedExtensionMetadataLatest,
-  SignedExtensionMetadataV14,
-  StorageEntryMetadataLatest,
-  StorageEntryMetadataV10,
-  StorageEntryMetadataV11,
-  StorageEntryMetadataV12,
-  StorageEntryMetadataV13,
-  StorageEntryMetadataV14,
-  StorageEntryMetadataV9,
-  StorageEntryModifierLatest,
-  StorageEntryModifierV10,
-  StorageEntryModifierV11,
-  StorageEntryModifierV12,
-  StorageEntryModifierV13,
-  StorageEntryModifierV14,
-  StorageEntryModifierV9,
-  StorageEntryTypeLatest,
-  StorageEntryTypeV10,
-  StorageEntryTypeV11,
-  StorageEntryTypeV12,
-  StorageEntryTypeV13,
-  StorageEntryTypeV14,
-  StorageEntryTypeV9,
-  StorageHasher,
-  StorageHasherV10,
-  StorageHasherV11,
-  StorageHasherV12,
-  StorageHasherV13,
-  StorageHasherV14,
-  StorageHasherV9,
-  StorageMetadataLatest,
-  StorageMetadataV10,
-  StorageMetadataV11,
-  StorageMetadataV12,
-  StorageMetadataV13,
-  StorageMetadataV9,
-} from '@polkadot/types/interfaces/metadata'
-import type { MmrLeafProof } from '@polkadot/types/interfaces/mmr'
-import type { StorageKind } from '@polkadot/types/interfaces/offchain'
-import type {
-  DeferredOffenceOf,
-  Kind,
-  OffenceDetails,
-  Offender,
-  OpaqueTimeSlot,
-  ReportIdOf,
-  Reporter,
-} from '@polkadot/types/interfaces/offences'
-import type {
-  AbridgedCandidateReceipt,
-  AbridgedHostConfiguration,
-  AbridgedHrmpChannel,
-  AssignmentId,
-  AssignmentKind,
-  AttestedCandidate,
-  AuctionIndex,
-  AuthorityDiscoveryId,
-  AvailabilityBitfield,
-  AvailabilityBitfieldRecord,
-  BackedCandidate,
-  Bidder,
-  BufferedSessionChange,
-  CandidateCommitments,
-  CandidateDescriptor,
-  CandidateHash,
-  CandidateInfo,
-  CandidatePendingAvailability,
-  CandidateReceipt,
-  CollatorId,
-  CollatorSignature,
-  CommittedCandidateReceipt,
-  CoreAssignment,
-  CoreIndex,
-  CoreOccupied,
-  DisputeLocation,
-  DisputeResult,
-  DisputeState,
-  DisputeStatement,
-  DisputeStatementSet,
-  DoubleVoteReport,
-  DownwardMessage,
-  ExplicitDisputeStatement,
-  GlobalValidationData,
-  GlobalValidationSchedule,
-  GroupIndex,
-  HeadData,
-  HostConfiguration,
-  HrmpChannel,
-  HrmpChannelId,
-  HrmpOpenChannelRequest,
-  InboundDownwardMessage,
-  InboundHrmpMessage,
-  InboundHrmpMessages,
-  IncomingParachain,
-  IncomingParachainDeploy,
-  IncomingParachainFixed,
-  InvalidDisputeStatementKind,
-  LeasePeriod,
-  LeasePeriodOf,
-  LocalValidationData,
-  MessageIngestionType,
-  MessageQueueChain,
-  MessagingStateSnapshot,
-  MessagingStateSnapshotEgressEntry,
-  MultiDisputeStatementSet,
-  NewBidder,
-  OutboundHrmpMessage,
-  ParaGenesisArgs,
-  ParaId,
-  ParaInfo,
-  ParaLifecycle,
-  ParaPastCodeMeta,
-  ParaScheduling,
-  ParaValidatorIndex,
-  ParachainDispatchOrigin,
-  ParachainInherentData,
-  ParachainProposal,
-  ParachainsInherentData,
-  ParathreadClaim,
-  ParathreadClaimQueue,
-  ParathreadEntry,
-  PersistedValidationData,
-  QueuedParathread,
-  RegisteredParachainInfo,
-  RelayBlockNumber,
-  RelayChainBlockNumber,
-  RelayChainHash,
-  RelayHash,
-  Remark,
-  ReplacementTimes,
-  Retriable,
-  Scheduling,
-  ServiceQuality,
-  SessionInfo,
-  SessionInfoValidatorGroup,
-  SignedAvailabilityBitfield,
-  SignedAvailabilityBitfields,
-  SigningContext,
-  SlotRange,
-  Statement,
-  SubId,
-  SystemInherentData,
-  TransientValidationData,
-  UpgradeGoAhead,
-  UpgradeRestriction,
-  UpwardMessage,
-  ValidDisputeStatementKind,
-  ValidationCode,
-  ValidationCodeHash,
-  ValidationData,
-  ValidationDataType,
-  ValidationFunctionParams,
-  ValidatorSignature,
-  ValidityAttestation,
-  VecInboundHrmpMessage,
-  WinnersData,
-  WinnersDataTuple,
-  WinningData,
-  WinningDataEntry,
-} from '@polkadot/types/interfaces/parachains'
-import type { FeeDetails, InclusionFee, RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment'
-import type { Approvals } from '@polkadot/types/interfaces/poll'
-import type { ProxyAnnouncement, ProxyDefinition, ProxyType } from '@polkadot/types/interfaces/proxy'
-import type { AccountStatus, AccountValidity } from '@polkadot/types/interfaces/purchase'
-import type { ActiveRecovery, RecoveryConfig } from '@polkadot/types/interfaces/recovery'
-import type { RpcMethods } from '@polkadot/types/interfaces/rpc'
-import type {
-  AccountId,
-  AccountId20,
-  AccountId32,
-  AccountIdOf,
-  AccountIndex,
-  Address,
-  AssetId,
-  Balance,
-  BalanceOf,
-  Block,
-  BlockNumber,
-  BlockNumberFor,
-  BlockNumberOf,
-  Call,
-  CallHash,
-  CallHashOf,
-  ChangesTrieConfiguration,
-  ChangesTrieSignal,
-  CodecHash,
-  Consensus,
-  ConsensusEngineId,
-  Digest,
-  DigestItem,
-  EncodedJustification,
-  ExtrinsicsWeight,
-  Fixed128,
-  Fixed64,
-  FixedI128,
-  FixedI64,
-  FixedU128,
-  FixedU64,
-  H1024,
-  H128,
-  H160,
-  H2048,
-  H256,
-  H32,
-  H512,
-  H64,
-  Hash,
-  Header,
-  HeaderPartial,
-  I32F32,
-  Index,
-  IndicesLookupSource,
-  Justification,
-  Justifications,
-  KeyTypeId,
-  KeyValue,
-  LockIdentifier,
-  LookupSource,
-  LookupTarget,
-  ModuleId,
-  Moment,
-  MultiAddress,
-  MultiSigner,
-  OpaqueCall,
-  Origin,
-  OriginCaller,
-  PalletId,
-  PalletVersion,
-  PalletsOrigin,
-  Pays,
-  PerU16,
-  Perbill,
-  Percent,
-  Permill,
-  Perquintill,
-  Phantom,
-  PhantomData,
-  PreRuntime,
-  Releases,
-  RuntimeDbWeight,
-  Seal,
-  SealV0,
-  SignedBlock,
-  SignedBlockWithJustification,
-  SignedBlockWithJustifications,
-  Slot,
-  StorageData,
-  StorageProof,
-  TransactionInfo,
-  TransactionPriority,
-  TransactionStorageProof,
-  U32F32,
-  ValidatorId,
-  ValidatorIdOf,
-  Weight,
-  WeightMultiplier,
-} from '@polkadot/types/interfaces/runtime'
-import type {
-  Si0Field,
-  Si0LookupTypeId,
-  Si0Path,
-  Si0Type,
-  Si0TypeDef,
-  Si0TypeDefArray,
-  Si0TypeDefBitSequence,
-  Si0TypeDefCompact,
-  Si0TypeDefComposite,
-  Si0TypeDefPhantom,
-  Si0TypeDefPrimitive,
-  Si0TypeDefSequence,
-  Si0TypeDefTuple,
-  Si0TypeDefVariant,
-  Si0TypeParameter,
-  Si0Variant,
-  SiField,
-  SiLookupTypeId,
-  SiPath,
-  SiType,
-  SiTypeDef,
-  SiTypeDefArray,
-  SiTypeDefBitSequence,
-  SiTypeDefCompact,
-  SiTypeDefComposite,
-  SiTypeDefPrimitive,
-  SiTypeDefSequence,
-  SiTypeDefTuple,
-  SiTypeDefVariant,
-  SiTypeParameter,
-  SiVariant,
-} from '@polkadot/types/interfaces/scaleInfo'
-import type {
-  Period,
-  Priority,
-  SchedulePeriod,
-  SchedulePriority,
-  Scheduled,
-  ScheduledTo254,
-  TaskAddress,
-} from '@polkadot/types/interfaces/scheduler'
-import type {
-  BeefyKey,
-  FullIdentification,
-  IdentificationTuple,
-  Keys,
-  MembershipProof,
-  SessionIndex,
-  SessionKeys1,
-  SessionKeys10,
-  SessionKeys10B,
-  SessionKeys2,
-  SessionKeys3,
-  SessionKeys4,
-  SessionKeys5,
-  SessionKeys6,
-  SessionKeys6B,
-  SessionKeys7,
-  SessionKeys7B,
-  SessionKeys8,
-  SessionKeys8B,
-  SessionKeys9,
-  SessionKeys9B,
-  ValidatorCount,
-} from '@polkadot/types/interfaces/session'
-import type {
-  Bid,
-  BidKind,
-  SocietyJudgement,
-  SocietyVote,
-  StrikeCount,
-  VouchingStatus,
-} from '@polkadot/types/interfaces/society'
-import type {
-  ActiveEraInfo,
-  CompactAssignments,
-  CompactAssignmentsTo257,
-  CompactAssignmentsTo265,
-  CompactAssignmentsWith16,
-  CompactAssignmentsWith24,
-  CompactScore,
-  CompactScoreCompact,
-  ElectionCompute,
-  ElectionPhase,
-  ElectionResult,
-  ElectionScore,
-  ElectionSize,
-  ElectionStatus,
-  EraIndex,
-  EraPoints,
-  EraRewardPoints,
-  EraRewards,
-  Exposure,
-  ExtendedBalance,
-  Forcing,
-  IndividualExposure,
-  KeyType,
-  MomentOf,
-  Nominations,
-  NominatorIndex,
-  NominatorIndexCompact,
-  OffchainAccuracy,
-  OffchainAccuracyCompact,
-  PhragmenScore,
-  Points,
-  RawSolution,
-  RawSolutionTo265,
-  RawSolutionWith16,
-  RawSolutionWith24,
-  ReadySolution,
-  RewardDestination,
-  RewardPoint,
-  RoundSnapshot,
-  SeatHolder,
-  SignedSubmission,
-  SignedSubmissionOf,
-  SignedSubmissionTo276,
-  SlashJournalEntry,
-  SlashingSpans,
-  SlashingSpansTo204,
-  SolutionOrSnapshotSize,
-  SolutionSupport,
-  SolutionSupports,
-  SpanIndex,
-  SpanRecord,
-  StakingLedger,
-  StakingLedgerTo223,
-  StakingLedgerTo240,
-  SubmissionIndicesOf,
-  Supports,
-  UnappliedSlash,
-  UnappliedSlashOther,
-  UnlockChunk,
-  ValidatorIndex,
-  ValidatorIndexCompact,
-  ValidatorPrefs,
-  ValidatorPrefsTo145,
-  ValidatorPrefsTo196,
-  ValidatorPrefsWithBlocked,
-  ValidatorPrefsWithCommission,
-  VoteWeight,
-  Voter,
-} from '@polkadot/types/interfaces/staking'
-import type {
-  ApiId,
-  BlockTrace,
-  BlockTraceEvent,
-  BlockTraceEventData,
-  BlockTraceSpan,
-  KeyValueOption,
-  ReadProof,
-  RuntimeVersion,
-  RuntimeVersionApi,
-  RuntimeVersionPartial,
-  StorageChangeSet,
-  TraceBlockResponse,
-  TraceError,
-} from '@polkadot/types/interfaces/state'
-import type { WeightToFeeCoefficient } from '@polkadot/types/interfaces/support'
-import type {
-  AccountInfo,
-  AccountInfoWithDualRefCount,
-  AccountInfoWithProviders,
-  AccountInfoWithRefCount,
-  AccountInfoWithRefCountU8,
-  AccountInfoWithTripleRefCount,
-  ApplyExtrinsicResult,
-  ArithmeticError,
-  BlockLength,
-  BlockWeights,
-  ChainProperties,
-  ChainType,
-  ConsumedWeight,
-  DigestOf,
-  DispatchClass,
-  DispatchError,
-  DispatchErrorModule,
-  DispatchErrorTo198,
-  DispatchInfo,
-  DispatchInfoTo190,
-  DispatchInfoTo244,
-  DispatchOutcome,
-  DispatchResult,
-  DispatchResultOf,
-  DispatchResultTo198,
-  Event,
-  EventId,
-  EventIndex,
-  EventRecord,
-  Health,
-  InvalidTransaction,
-  Key,
-  LastRuntimeUpgradeInfo,
-  NetworkState,
-  NetworkStatePeerset,
-  NetworkStatePeersetInfo,
-  NodeRole,
-  NotConnectedPeer,
-  Peer,
-  PeerEndpoint,
-  PeerEndpointAddr,
-  PeerInfo,
-  PeerPing,
-  PerDispatchClassU32,
-  PerDispatchClassWeight,
-  PerDispatchClassWeightsPerClass,
-  Phase,
-  RawOrigin,
-  RefCount,
-  RefCountTo259,
-  SyncState,
-  SystemOrigin,
-  TokenError,
-  TransactionValidityError,
-  UnknownTransaction,
-  WeightPerClass,
-} from '@polkadot/types/interfaces/system'
-import type {
-  Bounty,
-  BountyIndex,
-  BountyStatus,
-  BountyStatusActive,
-  BountyStatusCuratorProposed,
-  BountyStatusPendingPayout,
-  OpenTip,
-  OpenTipFinderTo225,
-  OpenTipTip,
-  OpenTipTo225,
-  TreasuryProposal,
-} from '@polkadot/types/interfaces/treasury'
-import type { Multiplier } from '@polkadot/types/interfaces/txpayment'
-import type {
-  ClassDetails,
-  ClassId,
-  ClassMetadata,
-  DepositBalance,
-  DepositBalanceOf,
-  DestroyWitness,
-  InstanceDetails,
-  InstanceId,
-  InstanceMetadata,
-} from '@polkadot/types/interfaces/uniques'
-import type { Multisig, Timepoint } from '@polkadot/types/interfaces/utility'
-import type { VestingInfo } from '@polkadot/types/interfaces/vesting'
-import type {
-  AssetInstance,
-  AssetInstanceV0,
-  AssetInstanceV1,
-  BodyId,
-  BodyPart,
-  DoubleEncodedCall,
-  Fungibility,
-  InboundStatus,
-  InstructionV2,
-  InteriorMultiLocation,
-  Junction,
-  JunctionV0,
-  JunctionV1,
-  JunctionV2,
-  Junctions,
-  JunctionsV1,
-  JunctionsV2,
-  MultiAsset,
-  MultiAssetFilter,
-  MultiAssetFilterV1,
-  MultiAssetFilterV2,
-  MultiAssetV0,
-  MultiAssetV1,
-  MultiAssetV2,
-  MultiAssets,
-  MultiAssetsV1,
-  MultiAssetsV2,
-  MultiLocation,
-  MultiLocationV0,
-  MultiLocationV1,
-  MultiLocationV2,
-  NetworkId,
-  OriginKindV0,
-  OriginKindV1,
-  OriginKindV2,
-  OutboundStatus,
-  Outcome,
-  QueryId,
-  QueryStatus,
-  QueueConfigData,
-  Response,
-  ResponseV0,
-  ResponseV1,
-  ResponseV2,
-  ResponseV2Error,
-  ResponseV2Result,
-  VersionMigrationStage,
-  VersionedMultiAsset,
-  VersionedMultiAssets,
-  VersionedMultiLocation,
-  VersionedResponse,
-  VersionedXcm,
-  WeightLimitV2,
-  WildFungibility,
-  WildMultiAsset,
-  WildMultiAssetV1,
-  Xcm,
-  XcmAssetId,
-  XcmError,
-  XcmErrorV0,
-  XcmErrorV1,
-  XcmErrorV2,
-  XcmOrder,
-  XcmOrderV0,
-  XcmOrderV1,
-  XcmOrigin,
-  XcmOriginKind,
-  XcmV0,
-  XcmV1,
-  XcmV2,
-  XcmVersion,
-  XcmpMessageFormat,
-} from '@polkadot/types/interfaces/xcm'
-
-declare module '@polkadot/types/types/registry' {
-  export interface InterfaceTypes {
-    AbridgedCandidateReceipt: AbridgedCandidateReceipt
-    AbridgedHostConfiguration: AbridgedHostConfiguration
-    AbridgedHrmpChannel: AbridgedHrmpChannel
-    AccountData: AccountData
-    AccountId: AccountId
-    AccountId20: AccountId20
-    AccountId32: AccountId32
-    AccountIdOf: AccountIdOf
-    AccountIndex: AccountIndex
-    AccountInfo: AccountInfo
-    AccountInfoWithDualRefCount: AccountInfoWithDualRefCount
-    AccountInfoWithProviders: AccountInfoWithProviders
-    AccountInfoWithRefCount: AccountInfoWithRefCount
-    AccountInfoWithRefCountU8: AccountInfoWithRefCountU8
-    AccountInfoWithTripleRefCount: AccountInfoWithTripleRefCount
-    AccountStatus: AccountStatus
-    AccountValidity: AccountValidity
-    AccountVote: AccountVote
-    AccountVoteSplit: AccountVoteSplit
-    AccountVoteStandard: AccountVoteStandard
-    ActiveEraInfo: ActiveEraInfo
-    ActiveGilt: ActiveGilt
-    ActiveGiltsTotal: ActiveGiltsTotal
-    ActiveIndex: ActiveIndex
-    ActiveRecovery: ActiveRecovery
-    ActorId: ActorId
-    Address: Address
-    AliveContractInfo: AliveContractInfo
-    AllowedSlots: AllowedSlots
-    AnySignature: AnySignature
-    ApiId: ApiId
-    Application: Application
-    ApplicationId: ApplicationId
-    ApplicationIdSet: ApplicationIdSet
-    ApplicationIdToWorkerIdMap: ApplicationIdToWorkerIdMap
-    ApplicationInfo: ApplicationInfo
-    ApplyExtrinsicResult: ApplyExtrinsicResult
-    ApplyOnOpeningParameters: ApplyOnOpeningParameters
-    ApprovalFlag: ApprovalFlag
-    Approvals: Approvals
-    Approved: Approved
-    ArithmeticError: ArithmeticError
-    AssetApproval: AssetApproval
-    AssetApprovalKey: AssetApprovalKey
-    AssetBalance: AssetBalance
-    AssetDestroyWitness: AssetDestroyWitness
-    AssetDetails: AssetDetails
-    AssetId: AssetId
-    AssetInstance: AssetInstance
-    AssetInstanceV0: AssetInstanceV0
-    AssetInstanceV1: AssetInstanceV1
-    AssetMetadata: AssetMetadata
-    AssetOptions: AssetOptions
-    AssignmentId: AssignmentId
-    AssignmentKind: AssignmentKind
-    AssuranceContractType: AssuranceContractType
-    AssuranceContractType_Closed: AssuranceContractType_Closed
-    AttestedCandidate: AttestedCandidate
-    AuctionIndex: AuctionIndex
-    AuthIndex: AuthIndex
-    AuthorityDiscoveryId: AuthorityDiscoveryId
-    AuthorityId: AuthorityId
-    AuthorityIndex: AuthorityIndex
-    AuthorityList: AuthorityList
-    AuthoritySet: AuthoritySet
-    AuthoritySetChange: AuthoritySetChange
-    AuthoritySetChanges: AuthoritySetChanges
-    AuthoritySignature: AuthoritySignature
-    AuthorityWeight: AuthorityWeight
-    AvailabilityBitfield: AvailabilityBitfield
-    AvailabilityBitfieldRecord: AvailabilityBitfieldRecord
-    BabeAuthorityWeight: BabeAuthorityWeight
-    BabeBlockWeight: BabeBlockWeight
-    BabeEpochConfiguration: BabeEpochConfiguration
-    BabeEquivocationProof: BabeEquivocationProof
-    BabeWeight: BabeWeight
-    BackedCandidate: BackedCandidate
-    Bag: Bag
-    BagId: BagId
-    BagIdType: BagIdType
-    Balance: Balance
-    BalanceKind: BalanceKind
-    BalanceLock: BalanceLock
-    BalanceLockTo212: BalanceLockTo212
-    BalanceOf: BalanceOf
-    BalanceStatus: BalanceStatus
-    BeefyCommitment: BeefyCommitment
-    BeefyId: BeefyId
-    BeefyKey: BeefyKey
-    BeefyNextAuthoritySet: BeefyNextAuthoritySet
-    BeefyPayload: BeefyPayload
-    BeefySignedCommitment: BeefySignedCommitment
-    Bid: Bid
-    Bidder: Bidder
-    BidKind: BidKind
-    BitVec: BitVec
-    Block: Block
-    BlockAndTime: BlockAndTime
-    BlockAttestations: BlockAttestations
-    BlockHash: BlockHash
-    BlockLength: BlockLength
-    BlockNumber: BlockNumber
-    BlockNumberFor: BlockNumberFor
-    BlockNumberOf: BlockNumberOf
-    BlockRate: BlockRate
-    BlockTrace: BlockTrace
-    BlockTraceEvent: BlockTraceEvent
-    BlockTraceEventData: BlockTraceEventData
-    BlockTraceSpan: BlockTraceSpan
-    BlockWeights: BlockWeights
-    BodyId: BodyId
-    BodyPart: BodyPart
-    bool: bool
-    Bool: Bool
-    Bounty: Bounty
-    BountyActor: BountyActor
-    BountyCreationParameters: BountyCreationParameters
-    BountyId: BountyId
-    BountyIndex: BountyIndex
-    BountyMilestone: BountyMilestone
-    BountyMilestone_BountyMaxFundingReached: BountyMilestone_BountyMaxFundingReached
-    BountyMilestone_Created: BountyMilestone_Created
-    BountyMilestone_JudgmentSubmitted: BountyMilestone_JudgmentSubmitted
-    BountyMilestone_WorkSubmitted: BountyMilestone_WorkSubmitted
-    BountyStatus: BountyStatus
-    BountyStatusActive: BountyStatusActive
-    BountyStatusCuratorProposed: BountyStatusCuratorProposed
-    BountyStatusPendingPayout: BountyStatusPendingPayout
-    BridgedBlockHash: BridgedBlockHash
-    BridgedBlockNumber: BridgedBlockNumber
-    BridgedHeader: BridgedHeader
-    BufferedSessionChange: BufferedSessionChange
-    BuyMembershipParameters: BuyMembershipParameters
-    Bytes: Bytes
-    Call: Call
-    CallHash: CallHash
-    CallHashOf: CallHashOf
-    CallIndex: CallIndex
-    CallOrigin: CallOrigin
-    Candidate: Candidate
-    CandidateCommitments: CandidateCommitments
-    CandidateDescriptor: CandidateDescriptor
-    CandidateHash: CandidateHash
-    CandidateInfo: CandidateInfo
-    CandidatePendingAvailability: CandidatePendingAvailability
-    CandidateReceipt: CandidateReceipt
-    CastVoteOf: CastVoteOf
-    Category: Category
-    CategoryId: CategoryId
-    ChainId: ChainId
-    ChainProperties: ChainProperties
-    ChainType: ChainType
-    ChangesTrieConfiguration: ChangesTrieConfiguration
-    ChangesTrieSignal: ChangesTrieSignal
-    Channel: Channel
-    ChannelActionPermission: ChannelActionPermission
-    ChannelAgentPermissions: ChannelAgentPermissions
-    ChannelCreationParameters: ChannelCreationParameters
-    ChannelId: ChannelId
-    ChannelOwner: ChannelOwner
-    ChannelPayoutsPayloadParameters: ChannelPayoutsPayloadParameters
-    ChannelPrivilegeLevel: ChannelPrivilegeLevel
-    ChannelTransferStatus: ChannelTransferStatus
-    ChannelTransferStatus_PendingTransfer: ChannelTransferStatus_PendingTransfer
-    ChannelUpdateParameters: ChannelUpdateParameters
-    Cid: Cid
-    ClassDetails: ClassDetails
-    ClassId: ClassId
-    ClassMetadata: ClassMetadata
-    CodecHash: CodecHash
-    CodeHash: CodeHash
-    CollatorId: CollatorId
-    CollatorSignature: CollatorSignature
-    CollectiveOrigin: CollectiveOrigin
-    CommittedCandidateReceipt: CommittedCandidateReceipt
-    CompactAssignments: CompactAssignments
-    CompactAssignmentsTo257: CompactAssignmentsTo257
-    CompactAssignmentsTo265: CompactAssignmentsTo265
-    CompactAssignmentsWith16: CompactAssignmentsWith16
-    CompactAssignmentsWith24: CompactAssignmentsWith24
-    CompactScore: CompactScore
-    CompactScoreCompact: CompactScoreCompact
-    ConfigData: ConfigData
-    Consensus: Consensus
-    ConsensusEngineId: ConsensusEngineId
-    ConstitutionInfo: ConstitutionInfo
-    ConsumedWeight: ConsumedWeight
-    ContentActor: ContentActor
-    ContentIdSet: ContentIdSet
-    ContentModerationAction: ContentModerationAction
-    ContentModerationActionsSet: ContentModerationActionsSet
-    ContractCallRequest: ContractCallRequest
-    ContractConstructorSpec: ContractConstructorSpec
-    ContractContractSpec: ContractContractSpec
-    ContractCryptoHasher: ContractCryptoHasher
-    ContractDiscriminant: ContractDiscriminant
-    ContractDisplayName: ContractDisplayName
-    ContractEventParamSpec: ContractEventParamSpec
-    ContractEventSpec: ContractEventSpec
-    ContractExecResult: ContractExecResult
-    ContractExecResultErr: ContractExecResultErr
-    ContractExecResultErrModule: ContractExecResultErrModule
-    ContractExecResultOk: ContractExecResultOk
-    ContractExecResultResult: ContractExecResultResult
-    ContractExecResultSuccessTo255: ContractExecResultSuccessTo255
-    ContractExecResultSuccessTo260: ContractExecResultSuccessTo260
-    ContractExecResultTo255: ContractExecResultTo255
-    ContractExecResultTo260: ContractExecResultTo260
-    ContractExecResultTo267: ContractExecResultTo267
-    ContractInfo: ContractInfo
-    ContractInstantiateResult: ContractInstantiateResult
-    ContractLayoutArray: ContractLayoutArray
-    ContractLayoutCell: ContractLayoutCell
-    ContractLayoutEnum: ContractLayoutEnum
-    ContractLayoutHash: ContractLayoutHash
-    ContractLayoutHashingStrategy: ContractLayoutHashingStrategy
-    ContractLayoutKey: ContractLayoutKey
-    ContractLayoutStruct: ContractLayoutStruct
-    ContractLayoutStructField: ContractLayoutStructField
-    ContractMessageParamSpec: ContractMessageParamSpec
-    ContractMessageSpec: ContractMessageSpec
-    ContractProject: ContractProject
-    ContractProjectContract: ContractProjectContract
-    ContractProjectSource: ContractProjectSource
-    ContractSelector: ContractSelector
-    ContractStorageKey: ContractStorageKey
-    ContractStorageLayout: ContractStorageLayout
-    ContractTypeSpec: ContractTypeSpec
-    Conviction: Conviction
-    CoreAssignment: CoreAssignment
-    CoreIndex: CoreIndex
-    CoreOccupied: CoreOccupied
-    CouncilMemberOf: CouncilMemberOf
-    CouncilStage: CouncilStage
-    CouncilStageAnnouncing: CouncilStageAnnouncing
-    CouncilStageElection: CouncilStageElection
-    CouncilStageUpdate: CouncilStageUpdate
-    CreatedBlock: CreatedBlock
-    CreateOpeningParameters: CreateOpeningParameters
-    CuratorGroup: CuratorGroup
-    CuratorGroupId: CuratorGroupId
-    CuratorId: CuratorId
-    Data: Data
-    DataObject: DataObject
-    DataObjectCreationParameters: DataObjectCreationParameters
-    DataObjectId: DataObjectId
-    DataObjectIdMap: DataObjectIdMap
-    DataObjectIdSet: DataObjectIdSet
-    DeferredOffenceOf: DeferredOffenceOf
-    DefunctVoter: DefunctVoter
-    DelayKind: DelayKind
-    DelayKindBest: DelayKindBest
-    Delegations: Delegations
-    DeletedContract: DeletedContract
-    DeliveredMessages: DeliveredMessages
-    DepositBalance: DepositBalance
-    DepositBalanceOf: DepositBalanceOf
-    DestroyWitness: DestroyWitness
-    Digest: Digest
-    DigestItem: DigestItem
-    DigestOf: DigestOf
-    DiscussionPost: DiscussionPost
-    DiscussionThread: DiscussionThread
-    DispatchClass: DispatchClass
-    DispatchError: DispatchError
-    DispatchErrorModule: DispatchErrorModule
-    DispatchErrorTo198: DispatchErrorTo198
-    DispatchFeePayment: DispatchFeePayment
-    DispatchInfo: DispatchInfo
-    DispatchInfoTo190: DispatchInfoTo190
-    DispatchInfoTo244: DispatchInfoTo244
-    DispatchOutcome: DispatchOutcome
-    DispatchResult: DispatchResult
-    DispatchResultOf: DispatchResultOf
-    DispatchResultTo198: DispatchResultTo198
-    DisputeLocation: DisputeLocation
-    DisputeResult: DisputeResult
-    DisputeState: DisputeState
-    DisputeStatement: DisputeStatement
-    DisputeStatementSet: DisputeStatementSet
-    DistributionBucket: DistributionBucket
-    DistributionBucketFamily: DistributionBucketFamily
-    DistributionBucketFamilyId: DistributionBucketFamilyId
-    DistributionBucketId: DistributionBucketId
-    DistributionBucketIndex: DistributionBucketIndex
-    DistributionBucketIndexSet: DistributionBucketIndexSet
-    DistributionBucketsPerBagValueConstraint: DistributionBucketsPerBagValueConstraint
-    DoubleEncodedCall: DoubleEncodedCall
-    DoubleVoteReport: DoubleVoteReport
-    DownwardMessage: DownwardMessage
-    Dynamic: Dynamic
-    DynamicBagCreationPolicy: DynamicBagCreationPolicy
-    DynamicBagCreationPolicyDistributorFamiliesMap: DynamicBagCreationPolicyDistributorFamiliesMap
-    DynamicBagId: DynamicBagId
-    DynamicBagType: DynamicBagType
-    DynBagCreationParameters: DynBagCreationParameters
-    EcdsaSignature: EcdsaSignature
-    Ed25519Signature: Ed25519Signature
-    ElectionCompute: ElectionCompute
-    ElectionPhase: ElectionPhase
-    ElectionResult: ElectionResult
-    ElectionScore: ElectionScore
-    ElectionSize: ElectionSize
-    ElectionStatus: ElectionStatus
-    EncodedFinalityProofs: EncodedFinalityProofs
-    EncodedJustification: EncodedJustification
-    EnglishAuction: EnglishAuction
-    EnglishAuctionBid: EnglishAuctionBid
-    EnglishAuctionParams: EnglishAuctionParams
-    Entry: Entry
-    EntryId: EntryId
-    EpochAuthorship: EpochAuthorship
-    Era: Era
-    EraIndex: EraIndex
-    EraPoints: EraPoints
-    EraRewardPoints: EraRewardPoints
-    EraRewards: EraRewards
-    ErrorMetadataLatest: ErrorMetadataLatest
-    ErrorMetadataV10: ErrorMetadataV10
-    ErrorMetadataV11: ErrorMetadataV11
-    ErrorMetadataV12: ErrorMetadataV12
-    ErrorMetadataV13: ErrorMetadataV13
-    ErrorMetadataV14: ErrorMetadataV14
-    ErrorMetadataV9: ErrorMetadataV9
-    EthAccount: EthAccount
-    EthBlock: EthBlock
-    EthBloom: EthBloom
-    EthCallRequest: EthCallRequest
-    EthereumAccountId: EthereumAccountId
-    EthereumAddress: EthereumAddress
-    EthereumLookupSource: EthereumLookupSource
-    EthereumSignature: EthereumSignature
-    EthFilter: EthFilter
-    EthFilterAddress: EthFilterAddress
-    EthFilterChanges: EthFilterChanges
-    EthFilterTopic: EthFilterTopic
-    EthFilterTopicEntry: EthFilterTopicEntry
-    EthFilterTopicInner: EthFilterTopicInner
-    EthHeader: EthHeader
-    EthLog: EthLog
-    EthReceipt: EthReceipt
-    EthRichBlock: EthRichBlock
-    EthRichHeader: EthRichHeader
-    EthStorageProof: EthStorageProof
-    EthSubKind: EthSubKind
-    EthSubParams: EthSubParams
-    EthSubResult: EthSubResult
-    EthSyncInfo: EthSyncInfo
-    EthSyncStatus: EthSyncStatus
-    EthTransaction: EthTransaction
-    EthTransactionAction: EthTransactionAction
-    EthTransactionCondition: EthTransactionCondition
-    EthTransactionRequest: EthTransactionRequest
-    EthTransactionSignature: EthTransactionSignature
-    EthTransactionStatus: EthTransactionStatus
-    EthWork: EthWork
-    Event: Event
-    EventId: EventId
-    EventIndex: EventIndex
-    EventMetadataLatest: EventMetadataLatest
-    EventMetadataV10: EventMetadataV10
-    EventMetadataV11: EventMetadataV11
-    EventMetadataV12: EventMetadataV12
-    EventMetadataV13: EventMetadataV13
-    EventMetadataV14: EventMetadataV14
-    EventMetadataV9: EventMetadataV9
-    EventRecord: EventRecord
-    EvmAccount: EvmAccount
-    EvmLog: EvmLog
-    EvmVicinity: EvmVicinity
-    ExecReturnValue: ExecReturnValue
-    ExecutionFailed: ExecutionFailed
-    ExecutionStatus: ExecutionStatus
-    ExitError: ExitError
-    ExitFatal: ExitFatal
-    ExitReason: ExitReason
-    ExitRevert: ExitRevert
-    ExitSucceed: ExitSucceed
-    ExplicitDisputeStatement: ExplicitDisputeStatement
-    Exposure: Exposure
-    ExtendedBalance: ExtendedBalance
-    ExtendedPostId: ExtendedPostId
-    Extrinsic: Extrinsic
-    ExtrinsicEra: ExtrinsicEra
-    ExtrinsicMetadataLatest: ExtrinsicMetadataLatest
-    ExtrinsicMetadataV11: ExtrinsicMetadataV11
-    ExtrinsicMetadataV12: ExtrinsicMetadataV12
-    ExtrinsicMetadataV13: ExtrinsicMetadataV13
-    ExtrinsicMetadataV14: ExtrinsicMetadataV14
-    ExtrinsicOrHash: ExtrinsicOrHash
-    ExtrinsicPayload: ExtrinsicPayload
-    ExtrinsicPayloadUnknown: ExtrinsicPayloadUnknown
-    ExtrinsicPayloadV4: ExtrinsicPayloadV4
-    ExtrinsicSignature: ExtrinsicSignature
-    ExtrinsicSignatureV4: ExtrinsicSignatureV4
-    ExtrinsicStatus: ExtrinsicStatus
-    ExtrinsicsWeight: ExtrinsicsWeight
-    ExtrinsicUnknown: ExtrinsicUnknown
-    ExtrinsicV4: ExtrinsicV4
-    FeeDetails: FeeDetails
-    FillOpeningParameters: FillOpeningParameters
-    Fixed128: Fixed128
-    Fixed64: Fixed64
-    FixedI128: FixedI128
-    FixedI64: FixedI64
-    FixedU128: FixedU128
-    FixedU64: FixedU64
-    Forcing: Forcing
-    ForkTreePendingChange: ForkTreePendingChange
-    ForkTreePendingChangeNode: ForkTreePendingChangeNode
-    ForumUserId: ForumUserId
-    FullIdentification: FullIdentification
-    FunctionArgumentMetadataLatest: FunctionArgumentMetadataLatest
-    FunctionArgumentMetadataV10: FunctionArgumentMetadataV10
-    FunctionArgumentMetadataV11: FunctionArgumentMetadataV11
-    FunctionArgumentMetadataV12: FunctionArgumentMetadataV12
-    FunctionArgumentMetadataV13: FunctionArgumentMetadataV13
-    FunctionArgumentMetadataV14: FunctionArgumentMetadataV14
-    FunctionArgumentMetadataV9: FunctionArgumentMetadataV9
-    FunctionMetadataLatest: FunctionMetadataLatest
-    FunctionMetadataV10: FunctionMetadataV10
-    FunctionMetadataV11: FunctionMetadataV11
-    FunctionMetadataV12: FunctionMetadataV12
-    FunctionMetadataV13: FunctionMetadataV13
-    FunctionMetadataV14: FunctionMetadataV14
-    FunctionMetadataV9: FunctionMetadataV9
-    FundIndex: FundIndex
-    FundInfo: FundInfo
-    FundingRequestParameters: FundingRequestParameters
-    FundingType: FundingType
-    FundingType_Limited: FundingType_Limited
-    FundingType_Perpetual: FundingType_Perpetual
-    Fungibility: Fungibility
-    Gas: Gas
-    GeneralProposalParameters: GeneralProposalParameters
-    GiltBid: GiltBid
-    GlobalValidationData: GlobalValidationData
-    GlobalValidationSchedule: GlobalValidationSchedule
-    GrandpaCommit: GrandpaCommit
-    GrandpaEquivocation: GrandpaEquivocation
-    GrandpaEquivocationProof: GrandpaEquivocationProof
-    GrandpaEquivocationValue: GrandpaEquivocationValue
-    GrandpaJustification: GrandpaJustification
-    GrandpaPrecommit: GrandpaPrecommit
-    GrandpaPrevote: GrandpaPrevote
-    GrandpaSignedPrecommit: GrandpaSignedPrecommit
-    GroupIndex: GroupIndex
-    H1024: H1024
-    H128: H128
-    H160: H160
-    H2048: H2048
-    H256: H256
-    H32: H32
-    H512: H512
-    H64: H64
-    Hash: Hash
-    HeadData: HeadData
-    Header: Header
-    HeaderPartial: HeaderPartial
-    Health: Health
-    Heartbeat: Heartbeat
-    HeartbeatTo244: HeartbeatTo244
-    HostConfiguration: HostConfiguration
-    HostFnWeights: HostFnWeights
-    HostFnWeightsTo264: HostFnWeightsTo264
-    HrmpChannel: HrmpChannel
-    HrmpChannelId: HrmpChannelId
-    HrmpOpenChannelRequest: HrmpOpenChannelRequest
-    i128: i128
-    I128: I128
-    i16: i16
-    I16: I16
-    i256: i256
-    I256: I256
-    i32: i32
-    I32: I32
-    I32F32: I32F32
-    i64: i64
-    I64: I64
-    i8: i8
-    I8: I8
-    IdentificationTuple: IdentificationTuple
-    IdentityFields: IdentityFields
-    IdentityInfo: IdentityInfo
-    IdentityInfoAdditional: IdentityInfoAdditional
-    IdentityJudgement: IdentityJudgement
-    ImmortalEra: ImmortalEra
-    ImportedAux: ImportedAux
-    InboundDownwardMessage: InboundDownwardMessage
-    InboundHrmpMessage: InboundHrmpMessage
-    InboundHrmpMessages: InboundHrmpMessages
-    InboundLaneData: InboundLaneData
-    InboundRelayer: InboundRelayer
-    InboundStatus: InboundStatus
-    IncludedBlocks: IncludedBlocks
-    InclusionFee: InclusionFee
-    IncomingParachain: IncomingParachain
-    IncomingParachainDeploy: IncomingParachainDeploy
-    IncomingParachainFixed: IncomingParachainFixed
-    Index: Index
-    IndicesLookupSource: IndicesLookupSource
-    IndividualExposure: IndividualExposure
-    InitializationData: InitializationData
-    InitTransactionalStatus: InitTransactionalStatus
-    InputValidationLengthConstraintU64: InputValidationLengthConstraintU64
-    InstanceDetails: InstanceDetails
-    InstanceId: InstanceId
-    InstanceMetadata: InstanceMetadata
-    InstantiateRequest: InstantiateRequest
-    InstantiateReturnValue: InstantiateReturnValue
-    InstructionV2: InstructionV2
-    InstructionWeights: InstructionWeights
-    InteriorMultiLocation: InteriorMultiLocation
-    InvalidDisputeStatementKind: InvalidDisputeStatementKind
-    InvalidTransaction: InvalidTransaction
-    InviteMembershipParameters: InviteMembershipParameters
-    IsCensored: IsCensored
-    JoyBalance: JoyBalance
-    Json: Json
-    Junction: Junction
-    Junctions: Junctions
-    JunctionsV1: JunctionsV1
-    JunctionsV2: JunctionsV2
-    JunctionV0: JunctionV0
-    JunctionV1: JunctionV1
-    JunctionV2: JunctionV2
-    Justification: Justification
-    JustificationNotification: JustificationNotification
-    Justifications: Justifications
-    Key: Key
-    KeyOwnerProof: KeyOwnerProof
-    Keys: Keys
-    KeyType: KeyType
-    KeyTypeId: KeyTypeId
-    KeyValue: KeyValue
-    KeyValueOption: KeyValueOption
-    Kind: Kind
-    LaneId: LaneId
-    LastContribution: LastContribution
-    LastRuntimeUpgradeInfo: LastRuntimeUpgradeInfo
-    LeasePeriod: LeasePeriod
-    LeasePeriodOf: LeasePeriodOf
-    LimitPerPeriod: LimitPerPeriod
-    Limits: Limits
-    LimitsTo264: LimitsTo264
-    LocalValidationData: LocalValidationData
-    LockIdentifier: LockIdentifier
-    LookupSource: LookupSource
-    LookupTarget: LookupTarget
-    LotteryConfig: LotteryConfig
-    MaxNumber: MaxNumber
-    MaybeRandomness: MaybeRandomness
-    MaybeVrf: MaybeVrf
-    MemberCount: MemberCount
-    MemberId: MemberId
-    Membership: Membership
-    MembershipProof: MembershipProof
-    MerkleProof: MerkleProof
-    MerkleSide: MerkleSide
-    MessageData: MessageData
-    MessageId: MessageId
-    MessageIngestionType: MessageIngestionType
-    MessageKey: MessageKey
-    MessageNonce: MessageNonce
-    MessageQueueChain: MessageQueueChain
-    MessagesDeliveryProofOf: MessagesDeliveryProofOf
-    MessagesProofOf: MessagesProofOf
-    MessagingStateSnapshot: MessagingStateSnapshot
-    MessagingStateSnapshotEgressEntry: MessagingStateSnapshotEgressEntry
-    MetadataAll: MetadataAll
-    MetadataLatest: MetadataLatest
-    MetadataV10: MetadataV10
-    MetadataV11: MetadataV11
-    MetadataV12: MetadataV12
-    MetadataV13: MetadataV13
-    MetadataV14: MetadataV14
-    MetadataV9: MetadataV9
-    MmrLeafProof: MmrLeafProof
-    MmrRootHash: MmrRootHash
-    ModerationPermissionsByLevel: ModerationPermissionsByLevel
-    ModeratorId: ModeratorId
-    ModuleConstantMetadataLatest: ModuleConstantMetadataLatest
-    ModuleConstantMetadataV10: ModuleConstantMetadataV10
-    ModuleConstantMetadataV11: ModuleConstantMetadataV11
-    ModuleConstantMetadataV12: ModuleConstantMetadataV12
-    ModuleConstantMetadataV13: ModuleConstantMetadataV13
-    ModuleConstantMetadataV9: ModuleConstantMetadataV9
-    ModuleId: ModuleId
-    ModuleMetadataLatest: ModuleMetadataLatest
-    ModuleMetadataV10: ModuleMetadataV10
-    ModuleMetadataV11: ModuleMetadataV11
-    ModuleMetadataV12: ModuleMetadataV12
-    ModuleMetadataV13: ModuleMetadataV13
-    ModuleMetadataV9: ModuleMetadataV9
-    Moment: Moment
-    MomentOf: MomentOf
-    MoreAttestations: MoreAttestations
-    MortalEra: MortalEra
-    MultiAddress: MultiAddress
-    MultiAsset: MultiAsset
-    MultiAssetFilter: MultiAssetFilter
-    MultiAssetFilterV1: MultiAssetFilterV1
-    MultiAssetFilterV2: MultiAssetFilterV2
-    MultiAssets: MultiAssets
-    MultiAssetsV1: MultiAssetsV1
-    MultiAssetsV2: MultiAssetsV2
-    MultiAssetV0: MultiAssetV0
-    MultiAssetV1: MultiAssetV1
-    MultiAssetV2: MultiAssetV2
-    MultiDisputeStatementSet: MultiDisputeStatementSet
-    MultiLocation: MultiLocation
-    MultiLocationV0: MultiLocationV0
-    MultiLocationV1: MultiLocationV1
-    MultiLocationV2: MultiLocationV2
-    Multiplier: Multiplier
-    Multisig: Multisig
-    MultiSignature: MultiSignature
-    MultiSigner: MultiSigner
-    NetworkId: NetworkId
-    NetworkState: NetworkState
-    NetworkStatePeerset: NetworkStatePeerset
-    NetworkStatePeersetInfo: NetworkStatePeersetInfo
-    NewBidder: NewBidder
-    NextAuthority: NextAuthority
-    NextConfigDescriptor: NextConfigDescriptor
-    NextConfigDescriptorV1: NextConfigDescriptorV1
-    NftCounter: NftCounter
-    NftIssuanceParameters: NftIssuanceParameters
-    NftLimitId: NftLimitId
-    NftLimitPeriod: NftLimitPeriod
-    NftMetadata: NftMetadata
-    NftOwner: NftOwner
-    NodeRole: NodeRole
-    Nominations: Nominations
-    NominatorIndex: NominatorIndex
-    NominatorIndexCompact: NominatorIndexCompact
-    NotConnectedPeer: NotConnectedPeer
-    Null: Null
-    OffchainAccuracy: OffchainAccuracy
-    OffchainAccuracyCompact: OffchainAccuracyCompact
-    OffenceDetails: OffenceDetails
-    Offender: Offender
-    OfferingState: OfferingState
-    OpaqueCall: OpaqueCall
-    OpaqueMultiaddr: OpaqueMultiaddr
-    OpaqueNetworkState: OpaqueNetworkState
-    OpaquePeerId: OpaquePeerId
-    OpaqueTimeSlot: OpaqueTimeSlot
-    OpenAuction: OpenAuction
-    OpenAuctionBid: OpenAuctionBid
-    OpenAuctionId: OpenAuctionId
-    OpenAuctionParams: OpenAuctionParams
-    Opening: Opening
-    OpeningId: OpeningId
-    OpeningType: OpeningType
-    OpenTip: OpenTip
-    OpenTipFinderTo225: OpenTipFinderTo225
-    OpenTipTip: OpenTipTip
-    OpenTipTo225: OpenTipTo225
-    OperatingMode: OperatingMode
-    OptionResult: OptionResult
-    OracleJudgment: OracleJudgment
-    OracleWorkEntryJudgment: OracleWorkEntryJudgment
-    OracleWorkEntryJudgment_Winner: OracleWorkEntryJudgment_Winner
-    Origin: Origin
-    OriginCaller: OriginCaller
-    OriginKindV0: OriginKindV0
-    OriginKindV1: OriginKindV1
-    OriginKindV2: OriginKindV2
-    OutboundHrmpMessage: OutboundHrmpMessage
-    OutboundLaneData: OutboundLaneData
-    OutboundMessageFee: OutboundMessageFee
-    OutboundPayload: OutboundPayload
-    OutboundStatus: OutboundStatus
-    Outcome: Outcome
-    OverweightIndex: OverweightIndex
-    OwnedNft: OwnedNft
-    Owner: Owner
-    PageCounter: PageCounter
-    PageIndexData: PageIndexData
-    PalletCallMetadataLatest: PalletCallMetadataLatest
-    PalletCallMetadataV14: PalletCallMetadataV14
-    PalletConstantMetadataLatest: PalletConstantMetadataLatest
-    PalletConstantMetadataV14: PalletConstantMetadataV14
-    PalletErrorMetadataLatest: PalletErrorMetadataLatest
-    PalletErrorMetadataV14: PalletErrorMetadataV14
-    PalletEventMetadataLatest: PalletEventMetadataLatest
-    PalletEventMetadataV14: PalletEventMetadataV14
-    PalletId: PalletId
-    PalletMetadataLatest: PalletMetadataLatest
-    PalletMetadataV14: PalletMetadataV14
-    PalletsOrigin: PalletsOrigin
-    PalletStorageMetadataLatest: PalletStorageMetadataLatest
-    PalletStorageMetadataV14: PalletStorageMetadataV14
-    PalletVersion: PalletVersion
-    ParachainDispatchOrigin: ParachainDispatchOrigin
-    ParachainInherentData: ParachainInherentData
-    ParachainProposal: ParachainProposal
-    ParachainsInherentData: ParachainsInherentData
-    ParaGenesisArgs: ParaGenesisArgs
-    ParaId: ParaId
-    ParaInfo: ParaInfo
-    ParaLifecycle: ParaLifecycle
-    Parameter: Parameter
-    ParaPastCodeMeta: ParaPastCodeMeta
-    ParaScheduling: ParaScheduling
-    ParathreadClaim: ParathreadClaim
-    ParathreadClaimQueue: ParathreadClaimQueue
-    ParathreadEntry: ParathreadEntry
-    ParaValidatorIndex: ParaValidatorIndex
-    ParticipantId: ParticipantId
-    PausableChannelFeature: PausableChannelFeature
-    Payment: Payment
-    PaymentWithVesting: PaymentWithVesting
-    Pays: Pays
-    Peer: Peer
-    PeerEndpoint: PeerEndpoint
-    PeerEndpointAddr: PeerEndpointAddr
-    PeerInfo: PeerInfo
-    PeerPing: PeerPing
-    Penalty: Penalty
-    PendingChange: PendingChange
-    PendingPause: PendingPause
-    PendingResume: PendingResume
-    Perbill: Perbill
-    Percent: Percent
-    PerDispatchClassU32: PerDispatchClassU32
-    PerDispatchClassWeight: PerDispatchClassWeight
-    PerDispatchClassWeightsPerClass: PerDispatchClassWeightsPerClass
-    Period: Period
-    Permill: Permill
-    PermissionLatest: PermissionLatest
-    PermissionsV1: PermissionsV1
-    PermissionVersions: PermissionVersions
-    Perquintill: Perquintill
-    PersistedValidationData: PersistedValidationData
-    PerU16: PerU16
-    Phantom: Phantom
-    PhantomData: PhantomData
-    Phase: Phase
-    PhragmenScore: PhragmenScore
-    Points: Points
-    Poll: Poll
-    PollAlternative: PollAlternative
-    PollInput: PollInput
-    PortableRegistry: PortableRegistry
-    PortableType: PortableType
-    Post: Post
-    PostId: PostId
-    PostReactionId: PostReactionId
-    Precommits: Precommits
-    PrefabWasmModule: PrefabWasmModule
-    PrefixedStorageKey: PrefixedStorageKey
-    PreimageStatus: PreimageStatus
-    PreimageStatusAvailable: PreimageStatusAvailable
-    PreRuntime: PreRuntime
-    Prevotes: Prevotes
-    Priority: Priority
-    PriorLock: PriorLock
-    PrivilegedActor: PrivilegedActor
-    ProofElement: ProofElement
-    PropIndex: PropIndex
-    Proposal: Proposal
-    ProposalDecision: ProposalDecision
-    ProposalDetails: ProposalDetails
-    ProposalDetailsOf: ProposalDetailsOf
-    ProposalId: ProposalId
-    ProposalIndex: ProposalIndex
-    ProposalOf: ProposalOf
-    ProposalParameters: ProposalParameters
-    ProposalStatus: ProposalStatus
-    ProxyAnnouncement: ProxyAnnouncement
-    ProxyDefinition: ProxyDefinition
-    ProxyState: ProxyState
-    ProxyType: ProxyType
-    PullPayment: PullPayment
-    QueryId: QueryId
-    QueryStatus: QueryStatus
-    QueueConfigData: QueueConfigData
-    QueuedParathread: QueuedParathread
-    Randomness: Randomness
-    Raw: Raw
-    RawAuraPreDigest: RawAuraPreDigest
-    RawBabePreDigest: RawBabePreDigest
-    RawBabePreDigestCompat: RawBabePreDigestCompat
-    RawBabePreDigestPrimary: RawBabePreDigestPrimary
-    RawBabePreDigestPrimaryTo159: RawBabePreDigestPrimaryTo159
-    RawBabePreDigestSecondaryPlain: RawBabePreDigestSecondaryPlain
-    RawBabePreDigestSecondaryTo159: RawBabePreDigestSecondaryTo159
-    RawBabePreDigestSecondaryVRF: RawBabePreDigestSecondaryVRF
-    RawBabePreDigestTo159: RawBabePreDigestTo159
-    RawOrigin: RawOrigin
-    RawSolution: RawSolution
-    RawSolutionTo265: RawSolutionTo265
-    RawSolutionWith16: RawSolutionWith16
-    RawSolutionWith24: RawSolutionWith24
-    RawVRFOutput: RawVRFOutput
-    ReadProof: ReadProof
-    ReadySolution: ReadySolution
-    Reasons: Reasons
-    RecoveryConfig: RecoveryConfig
-    RefCount: RefCount
-    RefCountTo259: RefCountTo259
-    ReferendumIndex: ReferendumIndex
-    ReferendumInfo: ReferendumInfo
-    ReferendumInfoFinished: ReferendumInfoFinished
-    ReferendumInfoTo239: ReferendumInfoTo239
-    ReferendumStage: ReferendumStage
-    ReferendumStageRevealing: ReferendumStageRevealing
-    ReferendumStageVoting: ReferendumStageVoting
-    ReferendumStatus: ReferendumStatus
-    RegisteredParachainInfo: RegisteredParachainInfo
-    RegistrarIndex: RegistrarIndex
-    RegistrarInfo: RegistrarInfo
-    Registration: Registration
-    RegistrationJudgement: RegistrationJudgement
-    RelayBlockNumber: RelayBlockNumber
-    RelayChainBlockNumber: RelayChainBlockNumber
-    RelayChainHash: RelayChainHash
-    RelayerId: RelayerId
-    RelayHash: RelayHash
-    Releases: Releases
-    Remark: Remark
-    Renouncing: Renouncing
-    RentProjection: RentProjection
-    ReplacementTimes: ReplacementTimes
-    Reply: Reply
-    ReplyId: ReplyId
-    ReplyToDelete: ReplyToDelete
-    ReportedRoundStates: ReportedRoundStates
-    Reporter: Reporter
-    ReportIdOf: ReportIdOf
-    ReserveData: ReserveData
-    ReserveIdentifier: ReserveIdentifier
-    Response: Response
-    ResponseV0: ResponseV0
-    ResponseV1: ResponseV1
-    ResponseV2: ResponseV2
-    ResponseV2Error: ResponseV2Error
-    ResponseV2Result: ResponseV2Result
-    Retriable: Retriable
-    RewardDestination: RewardDestination
-    RewardPaymentType: RewardPaymentType
-    RewardPoint: RewardPoint
-    RoundSnapshot: RoundSnapshot
-    RoundState: RoundState
-    Royalty: Royalty
-    RpcMethods: RpcMethods
-    RuntimeDbWeight: RuntimeDbWeight
-    RuntimeDispatchInfo: RuntimeDispatchInfo
-    RuntimeVersion: RuntimeVersion
-    RuntimeVersionApi: RuntimeVersionApi
-    RuntimeVersionPartial: RuntimeVersionPartial
-    Schedule: Schedule
-    Scheduled: Scheduled
-    ScheduledTo254: ScheduledTo254
-    SchedulePeriod: SchedulePeriod
-    SchedulePriority: SchedulePriority
-    ScheduleTo212: ScheduleTo212
-    ScheduleTo258: ScheduleTo258
-    ScheduleTo264: ScheduleTo264
-    Scheduling: Scheduling
-    Seal: Seal
-    SealV0: SealV0
-    SeatHolder: SeatHolder
-    SeedOf: SeedOf
-    ServiceQuality: ServiceQuality
-    SessionIndex: SessionIndex
-    SessionInfo: SessionInfo
-    SessionInfoValidatorGroup: SessionInfoValidatorGroup
-    SessionKeys1: SessionKeys1
-    SessionKeys10: SessionKeys10
-    SessionKeys10B: SessionKeys10B
-    SessionKeys2: SessionKeys2
-    SessionKeys3: SessionKeys3
-    SessionKeys4: SessionKeys4
-    SessionKeys5: SessionKeys5
-    SessionKeys6: SessionKeys6
-    SessionKeys6B: SessionKeys6B
-    SessionKeys7: SessionKeys7
-    SessionKeys7B: SessionKeys7B
-    SessionKeys8: SessionKeys8
-    SessionKeys8B: SessionKeys8B
-    SessionKeys9: SessionKeys9
-    SessionKeys9B: SessionKeys9B
-    SetId: SetId
-    SetIndex: SetIndex
-    SetLeadParams: SetLeadParams
-    Si0Field: Si0Field
-    Si0LookupTypeId: Si0LookupTypeId
-    Si0Path: Si0Path
-    Si0Type: Si0Type
-    Si0TypeDef: Si0TypeDef
-    Si0TypeDefArray: Si0TypeDefArray
-    Si0TypeDefBitSequence: Si0TypeDefBitSequence
-    Si0TypeDefCompact: Si0TypeDefCompact
-    Si0TypeDefComposite: Si0TypeDefComposite
-    Si0TypeDefPhantom: Si0TypeDefPhantom
-    Si0TypeDefPrimitive: Si0TypeDefPrimitive
-    Si0TypeDefSequence: Si0TypeDefSequence
-    Si0TypeDefTuple: Si0TypeDefTuple
-    Si0TypeDefVariant: Si0TypeDefVariant
-    Si0TypeParameter: Si0TypeParameter
-    Si0Variant: Si0Variant
-    Side: Side
-    SiField: SiField
-    Signature: Signature
-    SignedAvailabilityBitfield: SignedAvailabilityBitfield
-    SignedAvailabilityBitfields: SignedAvailabilityBitfields
-    SignedBlock: SignedBlock
-    SignedBlockWithJustification: SignedBlockWithJustification
-    SignedBlockWithJustifications: SignedBlockWithJustifications
-    SignedExtensionMetadataLatest: SignedExtensionMetadataLatest
-    SignedExtensionMetadataV14: SignedExtensionMetadataV14
-    SignedSubmission: SignedSubmission
-    SignedSubmissionOf: SignedSubmissionOf
-    SignedSubmissionTo276: SignedSubmissionTo276
-    SignerPayload: SignerPayload
-    SigningContext: SigningContext
-    SiLookupTypeId: SiLookupTypeId
-    SingleDataObjectUploadParams: SingleDataObjectUploadParams
-    SiPath: SiPath
-    SiType: SiType
-    SiTypeDef: SiTypeDef
-    SiTypeDefArray: SiTypeDefArray
-    SiTypeDefBitSequence: SiTypeDefBitSequence
-    SiTypeDefCompact: SiTypeDefCompact
-    SiTypeDefComposite: SiTypeDefComposite
-    SiTypeDefPrimitive: SiTypeDefPrimitive
-    SiTypeDefSequence: SiTypeDefSequence
-    SiTypeDefTuple: SiTypeDefTuple
-    SiTypeDefVariant: SiTypeDefVariant
-    SiTypeParameter: SiTypeParameter
-    SiVariant: SiVariant
-    SlashingSpans: SlashingSpans
-    SlashingSpansTo204: SlashingSpansTo204
-    SlashJournalEntry: SlashJournalEntry
-    Slot: Slot
-    SlotNumber: SlotNumber
-    SlotRange: SlotRange
-    SocietyJudgement: SocietyJudgement
-    SocietyVote: SocietyVote
-    SolutionOrSnapshotSize: SolutionOrSnapshotSize
-    SolutionSupport: SolutionSupport
-    SolutionSupports: SolutionSupports
-    SpanIndex: SpanIndex
-    SpanRecord: SpanRecord
-    Sr25519Signature: Sr25519Signature
-    StakeParameters: StakeParameters
-    StakePolicy: StakePolicy
-    StakingAccountMemberBinding: StakingAccountMemberBinding
-    StakingLedger: StakingLedger
-    StakingLedgerTo223: StakingLedgerTo223
-    StakingLedgerTo240: StakingLedgerTo240
-    Statement: Statement
-    StatementKind: StatementKind
-    Static: Static
-    StaticBagId: StaticBagId
-    StorageAssets: StorageAssets
-    StorageBucket: StorageBucket
-    StorageBucketId: StorageBucketId
-    StorageBucketIdSet: StorageBucketIdSet
-    StorageBucketOperatorStatus: StorageBucketOperatorStatus
-    StorageBucketsPerBagValueConstraint: StorageBucketsPerBagValueConstraint
-    StorageChangeSet: StorageChangeSet
-    StorageData: StorageData
-    StorageEntryMetadataLatest: StorageEntryMetadataLatest
-    StorageEntryMetadataV10: StorageEntryMetadataV10
-    StorageEntryMetadataV11: StorageEntryMetadataV11
-    StorageEntryMetadataV12: StorageEntryMetadataV12
-    StorageEntryMetadataV13: StorageEntryMetadataV13
-    StorageEntryMetadataV14: StorageEntryMetadataV14
-    StorageEntryMetadataV9: StorageEntryMetadataV9
-    StorageEntryModifierLatest: StorageEntryModifierLatest
-    StorageEntryModifierV10: StorageEntryModifierV10
-    StorageEntryModifierV11: StorageEntryModifierV11
-    StorageEntryModifierV12: StorageEntryModifierV12
-    StorageEntryModifierV13: StorageEntryModifierV13
-    StorageEntryModifierV14: StorageEntryModifierV14
-    StorageEntryModifierV9: StorageEntryModifierV9
-    StorageEntryTypeLatest: StorageEntryTypeLatest
-    StorageEntryTypeV10: StorageEntryTypeV10
-    StorageEntryTypeV11: StorageEntryTypeV11
-    StorageEntryTypeV12: StorageEntryTypeV12
-    StorageEntryTypeV13: StorageEntryTypeV13
-    StorageEntryTypeV14: StorageEntryTypeV14
-    StorageEntryTypeV9: StorageEntryTypeV9
-    StorageHasher: StorageHasher
-    StorageHasherV10: StorageHasherV10
-    StorageHasherV11: StorageHasherV11
-    StorageHasherV12: StorageHasherV12
-    StorageHasherV13: StorageHasherV13
-    StorageHasherV14: StorageHasherV14
-    StorageHasherV9: StorageHasherV9
-    StorageKey: StorageKey
-    StorageKind: StorageKind
-    StorageMetadataLatest: StorageMetadataLatest
-    StorageMetadataV10: StorageMetadataV10
-    StorageMetadataV11: StorageMetadataV11
-    StorageMetadataV12: StorageMetadataV12
-    StorageMetadataV13: StorageMetadataV13
-    StorageMetadataV9: StorageMetadataV9
-    StorageProof: StorageProof
-    StorageProviderId: StorageProviderId
-    StoredPendingChange: StoredPendingChange
-    StoredState: StoredState
-    StrikeCount: StrikeCount
-    SubId: SubId
-    SubmissionIndicesOf: SubmissionIndicesOf
-    Supports: Supports
-    SyncState: SyncState
-    SystemInherentData: SystemInherentData
-    SystemOrigin: SystemOrigin
-    Tally: Tally
-    TaskAddress: TaskAddress
-    TAssetBalance: TAssetBalance
-    TAssetDepositBalance: TAssetDepositBalance
-    TerminateRoleParameters: TerminateRoleParameters
-    Text: Text
-    Thread: Thread
-    ThreadId: ThreadId
-    ThreadMode: ThreadMode
-    ThreadOf: ThreadOf
-    Timepoint: Timepoint
-    Title: Title
-    TokenAllocation: TokenAllocation
-    TokenError: TokenError
-    TokenId: TokenId
-    TokenIssuanceParams: TokenIssuanceParams
-    TokenSale: TokenSale
-    TokenSaleId: TokenSaleId
-    TokenSaleParams: TokenSaleParams
-    TombstoneContractInfo: TombstoneContractInfo
-    TraceBlockResponse: TraceBlockResponse
-    TraceError: TraceError
-    TransactionalStatus: TransactionalStatus
-    TransactionInfo: TransactionInfo
-    TransactionPriority: TransactionPriority
-    TransactionStorageProof: TransactionStorageProof
-    TransactionValidityError: TransactionValidityError
-    TransferParameters: TransferParameters
-    TransferPolicy: TransferPolicy
-    TransferPolicyParams: TransferPolicyParams
-    TransientValidationData: TransientValidationData
-    TreasuryProposal: TreasuryProposal
-    TrieId: TrieId
-    TrieIndex: TrieIndex
-    Type: Type
-    u128: u128
-    U128: U128
-    u16: u16
-    U16: U16
-    u256: u256
-    U256: U256
-    u32: u32
-    U32: U32
-    U32F32: U32F32
-    u64: u64
-    U64: U64
-    u8: u8
-    U8: U8
-    UnappliedSlash: UnappliedSlash
-    UnappliedSlashOther: UnappliedSlashOther
-    UncleEntryItem: UncleEntryItem
-    UnknownTransaction: UnknownTransaction
-    UnlockChunk: UnlockChunk
-    UnrewardedRelayer: UnrewardedRelayer
-    UnrewardedRelayersState: UnrewardedRelayersState
-    UpdateChannelPayoutsParameters: UpdateChannelPayoutsParameters
-    UpdatedBody: UpdatedBody
-    UpdatedTitle: UpdatedTitle
-    UpgradeGoAhead: UpgradeGoAhead
-    UpgradeRestriction: UpgradeRestriction
-    UploadContent: UploadContent
-    UploadParameters: UploadParameters
-    UpwardMessage: UpwardMessage
-    Url: Url
-    usize: usize
-    USize: USize
-    ValidatedPayment: ValidatedPayment
-    ValidationCode: ValidationCode
-    ValidationCodeHash: ValidationCodeHash
-    ValidationData: ValidationData
-    ValidationDataType: ValidationDataType
-    ValidationFunctionParams: ValidationFunctionParams
-    ValidatorCount: ValidatorCount
-    ValidatorId: ValidatorId
-    ValidatorIdOf: ValidatorIdOf
-    ValidatorIndex: ValidatorIndex
-    ValidatorIndexCompact: ValidatorIndexCompact
-    ValidatorPrefs: ValidatorPrefs
-    ValidatorPrefsTo145: ValidatorPrefsTo145
-    ValidatorPrefsTo196: ValidatorPrefsTo196
-    ValidatorPrefsWithBlocked: ValidatorPrefsWithBlocked
-    ValidatorPrefsWithCommission: ValidatorPrefsWithCommission
-    ValidatorSetId: ValidatorSetId
-    ValidatorSignature: ValidatorSignature
-    ValidDisputeStatementKind: ValidDisputeStatementKind
-    ValidityAttestation: ValidityAttestation
-    VecInboundHrmpMessage: VecInboundHrmpMessage
-    VersionedMultiAsset: VersionedMultiAsset
-    VersionedMultiAssets: VersionedMultiAssets
-    VersionedMultiLocation: VersionedMultiLocation
-    VersionedResponse: VersionedResponse
-    VersionedXcm: VersionedXcm
-    VersionMigrationStage: VersionMigrationStage
-    VestingInfo: VestingInfo
-    VestingSchedule: VestingSchedule
-    VestingScheduleParams: VestingScheduleParams
-    VestingSource: VestingSource
-    Video: Video
-    VideoCreationParameters: VideoCreationParameters
-    VideoId: VideoId
-    VideoUpdateParameters: VideoUpdateParameters
-    Vote: Vote
-    VoteIndex: VoteIndex
-    VoteKind: VoteKind
-    VotePower: VotePower
-    Voter: Voter
-    VoterInfo: VoterInfo
-    Votes: Votes
-    VotesTo230: VotesTo230
-    VoteThreshold: VoteThreshold
-    VoteWeight: VoteWeight
-    Voting: Voting
-    VotingDelegating: VotingDelegating
-    VotingDirect: VotingDirect
-    VotingDirectVote: VotingDirectVote
-    VotingResults: VotingResults
-    Voucher: Voucher
-    VouchingStatus: VouchingStatus
-    VrfData: VrfData
-    VrfOutput: VrfOutput
-    VrfProof: VrfProof
-    Weight: Weight
-    WeightLimitV2: WeightLimitV2
-    WeightMultiplier: WeightMultiplier
-    WeightPerClass: WeightPerClass
-    WeightToFeeCoefficient: WeightToFeeCoefficient
-    WhitelistParams: WhitelistParams
-    WildFungibility: WildFungibility
-    WildMultiAsset: WildMultiAsset
-    WildMultiAssetV1: WildMultiAssetV1
-    WinnersData: WinnersData
-    WinnersDataTuple: WinnersDataTuple
-    WinningData: WinningData
-    WinningDataEntry: WinningDataEntry
-    WithdrawReasons: WithdrawReasons
-    Worker: Worker
-    WorkerId: WorkerId
-    WorkerInfo: WorkerInfo
-    WorkingGroup: WorkingGroup
-    Xcm: Xcm
-    XcmAssetId: XcmAssetId
-    XcmError: XcmError
-    XcmErrorV0: XcmErrorV0
-    XcmErrorV1: XcmErrorV1
-    XcmErrorV2: XcmErrorV2
-    XcmOrder: XcmOrder
-    XcmOrderV0: XcmOrderV0
-    XcmOrderV1: XcmOrderV1
-    XcmOrigin: XcmOrigin
-    XcmOriginKind: XcmOriginKind
-    XcmpMessageFormat: XcmpMessageFormat
-    XcmV0: XcmV0
-    XcmV1: XcmV1
-    XcmV2: XcmV2
-    XcmVersion: XcmVersion
-    YearlyRate: YearlyRate
-  }
-}
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-consts.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-consts.d.ts
index 9799689..d73fad2 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-consts.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-consts.d.ts
@@ -157,6 +157,10 @@ declare module '@polkadot/api-base/types/consts' {
              * Exports const - default global weekly NFT limit.
              **/
             defaultGlobalWeeklyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+            /**
+             * Export const - max cashout allowed limits
+             **/
+            maximumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
             /**
              * Exports const - max number of keys per curator_group.permissions_by_level map instance
              **/
@@ -169,6 +173,10 @@ declare module '@polkadot/api-base/types/consts' {
              * Exports const - max number of curators per group
              **/
             maxNumberOfCuratorsPerGroup: u32 & AugmentedConst<ApiType>;
+            /**
+             * Export const - min cashout allowed limits
+             **/
+            minimumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
         };
         contentWorkingGroup: {
             /**
@@ -640,6 +648,10 @@ declare module '@polkadot/api-base/types/consts' {
             terminateWorkingGroupLeadProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
             updateChannelPayoutsProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
             updateGlobalNftLimitProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Max yearly patronage rate update proposal
+             **/
+            updateMaxYearlyPatronageRate: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
             /**
              * Exports 'Update Working Group Budget' proposal parameters.
              **/
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-errors.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-errors.d.ts
index 7e3d672..fb7f6f4 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-errors.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-errors.d.ts
@@ -509,6 +509,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Invalid extrinsic call: Channel state bloat bond changed.
              **/
             ChannelStateBloatBondChanged: AugmentedError<ApiType>;
+            /**
+             * Channel Transfers are blocked during active AMM
+             **/
+            ChannelTransfersBlockedDuringActiveAmm: AugmentedError<ApiType>;
             /**
              * Channel Transfers are blocked during revenue splits
              **/
@@ -1607,6 +1611,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Handle must be provided during registration.
              **/
             HandleMustBeProvidedDuringRegistration: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover payment.
+             **/
+            InsufficientBalanceToCoverPayment: AugmentedError<ApiType>;
             /**
              * Insufficient balance to cover stake.
              **/
@@ -2272,6 +2280,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Cannot Deissue Token with outstanding accounts
              **/
             CannotDeissueTokenWithOutstandingAccounts: AugmentedError<ApiType>;
+            /**
+             * No Sale if Amm is active
+             **/
+            CannotInitSaleIfAmmIsActive: AugmentedError<ApiType>;
             /**
              * Attempt to issue in a split with zero allocation amount
              **/
@@ -2288,6 +2300,14 @@ declare module '@polkadot/api-base/types/errors' {
              * Attempt to participate in a split with zero token to stake
              **/
             CannotParticipateInSplitWithZeroAmount: AugmentedError<ApiType>;
+            /**
+             * Curve slope parameters below minimum allowed
+             **/
+            CurveSlopeParametersTooLow: AugmentedError<ApiType>;
+            /**
+             * Deadline constraint not satisfied
+             **/
+            DeadlineExpired: AugmentedError<ApiType>;
             /**
              * At least one of the members provided as part of InitialAllocation does not exist
              **/
@@ -2304,10 +2324,18 @@ declare module '@polkadot/api-base/types/errors' {
              * Insufficient JOY Balance to cover the transaction costs
              **/
             InsufficientJoyBalance: AugmentedError<ApiType>;
+            /**
+             * Creator token balance is insufficient
+             **/
+            InsufficientTokenBalance: AugmentedError<ApiType>;
             /**
              * Account's transferrable balance is insufficient to perform the transfer or initialize token sale
              **/
             InsufficientTransferrableBalance: AugmentedError<ApiType>;
+            /**
+             * Invalid bonding curve construction parameters
+             **/
+            InvalidCurveParameters: AugmentedError<ApiType>;
             /**
              * The amount of JOY to be transferred is not enough to keep the destination account alive
              **/
@@ -2329,6 +2357,11 @@ declare module '@polkadot/api-base/types/errors' {
              * Amount of tokens to purchase on sale exceeds the quantity of tokens still available on the sale
              **/
             NotEnoughTokensOnSale: AugmentedError<ApiType>;
+            /**
+             * ------ AMM ---------------------------------------------------------
+             * not in AMM state
+             **/
+            NotInAmmState: AugmentedError<ApiType>;
             /**
              * There are no remaining tokes to recover from the previous token sale.
              **/
@@ -2337,6 +2370,10 @@ declare module '@polkadot/api-base/types/errors' {
              * The token has no upcoming sale
              **/
             NoUpcomingSale: AugmentedError<ApiType>;
+            /**
+             * Oustanding AMM-provided supply constitutes too large percentage of the token's total supply
+             **/
+            OutstandingAmmProvidedSupplyTooLarge: AugmentedError<ApiType>;
             /**
              * Previous sale was still not finalized, finalize it first.
              **/
@@ -2412,6 +2449,11 @@ declare module '@polkadot/api-base/types/errors' {
              **/
             SaleUpperBoundQuantityIsZero: AugmentedError<ApiType>;
             /**
+             * Slippage tolerance constraint tolerance not satisfied
+             **/
+            SlippageToleranceExceeded: AugmentedError<ApiType>;
+            /**
+             * -------- Patronage --------------------------------------------------
              * Target Rate is higher than current patronage rate
              **/
             TargetPatronageRateIsHigherThanCurrentRate: AugmentedError<ApiType>;
@@ -2430,6 +2472,10 @@ declare module '@polkadot/api-base/types/errors' {
             /**
              * Transfer destination member id invalid
              **/
+            TooManyTransferOutputs: AugmentedError<ApiType>;
+            /**
+             * At least one of the transfer destinations is not an existing member id
+             **/
             TransferDestinationMemberDoesNotExist: AugmentedError<ApiType>;
             /**
              * User already participating in the revenue split
@@ -2439,6 +2485,10 @@ declare module '@polkadot/api-base/types/errors' {
              * User is not participating in any split
              **/
             UserNotParticipantingInAnySplit: AugmentedError<ApiType>;
+            /**
+             * Provided value for patronage is too big (yearly format)
+             **/
+            YearlyPatronageRateLimitExceeded: AugmentedError<ApiType>;
         };
         proposalsCodex: {
             /**
@@ -2529,6 +2579,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Invalid working group budget capacity parameter
              **/
             InvalidWorkingGroupBudgetCapacity: AugmentedError<ApiType>;
+            /**
+             * Max yearly patronage rate cannot be zero
+             **/
+            MaxYearlyPatronageRateCannotBeZero: AugmentedError<ApiType>;
             /**
              * Require root origin in extrinsics
              **/
@@ -2684,6 +2738,10 @@ declare module '@polkadot/api-base/types/errors' {
             ZeroExactExecutionBlock: AugmentedError<ApiType>;
         };
         referendum: {
+            /**
+             * A vote cannot be cast from an account that already opted out of voting.
+             **/
+            AccountAlreadyOptedOutOfVoting: AugmentedError<ApiType>;
             /**
              * Trying to vote multiple time in the same cycle
              **/
@@ -3259,12 +3317,6 @@ declare module '@polkadot/api-base/types/errors' {
              **/
             ZeroTokensFunding: AugmentedError<ApiType>;
         };
-        sudo: {
-            /**
-             * Sender must be the Sudo account
-             **/
-            RequireSudo: AugmentedError<ApiType>;
-        };
         system: {
             /**
              * The origin filter prevent the call to be dispatched.
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-events.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-events.d.ts
index 557e0b3..b41f0d8 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-events.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-events.d.ts
@@ -1,8 +1,8 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
 import type { BTreeMap, BTreeSet, Bytes, Null, Option, Result, U8aFixed, Vec, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
 import type { ITuple } from '@polkadot/types-codec/types';
-import type { AccountId32, H256, Perquintill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
+import type { AccountId32, H256, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmCurve, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenTransfers, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
 declare module '@polkadot/api-base/types/events' {
     interface AugmentedEvents<ApiType extends ApiTypes> {
         appWorkingGroup: {
@@ -497,16 +497,16 @@ declare module '@polkadot/api-base/types/events' {
              **/
             ChannelOwnerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
             ChannelPausedFeaturesUpdatedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
-            ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>]>;
+            ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
             ChannelPrivilegeLevelUpdated: AugmentedEvent<ApiType, [u64, u8]>;
             ChannelRewardClaimedAndWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
-            ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u64]>;
+            ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u128, u64]>;
             ChannelStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
             ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
             ChannelUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
             ChannelVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
-            CouncilRewardClaimed: AugmentedEvent<ApiType, [u64, u128]>;
             CreatorTokenIssued: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64]>;
+            CreatorTokenIssuerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
             CuratorAdded: AugmentedEvent<ApiType, [u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
             CuratorGroupCreated: AugmentedEvent<ApiType, [u64]>;
             CuratorGroupPermissionsUpdated: AugmentedEvent<ApiType, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
@@ -1355,9 +1355,9 @@ declare module '@polkadot/api-base/types/events' {
             LeaderInvitationQuotaUpdated: AugmentedEvent<ApiType, [u32]>;
             MemberAccountsUpdated: AugmentedEvent<ApiType, [u64, Option<AccountId32>, Option<AccountId32>]>;
             MemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateMemberParameters, u32]>;
-            MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters]>;
+            MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters, u128]>;
             MemberProfileUpdated: AugmentedEvent<ApiType, [u64, Option<Bytes>, Option<Bytes>]>;
-            MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
             MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters, u32]>;
             MembershipGifted: AugmentedEvent<ApiType, [u64, PalletMembershipGiftMembershipParameters]>;
             MembershipPriceUpdated: AugmentedEvent<ApiType, [u128]>;
@@ -2150,6 +2150,28 @@ declare module '@polkadot/api-base/types/events' {
              * - ongoing policy
              **/
             AccountDustedBy: AugmentedEvent<ApiType, [u64, u64, AccountId32, PalletProjectTokenTransferPolicy]>;
+            /**
+             * AMM activated
+             * Params:
+             * - token id
+             * - member id
+             * - params for the bonding curve
+             **/
+            AmmActivated: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenAmmCurve]>;
+            /**
+             * AMM deactivated
+             * Params:
+             * - token id
+             * - member id
+             * - amm treasury amount burned upon deactivation
+             **/
+            AmmDeactivated: AugmentedEvent<ApiType, [u64, u64, u128]>;
+            /**
+             * Max patronage yearly rate updated
+             * Params:
+             * - new rate
+             **/
+            MaxYearlyPatronageRateUpdated: AugmentedEvent<ApiType, [Permill]>;
             /**
              * Member joined whitelist
              * Params:
@@ -2172,7 +2194,7 @@ declare module '@polkadot/api-base/types/events' {
              * - token identifier
              * - new patronage rate
              **/
-            PatronageRateDecreasedTo: AugmentedEvent<ApiType, [u64, Perquintill]>;
+            PatronageRateDecreasedTo: AugmentedEvent<ApiType, [u64, Permill]>;
             /**
              * Revenue Split finalized
              * Params:
@@ -2206,7 +2228,7 @@ declare module '@polkadot/api-base/types/events' {
              * - map containing validated outputs (amount indexed by (member_id + account existance))
              * - transfer's metadata
              **/
-            TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
+            TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransfers, Bytes]>;
             /**
              * Token amount transferred by issuer
              * Params:
@@ -2217,7 +2239,7 @@ declare module '@polkadot/api-base/types/events' {
              * (account_id + account existance)
              * - transfer's metadata
              **/
-            TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
+            TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransfers, Bytes]>;
             /**
              * Token Deissued
              * Params:
@@ -2249,6 +2271,15 @@ declare module '@polkadot/api-base/types/events' {
              * - token sale metadata
              **/
             TokenSaleInitialized: AugmentedEvent<ApiType, [u64, u32, PalletProjectTokenTokenSale, Option<Bytes>]>;
+            /**
+             * Tokens Bought on AMM
+             * Params:
+             * - token id
+             * - member id
+             * - amount of CRT minted
+             * - amount of JOY deposited into curve treasury
+             **/
+            TokensBoughtOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
             /**
              * Tokens Burned
              * Params:
@@ -2266,6 +2297,15 @@ declare module '@polkadot/api-base/types/events' {
              * - buyer's member id
              **/
             TokensPurchasedOnSale: AugmentedEvent<ApiType, [u64, u32, u128, u64]>;
+            /**
+             * Tokens Sold on AMM
+             * Params:
+             * - token id
+             * - member id
+             * - amount of CRT burned
+             * - amount of JOY withdrawn from curve treasury
+             **/
+            TokensSoldOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
             /**
              * Transfer Policy Changed To Permissionless
              * Params:
@@ -2372,6 +2412,10 @@ declare module '@polkadot/api-base/types/events' {
             Voted: AugmentedEvent<ApiType, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
         };
         referendum: {
+            /**
+             * Account permanently opted out of voting in referendum.
+             **/
+            AccountOptedOutOfVoting: AugmentedEvent<ApiType, [AccountId32]>;
             /**
              * Referendum ended and winning option was selected
              **/
@@ -2956,26 +3000,6 @@ declare module '@polkadot/api-base/types/events' {
              **/
             WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
         };
-        sudo: {
-            /**
-             * The \[sudoer\] just switched identity; the old key is supplied if one existed.
-             **/
-            KeyChanged: AugmentedEvent<ApiType, [oldSudoer: Option<AccountId32>], {
-                oldSudoer: Option<AccountId32>;
-            }>;
-            /**
-             * A sudo just took place. \[result\]
-             **/
-            Sudid: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], {
-                sudoResult: Result<Null, SpRuntimeDispatchError>;
-            }>;
-            /**
-             * A sudo just took place. \[result\]
-             **/
-            SudoAsDone: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], {
-                sudoResult: Result<Null, SpRuntimeDispatchError>;
-            }>;
-        };
         system: {
             /**
              * `:code` was updated.
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-query.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-query.d.ts
index 51a9e80..e89ee70 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-query.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-query.d.ts
@@ -946,10 +946,30 @@ declare module '@polkadot/api-base/types/storage' {
              * Double map TokenId x MemberId => AccountData for managing account data
              **/
             accountInfoByTokenAndMember: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProjectTokenAccountData>, [u64, u64]>;
+            /**
+             * AMM buy transaction fee percentage
+             **/
+            ammBuyTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * Percentage threshold for deactivating the amm functionality
+             **/
+            ammDeactivationThreshold: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * AMM sell transaction fee percentage
+             **/
+            ammSellTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
             /**
              * Bloat Bond value used during account creation
              **/
             bloatBond: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Max patronage rate allowed
+             **/
+            maxYearlyPatronageRate: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * Minimum slope parameters allowed for AMM curve
+             **/
+            minAmmSlopeParameter: AugmentedQuery<ApiType, () => Observable<u128>, []>;
             /**
              * Minimum revenue split duration constraint
              **/
@@ -1034,6 +1054,10 @@ declare module '@polkadot/api-base/types/storage' {
             randomMaterial: AugmentedQuery<ApiType, () => Observable<Vec<H256>>, []>;
         };
         referendum: {
+            /**
+             * Accounts that permanently opted out of voting in referendum.
+             **/
+            accountsOptedOut: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Null>, [AccountId32]>;
             /**
              * Current referendum stage.
              **/
@@ -1454,12 +1478,6 @@ declare module '@polkadot/api-base/types/storage' {
              **/
             workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
         };
-        sudo: {
-            /**
-             * The `AccountId` of the sudo key.
-             **/
-            key: AugmentedQuery<ApiType, () => Observable<Option<AccountId32>>, []>;
-        };
         system: {
             /**
              * The full account information for a particular account ID.
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-tx.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-tx.d.ts
index d14be1e..59193fe 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-tx.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-tx.d.ts
@@ -2,7 +2,7 @@ import type { ApiTypes } from '@polkadot/api-base/types';
 import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, IMethod, ITuple } from '@polkadot/types-codec/types';
 import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
+import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmParams, PalletProjectTokenMerkleProof, PalletProjectTokenPaymentWithVesting, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
 declare module '@polkadot/api-base/types/submittable' {
     interface AugmentedSubmittables<ApiType extends ApiTypes> {
         appWorkingGroup: {
@@ -700,6 +700,19 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             acceptIncomingOffer: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, witnessPrice: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Activate Amm functionality for token
+             **/
+            activateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenAmmParams | {
+                slope?: any;
+                intercept?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenAmmParams]>;
             /**
              * Add curator to curator group under given `curator_group_id`
              *
@@ -992,6 +1005,13 @@ declare module '@polkadot/api-base/types/submittable' {
                 expectedDataObjectStateBloatBond?: any;
                 storageBucketsNumWitness?: any;
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoCreationParametersRecord]>;
+            creatorTokenIssuerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
             /**
              * Perform transfer of tokens as creator token issuer
              *
@@ -1011,7 +1031,20 @@ declare module '@polkadot/api-base/types/submittable' {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPaymentWithVesting, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTransfersPaymentWithVesting, Bytes]>;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>> | ([u64 | AnyNumber | Uint8Array, PalletProjectTokenPaymentWithVesting | {
+                amount?: any;
+                vestingSchedule?: any;
+            } | string | Uint8Array])[], metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>>, Bytes]>;
+            /**
+             * Deactivate Amm functionality for token
+             **/
+            deactivateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
             /**
              * Deissue channel's creator token
              *
@@ -1692,7 +1725,7 @@ declare module '@polkadot/api-base/types/submittable' {
                 minCashoutAllowed?: any;
                 maxCashoutAllowed?: any;
                 channelCashoutsEnabled?: any;
-            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord]>;
+            } | string | Uint8Array, uploaderAccount: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord, AccountId32]>;
             /**
              * Extrinsic for updating channel privilege level (requires lead access)
              *
@@ -3302,7 +3335,7 @@ declare module '@polkadot/api-base/types/submittable' {
              * - O(1) doesn't depend on the state or parameters
              * # </weight>
              **/
-            memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+            memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array, payment: Option<ITuple<[AccountId32, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
             /**
              * Remove staking account for a member.
              *
@@ -4638,6 +4671,21 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             burn: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * Mint desired `token_id` amount into user account via JOY exchnage
+             * Preconditions
+             * - origin, member_id pair must be a valid authentication pair
+             * - token_id must exist
+             * - user usable JOY balance must be enough for buying (+ existential deposit)
+             * - slippage tolerance constraints respected if provided
+             * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+             *
+             * Postconditions
+             * - `amount` CRT minted into account (which is created if necessary with existential deposit transferred to it)
+             * - respective JOY amount transferred from user balance to amm treasury account
+             * - event deposited
+             **/
+            buyOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
             /**
              * Allow any user to remove an account
              *
@@ -4796,6 +4844,24 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             purchaseTokensOnSale: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * Burn desired `token_id` amount from user account and get JOY from treasury account
+             * Preconditions
+             * - origin, member_id pair must be a valid authentication pair
+             * - token_id must exist
+             * - token_id, member_id must be valid account coordinates
+             * - user usable CRT balance must be at least `amount`
+             * - slippage tolerance constraints respected if provided
+             * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+             * - amm treasury account must have sufficient JOYs for the operation
+             *
+             * Postconditions
+             * - `amount` burned from user account
+             * - total supply decreased by amount
+             * - respective JOY amount transferred from amm treasury account to user account
+             * - event deposited
+             **/
+            sellOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
             /**
              * Allow to transfer from `src_member_id` account to the various `outputs` beneficiaries
              * in the specified amounts.
@@ -4824,7 +4890,8 @@ declare module '@polkadot/api-base/types/submittable' {
              * - `O(T)` - from the the generated weights
              * # </weight>
              **/
-            transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPayment, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProjectTokenTransfersPayment, Bytes]>;
+            transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: Vec<ITuple<[u64, u128]>> | ([u64 | AnyNumber | Uint8Array, u128 | AnyNumber | Uint8Array])[], metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Vec<ITuple<[u64, u128]>>, Bytes]>;
+            updateMaxYearlyPatronageRate: AugmentedSubmittable<(rate: Permill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Permill]>;
         };
         proposalsCodex: {
             /**
@@ -4894,6 +4961,8 @@ declare module '@polkadot/api-base/types/submittable' {
                 UpdateGlobalNftLimit: any;
             } | {
                 UpdateChannelPayouts: any;
+            } | {
+                UpdateMaxYearlyPatronageRate: any;
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails]>;
         };
         proposalsDiscussion: {
@@ -5007,6 +5076,18 @@ declare module '@polkadot/api-base/types/submittable' {
             vote: AugmentedSubmittable<(voterId: u64 | AnyNumber | Uint8Array, proposalId: u32 | AnyNumber | Uint8Array, vote: PalletProposalsEngineVoteKind | 'Approve' | 'Reject' | 'Slash' | 'Abstain' | number | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
         };
         referendum: {
+            /**
+             * Permanently opt out of voting from a given account.
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            optOutOfVoting: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
             /**
              * Release a locked stake.
              * # <weight>
@@ -5800,7 +5881,8 @@ declare module '@polkadot/api-base/types/submittable' {
              **/
             setStorageOperatorMetadata: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
             /**
-             * Create a dynamic bag. Development mode.
+             * Deposit a StorageOperatorRemarked event
+             * containing a generic message.
              * <weight>
              *
              * ## Weight
@@ -5811,16 +5893,6 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             storageOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
-            /**
-             * Upload new data objects. Development mode.
-             **/
-            sudoUploadDataObjects: AugmentedSubmittable<(params: PalletStorageUploadParametersRecord | {
-                bagId?: any;
-                objectCreationList?: any;
-                stateBloatBondSourceAccountId?: any;
-                expectedDataSizeFee?: any;
-                expectedDataObjectStateBloatBond?: any;
-            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageUploadParametersRecord]>;
             /**
              * Add and remove hashes to the current blacklist.
              * <weight>
@@ -6257,61 +6329,6 @@ declare module '@polkadot/api-base/types/submittable' {
              **/
             workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
         };
-        sudo: {
-            /**
-             * Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
-             * key.
-             *
-             * The dispatch origin for this call must be _Signed_.
-             *
-             * # <weight>
-             * - O(1).
-             * - Limited storage reads.
-             * - One DB change.
-             * # </weight>
-             **/
-            setKey: AugmentedSubmittable<(updated: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
-            /**
-             * Authenticates the sudo key and dispatches a function call with `Root` origin.
-             *
-             * The dispatch origin for this call must be _Signed_.
-             *
-             * # <weight>
-             * - O(1).
-             * - Limited storage reads.
-             * - One DB write (event).
-             * - Weight of derivative `call` execution + 10,000.
-             * # </weight>
-             **/
-            sudo: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call]>;
-            /**
-             * Authenticates the sudo key and dispatches a function call with `Signed` origin from
-             * a given account.
-             *
-             * The dispatch origin for this call must be _Signed_.
-             *
-             * # <weight>
-             * - O(1).
-             * - Limited storage reads.
-             * - One DB write (event).
-             * - Weight of derivative `call` execution + 10,000.
-             * # </weight>
-             **/
-            sudoAs: AugmentedSubmittable<(who: AccountId32 | string | Uint8Array, call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Call]>;
-            /**
-             * Authenticates the sudo key and dispatches a function call with `Root` origin.
-             * This function does not check the weight of the call, and instead allows the
-             * Sudo user to specify the weight of the call.
-             *
-             * The dispatch origin for this call must be _Signed_.
-             *
-             * # <weight>
-             * - O(1).
-             * - The weight of this call is defined by the caller.
-             * # </weight>
-             **/
-            sudoUncheckedWeight: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array, weight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call, u64]>;
-        };
         system: {
             /**
              * A dispatch that will fill the block weight up to the given ratio.
diff --git a/node_modules/@joystream/types/lib/augment/lookup.d.ts b/node_modules/@joystream/types/lib/augment/lookup.d.ts
index ae9bbdb..daf1979 100644
--- a/node_modules/@joystream/types/lib/augment/lookup.d.ts
+++ b/node_modules/@joystream/types/lib/augment/lookup.d.ts
@@ -363,23 +363,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup57: pallet_sudo::pallet::Event<T>
-     **/
-    PalletSudoEvent: {
-        _enum: {
-            Sudid: {
-                sudoResult: string;
-            };
-            KeyChanged: {
-                oldSudoer: string;
-            };
-            SudoAsDone: {
-                sudoResult: string;
-            };
-        };
-    };
-    /**
-     * Lookup59: pallet_bags_list::pallet::Event<T, I>
+     * Lookup57: pallet_bags_list::pallet::Event<T, I>
      **/
     PalletBagsListEvent: {
         _enum: {
@@ -395,7 +379,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup60: pallet_vesting::pallet::Event<T>
+     * Lookup58: pallet_vesting::pallet::Event<T>
      **/
     PalletVestingEvent: {
         _enum: {
@@ -409,7 +393,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup61: pallet_multisig::pallet::Event<T>
+     * Lookup59: pallet_multisig::pallet::Event<T>
      **/
     PalletMultisigEvent: {
         _enum: {
@@ -440,14 +424,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+     * Lookup60: pallet_multisig::Timepoint<BlockNumber>
      **/
     PalletMultisigTimepoint: {
         height: string;
         index: string;
     };
     /**
-     * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletCouncilRawEvent: {
         _enum: {
@@ -473,7 +457,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     * Lookup63: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
      **/
     PalletReferendumRawEvent: {
         _enum: {
@@ -484,21 +468,22 @@ declare const _default: {
             VoteCast: string;
             VoteRevealed: string;
             StakeReleased: string;
+            AccountOptedOutOfVoting: string;
         };
     };
     /**
-     * Lookup66: pallet_referendum::Instance1
+     * Lookup64: pallet_referendum::Instance1
      **/
     PalletReferendumInstance1: string;
     /**
-     * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
+     * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
      **/
     PalletReferendumOptionResult: {
         optionId: string;
         votePower: string;
     };
     /**
-     * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletMembershipRawEvent: {
         _enum: {
@@ -522,7 +507,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipBuyMembershipParameters: {
         rootAccount: string;
@@ -532,7 +517,7 @@ declare const _default: {
         referrerId: string;
     };
     /**
-     * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipInviteMembershipParameters: {
         invitingMemberId: string;
@@ -542,7 +527,7 @@ declare const _default: {
         metadata: string;
     };
     /**
-     * Lookup74: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+     * Lookup72: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
      **/
     PalletMembershipCreateMemberParameters: {
         rootAccount: string;
@@ -552,7 +537,7 @@ declare const _default: {
         isFoundingMember: string;
     };
     /**
-     * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletMembershipGiftMembershipParameters: {
         rootAccount: string;
@@ -565,7 +550,7 @@ declare const _default: {
         applyRootAccountInvitationLock: string;
     };
     /**
-     * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     * Lookup78: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
      **/
     PalletForumRawEvent: {
         _enum: {
@@ -589,7 +574,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup78: pallet_forum::PrivilegedActor<T>
+     * Lookup79: pallet_forum::PrivilegedActor<T>
      **/
     PalletForumPrivilegedActor: {
         _enum: {
@@ -598,7 +583,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     * Lookup80: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
      **/
     PalletForumExtendedPostIdObject: {
         categoryId: string;
@@ -606,7 +591,7 @@ declare const _default: {
         postId: string;
     };
     /**
-     * Lookup84: pallet_constitution::RawEvent<primitive_types::H256>
+     * Lookup85: pallet_constitution::RawEvent<primitive_types::H256>
      **/
     PalletConstitutionRawEvent: {
         _enum: {
@@ -614,7 +599,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup85: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     * Lookup86: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
      **/
     PalletBountyRawEvent: {
         _enum: {
@@ -644,7 +629,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup86: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+     * Lookup87: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
      **/
     PalletBountyBountyParametersBTreeSet: {
         oracle: string;
@@ -656,7 +641,7 @@ declare const _default: {
         fundingType: string;
     };
     /**
-     * Lookup87: pallet_bounty::BountyActor<MemberId>
+     * Lookup88: pallet_bounty::BountyActor<MemberId>
      **/
     PalletBountyBountyActor: {
         _enum: {
@@ -665,7 +650,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup88: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+     * Lookup89: pallet_bounty::AssuranceContractType<BTreeSet<T>>
      **/
     PalletBountyAssuranceContractTypeBTreeSet: {
         _enum: {
@@ -674,7 +659,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+     * Lookup90: pallet_bounty::FundingType<BlockNumber, Balance>
      **/
     PalletBountyFundingType: {
         _enum: {
@@ -688,7 +673,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     * Lookup92: pallet_bounty::OracleWorkEntryJudgment<Balance>
      **/
     PalletBountyOracleWorkEntryJudgment: {
         _enum: {
@@ -702,7 +687,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     * Lookup95: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
      **/
     PalletUtilityRawEvent: {
         _enum: {
@@ -713,19 +698,19 @@ declare const _default: {
         };
     };
     /**
-     * Lookup95: pallet_common::working_group::iterable_enums::WorkingGroup
+     * Lookup96: pallet_common::working_group::iterable_enums::WorkingGroup
      **/
     PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
         _enum: string[];
     };
     /**
-     * Lookup96: pallet_common::BalanceKind
+     * Lookup97: pallet_common::BalanceKind
      **/
     PalletCommonBalanceKind: {
         _enum: string[];
     };
     /**
-     * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     * Lookup98: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
      **/
     PalletContentRawEvent: {
         _enum: {
@@ -755,7 +740,6 @@ declare const _default: {
             VideoAssetsDeletedByModerator: string;
             ChannelPayoutsUpdated: string;
             ChannelRewardUpdated: string;
-            CouncilRewardClaimed: string;
             EnglishAuctionStarted: string;
             OpenAuctionStarted: string;
             NftIssued: string;
@@ -784,10 +768,11 @@ declare const _default: {
             ChannelNftLimitUpdated: string;
             ToggledNftLimits: string;
             CreatorTokenIssued: string;
+            CreatorTokenIssuerRemarked: string;
         };
     };
     /**
-     * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     * Lookup99: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
      **/
     PalletContentPermissionsContentActor: {
         _enum: {
@@ -797,7 +782,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup100: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentChannelRecord: {
         owner: string;
@@ -816,26 +801,26 @@ declare const _default: {
         channelStateBloatBond: string;
     };
     /**
-     * Lookup103: pallet_content::types::iterable_enums::ChannelActionPermission
+     * Lookup104: pallet_content::types::iterable_enums::ChannelActionPermission
      **/
     PalletContentIterableEnumsChannelActionPermission: {
         _enum: string[];
     };
     /**
-     * Lookup110: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+     * Lookup111: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
         _enum: string[];
     };
     /**
-     * Lookup113: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     * Lookup114: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
      **/
     PalletCommonBloatBondRepayableBloatBond: {
         repaymentRestrictedTo: string;
         amount: string;
     };
     /**
-     * Lookup114: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     * Lookup115: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
      **/
     PalletContentChannelOwner: {
         _enum: {
@@ -844,7 +829,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup115: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup116: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentChannelTransferStatus: {
         _enum: {
@@ -853,14 +838,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup116: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup117: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentPendingTransfer: {
         newOwner: string;
         transferParams: string;
     };
     /**
-     * Lookup117: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+     * Lookup118: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBoundedBTreeMap: {
         newCollaborators: string;
@@ -868,21 +853,21 @@ declare const _default: {
         transferId: string;
     };
     /**
-     * Lookup118: pallet_content::types::LimitPerPeriod<BlockNumber>
+     * Lookup119: pallet_content::types::LimitPerPeriod<BlockNumber>
      **/
     PalletContentLimitPerPeriod: {
         limit: string;
         blockNumberPeriod: string;
     };
     /**
-     * Lookup119: pallet_content::types::NftCounter<BlockNumber>
+     * Lookup120: pallet_content::types::NftCounter<BlockNumber>
      **/
     PalletContentNftCounter: {
         counter: string;
         lastUpdated: string;
     };
     /**
-     * Lookup120: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup121: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionParamsRecord: {
         startingPrice: string;
@@ -894,7 +879,7 @@ declare const _default: {
         minBidStep: string;
     };
     /**
-     * Lookup122: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup123: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionParamsRecord: {
         startingPrice: string;
@@ -904,7 +889,7 @@ declare const _default: {
         bidLockDuration: string;
     };
     /**
-     * Lookup123: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     * Lookup124: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
      **/
     PalletContentNftTypesNftIssuanceParametersRecord: {
         royalty: string;
@@ -913,7 +898,7 @@ declare const _default: {
         initTransactionalStatus: string;
     };
     /**
-     * Lookup124: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     * Lookup125: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
      **/
     PalletContentNftTypesInitTransactionalStatusRecord: {
         _enum: {
@@ -925,7 +910,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup126: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     * Lookup127: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
      **/
     PalletContentChannelCreationParametersRecord: {
         assets: string;
@@ -937,14 +922,14 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup127: pallet_content::types::StorageAssetsRecord<Balance>
+     * Lookup128: pallet_content::types::StorageAssetsRecord<Balance>
      **/
     PalletContentStorageAssetsRecord: {
         objectCreationList: string;
         expectedDataSizeFee: string;
     };
     /**
-     * Lookup129: pallet_storage::DataObjectCreationParameters
+     * Lookup130: pallet_storage::DataObjectCreationParameters
      **/
     PalletStorageDataObjectCreationParameters: {
         _alias: {
@@ -954,14 +939,14 @@ declare const _default: {
         ipfsContentId: string;
     };
     /**
-     * Lookup130: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     * Lookup131: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketIdRecord: {
         distributionBucketFamilyId: string;
         distributionBucketIndex: string;
     };
     /**
-     * Lookup137: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     * Lookup138: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
      **/
     PalletContentChannelUpdateParametersRecord: {
         assetsToUpload: string;
@@ -972,7 +957,7 @@ declare const _default: {
         storageBucketsNumWitness: string;
     };
     /**
-     * Lookup139: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup140: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoCreationParametersRecord: {
         assets: string;
@@ -983,7 +968,7 @@ declare const _default: {
         storageBucketsNumWitness: string;
     };
     /**
-     * Lookup141: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup142: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoUpdateParametersRecord: {
         assetsToUpload: string;
@@ -994,7 +979,7 @@ declare const _default: {
         storageBucketsNumWitness: string;
     };
     /**
-     * Lookup144: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+     * Lookup145: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
         _enum: {
@@ -1009,7 +994,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup148: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+     * Lookup149: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBTreeMap: {
         newCollaborators: string;
@@ -1017,7 +1002,7 @@ declare const _default: {
         transferId: string;
     };
     /**
-     * Lookup149: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+     * Lookup150: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
      **/
     PalletContentUpdateChannelPayoutsParametersRecord: {
         commitment: string;
@@ -1027,16 +1012,15 @@ declare const _default: {
         channelCashoutsEnabled: string;
     };
     /**
-     * Lookup150: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+     * Lookup151: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
      **/
     PalletContentChannelPayoutsPayloadParametersRecord: {
-        uploaderAccount: string;
         objectCreationParams: string;
         expectedDataSizeFee: string;
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup154: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     * Lookup155: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
      **/
     PalletContentChannelFundsDestination: {
         _enum: {
@@ -1045,13 +1029,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup155: pallet_content::types::NftLimitPeriod
+     * Lookup156: pallet_content::types::NftLimitPeriod
      **/
     PalletContentNftLimitPeriod: {
         _enum: string[];
     };
     /**
-     * Lookup156: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+     * Lookup157: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
      **/
     PalletStorageRawEvent: {
         _enum: {
@@ -1100,7 +1084,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup157: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     * Lookup158: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
      **/
     PalletStorageUploadParametersRecord: {
         bagId: string;
@@ -1110,7 +1094,7 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup158: pallet_storage::BagIdType<MemberId, ChannelId>
+     * Lookup159: pallet_storage::BagIdType<MemberId, ChannelId>
      **/
     PalletStorageBagIdType: {
         _enum: {
@@ -1119,7 +1103,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup159: pallet_storage::StaticBagId
+     * Lookup160: pallet_storage::StaticBagId
      **/
     PalletStorageStaticBagId: {
         _enum: {
@@ -1128,7 +1112,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup160: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     * Lookup161: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
      **/
     PalletStorageDynamicBagIdType: {
         _enum: {
@@ -1137,7 +1121,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup161: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     * Lookup162: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
      **/
     PalletStorageDynBagCreationParametersRecord: {
         bagId: string;
@@ -1149,7 +1133,7 @@ declare const _default: {
         distributionBuckets: string;
     };
     /**
-     * Lookup164: pallet_storage::Voucher
+     * Lookup165: pallet_storage::Voucher
      **/
     PalletStorageVoucher: {
         sizeLimit: string;
@@ -1158,13 +1142,13 @@ declare const _default: {
         objectsUsed: string;
     };
     /**
-     * Lookup165: pallet_storage::DynamicBagType
+     * Lookup166: pallet_storage::DynamicBagType
      **/
     PalletStorageDynamicBagType: {
         _enum: string[];
     };
     /**
-     * Lookup169: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+     * Lookup170: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
      **/
     PalletProjectTokenEventsRawEvent: {
         _enum: {
@@ -1186,10 +1170,15 @@ declare const _default: {
             TokenSaleFinalized: string;
             TransferPolicyChangedToPermissionless: string;
             TokensBurned: string;
+            AmmActivated: string;
+            TokensBoughtOnAmm: string;
+            TokensSoldOnAmm: string;
+            AmmDeactivated: string;
+            MaxYearlyPatronageRateUpdated: string;
         };
     };
     /**
-     * Lookup170: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     * Lookup171: pallet_project_token::types::TransferPolicy<primitive_types::H256>
      **/
     PalletProjectTokenTransferPolicy: {
         _enum: {
@@ -1198,7 +1187,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup171: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     * Lookup172: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
      **/
     PalletProjectTokenTokenIssuanceParameters: {
         initialAllocation: string;
@@ -1208,14 +1197,14 @@ declare const _default: {
         revenueSplitRate: string;
     };
     /**
-     * Lookup172: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup173: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenAllocation: {
         amount: string;
         vestingScheduleParams: string;
     };
     /**
-     * Lookup173: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     * Lookup174: pallet_project_token::types::VestingScheduleParams<BlockNumber>
      **/
     PalletProjectTokenVestingScheduleParams: {
         linearVestingDuration: string;
@@ -1223,7 +1212,7 @@ declare const _default: {
         cliffAmountPercentage: string;
     };
     /**
-     * Lookup176: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     * Lookup177: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
      **/
     PalletProjectTokenTransferPolicyParams: {
         _enum: {
@@ -1232,14 +1221,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup177: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     * Lookup178: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
      **/
     PalletProjectTokenWhitelistParams: {
         commitment: string;
         payload: string;
     };
     /**
-     * Lookup178: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     * Lookup179: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
      **/
     PalletProjectTokenSingleDataObjectUploadParams: {
         objectCreationParams: string;
@@ -1247,7 +1236,11 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup185: pallet_project_token::types::Validated<MemberId>
+     * Lookup185: pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>
+     **/
+    PalletProjectTokenTransfers: string;
+    /**
+     * Lookup186: pallet_project_token::types::Validated<MemberId>
      **/
     PalletProjectTokenValidated: {
         _enum: {
@@ -1256,21 +1249,21 @@ declare const _default: {
         };
     };
     /**
-     * Lookup186: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup187: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenValidatedPayment: {
         payment: string;
         vestingCleanupCandidate: string;
     };
     /**
-     * Lookup187: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup188: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenPaymentWithVesting: {
         amount: string;
         vestingSchedule: string;
     };
     /**
-     * Lookup189: pallet_project_token::types::VestingSource
+     * Lookup190: pallet_project_token::types::VestingSource
      **/
     PalletProjectTokenVestingSource: {
         _enum: {
@@ -1280,7 +1273,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup193: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     * Lookup194: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletProjectTokenTokenSale: {
         unitPrice: string;
@@ -1295,7 +1288,15 @@ declare const _default: {
         autoFinalize: string;
     };
     /**
-     * Lookup195: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     * Lookup195: pallet_project_token::types::AmmCurve<Balance>
+     **/
+    PalletProjectTokenAmmCurve: {
+        slope: string;
+        intercept: string;
+        providedSupply: string;
+    };
+    /**
+     * Lookup196: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
      **/
     PalletProposalsEngineRawEvent: {
         _enum: {
@@ -1308,7 +1309,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup196: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
      **/
     PalletProposalsEngineProposalStatusesProposalStatus: {
         _enum: {
@@ -1318,7 +1319,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
      **/
     PalletProposalsEngineProposalStatusesProposalDecision: {
         _enum: {
@@ -1332,13 +1333,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
      **/
     PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
         _enum: string[];
     };
     /**
-     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     * Lookup200: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
      **/
     PalletProposalsEngineProposalStatusesExecutionStatus: {
         _enum: {
@@ -1349,13 +1350,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup200: pallet_proposals_engine::types::VoteKind
+     * Lookup201: pallet_proposals_engine::types::VoteKind
      **/
     PalletProposalsEngineVoteKind: {
         _enum: string[];
     };
     /**
-     * Lookup201: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     * Lookup202: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
      **/
     PalletProposalsDiscussionRawEvent: {
         _enum: {
@@ -1367,7 +1368,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup202: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+     * Lookup203: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
      **/
     PalletProposalsDiscussionThreadModeBTreeSet: {
         _enum: {
@@ -1376,7 +1377,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup203: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     * Lookup204: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
      **/
     PalletProposalsCodexRawEvent: {
         _enum: {
@@ -1384,7 +1385,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup204: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     * Lookup205: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
      **/
     PalletProposalsCodexGeneralProposalParams: {
         memberId: string;
@@ -1394,7 +1395,7 @@ declare const _default: {
         exactExecutionBlock: string;
     };
     /**
-     * Lookup205: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+     * Lookup206: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
      **/
     PalletProposalsCodexProposalDetails: {
         _enum: {
@@ -1421,17 +1422,18 @@ declare const _default: {
             VetoProposal: string;
             UpdateGlobalNftLimit: string;
             UpdateChannelPayouts: string;
+            UpdateMaxYearlyPatronageRate: string;
         };
     };
     /**
-     * Lookup207: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     * Lookup208: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
      **/
     PalletCommonFundingRequestParameters: {
         account: string;
         amount: string;
     };
     /**
-     * Lookup208: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     * Lookup209: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
      **/
     PalletProposalsCodexCreateOpeningParameters: {
         description: string;
@@ -1440,14 +1442,14 @@ declare const _default: {
         group: string;
     };
     /**
-     * Lookup209: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     * Lookup210: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
      **/
     PalletWorkingGroupStakePolicy: {
         stakeAmount: string;
         leavingUnstakingPeriod: string;
     };
     /**
-     * Lookup210: pallet_proposals_codex::types::FillOpeningParameters
+     * Lookup211: pallet_proposals_codex::types::FillOpeningParameters
      **/
     PalletProposalsCodexFillOpeningParameters: {
         openingId: string;
@@ -1455,7 +1457,7 @@ declare const _default: {
         workingGroup: string;
     };
     /**
-     * Lookup211: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     * Lookup212: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
      **/
     PalletProposalsCodexTerminateRoleParameters: {
         workerId: string;
@@ -1463,7 +1465,7 @@ declare const _default: {
         group: string;
     };
     /**
-     * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+     * Lookup213: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
      **/
     PalletWorkingGroupRawEventInstance1: {
         _enum: {
@@ -1495,13 +1497,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup216: pallet_working_group::types::OpeningType
+     * Lookup217: pallet_working_group::types::OpeningType
      **/
     PalletWorkingGroupOpeningType: {
         _enum: string[];
     };
     /**
-     * Lookup217: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     * Lookup218: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupApplyOnOpeningParams: {
         memberId: string;
@@ -1512,24 +1514,24 @@ declare const _default: {
         stakeParameters: string;
     };
     /**
-     * Lookup218: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup219: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupStakeParameters: {
         stake: string;
         stakingAccountId: string;
     };
     /**
-     * Lookup219: pallet_working_group::Instance1
+     * Lookup220: pallet_working_group::Instance1
      **/
     PalletWorkingGroupInstance1: string;
     /**
-     * Lookup220: pallet_working_group::types::RewardPaymentType
+     * Lookup221: pallet_working_group::types::RewardPaymentType
      **/
     PalletWorkingGroupRewardPaymentType: {
         _enum: string[];
     };
     /**
-     * Lookup221: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+     * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
      **/
     PalletWorkingGroupRawEventInstance2: {
         _enum: {
@@ -1561,11 +1563,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup222: pallet_working_group::Instance2
+     * Lookup223: pallet_working_group::Instance2
      **/
     PalletWorkingGroupInstance2: string;
     /**
-     * Lookup223: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+     * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
      **/
     PalletWorkingGroupRawEventInstance3: {
         _enum: {
@@ -1597,11 +1599,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup224: pallet_working_group::Instance3
+     * Lookup225: pallet_working_group::Instance3
      **/
     PalletWorkingGroupInstance3: string;
     /**
-     * Lookup225: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+     * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
      **/
     PalletWorkingGroupRawEventInstance4: {
         _enum: {
@@ -1633,11 +1635,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup226: pallet_working_group::Instance4
+     * Lookup227: pallet_working_group::Instance4
      **/
     PalletWorkingGroupInstance4: string;
     /**
-     * Lookup227: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+     * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
      **/
     PalletWorkingGroupRawEventInstance5: {
         _enum: {
@@ -1669,11 +1671,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup228: pallet_working_group::Instance5
+     * Lookup229: pallet_working_group::Instance5
      **/
     PalletWorkingGroupInstance5: string;
     /**
-     * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+     * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
      **/
     PalletWorkingGroupRawEventInstance6: {
         _enum: {
@@ -1705,11 +1707,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup230: pallet_working_group::Instance6
+     * Lookup231: pallet_working_group::Instance6
      **/
     PalletWorkingGroupInstance6: string;
     /**
-     * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+     * Lookup232: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
      **/
     PalletWorkingGroupRawEventInstance7: {
         _enum: {
@@ -1741,11 +1743,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup232: pallet_working_group::Instance7
+     * Lookup233: pallet_working_group::Instance7
      **/
     PalletWorkingGroupInstance7: string;
     /**
-     * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+     * Lookup234: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
      **/
     PalletWorkingGroupRawEventInstance8: {
         _enum: {
@@ -1777,11 +1779,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup234: pallet_working_group::Instance8
+     * Lookup235: pallet_working_group::Instance8
      **/
     PalletWorkingGroupInstance8: string;
     /**
-     * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+     * Lookup236: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
      **/
     PalletWorkingGroupRawEventInstance9: {
         _enum: {
@@ -1813,11 +1815,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup236: pallet_working_group::Instance9
+     * Lookup237: pallet_working_group::Instance9
      **/
     PalletWorkingGroupInstance9: string;
     /**
-     * Lookup237: frame_system::Phase
+     * Lookup238: frame_system::Phase
      **/
     FrameSystemPhase: {
         _enum: {
@@ -1827,14 +1829,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup241: frame_system::LastRuntimeUpgradeInfo
+     * Lookup242: frame_system::LastRuntimeUpgradeInfo
      **/
     FrameSystemLastRuntimeUpgradeInfo: {
         specVersion: string;
         specName: string;
     };
     /**
-     * Lookup244: frame_system::pallet::Call<T>
+     * Lookup245: frame_system::pallet::Call<T>
      **/
     FrameSystemCall: {
         _enum: {
@@ -1872,7 +1874,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup247: frame_system::limits::BlockWeights
+     * Lookup248: frame_system::limits::BlockWeights
      **/
     FrameSystemLimitsBlockWeights: {
         baseBlock: string;
@@ -1880,7 +1882,7 @@ declare const _default: {
         perClass: string;
     };
     /**
-     * Lookup248: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     * Lookup249: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
      **/
     FrameSupportWeightsPerDispatchClassWeightsPerClass: {
         normal: string;
@@ -1888,7 +1890,7 @@ declare const _default: {
         mandatory: string;
     };
     /**
-     * Lookup249: frame_system::limits::WeightsPerClass
+     * Lookup250: frame_system::limits::WeightsPerClass
      **/
     FrameSystemLimitsWeightsPerClass: {
         baseExtrinsic: string;
@@ -1897,13 +1899,13 @@ declare const _default: {
         reserved: string;
     };
     /**
-     * Lookup250: frame_system::limits::BlockLength
+     * Lookup251: frame_system::limits::BlockLength
      **/
     FrameSystemLimitsBlockLength: {
         max: string;
     };
     /**
-     * Lookup251: frame_support::weights::PerDispatchClass<T>
+     * Lookup252: frame_support::weights::PerDispatchClass<T>
      **/
     FrameSupportWeightsPerDispatchClassU32: {
         normal: string;
@@ -1911,14 +1913,14 @@ declare const _default: {
         mandatory: string;
     };
     /**
-     * Lookup252: frame_support::weights::RuntimeDbWeight
+     * Lookup253: frame_support::weights::RuntimeDbWeight
      **/
     FrameSupportWeightsRuntimeDbWeight: {
         read: string;
         write: string;
     };
     /**
-     * Lookup253: sp_version::RuntimeVersion
+     * Lookup254: sp_version::RuntimeVersion
      **/
     SpVersionRuntimeVersion: {
         specName: string;
@@ -1931,13 +1933,13 @@ declare const _default: {
         stateVersion: string;
     };
     /**
-     * Lookup259: frame_system::pallet::Error<T>
+     * Lookup260: frame_system::pallet::Error<T>
      **/
     FrameSystemError: {
         _enum: string[];
     };
     /**
-     * Lookup260: pallet_utility::pallet::Call<T>
+     * Lookup261: pallet_utility::pallet::Call<T>
      **/
     PalletUtilityCall: {
         _enum: {
@@ -1961,7 +1963,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup263: pallet_babe::pallet::Call<T>
+     * Lookup264: pallet_babe::pallet::Call<T>
      **/
     PalletBabeCall: {
         _enum: {
@@ -1979,7 +1981,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup264: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     * Lookup265: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
      **/
     SpConsensusSlotsEquivocationProof: {
         offender: string;
@@ -1988,7 +1990,7 @@ declare const _default: {
         secondHeader: string;
     };
     /**
-     * Lookup265: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     * Lookup266: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
      **/
     SpRuntimeHeader: {
         parentHash: string;
@@ -1998,15 +2000,15 @@ declare const _default: {
         digest: string;
     };
     /**
-     * Lookup266: sp_runtime::traits::BlakeTwo256
+     * Lookup267: sp_runtime::traits::BlakeTwo256
      **/
     SpRuntimeBlakeTwo256: string;
     /**
-     * Lookup267: sp_consensus_babe::app::Public
+     * Lookup268: sp_consensus_babe::app::Public
      **/
     SpConsensusBabeAppPublic: string;
     /**
-     * Lookup269: sp_session::MembershipProof
+     * Lookup270: sp_session::MembershipProof
      **/
     SpSessionMembershipProof: {
         session: string;
@@ -2014,7 +2016,7 @@ declare const _default: {
         validatorCount: string;
     };
     /**
-     * Lookup270: sp_consensus_babe::digests::NextConfigDescriptor
+     * Lookup271: sp_consensus_babe::digests::NextConfigDescriptor
      **/
     SpConsensusBabeDigestsNextConfigDescriptor: {
         _enum: {
@@ -2026,13 +2028,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup271: sp_consensus_babe::AllowedSlots
+     * Lookup272: sp_consensus_babe::AllowedSlots
      **/
     SpConsensusBabeAllowedSlots: {
         _enum: string[];
     };
     /**
-     * Lookup272: pallet_timestamp::pallet::Call<T>
+     * Lookup273: pallet_timestamp::pallet::Call<T>
      **/
     PalletTimestampCall: {
         _enum: {
@@ -2042,7 +2044,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup274: pallet_authorship::pallet::Call<T>
+     * Lookup275: pallet_authorship::pallet::Call<T>
      **/
     PalletAuthorshipCall: {
         _enum: {
@@ -2052,7 +2054,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup276: pallet_balances::pallet::Call<T, I>
+     * Lookup277: pallet_balances::pallet::Call<T, I>
      **/
     PalletBalancesCall: {
         _enum: {
@@ -2085,7 +2087,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup277: pallet_election_provider_multi_phase::pallet::Call<T>
+     * Lookup278: pallet_election_provider_multi_phase::pallet::Call<T>
      **/
     PalletElectionProviderMultiPhaseCall: {
         _enum: {
@@ -2109,7 +2111,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup278: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     * Lookup279: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseRawSolution: {
         solution: string;
@@ -2117,7 +2119,7 @@ declare const _default: {
         round: string;
     };
     /**
-     * Lookup279: joystream_node_runtime::NposSolution16
+     * Lookup280: joystream_node_runtime::NposSolution16
      **/
     JoystreamNodeRuntimeNposSolution16: {
         votes1: string;
@@ -2138,7 +2140,7 @@ declare const _default: {
         votes16: string;
     };
     /**
-     * Lookup330: sp_npos_elections::ElectionScore
+     * Lookup331: sp_npos_elections::ElectionScore
      **/
     SpNposElectionsElectionScore: {
         minimalStake: string;
@@ -2146,14 +2148,14 @@ declare const _default: {
         sumStakeSquared: string;
     };
     /**
-     * Lookup331: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     * Lookup332: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
      **/
     PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
         voters: string;
         targets: string;
     };
     /**
-     * Lookup335: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     * Lookup336: sp_npos_elections::Support<sp_core::crypto::AccountId32>
      **/
     SpNposElectionsSupport: {
         total: string;
@@ -2443,31 +2445,7 @@ declare const _default: {
      **/
     SpCoreSr25519Signature: string;
     /**
-     * Lookup370: pallet_sudo::pallet::Call<T>
-     **/
-    PalletSudoCall: {
-        _enum: {
-            sudo: {
-                call: string;
-            };
-            sudo_unchecked_weight: {
-                call: string;
-                weight: string;
-            };
-            set_key: {
-                _alias: {
-                    new_: string;
-                };
-                new_: string;
-            };
-            sudo_as: {
-                who: string;
-                call: string;
-            };
-        };
-    };
-    /**
-     * Lookup371: pallet_bags_list::pallet::Call<T, I>
+     * Lookup370: pallet_bags_list::pallet::Call<T, I>
      **/
     PalletBagsListCall: {
         _enum: {
@@ -2480,7 +2458,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup372: pallet_vesting::pallet::Call<T>
+     * Lookup371: pallet_vesting::pallet::Call<T>
      **/
     PalletVestingCall: {
         _enum: {
@@ -2504,7 +2482,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup373: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     * Lookup372: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
      **/
     PalletVestingVestingInfo: {
         locked: string;
@@ -2512,7 +2490,7 @@ declare const _default: {
         startingBlock: string;
     };
     /**
-     * Lookup374: pallet_multisig::pallet::Call<T>
+     * Lookup373: pallet_multisig::pallet::Call<T>
      **/
     PalletMultisigCall: {
         _enum: {
@@ -2544,7 +2522,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup377: pallet_council::Call<T>
+     * Lookup376: pallet_council::Call<T>
      **/
     PalletCouncilCall: {
         _enum: {
@@ -2595,7 +2573,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup378: pallet_referendum::Call<T, I>
+     * Lookup377: pallet_referendum::Call<T, I>
      **/
     PalletReferendumCall: {
         _enum: {
@@ -2608,10 +2586,11 @@ declare const _default: {
                 voteOptionId: string;
             };
             release_vote_stake: string;
+            opt_out_of_voting: string;
         };
     };
     /**
-     * Lookup379: pallet_membership::Call<T>
+     * Lookup378: pallet_membership::Call<T>
      **/
     PalletMembershipCall: {
         _enum: {
@@ -2672,6 +2651,7 @@ declare const _default: {
             member_remark: {
                 memberId: string;
                 msg: string;
+                payment: string;
             };
             create_member: {
                 params: string;
@@ -2679,7 +2659,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup380: pallet_forum::Call<T>
+     * Lookup379: pallet_forum::Call<T>
      **/
     PalletForumCall: {
         _enum: {
@@ -2776,7 +2756,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup381: pallet_constitution::Call<T>
+     * Lookup380: pallet_constitution::Call<T>
      **/
     PalletConstitutionCall: {
         _enum: {
@@ -2786,7 +2766,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup382: pallet_bounty::Call<T>
+     * Lookup381: pallet_bounty::Call<T>
      **/
     PalletBountyCall: {
         _enum: {
@@ -2862,7 +2842,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup384: pallet_content::Call<T>
+     * Lookup383: pallet_content::Call<T>
      **/
     PalletContentCall: {
         _enum: {
@@ -2970,6 +2950,7 @@ declare const _default: {
             };
             update_channel_payouts: {
                 params: string;
+                uploaderAccount: string;
             };
             claim_channel_reward: {
                 actor: string;
@@ -3086,6 +3067,11 @@ declare const _default: {
                 channelId: string;
                 msg: string;
             };
+            creator_token_issuer_remark: {
+                actor: string;
+                channelId: string;
+                msg: string;
+            };
             channel_agent_remark: {
                 actor: string;
                 channelId: string;
@@ -3172,17 +3158,26 @@ declare const _default: {
                 actor: string;
                 channelId: string;
             };
+            activate_amm: {
+                actor: string;
+                channelId: string;
+                params: string;
+            };
+            deactivate_amm: {
+                actor: string;
+                channelId: string;
+            };
         };
     };
     /**
-     * Lookup385: pallet_content::types::ChannelBagWitness
+     * Lookup384: pallet_content::types::ChannelBagWitness
      **/
     PalletContentChannelBagWitness: {
         storageBucketsNum: string;
         distributionBucketsNum: string;
     };
     /**
-     * Lookup387: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+     * Lookup386: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
      **/
     PalletCommonMerkleTreeProofElementRecord: {
         _alias: {
@@ -3192,13 +3187,13 @@ declare const _default: {
         side: string;
     };
     /**
-     * Lookup388: pallet_common::merkle_tree::Side
+     * Lookup387: pallet_common::merkle_tree::Side
      **/
     PalletCommonMerkleTreeSide: {
         _enum: string[];
     };
     /**
-     * Lookup389: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     * Lookup388: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
      **/
     PalletContentPullPaymentElement: {
         channelId: string;
@@ -3206,7 +3201,7 @@ declare const _default: {
         reason: string;
     };
     /**
-     * Lookup390: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     * Lookup389: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
      **/
     PalletContentInitTransferParameters: {
         newCollaborators: string;
@@ -3214,7 +3209,7 @@ declare const _default: {
         newOwner: string;
     };
     /**
-     * Lookup391: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup390: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenSaleParams: {
         unitPrice: string;
@@ -3226,11 +3221,14 @@ declare const _default: {
         metadata: string;
     };
     /**
-     * Lookup392: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup394: pallet_project_token::types::AmmParams<Balance>
      **/
-    PalletProjectTokenTransfersPaymentWithVesting: string;
+    PalletProjectTokenAmmParams: {
+        slope: string;
+        intercept: string;
+    };
     /**
-     * Lookup396: pallet_storage::Call<T>
+     * Lookup395: pallet_storage::Call<T>
      **/
     PalletStorageCall: {
         _enum: {
@@ -3364,9 +3362,6 @@ declare const _default: {
                 bucketId: string;
                 metadata: string;
             };
-            sudo_upload_data_objects: {
-                params: string;
-            };
             storage_operator_remark: {
                 workerId: string;
                 storageBucketId: string;
@@ -3380,7 +3375,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup397: pallet_project_token::Call<T>
+     * Lookup396: pallet_project_token::Call<T>
      **/
     PalletProjectTokenCall: {
         _enum: {
@@ -3418,30 +3413,35 @@ declare const _default: {
                 tokenId: string;
                 memberId: string;
             };
+            buy_on_amm: {
+                tokenId: string;
+                memberId: string;
+                amount: string;
+                slippageTolerance: string;
+            };
+            sell_on_amm: {
+                tokenId: string;
+                memberId: string;
+                amount: string;
+                slippageTolerance: string;
+            };
+            update_max_yearly_patronage_rate: {
+                rate: string;
+            };
         };
     };
     /**
-     * Lookup398: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
-     **/
-    PalletProjectTokenTransfersPayment: string;
-    /**
-     * Lookup399: pallet_project_token::types::Payment<Balance>
-     **/
-    PalletProjectTokenPayment: {
-        amount: string;
-    };
-    /**
-     * Lookup403: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     * Lookup400: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
      **/
     PalletProjectTokenMerkleProof: string;
     /**
-     * Lookup406: pallet_project_token::types::MerkleSide
+     * Lookup403: pallet_project_token::types::MerkleSide
      **/
     PalletProjectTokenMerkleSide: {
         _enum: string[];
     };
     /**
-     * Lookup407: pallet_proposals_engine::Call<T>
+     * Lookup406: pallet_proposals_engine::Call<T>
      **/
     PalletProposalsEngineCall: {
         _enum: {
@@ -3466,7 +3466,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup408: pallet_proposals_discussion::Call<T>
+     * Lookup407: pallet_proposals_discussion::Call<T>
      **/
     PalletProposalsDiscussionCall: {
         _enum: {
@@ -3495,7 +3495,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup409: pallet_proposals_codex::Call<T>
+     * Lookup408: pallet_proposals_codex::Call<T>
      **/
     PalletProposalsCodexCall: {
         _enum: {
@@ -3506,7 +3506,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup410: pallet_working_group::Call<T, I>
+     * Lookup409: pallet_working_group::Call<T, I>
      **/
     PalletWorkingGroupCall: {
         _enum: {
@@ -3589,7 +3589,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup419: joystream_node_runtime::OriginCaller
+     * Lookup418: joystream_node_runtime::OriginCaller
      **/
     JoystreamNodeRuntimeOriginCaller: {
         _enum: {
@@ -3598,7 +3598,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup420: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     * Lookup419: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
      **/
     FrameSupportDispatchRawOrigin: {
         _enum: {
@@ -3608,17 +3608,17 @@ declare const _default: {
         };
     };
     /**
-     * Lookup421: sp_core::Void
+     * Lookup420: sp_core::Void
      **/
     SpCoreVoid: string;
     /**
-     * Lookup422: pallet_utility::pallet::Error<T>
+     * Lookup421: pallet_utility::pallet::Error<T>
      **/
     PalletUtilityError: {
         _enum: string[];
     };
     /**
-     * Lookup429: sp_consensus_babe::digests::PreDigest
+     * Lookup428: sp_consensus_babe::digests::PreDigest
      **/
     SpConsensusBabeDigestsPreDigest: {
         _enum: {
@@ -3629,7 +3629,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup430: sp_consensus_babe::digests::PrimaryPreDigest
+     * Lookup429: sp_consensus_babe::digests::PrimaryPreDigest
      **/
     SpConsensusBabeDigestsPrimaryPreDigest: {
         authorityIndex: string;
@@ -3638,14 +3638,14 @@ declare const _default: {
         vrfProof: string;
     };
     /**
-     * Lookup431: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     * Lookup430: sp_consensus_babe::digests::SecondaryPlainPreDigest
      **/
     SpConsensusBabeDigestsSecondaryPlainPreDigest: {
         authorityIndex: string;
         slot: string;
     };
     /**
-     * Lookup432: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     * Lookup431: sp_consensus_babe::digests::SecondaryVRFPreDigest
      **/
     SpConsensusBabeDigestsSecondaryVRFPreDigest: {
         authorityIndex: string;
@@ -3654,20 +3654,20 @@ declare const _default: {
         vrfProof: string;
     };
     /**
-     * Lookup434: sp_consensus_babe::BabeEpochConfiguration
+     * Lookup433: sp_consensus_babe::BabeEpochConfiguration
      **/
     SpConsensusBabeBabeEpochConfiguration: {
         c: string;
         allowedSlots: string;
     };
     /**
-     * Lookup435: pallet_babe::pallet::Error<T>
+     * Lookup434: pallet_babe::pallet::Error<T>
      **/
     PalletBabeError: {
         _enum: string[];
     };
     /**
-     * Lookup437: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+     * Lookup436: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
      **/
     PalletAuthorshipUncleEntryItem: {
         _enum: {
@@ -3676,13 +3676,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup438: pallet_authorship::pallet::Error<T>
+     * Lookup437: pallet_authorship::pallet::Error<T>
      **/
     PalletAuthorshipError: {
         _enum: string[];
     };
     /**
-     * Lookup440: pallet_balances::BalanceLock<Balance>
+     * Lookup439: pallet_balances::BalanceLock<Balance>
      **/
     PalletBalancesBalanceLock: {
         id: string;
@@ -3690,38 +3690,38 @@ declare const _default: {
         reasons: string;
     };
     /**
-     * Lookup441: pallet_balances::Reasons
+     * Lookup440: pallet_balances::Reasons
      **/
     PalletBalancesReasons: {
         _enum: string[];
     };
     /**
-     * Lookup444: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     * Lookup443: pallet_balances::ReserveData<ReserveIdentifier, Balance>
      **/
     PalletBalancesReserveData: {
         id: string;
         amount: string;
     };
     /**
-     * Lookup446: pallet_balances::Releases
+     * Lookup445: pallet_balances::Releases
      **/
     PalletBalancesReleases: {
         _enum: string[];
     };
     /**
-     * Lookup447: pallet_balances::pallet::Error<T, I>
+     * Lookup446: pallet_balances::pallet::Error<T, I>
      **/
     PalletBalancesError: {
         _enum: string[];
     };
     /**
-     * Lookup449: pallet_transaction_payment::Releases
+     * Lookup448: pallet_transaction_payment::Releases
      **/
     PalletTransactionPaymentReleases: {
         _enum: string[];
     };
     /**
-     * Lookup450: pallet_election_provider_multi_phase::Phase<Bn>
+     * Lookup449: pallet_election_provider_multi_phase::Phase<Bn>
      **/
     PalletElectionProviderMultiPhasePhase: {
         _enum: {
@@ -3732,7 +3732,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup452: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     * Lookup451: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
      **/
     PalletElectionProviderMultiPhaseReadySolution: {
         supports: string;
@@ -3740,14 +3740,14 @@ declare const _default: {
         compute: string;
     };
     /**
-     * Lookup453: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     * Lookup452: pallet_election_provider_multi_phase::RoundSnapshot<T>
      **/
     PalletElectionProviderMultiPhaseRoundSnapshot: {
         voters: string;
         targets: string;
     };
     /**
-     * Lookup461: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+     * Lookup460: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseSignedSignedSubmission: {
         who: string;
@@ -3756,13 +3756,13 @@ declare const _default: {
         callFee: string;
     };
     /**
-     * Lookup462: pallet_election_provider_multi_phase::pallet::Error<T>
+     * Lookup461: pallet_election_provider_multi_phase::pallet::Error<T>
      **/
     PalletElectionProviderMultiPhaseError: {
         _enum: string[];
     };
     /**
-     * Lookup463: pallet_staking::StakingLedger<T>
+     * Lookup462: pallet_staking::StakingLedger<T>
      **/
     PalletStakingStakingLedger: {
         stash: string;
@@ -3772,14 +3772,14 @@ declare const _default: {
         claimedRewards: string;
     };
     /**
-     * Lookup465: pallet_staking::UnlockChunk<Balance>
+     * Lookup464: pallet_staking::UnlockChunk<Balance>
      **/
     PalletStakingUnlockChunk: {
         value: string;
         era: string;
     };
     /**
-     * Lookup467: pallet_staking::Nominations<T>
+     * Lookup466: pallet_staking::Nominations<T>
      **/
     PalletStakingNominations: {
         targets: string;
@@ -3787,27 +3787,27 @@ declare const _default: {
         suppressed: string;
     };
     /**
-     * Lookup468: pallet_staking::ActiveEraInfo
+     * Lookup467: pallet_staking::ActiveEraInfo
      **/
     PalletStakingActiveEraInfo: {
         index: string;
         start: string;
     };
     /**
-     * Lookup470: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     * Lookup469: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
      **/
     PalletStakingEraRewardPoints: {
         total: string;
         individual: string;
     };
     /**
-     * Lookup474: pallet_staking::Forcing
+     * Lookup473: pallet_staking::Forcing
      **/
     PalletStakingForcing: {
         _enum: string[];
     };
     /**
-     * Lookup476: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+     * Lookup475: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingUnappliedSlash: {
         validator: string;
@@ -3817,7 +3817,7 @@ declare const _default: {
         payout: string;
     };
     /**
-     * Lookup478: pallet_staking::slashing::SlashingSpans
+     * Lookup477: pallet_staking::slashing::SlashingSpans
      **/
     PalletStakingSlashingSlashingSpans: {
         spanIndex: string;
@@ -3826,36 +3826,36 @@ declare const _default: {
         prior: string;
     };
     /**
-     * Lookup479: pallet_staking::slashing::SpanRecord<Balance>
+     * Lookup478: pallet_staking::slashing::SpanRecord<Balance>
      **/
     PalletStakingSlashingSpanRecord: {
         slashed: string;
         paidOut: string;
     };
     /**
-     * Lookup482: pallet_staking::Releases
+     * Lookup481: pallet_staking::Releases
      **/
     PalletStakingReleases: {
         _enum: string[];
     };
     /**
-     * Lookup483: pallet_staking::pallet::pallet::Error<T>
+     * Lookup482: pallet_staking::pallet::pallet::Error<T>
      **/
     PalletStakingPalletError: {
         _enum: string[];
     };
     /**
-     * Lookup487: sp_core::crypto::KeyTypeId
+     * Lookup486: sp_core::crypto::KeyTypeId
      **/
     SpCoreCryptoKeyTypeId: string;
     /**
-     * Lookup488: pallet_session::pallet::Error<T>
+     * Lookup487: pallet_session::pallet::Error<T>
      **/
     PalletSessionError: {
         _enum: string[];
     };
     /**
-     * Lookup490: pallet_grandpa::StoredState<N>
+     * Lookup489: pallet_grandpa::StoredState<N>
      **/
     PalletGrandpaStoredState: {
         _enum: {
@@ -3872,7 +3872,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup491: pallet_grandpa::StoredPendingChange<N, Limit>
+     * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
      **/
     PalletGrandpaStoredPendingChange: {
         scheduledAt: string;
@@ -3881,39 +3881,33 @@ declare const _default: {
         forced: string;
     };
     /**
-     * Lookup493: pallet_grandpa::pallet::Error<T>
+     * Lookup492: pallet_grandpa::pallet::Error<T>
      **/
     PalletGrandpaError: {
         _enum: string[];
     };
     /**
-     * Lookup499: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
      **/
     PalletImOnlineBoundedOpaqueNetworkState: {
         peerId: string;
         externalAddresses: string;
     };
     /**
-     * Lookup503: pallet_im_online::pallet::Error<T>
+     * Lookup502: pallet_im_online::pallet::Error<T>
      **/
     PalletImOnlineError: {
         _enum: string[];
     };
     /**
-     * Lookup504: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
      **/
     SpStakingOffenceOffenceDetails: {
         offender: string;
         reporters: string;
     };
     /**
-     * Lookup507: pallet_sudo::pallet::Error<T>
-     **/
-    PalletSudoError: {
-        _enum: string[];
-    };
-    /**
-     * Lookup508: pallet_bags_list::list::Node<T, I>
+     * Lookup506: pallet_bags_list::list::Node<T, I>
      **/
     PalletBagsListListNode: {
         id: string;
@@ -3923,14 +3917,14 @@ declare const _default: {
         score: string;
     };
     /**
-     * Lookup509: pallet_bags_list::list::Bag<T, I>
+     * Lookup507: pallet_bags_list::list::Bag<T, I>
      **/
     PalletBagsListListBag: {
         head: string;
         tail: string;
     };
     /**
-     * Lookup510: pallet_bags_list::pallet::Error<T, I>
+     * Lookup508: pallet_bags_list::pallet::Error<T, I>
      **/
     PalletBagsListError: {
         _enum: {
@@ -3938,25 +3932,25 @@ declare const _default: {
         };
     };
     /**
-     * Lookup511: pallet_bags_list::list::ListError
+     * Lookup509: pallet_bags_list::list::ListError
      **/
     PalletBagsListListListError: {
         _enum: string[];
     };
     /**
-     * Lookup514: pallet_vesting::Releases
+     * Lookup512: pallet_vesting::Releases
      **/
     PalletVestingReleases: {
         _enum: string[];
     };
     /**
-     * Lookup515: pallet_vesting::pallet::Error<T>
+     * Lookup513: pallet_vesting::pallet::Error<T>
      **/
     PalletVestingError: {
         _enum: string[];
     };
     /**
-     * Lookup517: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
      **/
     PalletMultisigMultisig: {
         when: string;
@@ -3965,20 +3959,20 @@ declare const _default: {
         approvals: string;
     };
     /**
-     * Lookup519: pallet_multisig::pallet::Error<T>
+     * Lookup517: pallet_multisig::pallet::Error<T>
      **/
     PalletMultisigError: {
         _enum: string[];
     };
     /**
-     * Lookup520: pallet_council::CouncilStageUpdate<BlockNumber>
+     * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
      **/
     PalletCouncilCouncilStageUpdate: {
         stage: string;
         changedAt: string;
     };
     /**
-     * Lookup521: pallet_council::CouncilStage<BlockNumber>
+     * Lookup519: pallet_council::CouncilStage<BlockNumber>
      **/
     PalletCouncilCouncilStage: {
         _enum: {
@@ -3988,26 +3982,26 @@ declare const _default: {
         };
     };
     /**
-     * Lookup522: pallet_council::CouncilStageAnnouncing<BlockNumber>
+     * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
      **/
     PalletCouncilCouncilStageAnnouncing: {
         candidatesCount: string;
         endsAt: string;
     };
     /**
-     * Lookup523: pallet_council::CouncilStageElection
+     * Lookup521: pallet_council::CouncilStageElection
      **/
     PalletCouncilCouncilStageElection: {
         candidatesCount: string;
     };
     /**
-     * Lookup524: pallet_council::CouncilStageIdle<BlockNumber>
+     * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
      **/
     PalletCouncilCouncilStageIdle: {
         endsAt: string;
     };
     /**
-     * Lookup526: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
      **/
     PalletCouncilCouncilMember: {
         stakingAccountId: string;
@@ -4018,7 +4012,7 @@ declare const _default: {
         unpaidReward: string;
     };
     /**
-     * Lookup528: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
      **/
     PalletCouncilCandidate: {
         stakingAccountId: string;
@@ -4029,13 +4023,13 @@ declare const _default: {
         noteHash: string;
     };
     /**
-     * Lookup529: pallet_council::Error<T>
+     * Lookup527: pallet_council::Error<T>
      **/
     PalletCouncilError: {
         _enum: string[];
     };
     /**
-     * Lookup530: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStage: {
         _enum: {
@@ -4045,7 +4039,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup532: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
      **/
     PalletReferendumReferendumStageVoting: {
         started: string;
@@ -4054,7 +4048,7 @@ declare const _default: {
         endsAt: string;
     };
     /**
-     * Lookup533: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStageRevealing: {
         started: string;
@@ -4064,7 +4058,7 @@ declare const _default: {
         endsAt: string;
     };
     /**
-     * Lookup534: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
      **/
     PalletReferendumCastVote: {
         commitment: string;
@@ -4073,13 +4067,13 @@ declare const _default: {
         voteFor: string;
     };
     /**
-     * Lookup535: pallet_referendum::Error<T, I>
+     * Lookup533: pallet_referendum::Error<T, I>
      **/
     PalletReferendumError: {
         _enum: string[];
     };
     /**
-     * Lookup536: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+     * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
      **/
     PalletMembershipMembershipObject: {
         handleHash: string;
@@ -4089,20 +4083,20 @@ declare const _default: {
         invites: string;
     };
     /**
-     * Lookup537: pallet_membership::StakingAccountMemberBinding<MemberId>
+     * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
      **/
     PalletMembershipStakingAccountMemberBinding: {
         memberId: string;
         confirmed: string;
     };
     /**
-     * Lookup538: pallet_membership::Error<T>
+     * Lookup536: pallet_membership::Error<T>
      **/
     PalletMembershipError: {
         _enum: string[];
     };
     /**
-     * Lookup539: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletForumCategory: {
         titleHash: string;
@@ -4115,7 +4109,7 @@ declare const _default: {
         stickyThreadIds: string;
     };
     /**
-     * Lookup541: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumThread: {
         categoryId: string;
@@ -4124,7 +4118,7 @@ declare const _default: {
         numberOfEditablePosts: string;
     };
     /**
-     * Lookup542: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumPost: {
         threadId: string;
@@ -4134,19 +4128,19 @@ declare const _default: {
         lastEdited: string;
     };
     /**
-     * Lookup543: pallet_forum::Error<T>
+     * Lookup541: pallet_forum::Error<T>
      **/
     PalletForumError: {
         _enum: string[];
     };
     /**
-     * Lookup544: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+     * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
      **/
     PalletConstitutionConstitutionInfo: {
         textHash: string;
     };
     /**
-     * Lookup545: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyRecord: {
         creationParams: string;
@@ -4156,7 +4150,7 @@ declare const _default: {
         hasUnpaidOracleReward: string;
     };
     /**
-     * Lookup547: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyParametersBoundedBTreeSet: {
         oracle: string;
@@ -4168,7 +4162,7 @@ declare const _default: {
         fundingType: string;
     };
     /**
-     * Lookup548: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup546: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyAssuranceContractTypeBoundedBTreeSet: {
         _enum: {
@@ -4177,7 +4171,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup549: pallet_bounty::BountyMilestone<BlockNumber>
+     * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
      **/
     PalletBountyBountyMilestone: {
         _enum: {
@@ -4194,14 +4188,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup551: pallet_bounty::Contribution<T>
+     * Lookup549: pallet_bounty::Contribution<T>
      **/
     PalletBountyContribution: {
         amount: string;
         funderStateBloatBondAmount: string;
     };
     /**
-     * Lookup552: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
      **/
     PalletBountyEntryRecord: {
         memberId: string;
@@ -4210,13 +4204,13 @@ declare const _default: {
         workSubmitted: string;
     };
     /**
-     * Lookup553: pallet_bounty::Error<T>
+     * Lookup551: pallet_bounty::Error<T>
      **/
     PalletBountyError: {
         _enum: string[];
     };
     /**
-     * Lookup555: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentVideoRecord: {
         inChannel: string;
@@ -4225,7 +4219,7 @@ declare const _default: {
         videoStateBloatBond: string;
     };
     /**
-     * Lookup556: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+     * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
      **/
     PalletContentNftTypesOwnedNft: {
         owner: string;
@@ -4234,7 +4228,7 @@ declare const _default: {
         openAuctionsNonce: string;
     };
     /**
-     * Lookup557: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+     * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
      **/
     PalletContentNftTypesTransactionalStatusRecord: {
         _enum: {
@@ -4246,7 +4240,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup558: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesEnglishAuctionRecord: {
         startingPrice: string;
@@ -4259,14 +4253,14 @@ declare const _default: {
         topBid: string;
     };
     /**
-     * Lookup561: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionBid: {
         amount: string;
         bidderId: string;
     };
     /**
-     * Lookup562: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesOpenAuctionRecord: {
         startingPrice: string;
@@ -4277,7 +4271,7 @@ declare const _default: {
         start: string;
     };
     /**
-     * Lookup563: pallet_content::nft::types::NftOwner<MemberId>
+     * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
      **/
     PalletContentNftTypesNftOwner: {
         _enum: {
@@ -4286,7 +4280,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup566: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+     * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
      **/
     PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
         curators: string;
@@ -4294,7 +4288,7 @@ declare const _default: {
         permissionsByLevel: string;
     };
     /**
-     * Lookup573: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
      **/
     PalletContentNftTypesOpenAuctionBidRecord: {
         amount: string;
@@ -4302,13 +4296,13 @@ declare const _default: {
         auctionId: string;
     };
     /**
-     * Lookup574: pallet_content::errors::Error<T>
+     * Lookup572: pallet_content::errors::Error<T>
      **/
     PalletContentErrorsError: {
         _enum: string[];
     };
     /**
-     * Lookup575: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+     * Lookup573: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
      **/
     PalletStorageBagRecord: {
         storedBy: string;
@@ -4317,7 +4311,7 @@ declare const _default: {
         objectsNumber: string;
     };
     /**
-     * Lookup578: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketRecord: {
         operatorStatus: string;
@@ -4326,7 +4320,7 @@ declare const _default: {
         assignedBags: string;
     };
     /**
-     * Lookup579: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketOperatorStatus: {
         _enum: {
@@ -4336,14 +4330,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup581: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+     * Lookup579: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
      **/
     PalletStorageDynamicBagCreationPolicy: {
         numberOfStorageBuckets: string;
         families: string;
     };
     /**
-     * Lookup584: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletStorageDataObject: {
         _alias: {
@@ -4355,13 +4349,13 @@ declare const _default: {
         ipfsContentId: string;
     };
     /**
-     * Lookup585: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketFamilyRecord: {
         nextDistributionBucketIndex: string;
     };
     /**
-     * Lookup586: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup584: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletStorageDistributionBucketRecord: {
         acceptingNewBags: string;
@@ -4371,13 +4365,13 @@ declare const _default: {
         assignedBags: string;
     };
     /**
-     * Lookup589: pallet_storage::Error<T>
+     * Lookup587: pallet_storage::Error<T>
      **/
     PalletStorageError: {
         _enum: string[];
     };
     /**
-     * Lookup590: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+     * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
      **/
     PalletProjectTokenAccountData: {
         vestingSchedules: string;
@@ -4388,14 +4382,14 @@ declare const _default: {
         lastSaleTotalPurchasedAmount: string;
     };
     /**
-     * Lookup591: pallet_project_token::types::StakingStatus<Balance>
+     * Lookup589: pallet_project_token::types::StakingStatus<Balance>
      **/
     PalletProjectTokenStakingStatus: {
         splitId: string;
         amount: string;
     };
     /**
-     * Lookup593: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
      **/
     PalletProjectTokenVestingSchedule: {
         linearVestingStartBlock: string;
@@ -4405,7 +4399,7 @@ declare const _default: {
         burnedAmount: string;
     };
     /**
-     * Lookup600: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
      **/
     PalletProjectTokenTokenData: {
         totalSupply: string;
@@ -4419,9 +4413,10 @@ declare const _default: {
         revenueSplitRate: string;
         revenueSplit: string;
         nextRevenueSplitId: string;
+        ammCurve: string;
     };
     /**
-     * Lookup601: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitState: {
         _enum: {
@@ -4430,7 +4425,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup602: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitInfo: {
         allocation: string;
@@ -4438,14 +4433,14 @@ declare const _default: {
         dividendsClaimed: string;
     };
     /**
-     * Lookup603: pallet_project_token::types::Timeline<BlockNumber>
+     * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
      **/
     PalletProjectTokenTimeline: {
         start: string;
         duration: string;
     };
     /**
-     * Lookup605: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
      **/
     PalletProjectTokenPatronageData: {
         rate: string;
@@ -4453,13 +4448,13 @@ declare const _default: {
         lastUnclaimedPatronageTallyBlock: string;
     };
     /**
-     * Lookup607: pallet_project_token::errors::Error<T>
+     * Lookup605: pallet_project_token::errors::Error<T>
      **/
     PalletProjectTokenErrorsError: {
         _enum: string[];
     };
     /**
-     * Lookup608: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     * Lookup606: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
      **/
     PalletProposalsEngineProposal: {
         parameters: string;
@@ -4472,7 +4467,7 @@ declare const _default: {
         stakingAccountId: string;
     };
     /**
-     * Lookup609: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     * Lookup607: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
      **/
     PalletProposalsEngineProposalParameters: {
         votingPeriod: string;
@@ -4485,7 +4480,7 @@ declare const _default: {
         constitutionality: string;
     };
     /**
-     * Lookup610: pallet_proposals_engine::types::VotingResults
+     * Lookup608: pallet_proposals_engine::types::VotingResults
      **/
     PalletProposalsEngineVotingResults: {
         abstentions: string;
@@ -4494,13 +4489,13 @@ declare const _default: {
         slashes: string;
     };
     /**
-     * Lookup613: pallet_proposals_engine::Error<T>
+     * Lookup611: pallet_proposals_engine::Error<T>
      **/
     PalletProposalsEngineError: {
         _enum: string[];
     };
     /**
-     * Lookup614: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup612: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionDiscussionThread: {
         activatedAt: string;
@@ -4508,7 +4503,7 @@ declare const _default: {
         mode: string;
     };
     /**
-     * Lookup616: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup614: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
         _enum: {
@@ -4517,7 +4512,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup617: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup615: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProposalsDiscussionDiscussionPost: {
         authorId: string;
@@ -4525,19 +4520,19 @@ declare const _default: {
         lastEdited: string;
     };
     /**
-     * Lookup618: pallet_proposals_discussion::Error<T>
+     * Lookup616: pallet_proposals_discussion::Error<T>
      **/
     PalletProposalsDiscussionError: {
         _enum: string[];
     };
     /**
-     * Lookup619: pallet_proposals_codex::Error<T>
+     * Lookup617: pallet_proposals_codex::Error<T>
      **/
     PalletProposalsCodexError: {
         _enum: string[];
     };
     /**
-     * Lookup620: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+     * Lookup618: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
      **/
     PalletWorkingGroupOpening: {
         openingType: string;
@@ -4548,7 +4543,7 @@ declare const _default: {
         creationStake: string;
     };
     /**
-     * Lookup621: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+     * Lookup619: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
      **/
     PalletWorkingGroupJobApplication: {
         roleAccountId: string;
@@ -4559,7 +4554,7 @@ declare const _default: {
         openingId: string;
     };
     /**
-     * Lookup622: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     * Lookup620: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
      **/
     PalletWorkingGroupGroupWorker: {
         memberId: string;
@@ -4573,13 +4568,13 @@ declare const _default: {
         createdAt: string;
     };
     /**
-     * Lookup623: pallet_working_group::errors::Error<T, I>
+     * Lookup621: pallet_working_group::errors::Error<T, I>
      **/
     PalletWorkingGroupErrorsError: {
         _enum: string[];
     };
     /**
-     * Lookup633: sp_runtime::MultiSignature
+     * Lookup631: sp_runtime::MultiSignature
      **/
     SpRuntimeMultiSignature: {
         _enum: {
@@ -4589,39 +4584,39 @@ declare const _default: {
         };
     };
     /**
-     * Lookup634: sp_core::ecdsa::Signature
+     * Lookup632: sp_core::ecdsa::Signature
      **/
     SpCoreEcdsaSignature: string;
     /**
-     * Lookup637: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     * Lookup635: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
      **/
     FrameSystemExtensionsCheckNonZeroSender: string;
     /**
-     * Lookup638: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     * Lookup636: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
      **/
     FrameSystemExtensionsCheckSpecVersion: string;
     /**
-     * Lookup639: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     * Lookup637: frame_system::extensions::check_tx_version::CheckTxVersion<T>
      **/
     FrameSystemExtensionsCheckTxVersion: string;
     /**
-     * Lookup640: frame_system::extensions::check_genesis::CheckGenesis<T>
+     * Lookup638: frame_system::extensions::check_genesis::CheckGenesis<T>
      **/
     FrameSystemExtensionsCheckGenesis: string;
     /**
-     * Lookup643: frame_system::extensions::check_nonce::CheckNonce<T>
+     * Lookup641: frame_system::extensions::check_nonce::CheckNonce<T>
      **/
     FrameSystemExtensionsCheckNonce: string;
     /**
-     * Lookup644: frame_system::extensions::check_weight::CheckWeight<T>
+     * Lookup642: frame_system::extensions::check_weight::CheckWeight<T>
      **/
     FrameSystemExtensionsCheckWeight: string;
     /**
-     * Lookup645: pallet_transaction_payment::ChargeTransactionPayment<T>
+     * Lookup643: pallet_transaction_payment::ChargeTransactionPayment<T>
      **/
     PalletTransactionPaymentChargeTransactionPayment: string;
     /**
-     * Lookup646: joystream_node_runtime::Runtime
+     * Lookup644: joystream_node_runtime::Runtime
      **/
     JoystreamNodeRuntimeRuntime: string;
 };
diff --git a/node_modules/@joystream/types/lib/augment/registry.d.ts b/node_modules/@joystream/types/lib/augment/registry.d.ts
index a1514a1..65b6fcd 100644
--- a/node_modules/@joystream/types/lib/augment/registry.d.ts
+++ b/node_modules/@joystream/types/lib/augment/registry.d.ts
@@ -1,4 +1,4 @@
-import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletSudoCall, PalletSudoError, PalletSudoEvent, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenAmmCurve, PalletProjectTokenAmmParams, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfers, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
 declare module '@polkadot/types/types/registry' {
     interface InterfaceTypes {
         FinalityGrandpaEquivocationPrecommit: FinalityGrandpaEquivocationPrecommit;
@@ -172,13 +172,14 @@ declare module '@polkadot/types/types/registry' {
         PalletMultisigTimepoint: PalletMultisigTimepoint;
         PalletOffencesEvent: PalletOffencesEvent;
         PalletProjectTokenAccountData: PalletProjectTokenAccountData;
+        PalletProjectTokenAmmCurve: PalletProjectTokenAmmCurve;
+        PalletProjectTokenAmmParams: PalletProjectTokenAmmParams;
         PalletProjectTokenCall: PalletProjectTokenCall;
         PalletProjectTokenErrorsError: PalletProjectTokenErrorsError;
         PalletProjectTokenEventsRawEvent: PalletProjectTokenEventsRawEvent;
         PalletProjectTokenMerkleProof: PalletProjectTokenMerkleProof;
         PalletProjectTokenMerkleSide: PalletProjectTokenMerkleSide;
         PalletProjectTokenPatronageData: PalletProjectTokenPatronageData;
-        PalletProjectTokenPayment: PalletProjectTokenPayment;
         PalletProjectTokenPaymentWithVesting: PalletProjectTokenPaymentWithVesting;
         PalletProjectTokenRevenueSplitInfo: PalletProjectTokenRevenueSplitInfo;
         PalletProjectTokenRevenueSplitState: PalletProjectTokenRevenueSplitState;
@@ -192,8 +193,7 @@ declare module '@polkadot/types/types/registry' {
         PalletProjectTokenTokenSaleParams: PalletProjectTokenTokenSaleParams;
         PalletProjectTokenTransferPolicy: PalletProjectTokenTransferPolicy;
         PalletProjectTokenTransferPolicyParams: PalletProjectTokenTransferPolicyParams;
-        PalletProjectTokenTransfersPayment: PalletProjectTokenTransfersPayment;
-        PalletProjectTokenTransfersPaymentWithVesting: PalletProjectTokenTransfersPaymentWithVesting;
+        PalletProjectTokenTransfers: PalletProjectTokenTransfers;
         PalletProjectTokenValidated: PalletProjectTokenValidated;
         PalletProjectTokenValidatedPayment: PalletProjectTokenValidatedPayment;
         PalletProjectTokenVestingSchedule: PalletProjectTokenVestingSchedule;
@@ -278,9 +278,6 @@ declare module '@polkadot/types/types/registry' {
         PalletStorageStorageBucketRecord: PalletStorageStorageBucketRecord;
         PalletStorageUploadParametersRecord: PalletStorageUploadParametersRecord;
         PalletStorageVoucher: PalletStorageVoucher;
-        PalletSudoCall: PalletSudoCall;
-        PalletSudoError: PalletSudoError;
-        PalletSudoEvent: PalletSudoEvent;
         PalletTimestampCall: PalletTimestampCall;
         PalletTransactionPaymentChargeTransactionPayment: PalletTransactionPaymentChargeTransactionPayment;
         PalletTransactionPaymentReleases: PalletTransactionPaymentReleases;
diff --git a/node_modules/@joystream/types/lib/augment/types-lookup.d.ts b/node_modules/@joystream/types/lib/augment/types-lookup.d.ts
index 3896f19..2b243b0 100644
--- a/node_modules/@joystream/types/lib/augment/types-lookup.d.ts
+++ b/node_modules/@joystream/types/lib/augment/types-lookup.d.ts
@@ -1,7 +1,7 @@
 declare module '@polkadot/types/lookup' {
     import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
     import type { ITuple } from '@polkadot/types-codec/types';
-    import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill, Perquintill } from '@polkadot/types/interfaces/runtime';
+    import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
     import type { Event } from '@polkadot/types/interfaces/system';
     /** @name FrameSystemAccountInfo (3) */
     interface FrameSystemAccountInfo extends Struct {
@@ -360,23 +360,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Offence';
     }
-    /** @name PalletSudoEvent (57) */
-    interface PalletSudoEvent extends Enum {
-        readonly isSudid: boolean;
-        readonly asSudid: {
-            readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
-        } & Struct;
-        readonly isKeyChanged: boolean;
-        readonly asKeyChanged: {
-            readonly oldSudoer: Option<AccountId32>;
-        } & Struct;
-        readonly isSudoAsDone: boolean;
-        readonly asSudoAsDone: {
-            readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
-        } & Struct;
-        readonly type: 'Sudid' | 'KeyChanged' | 'SudoAsDone';
-    }
-    /** @name PalletBagsListEvent (59) */
+    /** @name PalletBagsListEvent (57) */
     interface PalletBagsListEvent extends Enum {
         readonly isRebagged: boolean;
         readonly asRebagged: {
@@ -391,7 +375,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Rebagged' | 'ScoreUpdated';
     }
-    /** @name PalletVestingEvent (60) */
+    /** @name PalletVestingEvent (58) */
     interface PalletVestingEvent extends Enum {
         readonly isVestingUpdated: boolean;
         readonly asVestingUpdated: {
@@ -404,7 +388,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'VestingUpdated' | 'VestingCompleted';
     }
-    /** @name PalletMultisigEvent (61) */
+    /** @name PalletMultisigEvent (59) */
     interface PalletMultisigEvent extends Enum {
         readonly isNewMultisig: boolean;
         readonly asNewMultisig: {
@@ -436,12 +420,12 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
     }
-    /** @name PalletMultisigTimepoint (62) */
+    /** @name PalletMultisigTimepoint (60) */
     interface PalletMultisigTimepoint extends Struct {
         readonly height: u32;
         readonly index: u32;
     }
-    /** @name PalletCouncilRawEvent (63) */
+    /** @name PalletCouncilRawEvent (61) */
     interface PalletCouncilRawEvent extends Enum {
         readonly isAnnouncingPeriodStarted: boolean;
         readonly asAnnouncingPeriodStarted: u32;
@@ -483,7 +467,7 @@ declare module '@polkadot/types/lookup' {
         readonly asCandidateRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'AnnouncingPeriodStarted' | 'NotEnoughCandidates' | 'VotingPeriodStarted' | 'NewCandidate' | 'NewCouncilElected' | 'NewCouncilNotElected' | 'CandidacyStakeRelease' | 'CandidacyWithdraw' | 'CandidacyNoteSet' | 'RewardPayment' | 'BudgetBalanceSet' | 'BudgetRefill' | 'BudgetRefillPlanned' | 'BudgetIncrementUpdated' | 'CouncilorRewardUpdated' | 'RequestFunded' | 'CouncilBudgetFunded' | 'CouncilorRemarked' | 'CandidateRemarked';
     }
-    /** @name PalletReferendumRawEvent (65) */
+    /** @name PalletReferendumRawEvent (63) */
     interface PalletReferendumRawEvent extends Enum {
         readonly isReferendumStarted: boolean;
         readonly asReferendumStarted: ITuple<[u32, u32]>;
@@ -499,19 +483,21 @@ declare module '@polkadot/types/lookup' {
         readonly asVoteRevealed: ITuple<[AccountId32, u64, Bytes]>;
         readonly isStakeReleased: boolean;
         readonly asStakeReleased: AccountId32;
-        readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased';
+        readonly isAccountOptedOutOfVoting: boolean;
+        readonly asAccountOptedOutOfVoting: AccountId32;
+        readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased' | 'AccountOptedOutOfVoting';
     }
-    /** @name PalletReferendumInstance1 (66) */
+    /** @name PalletReferendumInstance1 (64) */
     type PalletReferendumInstance1 = Null;
-    /** @name PalletReferendumOptionResult (68) */
+    /** @name PalletReferendumOptionResult (66) */
     interface PalletReferendumOptionResult extends Struct {
         readonly optionId: u64;
         readonly votePower: u128;
     }
-    /** @name PalletMembershipRawEvent (69) */
+    /** @name PalletMembershipRawEvent (67) */
     interface PalletMembershipRawEvent extends Enum {
         readonly isMemberInvited: boolean;
-        readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters]>;
+        readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters, u128]>;
         readonly isMembershipGifted: boolean;
         readonly asMembershipGifted: ITuple<[u64, PalletMembershipGiftMembershipParameters]>;
         readonly isMembershipBought: boolean;
@@ -541,12 +527,12 @@ declare module '@polkadot/types/lookup' {
         readonly isStakingAccountConfirmed: boolean;
         readonly asStakingAccountConfirmed: ITuple<[AccountId32, u64]>;
         readonly isMemberRemarked: boolean;
-        readonly asMemberRemarked: ITuple<[u64, Bytes]>;
+        readonly asMemberRemarked: ITuple<[u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
         readonly isMemberCreated: boolean;
         readonly asMemberCreated: ITuple<[u64, PalletMembershipCreateMemberParameters, u32]>;
         readonly type: 'MemberInvited' | 'MembershipGifted' | 'MembershipBought' | 'MemberProfileUpdated' | 'MemberAccountsUpdated' | 'MemberVerificationStatusUpdated' | 'ReferralCutUpdated' | 'InvitesTransferred' | 'MembershipPriceUpdated' | 'InitialInvitationBalanceUpdated' | 'LeaderInvitationQuotaUpdated' | 'InitialInvitationCountUpdated' | 'StakingAccountAdded' | 'StakingAccountRemoved' | 'StakingAccountConfirmed' | 'MemberRemarked' | 'MemberCreated';
     }
-    /** @name PalletMembershipBuyMembershipParameters (70) */
+    /** @name PalletMembershipBuyMembershipParameters (68) */
     interface PalletMembershipBuyMembershipParameters extends Struct {
         readonly rootAccount: AccountId32;
         readonly controllerAccount: AccountId32;
@@ -554,7 +540,7 @@ declare module '@polkadot/types/lookup' {
         readonly metadata: Bytes;
         readonly referrerId: Option<u64>;
     }
-    /** @name PalletMembershipInviteMembershipParameters (73) */
+    /** @name PalletMembershipInviteMembershipParameters (71) */
     interface PalletMembershipInviteMembershipParameters extends Struct {
         readonly invitingMemberId: u64;
         readonly rootAccount: AccountId32;
@@ -562,7 +548,7 @@ declare module '@polkadot/types/lookup' {
         readonly handle: Option<Bytes>;
         readonly metadata: Bytes;
     }
-    /** @name PalletMembershipCreateMemberParameters (74) */
+    /** @name PalletMembershipCreateMemberParameters (72) */
     interface PalletMembershipCreateMemberParameters extends Struct {
         readonly rootAccount: AccountId32;
         readonly controllerAccount: AccountId32;
@@ -570,7 +556,7 @@ declare module '@polkadot/types/lookup' {
         readonly metadata: Bytes;
         readonly isFoundingMember: bool;
     }
-    /** @name PalletMembershipGiftMembershipParameters (75) */
+    /** @name PalletMembershipGiftMembershipParameters (73) */
     interface PalletMembershipGiftMembershipParameters extends Struct {
         readonly rootAccount: AccountId32;
         readonly controllerAccount: AccountId32;
@@ -581,7 +567,7 @@ declare module '@polkadot/types/lookup' {
         readonly creditRootAccount: u128;
         readonly applyRootAccountInvitationLock: Option<u128>;
     }
-    /** @name PalletForumRawEvent (77) */
+    /** @name PalletForumRawEvent (78) */
     interface PalletForumRawEvent extends Enum {
         readonly isCategoryCreated: boolean;
         readonly asCategoryCreated: ITuple<[u64, Option<u64>, Bytes, Bytes]>;
@@ -619,26 +605,26 @@ declare module '@polkadot/types/lookup' {
         readonly asCategoryMembershipOfModeratorUpdated: ITuple<[u64, u64, bool]>;
         readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
     }
-    /** @name PalletForumPrivilegedActor (78) */
+    /** @name PalletForumPrivilegedActor (79) */
     interface PalletForumPrivilegedActor extends Enum {
         readonly isLead: boolean;
         readonly isModerator: boolean;
         readonly asModerator: u64;
         readonly type: 'Lead' | 'Moderator';
     }
-    /** @name PalletForumExtendedPostIdObject (79) */
+    /** @name PalletForumExtendedPostIdObject (80) */
     interface PalletForumExtendedPostIdObject extends Struct {
         readonly categoryId: u64;
         readonly threadId: u64;
         readonly postId: u64;
     }
-    /** @name PalletConstitutionRawEvent (84) */
+    /** @name PalletConstitutionRawEvent (85) */
     interface PalletConstitutionRawEvent extends Enum {
         readonly isConstutionAmended: boolean;
         readonly asConstutionAmended: ITuple<[H256, Bytes]>;
         readonly type: 'ConstutionAmended';
     }
-    /** @name PalletBountyRawEvent (85) */
+    /** @name PalletBountyRawEvent (86) */
     interface PalletBountyRawEvent extends Enum {
         readonly isBountyCreated: boolean;
         readonly asBountyCreated: ITuple<[u64, PalletBountyBountyParametersBTreeSet, Bytes]>;
@@ -688,7 +674,7 @@ declare module '@polkadot/types/lookup' {
         readonly asCreatorStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
         readonly type: 'BountyCreated' | 'BountyOracleSwitched' | 'BountyTerminated' | 'BountyFunded' | 'BountyMaxFundingReached' | 'BountyFundingWithdrawal' | 'BountyCreatorCherryWithdrawal' | 'BountyCreatorOracleRewardWithdrawal' | 'BountyOracleRewardWithdrawal' | 'BountyRemoved' | 'WorkEntryAnnounced' | 'WorkSubmitted' | 'OracleJudgmentSubmitted' | 'WorkEntrantFundsWithdrawn' | 'BountyContributorRemarked' | 'BountyOracleRemarked' | 'BountyEntrantRemarked' | 'BountyCreatorRemarked' | 'WorkSubmissionPeriodEnded' | 'WorkEntrantStakeUnlocked' | 'WorkEntrantStakeSlashed' | 'FunderStateBloatBondWithdrawn' | 'CreatorStateBloatBondWithdrawn';
     }
-    /** @name PalletBountyBountyParametersBTreeSet (86) */
+    /** @name PalletBountyBountyParametersBTreeSet (87) */
     interface PalletBountyBountyParametersBTreeSet extends Struct {
         readonly oracle: PalletBountyBountyActor;
         readonly contractType: PalletBountyAssuranceContractTypeBTreeSet;
@@ -698,21 +684,21 @@ declare module '@polkadot/types/lookup' {
         readonly entrantStake: u128;
         readonly fundingType: PalletBountyFundingType;
     }
-    /** @name PalletBountyBountyActor (87) */
+    /** @name PalletBountyBountyActor (88) */
     interface PalletBountyBountyActor extends Enum {
         readonly isCouncil: boolean;
         readonly isMember: boolean;
         readonly asMember: u64;
         readonly type: 'Council' | 'Member';
     }
-    /** @name PalletBountyAssuranceContractTypeBTreeSet (88) */
+    /** @name PalletBountyAssuranceContractTypeBTreeSet (89) */
     interface PalletBountyAssuranceContractTypeBTreeSet extends Enum {
         readonly isOpen: boolean;
         readonly isClosed: boolean;
         readonly asClosed: BTreeSet<u64>;
         readonly type: 'Open' | 'Closed';
     }
-    /** @name PalletBountyFundingType (89) */
+    /** @name PalletBountyFundingType (90) */
     interface PalletBountyFundingType extends Enum {
         readonly isPerpetual: boolean;
         readonly asPerpetual: {
@@ -725,7 +711,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Perpetual' | 'Limited';
     }
-    /** @name PalletBountyOracleWorkEntryJudgment (91) */
+    /** @name PalletBountyOracleWorkEntryJudgment (92) */
     interface PalletBountyOracleWorkEntryJudgment extends Enum {
         readonly isWinner: boolean;
         readonly asWinner: {
@@ -738,7 +724,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Winner' | 'Rejected';
     }
-    /** @name PalletUtilityRawEvent (94) */
+    /** @name PalletUtilityRawEvent (95) */
     interface PalletUtilityRawEvent extends Enum {
         readonly isSignaled: boolean;
         readonly asSignaled: Bytes;
@@ -750,7 +736,7 @@ declare module '@polkadot/types/lookup' {
         readonly asTokensBurned: ITuple<[AccountId32, u128]>;
         readonly type: 'Signaled' | 'RuntimeUpgraded' | 'UpdatedWorkingGroupBudget' | 'TokensBurned';
     }
-    /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (95) */
+    /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (96) */
     interface PalletCommonWorkingGroupIterableEnumsWorkingGroup extends Enum {
         readonly isForum: boolean;
         readonly isStorage: boolean;
@@ -763,13 +749,13 @@ declare module '@polkadot/types/lookup' {
         readonly isMembership: boolean;
         readonly type: 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'App' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership';
     }
-    /** @name PalletCommonBalanceKind (96) */
+    /** @name PalletCommonBalanceKind (97) */
     interface PalletCommonBalanceKind extends Enum {
         readonly isPositive: boolean;
         readonly isNegative: boolean;
         readonly type: 'Positive' | 'Negative';
     }
-    /** @name PalletContentRawEvent (97) */
+    /** @name PalletContentRawEvent (98) */
     interface PalletContentRawEvent extends Enum {
         readonly isCuratorGroupCreated: boolean;
         readonly asCuratorGroupCreated: u64;
@@ -820,11 +806,9 @@ declare module '@polkadot/types/lookup' {
         readonly isVideoAssetsDeletedByModerator: boolean;
         readonly asVideoAssetsDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, bool, Bytes]>;
         readonly isChannelPayoutsUpdated: boolean;
-        readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>]>;
+        readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
         readonly isChannelRewardUpdated: boolean;
-        readonly asChannelRewardUpdated: ITuple<[u128, u64]>;
-        readonly isCouncilRewardClaimed: boolean;
-        readonly asCouncilRewardClaimed: ITuple<[u64, u128]>;
+        readonly asChannelRewardUpdated: ITuple<[u128, u128, u64]>;
         readonly isEnglishAuctionStarted: boolean;
         readonly asEnglishAuctionStarted: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
         readonly isOpenAuctionStarted: boolean;
@@ -881,9 +865,11 @@ declare module '@polkadot/types/lookup' {
         readonly asToggledNftLimits: bool;
         readonly isCreatorTokenIssued: boolean;
         readonly asCreatorTokenIssued: ITuple<[PalletContentPermissionsContentActor, u64, u64]>;
-        readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'CouncilRewardClaimed' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued';
+        readonly isCreatorTokenIssuerRemarked: boolean;
+        readonly asCreatorTokenIssuerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued' | 'CreatorTokenIssuerRemarked';
     }
-    /** @name PalletContentPermissionsContentActor (98) */
+    /** @name PalletContentPermissionsContentActor (99) */
     interface PalletContentPermissionsContentActor extends Enum {
         readonly isCurator: boolean;
         readonly asCurator: ITuple<[u64, u64]>;
@@ -892,7 +878,7 @@ declare module '@polkadot/types/lookup' {
         readonly isLead: boolean;
         readonly type: 'Curator' | 'Member' | 'Lead';
     }
-    /** @name PalletContentChannelRecord (99) */
+    /** @name PalletContentChannelRecord (100) */
     interface PalletContentChannelRecord extends Struct {
         readonly owner: PalletContentChannelOwner;
         readonly numVideos: u64;
@@ -909,7 +895,7 @@ declare module '@polkadot/types/lookup' {
         readonly creatorTokenId: Option<u64>;
         readonly channelStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
     }
-    /** @name PalletContentIterableEnumsChannelActionPermission (103) */
+    /** @name PalletContentIterableEnumsChannelActionPermission (104) */
     interface PalletContentIterableEnumsChannelActionPermission extends Enum {
         readonly isUpdateChannelMetadata: boolean;
         readonly isManageNonVideoChannelAssets: boolean;
@@ -932,9 +918,11 @@ declare module '@polkadot/types/lookup' {
         readonly isReduceCreatorTokenPatronageRate: boolean;
         readonly isManageRevenueSplits: boolean;
         readonly isDeissueCreatorToken: boolean;
-        readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken';
+        readonly isAmmControl: boolean;
+        readonly isCreatorTokenRemarks: boolean;
+        readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken' | 'AmmControl' | 'CreatorTokenRemarks';
     }
-    /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (110) */
+    /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (111) */
     interface PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature extends Enum {
         readonly isChannelFundsTransfer: boolean;
         readonly isCreatorCashout: boolean;
@@ -945,12 +933,12 @@ declare module '@polkadot/types/lookup' {
         readonly isCreatorTokenIssuance: boolean;
         readonly type: 'ChannelFundsTransfer' | 'CreatorCashout' | 'VideoNftIssuance' | 'VideoCreation' | 'VideoUpdate' | 'ChannelUpdate' | 'CreatorTokenIssuance';
     }
-    /** @name PalletCommonBloatBondRepayableBloatBond (113) */
+    /** @name PalletCommonBloatBondRepayableBloatBond (114) */
     interface PalletCommonBloatBondRepayableBloatBond extends Struct {
         readonly repaymentRestrictedTo: Option<AccountId32>;
         readonly amount: u128;
     }
-    /** @name PalletContentChannelOwner (114) */
+    /** @name PalletContentChannelOwner (115) */
     interface PalletContentChannelOwner extends Enum {
         readonly isMember: boolean;
         readonly asMember: u64;
@@ -958,35 +946,35 @@ declare module '@polkadot/types/lookup' {
         readonly asCuratorGroup: u64;
         readonly type: 'Member' | 'CuratorGroup';
     }
-    /** @name PalletContentChannelTransferStatus (115) */
+    /** @name PalletContentChannelTransferStatus (116) */
     interface PalletContentChannelTransferStatus extends Enum {
         readonly isNoActiveTransfer: boolean;
         readonly isPendingTransfer: boolean;
         readonly asPendingTransfer: PalletContentPendingTransfer;
         readonly type: 'NoActiveTransfer' | 'PendingTransfer';
     }
-    /** @name PalletContentPendingTransfer (116) */
+    /** @name PalletContentPendingTransfer (117) */
     interface PalletContentPendingTransfer extends Struct {
         readonly newOwner: PalletContentChannelOwner;
         readonly transferParams: PalletContentTransferCommitmentParametersBoundedBTreeMap;
     }
-    /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (117) */
+    /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (118) */
     interface PalletContentTransferCommitmentParametersBoundedBTreeMap extends Struct {
         readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
         readonly price: u128;
         readonly transferId: u64;
     }
-    /** @name PalletContentLimitPerPeriod (118) */
+    /** @name PalletContentLimitPerPeriod (119) */
     interface PalletContentLimitPerPeriod extends Struct {
         readonly limit: u64;
         readonly blockNumberPeriod: u32;
     }
-    /** @name PalletContentNftCounter (119) */
+    /** @name PalletContentNftCounter (120) */
     interface PalletContentNftCounter extends Struct {
         readonly counter: u64;
         readonly lastUpdated: u32;
     }
-    /** @name PalletContentNftTypesEnglishAuctionParamsRecord (120) */
+    /** @name PalletContentNftTypesEnglishAuctionParamsRecord (121) */
     interface PalletContentNftTypesEnglishAuctionParamsRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -996,7 +984,7 @@ declare module '@polkadot/types/lookup' {
         readonly extensionPeriod: u32;
         readonly minBidStep: u128;
     }
-    /** @name PalletContentNftTypesOpenAuctionParamsRecord (122) */
+    /** @name PalletContentNftTypesOpenAuctionParamsRecord (123) */
     interface PalletContentNftTypesOpenAuctionParamsRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -1004,14 +992,14 @@ declare module '@polkadot/types/lookup' {
         readonly whitelist: BTreeSet<u64>;
         readonly bidLockDuration: u32;
     }
-    /** @name PalletContentNftTypesNftIssuanceParametersRecord (123) */
+    /** @name PalletContentNftTypesNftIssuanceParametersRecord (124) */
     interface PalletContentNftTypesNftIssuanceParametersRecord extends Struct {
         readonly royalty: Option<Perbill>;
         readonly nftMetadata: Bytes;
         readonly nonChannelOwner: Option<u64>;
         readonly initTransactionalStatus: PalletContentNftTypesInitTransactionalStatusRecord;
     }
-    /** @name PalletContentNftTypesInitTransactionalStatusRecord (124) */
+    /** @name PalletContentNftTypesInitTransactionalStatusRecord (125) */
     interface PalletContentNftTypesInitTransactionalStatusRecord extends Enum {
         readonly isIdle: boolean;
         readonly isBuyNow: boolean;
@@ -1024,7 +1012,7 @@ declare module '@polkadot/types/lookup' {
         readonly asOpenAuction: PalletContentNftTypesOpenAuctionParamsRecord;
         readonly type: 'Idle' | 'BuyNow' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction';
     }
-    /** @name PalletContentChannelCreationParametersRecord (126) */
+    /** @name PalletContentChannelCreationParametersRecord (127) */
     interface PalletContentChannelCreationParametersRecord extends Struct {
         readonly assets: Option<PalletContentStorageAssetsRecord>;
         readonly meta: Option<Bytes>;
@@ -1034,22 +1022,22 @@ declare module '@polkadot/types/lookup' {
         readonly expectedChannelStateBloatBond: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletContentStorageAssetsRecord (127) */
+    /** @name PalletContentStorageAssetsRecord (128) */
     interface PalletContentStorageAssetsRecord extends Struct {
         readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
         readonly expectedDataSizeFee: u128;
     }
-    /** @name PalletStorageDataObjectCreationParameters (129) */
+    /** @name PalletStorageDataObjectCreationParameters (130) */
     interface PalletStorageDataObjectCreationParameters extends Struct {
         readonly size_: u64;
         readonly ipfsContentId: Bytes;
     }
-    /** @name PalletStorageDistributionBucketIdRecord (130) */
+    /** @name PalletStorageDistributionBucketIdRecord (131) */
     interface PalletStorageDistributionBucketIdRecord extends Struct {
         readonly distributionBucketFamilyId: u64;
         readonly distributionBucketIndex: u64;
     }
-    /** @name PalletContentChannelUpdateParametersRecord (137) */
+    /** @name PalletContentChannelUpdateParametersRecord (138) */
     interface PalletContentChannelUpdateParametersRecord extends Struct {
         readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
         readonly newMeta: Option<Bytes>;
@@ -1058,7 +1046,7 @@ declare module '@polkadot/types/lookup' {
         readonly expectedDataObjectStateBloatBond: u128;
         readonly storageBucketsNumWitness: Option<u32>;
     }
-    /** @name PalletContentVideoCreationParametersRecord (139) */
+    /** @name PalletContentVideoCreationParametersRecord (140) */
     interface PalletContentVideoCreationParametersRecord extends Struct {
         readonly assets: Option<PalletContentStorageAssetsRecord>;
         readonly meta: Option<Bytes>;
@@ -1067,7 +1055,7 @@ declare module '@polkadot/types/lookup' {
         readonly expectedDataObjectStateBloatBond: u128;
         readonly storageBucketsNumWitness: u32;
     }
-    /** @name PalletContentVideoUpdateParametersRecord (141) */
+    /** @name PalletContentVideoUpdateParametersRecord (142) */
     interface PalletContentVideoUpdateParametersRecord extends Struct {
         readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
         readonly newMeta: Option<Bytes>;
@@ -1076,7 +1064,7 @@ declare module '@polkadot/types/lookup' {
         readonly expectedDataObjectStateBloatBond: u128;
         readonly storageBucketsNumWitness: Option<u32>;
     }
-    /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (144) */
+    /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (145) */
     interface PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction extends Enum {
         readonly isHideVideo: boolean;
         readonly isHideChannel: boolean;
@@ -1090,13 +1078,13 @@ declare module '@polkadot/types/lookup' {
         readonly isUpdateChannelNftLimits: boolean;
         readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideo' | 'DeleteChannel' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
     }
-    /** @name PalletContentTransferCommitmentParametersBTreeMap (148) */
+    /** @name PalletContentTransferCommitmentParametersBTreeMap (149) */
     interface PalletContentTransferCommitmentParametersBTreeMap extends Struct {
         readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
         readonly price: u128;
         readonly transferId: u64;
     }
-    /** @name PalletContentUpdateChannelPayoutsParametersRecord (149) */
+    /** @name PalletContentUpdateChannelPayoutsParametersRecord (150) */
     interface PalletContentUpdateChannelPayoutsParametersRecord extends Struct {
         readonly commitment: Option<H256>;
         readonly payload: Option<PalletContentChannelPayoutsPayloadParametersRecord>;
@@ -1104,27 +1092,26 @@ declare module '@polkadot/types/lookup' {
         readonly maxCashoutAllowed: Option<u128>;
         readonly channelCashoutsEnabled: Option<bool>;
     }
-    /** @name PalletContentChannelPayoutsPayloadParametersRecord (150) */
+    /** @name PalletContentChannelPayoutsPayloadParametersRecord (151) */
     interface PalletContentChannelPayoutsPayloadParametersRecord extends Struct {
-        readonly uploaderAccount: AccountId32;
         readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
         readonly expectedDataSizeFee: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletContentChannelFundsDestination (154) */
+    /** @name PalletContentChannelFundsDestination (155) */
     interface PalletContentChannelFundsDestination extends Enum {
         readonly isAccountId: boolean;
         readonly asAccountId: AccountId32;
         readonly isCouncilBudget: boolean;
         readonly type: 'AccountId' | 'CouncilBudget';
     }
-    /** @name PalletContentNftLimitPeriod (155) */
+    /** @name PalletContentNftLimitPeriod (156) */
     interface PalletContentNftLimitPeriod extends Enum {
         readonly isDaily: boolean;
         readonly isWeekly: boolean;
         readonly type: 'Daily' | 'Weekly';
     }
-    /** @name PalletStorageRawEvent (156) */
+    /** @name PalletStorageRawEvent (157) */
     interface PalletStorageRawEvent extends Enum {
         readonly isStorageBucketCreated: boolean;
         readonly asStorageBucketCreated: ITuple<[u64, Option<u64>, bool, u64, u64]>;
@@ -1212,7 +1199,7 @@ declare module '@polkadot/types/lookup' {
         readonly asDistributionOperatorRemarked: ITuple<[u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
         readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
     }
-    /** @name PalletStorageUploadParametersRecord (157) */
+    /** @name PalletStorageUploadParametersRecord (158) */
     interface PalletStorageUploadParametersRecord extends Struct {
         readonly bagId: PalletStorageBagIdType;
         readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1220,7 +1207,7 @@ declare module '@polkadot/types/lookup' {
         readonly expectedDataSizeFee: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletStorageBagIdType (158) */
+    /** @name PalletStorageBagIdType (159) */
     interface PalletStorageBagIdType extends Enum {
         readonly isStatic: boolean;
         readonly asStatic: PalletStorageStaticBagId;
@@ -1228,14 +1215,14 @@ declare module '@polkadot/types/lookup' {
         readonly asDynamic: PalletStorageDynamicBagIdType;
         readonly type: 'Static' | 'Dynamic';
     }
-    /** @name PalletStorageStaticBagId (159) */
+    /** @name PalletStorageStaticBagId (160) */
     interface PalletStorageStaticBagId extends Enum {
         readonly isCouncil: boolean;
         readonly isWorkingGroup: boolean;
         readonly asWorkingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
         readonly type: 'Council' | 'WorkingGroup';
     }
-    /** @name PalletStorageDynamicBagIdType (160) */
+    /** @name PalletStorageDynamicBagIdType (161) */
     interface PalletStorageDynamicBagIdType extends Enum {
         readonly isMember: boolean;
         readonly asMember: u64;
@@ -1243,7 +1230,7 @@ declare module '@polkadot/types/lookup' {
         readonly asChannel: u64;
         readonly type: 'Member' | 'Channel';
     }
-    /** @name PalletStorageDynBagCreationParametersRecord (161) */
+    /** @name PalletStorageDynBagCreationParametersRecord (162) */
     interface PalletStorageDynBagCreationParametersRecord extends Struct {
         readonly bagId: PalletStorageDynamicBagIdType;
         readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1253,27 +1240,27 @@ declare module '@polkadot/types/lookup' {
         readonly storageBuckets: BTreeSet<u64>;
         readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
     }
-    /** @name PalletStorageVoucher (164) */
+    /** @name PalletStorageVoucher (165) */
     interface PalletStorageVoucher extends Struct {
         readonly sizeLimit: u64;
         readonly objectsLimit: u64;
         readonly sizeUsed: u64;
         readonly objectsUsed: u64;
     }
-    /** @name PalletStorageDynamicBagType (165) */
+    /** @name PalletStorageDynamicBagType (166) */
     interface PalletStorageDynamicBagType extends Enum {
         readonly isMember: boolean;
         readonly isChannel: boolean;
         readonly type: 'Member' | 'Channel';
     }
-    /** @name PalletProjectTokenEventsRawEvent (169) */
+    /** @name PalletProjectTokenEventsRawEvent (170) */
     interface PalletProjectTokenEventsRawEvent extends Enum {
         readonly isTokenAmountTransferred: boolean;
-        readonly asTokenAmountTransferred: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
+        readonly asTokenAmountTransferred: ITuple<[u64, u64, PalletProjectTokenTransfers, Bytes]>;
         readonly isTokenAmountTransferredByIssuer: boolean;
-        readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
+        readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, PalletProjectTokenTransfers, Bytes]>;
         readonly isPatronageRateDecreasedTo: boolean;
-        readonly asPatronageRateDecreasedTo: ITuple<[u64, Perquintill]>;
+        readonly asPatronageRateDecreasedTo: ITuple<[u64, Permill]>;
         readonly isPatronageCreditClaimed: boolean;
         readonly asPatronageCreditClaimed: ITuple<[u64, u128, u64]>;
         readonly isRevenueSplitIssued: boolean;
@@ -1304,16 +1291,26 @@ declare module '@polkadot/types/lookup' {
         readonly asTransferPolicyChangedToPermissionless: u64;
         readonly isTokensBurned: boolean;
         readonly asTokensBurned: ITuple<[u64, u64, u128]>;
-        readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned';
-    }
-    /** @name PalletProjectTokenTransferPolicy (170) */
+        readonly isAmmActivated: boolean;
+        readonly asAmmActivated: ITuple<[u64, u64, PalletProjectTokenAmmCurve]>;
+        readonly isTokensBoughtOnAmm: boolean;
+        readonly asTokensBoughtOnAmm: ITuple<[u64, u64, u128, u128]>;
+        readonly isTokensSoldOnAmm: boolean;
+        readonly asTokensSoldOnAmm: ITuple<[u64, u64, u128, u128]>;
+        readonly isAmmDeactivated: boolean;
+        readonly asAmmDeactivated: ITuple<[u64, u64, u128]>;
+        readonly isMaxYearlyPatronageRateUpdated: boolean;
+        readonly asMaxYearlyPatronageRateUpdated: Permill;
+        readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned' | 'AmmActivated' | 'TokensBoughtOnAmm' | 'TokensSoldOnAmm' | 'AmmDeactivated' | 'MaxYearlyPatronageRateUpdated';
+    }
+    /** @name PalletProjectTokenTransferPolicy (171) */
     interface PalletProjectTokenTransferPolicy extends Enum {
         readonly isPermissionless: boolean;
         readonly isPermissioned: boolean;
         readonly asPermissioned: H256;
         readonly type: 'Permissionless' | 'Permissioned';
     }
-    /** @name PalletProjectTokenTokenIssuanceParameters (171) */
+    /** @name PalletProjectTokenTokenIssuanceParameters (172) */
     interface PalletProjectTokenTokenIssuanceParameters extends Struct {
         readonly initialAllocation: BTreeMap<u64, PalletProjectTokenTokenAllocation>;
         readonly symbol: H256;
@@ -1321,36 +1318,39 @@ declare module '@polkadot/types/lookup' {
         readonly patronageRate: Permill;
         readonly revenueSplitRate: Permill;
     }
-    /** @name PalletProjectTokenTokenAllocation (172) */
+    /** @name PalletProjectTokenTokenAllocation (173) */
     interface PalletProjectTokenTokenAllocation extends Struct {
         readonly amount: u128;
         readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
     }
-    /** @name PalletProjectTokenVestingScheduleParams (173) */
+    /** @name PalletProjectTokenVestingScheduleParams (174) */
     interface PalletProjectTokenVestingScheduleParams extends Struct {
         readonly linearVestingDuration: u32;
         readonly blocksBeforeCliff: u32;
         readonly cliffAmountPercentage: Permill;
     }
-    /** @name PalletProjectTokenTransferPolicyParams (176) */
+    /** @name PalletProjectTokenTransferPolicyParams (177) */
     interface PalletProjectTokenTransferPolicyParams extends Enum {
         readonly isPermissionless: boolean;
         readonly isPermissioned: boolean;
         readonly asPermissioned: PalletProjectTokenWhitelistParams;
         readonly type: 'Permissionless' | 'Permissioned';
     }
-    /** @name PalletProjectTokenWhitelistParams (177) */
+    /** @name PalletProjectTokenWhitelistParams (178) */
     interface PalletProjectTokenWhitelistParams extends Struct {
         readonly commitment: H256;
         readonly payload: Option<PalletProjectTokenSingleDataObjectUploadParams>;
     }
-    /** @name PalletProjectTokenSingleDataObjectUploadParams (178) */
+    /** @name PalletProjectTokenSingleDataObjectUploadParams (179) */
     interface PalletProjectTokenSingleDataObjectUploadParams extends Struct {
         readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
         readonly expectedDataSizeFee: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletProjectTokenValidated (185) */
+    /** @name PalletProjectTokenTransfers (185) */
+    interface PalletProjectTokenTransfers extends BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment> {
+    }
+    /** @name PalletProjectTokenValidated (186) */
     interface PalletProjectTokenValidated extends Enum {
         readonly isExisting: boolean;
         readonly asExisting: u64;
@@ -1358,17 +1358,17 @@ declare module '@polkadot/types/lookup' {
         readonly asNonExisting: u64;
         readonly type: 'Existing' | 'NonExisting';
     }
-    /** @name PalletProjectTokenValidatedPayment (186) */
+    /** @name PalletProjectTokenValidatedPayment (187) */
     interface PalletProjectTokenValidatedPayment extends Struct {
         readonly payment: PalletProjectTokenPaymentWithVesting;
         readonly vestingCleanupCandidate: Option<PalletProjectTokenVestingSource>;
     }
-    /** @name PalletProjectTokenPaymentWithVesting (187) */
+    /** @name PalletProjectTokenPaymentWithVesting (188) */
     interface PalletProjectTokenPaymentWithVesting extends Struct {
         readonly amount: u128;
         readonly vestingSchedule: Option<PalletProjectTokenVestingScheduleParams>;
     }
-    /** @name PalletProjectTokenVestingSource (189) */
+    /** @name PalletProjectTokenVestingSource (190) */
     interface PalletProjectTokenVestingSource extends Enum {
         readonly isInitialIssuance: boolean;
         readonly isSale: boolean;
@@ -1377,7 +1377,7 @@ declare module '@polkadot/types/lookup' {
         readonly asIssuerTransfer: u64;
         readonly type: 'InitialIssuance' | 'Sale' | 'IssuerTransfer';
     }
-    /** @name PalletProjectTokenTokenSale (193) */
+    /** @name PalletProjectTokenTokenSale (194) */
     interface PalletProjectTokenTokenSale extends Struct {
         readonly unitPrice: u128;
         readonly quantityLeft: u128;
@@ -1390,7 +1390,13 @@ declare module '@polkadot/types/lookup' {
         readonly capPerMember: Option<u128>;
         readonly autoFinalize: bool;
     }
-    /** @name PalletProposalsEngineRawEvent (195) */
+    /** @name PalletProjectTokenAmmCurve (195) */
+    interface PalletProjectTokenAmmCurve extends Struct {
+        readonly slope: u128;
+        readonly intercept: u128;
+        readonly providedSupply: u128;
+    }
+    /** @name PalletProposalsEngineRawEvent (196) */
     interface PalletProposalsEngineRawEvent extends Enum {
         readonly isProposalStatusUpdated: boolean;
         readonly asProposalStatusUpdated: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
@@ -1406,7 +1412,7 @@ declare module '@polkadot/types/lookup' {
         readonly asProposerRemarked: ITuple<[u64, u32, Bytes]>;
         readonly type: 'ProposalStatusUpdated' | 'ProposalDecisionMade' | 'ProposalExecuted' | 'Voted' | 'ProposalCancelled' | 'ProposerRemarked';
     }
-    /** @name PalletProposalsEngineProposalStatusesProposalStatus (196) */
+    /** @name PalletProposalsEngineProposalStatusesProposalStatus (197) */
     interface PalletProposalsEngineProposalStatusesProposalStatus extends Enum {
         readonly isActive: boolean;
         readonly isPendingExecution: boolean;
@@ -1414,7 +1420,7 @@ declare module '@polkadot/types/lookup' {
         readonly isPendingConstitutionality: boolean;
         readonly type: 'Active' | 'PendingExecution' | 'PendingConstitutionality';
     }
-    /** @name PalletProposalsEngineProposalStatusesProposalDecision (197) */
+    /** @name PalletProposalsEngineProposalStatusesProposalDecision (198) */
     interface PalletProposalsEngineProposalStatusesProposalDecision extends Enum {
         readonly isCanceled: boolean;
         readonly isCanceledByRuntime: boolean;
@@ -1426,13 +1432,13 @@ declare module '@polkadot/types/lookup' {
         readonly asApproved: PalletProposalsEngineProposalStatusesApprovedProposalDecision;
         readonly type: 'Canceled' | 'CanceledByRuntime' | 'Vetoed' | 'Rejected' | 'Slashed' | 'Expired' | 'Approved';
     }
-    /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (198) */
+    /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (199) */
     interface PalletProposalsEngineProposalStatusesApprovedProposalDecision extends Enum {
         readonly isPendingExecution: boolean;
         readonly isPendingConstitutionality: boolean;
         readonly type: 'PendingExecution' | 'PendingConstitutionality';
     }
-    /** @name PalletProposalsEngineProposalStatusesExecutionStatus (199) */
+    /** @name PalletProposalsEngineProposalStatusesExecutionStatus (200) */
     interface PalletProposalsEngineProposalStatusesExecutionStatus extends Enum {
         readonly isExecuted: boolean;
         readonly isExecutionFailed: boolean;
@@ -1441,7 +1447,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Executed' | 'ExecutionFailed';
     }
-    /** @name PalletProposalsEngineVoteKind (200) */
+    /** @name PalletProposalsEngineVoteKind (201) */
     interface PalletProposalsEngineVoteKind extends Enum {
         readonly isApprove: boolean;
         readonly isReject: boolean;
@@ -1449,7 +1455,7 @@ declare module '@polkadot/types/lookup' {
         readonly isAbstain: boolean;
         readonly type: 'Approve' | 'Reject' | 'Slash' | 'Abstain';
     }
-    /** @name PalletProposalsDiscussionRawEvent (201) */
+    /** @name PalletProposalsDiscussionRawEvent (202) */
     interface PalletProposalsDiscussionRawEvent extends Enum {
         readonly isThreadCreated: boolean;
         readonly asThreadCreated: ITuple<[u64, u64]>;
@@ -1463,20 +1469,20 @@ declare module '@polkadot/types/lookup' {
         readonly asPostDeleted: ITuple<[u64, u64, u64, bool]>;
         readonly type: 'ThreadCreated' | 'PostCreated' | 'PostUpdated' | 'ThreadModeChanged' | 'PostDeleted';
     }
-    /** @name PalletProposalsDiscussionThreadModeBTreeSet (202) */
+    /** @name PalletProposalsDiscussionThreadModeBTreeSet (203) */
     interface PalletProposalsDiscussionThreadModeBTreeSet extends Enum {
         readonly isOpen: boolean;
         readonly isClosed: boolean;
         readonly asClosed: BTreeSet<u64>;
         readonly type: 'Open' | 'Closed';
     }
-    /** @name PalletProposalsCodexRawEvent (203) */
+    /** @name PalletProposalsCodexRawEvent (204) */
     interface PalletProposalsCodexRawEvent extends Enum {
         readonly isProposalCreated: boolean;
         readonly asProposalCreated: ITuple<[u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
         readonly type: 'ProposalCreated';
     }
-    /** @name PalletProposalsCodexGeneralProposalParams (204) */
+    /** @name PalletProposalsCodexGeneralProposalParams (205) */
     interface PalletProposalsCodexGeneralProposalParams extends Struct {
         readonly memberId: u64;
         readonly title: Bytes;
@@ -1484,7 +1490,7 @@ declare module '@polkadot/types/lookup' {
         readonly stakingAccountId: Option<AccountId32>;
         readonly exactExecutionBlock: Option<u32>;
     }
-    /** @name PalletProposalsCodexProposalDetails (205) */
+    /** @name PalletProposalsCodexProposalDetails (206) */
     interface PalletProposalsCodexProposalDetails extends Enum {
         readonly isSignal: boolean;
         readonly asSignal: Bytes;
@@ -1532,38 +1538,40 @@ declare module '@polkadot/types/lookup' {
         readonly asUpdateGlobalNftLimit: ITuple<[PalletContentNftLimitPeriod, u64]>;
         readonly isUpdateChannelPayouts: boolean;
         readonly asUpdateChannelPayouts: PalletContentUpdateChannelPayoutsParametersRecord;
-        readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts';
+        readonly isUpdateMaxYearlyPatronageRate: boolean;
+        readonly asUpdateMaxYearlyPatronageRate: Permill;
+        readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts' | 'UpdateMaxYearlyPatronageRate';
     }
-    /** @name PalletCommonFundingRequestParameters (207) */
+    /** @name PalletCommonFundingRequestParameters (208) */
     interface PalletCommonFundingRequestParameters extends Struct {
         readonly account: AccountId32;
         readonly amount: u128;
     }
-    /** @name PalletProposalsCodexCreateOpeningParameters (208) */
+    /** @name PalletProposalsCodexCreateOpeningParameters (209) */
     interface PalletProposalsCodexCreateOpeningParameters extends Struct {
         readonly description: Bytes;
         readonly stakePolicy: PalletWorkingGroupStakePolicy;
         readonly rewardPerBlock: Option<u128>;
         readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
     }
-    /** @name PalletWorkingGroupStakePolicy (209) */
+    /** @name PalletWorkingGroupStakePolicy (210) */
     interface PalletWorkingGroupStakePolicy extends Struct {
         readonly stakeAmount: u128;
         readonly leavingUnstakingPeriod: u32;
     }
-    /** @name PalletProposalsCodexFillOpeningParameters (210) */
+    /** @name PalletProposalsCodexFillOpeningParameters (211) */
     interface PalletProposalsCodexFillOpeningParameters extends Struct {
         readonly openingId: u64;
         readonly applicationId: u64;
         readonly workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
     }
-    /** @name PalletProposalsCodexTerminateRoleParameters (211) */
+    /** @name PalletProposalsCodexTerminateRoleParameters (212) */
     interface PalletProposalsCodexTerminateRoleParameters extends Struct {
         readonly workerId: u64;
         readonly slashingAmount: Option<u128>;
         readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
     }
-    /** @name PalletWorkingGroupRawEventInstance1 (212) */
+    /** @name PalletWorkingGroupRawEventInstance1 (213) */
     interface PalletWorkingGroupRawEventInstance1 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1616,13 +1624,13 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupOpeningType (216) */
+    /** @name PalletWorkingGroupOpeningType (217) */
     interface PalletWorkingGroupOpeningType extends Enum {
         readonly isLeader: boolean;
         readonly isRegular: boolean;
         readonly type: 'Leader' | 'Regular';
     }
-    /** @name PalletWorkingGroupApplyOnOpeningParams (217) */
+    /** @name PalletWorkingGroupApplyOnOpeningParams (218) */
     interface PalletWorkingGroupApplyOnOpeningParams extends Struct {
         readonly memberId: u64;
         readonly openingId: u64;
@@ -1631,20 +1639,20 @@ declare module '@polkadot/types/lookup' {
         readonly description: Bytes;
         readonly stakeParameters: PalletWorkingGroupStakeParameters;
     }
-    /** @name PalletWorkingGroupStakeParameters (218) */
+    /** @name PalletWorkingGroupStakeParameters (219) */
     interface PalletWorkingGroupStakeParameters extends Struct {
         readonly stake: u128;
         readonly stakingAccountId: AccountId32;
     }
-    /** @name PalletWorkingGroupInstance1 (219) */
+    /** @name PalletWorkingGroupInstance1 (220) */
     type PalletWorkingGroupInstance1 = Null;
-    /** @name PalletWorkingGroupRewardPaymentType (220) */
+    /** @name PalletWorkingGroupRewardPaymentType (221) */
     interface PalletWorkingGroupRewardPaymentType extends Enum {
         readonly isMissedReward: boolean;
         readonly isRegularReward: boolean;
         readonly type: 'MissedReward' | 'RegularReward';
     }
-    /** @name PalletWorkingGroupRawEventInstance2 (221) */
+    /** @name PalletWorkingGroupRawEventInstance2 (222) */
     interface PalletWorkingGroupRawEventInstance2 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1697,9 +1705,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance2 (222) */
+    /** @name PalletWorkingGroupInstance2 (223) */
     type PalletWorkingGroupInstance2 = Null;
-    /** @name PalletWorkingGroupRawEventInstance3 (223) */
+    /** @name PalletWorkingGroupRawEventInstance3 (224) */
     interface PalletWorkingGroupRawEventInstance3 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1752,9 +1760,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance3 (224) */
+    /** @name PalletWorkingGroupInstance3 (225) */
     type PalletWorkingGroupInstance3 = Null;
-    /** @name PalletWorkingGroupRawEventInstance4 (225) */
+    /** @name PalletWorkingGroupRawEventInstance4 (226) */
     interface PalletWorkingGroupRawEventInstance4 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1807,9 +1815,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance4 (226) */
+    /** @name PalletWorkingGroupInstance4 (227) */
     type PalletWorkingGroupInstance4 = Null;
-    /** @name PalletWorkingGroupRawEventInstance5 (227) */
+    /** @name PalletWorkingGroupRawEventInstance5 (228) */
     interface PalletWorkingGroupRawEventInstance5 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1862,9 +1870,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance5 (228) */
+    /** @name PalletWorkingGroupInstance5 (229) */
     type PalletWorkingGroupInstance5 = Null;
-    /** @name PalletWorkingGroupRawEventInstance6 (229) */
+    /** @name PalletWorkingGroupRawEventInstance6 (230) */
     interface PalletWorkingGroupRawEventInstance6 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1917,9 +1925,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance6 (230) */
+    /** @name PalletWorkingGroupInstance6 (231) */
     type PalletWorkingGroupInstance6 = Null;
-    /** @name PalletWorkingGroupRawEventInstance7 (231) */
+    /** @name PalletWorkingGroupRawEventInstance7 (232) */
     interface PalletWorkingGroupRawEventInstance7 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1972,9 +1980,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance7 (232) */
+    /** @name PalletWorkingGroupInstance7 (233) */
     type PalletWorkingGroupInstance7 = Null;
-    /** @name PalletWorkingGroupRawEventInstance8 (233) */
+    /** @name PalletWorkingGroupRawEventInstance8 (234) */
     interface PalletWorkingGroupRawEventInstance8 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2027,9 +2035,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance8 (234) */
+    /** @name PalletWorkingGroupInstance8 (235) */
     type PalletWorkingGroupInstance8 = Null;
-    /** @name PalletWorkingGroupRawEventInstance9 (235) */
+    /** @name PalletWorkingGroupRawEventInstance9 (236) */
     interface PalletWorkingGroupRawEventInstance9 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2082,9 +2090,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance9 (236) */
+    /** @name PalletWorkingGroupInstance9 (237) */
     type PalletWorkingGroupInstance9 = Null;
-    /** @name FrameSystemPhase (237) */
+    /** @name FrameSystemPhase (238) */
     interface FrameSystemPhase extends Enum {
         readonly isApplyExtrinsic: boolean;
         readonly asApplyExtrinsic: u32;
@@ -2092,12 +2100,12 @@ declare module '@polkadot/types/lookup' {
         readonly isInitialization: boolean;
         readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
     }
-    /** @name FrameSystemLastRuntimeUpgradeInfo (241) */
+    /** @name FrameSystemLastRuntimeUpgradeInfo (242) */
     interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
         readonly specVersion: Compact<u32>;
         readonly specName: Text;
     }
-    /** @name FrameSystemCall (244) */
+    /** @name FrameSystemCall (245) */
     interface FrameSystemCall extends Enum {
         readonly isFillBlock: boolean;
         readonly asFillBlock: {
@@ -2138,41 +2146,41 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
     }
-    /** @name FrameSystemLimitsBlockWeights (247) */
+    /** @name FrameSystemLimitsBlockWeights (248) */
     interface FrameSystemLimitsBlockWeights extends Struct {
         readonly baseBlock: u64;
         readonly maxBlock: u64;
         readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
     }
-    /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (248) */
+    /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (249) */
     interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
         readonly normal: FrameSystemLimitsWeightsPerClass;
         readonly operational: FrameSystemLimitsWeightsPerClass;
         readonly mandatory: FrameSystemLimitsWeightsPerClass;
     }
-    /** @name FrameSystemLimitsWeightsPerClass (249) */
+    /** @name FrameSystemLimitsWeightsPerClass (250) */
     interface FrameSystemLimitsWeightsPerClass extends Struct {
         readonly baseExtrinsic: u64;
         readonly maxExtrinsic: Option<u64>;
         readonly maxTotal: Option<u64>;
         readonly reserved: Option<u64>;
     }
-    /** @name FrameSystemLimitsBlockLength (250) */
+    /** @name FrameSystemLimitsBlockLength (251) */
     interface FrameSystemLimitsBlockLength extends Struct {
         readonly max: FrameSupportWeightsPerDispatchClassU32;
     }
-    /** @name FrameSupportWeightsPerDispatchClassU32 (251) */
+    /** @name FrameSupportWeightsPerDispatchClassU32 (252) */
     interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
         readonly normal: u32;
         readonly operational: u32;
         readonly mandatory: u32;
     }
-    /** @name FrameSupportWeightsRuntimeDbWeight (252) */
+    /** @name FrameSupportWeightsRuntimeDbWeight (253) */
     interface FrameSupportWeightsRuntimeDbWeight extends Struct {
         readonly read: u64;
         readonly write: u64;
     }
-    /** @name SpVersionRuntimeVersion (253) */
+    /** @name SpVersionRuntimeVersion (254) */
     interface SpVersionRuntimeVersion extends Struct {
         readonly specName: Text;
         readonly implName: Text;
@@ -2183,7 +2191,7 @@ declare module '@polkadot/types/lookup' {
         readonly transactionVersion: u32;
         readonly stateVersion: u8;
     }
-    /** @name FrameSystemError (259) */
+    /** @name FrameSystemError (260) */
     interface FrameSystemError extends Enum {
         readonly isInvalidSpecName: boolean;
         readonly isSpecVersionNeedsToIncrease: boolean;
@@ -2193,7 +2201,7 @@ declare module '@polkadot/types/lookup' {
         readonly isCallFiltered: boolean;
         readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
     }
-    /** @name PalletUtilityCall (260) */
+    /** @name PalletUtilityCall (261) */
     interface PalletUtilityCall extends Enum {
         readonly isBatch: boolean;
         readonly asBatch: {
@@ -2219,7 +2227,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
     }
-    /** @name PalletBabeCall (263) */
+    /** @name PalletBabeCall (264) */
     interface PalletBabeCall extends Enum {
         readonly isReportEquivocation: boolean;
         readonly asReportEquivocation: {
@@ -2237,14 +2245,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'PlanConfigChange';
     }
-    /** @name SpConsensusSlotsEquivocationProof (264) */
+    /** @name SpConsensusSlotsEquivocationProof (265) */
     interface SpConsensusSlotsEquivocationProof extends Struct {
         readonly offender: SpConsensusBabeAppPublic;
         readonly slot: u64;
         readonly firstHeader: SpRuntimeHeader;
         readonly secondHeader: SpRuntimeHeader;
     }
-    /** @name SpRuntimeHeader (265) */
+    /** @name SpRuntimeHeader (266) */
     interface SpRuntimeHeader extends Struct {
         readonly parentHash: H256;
         readonly number: Compact<u32>;
@@ -2252,18 +2260,18 @@ declare module '@polkadot/types/lookup' {
         readonly extrinsicsRoot: H256;
         readonly digest: SpRuntimeDigest;
     }
-    /** @name SpRuntimeBlakeTwo256 (266) */
+    /** @name SpRuntimeBlakeTwo256 (267) */
     type SpRuntimeBlakeTwo256 = Null;
-    /** @name SpConsensusBabeAppPublic (267) */
+    /** @name SpConsensusBabeAppPublic (268) */
     interface SpConsensusBabeAppPublic extends SpCoreSr25519Public {
     }
-    /** @name SpSessionMembershipProof (269) */
+    /** @name SpSessionMembershipProof (270) */
     interface SpSessionMembershipProof extends Struct {
         readonly session: u32;
         readonly trieNodes: Vec<Bytes>;
         readonly validatorCount: u32;
     }
-    /** @name SpConsensusBabeDigestsNextConfigDescriptor (270) */
+    /** @name SpConsensusBabeDigestsNextConfigDescriptor (271) */
     interface SpConsensusBabeDigestsNextConfigDescriptor extends Enum {
         readonly isV1: boolean;
         readonly asV1: {
@@ -2272,14 +2280,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'V1';
     }
-    /** @name SpConsensusBabeAllowedSlots (271) */
+    /** @name SpConsensusBabeAllowedSlots (272) */
     interface SpConsensusBabeAllowedSlots extends Enum {
         readonly isPrimarySlots: boolean;
         readonly isPrimaryAndSecondaryPlainSlots: boolean;
         readonly isPrimaryAndSecondaryVRFSlots: boolean;
         readonly type: 'PrimarySlots' | 'PrimaryAndSecondaryPlainSlots' | 'PrimaryAndSecondaryVRFSlots';
     }
-    /** @name PalletTimestampCall (272) */
+    /** @name PalletTimestampCall (273) */
     interface PalletTimestampCall extends Enum {
         readonly isSet: boolean;
         readonly asSet: {
@@ -2287,7 +2295,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Set';
     }
-    /** @name PalletAuthorshipCall (274) */
+    /** @name PalletAuthorshipCall (275) */
     interface PalletAuthorshipCall extends Enum {
         readonly isSetUncles: boolean;
         readonly asSetUncles: {
@@ -2295,7 +2303,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'SetUncles';
     }
-    /** @name PalletBalancesCall (276) */
+    /** @name PalletBalancesCall (277) */
     interface PalletBalancesCall extends Enum {
         readonly isTransfer: boolean;
         readonly asTransfer: {
@@ -2331,7 +2339,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
     }
-    /** @name PalletElectionProviderMultiPhaseCall (277) */
+    /** @name PalletElectionProviderMultiPhaseCall (278) */
     interface PalletElectionProviderMultiPhaseCall extends Enum {
         readonly isSubmitUnsigned: boolean;
         readonly asSubmitUnsigned: {
@@ -2357,13 +2365,13 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'SubmitUnsigned' | 'SetMinimumUntrustedScore' | 'SetEmergencyElectionResult' | 'Submit' | 'GovernanceFallback';
     }
-    /** @name PalletElectionProviderMultiPhaseRawSolution (278) */
+    /** @name PalletElectionProviderMultiPhaseRawSolution (279) */
     interface PalletElectionProviderMultiPhaseRawSolution extends Struct {
         readonly solution: JoystreamNodeRuntimeNposSolution16;
         readonly score: SpNposElectionsElectionScore;
         readonly round: u32;
     }
-    /** @name JoystreamNodeRuntimeNposSolution16 (279) */
+    /** @name JoystreamNodeRuntimeNposSolution16 (280) */
     interface JoystreamNodeRuntimeNposSolution16 extends Struct {
         readonly votes1: Vec<ITuple<[Compact<u32>, Compact<u16>]>>;
         readonly votes2: Vec<ITuple<[Compact<u32>, ITuple<[Compact<u16>, Compact<PerU16>]>, Compact<u16>]>>;
@@ -2382,18 +2390,18 @@ declare module '@polkadot/types/lookup' {
         readonly votes15: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
         readonly votes16: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
     }
-    /** @name SpNposElectionsElectionScore (330) */
+    /** @name SpNposElectionsElectionScore (331) */
     interface SpNposElectionsElectionScore extends Struct {
         readonly minimalStake: u128;
         readonly sumStake: u128;
         readonly sumStakeSquared: u128;
     }
-    /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (331) */
+    /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (332) */
     interface PalletElectionProviderMultiPhaseSolutionOrSnapshotSize extends Struct {
         readonly voters: Compact<u32>;
         readonly targets: Compact<u32>;
     }
-    /** @name SpNposElectionsSupport (335) */
+    /** @name SpNposElectionsSupport (336) */
     interface SpNposElectionsSupport extends Struct {
         readonly total: u128;
         readonly voters: Vec<ITuple<[AccountId32, u128]>>;
@@ -2658,29 +2666,7 @@ declare module '@polkadot/types/lookup' {
     /** @name SpCoreSr25519Signature (369) */
     interface SpCoreSr25519Signature extends U8aFixed {
     }
-    /** @name PalletSudoCall (370) */
-    interface PalletSudoCall extends Enum {
-        readonly isSudo: boolean;
-        readonly asSudo: {
-            readonly call: Call;
-        } & Struct;
-        readonly isSudoUncheckedWeight: boolean;
-        readonly asSudoUncheckedWeight: {
-            readonly call: Call;
-            readonly weight: u64;
-        } & Struct;
-        readonly isSetKey: boolean;
-        readonly asSetKey: {
-            readonly new_: AccountId32;
-        } & Struct;
-        readonly isSudoAs: boolean;
-        readonly asSudoAs: {
-            readonly who: AccountId32;
-            readonly call: Call;
-        } & Struct;
-        readonly type: 'Sudo' | 'SudoUncheckedWeight' | 'SetKey' | 'SudoAs';
-    }
-    /** @name PalletBagsListCall (371) */
+    /** @name PalletBagsListCall (370) */
     interface PalletBagsListCall extends Enum {
         readonly isRebag: boolean;
         readonly asRebag: {
@@ -2692,7 +2678,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Rebag' | 'PutInFrontOf';
     }
-    /** @name PalletVestingCall (372) */
+    /** @name PalletVestingCall (371) */
     interface PalletVestingCall extends Enum {
         readonly isVest: boolean;
         readonly isVestOther: boolean;
@@ -2717,13 +2703,13 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Vest' | 'VestOther' | 'VestedTransfer' | 'ForceVestedTransfer' | 'MergeSchedules';
     }
-    /** @name PalletVestingVestingInfo (373) */
+    /** @name PalletVestingVestingInfo (372) */
     interface PalletVestingVestingInfo extends Struct {
         readonly locked: u128;
         readonly perBlock: u128;
         readonly startingBlock: u32;
     }
-    /** @name PalletMultisigCall (374) */
+    /** @name PalletMultisigCall (373) */
     interface PalletMultisigCall extends Enum {
         readonly isAsMultiThreshold1: boolean;
         readonly asAsMultiThreshold1: {
@@ -2756,7 +2742,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
     }
-    /** @name PalletCouncilCall (377) */
+    /** @name PalletCouncilCall (376) */
     interface PalletCouncilCall extends Enum {
         readonly isAnnounceCandidacy: boolean;
         readonly asAnnounceCandidacy: {
@@ -2816,7 +2802,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AnnounceCandidacy' | 'ReleaseCandidacyStake' | 'WithdrawCandidacy' | 'SetCandidacyNote' | 'SetBudget' | 'PlanBudgetRefill' | 'SetBudgetIncrement' | 'SetCouncilorReward' | 'FundingRequest' | 'FundCouncilBudget' | 'CouncilorRemark' | 'CandidateRemark';
     }
-    /** @name PalletReferendumCall (378) */
+    /** @name PalletReferendumCall (377) */
     interface PalletReferendumCall extends Enum {
         readonly isVote: boolean;
         readonly asVote: {
@@ -2829,9 +2815,10 @@ declare module '@polkadot/types/lookup' {
             readonly voteOptionId: u64;
         } & Struct;
         readonly isReleaseVoteStake: boolean;
-        readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake';
+        readonly isOptOutOfVoting: boolean;
+        readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake' | 'OptOutOfVoting';
     }
-    /** @name PalletMembershipCall (379) */
+    /** @name PalletMembershipCall (378) */
     interface PalletMembershipCall extends Enum {
         readonly isBuyMembership: boolean;
         readonly asBuyMembership: {
@@ -2906,6 +2893,7 @@ declare module '@polkadot/types/lookup' {
         readonly asMemberRemark: {
             readonly memberId: u64;
             readonly msg: Bytes;
+            readonly payment: Option<ITuple<[AccountId32, u128]>>;
         } & Struct;
         readonly isCreateMember: boolean;
         readonly asCreateMember: {
@@ -2913,7 +2901,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'BuyMembership' | 'UpdateProfile' | 'UpdateAccounts' | 'UpdateProfileVerification' | 'SetReferralCut' | 'TransferInvites' | 'InviteMember' | 'GiftMembership' | 'SetMembershipPrice' | 'SetLeaderInvitationQuota' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'AddStakingAccountCandidate' | 'RemoveStakingAccount' | 'ConfirmStakingAccount' | 'MemberRemark' | 'CreateMember';
     }
-    /** @name PalletForumCall (380) */
+    /** @name PalletForumCall (379) */
     interface PalletForumCall extends Enum {
         readonly isUpdateCategoryMembershipOfModerator: boolean;
         readonly asUpdateCategoryMembershipOfModerator: {
@@ -3023,7 +3011,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
     }
-    /** @name PalletConstitutionCall (381) */
+    /** @name PalletConstitutionCall (380) */
     interface PalletConstitutionCall extends Enum {
         readonly isAmendConstitution: boolean;
         readonly asAmendConstitution: {
@@ -3031,7 +3019,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AmendConstitution';
     }
-    /** @name PalletBountyCall (382) */
+    /** @name PalletBountyCall (381) */
     interface PalletBountyCall extends Enum {
         readonly isCreateBounty: boolean;
         readonly asCreateBounty: {
@@ -3119,7 +3107,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'CreateBounty' | 'FundBounty' | 'TerminateBounty' | 'SwitchOracle' | 'WithdrawFunding' | 'AnnounceWorkEntry' | 'SubmitWork' | 'EndWorkingPeriod' | 'SubmitOracleJudgment' | 'WithdrawEntrantStake' | 'WithdrawOracleReward' | 'ContributorRemark' | 'OracleRemark' | 'EntrantRemark' | 'CreatorRemark';
     }
-    /** @name PalletContentCall (384) */
+    /** @name PalletContentCall (383) */
     interface PalletContentCall extends Enum {
         readonly isCreateCuratorGroup: boolean;
         readonly asCreateCuratorGroup: {
@@ -3245,6 +3233,7 @@ declare module '@polkadot/types/lookup' {
         readonly isUpdateChannelPayouts: boolean;
         readonly asUpdateChannelPayouts: {
             readonly params: PalletContentUpdateChannelPayoutsParametersRecord;
+            readonly uploaderAccount: AccountId32;
         } & Struct;
         readonly isClaimChannelReward: boolean;
         readonly asClaimChannelReward: {
@@ -3387,6 +3376,12 @@ declare module '@polkadot/types/lookup' {
             readonly channelId: u64;
             readonly msg: Bytes;
         } & Struct;
+        readonly isCreatorTokenIssuerRemark: boolean;
+        readonly asCreatorTokenIssuerRemark: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly msg: Bytes;
+        } & Struct;
         readonly isChannelAgentRemark: boolean;
         readonly asChannelAgentRemark: {
             readonly actor: PalletContentPermissionsContentActor;
@@ -3450,7 +3445,7 @@ declare module '@polkadot/types/lookup' {
         readonly asCreatorTokenIssuerTransfer: {
             readonly actor: PalletContentPermissionsContentActor;
             readonly channelId: u64;
-            readonly outputs: PalletProjectTokenTransfersPaymentWithVesting;
+            readonly outputs: Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>>;
             readonly metadata: Bytes;
         } & Struct;
         readonly isMakeCreatorTokenPermissionless: boolean;
@@ -3491,37 +3486,48 @@ declare module '@polkadot/types/lookup' {
             readonly actor: PalletContentPermissionsContentActor;
             readonly channelId: u64;
         } & Struct;
-        readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken';
+        readonly isActivateAmm: boolean;
+        readonly asActivateAmm: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly params: PalletProjectTokenAmmParams;
+        } & Struct;
+        readonly isDeactivateAmm: boolean;
+        readonly asDeactivateAmm: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+        } & Struct;
+        readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'CreatorTokenIssuerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken' | 'ActivateAmm' | 'DeactivateAmm';
     }
-    /** @name PalletContentChannelBagWitness (385) */
+    /** @name PalletContentChannelBagWitness (384) */
     interface PalletContentChannelBagWitness extends Struct {
         readonly storageBucketsNum: u32;
         readonly distributionBucketsNum: u32;
     }
-    /** @name PalletCommonMerkleTreeProofElementRecord (387) */
+    /** @name PalletCommonMerkleTreeProofElementRecord (386) */
     interface PalletCommonMerkleTreeProofElementRecord extends Struct {
         readonly hash_: H256;
         readonly side: PalletCommonMerkleTreeSide;
     }
-    /** @name PalletCommonMerkleTreeSide (388) */
+    /** @name PalletCommonMerkleTreeSide (387) */
     interface PalletCommonMerkleTreeSide extends Enum {
         readonly isLeft: boolean;
         readonly isRight: boolean;
         readonly type: 'Left' | 'Right';
     }
-    /** @name PalletContentPullPaymentElement (389) */
+    /** @name PalletContentPullPaymentElement (388) */
     interface PalletContentPullPaymentElement extends Struct {
         readonly channelId: u64;
         readonly cumulativeRewardEarned: u128;
         readonly reason: H256;
     }
-    /** @name PalletContentInitTransferParameters (390) */
+    /** @name PalletContentInitTransferParameters (389) */
     interface PalletContentInitTransferParameters extends Struct {
         readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
         readonly price: u128;
         readonly newOwner: PalletContentChannelOwner;
     }
-    /** @name PalletProjectTokenTokenSaleParams (391) */
+    /** @name PalletProjectTokenTokenSaleParams (390) */
     interface PalletProjectTokenTokenSaleParams extends Struct {
         readonly unitPrice: u128;
         readonly upperBoundQuantity: u128;
@@ -3531,10 +3537,12 @@ declare module '@polkadot/types/lookup' {
         readonly capPerMember: Option<u128>;
         readonly metadata: Option<Bytes>;
     }
-    /** @name PalletProjectTokenTransfersPaymentWithVesting (392) */
-    interface PalletProjectTokenTransfersPaymentWithVesting extends BTreeMap<u64, PalletProjectTokenPaymentWithVesting> {
+    /** @name PalletProjectTokenAmmParams (394) */
+    interface PalletProjectTokenAmmParams extends Struct {
+        readonly slope: u128;
+        readonly intercept: u128;
     }
-    /** @name PalletStorageCall (396) */
+    /** @name PalletStorageCall (395) */
     interface PalletStorageCall extends Enum {
         readonly isDeleteStorageBucket: boolean;
         readonly asDeleteStorageBucket: {
@@ -3698,10 +3706,6 @@ declare module '@polkadot/types/lookup' {
             readonly bucketId: PalletStorageDistributionBucketIdRecord;
             readonly metadata: Bytes;
         } & Struct;
-        readonly isSudoUploadDataObjects: boolean;
-        readonly asSudoUploadDataObjects: {
-            readonly params: PalletStorageUploadParametersRecord;
-        } & Struct;
         readonly isStorageOperatorRemark: boolean;
         readonly asStorageOperatorRemark: {
             readonly workerId: u64;
@@ -3714,15 +3718,15 @@ declare module '@polkadot/types/lookup' {
             readonly distributionBucketId: PalletStorageDistributionBucketIdRecord;
             readonly msg: Bytes;
         } & Struct;
-        readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'SudoUploadDataObjects' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
+        readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
     }
-    /** @name PalletProjectTokenCall (397) */
+    /** @name PalletProjectTokenCall (396) */
     interface PalletProjectTokenCall extends Enum {
         readonly isTransfer: boolean;
         readonly asTransfer: {
             readonly srcMemberId: u64;
             readonly tokenId: u64;
-            readonly outputs: PalletProjectTokenTransfersPayment;
+            readonly outputs: Vec<ITuple<[u64, u128]>>;
             readonly metadata: Bytes;
         } & Struct;
         readonly isBurn: boolean;
@@ -3759,25 +3763,36 @@ declare module '@polkadot/types/lookup' {
             readonly tokenId: u64;
             readonly memberId: u64;
         } & Struct;
-        readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit';
-    }
-    /** @name PalletProjectTokenTransfersPayment (398) */
-    interface PalletProjectTokenTransfersPayment extends BTreeMap<u64, PalletProjectTokenPayment> {
-    }
-    /** @name PalletProjectTokenPayment (399) */
-    interface PalletProjectTokenPayment extends Struct {
-        readonly amount: u128;
+        readonly isBuyOnAmm: boolean;
+        readonly asBuyOnAmm: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+            readonly amount: u128;
+            readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+        } & Struct;
+        readonly isSellOnAmm: boolean;
+        readonly asSellOnAmm: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+            readonly amount: u128;
+            readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+        } & Struct;
+        readonly isUpdateMaxYearlyPatronageRate: boolean;
+        readonly asUpdateMaxYearlyPatronageRate: {
+            readonly rate: Permill;
+        } & Struct;
+        readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit' | 'BuyOnAmm' | 'SellOnAmm' | 'UpdateMaxYearlyPatronageRate';
     }
-    /** @name PalletProjectTokenMerkleProof (403) */
+    /** @name PalletProjectTokenMerkleProof (400) */
     interface PalletProjectTokenMerkleProof extends Vec<ITuple<[H256, PalletProjectTokenMerkleSide]>> {
     }
-    /** @name PalletProjectTokenMerkleSide (406) */
+    /** @name PalletProjectTokenMerkleSide (403) */
     interface PalletProjectTokenMerkleSide extends Enum {
         readonly isRight: boolean;
         readonly isLeft: boolean;
         readonly type: 'Right' | 'Left';
     }
-    /** @name PalletProposalsEngineCall (407) */
+    /** @name PalletProposalsEngineCall (406) */
     interface PalletProposalsEngineCall extends Enum {
         readonly isVote: boolean;
         readonly asVote: {
@@ -3803,7 +3818,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Vote' | 'CancelProposal' | 'VetoProposal' | 'ProposerRemark';
     }
-    /** @name PalletProposalsDiscussionCall (408) */
+    /** @name PalletProposalsDiscussionCall (407) */
     interface PalletProposalsDiscussionCall extends Enum {
         readonly isAddPost: boolean;
         readonly asAddPost: {
@@ -3833,7 +3848,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AddPost' | 'DeletePost' | 'UpdatePost' | 'ChangeThreadMode';
     }
-    /** @name PalletProposalsCodexCall (409) */
+    /** @name PalletProposalsCodexCall (408) */
     interface PalletProposalsCodexCall extends Enum {
         readonly isCreateProposal: boolean;
         readonly asCreateProposal: {
@@ -3842,7 +3857,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'CreateProposal';
     }
-    /** @name PalletWorkingGroupCall (410) */
+    /** @name PalletWorkingGroupCall (409) */
     interface PalletWorkingGroupCall extends Enum {
         readonly isAddOpening: boolean;
         readonly asAddOpening: {
@@ -3941,14 +3956,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AddOpening' | 'ApplyOnOpening' | 'FillOpening' | 'UpdateRoleAccount' | 'LeaveRole' | 'TerminateRole' | 'SlashStake' | 'DecreaseStake' | 'IncreaseStake' | 'WithdrawApplication' | 'CancelOpening' | 'SetBudget' | 'UpdateRewardAccount' | 'UpdateRewardAmount' | 'SetStatusText' | 'SpendFromBudget' | 'FundWorkingGroupBudget' | 'LeadRemark' | 'WorkerRemark';
     }
-    /** @name JoystreamNodeRuntimeOriginCaller (419) */
+    /** @name JoystreamNodeRuntimeOriginCaller (418) */
     interface JoystreamNodeRuntimeOriginCaller extends Enum {
         readonly isSystem: boolean;
         readonly asSystem: FrameSupportDispatchRawOrigin;
         readonly isVoid: boolean;
         readonly type: 'System' | 'Void';
     }
-    /** @name FrameSupportDispatchRawOrigin (420) */
+    /** @name FrameSupportDispatchRawOrigin (419) */
     interface FrameSupportDispatchRawOrigin extends Enum {
         readonly isRoot: boolean;
         readonly isSigned: boolean;
@@ -3956,14 +3971,14 @@ declare module '@polkadot/types/lookup' {
         readonly isNone: boolean;
         readonly type: 'Root' | 'Signed' | 'None';
     }
-    /** @name SpCoreVoid (421) */
+    /** @name SpCoreVoid (420) */
     type SpCoreVoid = Null;
-    /** @name PalletUtilityError (422) */
+    /** @name PalletUtilityError (421) */
     interface PalletUtilityError extends Enum {
         readonly isTooManyCalls: boolean;
         readonly type: 'TooManyCalls';
     }
-    /** @name SpConsensusBabeDigestsPreDigest (429) */
+    /** @name SpConsensusBabeDigestsPreDigest (428) */
     interface SpConsensusBabeDigestsPreDigest extends Enum {
         readonly isPrimary: boolean;
         readonly asPrimary: SpConsensusBabeDigestsPrimaryPreDigest;
@@ -3973,31 +3988,31 @@ declare module '@polkadot/types/lookup' {
         readonly asSecondaryVRF: SpConsensusBabeDigestsSecondaryVRFPreDigest;
         readonly type: 'Primary' | 'SecondaryPlain' | 'SecondaryVRF';
     }
-    /** @name SpConsensusBabeDigestsPrimaryPreDigest (430) */
+    /** @name SpConsensusBabeDigestsPrimaryPreDigest (429) */
     interface SpConsensusBabeDigestsPrimaryPreDigest extends Struct {
         readonly authorityIndex: u32;
         readonly slot: u64;
         readonly vrfOutput: U8aFixed;
         readonly vrfProof: U8aFixed;
     }
-    /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (431) */
+    /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (430) */
     interface SpConsensusBabeDigestsSecondaryPlainPreDigest extends Struct {
         readonly authorityIndex: u32;
         readonly slot: u64;
     }
-    /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (432) */
+    /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (431) */
     interface SpConsensusBabeDigestsSecondaryVRFPreDigest extends Struct {
         readonly authorityIndex: u32;
         readonly slot: u64;
         readonly vrfOutput: U8aFixed;
         readonly vrfProof: U8aFixed;
     }
-    /** @name SpConsensusBabeBabeEpochConfiguration (434) */
+    /** @name SpConsensusBabeBabeEpochConfiguration (433) */
     interface SpConsensusBabeBabeEpochConfiguration extends Struct {
         readonly c: ITuple<[u64, u64]>;
         readonly allowedSlots: SpConsensusBabeAllowedSlots;
     }
-    /** @name PalletBabeError (435) */
+    /** @name PalletBabeError (434) */
     interface PalletBabeError extends Enum {
         readonly isInvalidEquivocationProof: boolean;
         readonly isInvalidKeyOwnershipProof: boolean;
@@ -4005,7 +4020,7 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidConfiguration: boolean;
         readonly type: 'InvalidEquivocationProof' | 'InvalidKeyOwnershipProof' | 'DuplicateOffenceReport' | 'InvalidConfiguration';
     }
-    /** @name PalletAuthorshipUncleEntryItem (437) */
+    /** @name PalletAuthorshipUncleEntryItem (436) */
     interface PalletAuthorshipUncleEntryItem extends Enum {
         readonly isInclusionHeight: boolean;
         readonly asInclusionHeight: u32;
@@ -4013,7 +4028,7 @@ declare module '@polkadot/types/lookup' {
         readonly asUncle: ITuple<[H256, Option<AccountId32>]>;
         readonly type: 'InclusionHeight' | 'Uncle';
     }
-    /** @name PalletAuthorshipError (438) */
+    /** @name PalletAuthorshipError (437) */
     interface PalletAuthorshipError extends Enum {
         readonly isInvalidUncleParent: boolean;
         readonly isUnclesAlreadySet: boolean;
@@ -4024,31 +4039,31 @@ declare module '@polkadot/types/lookup' {
         readonly isOldUncle: boolean;
         readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
     }
-    /** @name PalletBalancesBalanceLock (440) */
+    /** @name PalletBalancesBalanceLock (439) */
     interface PalletBalancesBalanceLock extends Struct {
         readonly id: U8aFixed;
         readonly amount: u128;
         readonly reasons: PalletBalancesReasons;
     }
-    /** @name PalletBalancesReasons (441) */
+    /** @name PalletBalancesReasons (440) */
     interface PalletBalancesReasons extends Enum {
         readonly isFee: boolean;
         readonly isMisc: boolean;
         readonly isAll: boolean;
         readonly type: 'Fee' | 'Misc' | 'All';
     }
-    /** @name PalletBalancesReserveData (444) */
+    /** @name PalletBalancesReserveData (443) */
     interface PalletBalancesReserveData extends Struct {
         readonly id: U8aFixed;
         readonly amount: u128;
     }
-    /** @name PalletBalancesReleases (446) */
+    /** @name PalletBalancesReleases (445) */
     interface PalletBalancesReleases extends Enum {
         readonly isV100: boolean;
         readonly isV200: boolean;
         readonly type: 'V100' | 'V200';
     }
-    /** @name PalletBalancesError (447) */
+    /** @name PalletBalancesError (446) */
     interface PalletBalancesError extends Enum {
         readonly isVestingBalance: boolean;
         readonly isLiquidityRestrictions: boolean;
@@ -4060,13 +4075,13 @@ declare module '@polkadot/types/lookup' {
         readonly isTooManyReserves: boolean;
         readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
     }
-    /** @name PalletTransactionPaymentReleases (449) */
+    /** @name PalletTransactionPaymentReleases (448) */
     interface PalletTransactionPaymentReleases extends Enum {
         readonly isV1Ancient: boolean;
         readonly isV2: boolean;
         readonly type: 'V1Ancient' | 'V2';
     }
-    /** @name PalletElectionProviderMultiPhasePhase (450) */
+    /** @name PalletElectionProviderMultiPhasePhase (449) */
     interface PalletElectionProviderMultiPhasePhase extends Enum {
         readonly isOff: boolean;
         readonly isSigned: boolean;
@@ -4075,25 +4090,25 @@ declare module '@polkadot/types/lookup' {
         readonly isEmergency: boolean;
         readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
     }
-    /** @name PalletElectionProviderMultiPhaseReadySolution (452) */
+    /** @name PalletElectionProviderMultiPhaseReadySolution (451) */
     interface PalletElectionProviderMultiPhaseReadySolution extends Struct {
         readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
         readonly score: SpNposElectionsElectionScore;
         readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
     }
-    /** @name PalletElectionProviderMultiPhaseRoundSnapshot (453) */
+    /** @name PalletElectionProviderMultiPhaseRoundSnapshot (452) */
     interface PalletElectionProviderMultiPhaseRoundSnapshot extends Struct {
         readonly voters: Vec<ITuple<[AccountId32, u64, Vec<AccountId32>]>>;
         readonly targets: Vec<AccountId32>;
     }
-    /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (461) */
+    /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (460) */
     interface PalletElectionProviderMultiPhaseSignedSignedSubmission extends Struct {
         readonly who: AccountId32;
         readonly deposit: u128;
         readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
         readonly callFee: u128;
     }
-    /** @name PalletElectionProviderMultiPhaseError (462) */
+    /** @name PalletElectionProviderMultiPhaseError (461) */
     interface PalletElectionProviderMultiPhaseError extends Enum {
         readonly isPreDispatchEarlySubmission: boolean;
         readonly isPreDispatchWrongWinnerCount: boolean;
@@ -4109,7 +4124,7 @@ declare module '@polkadot/types/lookup' {
         readonly isFallbackFailed: boolean;
         readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed';
     }
-    /** @name PalletStakingStakingLedger (463) */
+    /** @name PalletStakingStakingLedger (462) */
     interface PalletStakingStakingLedger extends Struct {
         readonly stash: AccountId32;
         readonly total: Compact<u128>;
@@ -4117,28 +4132,28 @@ declare module '@polkadot/types/lookup' {
         readonly unlocking: Vec<PalletStakingUnlockChunk>;
         readonly claimedRewards: Vec<u32>;
     }
-    /** @name PalletStakingUnlockChunk (465) */
+    /** @name PalletStakingUnlockChunk (464) */
     interface PalletStakingUnlockChunk extends Struct {
         readonly value: Compact<u128>;
         readonly era: Compact<u32>;
     }
-    /** @name PalletStakingNominations (467) */
+    /** @name PalletStakingNominations (466) */
     interface PalletStakingNominations extends Struct {
         readonly targets: Vec<AccountId32>;
         readonly submittedIn: u32;
         readonly suppressed: bool;
     }
-    /** @name PalletStakingActiveEraInfo (468) */
+    /** @name PalletStakingActiveEraInfo (467) */
     interface PalletStakingActiveEraInfo extends Struct {
         readonly index: u32;
         readonly start: Option<u64>;
     }
-    /** @name PalletStakingEraRewardPoints (470) */
+    /** @name PalletStakingEraRewardPoints (469) */
     interface PalletStakingEraRewardPoints extends Struct {
         readonly total: u32;
         readonly individual: BTreeMap<AccountId32, u32>;
     }
-    /** @name PalletStakingForcing (474) */
+    /** @name PalletStakingForcing (473) */
     interface PalletStakingForcing extends Enum {
         readonly isNotForcing: boolean;
         readonly isForceNew: boolean;
@@ -4146,7 +4161,7 @@ declare module '@polkadot/types/lookup' {
         readonly isForceAlways: boolean;
         readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
     }
-    /** @name PalletStakingUnappliedSlash (476) */
+    /** @name PalletStakingUnappliedSlash (475) */
     interface PalletStakingUnappliedSlash extends Struct {
         readonly validator: AccountId32;
         readonly own: u128;
@@ -4154,19 +4169,19 @@ declare module '@polkadot/types/lookup' {
         readonly reporters: Vec<AccountId32>;
         readonly payout: u128;
     }
-    /** @name PalletStakingSlashingSlashingSpans (478) */
+    /** @name PalletStakingSlashingSlashingSpans (477) */
     interface PalletStakingSlashingSlashingSpans extends Struct {
         readonly spanIndex: u32;
         readonly lastStart: u32;
         readonly lastNonzeroSlash: u32;
         readonly prior: Vec<u32>;
     }
-    /** @name PalletStakingSlashingSpanRecord (479) */
+    /** @name PalletStakingSlashingSpanRecord (478) */
     interface PalletStakingSlashingSpanRecord extends Struct {
         readonly slashed: u128;
         readonly paidOut: u128;
     }
-    /** @name PalletStakingReleases (482) */
+    /** @name PalletStakingReleases (481) */
     interface PalletStakingReleases extends Enum {
         readonly isV100Ancient: boolean;
         readonly isV200: boolean;
@@ -4179,7 +4194,7 @@ declare module '@polkadot/types/lookup' {
         readonly isV900: boolean;
         readonly type: 'V100Ancient' | 'V200' | 'V300' | 'V400' | 'V500' | 'V600' | 'V700' | 'V800' | 'V900';
     }
-    /** @name PalletStakingPalletError (483) */
+    /** @name PalletStakingPalletError (482) */
     interface PalletStakingPalletError extends Enum {
         readonly isNotController: boolean;
         readonly isNotStash: boolean;
@@ -4208,10 +4223,10 @@ declare module '@polkadot/types/lookup' {
         readonly isBondingRestricted: boolean;
         readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BondingRestricted';
     }
-    /** @name SpCoreCryptoKeyTypeId (487) */
+    /** @name SpCoreCryptoKeyTypeId (486) */
     interface SpCoreCryptoKeyTypeId extends U8aFixed {
     }
-    /** @name PalletSessionError (488) */
+    /** @name PalletSessionError (487) */
     interface PalletSessionError extends Enum {
         readonly isInvalidProof: boolean;
         readonly isNoAssociatedValidatorId: boolean;
@@ -4220,7 +4235,7 @@ declare module '@polkadot/types/lookup' {
         readonly isNoAccount: boolean;
         readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
     }
-    /** @name PalletGrandpaStoredState (490) */
+    /** @name PalletGrandpaStoredState (489) */
     interface PalletGrandpaStoredState extends Enum {
         readonly isLive: boolean;
         readonly isPendingPause: boolean;
@@ -4236,14 +4251,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Live' | 'PendingPause' | 'Paused' | 'PendingResume';
     }
-    /** @name PalletGrandpaStoredPendingChange (491) */
+    /** @name PalletGrandpaStoredPendingChange (490) */
     interface PalletGrandpaStoredPendingChange extends Struct {
         readonly scheduledAt: u32;
         readonly delay: u32;
         readonly nextAuthorities: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
         readonly forced: Option<u32>;
     }
-    /** @name PalletGrandpaError (493) */
+    /** @name PalletGrandpaError (492) */
     interface PalletGrandpaError extends Enum {
         readonly isPauseFailed: boolean;
         readonly isResumeFailed: boolean;
@@ -4254,28 +4269,23 @@ declare module '@polkadot/types/lookup' {
         readonly isDuplicateOffenceReport: boolean;
         readonly type: 'PauseFailed' | 'ResumeFailed' | 'ChangePending' | 'TooSoon' | 'InvalidKeyOwnershipProof' | 'InvalidEquivocationProof' | 'DuplicateOffenceReport';
     }
-    /** @name PalletImOnlineBoundedOpaqueNetworkState (499) */
+    /** @name PalletImOnlineBoundedOpaqueNetworkState (498) */
     interface PalletImOnlineBoundedOpaqueNetworkState extends Struct {
         readonly peerId: Bytes;
         readonly externalAddresses: Vec<Bytes>;
     }
-    /** @name PalletImOnlineError (503) */
+    /** @name PalletImOnlineError (502) */
     interface PalletImOnlineError extends Enum {
         readonly isInvalidKey: boolean;
         readonly isDuplicatedHeartbeat: boolean;
         readonly type: 'InvalidKey' | 'DuplicatedHeartbeat';
     }
-    /** @name SpStakingOffenceOffenceDetails (504) */
+    /** @name SpStakingOffenceOffenceDetails (503) */
     interface SpStakingOffenceOffenceDetails extends Struct {
         readonly offender: ITuple<[AccountId32, PalletStakingExposure]>;
         readonly reporters: Vec<AccountId32>;
     }
-    /** @name PalletSudoError (507) */
-    interface PalletSudoError extends Enum {
-        readonly isRequireSudo: boolean;
-        readonly type: 'RequireSudo';
-    }
-    /** @name PalletBagsListListNode (508) */
+    /** @name PalletBagsListListNode (506) */
     interface PalletBagsListListNode extends Struct {
         readonly id: AccountId32;
         readonly prev: Option<AccountId32>;
@@ -4283,18 +4293,18 @@ declare module '@polkadot/types/lookup' {
         readonly bagUpper: u64;
         readonly score: u64;
     }
-    /** @name PalletBagsListListBag (509) */
+    /** @name PalletBagsListListBag (507) */
     interface PalletBagsListListBag extends Struct {
         readonly head: Option<AccountId32>;
         readonly tail: Option<AccountId32>;
     }
-    /** @name PalletBagsListError (510) */
+    /** @name PalletBagsListError (508) */
     interface PalletBagsListError extends Enum {
         readonly isList: boolean;
         readonly asList: PalletBagsListListListError;
         readonly type: 'List';
     }
-    /** @name PalletBagsListListListError (511) */
+    /** @name PalletBagsListListListError (509) */
     interface PalletBagsListListListError extends Enum {
         readonly isDuplicate: boolean;
         readonly isNotHeavier: boolean;
@@ -4302,13 +4312,13 @@ declare module '@polkadot/types/lookup' {
         readonly isNodeNotFound: boolean;
         readonly type: 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';
     }
-    /** @name PalletVestingReleases (514) */
+    /** @name PalletVestingReleases (512) */
     interface PalletVestingReleases extends Enum {
         readonly isV0: boolean;
         readonly isV1: boolean;
         readonly type: 'V0' | 'V1';
     }
-    /** @name PalletVestingError (515) */
+    /** @name PalletVestingError (513) */
     interface PalletVestingError extends Enum {
         readonly isNotVesting: boolean;
         readonly isAtMaxVestingSchedules: boolean;
@@ -4317,14 +4327,14 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidScheduleParams: boolean;
         readonly type: 'NotVesting' | 'AtMaxVestingSchedules' | 'AmountLow' | 'ScheduleIndexOutOfBounds' | 'InvalidScheduleParams';
     }
-    /** @name PalletMultisigMultisig (517) */
+    /** @name PalletMultisigMultisig (515) */
     interface PalletMultisigMultisig extends Struct {
         readonly when: PalletMultisigTimepoint;
         readonly deposit: u128;
         readonly depositor: AccountId32;
         readonly approvals: Vec<AccountId32>;
     }
-    /** @name PalletMultisigError (519) */
+    /** @name PalletMultisigError (517) */
     interface PalletMultisigError extends Enum {
         readonly isMinimumThreshold: boolean;
         readonly isAlreadyApproved: boolean;
@@ -4342,12 +4352,12 @@ declare module '@polkadot/types/lookup' {
         readonly isAlreadyStored: boolean;
         readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
     }
-    /** @name PalletCouncilCouncilStageUpdate (520) */
+    /** @name PalletCouncilCouncilStageUpdate (518) */
     interface PalletCouncilCouncilStageUpdate extends Struct {
         readonly stage: PalletCouncilCouncilStage;
         readonly changedAt: u32;
     }
-    /** @name PalletCouncilCouncilStage (521) */
+    /** @name PalletCouncilCouncilStage (519) */
     interface PalletCouncilCouncilStage extends Enum {
         readonly isAnnouncing: boolean;
         readonly asAnnouncing: PalletCouncilCouncilStageAnnouncing;
@@ -4357,20 +4367,20 @@ declare module '@polkadot/types/lookup' {
         readonly asIdle: PalletCouncilCouncilStageIdle;
         readonly type: 'Announcing' | 'Election' | 'Idle';
     }
-    /** @name PalletCouncilCouncilStageAnnouncing (522) */
+    /** @name PalletCouncilCouncilStageAnnouncing (520) */
     interface PalletCouncilCouncilStageAnnouncing extends Struct {
         readonly candidatesCount: u32;
         readonly endsAt: u32;
     }
-    /** @name PalletCouncilCouncilStageElection (523) */
+    /** @name PalletCouncilCouncilStageElection (521) */
     interface PalletCouncilCouncilStageElection extends Struct {
         readonly candidatesCount: u32;
     }
-    /** @name PalletCouncilCouncilStageIdle (524) */
+    /** @name PalletCouncilCouncilStageIdle (522) */
     interface PalletCouncilCouncilStageIdle extends Struct {
         readonly endsAt: u32;
     }
-    /** @name PalletCouncilCouncilMember (526) */
+    /** @name PalletCouncilCouncilMember (524) */
     interface PalletCouncilCouncilMember extends Struct {
         readonly stakingAccountId: AccountId32;
         readonly rewardAccountId: AccountId32;
@@ -4379,7 +4389,7 @@ declare module '@polkadot/types/lookup' {
         readonly lastPaymentBlock: u32;
         readonly unpaidReward: u128;
     }
-    /** @name PalletCouncilCandidate (528) */
+    /** @name PalletCouncilCandidate (526) */
     interface PalletCouncilCandidate extends Struct {
         readonly stakingAccountId: AccountId32;
         readonly rewardAccountId: AccountId32;
@@ -4388,7 +4398,7 @@ declare module '@polkadot/types/lookup' {
         readonly votePower: u128;
         readonly noteHash: Option<H256>;
     }
-    /** @name PalletCouncilError (529) */
+    /** @name PalletCouncilError (527) */
     interface PalletCouncilError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isBadOrigin: boolean;
@@ -4416,7 +4426,7 @@ declare module '@polkadot/types/lookup' {
         readonly isInsufficientBalanceForTransfer: boolean;
         readonly type: 'ArithmeticError' | 'BadOrigin' | 'CantCandidateNow' | 'CantReleaseStakeNow' | 'CandidacyStakeTooLow' | 'CantCandidateTwice' | 'ConflictingStake' | 'StakeStillNeeded' | 'NoStake' | 'InsufficientBalanceForStaking' | 'CantVoteForYourself' | 'MemberIdNotMatchAccount' | 'InvalidAccountToStakeReuse' | 'NotCandidatingNow' | 'CantWithdrawCandidacyNow' | 'NotCouncilor' | 'InsufficientFundsForFundingRequest' | 'ZeroBalanceFundRequest' | 'RepeatedFundRequestAccount' | 'EmptyFundingRequests' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'CandidateDoesNotExist' | 'InsufficientBalanceForTransfer';
     }
-    /** @name PalletReferendumReferendumStage (530) */
+    /** @name PalletReferendumReferendumStage (528) */
     interface PalletReferendumReferendumStage extends Enum {
         readonly isInactive: boolean;
         readonly isVoting: boolean;
@@ -4425,14 +4435,14 @@ declare module '@polkadot/types/lookup' {
         readonly asRevealing: PalletReferendumReferendumStageRevealing;
         readonly type: 'Inactive' | 'Voting' | 'Revealing';
     }
-    /** @name PalletReferendumReferendumStageVoting (532) */
+    /** @name PalletReferendumReferendumStageVoting (530) */
     interface PalletReferendumReferendumStageVoting extends Struct {
         readonly started: u32;
         readonly winningTargetCount: u32;
         readonly currentCycleId: u64;
         readonly endsAt: u32;
     }
-    /** @name PalletReferendumReferendumStageRevealing (533) */
+    /** @name PalletReferendumReferendumStageRevealing (531) */
     interface PalletReferendumReferendumStageRevealing extends Struct {
         readonly started: u32;
         readonly winningTargetCount: u32;
@@ -4440,14 +4450,14 @@ declare module '@polkadot/types/lookup' {
         readonly currentCycleId: u64;
         readonly endsAt: u32;
     }
-    /** @name PalletReferendumCastVote (534) */
+    /** @name PalletReferendumCastVote (532) */
     interface PalletReferendumCastVote extends Struct {
         readonly commitment: H256;
         readonly cycleId: u64;
         readonly stake: u128;
         readonly voteFor: Option<u64>;
     }
-    /** @name PalletReferendumError (535) */
+    /** @name PalletReferendumError (533) */
     interface PalletReferendumError extends Enum {
         readonly isBadOrigin: boolean;
         readonly isReferendumNotRunning: boolean;
@@ -4462,9 +4472,10 @@ declare module '@polkadot/types/lookup' {
         readonly isUnstakingVoteInSameCycle: boolean;
         readonly isSaltTooLong: boolean;
         readonly isUnstakingForbidden: boolean;
-        readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden';
+        readonly isAccountAlreadyOptedOutOfVoting: boolean;
+        readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden' | 'AccountAlreadyOptedOutOfVoting';
     }
-    /** @name PalletMembershipMembershipObject (536) */
+    /** @name PalletMembershipMembershipObject (534) */
     interface PalletMembershipMembershipObject extends Struct {
         readonly handleHash: H256;
         readonly rootAccount: AccountId32;
@@ -4472,12 +4483,12 @@ declare module '@polkadot/types/lookup' {
         readonly verified: bool;
         readonly invites: u32;
     }
-    /** @name PalletMembershipStakingAccountMemberBinding (537) */
+    /** @name PalletMembershipStakingAccountMemberBinding (535) */
     interface PalletMembershipStakingAccountMemberBinding extends Struct {
         readonly memberId: u64;
         readonly confirmed: bool;
     }
-    /** @name PalletMembershipError (538) */
+    /** @name PalletMembershipError (536) */
     interface PalletMembershipError extends Enum {
         readonly isNotEnoughBalanceToBuyMembership: boolean;
         readonly isControllerAccountRequired: boolean;
@@ -4500,9 +4511,10 @@ declare module '@polkadot/types/lookup' {
         readonly isInsufficientBalanceToCoverStake: boolean;
         readonly isGifLockExceedsCredit: boolean;
         readonly isInsufficientBalanceToGift: boolean;
-        readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift';
+        readonly isInsufficientBalanceToCoverPayment: boolean;
+        readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift' | 'InsufficientBalanceToCoverPayment';
     }
-    /** @name PalletForumCategory (539) */
+    /** @name PalletForumCategory (537) */
     interface PalletForumCategory extends Struct {
         readonly titleHash: H256;
         readonly descriptionHash: H256;
@@ -4513,14 +4525,14 @@ declare module '@polkadot/types/lookup' {
         readonly parentCategoryId: Option<u64>;
         readonly stickyThreadIds: BTreeSet<u64>;
     }
-    /** @name PalletForumThread (541) */
+    /** @name PalletForumThread (539) */
     interface PalletForumThread extends Struct {
         readonly categoryId: u64;
         readonly authorId: u64;
         readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
         readonly numberOfEditablePosts: u64;
     }
-    /** @name PalletForumPost (542) */
+    /** @name PalletForumPost (540) */
     interface PalletForumPost extends Struct {
         readonly threadId: u64;
         readonly textHash: H256;
@@ -4528,7 +4540,7 @@ declare module '@polkadot/types/lookup' {
         readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
         readonly lastEdited: u32;
     }
-    /** @name PalletForumError (543) */
+    /** @name PalletForumError (541) */
     interface PalletForumError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isOriginNotForumLead: boolean;
@@ -4559,11 +4571,11 @@ declare module '@polkadot/types/lookup' {
         readonly isMaxNumberOfStickiedThreadsExceeded: boolean;
         readonly type: 'ArithmeticError' | 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero' | 'MaxNumberOfStickiedThreadsExceeded';
     }
-    /** @name PalletConstitutionConstitutionInfo (544) */
+    /** @name PalletConstitutionConstitutionInfo (542) */
     interface PalletConstitutionConstitutionInfo extends Struct {
         readonly textHash: H256;
     }
-    /** @name PalletBountyBountyRecord (545) */
+    /** @name PalletBountyBountyRecord (543) */
     interface PalletBountyBountyRecord extends Struct {
         readonly creationParams: PalletBountyBountyParametersBoundedBTreeSet;
         readonly totalFunding: u128;
@@ -4571,7 +4583,7 @@ declare module '@polkadot/types/lookup' {
         readonly activeWorkEntryCount: u32;
         readonly hasUnpaidOracleReward: bool;
     }
-    /** @name PalletBountyBountyParametersBoundedBTreeSet (547) */
+    /** @name PalletBountyBountyParametersBoundedBTreeSet (545) */
     interface PalletBountyBountyParametersBoundedBTreeSet extends Struct {
         readonly oracle: PalletBountyBountyActor;
         readonly contractType: PalletBountyAssuranceContractTypeBoundedBTreeSet;
@@ -4581,14 +4593,14 @@ declare module '@polkadot/types/lookup' {
         readonly entrantStake: u128;
         readonly fundingType: PalletBountyFundingType;
     }
-    /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (548) */
+    /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (546) */
     interface PalletBountyAssuranceContractTypeBoundedBTreeSet extends Enum {
         readonly isOpen: boolean;
         readonly isClosed: boolean;
         readonly asClosed: BTreeSet<u64>;
         readonly type: 'Open' | 'Closed';
     }
-    /** @name PalletBountyBountyMilestone (549) */
+    /** @name PalletBountyBountyMilestone (547) */
     interface PalletBountyBountyMilestone extends Enum {
         readonly isCreated: boolean;
         readonly asCreated: {
@@ -4604,19 +4616,19 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Created' | 'BountyMaxFundingReached' | 'WorkSubmitted' | 'Terminated' | 'JudgmentSubmitted';
     }
-    /** @name PalletBountyContribution (551) */
+    /** @name PalletBountyContribution (549) */
     interface PalletBountyContribution extends Struct {
         readonly amount: u128;
         readonly funderStateBloatBondAmount: u128;
     }
-    /** @name PalletBountyEntryRecord (552) */
+    /** @name PalletBountyEntryRecord (550) */
     interface PalletBountyEntryRecord extends Struct {
         readonly memberId: u64;
         readonly stakingAccountId: AccountId32;
         readonly submittedAt: u32;
         readonly workSubmitted: bool;
     }
-    /** @name PalletBountyError (553) */
+    /** @name PalletBountyError (551) */
     interface PalletBountyError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isMinFundingAmountCannotBeGreaterThanMaxAmount: boolean;
@@ -4655,21 +4667,21 @@ declare module '@polkadot/types/lookup' {
         readonly isOracleRewardAlreadyWithdrawn: boolean;
         readonly type: 'ArithmeticError' | 'MinFundingAmountCannotBeGreaterThanMaxAmount' | 'BountyDoesntExist' | 'SwitchOracleOriginIsRoot' | 'InvalidStageUnexpectedFunding' | 'InvalidStageUnexpectedNoFundingContributed' | 'InvalidStageUnexpectedCancelled' | 'InvalidStageUnexpectedWorkSubmission' | 'InvalidStageUnexpectedJudgment' | 'InvalidStageUnexpectedSuccessfulBountyWithdrawal' | 'InvalidStageUnexpectedFailedBountyWithdrawal' | 'InsufficientBalanceForBounty' | 'NoBountyContributionFound' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'WorkEntryDoesntExist' | 'CherryLessThenMinimumAllowed' | 'CannotSubmitWorkToClosedContractBounty' | 'ClosedContractMemberListIsEmpty' | 'ClosedContractMemberListIsTooLarge' | 'ClosedContractMemberNotFound' | 'InvalidOracleMemberId' | 'InvalidStakingAccountForMember' | 'ZeroWinnerReward' | 'TotalRewardShouldBeEqualToTotalFunding' | 'EntrantStakeIsLessThanMininum' | 'FundingAmountCannotBeZero' | 'FundingPeriodCannotBeZero' | 'WinnerShouldHasWorkSubmission' | 'InvalidContributorActorSpecified' | 'InvalidOracleActorSpecified' | 'InvalidEntrantWorkerSpecified' | 'InvalidCreatorActorSpecified' | 'WorkEntryDoesntBelongToWorker' | 'OracleRewardAlreadyWithdrawn';
     }
-    /** @name PalletContentVideoRecord (555) */
+    /** @name PalletContentVideoRecord (553) */
     interface PalletContentVideoRecord extends Struct {
         readonly inChannel: u64;
         readonly nftStatus: Option<PalletContentNftTypesOwnedNft>;
         readonly dataObjects: BTreeSet<u64>;
         readonly videoStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
     }
-    /** @name PalletContentNftTypesOwnedNft (556) */
+    /** @name PalletContentNftTypesOwnedNft (554) */
     interface PalletContentNftTypesOwnedNft extends Struct {
         readonly owner: PalletContentNftTypesNftOwner;
         readonly transactionalStatus: PalletContentNftTypesTransactionalStatusRecord;
         readonly creatorRoyalty: Option<Perbill>;
         readonly openAuctionsNonce: u64;
     }
-    /** @name PalletContentNftTypesTransactionalStatusRecord (557) */
+    /** @name PalletContentNftTypesTransactionalStatusRecord (555) */
     interface PalletContentNftTypesTransactionalStatusRecord extends Enum {
         readonly isIdle: boolean;
         readonly isInitiatedOfferToMember: boolean;
@@ -4682,7 +4694,7 @@ declare module '@polkadot/types/lookup' {
         readonly asBuyNow: u128;
         readonly type: 'Idle' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction' | 'BuyNow';
     }
-    /** @name PalletContentNftTypesEnglishAuctionRecord (558) */
+    /** @name PalletContentNftTypesEnglishAuctionRecord (556) */
     interface PalletContentNftTypesEnglishAuctionRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -4693,12 +4705,12 @@ declare module '@polkadot/types/lookup' {
         readonly minBidStep: u128;
         readonly topBid: Option<PalletContentNftTypesEnglishAuctionBid>;
     }
-    /** @name PalletContentNftTypesEnglishAuctionBid (561) */
+    /** @name PalletContentNftTypesEnglishAuctionBid (559) */
     interface PalletContentNftTypesEnglishAuctionBid extends Struct {
         readonly amount: u128;
         readonly bidderId: u64;
     }
-    /** @name PalletContentNftTypesOpenAuctionRecord (562) */
+    /** @name PalletContentNftTypesOpenAuctionRecord (560) */
     interface PalletContentNftTypesOpenAuctionRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -4707,26 +4719,26 @@ declare module '@polkadot/types/lookup' {
         readonly auctionId: u64;
         readonly start: u32;
     }
-    /** @name PalletContentNftTypesNftOwner (563) */
+    /** @name PalletContentNftTypesNftOwner (561) */
     interface PalletContentNftTypesNftOwner extends Enum {
         readonly isChannelOwner: boolean;
         readonly isMember: boolean;
         readonly asMember: u64;
         readonly type: 'ChannelOwner' | 'Member';
     }
-    /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (566) */
+    /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (564) */
     interface PalletContentPermissionsCuratorGroupCuratorGroupRecord extends Struct {
         readonly curators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
         readonly active: bool;
         readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
     }
-    /** @name PalletContentNftTypesOpenAuctionBidRecord (573) */
+    /** @name PalletContentNftTypesOpenAuctionBidRecord (571) */
     interface PalletContentNftTypesOpenAuctionBidRecord extends Struct {
         readonly amount: u128;
         readonly madeAtBlock: u32;
         readonly auctionId: u64;
     }
-    /** @name PalletContentErrorsError (574) */
+    /** @name PalletContentErrorsError (572) */
     interface PalletContentErrorsError extends Enum {
         readonly isChannelStateBloatBondChanged: boolean;
         readonly isVideoStateBloatBondChanged: boolean;
@@ -4856,23 +4868,24 @@ declare module '@polkadot/types/lookup' {
         readonly isPatronageCanOnlyBeClaimedForMemberOwnedChannels: boolean;
         readonly isChannelTransfersBlockedDuringRevenueSplits: boolean;
         readonly isChannelTransfersBlockedDuringTokenSales: boolean;
-        readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales';
+        readonly isChannelTransfersBlockedDuringActiveAmm: boolean;
+        readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales' | 'ChannelTransfersBlockedDuringActiveAmm';
     }
-    /** @name PalletStorageBagRecord (575) */
+    /** @name PalletStorageBagRecord (573) */
     interface PalletStorageBagRecord extends Struct {
         readonly storedBy: BTreeSet<u64>;
         readonly distributedBy: BTreeSet<PalletStorageDistributionBucketIdRecord>;
         readonly objectsTotalSize: u64;
         readonly objectsNumber: u64;
     }
-    /** @name PalletStorageStorageBucketRecord (578) */
+    /** @name PalletStorageStorageBucketRecord (576) */
     interface PalletStorageStorageBucketRecord extends Struct {
         readonly operatorStatus: PalletStorageStorageBucketOperatorStatus;
         readonly acceptingNewBags: bool;
         readonly voucher: PalletStorageVoucher;
         readonly assignedBags: u64;
     }
-    /** @name PalletStorageStorageBucketOperatorStatus (579) */
+    /** @name PalletStorageStorageBucketOperatorStatus (577) */
     interface PalletStorageStorageBucketOperatorStatus extends Enum {
         readonly isMissing: boolean;
         readonly isInvitedStorageWorker: boolean;
@@ -4881,23 +4894,23 @@ declare module '@polkadot/types/lookup' {
         readonly asStorageWorker: ITuple<[u64, AccountId32]>;
         readonly type: 'Missing' | 'InvitedStorageWorker' | 'StorageWorker';
     }
-    /** @name PalletStorageDynamicBagCreationPolicy (581) */
+    /** @name PalletStorageDynamicBagCreationPolicy (579) */
     interface PalletStorageDynamicBagCreationPolicy extends Struct {
         readonly numberOfStorageBuckets: u32;
         readonly families: BTreeMap<u64, u32>;
     }
-    /** @name PalletStorageDataObject (584) */
+    /** @name PalletStorageDataObject (582) */
     interface PalletStorageDataObject extends Struct {
         readonly accepted: bool;
         readonly stateBloatBond: PalletCommonBloatBondRepayableBloatBond;
         readonly size_: u64;
         readonly ipfsContentId: Bytes;
     }
-    /** @name PalletStorageDistributionBucketFamilyRecord (585) */
+    /** @name PalletStorageDistributionBucketFamilyRecord (583) */
     interface PalletStorageDistributionBucketFamilyRecord extends Struct {
         readonly nextDistributionBucketIndex: u64;
     }
-    /** @name PalletStorageDistributionBucketRecord (586) */
+    /** @name PalletStorageDistributionBucketRecord (584) */
     interface PalletStorageDistributionBucketRecord extends Struct {
         readonly acceptingNewBags: bool;
         readonly distributing: bool;
@@ -4905,7 +4918,7 @@ declare module '@polkadot/types/lookup' {
         readonly operators: BTreeSet<u64>;
         readonly assignedBags: u64;
     }
-    /** @name PalletStorageError (589) */
+    /** @name PalletStorageError (587) */
     interface PalletStorageError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isInvalidCidLength: boolean;
@@ -4974,7 +4987,7 @@ declare module '@polkadot/types/lookup' {
         readonly isCallDisabled: boolean;
         readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'MaxNumberOfOperatorsPerDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints' | 'CallDisabled';
     }
-    /** @name PalletProjectTokenAccountData (590) */
+    /** @name PalletProjectTokenAccountData (588) */
     interface PalletProjectTokenAccountData extends Struct {
         readonly vestingSchedules: BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>;
         readonly amount: u128;
@@ -4983,12 +4996,12 @@ declare module '@polkadot/types/lookup' {
         readonly nextVestingTransferId: u64;
         readonly lastSaleTotalPurchasedAmount: Option<ITuple<[u32, u128]>>;
     }
-    /** @name PalletProjectTokenStakingStatus (591) */
+    /** @name PalletProjectTokenStakingStatus (589) */
     interface PalletProjectTokenStakingStatus extends Struct {
         readonly splitId: u32;
         readonly amount: u128;
     }
-    /** @name PalletProjectTokenVestingSchedule (593) */
+    /** @name PalletProjectTokenVestingSchedule (591) */
     interface PalletProjectTokenVestingSchedule extends Struct {
         readonly linearVestingStartBlock: u32;
         readonly linearVestingDuration: u32;
@@ -4996,7 +5009,7 @@ declare module '@polkadot/types/lookup' {
         readonly postCliffTotalAmount: u128;
         readonly burnedAmount: u128;
     }
-    /** @name PalletProjectTokenTokenData (600) */
+    /** @name PalletProjectTokenTokenData (598) */
     interface PalletProjectTokenTokenData extends Struct {
         readonly totalSupply: u128;
         readonly tokensIssued: u128;
@@ -5009,43 +5022,44 @@ declare module '@polkadot/types/lookup' {
         readonly revenueSplitRate: Permill;
         readonly revenueSplit: PalletProjectTokenRevenueSplitState;
         readonly nextRevenueSplitId: u32;
+        readonly ammCurve: Option<PalletProjectTokenAmmCurve>;
     }
-    /** @name PalletProjectTokenRevenueSplitState (601) */
+    /** @name PalletProjectTokenRevenueSplitState (599) */
     interface PalletProjectTokenRevenueSplitState extends Enum {
         readonly isInactive: boolean;
         readonly isActive: boolean;
         readonly asActive: PalletProjectTokenRevenueSplitInfo;
         readonly type: 'Inactive' | 'Active';
     }
-    /** @name PalletProjectTokenRevenueSplitInfo (602) */
+    /** @name PalletProjectTokenRevenueSplitInfo (600) */
     interface PalletProjectTokenRevenueSplitInfo extends Struct {
         readonly allocation: u128;
         readonly timeline: PalletProjectTokenTimeline;
         readonly dividendsClaimed: u128;
     }
-    /** @name PalletProjectTokenTimeline (603) */
+    /** @name PalletProjectTokenTimeline (601) */
     interface PalletProjectTokenTimeline extends Struct {
         readonly start: u32;
         readonly duration: u32;
     }
-    /** @name PalletProjectTokenPatronageData (605) */
+    /** @name PalletProjectTokenPatronageData (603) */
     interface PalletProjectTokenPatronageData extends Struct {
-        readonly rate: Perquintill;
+        readonly rate: Permill;
         readonly unclaimedPatronageTallyAmount: u128;
         readonly lastUnclaimedPatronageTallyBlock: u32;
     }
-    /** @name PalletProjectTokenErrorsError (607) */
+    /** @name PalletProjectTokenErrorsError (605) */
     interface PalletProjectTokenErrorsError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isInsufficientTransferrableBalance: boolean;
         readonly isTokenDoesNotExist: boolean;
         readonly isAccountInformationDoesNotExist: boolean;
+        readonly isTransferDestinationMemberDoesNotExist: boolean;
         readonly isMerkleProofVerificationFailure: boolean;
-        readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
         readonly isTokenSymbolAlreadyInUse: boolean;
         readonly isInitialAllocationToNonExistingMember: boolean;
         readonly isAccountAlreadyExists: boolean;
-        readonly isTransferDestinationMemberDoesNotExist: boolean;
+        readonly isTooManyTransferOutputs: boolean;
         readonly isTokenIssuanceNotInIdleState: boolean;
         readonly isInsufficientJoyBalance: boolean;
         readonly isJoyTransferSubjectToDusting: boolean;
@@ -5070,6 +5084,7 @@ declare module '@polkadot/types/lookup' {
         readonly isSaleCapPerMemberIsZero: boolean;
         readonly isSaleUnitPriceIsZero: boolean;
         readonly isSalePurchaseAmountIsZero: boolean;
+        readonly isCannotInitSaleIfAmmIsActive: boolean;
         readonly isRevenueSplitTimeToStartTooShort: boolean;
         readonly isRevenueSplitDurationTooShort: boolean;
         readonly isRevenueSplitAlreadyActiveForToken: boolean;
@@ -5085,9 +5100,18 @@ declare module '@polkadot/types/lookup' {
         readonly isRevenueSplitRateIsZero: boolean;
         readonly isBurnAmountIsZero: boolean;
         readonly isBurnAmountGreaterThanAccountTokensAmount: boolean;
-        readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TransferDestinationMemberDoesNotExist' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount';
+        readonly isNotInAmmState: boolean;
+        readonly isInvalidCurveParameters: boolean;
+        readonly isDeadlineExpired: boolean;
+        readonly isSlippageToleranceExceeded: boolean;
+        readonly isInsufficientTokenBalance: boolean;
+        readonly isOutstandingAmmProvidedSupplyTooLarge: boolean;
+        readonly isCurveSlopeParametersTooLow: boolean;
+        readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
+        readonly isYearlyPatronageRateLimitExceeded: boolean;
+        readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'TransferDestinationMemberDoesNotExist' | 'MerkleProofVerificationFailure' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TooManyTransferOutputs' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'CannotInitSaleIfAmmIsActive' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount' | 'NotInAmmState' | 'InvalidCurveParameters' | 'DeadlineExpired' | 'SlippageToleranceExceeded' | 'InsufficientTokenBalance' | 'OutstandingAmmProvidedSupplyTooLarge' | 'CurveSlopeParametersTooLow' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'YearlyPatronageRateLimitExceeded';
     }
-    /** @name PalletProposalsEngineProposal (608) */
+    /** @name PalletProposalsEngineProposal (606) */
     interface PalletProposalsEngineProposal extends Struct {
         readonly parameters: PalletProposalsEngineProposalParameters;
         readonly proposerId: u64;
@@ -5098,7 +5122,7 @@ declare module '@polkadot/types/lookup' {
         readonly nrOfCouncilConfirmations: u32;
         readonly stakingAccountId: Option<AccountId32>;
     }
-    /** @name PalletProposalsEngineProposalParameters (609) */
+    /** @name PalletProposalsEngineProposalParameters (607) */
     interface PalletProposalsEngineProposalParameters extends Struct {
         readonly votingPeriod: u32;
         readonly gracePeriod: u32;
@@ -5109,14 +5133,14 @@ declare module '@polkadot/types/lookup' {
         readonly requiredStake: Option<u128>;
         readonly constitutionality: u32;
     }
-    /** @name PalletProposalsEngineVotingResults (610) */
+    /** @name PalletProposalsEngineVotingResults (608) */
     interface PalletProposalsEngineVotingResults extends Struct {
         readonly abstentions: u32;
         readonly approvals: u32;
         readonly rejections: u32;
         readonly slashes: u32;
     }
-    /** @name PalletProposalsEngineError (613) */
+    /** @name PalletProposalsEngineError (611) */
     interface PalletProposalsEngineError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isEmptyTitleProvided: boolean;
@@ -5143,26 +5167,26 @@ declare module '@polkadot/types/lookup' {
         readonly isMaxDispatchableCallCodeSizeExceeded: boolean;
         readonly type: 'ArithmeticError' | 'EmptyTitleProvided' | 'EmptyDescriptionProvided' | 'TitleIsTooLong' | 'DescriptionIsTooLong' | 'ProposalNotFound' | 'ProposalFinalized' | 'AlreadyVoted' | 'NotAuthor' | 'MaxActiveProposalNumberExceeded' | 'EmptyStake' | 'StakeShouldBeEmpty' | 'StakeDiffersFromRequired' | 'InvalidParameterApprovalThreshold' | 'InvalidParameterSlashingThreshold' | 'RequireRootOrigin' | 'ProposalHasVotes' | 'ZeroExactExecutionBlock' | 'InvalidExactExecutionBlock' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'InvalidStakingAccountForMember' | 'MaxDispatchableCallCodeSizeExceeded';
     }
-    /** @name PalletProposalsDiscussionDiscussionThread (614) */
+    /** @name PalletProposalsDiscussionDiscussionThread (612) */
     interface PalletProposalsDiscussionDiscussionThread extends Struct {
         readonly activatedAt: u32;
         readonly authorId: u64;
         readonly mode: PalletProposalsDiscussionThreadModeBoundedBTreeSet;
     }
-    /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (616) */
+    /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (614) */
     interface PalletProposalsDiscussionThreadModeBoundedBTreeSet extends Enum {
         readonly isOpen: boolean;
         readonly isClosed: boolean;
         readonly asClosed: BTreeSet<u64>;
         readonly type: 'Open' | 'Closed';
     }
-    /** @name PalletProposalsDiscussionDiscussionPost (617) */
+    /** @name PalletProposalsDiscussionDiscussionPost (615) */
     interface PalletProposalsDiscussionDiscussionPost extends Struct {
         readonly authorId: u64;
         readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
         readonly lastEdited: u32;
     }
-    /** @name PalletProposalsDiscussionError (618) */
+    /** @name PalletProposalsDiscussionError (616) */
     interface PalletProposalsDiscussionError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isThreadDoesntExist: boolean;
@@ -5176,7 +5200,7 @@ declare module '@polkadot/types/lookup' {
         readonly isCannotDeletePost: boolean;
         readonly type: 'ArithmeticError' | 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'WhitelistedMemberDoesNotExist' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
     }
-    /** @name PalletProposalsCodexError (619) */
+    /** @name PalletProposalsCodexError (617) */
     interface PalletProposalsCodexError extends Enum {
         readonly isSignalProposalIsEmpty: boolean;
         readonly isRuntimeProposalIsEmpty: boolean;
@@ -5204,9 +5228,10 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidLeadApplicationId: boolean;
         readonly isInvalidProposalId: boolean;
         readonly isArithmeticError: boolean;
-        readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId' | 'ArithmeticError';
+        readonly isMaxYearlyPatronageRateCannotBeZero: boolean;
+        readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId' | 'ArithmeticError' | 'MaxYearlyPatronageRateCannotBeZero';
     }
-    /** @name PalletWorkingGroupOpening (620) */
+    /** @name PalletWorkingGroupOpening (618) */
     interface PalletWorkingGroupOpening extends Struct {
         readonly openingType: PalletWorkingGroupOpeningType;
         readonly created: u32;
@@ -5215,7 +5240,7 @@ declare module '@polkadot/types/lookup' {
         readonly rewardPerBlock: Option<u128>;
         readonly creationStake: u128;
     }
-    /** @name PalletWorkingGroupJobApplication (621) */
+    /** @name PalletWorkingGroupJobApplication (619) */
     interface PalletWorkingGroupJobApplication extends Struct {
         readonly roleAccountId: AccountId32;
         readonly rewardAccountId: AccountId32;
@@ -5224,7 +5249,7 @@ declare module '@polkadot/types/lookup' {
         readonly descriptionHash: H256;
         readonly openingId: u64;
     }
-    /** @name PalletWorkingGroupGroupWorker (622) */
+    /** @name PalletWorkingGroupGroupWorker (620) */
     interface PalletWorkingGroupGroupWorker extends Struct {
         readonly memberId: u64;
         readonly roleAccountId: AccountId32;
@@ -5236,7 +5261,7 @@ declare module '@polkadot/types/lookup' {
         readonly missedReward: Option<u128>;
         readonly createdAt: u32;
     }
-    /** @name PalletWorkingGroupErrorsError (623) */
+    /** @name PalletWorkingGroupErrorsError (621) */
     interface PalletWorkingGroupErrorsError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isStakeBalanceCannotBeZero: boolean;
@@ -5272,7 +5297,7 @@ declare module '@polkadot/types/lookup' {
         readonly isInsufficientBalanceForTransfer: boolean;
         readonly type: 'ArithmeticError' | 'StakeBalanceCannotBeZero' | 'OpeningDoesNotExist' | 'CannotHireMultipleLeaders' | 'WorkerApplicationDoesNotExist' | 'MaxActiveWorkerNumberExceeded' | 'SuccessfulWorkerApplicationDoesNotExist' | 'CannotHireLeaderWhenLeaderExists' | 'IsNotLeadAccount' | 'CurrentLeadNotSet' | 'WorkerDoesNotExist' | 'InvalidMemberOrigin' | 'SignerIsNotWorkerRoleAccount' | 'BelowMinimumStakes' | 'InsufficientBalanceToCoverStake' | 'ApplicationStakeDoesntMatchOpening' | 'OriginIsNotApplicant' | 'WorkerIsLeaving' | 'CannotRewardWithZero' | 'InvalidStakingAccountForMember' | 'ConflictStakesOnAccount' | 'WorkerHasNoReward' | 'UnstakingPeriodLessThanMinimum' | 'CannotSpendZero' | 'InsufficientBudgetForSpending' | 'NoApplicationsProvided' | 'CannotDecreaseStakeDeltaGreaterThanStake' | 'ApplicationsNotForOpening' | 'WorkerStorageValueTooLong' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'InsufficientBalanceForTransfer';
     }
-    /** @name SpRuntimeMultiSignature (633) */
+    /** @name SpRuntimeMultiSignature (631) */
     interface SpRuntimeMultiSignature extends Enum {
         readonly isEd25519: boolean;
         readonly asEd25519: SpCoreEd25519Signature;
@@ -5282,25 +5307,25 @@ declare module '@polkadot/types/lookup' {
         readonly asEcdsa: SpCoreEcdsaSignature;
         readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
     }
-    /** @name SpCoreEcdsaSignature (634) */
+    /** @name SpCoreEcdsaSignature (632) */
     interface SpCoreEcdsaSignature extends U8aFixed {
     }
-    /** @name FrameSystemExtensionsCheckNonZeroSender (637) */
+    /** @name FrameSystemExtensionsCheckNonZeroSender (635) */
     type FrameSystemExtensionsCheckNonZeroSender = Null;
-    /** @name FrameSystemExtensionsCheckSpecVersion (638) */
+    /** @name FrameSystemExtensionsCheckSpecVersion (636) */
     type FrameSystemExtensionsCheckSpecVersion = Null;
-    /** @name FrameSystemExtensionsCheckTxVersion (639) */
+    /** @name FrameSystemExtensionsCheckTxVersion (637) */
     type FrameSystemExtensionsCheckTxVersion = Null;
-    /** @name FrameSystemExtensionsCheckGenesis (640) */
+    /** @name FrameSystemExtensionsCheckGenesis (638) */
     type FrameSystemExtensionsCheckGenesis = Null;
-    /** @name FrameSystemExtensionsCheckNonce (643) */
+    /** @name FrameSystemExtensionsCheckNonce (641) */
     interface FrameSystemExtensionsCheckNonce extends Compact<u32> {
     }
-    /** @name FrameSystemExtensionsCheckWeight (644) */
+    /** @name FrameSystemExtensionsCheckWeight (642) */
     type FrameSystemExtensionsCheckWeight = Null;
-    /** @name PalletTransactionPaymentChargeTransactionPayment (645) */
+    /** @name PalletTransactionPaymentChargeTransactionPayment (643) */
     interface PalletTransactionPaymentChargeTransactionPayment extends Compact<u128> {
     }
-    /** @name JoystreamNodeRuntimeRuntime (646) */
+    /** @name JoystreamNodeRuntimeRuntime (644) */
     type JoystreamNodeRuntimeRuntime = Null;
 }
diff --git a/node_modules/@joystream/types/lib/cjs/augment/lookup.js b/node_modules/@joystream/types/lib/cjs/augment/lookup.js
index b6fcc72..4846482 100644
--- a/node_modules/@joystream/types/lib/cjs/augment/lookup.js
+++ b/node_modules/@joystream/types/lib/cjs/augment/lookup.js
@@ -368,23 +368,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup57: pallet_sudo::pallet::Event<T>
-     **/
-    PalletSudoEvent: {
-        _enum: {
-            Sudid: {
-                sudoResult: 'Result<Null, SpRuntimeDispatchError>',
-            },
-            KeyChanged: {
-                oldSudoer: 'Option<AccountId32>',
-            },
-            SudoAsDone: {
-                sudoResult: 'Result<Null, SpRuntimeDispatchError>'
-            }
-        }
-    },
-    /**
-     * Lookup59: pallet_bags_list::pallet::Event<T, I>
+     * Lookup57: pallet_bags_list::pallet::Event<T, I>
      **/
     PalletBagsListEvent: {
         _enum: {
@@ -400,7 +384,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup60: pallet_vesting::pallet::Event<T>
+     * Lookup58: pallet_vesting::pallet::Event<T>
      **/
     PalletVestingEvent: {
         _enum: {
@@ -414,7 +398,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup61: pallet_multisig::pallet::Event<T>
+     * Lookup59: pallet_multisig::pallet::Event<T>
      **/
     PalletMultisigEvent: {
         _enum: {
@@ -445,14 +429,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+     * Lookup60: pallet_multisig::Timepoint<BlockNumber>
      **/
     PalletMultisigTimepoint: {
         height: 'u32',
         index: 'u32'
     },
     /**
-     * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletCouncilRawEvent: {
         _enum: {
@@ -478,7 +462,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     * Lookup63: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
      **/
     PalletReferendumRawEvent: {
         _enum: {
@@ -488,26 +472,27 @@ exports.default = {
             ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
             VoteCast: '(AccountId32,H256,u128)',
             VoteRevealed: '(AccountId32,u64,Bytes)',
-            StakeReleased: 'AccountId32'
+            StakeReleased: 'AccountId32',
+            AccountOptedOutOfVoting: 'AccountId32'
         }
     },
     /**
-     * Lookup66: pallet_referendum::Instance1
+     * Lookup64: pallet_referendum::Instance1
      **/
     PalletReferendumInstance1: 'Null',
     /**
-     * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
+     * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
      **/
     PalletReferendumOptionResult: {
         optionId: 'u64',
         votePower: 'u128'
     },
     /**
-     * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletMembershipRawEvent: {
         _enum: {
-            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters)',
+            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters,u128)',
             MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
             MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
             MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
@@ -522,12 +507,12 @@ exports.default = {
             StakingAccountAdded: '(AccountId32,u64)',
             StakingAccountRemoved: '(AccountId32,u64)',
             StakingAccountConfirmed: '(AccountId32,u64)',
-            MemberRemarked: '(u64,Bytes)',
+            MemberRemarked: '(u64,Bytes,Option<(AccountId32,u128)>)',
             MemberCreated: '(u64,PalletMembershipCreateMemberParameters,u32)'
         }
     },
     /**
-     * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipBuyMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -537,7 +522,7 @@ exports.default = {
         referrerId: 'Option<u64>'
     },
     /**
-     * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipInviteMembershipParameters: {
         invitingMemberId: 'u64',
@@ -547,7 +532,7 @@ exports.default = {
         metadata: 'Bytes'
     },
     /**
-     * Lookup74: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+     * Lookup72: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
      **/
     PalletMembershipCreateMemberParameters: {
         rootAccount: 'AccountId32',
@@ -557,7 +542,7 @@ exports.default = {
         isFoundingMember: 'bool'
     },
     /**
-     * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletMembershipGiftMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -570,7 +555,7 @@ exports.default = {
         applyRootAccountInvitationLock: 'Option<u128>'
     },
     /**
-     * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     * Lookup78: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
      **/
     PalletForumRawEvent: {
         _enum: {
@@ -594,7 +579,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup78: pallet_forum::PrivilegedActor<T>
+     * Lookup79: pallet_forum::PrivilegedActor<T>
      **/
     PalletForumPrivilegedActor: {
         _enum: {
@@ -603,7 +588,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     * Lookup80: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
      **/
     PalletForumExtendedPostIdObject: {
         categoryId: 'u64',
@@ -611,7 +596,7 @@ exports.default = {
         postId: 'u64'
     },
     /**
-     * Lookup84: pallet_constitution::RawEvent<primitive_types::H256>
+     * Lookup85: pallet_constitution::RawEvent<primitive_types::H256>
      **/
     PalletConstitutionRawEvent: {
         _enum: {
@@ -619,7 +604,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup85: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     * Lookup86: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
      **/
     PalletBountyRawEvent: {
         _enum: {
@@ -649,7 +634,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup86: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+     * Lookup87: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
      **/
     PalletBountyBountyParametersBTreeSet: {
         oracle: 'PalletBountyBountyActor',
@@ -661,7 +646,7 @@ exports.default = {
         fundingType: 'PalletBountyFundingType'
     },
     /**
-     * Lookup87: pallet_bounty::BountyActor<MemberId>
+     * Lookup88: pallet_bounty::BountyActor<MemberId>
      **/
     PalletBountyBountyActor: {
         _enum: {
@@ -670,7 +655,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup88: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+     * Lookup89: pallet_bounty::AssuranceContractType<BTreeSet<T>>
      **/
     PalletBountyAssuranceContractTypeBTreeSet: {
         _enum: {
@@ -679,7 +664,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+     * Lookup90: pallet_bounty::FundingType<BlockNumber, Balance>
      **/
     PalletBountyFundingType: {
         _enum: {
@@ -693,7 +678,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     * Lookup92: pallet_bounty::OracleWorkEntryJudgment<Balance>
      **/
     PalletBountyOracleWorkEntryJudgment: {
         _enum: {
@@ -707,7 +692,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     * Lookup95: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
      **/
     PalletUtilityRawEvent: {
         _enum: {
@@ -718,19 +703,19 @@ exports.default = {
         }
     },
     /**
-     * Lookup95: pallet_common::working_group::iterable_enums::WorkingGroup
+     * Lookup96: pallet_common::working_group::iterable_enums::WorkingGroup
      **/
     PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
         _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'App', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
     },
     /**
-     * Lookup96: pallet_common::BalanceKind
+     * Lookup97: pallet_common::BalanceKind
      **/
     PalletCommonBalanceKind: {
         _enum: ['Positive', 'Negative']
     },
     /**
-     * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     * Lookup98: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
      **/
     PalletContentRawEvent: {
         _enum: {
@@ -758,9 +743,8 @@ exports.default = {
             VideoDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
             VideoVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
             VideoAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,bool,Bytes)',
-            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>)',
-            ChannelRewardUpdated: '(u128,u64)',
-            CouncilRewardClaimed: '(u64,u128)',
+            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>,AccountId32)',
+            ChannelRewardUpdated: '(u128,u128,u64)',
             EnglishAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesEnglishAuctionParamsRecord)',
             OpenAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesOpenAuctionParamsRecord,u64)',
             NftIssued: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesNftIssuanceParametersRecord)',
@@ -788,11 +772,12 @@ exports.default = {
             GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
             ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
             ToggledNftLimits: 'bool',
-            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)'
+            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)',
+            CreatorTokenIssuerRemarked: '(u64,Bytes)'
         }
     },
     /**
-     * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     * Lookup99: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
      **/
     PalletContentPermissionsContentActor: {
         _enum: {
@@ -802,7 +787,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup100: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentChannelRecord: {
         owner: 'PalletContentChannelOwner',
@@ -821,26 +806,26 @@ exports.default = {
         channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup103: pallet_content::types::iterable_enums::ChannelActionPermission
+     * Lookup104: pallet_content::types::iterable_enums::ChannelActionPermission
      **/
     PalletContentIterableEnumsChannelActionPermission: {
-        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
+        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken', 'AmmControl', 'CreatorTokenRemarks']
     },
     /**
-     * Lookup110: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+     * Lookup111: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
         _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
     },
     /**
-     * Lookup113: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     * Lookup114: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
      **/
     PalletCommonBloatBondRepayableBloatBond: {
         repaymentRestrictedTo: 'Option<AccountId32>',
         amount: 'u128'
     },
     /**
-     * Lookup114: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     * Lookup115: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
      **/
     PalletContentChannelOwner: {
         _enum: {
@@ -849,7 +834,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup115: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup116: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentChannelTransferStatus: {
         _enum: {
@@ -858,14 +843,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup116: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup117: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentPendingTransfer: {
         newOwner: 'PalletContentChannelOwner',
         transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
     },
     /**
-     * Lookup117: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+     * Lookup118: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBoundedBTreeMap: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -873,21 +858,21 @@ exports.default = {
         transferId: 'u64'
     },
     /**
-     * Lookup118: pallet_content::types::LimitPerPeriod<BlockNumber>
+     * Lookup119: pallet_content::types::LimitPerPeriod<BlockNumber>
      **/
     PalletContentLimitPerPeriod: {
         limit: 'u64',
         blockNumberPeriod: 'u32'
     },
     /**
-     * Lookup119: pallet_content::types::NftCounter<BlockNumber>
+     * Lookup120: pallet_content::types::NftCounter<BlockNumber>
      **/
     PalletContentNftCounter: {
         counter: 'u64',
         lastUpdated: 'u32'
     },
     /**
-     * Lookup120: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup121: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -899,7 +884,7 @@ exports.default = {
         minBidStep: 'u128'
     },
     /**
-     * Lookup122: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup123: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -909,7 +894,7 @@ exports.default = {
         bidLockDuration: 'u32'
     },
     /**
-     * Lookup123: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     * Lookup124: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
      **/
     PalletContentNftTypesNftIssuanceParametersRecord: {
         royalty: 'Option<Perbill>',
@@ -918,7 +903,7 @@ exports.default = {
         initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
     },
     /**
-     * Lookup124: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     * Lookup125: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
      **/
     PalletContentNftTypesInitTransactionalStatusRecord: {
         _enum: {
@@ -930,7 +915,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup126: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     * Lookup127: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
      **/
     PalletContentChannelCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -942,14 +927,14 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup127: pallet_content::types::StorageAssetsRecord<Balance>
+     * Lookup128: pallet_content::types::StorageAssetsRecord<Balance>
      **/
     PalletContentStorageAssetsRecord: {
         objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
         expectedDataSizeFee: 'u128'
     },
     /**
-     * Lookup129: pallet_storage::DataObjectCreationParameters
+     * Lookup130: pallet_storage::DataObjectCreationParameters
      **/
     PalletStorageDataObjectCreationParameters: {
         _alias: {
@@ -959,14 +944,14 @@ exports.default = {
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup130: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     * Lookup131: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketIdRecord: {
         distributionBucketFamilyId: 'u64',
         distributionBucketIndex: 'u64'
     },
     /**
-     * Lookup137: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     * Lookup138: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
      **/
     PalletContentChannelUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -977,7 +962,7 @@ exports.default = {
         storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup139: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup140: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -988,7 +973,7 @@ exports.default = {
         storageBucketsNumWitness: 'u32'
     },
     /**
-     * Lookup141: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup142: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -999,7 +984,7 @@ exports.default = {
         storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup144: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+     * Lookup145: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
         _enum: {
@@ -1014,7 +999,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup148: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+     * Lookup149: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBTreeMap: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -1022,7 +1007,7 @@ exports.default = {
         transferId: 'u64'
     },
     /**
-     * Lookup149: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+     * Lookup150: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
      **/
     PalletContentUpdateChannelPayoutsParametersRecord: {
         commitment: 'Option<H256>',
@@ -1032,16 +1017,15 @@ exports.default = {
         channelCashoutsEnabled: 'Option<bool>'
     },
     /**
-     * Lookup150: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+     * Lookup151: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
      **/
     PalletContentChannelPayoutsPayloadParametersRecord: {
-        uploaderAccount: 'AccountId32',
         objectCreationParams: 'PalletStorageDataObjectCreationParameters',
         expectedDataSizeFee: 'u128',
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup154: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     * Lookup155: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
      **/
     PalletContentChannelFundsDestination: {
         _enum: {
@@ -1050,13 +1034,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup155: pallet_content::types::NftLimitPeriod
+     * Lookup156: pallet_content::types::NftLimitPeriod
      **/
     PalletContentNftLimitPeriod: {
         _enum: ['Daily', 'Weekly']
     },
     /**
-     * Lookup156: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+     * Lookup157: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
      **/
     PalletStorageRawEvent: {
         _enum: {
@@ -1105,7 +1089,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup157: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     * Lookup158: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
      **/
     PalletStorageUploadParametersRecord: {
         bagId: 'PalletStorageBagIdType',
@@ -1115,7 +1099,7 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup158: pallet_storage::BagIdType<MemberId, ChannelId>
+     * Lookup159: pallet_storage::BagIdType<MemberId, ChannelId>
      **/
     PalletStorageBagIdType: {
         _enum: {
@@ -1124,7 +1108,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup159: pallet_storage::StaticBagId
+     * Lookup160: pallet_storage::StaticBagId
      **/
     PalletStorageStaticBagId: {
         _enum: {
@@ -1133,7 +1117,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup160: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     * Lookup161: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
      **/
     PalletStorageDynamicBagIdType: {
         _enum: {
@@ -1142,7 +1126,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup161: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     * Lookup162: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
      **/
     PalletStorageDynBagCreationParametersRecord: {
         bagId: 'PalletStorageDynamicBagIdType',
@@ -1154,7 +1138,7 @@ exports.default = {
         distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
     },
     /**
-     * Lookup164: pallet_storage::Voucher
+     * Lookup165: pallet_storage::Voucher
      **/
     PalletStorageVoucher: {
         sizeLimit: 'u64',
@@ -1163,19 +1147,19 @@ exports.default = {
         objectsUsed: 'u64'
     },
     /**
-     * Lookup165: pallet_storage::DynamicBagType
+     * Lookup166: pallet_storage::DynamicBagType
      **/
     PalletStorageDynamicBagType: {
         _enum: ['Member', 'Channel']
     },
     /**
-     * Lookup169: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+     * Lookup170: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
      **/
     PalletProjectTokenEventsRawEvent: {
         _enum: {
-            TokenAmountTransferred: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
-            TokenAmountTransferredByIssuer: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
-            PatronageRateDecreasedTo: '(u64,Perquintill)',
+            TokenAmountTransferred: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+            TokenAmountTransferredByIssuer: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+            PatronageRateDecreasedTo: '(u64,Permill)',
             PatronageCreditClaimed: '(u64,u128,u64)',
             RevenueSplitIssued: '(u64,u32,u32,u128)',
             RevenueSplitFinalized: '(u64,AccountId32,u128)',
@@ -1190,11 +1174,16 @@ exports.default = {
             TokensPurchasedOnSale: '(u64,u32,u128,u64)',
             TokenSaleFinalized: '(u64,u32,u128,u128)',
             TransferPolicyChangedToPermissionless: 'u64',
-            TokensBurned: '(u64,u64,u128)'
+            TokensBurned: '(u64,u64,u128)',
+            AmmActivated: '(u64,u64,PalletProjectTokenAmmCurve)',
+            TokensBoughtOnAmm: '(u64,u64,u128,u128)',
+            TokensSoldOnAmm: '(u64,u64,u128,u128)',
+            AmmDeactivated: '(u64,u64,u128)',
+            MaxYearlyPatronageRateUpdated: 'Permill'
         }
     },
     /**
-     * Lookup170: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     * Lookup171: pallet_project_token::types::TransferPolicy<primitive_types::H256>
      **/
     PalletProjectTokenTransferPolicy: {
         _enum: {
@@ -1203,7 +1192,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup171: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     * Lookup172: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
      **/
     PalletProjectTokenTokenIssuanceParameters: {
         initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
@@ -1213,14 +1202,14 @@ exports.default = {
         revenueSplitRate: 'Permill'
     },
     /**
-     * Lookup172: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup173: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenAllocation: {
         amount: 'u128',
         vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup173: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     * Lookup174: pallet_project_token::types::VestingScheduleParams<BlockNumber>
      **/
     PalletProjectTokenVestingScheduleParams: {
         linearVestingDuration: 'u32',
@@ -1228,7 +1217,7 @@ exports.default = {
         cliffAmountPercentage: 'Permill'
     },
     /**
-     * Lookup176: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     * Lookup177: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
      **/
     PalletProjectTokenTransferPolicyParams: {
         _enum: {
@@ -1237,14 +1226,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup177: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     * Lookup178: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
      **/
     PalletProjectTokenWhitelistParams: {
         commitment: 'H256',
         payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
     },
     /**
-     * Lookup178: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     * Lookup179: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
      **/
     PalletProjectTokenSingleDataObjectUploadParams: {
         objectCreationParams: 'PalletStorageDataObjectCreationParameters',
@@ -1252,7 +1241,11 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup185: pallet_project_token::types::Validated<MemberId>
+     * Lookup185: pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>
+     **/
+    PalletProjectTokenTransfers: 'BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>',
+    /**
+     * Lookup186: pallet_project_token::types::Validated<MemberId>
      **/
     PalletProjectTokenValidated: {
         _enum: {
@@ -1261,21 +1254,21 @@ exports.default = {
         }
     },
     /**
-     * Lookup186: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup187: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenValidatedPayment: {
         payment: 'PalletProjectTokenPaymentWithVesting',
         vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
     },
     /**
-     * Lookup187: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup188: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenPaymentWithVesting: {
         amount: 'u128',
         vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup189: pallet_project_token::types::VestingSource
+     * Lookup190: pallet_project_token::types::VestingSource
      **/
     PalletProjectTokenVestingSource: {
         _enum: {
@@ -1285,7 +1278,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup193: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     * Lookup194: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletProjectTokenTokenSale: {
         unitPrice: 'u128',
@@ -1300,7 +1293,15 @@ exports.default = {
         autoFinalize: 'bool'
     },
     /**
-     * Lookup195: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     * Lookup195: pallet_project_token::types::AmmCurve<Balance>
+     **/
+    PalletProjectTokenAmmCurve: {
+        slope: 'u128',
+        intercept: 'u128',
+        providedSupply: 'u128'
+    },
+    /**
+     * Lookup196: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
      **/
     PalletProposalsEngineRawEvent: {
         _enum: {
@@ -1313,7 +1314,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup196: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
      **/
     PalletProposalsEngineProposalStatusesProposalStatus: {
         _enum: {
@@ -1323,7 +1324,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
      **/
     PalletProposalsEngineProposalStatusesProposalDecision: {
         _enum: {
@@ -1337,13 +1338,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
      **/
     PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
         _enum: ['PendingExecution', 'PendingConstitutionality']
     },
     /**
-     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     * Lookup200: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
      **/
     PalletProposalsEngineProposalStatusesExecutionStatus: {
         _enum: {
@@ -1354,13 +1355,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup200: pallet_proposals_engine::types::VoteKind
+     * Lookup201: pallet_proposals_engine::types::VoteKind
      **/
     PalletProposalsEngineVoteKind: {
         _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
     },
     /**
-     * Lookup201: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     * Lookup202: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
      **/
     PalletProposalsDiscussionRawEvent: {
         _enum: {
@@ -1372,7 +1373,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup202: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+     * Lookup203: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
      **/
     PalletProposalsDiscussionThreadModeBTreeSet: {
         _enum: {
@@ -1381,7 +1382,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup203: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     * Lookup204: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
      **/
     PalletProposalsCodexRawEvent: {
         _enum: {
@@ -1389,7 +1390,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup204: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     * Lookup205: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
      **/
     PalletProposalsCodexGeneralProposalParams: {
         memberId: 'u64',
@@ -1399,7 +1400,7 @@ exports.default = {
         exactExecutionBlock: 'Option<u32>'
     },
     /**
-     * Lookup205: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+     * Lookup206: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
      **/
     PalletProposalsCodexProposalDetails: {
         _enum: {
@@ -1425,18 +1426,19 @@ exports.default = {
             SetReferralCut: 'u8',
             VetoProposal: 'u32',
             UpdateGlobalNftLimit: '(PalletContentNftLimitPeriod,u64)',
-            UpdateChannelPayouts: 'PalletContentUpdateChannelPayoutsParametersRecord'
+            UpdateChannelPayouts: 'PalletContentUpdateChannelPayoutsParametersRecord',
+            UpdateMaxYearlyPatronageRate: 'Permill'
         }
     },
     /**
-     * Lookup207: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     * Lookup208: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
      **/
     PalletCommonFundingRequestParameters: {
         account: 'AccountId32',
         amount: 'u128'
     },
     /**
-     * Lookup208: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     * Lookup209: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
      **/
     PalletProposalsCodexCreateOpeningParameters: {
         description: 'Bytes',
@@ -1445,14 +1447,14 @@ exports.default = {
         group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup209: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     * Lookup210: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
      **/
     PalletWorkingGroupStakePolicy: {
         stakeAmount: 'u128',
         leavingUnstakingPeriod: 'u32'
     },
     /**
-     * Lookup210: pallet_proposals_codex::types::FillOpeningParameters
+     * Lookup211: pallet_proposals_codex::types::FillOpeningParameters
      **/
     PalletProposalsCodexFillOpeningParameters: {
         openingId: 'u64',
@@ -1460,7 +1462,7 @@ exports.default = {
         workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup211: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     * Lookup212: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
      **/
     PalletProposalsCodexTerminateRoleParameters: {
         workerId: 'u64',
@@ -1468,7 +1470,7 @@ exports.default = {
         group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+     * Lookup213: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
      **/
     PalletWorkingGroupRawEventInstance1: {
         _enum: {
@@ -1500,13 +1502,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup216: pallet_working_group::types::OpeningType
+     * Lookup217: pallet_working_group::types::OpeningType
      **/
     PalletWorkingGroupOpeningType: {
         _enum: ['Leader', 'Regular']
     },
     /**
-     * Lookup217: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     * Lookup218: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupApplyOnOpeningParams: {
         memberId: 'u64',
@@ -1517,24 +1519,24 @@ exports.default = {
         stakeParameters: 'PalletWorkingGroupStakeParameters'
     },
     /**
-     * Lookup218: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup219: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupStakeParameters: {
         stake: 'u128',
         stakingAccountId: 'AccountId32'
     },
     /**
-     * Lookup219: pallet_working_group::Instance1
+     * Lookup220: pallet_working_group::Instance1
      **/
     PalletWorkingGroupInstance1: 'Null',
     /**
-     * Lookup220: pallet_working_group::types::RewardPaymentType
+     * Lookup221: pallet_working_group::types::RewardPaymentType
      **/
     PalletWorkingGroupRewardPaymentType: {
         _enum: ['MissedReward', 'RegularReward']
     },
     /**
-     * Lookup221: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+     * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
      **/
     PalletWorkingGroupRawEventInstance2: {
         _enum: {
@@ -1566,11 +1568,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup222: pallet_working_group::Instance2
+     * Lookup223: pallet_working_group::Instance2
      **/
     PalletWorkingGroupInstance2: 'Null',
     /**
-     * Lookup223: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+     * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
      **/
     PalletWorkingGroupRawEventInstance3: {
         _enum: {
@@ -1602,11 +1604,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup224: pallet_working_group::Instance3
+     * Lookup225: pallet_working_group::Instance3
      **/
     PalletWorkingGroupInstance3: 'Null',
     /**
-     * Lookup225: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+     * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
      **/
     PalletWorkingGroupRawEventInstance4: {
         _enum: {
@@ -1638,11 +1640,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup226: pallet_working_group::Instance4
+     * Lookup227: pallet_working_group::Instance4
      **/
     PalletWorkingGroupInstance4: 'Null',
     /**
-     * Lookup227: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+     * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
      **/
     PalletWorkingGroupRawEventInstance5: {
         _enum: {
@@ -1674,11 +1676,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup228: pallet_working_group::Instance5
+     * Lookup229: pallet_working_group::Instance5
      **/
     PalletWorkingGroupInstance5: 'Null',
     /**
-     * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+     * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
      **/
     PalletWorkingGroupRawEventInstance6: {
         _enum: {
@@ -1710,11 +1712,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup230: pallet_working_group::Instance6
+     * Lookup231: pallet_working_group::Instance6
      **/
     PalletWorkingGroupInstance6: 'Null',
     /**
-     * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+     * Lookup232: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
      **/
     PalletWorkingGroupRawEventInstance7: {
         _enum: {
@@ -1746,11 +1748,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup232: pallet_working_group::Instance7
+     * Lookup233: pallet_working_group::Instance7
      **/
     PalletWorkingGroupInstance7: 'Null',
     /**
-     * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+     * Lookup234: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
      **/
     PalletWorkingGroupRawEventInstance8: {
         _enum: {
@@ -1782,11 +1784,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup234: pallet_working_group::Instance8
+     * Lookup235: pallet_working_group::Instance8
      **/
     PalletWorkingGroupInstance8: 'Null',
     /**
-     * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+     * Lookup236: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
      **/
     PalletWorkingGroupRawEventInstance9: {
         _enum: {
@@ -1818,11 +1820,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup236: pallet_working_group::Instance9
+     * Lookup237: pallet_working_group::Instance9
      **/
     PalletWorkingGroupInstance9: 'Null',
     /**
-     * Lookup237: frame_system::Phase
+     * Lookup238: frame_system::Phase
      **/
     FrameSystemPhase: {
         _enum: {
@@ -1832,14 +1834,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup241: frame_system::LastRuntimeUpgradeInfo
+     * Lookup242: frame_system::LastRuntimeUpgradeInfo
      **/
     FrameSystemLastRuntimeUpgradeInfo: {
         specVersion: 'Compact<u32>',
         specName: 'Text'
     },
     /**
-     * Lookup244: frame_system::pallet::Call<T>
+     * Lookup245: frame_system::pallet::Call<T>
      **/
     FrameSystemCall: {
         _enum: {
@@ -1877,7 +1879,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup247: frame_system::limits::BlockWeights
+     * Lookup248: frame_system::limits::BlockWeights
      **/
     FrameSystemLimitsBlockWeights: {
         baseBlock: 'u64',
@@ -1885,7 +1887,7 @@ exports.default = {
         perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
     },
     /**
-     * Lookup248: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     * Lookup249: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
      **/
     FrameSupportWeightsPerDispatchClassWeightsPerClass: {
         normal: 'FrameSystemLimitsWeightsPerClass',
@@ -1893,7 +1895,7 @@ exports.default = {
         mandatory: 'FrameSystemLimitsWeightsPerClass'
     },
     /**
-     * Lookup249: frame_system::limits::WeightsPerClass
+     * Lookup250: frame_system::limits::WeightsPerClass
      **/
     FrameSystemLimitsWeightsPerClass: {
         baseExtrinsic: 'u64',
@@ -1902,13 +1904,13 @@ exports.default = {
         reserved: 'Option<u64>'
     },
     /**
-     * Lookup250: frame_system::limits::BlockLength
+     * Lookup251: frame_system::limits::BlockLength
      **/
     FrameSystemLimitsBlockLength: {
         max: 'FrameSupportWeightsPerDispatchClassU32'
     },
     /**
-     * Lookup251: frame_support::weights::PerDispatchClass<T>
+     * Lookup252: frame_support::weights::PerDispatchClass<T>
      **/
     FrameSupportWeightsPerDispatchClassU32: {
         normal: 'u32',
@@ -1916,14 +1918,14 @@ exports.default = {
         mandatory: 'u32'
     },
     /**
-     * Lookup252: frame_support::weights::RuntimeDbWeight
+     * Lookup253: frame_support::weights::RuntimeDbWeight
      **/
     FrameSupportWeightsRuntimeDbWeight: {
         read: 'u64',
         write: 'u64'
     },
     /**
-     * Lookup253: sp_version::RuntimeVersion
+     * Lookup254: sp_version::RuntimeVersion
      **/
     SpVersionRuntimeVersion: {
         specName: 'Text',
@@ -1936,13 +1938,13 @@ exports.default = {
         stateVersion: 'u8'
     },
     /**
-     * Lookup259: frame_system::pallet::Error<T>
+     * Lookup260: frame_system::pallet::Error<T>
      **/
     FrameSystemError: {
         _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
     },
     /**
-     * Lookup260: pallet_utility::pallet::Call<T>
+     * Lookup261: pallet_utility::pallet::Call<T>
      **/
     PalletUtilityCall: {
         _enum: {
@@ -1966,7 +1968,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup263: pallet_babe::pallet::Call<T>
+     * Lookup264: pallet_babe::pallet::Call<T>
      **/
     PalletBabeCall: {
         _enum: {
@@ -1984,7 +1986,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup264: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     * Lookup265: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
      **/
     SpConsensusSlotsEquivocationProof: {
         offender: 'SpConsensusBabeAppPublic',
@@ -1993,7 +1995,7 @@ exports.default = {
         secondHeader: 'SpRuntimeHeader'
     },
     /**
-     * Lookup265: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     * Lookup266: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
      **/
     SpRuntimeHeader: {
         parentHash: 'H256',
@@ -2003,15 +2005,15 @@ exports.default = {
         digest: 'SpRuntimeDigest'
     },
     /**
-     * Lookup266: sp_runtime::traits::BlakeTwo256
+     * Lookup267: sp_runtime::traits::BlakeTwo256
      **/
     SpRuntimeBlakeTwo256: 'Null',
     /**
-     * Lookup267: sp_consensus_babe::app::Public
+     * Lookup268: sp_consensus_babe::app::Public
      **/
     SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
     /**
-     * Lookup269: sp_session::MembershipProof
+     * Lookup270: sp_session::MembershipProof
      **/
     SpSessionMembershipProof: {
         session: 'u32',
@@ -2019,7 +2021,7 @@ exports.default = {
         validatorCount: 'u32'
     },
     /**
-     * Lookup270: sp_consensus_babe::digests::NextConfigDescriptor
+     * Lookup271: sp_consensus_babe::digests::NextConfigDescriptor
      **/
     SpConsensusBabeDigestsNextConfigDescriptor: {
         _enum: {
@@ -2031,13 +2033,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup271: sp_consensus_babe::AllowedSlots
+     * Lookup272: sp_consensus_babe::AllowedSlots
      **/
     SpConsensusBabeAllowedSlots: {
         _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
     },
     /**
-     * Lookup272: pallet_timestamp::pallet::Call<T>
+     * Lookup273: pallet_timestamp::pallet::Call<T>
      **/
     PalletTimestampCall: {
         _enum: {
@@ -2047,7 +2049,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup274: pallet_authorship::pallet::Call<T>
+     * Lookup275: pallet_authorship::pallet::Call<T>
      **/
     PalletAuthorshipCall: {
         _enum: {
@@ -2057,7 +2059,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup276: pallet_balances::pallet::Call<T, I>
+     * Lookup277: pallet_balances::pallet::Call<T, I>
      **/
     PalletBalancesCall: {
         _enum: {
@@ -2090,7 +2092,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup277: pallet_election_provider_multi_phase::pallet::Call<T>
+     * Lookup278: pallet_election_provider_multi_phase::pallet::Call<T>
      **/
     PalletElectionProviderMultiPhaseCall: {
         _enum: {
@@ -2114,7 +2116,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup278: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     * Lookup279: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseRawSolution: {
         solution: 'JoystreamNodeRuntimeNposSolution16',
@@ -2122,7 +2124,7 @@ exports.default = {
         round: 'u32'
     },
     /**
-     * Lookup279: joystream_node_runtime::NposSolution16
+     * Lookup280: joystream_node_runtime::NposSolution16
      **/
     JoystreamNodeRuntimeNposSolution16: {
         votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
@@ -2143,7 +2145,7 @@ exports.default = {
         votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
     },
     /**
-     * Lookup330: sp_npos_elections::ElectionScore
+     * Lookup331: sp_npos_elections::ElectionScore
      **/
     SpNposElectionsElectionScore: {
         minimalStake: 'u128',
@@ -2151,14 +2153,14 @@ exports.default = {
         sumStakeSquared: 'u128'
     },
     /**
-     * Lookup331: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     * Lookup332: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
      **/
     PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
         voters: 'Compact<u32>',
         targets: 'Compact<u32>'
     },
     /**
-     * Lookup335: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     * Lookup336: sp_npos_elections::Support<sp_core::crypto::AccountId32>
      **/
     SpNposElectionsSupport: {
         total: 'u128',
@@ -2448,31 +2450,7 @@ exports.default = {
      **/
     SpCoreSr25519Signature: '[u8;64]',
     /**
-     * Lookup370: pallet_sudo::pallet::Call<T>
-     **/
-    PalletSudoCall: {
-        _enum: {
-            sudo: {
-                call: 'Call',
-            },
-            sudo_unchecked_weight: {
-                call: 'Call',
-                weight: 'u64',
-            },
-            set_key: {
-                _alias: {
-                    new_: 'new',
-                },
-                new_: 'AccountId32',
-            },
-            sudo_as: {
-                who: 'AccountId32',
-                call: 'Call'
-            }
-        }
-    },
-    /**
-     * Lookup371: pallet_bags_list::pallet::Call<T, I>
+     * Lookup370: pallet_bags_list::pallet::Call<T, I>
      **/
     PalletBagsListCall: {
         _enum: {
@@ -2485,7 +2463,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup372: pallet_vesting::pallet::Call<T>
+     * Lookup371: pallet_vesting::pallet::Call<T>
      **/
     PalletVestingCall: {
         _enum: {
@@ -2509,7 +2487,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup373: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     * Lookup372: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
      **/
     PalletVestingVestingInfo: {
         locked: 'u128',
@@ -2517,7 +2495,7 @@ exports.default = {
         startingBlock: 'u32'
     },
     /**
-     * Lookup374: pallet_multisig::pallet::Call<T>
+     * Lookup373: pallet_multisig::pallet::Call<T>
      **/
     PalletMultisigCall: {
         _enum: {
@@ -2549,7 +2527,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup377: pallet_council::Call<T>
+     * Lookup376: pallet_council::Call<T>
      **/
     PalletCouncilCall: {
         _enum: {
@@ -2600,7 +2578,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup378: pallet_referendum::Call<T, I>
+     * Lookup377: pallet_referendum::Call<T, I>
      **/
     PalletReferendumCall: {
         _enum: {
@@ -2612,11 +2590,12 @@ exports.default = {
                 salt: 'Bytes',
                 voteOptionId: 'u64',
             },
-            release_vote_stake: 'Null'
+            release_vote_stake: 'Null',
+            opt_out_of_voting: 'Null'
         }
     },
     /**
-     * Lookup379: pallet_membership::Call<T>
+     * Lookup378: pallet_membership::Call<T>
      **/
     PalletMembershipCall: {
         _enum: {
@@ -2677,6 +2656,7 @@ exports.default = {
             member_remark: {
                 memberId: 'u64',
                 msg: 'Bytes',
+                payment: 'Option<(AccountId32,u128)>',
             },
             create_member: {
                 params: 'PalletMembershipCreateMemberParameters'
@@ -2684,7 +2664,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup380: pallet_forum::Call<T>
+     * Lookup379: pallet_forum::Call<T>
      **/
     PalletForumCall: {
         _enum: {
@@ -2781,7 +2761,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup381: pallet_constitution::Call<T>
+     * Lookup380: pallet_constitution::Call<T>
      **/
     PalletConstitutionCall: {
         _enum: {
@@ -2791,7 +2771,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup382: pallet_bounty::Call<T>
+     * Lookup381: pallet_bounty::Call<T>
      **/
     PalletBountyCall: {
         _enum: {
@@ -2867,7 +2847,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup384: pallet_content::Call<T>
+     * Lookup383: pallet_content::Call<T>
      **/
     PalletContentCall: {
         _enum: {
@@ -2975,6 +2955,7 @@ exports.default = {
             },
             update_channel_payouts: {
                 params: 'PalletContentUpdateChannelPayoutsParametersRecord',
+                uploaderAccount: 'AccountId32',
             },
             claim_channel_reward: {
                 actor: 'PalletContentPermissionsContentActor',
@@ -3091,6 +3072,11 @@ exports.default = {
                 channelId: 'u64',
                 msg: 'Bytes',
             },
+            creator_token_issuer_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                msg: 'Bytes',
+            },
             channel_agent_remark: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
@@ -3143,7 +3129,7 @@ exports.default = {
             creator_token_issuer_transfer: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
-                outputs: 'PalletProjectTokenTransfersPaymentWithVesting',
+                outputs: 'Vec<(u64,PalletProjectTokenPaymentWithVesting)>',
                 metadata: 'Bytes',
             },
             make_creator_token_permissionless: {
@@ -3174,20 +3160,29 @@ exports.default = {
                 channelId: 'u64',
             },
             deissue_creator_token: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            activate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenAmmParams',
+            },
+            deactivate_amm: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64'
             }
         }
     },
     /**
-     * Lookup385: pallet_content::types::ChannelBagWitness
+     * Lookup384: pallet_content::types::ChannelBagWitness
      **/
     PalletContentChannelBagWitness: {
         storageBucketsNum: 'u32',
         distributionBucketsNum: 'u32'
     },
     /**
-     * Lookup387: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+     * Lookup386: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
      **/
     PalletCommonMerkleTreeProofElementRecord: {
         _alias: {
@@ -3197,13 +3192,13 @@ exports.default = {
         side: 'PalletCommonMerkleTreeSide'
     },
     /**
-     * Lookup388: pallet_common::merkle_tree::Side
+     * Lookup387: pallet_common::merkle_tree::Side
      **/
     PalletCommonMerkleTreeSide: {
         _enum: ['Left', 'Right']
     },
     /**
-     * Lookup389: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     * Lookup388: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
      **/
     PalletContentPullPaymentElement: {
         channelId: 'u64',
@@ -3211,7 +3206,7 @@ exports.default = {
         reason: 'H256'
     },
     /**
-     * Lookup390: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     * Lookup389: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
      **/
     PalletContentInitTransferParameters: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -3219,7 +3214,7 @@ exports.default = {
         newOwner: 'PalletContentChannelOwner'
     },
     /**
-     * Lookup391: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup390: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenSaleParams: {
         unitPrice: 'u128',
@@ -3231,11 +3226,14 @@ exports.default = {
         metadata: 'Option<Bytes>'
     },
     /**
-     * Lookup392: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup394: pallet_project_token::types::AmmParams<Balance>
      **/
-    PalletProjectTokenTransfersPaymentWithVesting: 'BTreeMap<u64, PalletProjectTokenPaymentWithVesting>',
+    PalletProjectTokenAmmParams: {
+        slope: 'u128',
+        intercept: 'u128'
+    },
     /**
-     * Lookup396: pallet_storage::Call<T>
+     * Lookup395: pallet_storage::Call<T>
      **/
     PalletStorageCall: {
         _enum: {
@@ -3369,9 +3367,6 @@ exports.default = {
                 bucketId: 'PalletStorageDistributionBucketIdRecord',
                 metadata: 'Bytes',
             },
-            sudo_upload_data_objects: {
-                params: 'PalletStorageUploadParametersRecord',
-            },
             storage_operator_remark: {
                 workerId: 'u64',
                 storageBucketId: 'u64',
@@ -3385,14 +3380,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup397: pallet_project_token::Call<T>
+     * Lookup396: pallet_project_token::Call<T>
      **/
     PalletProjectTokenCall: {
         _enum: {
             transfer: {
                 srcMemberId: 'u64',
                 tokenId: 'u64',
-                outputs: 'PalletProjectTokenTransfersPayment',
+                outputs: 'Vec<(u64,u128)>',
                 metadata: 'Bytes',
             },
             burn: {
@@ -3421,32 +3416,37 @@ exports.default = {
             },
             exit_revenue_split: {
                 tokenId: 'u64',
-                memberId: 'u64'
+                memberId: 'u64',
+            },
+            buy_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            sell_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            update_max_yearly_patronage_rate: {
+                rate: 'Permill'
             }
         }
     },
     /**
-     * Lookup398: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
-     **/
-    PalletProjectTokenTransfersPayment: 'BTreeMap<u64, PalletProjectTokenPayment>',
-    /**
-     * Lookup399: pallet_project_token::types::Payment<Balance>
-     **/
-    PalletProjectTokenPayment: {
-        amount: 'u128'
-    },
-    /**
-     * Lookup403: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     * Lookup400: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
      **/
     PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
     /**
-     * Lookup406: pallet_project_token::types::MerkleSide
+     * Lookup403: pallet_project_token::types::MerkleSide
      **/
     PalletProjectTokenMerkleSide: {
         _enum: ['Right', 'Left']
     },
     /**
-     * Lookup407: pallet_proposals_engine::Call<T>
+     * Lookup406: pallet_proposals_engine::Call<T>
      **/
     PalletProposalsEngineCall: {
         _enum: {
@@ -3471,7 +3471,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup408: pallet_proposals_discussion::Call<T>
+     * Lookup407: pallet_proposals_discussion::Call<T>
      **/
     PalletProposalsDiscussionCall: {
         _enum: {
@@ -3500,7 +3500,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup409: pallet_proposals_codex::Call<T>
+     * Lookup408: pallet_proposals_codex::Call<T>
      **/
     PalletProposalsCodexCall: {
         _enum: {
@@ -3511,7 +3511,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup410: pallet_working_group::Call<T, I>
+     * Lookup409: pallet_working_group::Call<T, I>
      **/
     PalletWorkingGroupCall: {
         _enum: {
@@ -3594,7 +3594,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup419: joystream_node_runtime::OriginCaller
+     * Lookup418: joystream_node_runtime::OriginCaller
      **/
     JoystreamNodeRuntimeOriginCaller: {
         _enum: {
@@ -3603,7 +3603,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup420: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     * Lookup419: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
      **/
     FrameSupportDispatchRawOrigin: {
         _enum: {
@@ -3613,17 +3613,17 @@ exports.default = {
         }
     },
     /**
-     * Lookup421: sp_core::Void
+     * Lookup420: sp_core::Void
      **/
     SpCoreVoid: 'Null',
     /**
-     * Lookup422: pallet_utility::pallet::Error<T>
+     * Lookup421: pallet_utility::pallet::Error<T>
      **/
     PalletUtilityError: {
         _enum: ['TooManyCalls']
     },
     /**
-     * Lookup429: sp_consensus_babe::digests::PreDigest
+     * Lookup428: sp_consensus_babe::digests::PreDigest
      **/
     SpConsensusBabeDigestsPreDigest: {
         _enum: {
@@ -3634,7 +3634,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup430: sp_consensus_babe::digests::PrimaryPreDigest
+     * Lookup429: sp_consensus_babe::digests::PrimaryPreDigest
      **/
     SpConsensusBabeDigestsPrimaryPreDigest: {
         authorityIndex: 'u32',
@@ -3643,14 +3643,14 @@ exports.default = {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup431: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     * Lookup430: sp_consensus_babe::digests::SecondaryPlainPreDigest
      **/
     SpConsensusBabeDigestsSecondaryPlainPreDigest: {
         authorityIndex: 'u32',
         slot: 'u64'
     },
     /**
-     * Lookup432: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     * Lookup431: sp_consensus_babe::digests::SecondaryVRFPreDigest
      **/
     SpConsensusBabeDigestsSecondaryVRFPreDigest: {
         authorityIndex: 'u32',
@@ -3659,20 +3659,20 @@ exports.default = {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup434: sp_consensus_babe::BabeEpochConfiguration
+     * Lookup433: sp_consensus_babe::BabeEpochConfiguration
      **/
     SpConsensusBabeBabeEpochConfiguration: {
         c: '(u64,u64)',
         allowedSlots: 'SpConsensusBabeAllowedSlots'
     },
     /**
-     * Lookup435: pallet_babe::pallet::Error<T>
+     * Lookup434: pallet_babe::pallet::Error<T>
      **/
     PalletBabeError: {
         _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
     },
     /**
-     * Lookup437: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+     * Lookup436: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
      **/
     PalletAuthorshipUncleEntryItem: {
         _enum: {
@@ -3681,13 +3681,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup438: pallet_authorship::pallet::Error<T>
+     * Lookup437: pallet_authorship::pallet::Error<T>
      **/
     PalletAuthorshipError: {
         _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
     },
     /**
-     * Lookup440: pallet_balances::BalanceLock<Balance>
+     * Lookup439: pallet_balances::BalanceLock<Balance>
      **/
     PalletBalancesBalanceLock: {
         id: '[u8;8]',
@@ -3695,38 +3695,38 @@ exports.default = {
         reasons: 'PalletBalancesReasons'
     },
     /**
-     * Lookup441: pallet_balances::Reasons
+     * Lookup440: pallet_balances::Reasons
      **/
     PalletBalancesReasons: {
         _enum: ['Fee', 'Misc', 'All']
     },
     /**
-     * Lookup444: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     * Lookup443: pallet_balances::ReserveData<ReserveIdentifier, Balance>
      **/
     PalletBalancesReserveData: {
         id: '[u8;8]',
         amount: 'u128'
     },
     /**
-     * Lookup446: pallet_balances::Releases
+     * Lookup445: pallet_balances::Releases
      **/
     PalletBalancesReleases: {
         _enum: ['V1_0_0', 'V2_0_0']
     },
     /**
-     * Lookup447: pallet_balances::pallet::Error<T, I>
+     * Lookup446: pallet_balances::pallet::Error<T, I>
      **/
     PalletBalancesError: {
         _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
     },
     /**
-     * Lookup449: pallet_transaction_payment::Releases
+     * Lookup448: pallet_transaction_payment::Releases
      **/
     PalletTransactionPaymentReleases: {
         _enum: ['V1Ancient', 'V2']
     },
     /**
-     * Lookup450: pallet_election_provider_multi_phase::Phase<Bn>
+     * Lookup449: pallet_election_provider_multi_phase::Phase<Bn>
      **/
     PalletElectionProviderMultiPhasePhase: {
         _enum: {
@@ -3737,7 +3737,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup452: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     * Lookup451: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
      **/
     PalletElectionProviderMultiPhaseReadySolution: {
         supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
@@ -3745,14 +3745,14 @@ exports.default = {
         compute: 'PalletElectionProviderMultiPhaseElectionCompute'
     },
     /**
-     * Lookup453: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     * Lookup452: pallet_election_provider_multi_phase::RoundSnapshot<T>
      **/
     PalletElectionProviderMultiPhaseRoundSnapshot: {
         voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
         targets: 'Vec<AccountId32>'
     },
     /**
-     * Lookup461: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+     * Lookup460: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseSignedSignedSubmission: {
         who: 'AccountId32',
@@ -3761,13 +3761,13 @@ exports.default = {
         callFee: 'u128'
     },
     /**
-     * Lookup462: pallet_election_provider_multi_phase::pallet::Error<T>
+     * Lookup461: pallet_election_provider_multi_phase::pallet::Error<T>
      **/
     PalletElectionProviderMultiPhaseError: {
         _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
     },
     /**
-     * Lookup463: pallet_staking::StakingLedger<T>
+     * Lookup462: pallet_staking::StakingLedger<T>
      **/
     PalletStakingStakingLedger: {
         stash: 'AccountId32',
@@ -3777,14 +3777,14 @@ exports.default = {
         claimedRewards: 'Vec<u32>'
     },
     /**
-     * Lookup465: pallet_staking::UnlockChunk<Balance>
+     * Lookup464: pallet_staking::UnlockChunk<Balance>
      **/
     PalletStakingUnlockChunk: {
         value: 'Compact<u128>',
         era: 'Compact<u32>'
     },
     /**
-     * Lookup467: pallet_staking::Nominations<T>
+     * Lookup466: pallet_staking::Nominations<T>
      **/
     PalletStakingNominations: {
         targets: 'Vec<AccountId32>',
@@ -3792,27 +3792,27 @@ exports.default = {
         suppressed: 'bool'
     },
     /**
-     * Lookup468: pallet_staking::ActiveEraInfo
+     * Lookup467: pallet_staking::ActiveEraInfo
      **/
     PalletStakingActiveEraInfo: {
         index: 'u32',
         start: 'Option<u64>'
     },
     /**
-     * Lookup470: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     * Lookup469: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
      **/
     PalletStakingEraRewardPoints: {
         total: 'u32',
         individual: 'BTreeMap<AccountId32, u32>'
     },
     /**
-     * Lookup474: pallet_staking::Forcing
+     * Lookup473: pallet_staking::Forcing
      **/
     PalletStakingForcing: {
         _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
     },
     /**
-     * Lookup476: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+     * Lookup475: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingUnappliedSlash: {
         validator: 'AccountId32',
@@ -3822,7 +3822,7 @@ exports.default = {
         payout: 'u128'
     },
     /**
-     * Lookup478: pallet_staking::slashing::SlashingSpans
+     * Lookup477: pallet_staking::slashing::SlashingSpans
      **/
     PalletStakingSlashingSlashingSpans: {
         spanIndex: 'u32',
@@ -3831,36 +3831,36 @@ exports.default = {
         prior: 'Vec<u32>'
     },
     /**
-     * Lookup479: pallet_staking::slashing::SpanRecord<Balance>
+     * Lookup478: pallet_staking::slashing::SpanRecord<Balance>
      **/
     PalletStakingSlashingSpanRecord: {
         slashed: 'u128',
         paidOut: 'u128'
     },
     /**
-     * Lookup482: pallet_staking::Releases
+     * Lookup481: pallet_staking::Releases
      **/
     PalletStakingReleases: {
         _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
     },
     /**
-     * Lookup483: pallet_staking::pallet::pallet::Error<T>
+     * Lookup482: pallet_staking::pallet::pallet::Error<T>
      **/
     PalletStakingPalletError: {
         _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
     },
     /**
-     * Lookup487: sp_core::crypto::KeyTypeId
+     * Lookup486: sp_core::crypto::KeyTypeId
      **/
     SpCoreCryptoKeyTypeId: '[u8;4]',
     /**
-     * Lookup488: pallet_session::pallet::Error<T>
+     * Lookup487: pallet_session::pallet::Error<T>
      **/
     PalletSessionError: {
         _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
     },
     /**
-     * Lookup490: pallet_grandpa::StoredState<N>
+     * Lookup489: pallet_grandpa::StoredState<N>
      **/
     PalletGrandpaStoredState: {
         _enum: {
@@ -3877,7 +3877,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup491: pallet_grandpa::StoredPendingChange<N, Limit>
+     * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
      **/
     PalletGrandpaStoredPendingChange: {
         scheduledAt: 'u32',
@@ -3886,39 +3886,33 @@ exports.default = {
         forced: 'Option<u32>'
     },
     /**
-     * Lookup493: pallet_grandpa::pallet::Error<T>
+     * Lookup492: pallet_grandpa::pallet::Error<T>
      **/
     PalletGrandpaError: {
         _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
     },
     /**
-     * Lookup499: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
      **/
     PalletImOnlineBoundedOpaqueNetworkState: {
         peerId: 'Bytes',
         externalAddresses: 'Vec<Bytes>'
     },
     /**
-     * Lookup503: pallet_im_online::pallet::Error<T>
+     * Lookup502: pallet_im_online::pallet::Error<T>
      **/
     PalletImOnlineError: {
         _enum: ['InvalidKey', 'DuplicatedHeartbeat']
     },
     /**
-     * Lookup504: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
      **/
     SpStakingOffenceOffenceDetails: {
         offender: '(AccountId32,PalletStakingExposure)',
         reporters: 'Vec<AccountId32>'
     },
     /**
-     * Lookup507: pallet_sudo::pallet::Error<T>
-     **/
-    PalletSudoError: {
-        _enum: ['RequireSudo']
-    },
-    /**
-     * Lookup508: pallet_bags_list::list::Node<T, I>
+     * Lookup506: pallet_bags_list::list::Node<T, I>
      **/
     PalletBagsListListNode: {
         id: 'AccountId32',
@@ -3928,14 +3922,14 @@ exports.default = {
         score: 'u64'
     },
     /**
-     * Lookup509: pallet_bags_list::list::Bag<T, I>
+     * Lookup507: pallet_bags_list::list::Bag<T, I>
      **/
     PalletBagsListListBag: {
         head: 'Option<AccountId32>',
         tail: 'Option<AccountId32>'
     },
     /**
-     * Lookup510: pallet_bags_list::pallet::Error<T, I>
+     * Lookup508: pallet_bags_list::pallet::Error<T, I>
      **/
     PalletBagsListError: {
         _enum: {
@@ -3943,25 +3937,25 @@ exports.default = {
         }
     },
     /**
-     * Lookup511: pallet_bags_list::list::ListError
+     * Lookup509: pallet_bags_list::list::ListError
      **/
     PalletBagsListListListError: {
         _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
     },
     /**
-     * Lookup514: pallet_vesting::Releases
+     * Lookup512: pallet_vesting::Releases
      **/
     PalletVestingReleases: {
         _enum: ['V0', 'V1']
     },
     /**
-     * Lookup515: pallet_vesting::pallet::Error<T>
+     * Lookup513: pallet_vesting::pallet::Error<T>
      **/
     PalletVestingError: {
         _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
     },
     /**
-     * Lookup517: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
      **/
     PalletMultisigMultisig: {
         when: 'PalletMultisigTimepoint',
@@ -3970,20 +3964,20 @@ exports.default = {
         approvals: 'Vec<AccountId32>'
     },
     /**
-     * Lookup519: pallet_multisig::pallet::Error<T>
+     * Lookup517: pallet_multisig::pallet::Error<T>
      **/
     PalletMultisigError: {
         _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
     },
     /**
-     * Lookup520: pallet_council::CouncilStageUpdate<BlockNumber>
+     * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
      **/
     PalletCouncilCouncilStageUpdate: {
         stage: 'PalletCouncilCouncilStage',
         changedAt: 'u32'
     },
     /**
-     * Lookup521: pallet_council::CouncilStage<BlockNumber>
+     * Lookup519: pallet_council::CouncilStage<BlockNumber>
      **/
     PalletCouncilCouncilStage: {
         _enum: {
@@ -3993,26 +3987,26 @@ exports.default = {
         }
     },
     /**
-     * Lookup522: pallet_council::CouncilStageAnnouncing<BlockNumber>
+     * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
      **/
     PalletCouncilCouncilStageAnnouncing: {
         candidatesCount: 'u32',
         endsAt: 'u32'
     },
     /**
-     * Lookup523: pallet_council::CouncilStageElection
+     * Lookup521: pallet_council::CouncilStageElection
      **/
     PalletCouncilCouncilStageElection: {
         candidatesCount: 'u32'
     },
     /**
-     * Lookup524: pallet_council::CouncilStageIdle<BlockNumber>
+     * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
      **/
     PalletCouncilCouncilStageIdle: {
         endsAt: 'u32'
     },
     /**
-     * Lookup526: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
      **/
     PalletCouncilCouncilMember: {
         stakingAccountId: 'AccountId32',
@@ -4023,7 +4017,7 @@ exports.default = {
         unpaidReward: 'u128'
     },
     /**
-     * Lookup528: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
      **/
     PalletCouncilCandidate: {
         stakingAccountId: 'AccountId32',
@@ -4034,13 +4028,13 @@ exports.default = {
         noteHash: 'Option<H256>'
     },
     /**
-     * Lookup529: pallet_council::Error<T>
+     * Lookup527: pallet_council::Error<T>
      **/
     PalletCouncilError: {
         _enum: ['ArithmeticError', 'BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup530: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStage: {
         _enum: {
@@ -4050,7 +4044,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup532: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
      **/
     PalletReferendumReferendumStageVoting: {
         started: 'u32',
@@ -4059,7 +4053,7 @@ exports.default = {
         endsAt: 'u32'
     },
     /**
-     * Lookup533: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStageRevealing: {
         started: 'u32',
@@ -4069,7 +4063,7 @@ exports.default = {
         endsAt: 'u32'
     },
     /**
-     * Lookup534: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
      **/
     PalletReferendumCastVote: {
         commitment: 'H256',
@@ -4078,13 +4072,13 @@ exports.default = {
         voteFor: 'Option<u64>'
     },
     /**
-     * Lookup535: pallet_referendum::Error<T, I>
+     * Lookup533: pallet_referendum::Error<T, I>
      **/
     PalletReferendumError: {
-        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden']
+        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden', 'AccountAlreadyOptedOutOfVoting']
     },
     /**
-     * Lookup536: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+     * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
      **/
     PalletMembershipMembershipObject: {
         handleHash: 'H256',
@@ -4094,20 +4088,20 @@ exports.default = {
         invites: 'u32'
     },
     /**
-     * Lookup537: pallet_membership::StakingAccountMemberBinding<MemberId>
+     * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
      **/
     PalletMembershipStakingAccountMemberBinding: {
         memberId: 'u64',
         confirmed: 'bool'
     },
     /**
-     * Lookup538: pallet_membership::Error<T>
+     * Lookup536: pallet_membership::Error<T>
      **/
     PalletMembershipError: {
-        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift']
+        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift', 'InsufficientBalanceToCoverPayment']
     },
     /**
-     * Lookup539: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletForumCategory: {
         titleHash: 'H256',
@@ -4120,7 +4114,7 @@ exports.default = {
         stickyThreadIds: 'BTreeSet<u64>'
     },
     /**
-     * Lookup541: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumThread: {
         categoryId: 'u64',
@@ -4129,7 +4123,7 @@ exports.default = {
         numberOfEditablePosts: 'u64'
     },
     /**
-     * Lookup542: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumPost: {
         threadId: 'u64',
@@ -4139,19 +4133,19 @@ exports.default = {
         lastEdited: 'u32'
     },
     /**
-     * Lookup543: pallet_forum::Error<T>
+     * Lookup541: pallet_forum::Error<T>
      **/
     PalletForumError: {
         _enum: ['ArithmeticError', 'OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero', 'MaxNumberOfStickiedThreadsExceeded']
     },
     /**
-     * Lookup544: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+     * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
      **/
     PalletConstitutionConstitutionInfo: {
         textHash: 'H256'
     },
     /**
-     * Lookup545: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyRecord: {
         creationParams: 'PalletBountyBountyParametersBoundedBTreeSet',
@@ -4161,7 +4155,7 @@ exports.default = {
         hasUnpaidOracleReward: 'bool'
     },
     /**
-     * Lookup547: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyParametersBoundedBTreeSet: {
         oracle: 'PalletBountyBountyActor',
@@ -4173,7 +4167,7 @@ exports.default = {
         fundingType: 'PalletBountyFundingType'
     },
     /**
-     * Lookup548: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup546: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyAssuranceContractTypeBoundedBTreeSet: {
         _enum: {
@@ -4182,7 +4176,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup549: pallet_bounty::BountyMilestone<BlockNumber>
+     * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
      **/
     PalletBountyBountyMilestone: {
         _enum: {
@@ -4199,14 +4193,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup551: pallet_bounty::Contribution<T>
+     * Lookup549: pallet_bounty::Contribution<T>
      **/
     PalletBountyContribution: {
         amount: 'u128',
         funderStateBloatBondAmount: 'u128'
     },
     /**
-     * Lookup552: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
      **/
     PalletBountyEntryRecord: {
         memberId: 'u64',
@@ -4215,13 +4209,13 @@ exports.default = {
         workSubmitted: 'bool'
     },
     /**
-     * Lookup553: pallet_bounty::Error<T>
+     * Lookup551: pallet_bounty::Error<T>
      **/
     PalletBountyError: {
         _enum: ['ArithmeticError', 'MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
     },
     /**
-     * Lookup555: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentVideoRecord: {
         inChannel: 'u64',
@@ -4230,7 +4224,7 @@ exports.default = {
         videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup556: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+     * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
      **/
     PalletContentNftTypesOwnedNft: {
         owner: 'PalletContentNftTypesNftOwner',
@@ -4239,7 +4233,7 @@ exports.default = {
         openAuctionsNonce: 'u64'
     },
     /**
-     * Lookup557: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+     * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
      **/
     PalletContentNftTypesTransactionalStatusRecord: {
         _enum: {
@@ -4251,7 +4245,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup558: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesEnglishAuctionRecord: {
         startingPrice: 'u128',
@@ -4264,14 +4258,14 @@ exports.default = {
         topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
     },
     /**
-     * Lookup561: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionBid: {
         amount: 'u128',
         bidderId: 'u64'
     },
     /**
-     * Lookup562: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesOpenAuctionRecord: {
         startingPrice: 'u128',
@@ -4282,7 +4276,7 @@ exports.default = {
         start: 'u32'
     },
     /**
-     * Lookup563: pallet_content::nft::types::NftOwner<MemberId>
+     * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
      **/
     PalletContentNftTypesNftOwner: {
         _enum: {
@@ -4291,7 +4285,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup566: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+     * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
      **/
     PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
         curators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -4299,7 +4293,7 @@ exports.default = {
         permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>'
     },
     /**
-     * Lookup573: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
      **/
     PalletContentNftTypesOpenAuctionBidRecord: {
         amount: 'u128',
@@ -4307,13 +4301,13 @@ exports.default = {
         auctionId: 'u64'
     },
     /**
-     * Lookup574: pallet_content::errors::Error<T>
+     * Lookup572: pallet_content::errors::Error<T>
      **/
     PalletContentErrorsError: {
-        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
+        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales', 'ChannelTransfersBlockedDuringActiveAmm']
     },
     /**
-     * Lookup575: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+     * Lookup573: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
      **/
     PalletStorageBagRecord: {
         storedBy: 'BTreeSet<u64>',
@@ -4322,7 +4316,7 @@ exports.default = {
         objectsNumber: 'u64'
     },
     /**
-     * Lookup578: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketRecord: {
         operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
@@ -4331,7 +4325,7 @@ exports.default = {
         assignedBags: 'u64'
     },
     /**
-     * Lookup579: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketOperatorStatus: {
         _enum: {
@@ -4341,14 +4335,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup581: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+     * Lookup579: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
      **/
     PalletStorageDynamicBagCreationPolicy: {
         numberOfStorageBuckets: 'u32',
         families: 'BTreeMap<u64, u32>'
     },
     /**
-     * Lookup584: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletStorageDataObject: {
         _alias: {
@@ -4360,13 +4354,13 @@ exports.default = {
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup585: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketFamilyRecord: {
         nextDistributionBucketIndex: 'u64'
     },
     /**
-     * Lookup586: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup584: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletStorageDistributionBucketRecord: {
         acceptingNewBags: 'bool',
@@ -4376,13 +4370,13 @@ exports.default = {
         assignedBags: 'u64'
     },
     /**
-     * Lookup589: pallet_storage::Error<T>
+     * Lookup587: pallet_storage::Error<T>
      **/
     PalletStorageError: {
         _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'MaxNumberOfOperatorsPerDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
     },
     /**
-     * Lookup590: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+     * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
      **/
     PalletProjectTokenAccountData: {
         vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
@@ -4393,14 +4387,14 @@ exports.default = {
         lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
     },
     /**
-     * Lookup591: pallet_project_token::types::StakingStatus<Balance>
+     * Lookup589: pallet_project_token::types::StakingStatus<Balance>
      **/
     PalletProjectTokenStakingStatus: {
         splitId: 'u32',
         amount: 'u128'
     },
     /**
-     * Lookup593: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
      **/
     PalletProjectTokenVestingSchedule: {
         linearVestingStartBlock: 'u32',
@@ -4410,7 +4404,7 @@ exports.default = {
         burnedAmount: 'u128'
     },
     /**
-     * Lookup600: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
      **/
     PalletProjectTokenTokenData: {
         totalSupply: 'u128',
@@ -4423,10 +4417,11 @@ exports.default = {
         accountsNumber: 'u64',
         revenueSplitRate: 'Permill',
         revenueSplit: 'PalletProjectTokenRevenueSplitState',
-        nextRevenueSplitId: 'u32'
+        nextRevenueSplitId: 'u32',
+        ammCurve: 'Option<PalletProjectTokenAmmCurve>'
     },
     /**
-     * Lookup601: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitState: {
         _enum: {
@@ -4435,7 +4430,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup602: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitInfo: {
         allocation: 'u128',
@@ -4443,28 +4438,28 @@ exports.default = {
         dividendsClaimed: 'u128'
     },
     /**
-     * Lookup603: pallet_project_token::types::Timeline<BlockNumber>
+     * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
      **/
     PalletProjectTokenTimeline: {
         start: 'u32',
         duration: 'u32'
     },
     /**
-     * Lookup605: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
      **/
     PalletProjectTokenPatronageData: {
-        rate: 'Perquintill',
+        rate: 'Permill',
         unclaimedPatronageTallyAmount: 'u128',
         lastUnclaimedPatronageTallyBlock: 'u32'
     },
     /**
-     * Lookup607: pallet_project_token::errors::Error<T>
+     * Lookup605: pallet_project_token::errors::Error<T>
      **/
     PalletProjectTokenErrorsError: {
-        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
+        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'TransferDestinationMemberDoesNotExist', 'MerkleProofVerificationFailure', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TooManyTransferOutputs', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'CannotInitSaleIfAmmIsActive', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount', 'NotInAmmState', 'InvalidCurveParameters', 'DeadlineExpired', 'SlippageToleranceExceeded', 'InsufficientTokenBalance', 'OutstandingAmmProvidedSupplyTooLarge', 'CurveSlopeParametersTooLow', 'TargetPatronageRateIsHigherThanCurrentRate', 'YearlyPatronageRateLimitExceeded']
     },
     /**
-     * Lookup608: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     * Lookup606: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
      **/
     PalletProposalsEngineProposal: {
         parameters: 'PalletProposalsEngineProposalParameters',
@@ -4477,7 +4472,7 @@ exports.default = {
         stakingAccountId: 'Option<AccountId32>'
     },
     /**
-     * Lookup609: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     * Lookup607: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
      **/
     PalletProposalsEngineProposalParameters: {
         votingPeriod: 'u32',
@@ -4490,7 +4485,7 @@ exports.default = {
         constitutionality: 'u32'
     },
     /**
-     * Lookup610: pallet_proposals_engine::types::VotingResults
+     * Lookup608: pallet_proposals_engine::types::VotingResults
      **/
     PalletProposalsEngineVotingResults: {
         abstentions: 'u32',
@@ -4499,13 +4494,13 @@ exports.default = {
         slashes: 'u32'
     },
     /**
-     * Lookup613: pallet_proposals_engine::Error<T>
+     * Lookup611: pallet_proposals_engine::Error<T>
      **/
     PalletProposalsEngineError: {
         _enum: ['ArithmeticError', 'EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember', 'MaxDispatchableCallCodeSizeExceeded']
     },
     /**
-     * Lookup614: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup612: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionDiscussionThread: {
         activatedAt: 'u32',
@@ -4513,7 +4508,7 @@ exports.default = {
         mode: 'PalletProposalsDiscussionThreadModeBoundedBTreeSet'
     },
     /**
-     * Lookup616: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup614: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
         _enum: {
@@ -4522,7 +4517,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup617: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup615: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProposalsDiscussionDiscussionPost: {
         authorId: 'u64',
@@ -4530,19 +4525,19 @@ exports.default = {
         lastEdited: 'u32'
     },
     /**
-     * Lookup618: pallet_proposals_discussion::Error<T>
+     * Lookup616: pallet_proposals_discussion::Error<T>
      **/
     PalletProposalsDiscussionError: {
         _enum: ['ArithmeticError', 'ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
     },
     /**
-     * Lookup619: pallet_proposals_codex::Error<T>
+     * Lookup617: pallet_proposals_codex::Error<T>
      **/
     PalletProposalsCodexError: {
-        _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError']
+        _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError', 'MaxYearlyPatronageRateCannotBeZero']
     },
     /**
-     * Lookup620: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+     * Lookup618: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
      **/
     PalletWorkingGroupOpening: {
         openingType: 'PalletWorkingGroupOpeningType',
@@ -4553,7 +4548,7 @@ exports.default = {
         creationStake: 'u128'
     },
     /**
-     * Lookup621: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+     * Lookup619: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
      **/
     PalletWorkingGroupJobApplication: {
         roleAccountId: 'AccountId32',
@@ -4564,7 +4559,7 @@ exports.default = {
         openingId: 'u64'
     },
     /**
-     * Lookup622: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     * Lookup620: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
      **/
     PalletWorkingGroupGroupWorker: {
         memberId: 'u64',
@@ -4578,13 +4573,13 @@ exports.default = {
         createdAt: 'u32'
     },
     /**
-     * Lookup623: pallet_working_group::errors::Error<T, I>
+     * Lookup621: pallet_working_group::errors::Error<T, I>
      **/
     PalletWorkingGroupErrorsError: {
         _enum: ['ArithmeticError', 'StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup633: sp_runtime::MultiSignature
+     * Lookup631: sp_runtime::MultiSignature
      **/
     SpRuntimeMultiSignature: {
         _enum: {
@@ -4594,39 +4589,39 @@ exports.default = {
         }
     },
     /**
-     * Lookup634: sp_core::ecdsa::Signature
+     * Lookup632: sp_core::ecdsa::Signature
      **/
     SpCoreEcdsaSignature: '[u8;65]',
     /**
-     * Lookup637: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     * Lookup635: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
      **/
     FrameSystemExtensionsCheckNonZeroSender: 'Null',
     /**
-     * Lookup638: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     * Lookup636: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
      **/
     FrameSystemExtensionsCheckSpecVersion: 'Null',
     /**
-     * Lookup639: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     * Lookup637: frame_system::extensions::check_tx_version::CheckTxVersion<T>
      **/
     FrameSystemExtensionsCheckTxVersion: 'Null',
     /**
-     * Lookup640: frame_system::extensions::check_genesis::CheckGenesis<T>
+     * Lookup638: frame_system::extensions::check_genesis::CheckGenesis<T>
      **/
     FrameSystemExtensionsCheckGenesis: 'Null',
     /**
-     * Lookup643: frame_system::extensions::check_nonce::CheckNonce<T>
+     * Lookup641: frame_system::extensions::check_nonce::CheckNonce<T>
      **/
     FrameSystemExtensionsCheckNonce: 'Compact<u32>',
     /**
-     * Lookup644: frame_system::extensions::check_weight::CheckWeight<T>
+     * Lookup642: frame_system::extensions::check_weight::CheckWeight<T>
      **/
     FrameSystemExtensionsCheckWeight: 'Null',
     /**
-     * Lookup645: pallet_transaction_payment::ChargeTransactionPayment<T>
+     * Lookup643: pallet_transaction_payment::ChargeTransactionPayment<T>
      **/
     PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
     /**
-     * Lookup646: joystream_node_runtime::Runtime
+     * Lookup644: joystream_node_runtime::Runtime
      **/
     JoystreamNodeRuntimeRuntime: 'Null'
 };
diff --git a/node_modules/@joystream/types/lib/mjs/augment/lookup.js b/node_modules/@joystream/types/lib/mjs/augment/lookup.js
index b7d08da..d49dbc8 100644
--- a/node_modules/@joystream/types/lib/mjs/augment/lookup.js
+++ b/node_modules/@joystream/types/lib/mjs/augment/lookup.js
@@ -366,23 +366,7 @@ export default {
         }
     },
     /**
-     * Lookup57: pallet_sudo::pallet::Event<T>
-     **/
-    PalletSudoEvent: {
-        _enum: {
-            Sudid: {
-                sudoResult: 'Result<Null, SpRuntimeDispatchError>',
-            },
-            KeyChanged: {
-                oldSudoer: 'Option<AccountId32>',
-            },
-            SudoAsDone: {
-                sudoResult: 'Result<Null, SpRuntimeDispatchError>'
-            }
-        }
-    },
-    /**
-     * Lookup59: pallet_bags_list::pallet::Event<T, I>
+     * Lookup57: pallet_bags_list::pallet::Event<T, I>
      **/
     PalletBagsListEvent: {
         _enum: {
@@ -398,7 +382,7 @@ export default {
         }
     },
     /**
-     * Lookup60: pallet_vesting::pallet::Event<T>
+     * Lookup58: pallet_vesting::pallet::Event<T>
      **/
     PalletVestingEvent: {
         _enum: {
@@ -412,7 +396,7 @@ export default {
         }
     },
     /**
-     * Lookup61: pallet_multisig::pallet::Event<T>
+     * Lookup59: pallet_multisig::pallet::Event<T>
      **/
     PalletMultisigEvent: {
         _enum: {
@@ -443,14 +427,14 @@ export default {
         }
     },
     /**
-     * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+     * Lookup60: pallet_multisig::Timepoint<BlockNumber>
      **/
     PalletMultisigTimepoint: {
         height: 'u32',
         index: 'u32'
     },
     /**
-     * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletCouncilRawEvent: {
         _enum: {
@@ -476,7 +460,7 @@ export default {
         }
     },
     /**
-     * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     * Lookup63: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
      **/
     PalletReferendumRawEvent: {
         _enum: {
@@ -486,26 +470,27 @@ export default {
             ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
             VoteCast: '(AccountId32,H256,u128)',
             VoteRevealed: '(AccountId32,u64,Bytes)',
-            StakeReleased: 'AccountId32'
+            StakeReleased: 'AccountId32',
+            AccountOptedOutOfVoting: 'AccountId32'
         }
     },
     /**
-     * Lookup66: pallet_referendum::Instance1
+     * Lookup64: pallet_referendum::Instance1
      **/
     PalletReferendumInstance1: 'Null',
     /**
-     * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
+     * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
      **/
     PalletReferendumOptionResult: {
         optionId: 'u64',
         votePower: 'u128'
     },
     /**
-     * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletMembershipRawEvent: {
         _enum: {
-            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters)',
+            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters,u128)',
             MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
             MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
             MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
@@ -520,12 +505,12 @@ export default {
             StakingAccountAdded: '(AccountId32,u64)',
             StakingAccountRemoved: '(AccountId32,u64)',
             StakingAccountConfirmed: '(AccountId32,u64)',
-            MemberRemarked: '(u64,Bytes)',
+            MemberRemarked: '(u64,Bytes,Option<(AccountId32,u128)>)',
             MemberCreated: '(u64,PalletMembershipCreateMemberParameters,u32)'
         }
     },
     /**
-     * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipBuyMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -535,7 +520,7 @@ export default {
         referrerId: 'Option<u64>'
     },
     /**
-     * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipInviteMembershipParameters: {
         invitingMemberId: 'u64',
@@ -545,7 +530,7 @@ export default {
         metadata: 'Bytes'
     },
     /**
-     * Lookup74: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+     * Lookup72: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
      **/
     PalletMembershipCreateMemberParameters: {
         rootAccount: 'AccountId32',
@@ -555,7 +540,7 @@ export default {
         isFoundingMember: 'bool'
     },
     /**
-     * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletMembershipGiftMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -568,7 +553,7 @@ export default {
         applyRootAccountInvitationLock: 'Option<u128>'
     },
     /**
-     * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     * Lookup78: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
      **/
     PalletForumRawEvent: {
         _enum: {
@@ -592,7 +577,7 @@ export default {
         }
     },
     /**
-     * Lookup78: pallet_forum::PrivilegedActor<T>
+     * Lookup79: pallet_forum::PrivilegedActor<T>
      **/
     PalletForumPrivilegedActor: {
         _enum: {
@@ -601,7 +586,7 @@ export default {
         }
     },
     /**
-     * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     * Lookup80: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
      **/
     PalletForumExtendedPostIdObject: {
         categoryId: 'u64',
@@ -609,7 +594,7 @@ export default {
         postId: 'u64'
     },
     /**
-     * Lookup84: pallet_constitution::RawEvent<primitive_types::H256>
+     * Lookup85: pallet_constitution::RawEvent<primitive_types::H256>
      **/
     PalletConstitutionRawEvent: {
         _enum: {
@@ -617,7 +602,7 @@ export default {
         }
     },
     /**
-     * Lookup85: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     * Lookup86: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
      **/
     PalletBountyRawEvent: {
         _enum: {
@@ -647,7 +632,7 @@ export default {
         }
     },
     /**
-     * Lookup86: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+     * Lookup87: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
      **/
     PalletBountyBountyParametersBTreeSet: {
         oracle: 'PalletBountyBountyActor',
@@ -659,7 +644,7 @@ export default {
         fundingType: 'PalletBountyFundingType'
     },
     /**
-     * Lookup87: pallet_bounty::BountyActor<MemberId>
+     * Lookup88: pallet_bounty::BountyActor<MemberId>
      **/
     PalletBountyBountyActor: {
         _enum: {
@@ -668,7 +653,7 @@ export default {
         }
     },
     /**
-     * Lookup88: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+     * Lookup89: pallet_bounty::AssuranceContractType<BTreeSet<T>>
      **/
     PalletBountyAssuranceContractTypeBTreeSet: {
         _enum: {
@@ -677,7 +662,7 @@ export default {
         }
     },
     /**
-     * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+     * Lookup90: pallet_bounty::FundingType<BlockNumber, Balance>
      **/
     PalletBountyFundingType: {
         _enum: {
@@ -691,7 +676,7 @@ export default {
         }
     },
     /**
-     * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     * Lookup92: pallet_bounty::OracleWorkEntryJudgment<Balance>
      **/
     PalletBountyOracleWorkEntryJudgment: {
         _enum: {
@@ -705,7 +690,7 @@ export default {
         }
     },
     /**
-     * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     * Lookup95: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
      **/
     PalletUtilityRawEvent: {
         _enum: {
@@ -716,19 +701,19 @@ export default {
         }
     },
     /**
-     * Lookup95: pallet_common::working_group::iterable_enums::WorkingGroup
+     * Lookup96: pallet_common::working_group::iterable_enums::WorkingGroup
      **/
     PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
         _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'App', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
     },
     /**
-     * Lookup96: pallet_common::BalanceKind
+     * Lookup97: pallet_common::BalanceKind
      **/
     PalletCommonBalanceKind: {
         _enum: ['Positive', 'Negative']
     },
     /**
-     * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     * Lookup98: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
      **/
     PalletContentRawEvent: {
         _enum: {
@@ -756,9 +741,8 @@ export default {
             VideoDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
             VideoVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
             VideoAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,bool,Bytes)',
-            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>)',
-            ChannelRewardUpdated: '(u128,u64)',
-            CouncilRewardClaimed: '(u64,u128)',
+            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>,AccountId32)',
+            ChannelRewardUpdated: '(u128,u128,u64)',
             EnglishAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesEnglishAuctionParamsRecord)',
             OpenAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesOpenAuctionParamsRecord,u64)',
             NftIssued: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesNftIssuanceParametersRecord)',
@@ -786,11 +770,12 @@ export default {
             GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
             ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
             ToggledNftLimits: 'bool',
-            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)'
+            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)',
+            CreatorTokenIssuerRemarked: '(u64,Bytes)'
         }
     },
     /**
-     * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     * Lookup99: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
      **/
     PalletContentPermissionsContentActor: {
         _enum: {
@@ -800,7 +785,7 @@ export default {
         }
     },
     /**
-     * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup100: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentChannelRecord: {
         owner: 'PalletContentChannelOwner',
@@ -819,26 +804,26 @@ export default {
         channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup103: pallet_content::types::iterable_enums::ChannelActionPermission
+     * Lookup104: pallet_content::types::iterable_enums::ChannelActionPermission
      **/
     PalletContentIterableEnumsChannelActionPermission: {
-        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
+        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken', 'AmmControl', 'CreatorTokenRemarks']
     },
     /**
-     * Lookup110: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+     * Lookup111: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
         _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
     },
     /**
-     * Lookup113: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     * Lookup114: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
      **/
     PalletCommonBloatBondRepayableBloatBond: {
         repaymentRestrictedTo: 'Option<AccountId32>',
         amount: 'u128'
     },
     /**
-     * Lookup114: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     * Lookup115: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
      **/
     PalletContentChannelOwner: {
         _enum: {
@@ -847,7 +832,7 @@ export default {
         }
     },
     /**
-     * Lookup115: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup116: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentChannelTransferStatus: {
         _enum: {
@@ -856,14 +841,14 @@ export default {
         }
     },
     /**
-     * Lookup116: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup117: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentPendingTransfer: {
         newOwner: 'PalletContentChannelOwner',
         transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
     },
     /**
-     * Lookup117: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+     * Lookup118: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBoundedBTreeMap: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -871,21 +856,21 @@ export default {
         transferId: 'u64'
     },
     /**
-     * Lookup118: pallet_content::types::LimitPerPeriod<BlockNumber>
+     * Lookup119: pallet_content::types::LimitPerPeriod<BlockNumber>
      **/
     PalletContentLimitPerPeriod: {
         limit: 'u64',
         blockNumberPeriod: 'u32'
     },
     /**
-     * Lookup119: pallet_content::types::NftCounter<BlockNumber>
+     * Lookup120: pallet_content::types::NftCounter<BlockNumber>
      **/
     PalletContentNftCounter: {
         counter: 'u64',
         lastUpdated: 'u32'
     },
     /**
-     * Lookup120: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup121: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -897,7 +882,7 @@ export default {
         minBidStep: 'u128'
     },
     /**
-     * Lookup122: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup123: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -907,7 +892,7 @@ export default {
         bidLockDuration: 'u32'
     },
     /**
-     * Lookup123: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     * Lookup124: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
      **/
     PalletContentNftTypesNftIssuanceParametersRecord: {
         royalty: 'Option<Perbill>',
@@ -916,7 +901,7 @@ export default {
         initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
     },
     /**
-     * Lookup124: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     * Lookup125: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
      **/
     PalletContentNftTypesInitTransactionalStatusRecord: {
         _enum: {
@@ -928,7 +913,7 @@ export default {
         }
     },
     /**
-     * Lookup126: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     * Lookup127: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
      **/
     PalletContentChannelCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -940,14 +925,14 @@ export default {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup127: pallet_content::types::StorageAssetsRecord<Balance>
+     * Lookup128: pallet_content::types::StorageAssetsRecord<Balance>
      **/
     PalletContentStorageAssetsRecord: {
         objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
         expectedDataSizeFee: 'u128'
     },
     /**
-     * Lookup129: pallet_storage::DataObjectCreationParameters
+     * Lookup130: pallet_storage::DataObjectCreationParameters
      **/
     PalletStorageDataObjectCreationParameters: {
         _alias: {
@@ -957,14 +942,14 @@ export default {
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup130: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     * Lookup131: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketIdRecord: {
         distributionBucketFamilyId: 'u64',
         distributionBucketIndex: 'u64'
     },
     /**
-     * Lookup137: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     * Lookup138: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
      **/
     PalletContentChannelUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -975,7 +960,7 @@ export default {
         storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup139: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup140: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -986,7 +971,7 @@ export default {
         storageBucketsNumWitness: 'u32'
     },
     /**
-     * Lookup141: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup142: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -997,7 +982,7 @@ export default {
         storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup144: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+     * Lookup145: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
         _enum: {
@@ -1012,7 +997,7 @@ export default {
         }
     },
     /**
-     * Lookup148: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+     * Lookup149: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBTreeMap: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -1020,7 +1005,7 @@ export default {
         transferId: 'u64'
     },
     /**
-     * Lookup149: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+     * Lookup150: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
      **/
     PalletContentUpdateChannelPayoutsParametersRecord: {
         commitment: 'Option<H256>',
@@ -1030,16 +1015,15 @@ export default {
         channelCashoutsEnabled: 'Option<bool>'
     },
     /**
-     * Lookup150: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+     * Lookup151: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
      **/
     PalletContentChannelPayoutsPayloadParametersRecord: {
-        uploaderAccount: 'AccountId32',
         objectCreationParams: 'PalletStorageDataObjectCreationParameters',
         expectedDataSizeFee: 'u128',
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup154: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     * Lookup155: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
      **/
     PalletContentChannelFundsDestination: {
         _enum: {
@@ -1048,13 +1032,13 @@ export default {
         }
     },
     /**
-     * Lookup155: pallet_content::types::NftLimitPeriod
+     * Lookup156: pallet_content::types::NftLimitPeriod
      **/
     PalletContentNftLimitPeriod: {
         _enum: ['Daily', 'Weekly']
     },
     /**
-     * Lookup156: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+     * Lookup157: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
      **/
     PalletStorageRawEvent: {
         _enum: {
@@ -1103,7 +1087,7 @@ export default {
         }
     },
     /**
-     * Lookup157: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     * Lookup158: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
      **/
     PalletStorageUploadParametersRecord: {
         bagId: 'PalletStorageBagIdType',
@@ -1113,7 +1097,7 @@ export default {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup158: pallet_storage::BagIdType<MemberId, ChannelId>
+     * Lookup159: pallet_storage::BagIdType<MemberId, ChannelId>
      **/
     PalletStorageBagIdType: {
         _enum: {
@@ -1122,7 +1106,7 @@ export default {
         }
     },
     /**
-     * Lookup159: pallet_storage::StaticBagId
+     * Lookup160: pallet_storage::StaticBagId
      **/
     PalletStorageStaticBagId: {
         _enum: {
@@ -1131,7 +1115,7 @@ export default {
         }
     },
     /**
-     * Lookup160: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     * Lookup161: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
      **/
     PalletStorageDynamicBagIdType: {
         _enum: {
@@ -1140,7 +1124,7 @@ export default {
         }
     },
     /**
-     * Lookup161: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     * Lookup162: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
      **/
     PalletStorageDynBagCreationParametersRecord: {
         bagId: 'PalletStorageDynamicBagIdType',
@@ -1152,7 +1136,7 @@ export default {
         distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
     },
     /**
-     * Lookup164: pallet_storage::Voucher
+     * Lookup165: pallet_storage::Voucher
      **/
     PalletStorageVoucher: {
         sizeLimit: 'u64',
@@ -1161,19 +1145,19 @@ export default {
         objectsUsed: 'u64'
     },
     /**
-     * Lookup165: pallet_storage::DynamicBagType
+     * Lookup166: pallet_storage::DynamicBagType
      **/
     PalletStorageDynamicBagType: {
         _enum: ['Member', 'Channel']
     },
     /**
-     * Lookup169: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+     * Lookup170: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
      **/
     PalletProjectTokenEventsRawEvent: {
         _enum: {
-            TokenAmountTransferred: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
-            TokenAmountTransferredByIssuer: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
-            PatronageRateDecreasedTo: '(u64,Perquintill)',
+            TokenAmountTransferred: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+            TokenAmountTransferredByIssuer: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+            PatronageRateDecreasedTo: '(u64,Permill)',
             PatronageCreditClaimed: '(u64,u128,u64)',
             RevenueSplitIssued: '(u64,u32,u32,u128)',
             RevenueSplitFinalized: '(u64,AccountId32,u128)',
@@ -1188,11 +1172,16 @@ export default {
             TokensPurchasedOnSale: '(u64,u32,u128,u64)',
             TokenSaleFinalized: '(u64,u32,u128,u128)',
             TransferPolicyChangedToPermissionless: 'u64',
-            TokensBurned: '(u64,u64,u128)'
+            TokensBurned: '(u64,u64,u128)',
+            AmmActivated: '(u64,u64,PalletProjectTokenAmmCurve)',
+            TokensBoughtOnAmm: '(u64,u64,u128,u128)',
+            TokensSoldOnAmm: '(u64,u64,u128,u128)',
+            AmmDeactivated: '(u64,u64,u128)',
+            MaxYearlyPatronageRateUpdated: 'Permill'
         }
     },
     /**
-     * Lookup170: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     * Lookup171: pallet_project_token::types::TransferPolicy<primitive_types::H256>
      **/
     PalletProjectTokenTransferPolicy: {
         _enum: {
@@ -1201,7 +1190,7 @@ export default {
         }
     },
     /**
-     * Lookup171: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     * Lookup172: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
      **/
     PalletProjectTokenTokenIssuanceParameters: {
         initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
@@ -1211,14 +1200,14 @@ export default {
         revenueSplitRate: 'Permill'
     },
     /**
-     * Lookup172: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup173: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenAllocation: {
         amount: 'u128',
         vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup173: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     * Lookup174: pallet_project_token::types::VestingScheduleParams<BlockNumber>
      **/
     PalletProjectTokenVestingScheduleParams: {
         linearVestingDuration: 'u32',
@@ -1226,7 +1215,7 @@ export default {
         cliffAmountPercentage: 'Permill'
     },
     /**
-     * Lookup176: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     * Lookup177: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
      **/
     PalletProjectTokenTransferPolicyParams: {
         _enum: {
@@ -1235,14 +1224,14 @@ export default {
         }
     },
     /**
-     * Lookup177: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     * Lookup178: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
      **/
     PalletProjectTokenWhitelistParams: {
         commitment: 'H256',
         payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
     },
     /**
-     * Lookup178: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     * Lookup179: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
      **/
     PalletProjectTokenSingleDataObjectUploadParams: {
         objectCreationParams: 'PalletStorageDataObjectCreationParameters',
@@ -1250,7 +1239,11 @@ export default {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup185: pallet_project_token::types::Validated<MemberId>
+     * Lookup185: pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>
+     **/
+    PalletProjectTokenTransfers: 'BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>',
+    /**
+     * Lookup186: pallet_project_token::types::Validated<MemberId>
      **/
     PalletProjectTokenValidated: {
         _enum: {
@@ -1259,21 +1252,21 @@ export default {
         }
     },
     /**
-     * Lookup186: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup187: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenValidatedPayment: {
         payment: 'PalletProjectTokenPaymentWithVesting',
         vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
     },
     /**
-     * Lookup187: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup188: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenPaymentWithVesting: {
         amount: 'u128',
         vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup189: pallet_project_token::types::VestingSource
+     * Lookup190: pallet_project_token::types::VestingSource
      **/
     PalletProjectTokenVestingSource: {
         _enum: {
@@ -1283,7 +1276,7 @@ export default {
         }
     },
     /**
-     * Lookup193: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     * Lookup194: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletProjectTokenTokenSale: {
         unitPrice: 'u128',
@@ -1298,7 +1291,15 @@ export default {
         autoFinalize: 'bool'
     },
     /**
-     * Lookup195: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     * Lookup195: pallet_project_token::types::AmmCurve<Balance>
+     **/
+    PalletProjectTokenAmmCurve: {
+        slope: 'u128',
+        intercept: 'u128',
+        providedSupply: 'u128'
+    },
+    /**
+     * Lookup196: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
      **/
     PalletProposalsEngineRawEvent: {
         _enum: {
@@ -1311,7 +1312,7 @@ export default {
         }
     },
     /**
-     * Lookup196: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
      **/
     PalletProposalsEngineProposalStatusesProposalStatus: {
         _enum: {
@@ -1321,7 +1322,7 @@ export default {
         }
     },
     /**
-     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
      **/
     PalletProposalsEngineProposalStatusesProposalDecision: {
         _enum: {
@@ -1335,13 +1336,13 @@ export default {
         }
     },
     /**
-     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
      **/
     PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
         _enum: ['PendingExecution', 'PendingConstitutionality']
     },
     /**
-     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     * Lookup200: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
      **/
     PalletProposalsEngineProposalStatusesExecutionStatus: {
         _enum: {
@@ -1352,13 +1353,13 @@ export default {
         }
     },
     /**
-     * Lookup200: pallet_proposals_engine::types::VoteKind
+     * Lookup201: pallet_proposals_engine::types::VoteKind
      **/
     PalletProposalsEngineVoteKind: {
         _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
     },
     /**
-     * Lookup201: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     * Lookup202: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
      **/
     PalletProposalsDiscussionRawEvent: {
         _enum: {
@@ -1370,7 +1371,7 @@ export default {
         }
     },
     /**
-     * Lookup202: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+     * Lookup203: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
      **/
     PalletProposalsDiscussionThreadModeBTreeSet: {
         _enum: {
@@ -1379,7 +1380,7 @@ export default {
         }
     },
     /**
-     * Lookup203: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     * Lookup204: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
      **/
     PalletProposalsCodexRawEvent: {
         _enum: {
@@ -1387,7 +1388,7 @@ export default {
         }
     },
     /**
-     * Lookup204: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     * Lookup205: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
      **/
     PalletProposalsCodexGeneralProposalParams: {
         memberId: 'u64',
@@ -1397,7 +1398,7 @@ export default {
         exactExecutionBlock: 'Option<u32>'
     },
     /**
-     * Lookup205: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+     * Lookup206: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
      **/
     PalletProposalsCodexProposalDetails: {
         _enum: {
@@ -1423,18 +1424,19 @@ export default {
             SetReferralCut: 'u8',
             VetoProposal: 'u32',
             UpdateGlobalNftLimit: '(PalletContentNftLimitPeriod,u64)',
-            UpdateChannelPayouts: 'PalletContentUpdateChannelPayoutsParametersRecord'
+            UpdateChannelPayouts: 'PalletContentUpdateChannelPayoutsParametersRecord',
+            UpdateMaxYearlyPatronageRate: 'Permill'
         }
     },
     /**
-     * Lookup207: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     * Lookup208: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
      **/
     PalletCommonFundingRequestParameters: {
         account: 'AccountId32',
         amount: 'u128'
     },
     /**
-     * Lookup208: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     * Lookup209: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
      **/
     PalletProposalsCodexCreateOpeningParameters: {
         description: 'Bytes',
@@ -1443,14 +1445,14 @@ export default {
         group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup209: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     * Lookup210: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
      **/
     PalletWorkingGroupStakePolicy: {
         stakeAmount: 'u128',
         leavingUnstakingPeriod: 'u32'
     },
     /**
-     * Lookup210: pallet_proposals_codex::types::FillOpeningParameters
+     * Lookup211: pallet_proposals_codex::types::FillOpeningParameters
      **/
     PalletProposalsCodexFillOpeningParameters: {
         openingId: 'u64',
@@ -1458,7 +1460,7 @@ export default {
         workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup211: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     * Lookup212: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
      **/
     PalletProposalsCodexTerminateRoleParameters: {
         workerId: 'u64',
@@ -1466,7 +1468,7 @@ export default {
         group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+     * Lookup213: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
      **/
     PalletWorkingGroupRawEventInstance1: {
         _enum: {
@@ -1498,13 +1500,13 @@ export default {
         }
     },
     /**
-     * Lookup216: pallet_working_group::types::OpeningType
+     * Lookup217: pallet_working_group::types::OpeningType
      **/
     PalletWorkingGroupOpeningType: {
         _enum: ['Leader', 'Regular']
     },
     /**
-     * Lookup217: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     * Lookup218: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupApplyOnOpeningParams: {
         memberId: 'u64',
@@ -1515,24 +1517,24 @@ export default {
         stakeParameters: 'PalletWorkingGroupStakeParameters'
     },
     /**
-     * Lookup218: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup219: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupStakeParameters: {
         stake: 'u128',
         stakingAccountId: 'AccountId32'
     },
     /**
-     * Lookup219: pallet_working_group::Instance1
+     * Lookup220: pallet_working_group::Instance1
      **/
     PalletWorkingGroupInstance1: 'Null',
     /**
-     * Lookup220: pallet_working_group::types::RewardPaymentType
+     * Lookup221: pallet_working_group::types::RewardPaymentType
      **/
     PalletWorkingGroupRewardPaymentType: {
         _enum: ['MissedReward', 'RegularReward']
     },
     /**
-     * Lookup221: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+     * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
      **/
     PalletWorkingGroupRawEventInstance2: {
         _enum: {
@@ -1564,11 +1566,11 @@ export default {
         }
     },
     /**
-     * Lookup222: pallet_working_group::Instance2
+     * Lookup223: pallet_working_group::Instance2
      **/
     PalletWorkingGroupInstance2: 'Null',
     /**
-     * Lookup223: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+     * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
      **/
     PalletWorkingGroupRawEventInstance3: {
         _enum: {
@@ -1600,11 +1602,11 @@ export default {
         }
     },
     /**
-     * Lookup224: pallet_working_group::Instance3
+     * Lookup225: pallet_working_group::Instance3
      **/
     PalletWorkingGroupInstance3: 'Null',
     /**
-     * Lookup225: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+     * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
      **/
     PalletWorkingGroupRawEventInstance4: {
         _enum: {
@@ -1636,11 +1638,11 @@ export default {
         }
     },
     /**
-     * Lookup226: pallet_working_group::Instance4
+     * Lookup227: pallet_working_group::Instance4
      **/
     PalletWorkingGroupInstance4: 'Null',
     /**
-     * Lookup227: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+     * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
      **/
     PalletWorkingGroupRawEventInstance5: {
         _enum: {
@@ -1672,11 +1674,11 @@ export default {
         }
     },
     /**
-     * Lookup228: pallet_working_group::Instance5
+     * Lookup229: pallet_working_group::Instance5
      **/
     PalletWorkingGroupInstance5: 'Null',
     /**
-     * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+     * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
      **/
     PalletWorkingGroupRawEventInstance6: {
         _enum: {
@@ -1708,11 +1710,11 @@ export default {
         }
     },
     /**
-     * Lookup230: pallet_working_group::Instance6
+     * Lookup231: pallet_working_group::Instance6
      **/
     PalletWorkingGroupInstance6: 'Null',
     /**
-     * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+     * Lookup232: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
      **/
     PalletWorkingGroupRawEventInstance7: {
         _enum: {
@@ -1744,11 +1746,11 @@ export default {
         }
     },
     /**
-     * Lookup232: pallet_working_group::Instance7
+     * Lookup233: pallet_working_group::Instance7
      **/
     PalletWorkingGroupInstance7: 'Null',
     /**
-     * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+     * Lookup234: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
      **/
     PalletWorkingGroupRawEventInstance8: {
         _enum: {
@@ -1780,11 +1782,11 @@ export default {
         }
     },
     /**
-     * Lookup234: pallet_working_group::Instance8
+     * Lookup235: pallet_working_group::Instance8
      **/
     PalletWorkingGroupInstance8: 'Null',
     /**
-     * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+     * Lookup236: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
      **/
     PalletWorkingGroupRawEventInstance9: {
         _enum: {
@@ -1816,11 +1818,11 @@ export default {
         }
     },
     /**
-     * Lookup236: pallet_working_group::Instance9
+     * Lookup237: pallet_working_group::Instance9
      **/
     PalletWorkingGroupInstance9: 'Null',
     /**
-     * Lookup237: frame_system::Phase
+     * Lookup238: frame_system::Phase
      **/
     FrameSystemPhase: {
         _enum: {
@@ -1830,14 +1832,14 @@ export default {
         }
     },
     /**
-     * Lookup241: frame_system::LastRuntimeUpgradeInfo
+     * Lookup242: frame_system::LastRuntimeUpgradeInfo
      **/
     FrameSystemLastRuntimeUpgradeInfo: {
         specVersion: 'Compact<u32>',
         specName: 'Text'
     },
     /**
-     * Lookup244: frame_system::pallet::Call<T>
+     * Lookup245: frame_system::pallet::Call<T>
      **/
     FrameSystemCall: {
         _enum: {
@@ -1875,7 +1877,7 @@ export default {
         }
     },
     /**
-     * Lookup247: frame_system::limits::BlockWeights
+     * Lookup248: frame_system::limits::BlockWeights
      **/
     FrameSystemLimitsBlockWeights: {
         baseBlock: 'u64',
@@ -1883,7 +1885,7 @@ export default {
         perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
     },
     /**
-     * Lookup248: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     * Lookup249: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
      **/
     FrameSupportWeightsPerDispatchClassWeightsPerClass: {
         normal: 'FrameSystemLimitsWeightsPerClass',
@@ -1891,7 +1893,7 @@ export default {
         mandatory: 'FrameSystemLimitsWeightsPerClass'
     },
     /**
-     * Lookup249: frame_system::limits::WeightsPerClass
+     * Lookup250: frame_system::limits::WeightsPerClass
      **/
     FrameSystemLimitsWeightsPerClass: {
         baseExtrinsic: 'u64',
@@ -1900,13 +1902,13 @@ export default {
         reserved: 'Option<u64>'
     },
     /**
-     * Lookup250: frame_system::limits::BlockLength
+     * Lookup251: frame_system::limits::BlockLength
      **/
     FrameSystemLimitsBlockLength: {
         max: 'FrameSupportWeightsPerDispatchClassU32'
     },
     /**
-     * Lookup251: frame_support::weights::PerDispatchClass<T>
+     * Lookup252: frame_support::weights::PerDispatchClass<T>
      **/
     FrameSupportWeightsPerDispatchClassU32: {
         normal: 'u32',
@@ -1914,14 +1916,14 @@ export default {
         mandatory: 'u32'
     },
     /**
-     * Lookup252: frame_support::weights::RuntimeDbWeight
+     * Lookup253: frame_support::weights::RuntimeDbWeight
      **/
     FrameSupportWeightsRuntimeDbWeight: {
         read: 'u64',
         write: 'u64'
     },
     /**
-     * Lookup253: sp_version::RuntimeVersion
+     * Lookup254: sp_version::RuntimeVersion
      **/
     SpVersionRuntimeVersion: {
         specName: 'Text',
@@ -1934,13 +1936,13 @@ export default {
         stateVersion: 'u8'
     },
     /**
-     * Lookup259: frame_system::pallet::Error<T>
+     * Lookup260: frame_system::pallet::Error<T>
      **/
     FrameSystemError: {
         _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
     },
     /**
-     * Lookup260: pallet_utility::pallet::Call<T>
+     * Lookup261: pallet_utility::pallet::Call<T>
      **/
     PalletUtilityCall: {
         _enum: {
@@ -1964,7 +1966,7 @@ export default {
         }
     },
     /**
-     * Lookup263: pallet_babe::pallet::Call<T>
+     * Lookup264: pallet_babe::pallet::Call<T>
      **/
     PalletBabeCall: {
         _enum: {
@@ -1982,7 +1984,7 @@ export default {
         }
     },
     /**
-     * Lookup264: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     * Lookup265: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
      **/
     SpConsensusSlotsEquivocationProof: {
         offender: 'SpConsensusBabeAppPublic',
@@ -1991,7 +1993,7 @@ export default {
         secondHeader: 'SpRuntimeHeader'
     },
     /**
-     * Lookup265: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     * Lookup266: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
      **/
     SpRuntimeHeader: {
         parentHash: 'H256',
@@ -2001,15 +2003,15 @@ export default {
         digest: 'SpRuntimeDigest'
     },
     /**
-     * Lookup266: sp_runtime::traits::BlakeTwo256
+     * Lookup267: sp_runtime::traits::BlakeTwo256
      **/
     SpRuntimeBlakeTwo256: 'Null',
     /**
-     * Lookup267: sp_consensus_babe::app::Public
+     * Lookup268: sp_consensus_babe::app::Public
      **/
     SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
     /**
-     * Lookup269: sp_session::MembershipProof
+     * Lookup270: sp_session::MembershipProof
      **/
     SpSessionMembershipProof: {
         session: 'u32',
@@ -2017,7 +2019,7 @@ export default {
         validatorCount: 'u32'
     },
     /**
-     * Lookup270: sp_consensus_babe::digests::NextConfigDescriptor
+     * Lookup271: sp_consensus_babe::digests::NextConfigDescriptor
      **/
     SpConsensusBabeDigestsNextConfigDescriptor: {
         _enum: {
@@ -2029,13 +2031,13 @@ export default {
         }
     },
     /**
-     * Lookup271: sp_consensus_babe::AllowedSlots
+     * Lookup272: sp_consensus_babe::AllowedSlots
      **/
     SpConsensusBabeAllowedSlots: {
         _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
     },
     /**
-     * Lookup272: pallet_timestamp::pallet::Call<T>
+     * Lookup273: pallet_timestamp::pallet::Call<T>
      **/
     PalletTimestampCall: {
         _enum: {
@@ -2045,7 +2047,7 @@ export default {
         }
     },
     /**
-     * Lookup274: pallet_authorship::pallet::Call<T>
+     * Lookup275: pallet_authorship::pallet::Call<T>
      **/
     PalletAuthorshipCall: {
         _enum: {
@@ -2055,7 +2057,7 @@ export default {
         }
     },
     /**
-     * Lookup276: pallet_balances::pallet::Call<T, I>
+     * Lookup277: pallet_balances::pallet::Call<T, I>
      **/
     PalletBalancesCall: {
         _enum: {
@@ -2088,7 +2090,7 @@ export default {
         }
     },
     /**
-     * Lookup277: pallet_election_provider_multi_phase::pallet::Call<T>
+     * Lookup278: pallet_election_provider_multi_phase::pallet::Call<T>
      **/
     PalletElectionProviderMultiPhaseCall: {
         _enum: {
@@ -2112,7 +2114,7 @@ export default {
         }
     },
     /**
-     * Lookup278: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     * Lookup279: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseRawSolution: {
         solution: 'JoystreamNodeRuntimeNposSolution16',
@@ -2120,7 +2122,7 @@ export default {
         round: 'u32'
     },
     /**
-     * Lookup279: joystream_node_runtime::NposSolution16
+     * Lookup280: joystream_node_runtime::NposSolution16
      **/
     JoystreamNodeRuntimeNposSolution16: {
         votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
@@ -2141,7 +2143,7 @@ export default {
         votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
     },
     /**
-     * Lookup330: sp_npos_elections::ElectionScore
+     * Lookup331: sp_npos_elections::ElectionScore
      **/
     SpNposElectionsElectionScore: {
         minimalStake: 'u128',
@@ -2149,14 +2151,14 @@ export default {
         sumStakeSquared: 'u128'
     },
     /**
-     * Lookup331: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     * Lookup332: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
      **/
     PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
         voters: 'Compact<u32>',
         targets: 'Compact<u32>'
     },
     /**
-     * Lookup335: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     * Lookup336: sp_npos_elections::Support<sp_core::crypto::AccountId32>
      **/
     SpNposElectionsSupport: {
         total: 'u128',
@@ -2446,31 +2448,7 @@ export default {
      **/
     SpCoreSr25519Signature: '[u8;64]',
     /**
-     * Lookup370: pallet_sudo::pallet::Call<T>
-     **/
-    PalletSudoCall: {
-        _enum: {
-            sudo: {
-                call: 'Call',
-            },
-            sudo_unchecked_weight: {
-                call: 'Call',
-                weight: 'u64',
-            },
-            set_key: {
-                _alias: {
-                    new_: 'new',
-                },
-                new_: 'AccountId32',
-            },
-            sudo_as: {
-                who: 'AccountId32',
-                call: 'Call'
-            }
-        }
-    },
-    /**
-     * Lookup371: pallet_bags_list::pallet::Call<T, I>
+     * Lookup370: pallet_bags_list::pallet::Call<T, I>
      **/
     PalletBagsListCall: {
         _enum: {
@@ -2483,7 +2461,7 @@ export default {
         }
     },
     /**
-     * Lookup372: pallet_vesting::pallet::Call<T>
+     * Lookup371: pallet_vesting::pallet::Call<T>
      **/
     PalletVestingCall: {
         _enum: {
@@ -2507,7 +2485,7 @@ export default {
         }
     },
     /**
-     * Lookup373: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     * Lookup372: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
      **/
     PalletVestingVestingInfo: {
         locked: 'u128',
@@ -2515,7 +2493,7 @@ export default {
         startingBlock: 'u32'
     },
     /**
-     * Lookup374: pallet_multisig::pallet::Call<T>
+     * Lookup373: pallet_multisig::pallet::Call<T>
      **/
     PalletMultisigCall: {
         _enum: {
@@ -2547,7 +2525,7 @@ export default {
         }
     },
     /**
-     * Lookup377: pallet_council::Call<T>
+     * Lookup376: pallet_council::Call<T>
      **/
     PalletCouncilCall: {
         _enum: {
@@ -2598,7 +2576,7 @@ export default {
         }
     },
     /**
-     * Lookup378: pallet_referendum::Call<T, I>
+     * Lookup377: pallet_referendum::Call<T, I>
      **/
     PalletReferendumCall: {
         _enum: {
@@ -2610,11 +2588,12 @@ export default {
                 salt: 'Bytes',
                 voteOptionId: 'u64',
             },
-            release_vote_stake: 'Null'
+            release_vote_stake: 'Null',
+            opt_out_of_voting: 'Null'
         }
     },
     /**
-     * Lookup379: pallet_membership::Call<T>
+     * Lookup378: pallet_membership::Call<T>
      **/
     PalletMembershipCall: {
         _enum: {
@@ -2675,6 +2654,7 @@ export default {
             member_remark: {
                 memberId: 'u64',
                 msg: 'Bytes',
+                payment: 'Option<(AccountId32,u128)>',
             },
             create_member: {
                 params: 'PalletMembershipCreateMemberParameters'
@@ -2682,7 +2662,7 @@ export default {
         }
     },
     /**
-     * Lookup380: pallet_forum::Call<T>
+     * Lookup379: pallet_forum::Call<T>
      **/
     PalletForumCall: {
         _enum: {
@@ -2779,7 +2759,7 @@ export default {
         }
     },
     /**
-     * Lookup381: pallet_constitution::Call<T>
+     * Lookup380: pallet_constitution::Call<T>
      **/
     PalletConstitutionCall: {
         _enum: {
@@ -2789,7 +2769,7 @@ export default {
         }
     },
     /**
-     * Lookup382: pallet_bounty::Call<T>
+     * Lookup381: pallet_bounty::Call<T>
      **/
     PalletBountyCall: {
         _enum: {
@@ -2865,7 +2845,7 @@ export default {
         }
     },
     /**
-     * Lookup384: pallet_content::Call<T>
+     * Lookup383: pallet_content::Call<T>
      **/
     PalletContentCall: {
         _enum: {
@@ -2973,6 +2953,7 @@ export default {
             },
             update_channel_payouts: {
                 params: 'PalletContentUpdateChannelPayoutsParametersRecord',
+                uploaderAccount: 'AccountId32',
             },
             claim_channel_reward: {
                 actor: 'PalletContentPermissionsContentActor',
@@ -3089,6 +3070,11 @@ export default {
                 channelId: 'u64',
                 msg: 'Bytes',
             },
+            creator_token_issuer_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                msg: 'Bytes',
+            },
             channel_agent_remark: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
@@ -3141,7 +3127,7 @@ export default {
             creator_token_issuer_transfer: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
-                outputs: 'PalletProjectTokenTransfersPaymentWithVesting',
+                outputs: 'Vec<(u64,PalletProjectTokenPaymentWithVesting)>',
                 metadata: 'Bytes',
             },
             make_creator_token_permissionless: {
@@ -3172,20 +3158,29 @@ export default {
                 channelId: 'u64',
             },
             deissue_creator_token: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            activate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenAmmParams',
+            },
+            deactivate_amm: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64'
             }
         }
     },
     /**
-     * Lookup385: pallet_content::types::ChannelBagWitness
+     * Lookup384: pallet_content::types::ChannelBagWitness
      **/
     PalletContentChannelBagWitness: {
         storageBucketsNum: 'u32',
         distributionBucketsNum: 'u32'
     },
     /**
-     * Lookup387: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+     * Lookup386: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
      **/
     PalletCommonMerkleTreeProofElementRecord: {
         _alias: {
@@ -3195,13 +3190,13 @@ export default {
         side: 'PalletCommonMerkleTreeSide'
     },
     /**
-     * Lookup388: pallet_common::merkle_tree::Side
+     * Lookup387: pallet_common::merkle_tree::Side
      **/
     PalletCommonMerkleTreeSide: {
         _enum: ['Left', 'Right']
     },
     /**
-     * Lookup389: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     * Lookup388: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
      **/
     PalletContentPullPaymentElement: {
         channelId: 'u64',
@@ -3209,7 +3204,7 @@ export default {
         reason: 'H256'
     },
     /**
-     * Lookup390: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     * Lookup389: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
      **/
     PalletContentInitTransferParameters: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -3217,7 +3212,7 @@ export default {
         newOwner: 'PalletContentChannelOwner'
     },
     /**
-     * Lookup391: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup390: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenSaleParams: {
         unitPrice: 'u128',
@@ -3229,11 +3224,14 @@ export default {
         metadata: 'Option<Bytes>'
     },
     /**
-     * Lookup392: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup394: pallet_project_token::types::AmmParams<Balance>
      **/
-    PalletProjectTokenTransfersPaymentWithVesting: 'BTreeMap<u64, PalletProjectTokenPaymentWithVesting>',
+    PalletProjectTokenAmmParams: {
+        slope: 'u128',
+        intercept: 'u128'
+    },
     /**
-     * Lookup396: pallet_storage::Call<T>
+     * Lookup395: pallet_storage::Call<T>
      **/
     PalletStorageCall: {
         _enum: {
@@ -3367,9 +3365,6 @@ export default {
                 bucketId: 'PalletStorageDistributionBucketIdRecord',
                 metadata: 'Bytes',
             },
-            sudo_upload_data_objects: {
-                params: 'PalletStorageUploadParametersRecord',
-            },
             storage_operator_remark: {
                 workerId: 'u64',
                 storageBucketId: 'u64',
@@ -3383,14 +3378,14 @@ export default {
         }
     },
     /**
-     * Lookup397: pallet_project_token::Call<T>
+     * Lookup396: pallet_project_token::Call<T>
      **/
     PalletProjectTokenCall: {
         _enum: {
             transfer: {
                 srcMemberId: 'u64',
                 tokenId: 'u64',
-                outputs: 'PalletProjectTokenTransfersPayment',
+                outputs: 'Vec<(u64,u128)>',
                 metadata: 'Bytes',
             },
             burn: {
@@ -3419,32 +3414,37 @@ export default {
             },
             exit_revenue_split: {
                 tokenId: 'u64',
-                memberId: 'u64'
+                memberId: 'u64',
+            },
+            buy_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            sell_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            update_max_yearly_patronage_rate: {
+                rate: 'Permill'
             }
         }
     },
     /**
-     * Lookup398: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
-     **/
-    PalletProjectTokenTransfersPayment: 'BTreeMap<u64, PalletProjectTokenPayment>',
-    /**
-     * Lookup399: pallet_project_token::types::Payment<Balance>
-     **/
-    PalletProjectTokenPayment: {
-        amount: 'u128'
-    },
-    /**
-     * Lookup403: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     * Lookup400: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
      **/
     PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
     /**
-     * Lookup406: pallet_project_token::types::MerkleSide
+     * Lookup403: pallet_project_token::types::MerkleSide
      **/
     PalletProjectTokenMerkleSide: {
         _enum: ['Right', 'Left']
     },
     /**
-     * Lookup407: pallet_proposals_engine::Call<T>
+     * Lookup406: pallet_proposals_engine::Call<T>
      **/
     PalletProposalsEngineCall: {
         _enum: {
@@ -3469,7 +3469,7 @@ export default {
         }
     },
     /**
-     * Lookup408: pallet_proposals_discussion::Call<T>
+     * Lookup407: pallet_proposals_discussion::Call<T>
      **/
     PalletProposalsDiscussionCall: {
         _enum: {
@@ -3498,7 +3498,7 @@ export default {
         }
     },
     /**
-     * Lookup409: pallet_proposals_codex::Call<T>
+     * Lookup408: pallet_proposals_codex::Call<T>
      **/
     PalletProposalsCodexCall: {
         _enum: {
@@ -3509,7 +3509,7 @@ export default {
         }
     },
     /**
-     * Lookup410: pallet_working_group::Call<T, I>
+     * Lookup409: pallet_working_group::Call<T, I>
      **/
     PalletWorkingGroupCall: {
         _enum: {
@@ -3592,7 +3592,7 @@ export default {
         }
     },
     /**
-     * Lookup419: joystream_node_runtime::OriginCaller
+     * Lookup418: joystream_node_runtime::OriginCaller
      **/
     JoystreamNodeRuntimeOriginCaller: {
         _enum: {
@@ -3601,7 +3601,7 @@ export default {
         }
     },
     /**
-     * Lookup420: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     * Lookup419: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
      **/
     FrameSupportDispatchRawOrigin: {
         _enum: {
@@ -3611,17 +3611,17 @@ export default {
         }
     },
     /**
-     * Lookup421: sp_core::Void
+     * Lookup420: sp_core::Void
      **/
     SpCoreVoid: 'Null',
     /**
-     * Lookup422: pallet_utility::pallet::Error<T>
+     * Lookup421: pallet_utility::pallet::Error<T>
      **/
     PalletUtilityError: {
         _enum: ['TooManyCalls']
     },
     /**
-     * Lookup429: sp_consensus_babe::digests::PreDigest
+     * Lookup428: sp_consensus_babe::digests::PreDigest
      **/
     SpConsensusBabeDigestsPreDigest: {
         _enum: {
@@ -3632,7 +3632,7 @@ export default {
         }
     },
     /**
-     * Lookup430: sp_consensus_babe::digests::PrimaryPreDigest
+     * Lookup429: sp_consensus_babe::digests::PrimaryPreDigest
      **/
     SpConsensusBabeDigestsPrimaryPreDigest: {
         authorityIndex: 'u32',
@@ -3641,14 +3641,14 @@ export default {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup431: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     * Lookup430: sp_consensus_babe::digests::SecondaryPlainPreDigest
      **/
     SpConsensusBabeDigestsSecondaryPlainPreDigest: {
         authorityIndex: 'u32',
         slot: 'u64'
     },
     /**
-     * Lookup432: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     * Lookup431: sp_consensus_babe::digests::SecondaryVRFPreDigest
      **/
     SpConsensusBabeDigestsSecondaryVRFPreDigest: {
         authorityIndex: 'u32',
@@ -3657,20 +3657,20 @@ export default {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup434: sp_consensus_babe::BabeEpochConfiguration
+     * Lookup433: sp_consensus_babe::BabeEpochConfiguration
      **/
     SpConsensusBabeBabeEpochConfiguration: {
         c: '(u64,u64)',
         allowedSlots: 'SpConsensusBabeAllowedSlots'
     },
     /**
-     * Lookup435: pallet_babe::pallet::Error<T>
+     * Lookup434: pallet_babe::pallet::Error<T>
      **/
     PalletBabeError: {
         _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
     },
     /**
-     * Lookup437: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+     * Lookup436: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
      **/
     PalletAuthorshipUncleEntryItem: {
         _enum: {
@@ -3679,13 +3679,13 @@ export default {
         }
     },
     /**
-     * Lookup438: pallet_authorship::pallet::Error<T>
+     * Lookup437: pallet_authorship::pallet::Error<T>
      **/
     PalletAuthorshipError: {
         _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
     },
     /**
-     * Lookup440: pallet_balances::BalanceLock<Balance>
+     * Lookup439: pallet_balances::BalanceLock<Balance>
      **/
     PalletBalancesBalanceLock: {
         id: '[u8;8]',
@@ -3693,38 +3693,38 @@ export default {
         reasons: 'PalletBalancesReasons'
     },
     /**
-     * Lookup441: pallet_balances::Reasons
+     * Lookup440: pallet_balances::Reasons
      **/
     PalletBalancesReasons: {
         _enum: ['Fee', 'Misc', 'All']
     },
     /**
-     * Lookup444: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     * Lookup443: pallet_balances::ReserveData<ReserveIdentifier, Balance>
      **/
     PalletBalancesReserveData: {
         id: '[u8;8]',
         amount: 'u128'
     },
     /**
-     * Lookup446: pallet_balances::Releases
+     * Lookup445: pallet_balances::Releases
      **/
     PalletBalancesReleases: {
         _enum: ['V1_0_0', 'V2_0_0']
     },
     /**
-     * Lookup447: pallet_balances::pallet::Error<T, I>
+     * Lookup446: pallet_balances::pallet::Error<T, I>
      **/
     PalletBalancesError: {
         _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
     },
     /**
-     * Lookup449: pallet_transaction_payment::Releases
+     * Lookup448: pallet_transaction_payment::Releases
      **/
     PalletTransactionPaymentReleases: {
         _enum: ['V1Ancient', 'V2']
     },
     /**
-     * Lookup450: pallet_election_provider_multi_phase::Phase<Bn>
+     * Lookup449: pallet_election_provider_multi_phase::Phase<Bn>
      **/
     PalletElectionProviderMultiPhasePhase: {
         _enum: {
@@ -3735,7 +3735,7 @@ export default {
         }
     },
     /**
-     * Lookup452: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     * Lookup451: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
      **/
     PalletElectionProviderMultiPhaseReadySolution: {
         supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
@@ -3743,14 +3743,14 @@ export default {
         compute: 'PalletElectionProviderMultiPhaseElectionCompute'
     },
     /**
-     * Lookup453: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     * Lookup452: pallet_election_provider_multi_phase::RoundSnapshot<T>
      **/
     PalletElectionProviderMultiPhaseRoundSnapshot: {
         voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
         targets: 'Vec<AccountId32>'
     },
     /**
-     * Lookup461: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+     * Lookup460: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseSignedSignedSubmission: {
         who: 'AccountId32',
@@ -3759,13 +3759,13 @@ export default {
         callFee: 'u128'
     },
     /**
-     * Lookup462: pallet_election_provider_multi_phase::pallet::Error<T>
+     * Lookup461: pallet_election_provider_multi_phase::pallet::Error<T>
      **/
     PalletElectionProviderMultiPhaseError: {
         _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
     },
     /**
-     * Lookup463: pallet_staking::StakingLedger<T>
+     * Lookup462: pallet_staking::StakingLedger<T>
      **/
     PalletStakingStakingLedger: {
         stash: 'AccountId32',
@@ -3775,14 +3775,14 @@ export default {
         claimedRewards: 'Vec<u32>'
     },
     /**
-     * Lookup465: pallet_staking::UnlockChunk<Balance>
+     * Lookup464: pallet_staking::UnlockChunk<Balance>
      **/
     PalletStakingUnlockChunk: {
         value: 'Compact<u128>',
         era: 'Compact<u32>'
     },
     /**
-     * Lookup467: pallet_staking::Nominations<T>
+     * Lookup466: pallet_staking::Nominations<T>
      **/
     PalletStakingNominations: {
         targets: 'Vec<AccountId32>',
@@ -3790,27 +3790,27 @@ export default {
         suppressed: 'bool'
     },
     /**
-     * Lookup468: pallet_staking::ActiveEraInfo
+     * Lookup467: pallet_staking::ActiveEraInfo
      **/
     PalletStakingActiveEraInfo: {
         index: 'u32',
         start: 'Option<u64>'
     },
     /**
-     * Lookup470: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     * Lookup469: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
      **/
     PalletStakingEraRewardPoints: {
         total: 'u32',
         individual: 'BTreeMap<AccountId32, u32>'
     },
     /**
-     * Lookup474: pallet_staking::Forcing
+     * Lookup473: pallet_staking::Forcing
      **/
     PalletStakingForcing: {
         _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
     },
     /**
-     * Lookup476: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+     * Lookup475: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingUnappliedSlash: {
         validator: 'AccountId32',
@@ -3820,7 +3820,7 @@ export default {
         payout: 'u128'
     },
     /**
-     * Lookup478: pallet_staking::slashing::SlashingSpans
+     * Lookup477: pallet_staking::slashing::SlashingSpans
      **/
     PalletStakingSlashingSlashingSpans: {
         spanIndex: 'u32',
@@ -3829,36 +3829,36 @@ export default {
         prior: 'Vec<u32>'
     },
     /**
-     * Lookup479: pallet_staking::slashing::SpanRecord<Balance>
+     * Lookup478: pallet_staking::slashing::SpanRecord<Balance>
      **/
     PalletStakingSlashingSpanRecord: {
         slashed: 'u128',
         paidOut: 'u128'
     },
     /**
-     * Lookup482: pallet_staking::Releases
+     * Lookup481: pallet_staking::Releases
      **/
     PalletStakingReleases: {
         _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
     },
     /**
-     * Lookup483: pallet_staking::pallet::pallet::Error<T>
+     * Lookup482: pallet_staking::pallet::pallet::Error<T>
      **/
     PalletStakingPalletError: {
         _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
     },
     /**
-     * Lookup487: sp_core::crypto::KeyTypeId
+     * Lookup486: sp_core::crypto::KeyTypeId
      **/
     SpCoreCryptoKeyTypeId: '[u8;4]',
     /**
-     * Lookup488: pallet_session::pallet::Error<T>
+     * Lookup487: pallet_session::pallet::Error<T>
      **/
     PalletSessionError: {
         _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
     },
     /**
-     * Lookup490: pallet_grandpa::StoredState<N>
+     * Lookup489: pallet_grandpa::StoredState<N>
      **/
     PalletGrandpaStoredState: {
         _enum: {
@@ -3875,7 +3875,7 @@ export default {
         }
     },
     /**
-     * Lookup491: pallet_grandpa::StoredPendingChange<N, Limit>
+     * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
      **/
     PalletGrandpaStoredPendingChange: {
         scheduledAt: 'u32',
@@ -3884,39 +3884,33 @@ export default {
         forced: 'Option<u32>'
     },
     /**
-     * Lookup493: pallet_grandpa::pallet::Error<T>
+     * Lookup492: pallet_grandpa::pallet::Error<T>
      **/
     PalletGrandpaError: {
         _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
     },
     /**
-     * Lookup499: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
      **/
     PalletImOnlineBoundedOpaqueNetworkState: {
         peerId: 'Bytes',
         externalAddresses: 'Vec<Bytes>'
     },
     /**
-     * Lookup503: pallet_im_online::pallet::Error<T>
+     * Lookup502: pallet_im_online::pallet::Error<T>
      **/
     PalletImOnlineError: {
         _enum: ['InvalidKey', 'DuplicatedHeartbeat']
     },
     /**
-     * Lookup504: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
      **/
     SpStakingOffenceOffenceDetails: {
         offender: '(AccountId32,PalletStakingExposure)',
         reporters: 'Vec<AccountId32>'
     },
     /**
-     * Lookup507: pallet_sudo::pallet::Error<T>
-     **/
-    PalletSudoError: {
-        _enum: ['RequireSudo']
-    },
-    /**
-     * Lookup508: pallet_bags_list::list::Node<T, I>
+     * Lookup506: pallet_bags_list::list::Node<T, I>
      **/
     PalletBagsListListNode: {
         id: 'AccountId32',
@@ -3926,14 +3920,14 @@ export default {
         score: 'u64'
     },
     /**
-     * Lookup509: pallet_bags_list::list::Bag<T, I>
+     * Lookup507: pallet_bags_list::list::Bag<T, I>
      **/
     PalletBagsListListBag: {
         head: 'Option<AccountId32>',
         tail: 'Option<AccountId32>'
     },
     /**
-     * Lookup510: pallet_bags_list::pallet::Error<T, I>
+     * Lookup508: pallet_bags_list::pallet::Error<T, I>
      **/
     PalletBagsListError: {
         _enum: {
@@ -3941,25 +3935,25 @@ export default {
         }
     },
     /**
-     * Lookup511: pallet_bags_list::list::ListError
+     * Lookup509: pallet_bags_list::list::ListError
      **/
     PalletBagsListListListError: {
         _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
     },
     /**
-     * Lookup514: pallet_vesting::Releases
+     * Lookup512: pallet_vesting::Releases
      **/
     PalletVestingReleases: {
         _enum: ['V0', 'V1']
     },
     /**
-     * Lookup515: pallet_vesting::pallet::Error<T>
+     * Lookup513: pallet_vesting::pallet::Error<T>
      **/
     PalletVestingError: {
         _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
     },
     /**
-     * Lookup517: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
      **/
     PalletMultisigMultisig: {
         when: 'PalletMultisigTimepoint',
@@ -3968,20 +3962,20 @@ export default {
         approvals: 'Vec<AccountId32>'
     },
     /**
-     * Lookup519: pallet_multisig::pallet::Error<T>
+     * Lookup517: pallet_multisig::pallet::Error<T>
      **/
     PalletMultisigError: {
         _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
     },
     /**
-     * Lookup520: pallet_council::CouncilStageUpdate<BlockNumber>
+     * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
      **/
     PalletCouncilCouncilStageUpdate: {
         stage: 'PalletCouncilCouncilStage',
         changedAt: 'u32'
     },
     /**
-     * Lookup521: pallet_council::CouncilStage<BlockNumber>
+     * Lookup519: pallet_council::CouncilStage<BlockNumber>
      **/
     PalletCouncilCouncilStage: {
         _enum: {
@@ -3991,26 +3985,26 @@ export default {
         }
     },
     /**
-     * Lookup522: pallet_council::CouncilStageAnnouncing<BlockNumber>
+     * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
      **/
     PalletCouncilCouncilStageAnnouncing: {
         candidatesCount: 'u32',
         endsAt: 'u32'
     },
     /**
-     * Lookup523: pallet_council::CouncilStageElection
+     * Lookup521: pallet_council::CouncilStageElection
      **/
     PalletCouncilCouncilStageElection: {
         candidatesCount: 'u32'
     },
     /**
-     * Lookup524: pallet_council::CouncilStageIdle<BlockNumber>
+     * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
      **/
     PalletCouncilCouncilStageIdle: {
         endsAt: 'u32'
     },
     /**
-     * Lookup526: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
      **/
     PalletCouncilCouncilMember: {
         stakingAccountId: 'AccountId32',
@@ -4021,7 +4015,7 @@ export default {
         unpaidReward: 'u128'
     },
     /**
-     * Lookup528: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
      **/
     PalletCouncilCandidate: {
         stakingAccountId: 'AccountId32',
@@ -4032,13 +4026,13 @@ export default {
         noteHash: 'Option<H256>'
     },
     /**
-     * Lookup529: pallet_council::Error<T>
+     * Lookup527: pallet_council::Error<T>
      **/
     PalletCouncilError: {
         _enum: ['ArithmeticError', 'BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup530: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStage: {
         _enum: {
@@ -4048,7 +4042,7 @@ export default {
         }
     },
     /**
-     * Lookup532: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
      **/
     PalletReferendumReferendumStageVoting: {
         started: 'u32',
@@ -4057,7 +4051,7 @@ export default {
         endsAt: 'u32'
     },
     /**
-     * Lookup533: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStageRevealing: {
         started: 'u32',
@@ -4067,7 +4061,7 @@ export default {
         endsAt: 'u32'
     },
     /**
-     * Lookup534: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
      **/
     PalletReferendumCastVote: {
         commitment: 'H256',
@@ -4076,13 +4070,13 @@ export default {
         voteFor: 'Option<u64>'
     },
     /**
-     * Lookup535: pallet_referendum::Error<T, I>
+     * Lookup533: pallet_referendum::Error<T, I>
      **/
     PalletReferendumError: {
-        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden']
+        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden', 'AccountAlreadyOptedOutOfVoting']
     },
     /**
-     * Lookup536: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+     * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
      **/
     PalletMembershipMembershipObject: {
         handleHash: 'H256',
@@ -4092,20 +4086,20 @@ export default {
         invites: 'u32'
     },
     /**
-     * Lookup537: pallet_membership::StakingAccountMemberBinding<MemberId>
+     * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
      **/
     PalletMembershipStakingAccountMemberBinding: {
         memberId: 'u64',
         confirmed: 'bool'
     },
     /**
-     * Lookup538: pallet_membership::Error<T>
+     * Lookup536: pallet_membership::Error<T>
      **/
     PalletMembershipError: {
-        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift']
+        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift', 'InsufficientBalanceToCoverPayment']
     },
     /**
-     * Lookup539: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletForumCategory: {
         titleHash: 'H256',
@@ -4118,7 +4112,7 @@ export default {
         stickyThreadIds: 'BTreeSet<u64>'
     },
     /**
-     * Lookup541: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumThread: {
         categoryId: 'u64',
@@ -4127,7 +4121,7 @@ export default {
         numberOfEditablePosts: 'u64'
     },
     /**
-     * Lookup542: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumPost: {
         threadId: 'u64',
@@ -4137,19 +4131,19 @@ export default {
         lastEdited: 'u32'
     },
     /**
-     * Lookup543: pallet_forum::Error<T>
+     * Lookup541: pallet_forum::Error<T>
      **/
     PalletForumError: {
         _enum: ['ArithmeticError', 'OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero', 'MaxNumberOfStickiedThreadsExceeded']
     },
     /**
-     * Lookup544: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+     * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
      **/
     PalletConstitutionConstitutionInfo: {
         textHash: 'H256'
     },
     /**
-     * Lookup545: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyRecord: {
         creationParams: 'PalletBountyBountyParametersBoundedBTreeSet',
@@ -4159,7 +4153,7 @@ export default {
         hasUnpaidOracleReward: 'bool'
     },
     /**
-     * Lookup547: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyParametersBoundedBTreeSet: {
         oracle: 'PalletBountyBountyActor',
@@ -4171,7 +4165,7 @@ export default {
         fundingType: 'PalletBountyFundingType'
     },
     /**
-     * Lookup548: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup546: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyAssuranceContractTypeBoundedBTreeSet: {
         _enum: {
@@ -4180,7 +4174,7 @@ export default {
         }
     },
     /**
-     * Lookup549: pallet_bounty::BountyMilestone<BlockNumber>
+     * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
      **/
     PalletBountyBountyMilestone: {
         _enum: {
@@ -4197,14 +4191,14 @@ export default {
         }
     },
     /**
-     * Lookup551: pallet_bounty::Contribution<T>
+     * Lookup549: pallet_bounty::Contribution<T>
      **/
     PalletBountyContribution: {
         amount: 'u128',
         funderStateBloatBondAmount: 'u128'
     },
     /**
-     * Lookup552: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
      **/
     PalletBountyEntryRecord: {
         memberId: 'u64',
@@ -4213,13 +4207,13 @@ export default {
         workSubmitted: 'bool'
     },
     /**
-     * Lookup553: pallet_bounty::Error<T>
+     * Lookup551: pallet_bounty::Error<T>
      **/
     PalletBountyError: {
         _enum: ['ArithmeticError', 'MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
     },
     /**
-     * Lookup555: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentVideoRecord: {
         inChannel: 'u64',
@@ -4228,7 +4222,7 @@ export default {
         videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup556: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+     * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
      **/
     PalletContentNftTypesOwnedNft: {
         owner: 'PalletContentNftTypesNftOwner',
@@ -4237,7 +4231,7 @@ export default {
         openAuctionsNonce: 'u64'
     },
     /**
-     * Lookup557: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+     * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
      **/
     PalletContentNftTypesTransactionalStatusRecord: {
         _enum: {
@@ -4249,7 +4243,7 @@ export default {
         }
     },
     /**
-     * Lookup558: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesEnglishAuctionRecord: {
         startingPrice: 'u128',
@@ -4262,14 +4256,14 @@ export default {
         topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
     },
     /**
-     * Lookup561: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionBid: {
         amount: 'u128',
         bidderId: 'u64'
     },
     /**
-     * Lookup562: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesOpenAuctionRecord: {
         startingPrice: 'u128',
@@ -4280,7 +4274,7 @@ export default {
         start: 'u32'
     },
     /**
-     * Lookup563: pallet_content::nft::types::NftOwner<MemberId>
+     * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
      **/
     PalletContentNftTypesNftOwner: {
         _enum: {
@@ -4289,7 +4283,7 @@ export default {
         }
     },
     /**
-     * Lookup566: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+     * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
      **/
     PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
         curators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -4297,7 +4291,7 @@ export default {
         permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>'
     },
     /**
-     * Lookup573: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
      **/
     PalletContentNftTypesOpenAuctionBidRecord: {
         amount: 'u128',
@@ -4305,13 +4299,13 @@ export default {
         auctionId: 'u64'
     },
     /**
-     * Lookup574: pallet_content::errors::Error<T>
+     * Lookup572: pallet_content::errors::Error<T>
      **/
     PalletContentErrorsError: {
-        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
+        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales', 'ChannelTransfersBlockedDuringActiveAmm']
     },
     /**
-     * Lookup575: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+     * Lookup573: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
      **/
     PalletStorageBagRecord: {
         storedBy: 'BTreeSet<u64>',
@@ -4320,7 +4314,7 @@ export default {
         objectsNumber: 'u64'
     },
     /**
-     * Lookup578: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketRecord: {
         operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
@@ -4329,7 +4323,7 @@ export default {
         assignedBags: 'u64'
     },
     /**
-     * Lookup579: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketOperatorStatus: {
         _enum: {
@@ -4339,14 +4333,14 @@ export default {
         }
     },
     /**
-     * Lookup581: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+     * Lookup579: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
      **/
     PalletStorageDynamicBagCreationPolicy: {
         numberOfStorageBuckets: 'u32',
         families: 'BTreeMap<u64, u32>'
     },
     /**
-     * Lookup584: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletStorageDataObject: {
         _alias: {
@@ -4358,13 +4352,13 @@ export default {
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup585: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketFamilyRecord: {
         nextDistributionBucketIndex: 'u64'
     },
     /**
-     * Lookup586: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup584: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletStorageDistributionBucketRecord: {
         acceptingNewBags: 'bool',
@@ -4374,13 +4368,13 @@ export default {
         assignedBags: 'u64'
     },
     /**
-     * Lookup589: pallet_storage::Error<T>
+     * Lookup587: pallet_storage::Error<T>
      **/
     PalletStorageError: {
         _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'MaxNumberOfOperatorsPerDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
     },
     /**
-     * Lookup590: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+     * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
      **/
     PalletProjectTokenAccountData: {
         vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
@@ -4391,14 +4385,14 @@ export default {
         lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
     },
     /**
-     * Lookup591: pallet_project_token::types::StakingStatus<Balance>
+     * Lookup589: pallet_project_token::types::StakingStatus<Balance>
      **/
     PalletProjectTokenStakingStatus: {
         splitId: 'u32',
         amount: 'u128'
     },
     /**
-     * Lookup593: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
      **/
     PalletProjectTokenVestingSchedule: {
         linearVestingStartBlock: 'u32',
@@ -4408,7 +4402,7 @@ export default {
         burnedAmount: 'u128'
     },
     /**
-     * Lookup600: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
      **/
     PalletProjectTokenTokenData: {
         totalSupply: 'u128',
@@ -4421,10 +4415,11 @@ export default {
         accountsNumber: 'u64',
         revenueSplitRate: 'Permill',
         revenueSplit: 'PalletProjectTokenRevenueSplitState',
-        nextRevenueSplitId: 'u32'
+        nextRevenueSplitId: 'u32',
+        ammCurve: 'Option<PalletProjectTokenAmmCurve>'
     },
     /**
-     * Lookup601: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitState: {
         _enum: {
@@ -4433,7 +4428,7 @@ export default {
         }
     },
     /**
-     * Lookup602: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitInfo: {
         allocation: 'u128',
@@ -4441,28 +4436,28 @@ export default {
         dividendsClaimed: 'u128'
     },
     /**
-     * Lookup603: pallet_project_token::types::Timeline<BlockNumber>
+     * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
      **/
     PalletProjectTokenTimeline: {
         start: 'u32',
         duration: 'u32'
     },
     /**
-     * Lookup605: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
      **/
     PalletProjectTokenPatronageData: {
-        rate: 'Perquintill',
+        rate: 'Permill',
         unclaimedPatronageTallyAmount: 'u128',
         lastUnclaimedPatronageTallyBlock: 'u32'
     },
     /**
-     * Lookup607: pallet_project_token::errors::Error<T>
+     * Lookup605: pallet_project_token::errors::Error<T>
      **/
     PalletProjectTokenErrorsError: {
-        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
+        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'TransferDestinationMemberDoesNotExist', 'MerkleProofVerificationFailure', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TooManyTransferOutputs', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'CannotInitSaleIfAmmIsActive', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount', 'NotInAmmState', 'InvalidCurveParameters', 'DeadlineExpired', 'SlippageToleranceExceeded', 'InsufficientTokenBalance', 'OutstandingAmmProvidedSupplyTooLarge', 'CurveSlopeParametersTooLow', 'TargetPatronageRateIsHigherThanCurrentRate', 'YearlyPatronageRateLimitExceeded']
     },
     /**
-     * Lookup608: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     * Lookup606: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
      **/
     PalletProposalsEngineProposal: {
         parameters: 'PalletProposalsEngineProposalParameters',
@@ -4475,7 +4470,7 @@ export default {
         stakingAccountId: 'Option<AccountId32>'
     },
     /**
-     * Lookup609: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     * Lookup607: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
      **/
     PalletProposalsEngineProposalParameters: {
         votingPeriod: 'u32',
@@ -4488,7 +4483,7 @@ export default {
         constitutionality: 'u32'
     },
     /**
-     * Lookup610: pallet_proposals_engine::types::VotingResults
+     * Lookup608: pallet_proposals_engine::types::VotingResults
      **/
     PalletProposalsEngineVotingResults: {
         abstentions: 'u32',
@@ -4497,13 +4492,13 @@ export default {
         slashes: 'u32'
     },
     /**
-     * Lookup613: pallet_proposals_engine::Error<T>
+     * Lookup611: pallet_proposals_engine::Error<T>
      **/
     PalletProposalsEngineError: {
         _enum: ['ArithmeticError', 'EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember', 'MaxDispatchableCallCodeSizeExceeded']
     },
     /**
-     * Lookup614: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup612: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionDiscussionThread: {
         activatedAt: 'u32',
@@ -4511,7 +4506,7 @@ export default {
         mode: 'PalletProposalsDiscussionThreadModeBoundedBTreeSet'
     },
     /**
-     * Lookup616: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup614: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
         _enum: {
@@ -4520,7 +4515,7 @@ export default {
         }
     },
     /**
-     * Lookup617: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup615: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProposalsDiscussionDiscussionPost: {
         authorId: 'u64',
@@ -4528,19 +4523,19 @@ export default {
         lastEdited: 'u32'
     },
     /**
-     * Lookup618: pallet_proposals_discussion::Error<T>
+     * Lookup616: pallet_proposals_discussion::Error<T>
      **/
     PalletProposalsDiscussionError: {
         _enum: ['ArithmeticError', 'ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
     },
     /**
-     * Lookup619: pallet_proposals_codex::Error<T>
+     * Lookup617: pallet_proposals_codex::Error<T>
      **/
     PalletProposalsCodexError: {
-        _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError']
+        _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError', 'MaxYearlyPatronageRateCannotBeZero']
     },
     /**
-     * Lookup620: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+     * Lookup618: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
      **/
     PalletWorkingGroupOpening: {
         openingType: 'PalletWorkingGroupOpeningType',
@@ -4551,7 +4546,7 @@ export default {
         creationStake: 'u128'
     },
     /**
-     * Lookup621: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+     * Lookup619: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
      **/
     PalletWorkingGroupJobApplication: {
         roleAccountId: 'AccountId32',
@@ -4562,7 +4557,7 @@ export default {
         openingId: 'u64'
     },
     /**
-     * Lookup622: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     * Lookup620: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
      **/
     PalletWorkingGroupGroupWorker: {
         memberId: 'u64',
@@ -4576,13 +4571,13 @@ export default {
         createdAt: 'u32'
     },
     /**
-     * Lookup623: pallet_working_group::errors::Error<T, I>
+     * Lookup621: pallet_working_group::errors::Error<T, I>
      **/
     PalletWorkingGroupErrorsError: {
         _enum: ['ArithmeticError', 'StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup633: sp_runtime::MultiSignature
+     * Lookup631: sp_runtime::MultiSignature
      **/
     SpRuntimeMultiSignature: {
         _enum: {
@@ -4592,39 +4587,39 @@ export default {
         }
     },
     /**
-     * Lookup634: sp_core::ecdsa::Signature
+     * Lookup632: sp_core::ecdsa::Signature
      **/
     SpCoreEcdsaSignature: '[u8;65]',
     /**
-     * Lookup637: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     * Lookup635: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
      **/
     FrameSystemExtensionsCheckNonZeroSender: 'Null',
     /**
-     * Lookup638: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     * Lookup636: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
      **/
     FrameSystemExtensionsCheckSpecVersion: 'Null',
     /**
-     * Lookup639: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     * Lookup637: frame_system::extensions::check_tx_version::CheckTxVersion<T>
      **/
     FrameSystemExtensionsCheckTxVersion: 'Null',
     /**
-     * Lookup640: frame_system::extensions::check_genesis::CheckGenesis<T>
+     * Lookup638: frame_system::extensions::check_genesis::CheckGenesis<T>
      **/
     FrameSystemExtensionsCheckGenesis: 'Null',
     /**
-     * Lookup643: frame_system::extensions::check_nonce::CheckNonce<T>
+     * Lookup641: frame_system::extensions::check_nonce::CheckNonce<T>
      **/
     FrameSystemExtensionsCheckNonce: 'Compact<u32>',
     /**
-     * Lookup644: frame_system::extensions::check_weight::CheckWeight<T>
+     * Lookup642: frame_system::extensions::check_weight::CheckWeight<T>
      **/
     FrameSystemExtensionsCheckWeight: 'Null',
     /**
-     * Lookup645: pallet_transaction_payment::ChargeTransactionPayment<T>
+     * Lookup643: pallet_transaction_payment::ChargeTransactionPayment<T>
      **/
     PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
     /**
-     * Lookup646: joystream_node_runtime::Runtime
+     * Lookup644: joystream_node_runtime::Runtime
      **/
     JoystreamNodeRuntimeRuntime: 'Null'
 };
diff --git a/node_modules/@joystream/types/src/augment/augment-api-consts.ts b/node_modules/@joystream/types/src/augment/augment-api-consts.ts
index d0ba2e8..ce72ab2 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-consts.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-consts.ts
@@ -161,6 +161,10 @@ declare module '@polkadot/api-base/types/consts' {
        * Exports const - default global weekly NFT limit.
        **/
       defaultGlobalWeeklyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+      /**
+       * Export const - max cashout allowed limits
+       **/
+      maximumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
       /**
        * Exports const - max number of keys per curator_group.permissions_by_level map instance
        **/
@@ -173,6 +177,10 @@ declare module '@polkadot/api-base/types/consts' {
        * Exports const - max number of curators per group
        **/
       maxNumberOfCuratorsPerGroup: u32 & AugmentedConst<ApiType>;
+      /**
+       * Export const - min cashout allowed limits
+       **/
+      minimumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
     };
     contentWorkingGroup: {
       /**
@@ -644,6 +652,10 @@ declare module '@polkadot/api-base/types/consts' {
       terminateWorkingGroupLeadProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
       updateChannelPayoutsProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
       updateGlobalNftLimitProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Max yearly patronage rate update proposal
+       **/
+      updateMaxYearlyPatronageRate: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
       /**
        * Exports 'Update Working Group Budget' proposal parameters.
        **/
diff --git a/node_modules/@joystream/types/src/augment/augment-api-errors.ts b/node_modules/@joystream/types/src/augment/augment-api-errors.ts
index 465e8ae..f5734c7 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-errors.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-errors.ts
@@ -513,6 +513,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Invalid extrinsic call: Channel state bloat bond changed.
        **/
       ChannelStateBloatBondChanged: AugmentedError<ApiType>;
+      /**
+       * Channel Transfers are blocked during active AMM
+       **/
+      ChannelTransfersBlockedDuringActiveAmm: AugmentedError<ApiType>;
       /**
        * Channel Transfers are blocked during revenue splits
        **/
@@ -1611,6 +1615,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Handle must be provided during registration.
        **/
       HandleMustBeProvidedDuringRegistration: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover payment.
+       **/
+      InsufficientBalanceToCoverPayment: AugmentedError<ApiType>;
       /**
        * Insufficient balance to cover stake.
        **/
@@ -2276,6 +2284,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Cannot Deissue Token with outstanding accounts
        **/
       CannotDeissueTokenWithOutstandingAccounts: AugmentedError<ApiType>;
+      /**
+       * No Sale if Amm is active
+       **/
+      CannotInitSaleIfAmmIsActive: AugmentedError<ApiType>;
       /**
        * Attempt to issue in a split with zero allocation amount
        **/
@@ -2292,6 +2304,14 @@ declare module '@polkadot/api-base/types/errors' {
        * Attempt to participate in a split with zero token to stake
        **/
       CannotParticipateInSplitWithZeroAmount: AugmentedError<ApiType>;
+      /**
+       * Curve slope parameters below minimum allowed
+       **/
+      CurveSlopeParametersTooLow: AugmentedError<ApiType>;
+      /**
+       * Deadline constraint not satisfied
+       **/
+      DeadlineExpired: AugmentedError<ApiType>;
       /**
        * At least one of the members provided as part of InitialAllocation does not exist
        **/
@@ -2308,10 +2328,18 @@ declare module '@polkadot/api-base/types/errors' {
        * Insufficient JOY Balance to cover the transaction costs
        **/
       InsufficientJoyBalance: AugmentedError<ApiType>;
+      /**
+       * Creator token balance is insufficient
+       **/
+      InsufficientTokenBalance: AugmentedError<ApiType>;
       /**
        * Account's transferrable balance is insufficient to perform the transfer or initialize token sale
        **/
       InsufficientTransferrableBalance: AugmentedError<ApiType>;
+      /**
+       * Invalid bonding curve construction parameters
+       **/
+      InvalidCurveParameters: AugmentedError<ApiType>;
       /**
        * The amount of JOY to be transferred is not enough to keep the destination account alive
        **/
@@ -2333,6 +2361,11 @@ declare module '@polkadot/api-base/types/errors' {
        * Amount of tokens to purchase on sale exceeds the quantity of tokens still available on the sale
        **/
       NotEnoughTokensOnSale: AugmentedError<ApiType>;
+      /**
+       * ------ AMM ---------------------------------------------------------
+       * not in AMM state
+       **/
+      NotInAmmState: AugmentedError<ApiType>;
       /**
        * There are no remaining tokes to recover from the previous token sale.
        **/
@@ -2341,6 +2374,10 @@ declare module '@polkadot/api-base/types/errors' {
        * The token has no upcoming sale
        **/
       NoUpcomingSale: AugmentedError<ApiType>;
+      /**
+       * Oustanding AMM-provided supply constitutes too large percentage of the token's total supply
+       **/
+      OutstandingAmmProvidedSupplyTooLarge: AugmentedError<ApiType>;
       /**
        * Previous sale was still not finalized, finalize it first.
        **/
@@ -2416,6 +2453,11 @@ declare module '@polkadot/api-base/types/errors' {
        **/
       SaleUpperBoundQuantityIsZero: AugmentedError<ApiType>;
       /**
+       * Slippage tolerance constraint tolerance not satisfied
+       **/
+      SlippageToleranceExceeded: AugmentedError<ApiType>;
+      /**
+       * -------- Patronage --------------------------------------------------
        * Target Rate is higher than current patronage rate
        **/
       TargetPatronageRateIsHigherThanCurrentRate: AugmentedError<ApiType>;
@@ -2434,6 +2476,10 @@ declare module '@polkadot/api-base/types/errors' {
       /**
        * Transfer destination member id invalid
        **/
+      TooManyTransferOutputs: AugmentedError<ApiType>;
+      /**
+       * At least one of the transfer destinations is not an existing member id
+       **/
       TransferDestinationMemberDoesNotExist: AugmentedError<ApiType>;
       /**
        * User already participating in the revenue split
@@ -2443,6 +2489,10 @@ declare module '@polkadot/api-base/types/errors' {
        * User is not participating in any split
        **/
       UserNotParticipantingInAnySplit: AugmentedError<ApiType>;
+      /**
+       * Provided value for patronage is too big (yearly format)
+       **/
+      YearlyPatronageRateLimitExceeded: AugmentedError<ApiType>;
     };
     proposalsCodex: {
       /**
@@ -2533,6 +2583,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Invalid working group budget capacity parameter
        **/
       InvalidWorkingGroupBudgetCapacity: AugmentedError<ApiType>;
+      /**
+       * Max yearly patronage rate cannot be zero
+       **/
+      MaxYearlyPatronageRateCannotBeZero: AugmentedError<ApiType>;
       /**
        * Require root origin in extrinsics
        **/
@@ -2688,6 +2742,10 @@ declare module '@polkadot/api-base/types/errors' {
       ZeroExactExecutionBlock: AugmentedError<ApiType>;
     };
     referendum: {
+      /**
+       * A vote cannot be cast from an account that already opted out of voting.
+       **/
+      AccountAlreadyOptedOutOfVoting: AugmentedError<ApiType>;
       /**
        * Trying to vote multiple time in the same cycle
        **/
@@ -3263,12 +3321,6 @@ declare module '@polkadot/api-base/types/errors' {
        **/
       ZeroTokensFunding: AugmentedError<ApiType>;
     };
-    sudo: {
-      /**
-       * Sender must be the Sudo account
-       **/
-      RequireSudo: AugmentedError<ApiType>;
-    };
     system: {
       /**
        * The origin filter prevent the call to be dispatched.
diff --git a/node_modules/@joystream/types/src/augment/augment-api-events.ts b/node_modules/@joystream/types/src/augment/augment-api-events.ts
index bdddefb..8228b40 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-events.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-events.ts
@@ -4,8 +4,8 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
 import type { BTreeMap, BTreeSet, Bytes, Null, Option, Result, U8aFixed, Vec, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
 import type { ITuple } from '@polkadot/types-codec/types';
-import type { AccountId32, H256, Perquintill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
+import type { AccountId32, H256, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmCurve, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenTransfers, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
 
 declare module '@polkadot/api-base/types/events' {
   export interface AugmentedEvents<ApiType extends ApiTypes> {
@@ -460,16 +460,16 @@ declare module '@polkadot/api-base/types/events' {
        **/
       ChannelOwnerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
       ChannelPausedFeaturesUpdatedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
-      ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>]>;
+      ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
       ChannelPrivilegeLevelUpdated: AugmentedEvent<ApiType, [u64, u8]>;
       ChannelRewardClaimedAndWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
-      ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u64]>;
+      ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u128, u64]>;
       ChannelStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
       ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
       ChannelUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
       ChannelVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
-      CouncilRewardClaimed: AugmentedEvent<ApiType, [u64, u128]>;
       CreatorTokenIssued: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64]>;
+      CreatorTokenIssuerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
       CuratorAdded: AugmentedEvent<ApiType, [u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
       CuratorGroupCreated: AugmentedEvent<ApiType, [u64]>;
       CuratorGroupPermissionsUpdated: AugmentedEvent<ApiType, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
@@ -1297,9 +1297,9 @@ declare module '@polkadot/api-base/types/events' {
       LeaderInvitationQuotaUpdated: AugmentedEvent<ApiType, [u32]>;
       MemberAccountsUpdated: AugmentedEvent<ApiType, [u64, Option<AccountId32>, Option<AccountId32>]>;
       MemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateMemberParameters, u32]>;
-      MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters]>;
+      MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters, u128]>;
       MemberProfileUpdated: AugmentedEvent<ApiType, [u64, Option<Bytes>, Option<Bytes>]>;
-      MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
       MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters, u32]>;
       MembershipGifted: AugmentedEvent<ApiType, [u64, PalletMembershipGiftMembershipParameters]>;
       MembershipPriceUpdated: AugmentedEvent<ApiType, [u128]>;
@@ -2069,6 +2069,28 @@ declare module '@polkadot/api-base/types/events' {
        * - ongoing policy
        **/
       AccountDustedBy: AugmentedEvent<ApiType, [u64, u64, AccountId32, PalletProjectTokenTransferPolicy]>;
+      /**
+       * AMM activated
+       * Params:
+       * - token id
+       * - member id
+       * - params for the bonding curve
+       **/
+      AmmActivated: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenAmmCurve]>;
+      /**
+       * AMM deactivated
+       * Params:
+       * - token id
+       * - member id
+       * - amm treasury amount burned upon deactivation
+       **/
+      AmmDeactivated: AugmentedEvent<ApiType, [u64, u64, u128]>;
+      /**
+       * Max patronage yearly rate updated
+       * Params:
+       * - new rate
+       **/
+      MaxYearlyPatronageRateUpdated: AugmentedEvent<ApiType, [Permill]>;
       /**
        * Member joined whitelist
        * Params:
@@ -2091,7 +2113,7 @@ declare module '@polkadot/api-base/types/events' {
        * - token identifier
        * - new patronage rate
        **/
-      PatronageRateDecreasedTo: AugmentedEvent<ApiType, [u64, Perquintill]>;
+      PatronageRateDecreasedTo: AugmentedEvent<ApiType, [u64, Permill]>;
       /**
        * Revenue Split finalized
        * Params:
@@ -2125,7 +2147,7 @@ declare module '@polkadot/api-base/types/events' {
        * - map containing validated outputs (amount indexed by (member_id + account existance))
        * - transfer's metadata
        **/
-      TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
+      TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransfers, Bytes]>;
       /**
        * Token amount transferred by issuer
        * Params:
@@ -2136,7 +2158,7 @@ declare module '@polkadot/api-base/types/events' {
        * (account_id + account existance)
        * - transfer's metadata
        **/
-      TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
+      TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransfers, Bytes]>;
       /**
        * Token Deissued
        * Params:
@@ -2168,6 +2190,15 @@ declare module '@polkadot/api-base/types/events' {
        * - token sale metadata
        **/
       TokenSaleInitialized: AugmentedEvent<ApiType, [u64, u32, PalletProjectTokenTokenSale, Option<Bytes>]>;
+      /**
+       * Tokens Bought on AMM
+       * Params:
+       * - token id
+       * - member id
+       * - amount of CRT minted
+       * - amount of JOY deposited into curve treasury
+       **/
+      TokensBoughtOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
       /**
        * Tokens Burned
        * Params:
@@ -2185,6 +2216,15 @@ declare module '@polkadot/api-base/types/events' {
        * - buyer's member id
        **/
       TokensPurchasedOnSale: AugmentedEvent<ApiType, [u64, u32, u128, u64]>;
+      /**
+       * Tokens Sold on AMM
+       * Params:
+       * - token id
+       * - member id
+       * - amount of CRT burned
+       * - amount of JOY withdrawn from curve treasury
+       **/
+      TokensSoldOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
       /**
        * Transfer Policy Changed To Permissionless
        * Params:
@@ -2291,6 +2331,10 @@ declare module '@polkadot/api-base/types/events' {
       Voted: AugmentedEvent<ApiType, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
     };
     referendum: {
+      /**
+       * Account permanently opted out of voting in referendum.
+       **/
+      AccountOptedOutOfVoting: AugmentedEvent<ApiType, [AccountId32]>;
       /**
        * Referendum ended and winning option was selected
        **/
@@ -2873,20 +2917,6 @@ declare module '@polkadot/api-base/types/events' {
        **/
       WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
     };
-    sudo: {
-      /**
-       * The \[sudoer\] just switched identity; the old key is supplied if one existed.
-       **/
-      KeyChanged: AugmentedEvent<ApiType, [oldSudoer: Option<AccountId32>], { oldSudoer: Option<AccountId32> }>;
-      /**
-       * A sudo just took place. \[result\]
-       **/
-      Sudid: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], { sudoResult: Result<Null, SpRuntimeDispatchError> }>;
-      /**
-       * A sudo just took place. \[result\]
-       **/
-      SudoAsDone: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], { sudoResult: Result<Null, SpRuntimeDispatchError> }>;
-    };
     system: {
       /**
        * `:code` was updated.
diff --git a/node_modules/@joystream/types/src/augment/augment-api-query.ts b/node_modules/@joystream/types/src/augment/augment-api-query.ts
index e4b6b80..462ee53 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-query.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-query.ts
@@ -947,10 +947,30 @@ declare module '@polkadot/api-base/types/storage' {
        * Double map TokenId x MemberId => AccountData for managing account data
        **/
       accountInfoByTokenAndMember: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProjectTokenAccountData>, [u64, u64]>;
+      /**
+       * AMM buy transaction fee percentage
+       **/
+      ammBuyTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * Percentage threshold for deactivating the amm functionality
+       **/
+      ammDeactivationThreshold: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * AMM sell transaction fee percentage
+       **/
+      ammSellTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
       /**
        * Bloat Bond value used during account creation
        **/
       bloatBond: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Max patronage rate allowed
+       **/
+      maxYearlyPatronageRate: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * Minimum slope parameters allowed for AMM curve
+       **/
+      minAmmSlopeParameter: AugmentedQuery<ApiType, () => Observable<u128>, []>;
       /**
        * Minimum revenue split duration constraint
        **/
@@ -1035,6 +1055,10 @@ declare module '@polkadot/api-base/types/storage' {
       randomMaterial: AugmentedQuery<ApiType, () => Observable<Vec<H256>>, []>;
     };
     referendum: {
+      /**
+       * Accounts that permanently opted out of voting in referendum.
+       **/
+      accountsOptedOut: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Null>, [AccountId32]>;
       /**
        * Current referendum stage.
        **/
@@ -1447,12 +1471,6 @@ declare module '@polkadot/api-base/types/storage' {
        **/
       workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
     };
-    sudo: {
-      /**
-       * The `AccountId` of the sudo key.
-       **/
-      key: AugmentedQuery<ApiType, () => Observable<Option<AccountId32>>, []>;
-    };
     system: {
       /**
        * The full account information for a particular account ID.
diff --git a/node_modules/@joystream/types/src/augment/augment-api-tx.ts b/node_modules/@joystream/types/src/augment/augment-api-tx.ts
index d9b72b5..186547f 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-tx.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-tx.ts
@@ -5,7 +5,7 @@ import type { ApiTypes } from '@polkadot/api-base/types';
 import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, IMethod, ITuple } from '@polkadot/types-codec/types';
 import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
+import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmParams, PalletProjectTokenMerkleProof, PalletProjectTokenPaymentWithVesting, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
 
 declare module '@polkadot/api-base/types/submittable' {
   export interface AugmentedSubmittables<ApiType extends ApiTypes> {
@@ -632,6 +632,10 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       acceptIncomingOffer: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, witnessPrice: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Activate Amm functionality for token
+       **/
+      activateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenAmmParams | { slope?: any; intercept?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenAmmParams]>;
       /**
        * Add curator to curator group under given `curator_group_id`
        * 
@@ -831,6 +835,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       createVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoCreationParametersRecord | { assets?: any; meta?: any; autoIssueNft?: any; expectedVideoStateBloatBond?: any; expectedDataObjectStateBloatBond?: any; storageBucketsNumWitness?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoCreationParametersRecord]>;
+      creatorTokenIssuerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
       /**
        * Perform transfer of tokens as creator token issuer
        * 
@@ -844,7 +849,11 @@ declare module '@polkadot/api-base/types/submittable' {
        * - `O(A)` - from the the generated weights
        * # </weight>
        **/
-      creatorTokenIssuerTransfer: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPaymentWithVesting, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTransfersPaymentWithVesting, Bytes]>;
+      creatorTokenIssuerTransfer: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>> | ([u64 | AnyNumber | Uint8Array, PalletProjectTokenPaymentWithVesting | { amount?: any; vestingSchedule?: any } | string | Uint8Array])[], metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>>, Bytes]>;
+      /**
+       * Deactivate Amm functionality for token
+       **/
+      deactivateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
       /**
        * Deissue channel's creator token
        * 
@@ -1289,7 +1298,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * - O(1)
        * # </weight>
        **/
-      updateChannelPayouts: AugmentedSubmittable<(params: PalletContentUpdateChannelPayoutsParametersRecord | { commitment?: any; payload?: any; minCashoutAllowed?: any; maxCashoutAllowed?: any; channelCashoutsEnabled?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord]>;
+      updateChannelPayouts: AugmentedSubmittable<(params: PalletContentUpdateChannelPayoutsParametersRecord | { commitment?: any; payload?: any; minCashoutAllowed?: any; maxCashoutAllowed?: any; channelCashoutsEnabled?: any } | string | Uint8Array, uploaderAccount: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord, AccountId32]>;
       /**
        * Extrinsic for updating channel privilege level (requires lead access)
        * 
@@ -2748,7 +2757,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * - O(1) doesn't depend on the state or parameters
        * # </weight>
        **/
-      memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+      memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array, payment: Option<ITuple<[AccountId32, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
       /**
        * Remove staking account for a member.
        * 
@@ -4041,6 +4050,21 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       burn: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * Mint desired `token_id` amount into user account via JOY exchnage
+       * Preconditions
+       * - origin, member_id pair must be a valid authentication pair
+       * - token_id must exist
+       * - user usable JOY balance must be enough for buying (+ existential deposit)
+       * - slippage tolerance constraints respected if provided
+       * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+       * 
+       * Postconditions
+       * - `amount` CRT minted into account (which is created if necessary with existential deposit transferred to it)
+       * - respective JOY amount transferred from user balance to amm treasury account
+       * - event deposited
+       **/
+      buyOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
       /**
        * Allow any user to remove an account
        * 
@@ -4199,6 +4223,24 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       purchaseTokensOnSale: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * Burn desired `token_id` amount from user account and get JOY from treasury account
+       * Preconditions
+       * - origin, member_id pair must be a valid authentication pair
+       * - token_id must exist
+       * - token_id, member_id must be valid account coordinates
+       * - user usable CRT balance must be at least `amount`
+       * - slippage tolerance constraints respected if provided
+       * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+       * - amm treasury account must have sufficient JOYs for the operation
+       * 
+       * Postconditions
+       * - `amount` burned from user account
+       * - total supply decreased by amount
+       * - respective JOY amount transferred from amm treasury account to user account
+       * - event deposited
+       **/
+      sellOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
       /**
        * Allow to transfer from `src_member_id` account to the various `outputs` beneficiaries
        * in the specified amounts.
@@ -4227,7 +4269,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * - `O(T)` - from the the generated weights
        * # </weight>
        **/
-      transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPayment, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProjectTokenTransfersPayment, Bytes]>;
+      transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: Vec<ITuple<[u64, u128]>> | ([u64 | AnyNumber | Uint8Array, u128 | AnyNumber | Uint8Array])[], metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Vec<ITuple<[u64, u128]>>, Bytes]>;
+      updateMaxYearlyPatronageRate: AugmentedSubmittable<(rate: Permill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Permill]>;
     };
     proposalsCodex: {
       /**
@@ -4245,7 +4288,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * - O(1) doesn't depend on the state or parameters
        * # </weight>
        **/
-      createProposal: AugmentedSubmittable<(generalProposalParameters: PalletProposalsCodexGeneralProposalParams | { memberId?: any; title?: any; description?: any; stakingAccountId?: any; exactExecutionBlock?: any } | string | Uint8Array, proposalDetails: PalletProposalsCodexProposalDetails | { Signal: any } | { RuntimeUpgrade: any } | { FundingRequest: any } | { SetMaxValidatorCount: any } | { CreateWorkingGroupLeadOpening: any } | { FillWorkingGroupLeadOpening: any } | { UpdateWorkingGroupBudget: any } | { DecreaseWorkingGroupLeadStake: any } | { SlashWorkingGroupLead: any } | { SetWorkingGroupLeadReward: any } | { TerminateWorkingGroupLead: any } | { AmendConstitution: any } | { CancelWorkingGroupLeadOpening: any } | { SetMembershipPrice: any } | { SetCouncilBudgetIncrement: any } | { SetCouncilorReward: any } | { SetInitialInvitationBalance: any } | { SetInitialInvitationCount: any } | { SetMembershipLeadInvitationQuota: any } | { SetReferralCut: any } | { VetoProposal: any } | { UpdateGlobalNftLimit: any } | { UpdateChannelPayouts: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails]>;
+      createProposal: AugmentedSubmittable<(generalProposalParameters: PalletProposalsCodexGeneralProposalParams | { memberId?: any; title?: any; description?: any; stakingAccountId?: any; exactExecutionBlock?: any } | string | Uint8Array, proposalDetails: PalletProposalsCodexProposalDetails | { Signal: any } | { RuntimeUpgrade: any } | { FundingRequest: any } | { SetMaxValidatorCount: any } | { CreateWorkingGroupLeadOpening: any } | { FillWorkingGroupLeadOpening: any } | { UpdateWorkingGroupBudget: any } | { DecreaseWorkingGroupLeadStake: any } | { SlashWorkingGroupLead: any } | { SetWorkingGroupLeadReward: any } | { TerminateWorkingGroupLead: any } | { AmendConstitution: any } | { CancelWorkingGroupLeadOpening: any } | { SetMembershipPrice: any } | { SetCouncilBudgetIncrement: any } | { SetCouncilorReward: any } | { SetInitialInvitationBalance: any } | { SetInitialInvitationCount: any } | { SetMembershipLeadInvitationQuota: any } | { SetReferralCut: any } | { VetoProposal: any } | { UpdateGlobalNftLimit: any } | { UpdateChannelPayouts: any } | { UpdateMaxYearlyPatronageRate: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails]>;
     };
     proposalsDiscussion: {
       /**
@@ -4354,6 +4397,18 @@ declare module '@polkadot/api-base/types/submittable' {
       vote: AugmentedSubmittable<(voterId: u64 | AnyNumber | Uint8Array, proposalId: u32 | AnyNumber | Uint8Array, vote: PalletProposalsEngineVoteKind | 'Approve' | 'Reject' | 'Slash' | 'Abstain' | number | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
     };
     referendum: {
+      /**
+       * Permanently opt out of voting from a given account.
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      optOutOfVoting: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
       /**
        * Release a locked stake.
        * # <weight>
@@ -5058,7 +5113,8 @@ declare module '@polkadot/api-base/types/submittable' {
        **/
       setStorageOperatorMetadata: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
       /**
-       * Create a dynamic bag. Development mode.
+       * Deposit a StorageOperatorRemarked event
+       * containing a generic message.
        * <weight>
        * 
        * ## Weight
@@ -5069,10 +5125,6 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       storageOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
-      /**
-       * Upload new data objects. Development mode.
-       **/
-      sudoUploadDataObjects: AugmentedSubmittable<(params: PalletStorageUploadParametersRecord | { bagId?: any; objectCreationList?: any; stateBloatBondSourceAccountId?: any; expectedDataSizeFee?: any; expectedDataObjectStateBloatBond?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageUploadParametersRecord]>;
       /**
        * Add and remove hashes to the current blacklist.
        * <weight>
@@ -5485,61 +5537,6 @@ declare module '@polkadot/api-base/types/submittable' {
        **/
       workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
     };
-    sudo: {
-      /**
-       * Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
-       * key.
-       * 
-       * The dispatch origin for this call must be _Signed_.
-       * 
-       * # <weight>
-       * - O(1).
-       * - Limited storage reads.
-       * - One DB change.
-       * # </weight>
-       **/
-      setKey: AugmentedSubmittable<(updated: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
-      /**
-       * Authenticates the sudo key and dispatches a function call with `Root` origin.
-       * 
-       * The dispatch origin for this call must be _Signed_.
-       * 
-       * # <weight>
-       * - O(1).
-       * - Limited storage reads.
-       * - One DB write (event).
-       * - Weight of derivative `call` execution + 10,000.
-       * # </weight>
-       **/
-      sudo: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call]>;
-      /**
-       * Authenticates the sudo key and dispatches a function call with `Signed` origin from
-       * a given account.
-       * 
-       * The dispatch origin for this call must be _Signed_.
-       * 
-       * # <weight>
-       * - O(1).
-       * - Limited storage reads.
-       * - One DB write (event).
-       * - Weight of derivative `call` execution + 10,000.
-       * # </weight>
-       **/
-      sudoAs: AugmentedSubmittable<(who: AccountId32 | string | Uint8Array, call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Call]>;
-      /**
-       * Authenticates the sudo key and dispatches a function call with `Root` origin.
-       * This function does not check the weight of the call, and instead allows the
-       * Sudo user to specify the weight of the call.
-       * 
-       * The dispatch origin for this call must be _Signed_.
-       * 
-       * # <weight>
-       * - O(1).
-       * - The weight of this call is defined by the caller.
-       * # </weight>
-       **/
-      sudoUncheckedWeight: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array, weight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call, u64]>;
-    };
     system: {
       /**
        * A dispatch that will fill the block weight up to the given ratio.
diff --git a/node_modules/@joystream/types/src/augment/lookup.ts b/node_modules/@joystream/types/src/augment/lookup.ts
index 58896db..4e8b5cf 100644
--- a/node_modules/@joystream/types/src/augment/lookup.ts
+++ b/node_modules/@joystream/types/src/augment/lookup.ts
@@ -368,23 +368,7 @@ export default {
     }
   },
   /**
-   * Lookup57: pallet_sudo::pallet::Event<T>
-   **/
-  PalletSudoEvent: {
-    _enum: {
-      Sudid: {
-        sudoResult: 'Result<Null, SpRuntimeDispatchError>',
-      },
-      KeyChanged: {
-        oldSudoer: 'Option<AccountId32>',
-      },
-      SudoAsDone: {
-        sudoResult: 'Result<Null, SpRuntimeDispatchError>'
-      }
-    }
-  },
-  /**
-   * Lookup59: pallet_bags_list::pallet::Event<T, I>
+   * Lookup57: pallet_bags_list::pallet::Event<T, I>
    **/
   PalletBagsListEvent: {
     _enum: {
@@ -400,7 +384,7 @@ export default {
     }
   },
   /**
-   * Lookup60: pallet_vesting::pallet::Event<T>
+   * Lookup58: pallet_vesting::pallet::Event<T>
    **/
   PalletVestingEvent: {
     _enum: {
@@ -414,7 +398,7 @@ export default {
     }
   },
   /**
-   * Lookup61: pallet_multisig::pallet::Event<T>
+   * Lookup59: pallet_multisig::pallet::Event<T>
    **/
   PalletMultisigEvent: {
     _enum: {
@@ -445,14 +429,14 @@ export default {
     }
   },
   /**
-   * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+   * Lookup60: pallet_multisig::Timepoint<BlockNumber>
    **/
   PalletMultisigTimepoint: {
     height: 'u32',
     index: 'u32'
   },
   /**
-   * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+   * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
    **/
   PalletCouncilRawEvent: {
     _enum: {
@@ -478,7 +462,7 @@ export default {
     }
   },
   /**
-   * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+   * Lookup63: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
    **/
   PalletReferendumRawEvent: {
     _enum: {
@@ -488,26 +472,27 @@ export default {
       ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
       VoteCast: '(AccountId32,H256,u128)',
       VoteRevealed: '(AccountId32,u64,Bytes)',
-      StakeReleased: 'AccountId32'
+      StakeReleased: 'AccountId32',
+      AccountOptedOutOfVoting: 'AccountId32'
     }
   },
   /**
-   * Lookup66: pallet_referendum::Instance1
+   * Lookup64: pallet_referendum::Instance1
    **/
   PalletReferendumInstance1: 'Null',
   /**
-   * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
+   * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
    **/
   PalletReferendumOptionResult: {
     optionId: 'u64',
     votePower: 'u128'
   },
   /**
-   * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+   * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletMembershipRawEvent: {
     _enum: {
-      MemberInvited: '(u64,PalletMembershipInviteMembershipParameters)',
+      MemberInvited: '(u64,PalletMembershipInviteMembershipParameters,u128)',
       MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
       MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
       MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
@@ -522,12 +507,12 @@ export default {
       StakingAccountAdded: '(AccountId32,u64)',
       StakingAccountRemoved: '(AccountId32,u64)',
       StakingAccountConfirmed: '(AccountId32,u64)',
-      MemberRemarked: '(u64,Bytes)',
+      MemberRemarked: '(u64,Bytes,Option<(AccountId32,u128)>)',
       MemberCreated: '(u64,PalletMembershipCreateMemberParameters,u32)'
     }
   },
   /**
-   * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+   * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
    **/
   PalletMembershipBuyMembershipParameters: {
     rootAccount: 'AccountId32',
@@ -537,7 +522,7 @@ export default {
     referrerId: 'Option<u64>'
   },
   /**
-   * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+   * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
    **/
   PalletMembershipInviteMembershipParameters: {
     invitingMemberId: 'u64',
@@ -547,7 +532,7 @@ export default {
     metadata: 'Bytes'
   },
   /**
-   * Lookup74: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+   * Lookup72: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
    **/
   PalletMembershipCreateMemberParameters: {
     rootAccount: 'AccountId32',
@@ -557,7 +542,7 @@ export default {
     isFoundingMember: 'bool'
   },
   /**
-   * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+   * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
    **/
   PalletMembershipGiftMembershipParameters: {
     rootAccount: 'AccountId32',
@@ -570,7 +555,7 @@ export default {
     applyRootAccountInvitationLock: 'Option<u128>'
   },
   /**
-   * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+   * Lookup78: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
    **/
   PalletForumRawEvent: {
     _enum: {
@@ -594,7 +579,7 @@ export default {
     }
   },
   /**
-   * Lookup78: pallet_forum::PrivilegedActor<T>
+   * Lookup79: pallet_forum::PrivilegedActor<T>
    **/
   PalletForumPrivilegedActor: {
     _enum: {
@@ -603,7 +588,7 @@ export default {
     }
   },
   /**
-   * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+   * Lookup80: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
    **/
   PalletForumExtendedPostIdObject: {
     categoryId: 'u64',
@@ -611,7 +596,7 @@ export default {
     postId: 'u64'
   },
   /**
-   * Lookup84: pallet_constitution::RawEvent<primitive_types::H256>
+   * Lookup85: pallet_constitution::RawEvent<primitive_types::H256>
    **/
   PalletConstitutionRawEvent: {
     _enum: {
@@ -619,7 +604,7 @@ export default {
     }
   },
   /**
-   * Lookup85: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+   * Lookup86: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
    **/
   PalletBountyRawEvent: {
     _enum: {
@@ -649,7 +634,7 @@ export default {
     }
   },
   /**
-   * Lookup86: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+   * Lookup87: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
    **/
   PalletBountyBountyParametersBTreeSet: {
     oracle: 'PalletBountyBountyActor',
@@ -661,7 +646,7 @@ export default {
     fundingType: 'PalletBountyFundingType'
   },
   /**
-   * Lookup87: pallet_bounty::BountyActor<MemberId>
+   * Lookup88: pallet_bounty::BountyActor<MemberId>
    **/
   PalletBountyBountyActor: {
     _enum: {
@@ -670,7 +655,7 @@ export default {
     }
   },
   /**
-   * Lookup88: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+   * Lookup89: pallet_bounty::AssuranceContractType<BTreeSet<T>>
    **/
   PalletBountyAssuranceContractTypeBTreeSet: {
     _enum: {
@@ -679,7 +664,7 @@ export default {
     }
   },
   /**
-   * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+   * Lookup90: pallet_bounty::FundingType<BlockNumber, Balance>
    **/
   PalletBountyFundingType: {
     _enum: {
@@ -693,7 +678,7 @@ export default {
     }
   },
   /**
-   * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+   * Lookup92: pallet_bounty::OracleWorkEntryJudgment<Balance>
    **/
   PalletBountyOracleWorkEntryJudgment: {
     _enum: {
@@ -707,7 +692,7 @@ export default {
     }
   },
   /**
-   * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+   * Lookup95: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
    **/
   PalletUtilityRawEvent: {
     _enum: {
@@ -718,19 +703,19 @@ export default {
     }
   },
   /**
-   * Lookup95: pallet_common::working_group::iterable_enums::WorkingGroup
+   * Lookup96: pallet_common::working_group::iterable_enums::WorkingGroup
    **/
   PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
     _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'App', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
   },
   /**
-   * Lookup96: pallet_common::BalanceKind
+   * Lookup97: pallet_common::BalanceKind
    **/
   PalletCommonBalanceKind: {
     _enum: ['Positive', 'Negative']
   },
   /**
-   * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+   * Lookup98: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
    **/
   PalletContentRawEvent: {
     _enum: {
@@ -758,9 +743,8 @@ export default {
       VideoDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
       VideoVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
       VideoAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,bool,Bytes)',
-      ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>)',
-      ChannelRewardUpdated: '(u128,u64)',
-      CouncilRewardClaimed: '(u64,u128)',
+      ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>,AccountId32)',
+      ChannelRewardUpdated: '(u128,u128,u64)',
       EnglishAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesEnglishAuctionParamsRecord)',
       OpenAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesOpenAuctionParamsRecord,u64)',
       NftIssued: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesNftIssuanceParametersRecord)',
@@ -788,11 +772,12 @@ export default {
       GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
       ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
       ToggledNftLimits: 'bool',
-      CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)'
+      CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)',
+      CreatorTokenIssuerRemarked: '(u64,Bytes)'
     }
   },
   /**
-   * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+   * Lookup99: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
    **/
   PalletContentPermissionsContentActor: {
     _enum: {
@@ -802,7 +787,7 @@ export default {
     }
   },
   /**
-   * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup100: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletContentChannelRecord: {
     owner: 'PalletContentChannelOwner',
@@ -821,26 +806,26 @@ export default {
     channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
   },
   /**
-   * Lookup103: pallet_content::types::iterable_enums::ChannelActionPermission
+   * Lookup104: pallet_content::types::iterable_enums::ChannelActionPermission
    **/
   PalletContentIterableEnumsChannelActionPermission: {
-    _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
+    _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken', 'AmmControl', 'CreatorTokenRemarks']
   },
   /**
-   * Lookup110: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+   * Lookup111: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
    **/
   PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
     _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
   },
   /**
-   * Lookup113: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+   * Lookup114: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
    **/
   PalletCommonBloatBondRepayableBloatBond: {
     repaymentRestrictedTo: 'Option<AccountId32>',
     amount: 'u128'
   },
   /**
-   * Lookup114: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+   * Lookup115: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
    **/
   PalletContentChannelOwner: {
     _enum: {
@@ -849,7 +834,7 @@ export default {
     }
   },
   /**
-   * Lookup115: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+   * Lookup116: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
    **/
   PalletContentChannelTransferStatus: {
     _enum: {
@@ -858,14 +843,14 @@ export default {
     }
   },
   /**
-   * Lookup116: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+   * Lookup117: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
    **/
   PalletContentPendingTransfer: {
     newOwner: 'PalletContentChannelOwner',
     transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
   },
   /**
-   * Lookup117: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+   * Lookup118: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
    **/
   PalletContentTransferCommitmentParametersBoundedBTreeMap: {
     newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -873,21 +858,21 @@ export default {
     transferId: 'u64'
   },
   /**
-   * Lookup118: pallet_content::types::LimitPerPeriod<BlockNumber>
+   * Lookup119: pallet_content::types::LimitPerPeriod<BlockNumber>
    **/
   PalletContentLimitPerPeriod: {
     limit: 'u64',
     blockNumberPeriod: 'u32'
   },
   /**
-   * Lookup119: pallet_content::types::NftCounter<BlockNumber>
+   * Lookup120: pallet_content::types::NftCounter<BlockNumber>
    **/
   PalletContentNftCounter: {
     counter: 'u64',
     lastUpdated: 'u32'
   },
   /**
-   * Lookup120: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+   * Lookup121: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
    **/
   PalletContentNftTypesEnglishAuctionParamsRecord: {
     startingPrice: 'u128',
@@ -899,7 +884,7 @@ export default {
     minBidStep: 'u128'
   },
   /**
-   * Lookup122: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+   * Lookup123: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
    **/
   PalletContentNftTypesOpenAuctionParamsRecord: {
     startingPrice: 'u128',
@@ -909,7 +894,7 @@ export default {
     bidLockDuration: 'u32'
   },
   /**
-   * Lookup123: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+   * Lookup124: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
    **/
   PalletContentNftTypesNftIssuanceParametersRecord: {
     royalty: 'Option<Perbill>',
@@ -918,7 +903,7 @@ export default {
     initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
   },
   /**
-   * Lookup124: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+   * Lookup125: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
    **/
   PalletContentNftTypesInitTransactionalStatusRecord: {
     _enum: {
@@ -930,7 +915,7 @@ export default {
     }
   },
   /**
-   * Lookup126: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+   * Lookup127: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
    **/
   PalletContentChannelCreationParametersRecord: {
     assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -942,14 +927,14 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup127: pallet_content::types::StorageAssetsRecord<Balance>
+   * Lookup128: pallet_content::types::StorageAssetsRecord<Balance>
    **/
   PalletContentStorageAssetsRecord: {
     objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
     expectedDataSizeFee: 'u128'
   },
   /**
-   * Lookup129: pallet_storage::DataObjectCreationParameters
+   * Lookup130: pallet_storage::DataObjectCreationParameters
    **/
   PalletStorageDataObjectCreationParameters: {
     _alias: {
@@ -959,14 +944,14 @@ export default {
     ipfsContentId: 'Bytes'
   },
   /**
-   * Lookup130: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+   * Lookup131: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
    **/
   PalletStorageDistributionBucketIdRecord: {
     distributionBucketFamilyId: 'u64',
     distributionBucketIndex: 'u64'
   },
   /**
-   * Lookup137: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+   * Lookup138: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
    **/
   PalletContentChannelUpdateParametersRecord: {
     assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -977,7 +962,7 @@ export default {
     storageBucketsNumWitness: 'Option<u32>'
   },
   /**
-   * Lookup139: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+   * Lookup140: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
    **/
   PalletContentVideoCreationParametersRecord: {
     assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -988,7 +973,7 @@ export default {
     storageBucketsNumWitness: 'u32'
   },
   /**
-   * Lookup141: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+   * Lookup142: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
    **/
   PalletContentVideoUpdateParametersRecord: {
     assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -999,7 +984,7 @@ export default {
     storageBucketsNumWitness: 'Option<u32>'
   },
   /**
-   * Lookup144: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+   * Lookup145: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
    **/
   PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
     _enum: {
@@ -1014,7 +999,7 @@ export default {
     }
   },
   /**
-   * Lookup148: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+   * Lookup149: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
    **/
   PalletContentTransferCommitmentParametersBTreeMap: {
     newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -1022,7 +1007,7 @@ export default {
     transferId: 'u64'
   },
   /**
-   * Lookup149: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+   * Lookup150: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
    **/
   PalletContentUpdateChannelPayoutsParametersRecord: {
     commitment: 'Option<H256>',
@@ -1032,16 +1017,15 @@ export default {
     channelCashoutsEnabled: 'Option<bool>'
   },
   /**
-   * Lookup150: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+   * Lookup151: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
    **/
   PalletContentChannelPayoutsPayloadParametersRecord: {
-    uploaderAccount: 'AccountId32',
     objectCreationParams: 'PalletStorageDataObjectCreationParameters',
     expectedDataSizeFee: 'u128',
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup154: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+   * Lookup155: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
    **/
   PalletContentChannelFundsDestination: {
     _enum: {
@@ -1050,13 +1034,13 @@ export default {
     }
   },
   /**
-   * Lookup155: pallet_content::types::NftLimitPeriod
+   * Lookup156: pallet_content::types::NftLimitPeriod
    **/
   PalletContentNftLimitPeriod: {
     _enum: ['Daily', 'Weekly']
   },
   /**
-   * Lookup156: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+   * Lookup157: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
    **/
   PalletStorageRawEvent: {
     _enum: {
@@ -1105,7 +1089,7 @@ export default {
     }
   },
   /**
-   * Lookup157: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+   * Lookup158: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
    **/
   PalletStorageUploadParametersRecord: {
     bagId: 'PalletStorageBagIdType',
@@ -1115,7 +1099,7 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup158: pallet_storage::BagIdType<MemberId, ChannelId>
+   * Lookup159: pallet_storage::BagIdType<MemberId, ChannelId>
    **/
   PalletStorageBagIdType: {
     _enum: {
@@ -1124,7 +1108,7 @@ export default {
     }
   },
   /**
-   * Lookup159: pallet_storage::StaticBagId
+   * Lookup160: pallet_storage::StaticBagId
    **/
   PalletStorageStaticBagId: {
     _enum: {
@@ -1133,7 +1117,7 @@ export default {
     }
   },
   /**
-   * Lookup160: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+   * Lookup161: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
    **/
   PalletStorageDynamicBagIdType: {
     _enum: {
@@ -1142,7 +1126,7 @@ export default {
     }
   },
   /**
-   * Lookup161: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+   * Lookup162: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
    **/
   PalletStorageDynBagCreationParametersRecord: {
     bagId: 'PalletStorageDynamicBagIdType',
@@ -1154,7 +1138,7 @@ export default {
     distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
   },
   /**
-   * Lookup164: pallet_storage::Voucher
+   * Lookup165: pallet_storage::Voucher
    **/
   PalletStorageVoucher: {
     sizeLimit: 'u64',
@@ -1163,19 +1147,19 @@ export default {
     objectsUsed: 'u64'
   },
   /**
-   * Lookup165: pallet_storage::DynamicBagType
+   * Lookup166: pallet_storage::DynamicBagType
    **/
   PalletStorageDynamicBagType: {
     _enum: ['Member', 'Channel']
   },
   /**
-   * Lookup169: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+   * Lookup170: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
    **/
   PalletProjectTokenEventsRawEvent: {
     _enum: {
-      TokenAmountTransferred: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
-      TokenAmountTransferredByIssuer: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
-      PatronageRateDecreasedTo: '(u64,Perquintill)',
+      TokenAmountTransferred: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+      TokenAmountTransferredByIssuer: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+      PatronageRateDecreasedTo: '(u64,Permill)',
       PatronageCreditClaimed: '(u64,u128,u64)',
       RevenueSplitIssued: '(u64,u32,u32,u128)',
       RevenueSplitFinalized: '(u64,AccountId32,u128)',
@@ -1190,11 +1174,16 @@ export default {
       TokensPurchasedOnSale: '(u64,u32,u128,u64)',
       TokenSaleFinalized: '(u64,u32,u128,u128)',
       TransferPolicyChangedToPermissionless: 'u64',
-      TokensBurned: '(u64,u64,u128)'
+      TokensBurned: '(u64,u64,u128)',
+      AmmActivated: '(u64,u64,PalletProjectTokenAmmCurve)',
+      TokensBoughtOnAmm: '(u64,u64,u128,u128)',
+      TokensSoldOnAmm: '(u64,u64,u128,u128)',
+      AmmDeactivated: '(u64,u64,u128)',
+      MaxYearlyPatronageRateUpdated: 'Permill'
     }
   },
   /**
-   * Lookup170: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+   * Lookup171: pallet_project_token::types::TransferPolicy<primitive_types::H256>
    **/
   PalletProjectTokenTransferPolicy: {
     _enum: {
@@ -1203,7 +1192,7 @@ export default {
     }
   },
   /**
-   * Lookup171: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+   * Lookup172: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
    **/
   PalletProjectTokenTokenIssuanceParameters: {
     initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
@@ -1213,14 +1202,14 @@ export default {
     revenueSplitRate: 'Permill'
   },
   /**
-   * Lookup172: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   * Lookup173: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
    **/
   PalletProjectTokenTokenAllocation: {
     amount: 'u128',
     vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
   },
   /**
-   * Lookup173: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+   * Lookup174: pallet_project_token::types::VestingScheduleParams<BlockNumber>
    **/
   PalletProjectTokenVestingScheduleParams: {
     linearVestingDuration: 'u32',
@@ -1228,7 +1217,7 @@ export default {
     cliffAmountPercentage: 'Permill'
   },
   /**
-   * Lookup176: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+   * Lookup177: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
    **/
   PalletProjectTokenTransferPolicyParams: {
     _enum: {
@@ -1237,14 +1226,14 @@ export default {
     }
   },
   /**
-   * Lookup177: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+   * Lookup178: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
    **/
   PalletProjectTokenWhitelistParams: {
     commitment: 'H256',
     payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
   },
   /**
-   * Lookup178: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+   * Lookup179: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
    **/
   PalletProjectTokenSingleDataObjectUploadParams: {
     objectCreationParams: 'PalletStorageDataObjectCreationParameters',
@@ -1252,7 +1241,11 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup185: pallet_project_token::types::Validated<MemberId>
+   * Lookup185: pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>
+   **/
+  PalletProjectTokenTransfers: 'BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>',
+  /**
+   * Lookup186: pallet_project_token::types::Validated<MemberId>
    **/
   PalletProjectTokenValidated: {
     _enum: {
@@ -1261,21 +1254,21 @@ export default {
     }
   },
   /**
-   * Lookup186: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+   * Lookup187: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
    **/
   PalletProjectTokenValidatedPayment: {
     payment: 'PalletProjectTokenPaymentWithVesting',
     vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
   },
   /**
-   * Lookup187: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   * Lookup188: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
    **/
   PalletProjectTokenPaymentWithVesting: {
     amount: 'u128',
     vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
   },
   /**
-   * Lookup189: pallet_project_token::types::VestingSource
+   * Lookup190: pallet_project_token::types::VestingSource
    **/
   PalletProjectTokenVestingSource: {
     _enum: {
@@ -1285,7 +1278,7 @@ export default {
     }
   },
   /**
-   * Lookup193: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+   * Lookup194: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
    **/
   PalletProjectTokenTokenSale: {
     unitPrice: 'u128',
@@ -1300,7 +1293,15 @@ export default {
     autoFinalize: 'bool'
   },
   /**
-   * Lookup195: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+   * Lookup195: pallet_project_token::types::AmmCurve<Balance>
+   **/
+  PalletProjectTokenAmmCurve: {
+    slope: 'u128',
+    intercept: 'u128',
+    providedSupply: 'u128'
+  },
+  /**
+   * Lookup196: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
    **/
   PalletProposalsEngineRawEvent: {
     _enum: {
@@ -1313,7 +1314,7 @@ export default {
     }
   },
   /**
-   * Lookup196: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+   * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
    **/
   PalletProposalsEngineProposalStatusesProposalStatus: {
     _enum: {
@@ -1323,7 +1324,7 @@ export default {
     }
   },
   /**
-   * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+   * Lookup198: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
    **/
   PalletProposalsEngineProposalStatusesProposalDecision: {
     _enum: {
@@ -1337,13 +1338,13 @@ export default {
     }
   },
   /**
-   * Lookup198: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+   * Lookup199: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
    **/
   PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
     _enum: ['PendingExecution', 'PendingConstitutionality']
   },
   /**
-   * Lookup199: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+   * Lookup200: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
    **/
   PalletProposalsEngineProposalStatusesExecutionStatus: {
     _enum: {
@@ -1354,13 +1355,13 @@ export default {
     }
   },
   /**
-   * Lookup200: pallet_proposals_engine::types::VoteKind
+   * Lookup201: pallet_proposals_engine::types::VoteKind
    **/
   PalletProposalsEngineVoteKind: {
     _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
   },
   /**
-   * Lookup201: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+   * Lookup202: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
    **/
   PalletProposalsDiscussionRawEvent: {
     _enum: {
@@ -1372,7 +1373,7 @@ export default {
     }
   },
   /**
-   * Lookup202: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+   * Lookup203: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
    **/
   PalletProposalsDiscussionThreadModeBTreeSet: {
     _enum: {
@@ -1381,7 +1382,7 @@ export default {
     }
   },
   /**
-   * Lookup203: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+   * Lookup204: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
    **/
   PalletProposalsCodexRawEvent: {
     _enum: {
@@ -1389,7 +1390,7 @@ export default {
     }
   },
   /**
-   * Lookup204: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+   * Lookup205: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
    **/
   PalletProposalsCodexGeneralProposalParams: {
     memberId: 'u64',
@@ -1399,7 +1400,7 @@ export default {
     exactExecutionBlock: 'Option<u32>'
   },
   /**
-   * Lookup205: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+   * Lookup206: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
    **/
   PalletProposalsCodexProposalDetails: {
     _enum: {
@@ -1425,18 +1426,19 @@ export default {
       SetReferralCut: 'u8',
       VetoProposal: 'u32',
       UpdateGlobalNftLimit: '(PalletContentNftLimitPeriod,u64)',
-      UpdateChannelPayouts: 'PalletContentUpdateChannelPayoutsParametersRecord'
+      UpdateChannelPayouts: 'PalletContentUpdateChannelPayoutsParametersRecord',
+      UpdateMaxYearlyPatronageRate: 'Permill'
     }
   },
   /**
-   * Lookup207: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+   * Lookup208: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
    **/
   PalletCommonFundingRequestParameters: {
     account: 'AccountId32',
     amount: 'u128'
   },
   /**
-   * Lookup208: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+   * Lookup209: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
    **/
   PalletProposalsCodexCreateOpeningParameters: {
     description: 'Bytes',
@@ -1445,14 +1447,14 @@ export default {
     group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
   },
   /**
-   * Lookup209: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+   * Lookup210: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
    **/
   PalletWorkingGroupStakePolicy: {
     stakeAmount: 'u128',
     leavingUnstakingPeriod: 'u32'
   },
   /**
-   * Lookup210: pallet_proposals_codex::types::FillOpeningParameters
+   * Lookup211: pallet_proposals_codex::types::FillOpeningParameters
    **/
   PalletProposalsCodexFillOpeningParameters: {
     openingId: 'u64',
@@ -1460,7 +1462,7 @@ export default {
     workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
   },
   /**
-   * Lookup211: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+   * Lookup212: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
    **/
   PalletProposalsCodexTerminateRoleParameters: {
     workerId: 'u64',
@@ -1468,7 +1470,7 @@ export default {
     group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
   },
   /**
-   * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+   * Lookup213: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
    **/
   PalletWorkingGroupRawEventInstance1: {
     _enum: {
@@ -1500,13 +1502,13 @@ export default {
     }
   },
   /**
-   * Lookup216: pallet_working_group::types::OpeningType
+   * Lookup217: pallet_working_group::types::OpeningType
    **/
   PalletWorkingGroupOpeningType: {
     _enum: ['Leader', 'Regular']
   },
   /**
-   * Lookup217: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+   * Lookup218: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
    **/
   PalletWorkingGroupApplyOnOpeningParams: {
     memberId: 'u64',
@@ -1517,24 +1519,24 @@ export default {
     stakeParameters: 'PalletWorkingGroupStakeParameters'
   },
   /**
-   * Lookup218: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+   * Lookup219: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
    **/
   PalletWorkingGroupStakeParameters: {
     stake: 'u128',
     stakingAccountId: 'AccountId32'
   },
   /**
-   * Lookup219: pallet_working_group::Instance1
+   * Lookup220: pallet_working_group::Instance1
    **/
   PalletWorkingGroupInstance1: 'Null',
   /**
-   * Lookup220: pallet_working_group::types::RewardPaymentType
+   * Lookup221: pallet_working_group::types::RewardPaymentType
    **/
   PalletWorkingGroupRewardPaymentType: {
     _enum: ['MissedReward', 'RegularReward']
   },
   /**
-   * Lookup221: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+   * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
    **/
   PalletWorkingGroupRawEventInstance2: {
     _enum: {
@@ -1566,11 +1568,11 @@ export default {
     }
   },
   /**
-   * Lookup222: pallet_working_group::Instance2
+   * Lookup223: pallet_working_group::Instance2
    **/
   PalletWorkingGroupInstance2: 'Null',
   /**
-   * Lookup223: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+   * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
    **/
   PalletWorkingGroupRawEventInstance3: {
     _enum: {
@@ -1602,11 +1604,11 @@ export default {
     }
   },
   /**
-   * Lookup224: pallet_working_group::Instance3
+   * Lookup225: pallet_working_group::Instance3
    **/
   PalletWorkingGroupInstance3: 'Null',
   /**
-   * Lookup225: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+   * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
    **/
   PalletWorkingGroupRawEventInstance4: {
     _enum: {
@@ -1638,11 +1640,11 @@ export default {
     }
   },
   /**
-   * Lookup226: pallet_working_group::Instance4
+   * Lookup227: pallet_working_group::Instance4
    **/
   PalletWorkingGroupInstance4: 'Null',
   /**
-   * Lookup227: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+   * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
    **/
   PalletWorkingGroupRawEventInstance5: {
     _enum: {
@@ -1674,11 +1676,11 @@ export default {
     }
   },
   /**
-   * Lookup228: pallet_working_group::Instance5
+   * Lookup229: pallet_working_group::Instance5
    **/
   PalletWorkingGroupInstance5: 'Null',
   /**
-   * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+   * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
    **/
   PalletWorkingGroupRawEventInstance6: {
     _enum: {
@@ -1710,11 +1712,11 @@ export default {
     }
   },
   /**
-   * Lookup230: pallet_working_group::Instance6
+   * Lookup231: pallet_working_group::Instance6
    **/
   PalletWorkingGroupInstance6: 'Null',
   /**
-   * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+   * Lookup232: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
    **/
   PalletWorkingGroupRawEventInstance7: {
     _enum: {
@@ -1746,11 +1748,11 @@ export default {
     }
   },
   /**
-   * Lookup232: pallet_working_group::Instance7
+   * Lookup233: pallet_working_group::Instance7
    **/
   PalletWorkingGroupInstance7: 'Null',
   /**
-   * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+   * Lookup234: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
    **/
   PalletWorkingGroupRawEventInstance8: {
     _enum: {
@@ -1782,11 +1784,11 @@ export default {
     }
   },
   /**
-   * Lookup234: pallet_working_group::Instance8
+   * Lookup235: pallet_working_group::Instance8
    **/
   PalletWorkingGroupInstance8: 'Null',
   /**
-   * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+   * Lookup236: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
    **/
   PalletWorkingGroupRawEventInstance9: {
     _enum: {
@@ -1818,11 +1820,11 @@ export default {
     }
   },
   /**
-   * Lookup236: pallet_working_group::Instance9
+   * Lookup237: pallet_working_group::Instance9
    **/
   PalletWorkingGroupInstance9: 'Null',
   /**
-   * Lookup237: frame_system::Phase
+   * Lookup238: frame_system::Phase
    **/
   FrameSystemPhase: {
     _enum: {
@@ -1832,14 +1834,14 @@ export default {
     }
   },
   /**
-   * Lookup241: frame_system::LastRuntimeUpgradeInfo
+   * Lookup242: frame_system::LastRuntimeUpgradeInfo
    **/
   FrameSystemLastRuntimeUpgradeInfo: {
     specVersion: 'Compact<u32>',
     specName: 'Text'
   },
   /**
-   * Lookup244: frame_system::pallet::Call<T>
+   * Lookup245: frame_system::pallet::Call<T>
    **/
   FrameSystemCall: {
     _enum: {
@@ -1877,7 +1879,7 @@ export default {
     }
   },
   /**
-   * Lookup247: frame_system::limits::BlockWeights
+   * Lookup248: frame_system::limits::BlockWeights
    **/
   FrameSystemLimitsBlockWeights: {
     baseBlock: 'u64',
@@ -1885,7 +1887,7 @@ export default {
     perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
   },
   /**
-   * Lookup248: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+   * Lookup249: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
    **/
   FrameSupportWeightsPerDispatchClassWeightsPerClass: {
     normal: 'FrameSystemLimitsWeightsPerClass',
@@ -1893,7 +1895,7 @@ export default {
     mandatory: 'FrameSystemLimitsWeightsPerClass'
   },
   /**
-   * Lookup249: frame_system::limits::WeightsPerClass
+   * Lookup250: frame_system::limits::WeightsPerClass
    **/
   FrameSystemLimitsWeightsPerClass: {
     baseExtrinsic: 'u64',
@@ -1902,13 +1904,13 @@ export default {
     reserved: 'Option<u64>'
   },
   /**
-   * Lookup250: frame_system::limits::BlockLength
+   * Lookup251: frame_system::limits::BlockLength
    **/
   FrameSystemLimitsBlockLength: {
     max: 'FrameSupportWeightsPerDispatchClassU32'
   },
   /**
-   * Lookup251: frame_support::weights::PerDispatchClass<T>
+   * Lookup252: frame_support::weights::PerDispatchClass<T>
    **/
   FrameSupportWeightsPerDispatchClassU32: {
     normal: 'u32',
@@ -1916,14 +1918,14 @@ export default {
     mandatory: 'u32'
   },
   /**
-   * Lookup252: frame_support::weights::RuntimeDbWeight
+   * Lookup253: frame_support::weights::RuntimeDbWeight
    **/
   FrameSupportWeightsRuntimeDbWeight: {
     read: 'u64',
     write: 'u64'
   },
   /**
-   * Lookup253: sp_version::RuntimeVersion
+   * Lookup254: sp_version::RuntimeVersion
    **/
   SpVersionRuntimeVersion: {
     specName: 'Text',
@@ -1936,13 +1938,13 @@ export default {
     stateVersion: 'u8'
   },
   /**
-   * Lookup259: frame_system::pallet::Error<T>
+   * Lookup260: frame_system::pallet::Error<T>
    **/
   FrameSystemError: {
     _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
   },
   /**
-   * Lookup260: pallet_utility::pallet::Call<T>
+   * Lookup261: pallet_utility::pallet::Call<T>
    **/
   PalletUtilityCall: {
     _enum: {
@@ -1966,7 +1968,7 @@ export default {
     }
   },
   /**
-   * Lookup263: pallet_babe::pallet::Call<T>
+   * Lookup264: pallet_babe::pallet::Call<T>
    **/
   PalletBabeCall: {
     _enum: {
@@ -1984,7 +1986,7 @@ export default {
     }
   },
   /**
-   * Lookup264: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+   * Lookup265: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
    **/
   SpConsensusSlotsEquivocationProof: {
     offender: 'SpConsensusBabeAppPublic',
@@ -1993,7 +1995,7 @@ export default {
     secondHeader: 'SpRuntimeHeader'
   },
   /**
-   * Lookup265: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+   * Lookup266: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
    **/
   SpRuntimeHeader: {
     parentHash: 'H256',
@@ -2003,15 +2005,15 @@ export default {
     digest: 'SpRuntimeDigest'
   },
   /**
-   * Lookup266: sp_runtime::traits::BlakeTwo256
+   * Lookup267: sp_runtime::traits::BlakeTwo256
    **/
   SpRuntimeBlakeTwo256: 'Null',
   /**
-   * Lookup267: sp_consensus_babe::app::Public
+   * Lookup268: sp_consensus_babe::app::Public
    **/
   SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
   /**
-   * Lookup269: sp_session::MembershipProof
+   * Lookup270: sp_session::MembershipProof
    **/
   SpSessionMembershipProof: {
     session: 'u32',
@@ -2019,7 +2021,7 @@ export default {
     validatorCount: 'u32'
   },
   /**
-   * Lookup270: sp_consensus_babe::digests::NextConfigDescriptor
+   * Lookup271: sp_consensus_babe::digests::NextConfigDescriptor
    **/
   SpConsensusBabeDigestsNextConfigDescriptor: {
     _enum: {
@@ -2031,13 +2033,13 @@ export default {
     }
   },
   /**
-   * Lookup271: sp_consensus_babe::AllowedSlots
+   * Lookup272: sp_consensus_babe::AllowedSlots
    **/
   SpConsensusBabeAllowedSlots: {
     _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
   },
   /**
-   * Lookup272: pallet_timestamp::pallet::Call<T>
+   * Lookup273: pallet_timestamp::pallet::Call<T>
    **/
   PalletTimestampCall: {
     _enum: {
@@ -2047,7 +2049,7 @@ export default {
     }
   },
   /**
-   * Lookup274: pallet_authorship::pallet::Call<T>
+   * Lookup275: pallet_authorship::pallet::Call<T>
    **/
   PalletAuthorshipCall: {
     _enum: {
@@ -2057,7 +2059,7 @@ export default {
     }
   },
   /**
-   * Lookup276: pallet_balances::pallet::Call<T, I>
+   * Lookup277: pallet_balances::pallet::Call<T, I>
    **/
   PalletBalancesCall: {
     _enum: {
@@ -2090,7 +2092,7 @@ export default {
     }
   },
   /**
-   * Lookup277: pallet_election_provider_multi_phase::pallet::Call<T>
+   * Lookup278: pallet_election_provider_multi_phase::pallet::Call<T>
    **/
   PalletElectionProviderMultiPhaseCall: {
     _enum: {
@@ -2114,7 +2116,7 @@ export default {
     }
   },
   /**
-   * Lookup278: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+   * Lookup279: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
    **/
   PalletElectionProviderMultiPhaseRawSolution: {
     solution: 'JoystreamNodeRuntimeNposSolution16',
@@ -2122,7 +2124,7 @@ export default {
     round: 'u32'
   },
   /**
-   * Lookup279: joystream_node_runtime::NposSolution16
+   * Lookup280: joystream_node_runtime::NposSolution16
    **/
   JoystreamNodeRuntimeNposSolution16: {
     votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
@@ -2143,7 +2145,7 @@ export default {
     votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
   },
   /**
-   * Lookup330: sp_npos_elections::ElectionScore
+   * Lookup331: sp_npos_elections::ElectionScore
    **/
   SpNposElectionsElectionScore: {
     minimalStake: 'u128',
@@ -2151,14 +2153,14 @@ export default {
     sumStakeSquared: 'u128'
   },
   /**
-   * Lookup331: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+   * Lookup332: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
    **/
   PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
     voters: 'Compact<u32>',
     targets: 'Compact<u32>'
   },
   /**
-   * Lookup335: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+   * Lookup336: sp_npos_elections::Support<sp_core::crypto::AccountId32>
    **/
   SpNposElectionsSupport: {
     total: 'u128',
@@ -2448,31 +2450,7 @@ export default {
    **/
   SpCoreSr25519Signature: '[u8;64]',
   /**
-   * Lookup370: pallet_sudo::pallet::Call<T>
-   **/
-  PalletSudoCall: {
-    _enum: {
-      sudo: {
-        call: 'Call',
-      },
-      sudo_unchecked_weight: {
-        call: 'Call',
-        weight: 'u64',
-      },
-      set_key: {
-        _alias: {
-          new_: 'new',
-        },
-        new_: 'AccountId32',
-      },
-      sudo_as: {
-        who: 'AccountId32',
-        call: 'Call'
-      }
-    }
-  },
-  /**
-   * Lookup371: pallet_bags_list::pallet::Call<T, I>
+   * Lookup370: pallet_bags_list::pallet::Call<T, I>
    **/
   PalletBagsListCall: {
     _enum: {
@@ -2485,7 +2463,7 @@ export default {
     }
   },
   /**
-   * Lookup372: pallet_vesting::pallet::Call<T>
+   * Lookup371: pallet_vesting::pallet::Call<T>
    **/
   PalletVestingCall: {
     _enum: {
@@ -2509,7 +2487,7 @@ export default {
     }
   },
   /**
-   * Lookup373: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+   * Lookup372: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
    **/
   PalletVestingVestingInfo: {
     locked: 'u128',
@@ -2517,7 +2495,7 @@ export default {
     startingBlock: 'u32'
   },
   /**
-   * Lookup374: pallet_multisig::pallet::Call<T>
+   * Lookup373: pallet_multisig::pallet::Call<T>
    **/
   PalletMultisigCall: {
     _enum: {
@@ -2549,7 +2527,7 @@ export default {
     }
   },
   /**
-   * Lookup377: pallet_council::Call<T>
+   * Lookup376: pallet_council::Call<T>
    **/
   PalletCouncilCall: {
     _enum: {
@@ -2600,7 +2578,7 @@ export default {
     }
   },
   /**
-   * Lookup378: pallet_referendum::Call<T, I>
+   * Lookup377: pallet_referendum::Call<T, I>
    **/
   PalletReferendumCall: {
     _enum: {
@@ -2612,11 +2590,12 @@ export default {
         salt: 'Bytes',
         voteOptionId: 'u64',
       },
-      release_vote_stake: 'Null'
+      release_vote_stake: 'Null',
+      opt_out_of_voting: 'Null'
     }
   },
   /**
-   * Lookup379: pallet_membership::Call<T>
+   * Lookup378: pallet_membership::Call<T>
    **/
   PalletMembershipCall: {
     _enum: {
@@ -2677,6 +2656,7 @@ export default {
       member_remark: {
         memberId: 'u64',
         msg: 'Bytes',
+        payment: 'Option<(AccountId32,u128)>',
       },
       create_member: {
         params: 'PalletMembershipCreateMemberParameters'
@@ -2684,7 +2664,7 @@ export default {
     }
   },
   /**
-   * Lookup380: pallet_forum::Call<T>
+   * Lookup379: pallet_forum::Call<T>
    **/
   PalletForumCall: {
     _enum: {
@@ -2781,7 +2761,7 @@ export default {
     }
   },
   /**
-   * Lookup381: pallet_constitution::Call<T>
+   * Lookup380: pallet_constitution::Call<T>
    **/
   PalletConstitutionCall: {
     _enum: {
@@ -2791,7 +2771,7 @@ export default {
     }
   },
   /**
-   * Lookup382: pallet_bounty::Call<T>
+   * Lookup381: pallet_bounty::Call<T>
    **/
   PalletBountyCall: {
     _enum: {
@@ -2867,7 +2847,7 @@ export default {
     }
   },
   /**
-   * Lookup384: pallet_content::Call<T>
+   * Lookup383: pallet_content::Call<T>
    **/
   PalletContentCall: {
     _enum: {
@@ -2975,6 +2955,7 @@ export default {
       },
       update_channel_payouts: {
         params: 'PalletContentUpdateChannelPayoutsParametersRecord',
+        uploaderAccount: 'AccountId32',
       },
       claim_channel_reward: {
         actor: 'PalletContentPermissionsContentActor',
@@ -3091,6 +3072,11 @@ export default {
         channelId: 'u64',
         msg: 'Bytes',
       },
+      creator_token_issuer_remark: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        msg: 'Bytes',
+      },
       channel_agent_remark: {
         actor: 'PalletContentPermissionsContentActor',
         channelId: 'u64',
@@ -3143,7 +3129,7 @@ export default {
       creator_token_issuer_transfer: {
         actor: 'PalletContentPermissionsContentActor',
         channelId: 'u64',
-        outputs: 'PalletProjectTokenTransfersPaymentWithVesting',
+        outputs: 'Vec<(u64,PalletProjectTokenPaymentWithVesting)>',
         metadata: 'Bytes',
       },
       make_creator_token_permissionless: {
@@ -3174,20 +3160,29 @@ export default {
         channelId: 'u64',
       },
       deissue_creator_token: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+      },
+      activate_amm: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        params: 'PalletProjectTokenAmmParams',
+      },
+      deactivate_amm: {
         actor: 'PalletContentPermissionsContentActor',
         channelId: 'u64'
       }
     }
   },
   /**
-   * Lookup385: pallet_content::types::ChannelBagWitness
+   * Lookup384: pallet_content::types::ChannelBagWitness
    **/
   PalletContentChannelBagWitness: {
     storageBucketsNum: 'u32',
     distributionBucketsNum: 'u32'
   },
   /**
-   * Lookup387: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+   * Lookup386: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
    **/
   PalletCommonMerkleTreeProofElementRecord: {
     _alias: {
@@ -3197,13 +3192,13 @@ export default {
     side: 'PalletCommonMerkleTreeSide'
   },
   /**
-   * Lookup388: pallet_common::merkle_tree::Side
+   * Lookup387: pallet_common::merkle_tree::Side
    **/
   PalletCommonMerkleTreeSide: {
     _enum: ['Left', 'Right']
   },
   /**
-   * Lookup389: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+   * Lookup388: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
    **/
   PalletContentPullPaymentElement: {
     channelId: 'u64',
@@ -3211,7 +3206,7 @@ export default {
     reason: 'H256'
   },
   /**
-   * Lookup390: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+   * Lookup389: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
    **/
   PalletContentInitTransferParameters: {
     newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -3219,7 +3214,7 @@ export default {
     newOwner: 'PalletContentChannelOwner'
   },
   /**
-   * Lookup391: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   * Lookup390: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
    **/
   PalletProjectTokenTokenSaleParams: {
     unitPrice: 'u128',
@@ -3231,11 +3226,14 @@ export default {
     metadata: 'Option<Bytes>'
   },
   /**
-   * Lookup392: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+   * Lookup394: pallet_project_token::types::AmmParams<Balance>
    **/
-  PalletProjectTokenTransfersPaymentWithVesting: 'BTreeMap<u64, PalletProjectTokenPaymentWithVesting>',
+  PalletProjectTokenAmmParams: {
+    slope: 'u128',
+    intercept: 'u128'
+  },
   /**
-   * Lookup396: pallet_storage::Call<T>
+   * Lookup395: pallet_storage::Call<T>
    **/
   PalletStorageCall: {
     _enum: {
@@ -3369,9 +3367,6 @@ export default {
         bucketId: 'PalletStorageDistributionBucketIdRecord',
         metadata: 'Bytes',
       },
-      sudo_upload_data_objects: {
-        params: 'PalletStorageUploadParametersRecord',
-      },
       storage_operator_remark: {
         workerId: 'u64',
         storageBucketId: 'u64',
@@ -3385,14 +3380,14 @@ export default {
     }
   },
   /**
-   * Lookup397: pallet_project_token::Call<T>
+   * Lookup396: pallet_project_token::Call<T>
    **/
   PalletProjectTokenCall: {
     _enum: {
       transfer: {
         srcMemberId: 'u64',
         tokenId: 'u64',
-        outputs: 'PalletProjectTokenTransfersPayment',
+        outputs: 'Vec<(u64,u128)>',
         metadata: 'Bytes',
       },
       burn: {
@@ -3421,32 +3416,37 @@ export default {
       },
       exit_revenue_split: {
         tokenId: 'u64',
-        memberId: 'u64'
+        memberId: 'u64',
+      },
+      buy_on_amm: {
+        tokenId: 'u64',
+        memberId: 'u64',
+        amount: 'u128',
+        slippageTolerance: 'Option<(Permill,u128)>',
+      },
+      sell_on_amm: {
+        tokenId: 'u64',
+        memberId: 'u64',
+        amount: 'u128',
+        slippageTolerance: 'Option<(Permill,u128)>',
+      },
+      update_max_yearly_patronage_rate: {
+        rate: 'Permill'
       }
     }
   },
   /**
-   * Lookup398: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
-   **/
-  PalletProjectTokenTransfersPayment: 'BTreeMap<u64, PalletProjectTokenPayment>',
-  /**
-   * Lookup399: pallet_project_token::types::Payment<Balance>
-   **/
-  PalletProjectTokenPayment: {
-    amount: 'u128'
-  },
-  /**
-   * Lookup403: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+   * Lookup400: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
    **/
   PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
   /**
-   * Lookup406: pallet_project_token::types::MerkleSide
+   * Lookup403: pallet_project_token::types::MerkleSide
    **/
   PalletProjectTokenMerkleSide: {
     _enum: ['Right', 'Left']
   },
   /**
-   * Lookup407: pallet_proposals_engine::Call<T>
+   * Lookup406: pallet_proposals_engine::Call<T>
    **/
   PalletProposalsEngineCall: {
     _enum: {
@@ -3471,7 +3471,7 @@ export default {
     }
   },
   /**
-   * Lookup408: pallet_proposals_discussion::Call<T>
+   * Lookup407: pallet_proposals_discussion::Call<T>
    **/
   PalletProposalsDiscussionCall: {
     _enum: {
@@ -3500,7 +3500,7 @@ export default {
     }
   },
   /**
-   * Lookup409: pallet_proposals_codex::Call<T>
+   * Lookup408: pallet_proposals_codex::Call<T>
    **/
   PalletProposalsCodexCall: {
     _enum: {
@@ -3511,7 +3511,7 @@ export default {
     }
   },
   /**
-   * Lookup410: pallet_working_group::Call<T, I>
+   * Lookup409: pallet_working_group::Call<T, I>
    **/
   PalletWorkingGroupCall: {
     _enum: {
@@ -3594,7 +3594,7 @@ export default {
     }
   },
   /**
-   * Lookup419: joystream_node_runtime::OriginCaller
+   * Lookup418: joystream_node_runtime::OriginCaller
    **/
   JoystreamNodeRuntimeOriginCaller: {
     _enum: {
@@ -3603,7 +3603,7 @@ export default {
     }
   },
   /**
-   * Lookup420: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+   * Lookup419: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
    **/
   FrameSupportDispatchRawOrigin: {
     _enum: {
@@ -3613,17 +3613,17 @@ export default {
     }
   },
   /**
-   * Lookup421: sp_core::Void
+   * Lookup420: sp_core::Void
    **/
   SpCoreVoid: 'Null',
   /**
-   * Lookup422: pallet_utility::pallet::Error<T>
+   * Lookup421: pallet_utility::pallet::Error<T>
    **/
   PalletUtilityError: {
     _enum: ['TooManyCalls']
   },
   /**
-   * Lookup429: sp_consensus_babe::digests::PreDigest
+   * Lookup428: sp_consensus_babe::digests::PreDigest
    **/
   SpConsensusBabeDigestsPreDigest: {
     _enum: {
@@ -3634,7 +3634,7 @@ export default {
     }
   },
   /**
-   * Lookup430: sp_consensus_babe::digests::PrimaryPreDigest
+   * Lookup429: sp_consensus_babe::digests::PrimaryPreDigest
    **/
   SpConsensusBabeDigestsPrimaryPreDigest: {
     authorityIndex: 'u32',
@@ -3643,14 +3643,14 @@ export default {
     vrfProof: '[u8;64]'
   },
   /**
-   * Lookup431: sp_consensus_babe::digests::SecondaryPlainPreDigest
+   * Lookup430: sp_consensus_babe::digests::SecondaryPlainPreDigest
    **/
   SpConsensusBabeDigestsSecondaryPlainPreDigest: {
     authorityIndex: 'u32',
     slot: 'u64'
   },
   /**
-   * Lookup432: sp_consensus_babe::digests::SecondaryVRFPreDigest
+   * Lookup431: sp_consensus_babe::digests::SecondaryVRFPreDigest
    **/
   SpConsensusBabeDigestsSecondaryVRFPreDigest: {
     authorityIndex: 'u32',
@@ -3659,20 +3659,20 @@ export default {
     vrfProof: '[u8;64]'
   },
   /**
-   * Lookup434: sp_consensus_babe::BabeEpochConfiguration
+   * Lookup433: sp_consensus_babe::BabeEpochConfiguration
    **/
   SpConsensusBabeBabeEpochConfiguration: {
     c: '(u64,u64)',
     allowedSlots: 'SpConsensusBabeAllowedSlots'
   },
   /**
-   * Lookup435: pallet_babe::pallet::Error<T>
+   * Lookup434: pallet_babe::pallet::Error<T>
    **/
   PalletBabeError: {
     _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
   },
   /**
-   * Lookup437: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+   * Lookup436: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
    **/
   PalletAuthorshipUncleEntryItem: {
     _enum: {
@@ -3681,13 +3681,13 @@ export default {
     }
   },
   /**
-   * Lookup438: pallet_authorship::pallet::Error<T>
+   * Lookup437: pallet_authorship::pallet::Error<T>
    **/
   PalletAuthorshipError: {
     _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
   },
   /**
-   * Lookup440: pallet_balances::BalanceLock<Balance>
+   * Lookup439: pallet_balances::BalanceLock<Balance>
    **/
   PalletBalancesBalanceLock: {
     id: '[u8;8]',
@@ -3695,38 +3695,38 @@ export default {
     reasons: 'PalletBalancesReasons'
   },
   /**
-   * Lookup441: pallet_balances::Reasons
+   * Lookup440: pallet_balances::Reasons
    **/
   PalletBalancesReasons: {
     _enum: ['Fee', 'Misc', 'All']
   },
   /**
-   * Lookup444: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+   * Lookup443: pallet_balances::ReserveData<ReserveIdentifier, Balance>
    **/
   PalletBalancesReserveData: {
     id: '[u8;8]',
     amount: 'u128'
   },
   /**
-   * Lookup446: pallet_balances::Releases
+   * Lookup445: pallet_balances::Releases
    **/
   PalletBalancesReleases: {
     _enum: ['V1_0_0', 'V2_0_0']
   },
   /**
-   * Lookup447: pallet_balances::pallet::Error<T, I>
+   * Lookup446: pallet_balances::pallet::Error<T, I>
    **/
   PalletBalancesError: {
     _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
   },
   /**
-   * Lookup449: pallet_transaction_payment::Releases
+   * Lookup448: pallet_transaction_payment::Releases
    **/
   PalletTransactionPaymentReleases: {
     _enum: ['V1Ancient', 'V2']
   },
   /**
-   * Lookup450: pallet_election_provider_multi_phase::Phase<Bn>
+   * Lookup449: pallet_election_provider_multi_phase::Phase<Bn>
    **/
   PalletElectionProviderMultiPhasePhase: {
     _enum: {
@@ -3737,7 +3737,7 @@ export default {
     }
   },
   /**
-   * Lookup452: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+   * Lookup451: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
    **/
   PalletElectionProviderMultiPhaseReadySolution: {
     supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
@@ -3745,14 +3745,14 @@ export default {
     compute: 'PalletElectionProviderMultiPhaseElectionCompute'
   },
   /**
-   * Lookup453: pallet_election_provider_multi_phase::RoundSnapshot<T>
+   * Lookup452: pallet_election_provider_multi_phase::RoundSnapshot<T>
    **/
   PalletElectionProviderMultiPhaseRoundSnapshot: {
     voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
     targets: 'Vec<AccountId32>'
   },
   /**
-   * Lookup461: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+   * Lookup460: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
    **/
   PalletElectionProviderMultiPhaseSignedSignedSubmission: {
     who: 'AccountId32',
@@ -3761,13 +3761,13 @@ export default {
     callFee: 'u128'
   },
   /**
-   * Lookup462: pallet_election_provider_multi_phase::pallet::Error<T>
+   * Lookup461: pallet_election_provider_multi_phase::pallet::Error<T>
    **/
   PalletElectionProviderMultiPhaseError: {
     _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
   },
   /**
-   * Lookup463: pallet_staking::StakingLedger<T>
+   * Lookup462: pallet_staking::StakingLedger<T>
    **/
   PalletStakingStakingLedger: {
     stash: 'AccountId32',
@@ -3777,14 +3777,14 @@ export default {
     claimedRewards: 'Vec<u32>'
   },
   /**
-   * Lookup465: pallet_staking::UnlockChunk<Balance>
+   * Lookup464: pallet_staking::UnlockChunk<Balance>
    **/
   PalletStakingUnlockChunk: {
     value: 'Compact<u128>',
     era: 'Compact<u32>'
   },
   /**
-   * Lookup467: pallet_staking::Nominations<T>
+   * Lookup466: pallet_staking::Nominations<T>
    **/
   PalletStakingNominations: {
     targets: 'Vec<AccountId32>',
@@ -3792,27 +3792,27 @@ export default {
     suppressed: 'bool'
   },
   /**
-   * Lookup468: pallet_staking::ActiveEraInfo
+   * Lookup467: pallet_staking::ActiveEraInfo
    **/
   PalletStakingActiveEraInfo: {
     index: 'u32',
     start: 'Option<u64>'
   },
   /**
-   * Lookup470: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+   * Lookup469: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
    **/
   PalletStakingEraRewardPoints: {
     total: 'u32',
     individual: 'BTreeMap<AccountId32, u32>'
   },
   /**
-   * Lookup474: pallet_staking::Forcing
+   * Lookup473: pallet_staking::Forcing
    **/
   PalletStakingForcing: {
     _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
   },
   /**
-   * Lookup476: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+   * Lookup475: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
    **/
   PalletStakingUnappliedSlash: {
     validator: 'AccountId32',
@@ -3822,7 +3822,7 @@ export default {
     payout: 'u128'
   },
   /**
-   * Lookup478: pallet_staking::slashing::SlashingSpans
+   * Lookup477: pallet_staking::slashing::SlashingSpans
    **/
   PalletStakingSlashingSlashingSpans: {
     spanIndex: 'u32',
@@ -3831,36 +3831,36 @@ export default {
     prior: 'Vec<u32>'
   },
   /**
-   * Lookup479: pallet_staking::slashing::SpanRecord<Balance>
+   * Lookup478: pallet_staking::slashing::SpanRecord<Balance>
    **/
   PalletStakingSlashingSpanRecord: {
     slashed: 'u128',
     paidOut: 'u128'
   },
   /**
-   * Lookup482: pallet_staking::Releases
+   * Lookup481: pallet_staking::Releases
    **/
   PalletStakingReleases: {
     _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
   },
   /**
-   * Lookup483: pallet_staking::pallet::pallet::Error<T>
+   * Lookup482: pallet_staking::pallet::pallet::Error<T>
    **/
   PalletStakingPalletError: {
     _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
   },
   /**
-   * Lookup487: sp_core::crypto::KeyTypeId
+   * Lookup486: sp_core::crypto::KeyTypeId
    **/
   SpCoreCryptoKeyTypeId: '[u8;4]',
   /**
-   * Lookup488: pallet_session::pallet::Error<T>
+   * Lookup487: pallet_session::pallet::Error<T>
    **/
   PalletSessionError: {
     _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
   },
   /**
-   * Lookup490: pallet_grandpa::StoredState<N>
+   * Lookup489: pallet_grandpa::StoredState<N>
    **/
   PalletGrandpaStoredState: {
     _enum: {
@@ -3877,7 +3877,7 @@ export default {
     }
   },
   /**
-   * Lookup491: pallet_grandpa::StoredPendingChange<N, Limit>
+   * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
    **/
   PalletGrandpaStoredPendingChange: {
     scheduledAt: 'u32',
@@ -3886,39 +3886,33 @@ export default {
     forced: 'Option<u32>'
   },
   /**
-   * Lookup493: pallet_grandpa::pallet::Error<T>
+   * Lookup492: pallet_grandpa::pallet::Error<T>
    **/
   PalletGrandpaError: {
     _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
   },
   /**
-   * Lookup499: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+   * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
    **/
   PalletImOnlineBoundedOpaqueNetworkState: {
     peerId: 'Bytes',
     externalAddresses: 'Vec<Bytes>'
   },
   /**
-   * Lookup503: pallet_im_online::pallet::Error<T>
+   * Lookup502: pallet_im_online::pallet::Error<T>
    **/
   PalletImOnlineError: {
     _enum: ['InvalidKey', 'DuplicatedHeartbeat']
   },
   /**
-   * Lookup504: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+   * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
    **/
   SpStakingOffenceOffenceDetails: {
     offender: '(AccountId32,PalletStakingExposure)',
     reporters: 'Vec<AccountId32>'
   },
   /**
-   * Lookup507: pallet_sudo::pallet::Error<T>
-   **/
-  PalletSudoError: {
-    _enum: ['RequireSudo']
-  },
-  /**
-   * Lookup508: pallet_bags_list::list::Node<T, I>
+   * Lookup506: pallet_bags_list::list::Node<T, I>
    **/
   PalletBagsListListNode: {
     id: 'AccountId32',
@@ -3928,14 +3922,14 @@ export default {
     score: 'u64'
   },
   /**
-   * Lookup509: pallet_bags_list::list::Bag<T, I>
+   * Lookup507: pallet_bags_list::list::Bag<T, I>
    **/
   PalletBagsListListBag: {
     head: 'Option<AccountId32>',
     tail: 'Option<AccountId32>'
   },
   /**
-   * Lookup510: pallet_bags_list::pallet::Error<T, I>
+   * Lookup508: pallet_bags_list::pallet::Error<T, I>
    **/
   PalletBagsListError: {
     _enum: {
@@ -3943,25 +3937,25 @@ export default {
     }
   },
   /**
-   * Lookup511: pallet_bags_list::list::ListError
+   * Lookup509: pallet_bags_list::list::ListError
    **/
   PalletBagsListListListError: {
     _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
   },
   /**
-   * Lookup514: pallet_vesting::Releases
+   * Lookup512: pallet_vesting::Releases
    **/
   PalletVestingReleases: {
     _enum: ['V0', 'V1']
   },
   /**
-   * Lookup515: pallet_vesting::pallet::Error<T>
+   * Lookup513: pallet_vesting::pallet::Error<T>
    **/
   PalletVestingError: {
     _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
   },
   /**
-   * Lookup517: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+   * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
    **/
   PalletMultisigMultisig: {
     when: 'PalletMultisigTimepoint',
@@ -3970,20 +3964,20 @@ export default {
     approvals: 'Vec<AccountId32>'
   },
   /**
-   * Lookup519: pallet_multisig::pallet::Error<T>
+   * Lookup517: pallet_multisig::pallet::Error<T>
    **/
   PalletMultisigError: {
     _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
   },
   /**
-   * Lookup520: pallet_council::CouncilStageUpdate<BlockNumber>
+   * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
    **/
   PalletCouncilCouncilStageUpdate: {
     stage: 'PalletCouncilCouncilStage',
     changedAt: 'u32'
   },
   /**
-   * Lookup521: pallet_council::CouncilStage<BlockNumber>
+   * Lookup519: pallet_council::CouncilStage<BlockNumber>
    **/
   PalletCouncilCouncilStage: {
     _enum: {
@@ -3993,26 +3987,26 @@ export default {
     }
   },
   /**
-   * Lookup522: pallet_council::CouncilStageAnnouncing<BlockNumber>
+   * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
    **/
   PalletCouncilCouncilStageAnnouncing: {
     candidatesCount: 'u32',
     endsAt: 'u32'
   },
   /**
-   * Lookup523: pallet_council::CouncilStageElection
+   * Lookup521: pallet_council::CouncilStageElection
    **/
   PalletCouncilCouncilStageElection: {
     candidatesCount: 'u32'
   },
   /**
-   * Lookup524: pallet_council::CouncilStageIdle<BlockNumber>
+   * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
    **/
   PalletCouncilCouncilStageIdle: {
     endsAt: 'u32'
   },
   /**
-   * Lookup526: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+   * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
    **/
   PalletCouncilCouncilMember: {
     stakingAccountId: 'AccountId32',
@@ -4023,7 +4017,7 @@ export default {
     unpaidReward: 'u128'
   },
   /**
-   * Lookup528: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+   * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
    **/
   PalletCouncilCandidate: {
     stakingAccountId: 'AccountId32',
@@ -4034,13 +4028,13 @@ export default {
     noteHash: 'Option<H256>'
   },
   /**
-   * Lookup529: pallet_council::Error<T>
+   * Lookup527: pallet_council::Error<T>
    **/
   PalletCouncilError: {
     _enum: ['ArithmeticError', 'BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
   },
   /**
-   * Lookup530: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+   * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
    **/
   PalletReferendumReferendumStage: {
     _enum: {
@@ -4050,7 +4044,7 @@ export default {
     }
   },
   /**
-   * Lookup532: pallet_referendum::ReferendumStageVoting<BlockNumber>
+   * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
    **/
   PalletReferendumReferendumStageVoting: {
     started: 'u32',
@@ -4059,7 +4053,7 @@ export default {
     endsAt: 'u32'
   },
   /**
-   * Lookup533: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+   * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
    **/
   PalletReferendumReferendumStageRevealing: {
     started: 'u32',
@@ -4069,7 +4063,7 @@ export default {
     endsAt: 'u32'
   },
   /**
-   * Lookup534: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+   * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
    **/
   PalletReferendumCastVote: {
     commitment: 'H256',
@@ -4078,13 +4072,13 @@ export default {
     voteFor: 'Option<u64>'
   },
   /**
-   * Lookup535: pallet_referendum::Error<T, I>
+   * Lookup533: pallet_referendum::Error<T, I>
    **/
   PalletReferendumError: {
-    _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden']
+    _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden', 'AccountAlreadyOptedOutOfVoting']
   },
   /**
-   * Lookup536: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+   * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
    **/
   PalletMembershipMembershipObject: {
     handleHash: 'H256',
@@ -4094,20 +4088,20 @@ export default {
     invites: 'u32'
   },
   /**
-   * Lookup537: pallet_membership::StakingAccountMemberBinding<MemberId>
+   * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
    **/
   PalletMembershipStakingAccountMemberBinding: {
     memberId: 'u64',
     confirmed: 'bool'
   },
   /**
-   * Lookup538: pallet_membership::Error<T>
+   * Lookup536: pallet_membership::Error<T>
    **/
   PalletMembershipError: {
-    _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift']
+    _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift', 'InsufficientBalanceToCoverPayment']
   },
   /**
-   * Lookup539: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletForumCategory: {
     titleHash: 'H256',
@@ -4120,7 +4114,7 @@ export default {
     stickyThreadIds: 'BTreeSet<u64>'
   },
   /**
-   * Lookup541: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletForumThread: {
     categoryId: 'u64',
@@ -4129,7 +4123,7 @@ export default {
     numberOfEditablePosts: 'u64'
   },
   /**
-   * Lookup542: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletForumPost: {
     threadId: 'u64',
@@ -4139,19 +4133,19 @@ export default {
     lastEdited: 'u32'
   },
   /**
-   * Lookup543: pallet_forum::Error<T>
+   * Lookup541: pallet_forum::Error<T>
    **/
   PalletForumError: {
     _enum: ['ArithmeticError', 'OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero', 'MaxNumberOfStickiedThreadsExceeded']
   },
   /**
-   * Lookup544: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+   * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
    **/
   PalletConstitutionConstitutionInfo: {
     textHash: 'H256'
   },
   /**
-   * Lookup545: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletBountyBountyRecord: {
     creationParams: 'PalletBountyBountyParametersBoundedBTreeSet',
@@ -4161,7 +4155,7 @@ export default {
     hasUnpaidOracleReward: 'bool'
   },
   /**
-   * Lookup547: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletBountyBountyParametersBoundedBTreeSet: {
     oracle: 'PalletBountyBountyActor',
@@ -4173,7 +4167,7 @@ export default {
     fundingType: 'PalletBountyFundingType'
   },
   /**
-   * Lookup548: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup546: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletBountyAssuranceContractTypeBoundedBTreeSet: {
     _enum: {
@@ -4182,7 +4176,7 @@ export default {
     }
   },
   /**
-   * Lookup549: pallet_bounty::BountyMilestone<BlockNumber>
+   * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
    **/
   PalletBountyBountyMilestone: {
     _enum: {
@@ -4199,14 +4193,14 @@ export default {
     }
   },
   /**
-   * Lookup551: pallet_bounty::Contribution<T>
+   * Lookup549: pallet_bounty::Contribution<T>
    **/
   PalletBountyContribution: {
     amount: 'u128',
     funderStateBloatBondAmount: 'u128'
   },
   /**
-   * Lookup552: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+   * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
    **/
   PalletBountyEntryRecord: {
     memberId: 'u64',
@@ -4215,13 +4209,13 @@ export default {
     workSubmitted: 'bool'
   },
   /**
-   * Lookup553: pallet_bounty::Error<T>
+   * Lookup551: pallet_bounty::Error<T>
    **/
   PalletBountyError: {
     _enum: ['ArithmeticError', 'MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
   },
   /**
-   * Lookup555: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletContentVideoRecord: {
     inChannel: 'u64',
@@ -4230,7 +4224,7 @@ export default {
     videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
   },
   /**
-   * Lookup556: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+   * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
    **/
   PalletContentNftTypesOwnedNft: {
     owner: 'PalletContentNftTypesNftOwner',
@@ -4239,7 +4233,7 @@ export default {
     openAuctionsNonce: 'u64'
   },
   /**
-   * Lookup557: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+   * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
    **/
   PalletContentNftTypesTransactionalStatusRecord: {
     _enum: {
@@ -4251,7 +4245,7 @@ export default {
     }
   },
   /**
-   * Lookup558: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletContentNftTypesEnglishAuctionRecord: {
     startingPrice: 'u128',
@@ -4264,14 +4258,14 @@ export default {
     topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
   },
   /**
-   * Lookup561: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+   * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
    **/
   PalletContentNftTypesEnglishAuctionBid: {
     amount: 'u128',
     bidderId: 'u64'
   },
   /**
-   * Lookup562: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletContentNftTypesOpenAuctionRecord: {
     startingPrice: 'u128',
@@ -4282,7 +4276,7 @@ export default {
     start: 'u32'
   },
   /**
-   * Lookup563: pallet_content::nft::types::NftOwner<MemberId>
+   * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
    **/
   PalletContentNftTypesNftOwner: {
     _enum: {
@@ -4291,7 +4285,7 @@ export default {
     }
   },
   /**
-   * Lookup566: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+   * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
    **/
   PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
     curators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -4299,7 +4293,7 @@ export default {
     permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>'
   },
   /**
-   * Lookup573: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+   * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
    **/
   PalletContentNftTypesOpenAuctionBidRecord: {
     amount: 'u128',
@@ -4307,13 +4301,13 @@ export default {
     auctionId: 'u64'
   },
   /**
-   * Lookup574: pallet_content::errors::Error<T>
+   * Lookup572: pallet_content::errors::Error<T>
    **/
   PalletContentErrorsError: {
-    _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
+    _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales', 'ChannelTransfersBlockedDuringActiveAmm']
   },
   /**
-   * Lookup575: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+   * Lookup573: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
    **/
   PalletStorageBagRecord: {
     storedBy: 'BTreeSet<u64>',
@@ -4322,7 +4316,7 @@ export default {
     objectsNumber: 'u64'
   },
   /**
-   * Lookup578: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+   * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
    **/
   PalletStorageStorageBucketRecord: {
     operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
@@ -4331,7 +4325,7 @@ export default {
     assignedBags: 'u64'
   },
   /**
-   * Lookup579: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+   * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
    **/
   PalletStorageStorageBucketOperatorStatus: {
     _enum: {
@@ -4341,14 +4335,14 @@ export default {
     }
   },
   /**
-   * Lookup581: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+   * Lookup579: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
    **/
   PalletStorageDynamicBagCreationPolicy: {
     numberOfStorageBuckets: 'u32',
     families: 'BTreeMap<u64, u32>'
   },
   /**
-   * Lookup584: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletStorageDataObject: {
     _alias: {
@@ -4360,13 +4354,13 @@ export default {
     ipfsContentId: 'Bytes'
   },
   /**
-   * Lookup585: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+   * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
    **/
   PalletStorageDistributionBucketFamilyRecord: {
     nextDistributionBucketIndex: 'u64'
   },
   /**
-   * Lookup586: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup584: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletStorageDistributionBucketRecord: {
     acceptingNewBags: 'bool',
@@ -4376,13 +4370,13 @@ export default {
     assignedBags: 'u64'
   },
   /**
-   * Lookup589: pallet_storage::Error<T>
+   * Lookup587: pallet_storage::Error<T>
    **/
   PalletStorageError: {
     _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'MaxNumberOfOperatorsPerDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
   },
   /**
-   * Lookup590: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+   * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
    **/
   PalletProjectTokenAccountData: {
     vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
@@ -4393,14 +4387,14 @@ export default {
     lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
   },
   /**
-   * Lookup591: pallet_project_token::types::StakingStatus<Balance>
+   * Lookup589: pallet_project_token::types::StakingStatus<Balance>
    **/
   PalletProjectTokenStakingStatus: {
     splitId: 'u32',
     amount: 'u128'
   },
   /**
-   * Lookup593: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+   * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
    **/
   PalletProjectTokenVestingSchedule: {
     linearVestingStartBlock: 'u32',
@@ -4410,7 +4404,7 @@ export default {
     burnedAmount: 'u128'
   },
   /**
-   * Lookup600: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+   * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
    **/
   PalletProjectTokenTokenData: {
     totalSupply: 'u128',
@@ -4423,10 +4417,11 @@ export default {
     accountsNumber: 'u64',
     revenueSplitRate: 'Permill',
     revenueSplit: 'PalletProjectTokenRevenueSplitState',
-    nextRevenueSplitId: 'u32'
+    nextRevenueSplitId: 'u32',
+    ammCurve: 'Option<PalletProjectTokenAmmCurve>'
   },
   /**
-   * Lookup601: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+   * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
    **/
   PalletProjectTokenRevenueSplitState: {
     _enum: {
@@ -4435,7 +4430,7 @@ export default {
     }
   },
   /**
-   * Lookup602: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+   * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
    **/
   PalletProjectTokenRevenueSplitInfo: {
     allocation: 'u128',
@@ -4443,28 +4438,28 @@ export default {
     dividendsClaimed: 'u128'
   },
   /**
-   * Lookup603: pallet_project_token::types::Timeline<BlockNumber>
+   * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
    **/
   PalletProjectTokenTimeline: {
     start: 'u32',
     duration: 'u32'
   },
   /**
-   * Lookup605: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+   * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
    **/
   PalletProjectTokenPatronageData: {
-    rate: 'Perquintill',
+    rate: 'Permill',
     unclaimedPatronageTallyAmount: 'u128',
     lastUnclaimedPatronageTallyBlock: 'u32'
   },
   /**
-   * Lookup607: pallet_project_token::errors::Error<T>
+   * Lookup605: pallet_project_token::errors::Error<T>
    **/
   PalletProjectTokenErrorsError: {
-    _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
+    _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'TransferDestinationMemberDoesNotExist', 'MerkleProofVerificationFailure', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TooManyTransferOutputs', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'CannotInitSaleIfAmmIsActive', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount', 'NotInAmmState', 'InvalidCurveParameters', 'DeadlineExpired', 'SlippageToleranceExceeded', 'InsufficientTokenBalance', 'OutstandingAmmProvidedSupplyTooLarge', 'CurveSlopeParametersTooLow', 'TargetPatronageRateIsHigherThanCurrentRate', 'YearlyPatronageRateLimitExceeded']
   },
   /**
-   * Lookup608: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+   * Lookup606: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
    **/
   PalletProposalsEngineProposal: {
     parameters: 'PalletProposalsEngineProposalParameters',
@@ -4477,7 +4472,7 @@ export default {
     stakingAccountId: 'Option<AccountId32>'
   },
   /**
-   * Lookup609: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+   * Lookup607: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
    **/
   PalletProposalsEngineProposalParameters: {
     votingPeriod: 'u32',
@@ -4490,7 +4485,7 @@ export default {
     constitutionality: 'u32'
   },
   /**
-   * Lookup610: pallet_proposals_engine::types::VotingResults
+   * Lookup608: pallet_proposals_engine::types::VotingResults
    **/
   PalletProposalsEngineVotingResults: {
     abstentions: 'u32',
@@ -4499,13 +4494,13 @@ export default {
     slashes: 'u32'
   },
   /**
-   * Lookup613: pallet_proposals_engine::Error<T>
+   * Lookup611: pallet_proposals_engine::Error<T>
    **/
   PalletProposalsEngineError: {
     _enum: ['ArithmeticError', 'EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember', 'MaxDispatchableCallCodeSizeExceeded']
   },
   /**
-   * Lookup614: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup612: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletProposalsDiscussionDiscussionThread: {
     activatedAt: 'u32',
@@ -4513,7 +4508,7 @@ export default {
     mode: 'PalletProposalsDiscussionThreadModeBoundedBTreeSet'
   },
   /**
-   * Lookup616: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup614: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
     _enum: {
@@ -4522,7 +4517,7 @@ export default {
     }
   },
   /**
-   * Lookup617: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup615: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletProposalsDiscussionDiscussionPost: {
     authorId: 'u64',
@@ -4530,19 +4525,19 @@ export default {
     lastEdited: 'u32'
   },
   /**
-   * Lookup618: pallet_proposals_discussion::Error<T>
+   * Lookup616: pallet_proposals_discussion::Error<T>
    **/
   PalletProposalsDiscussionError: {
     _enum: ['ArithmeticError', 'ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
   },
   /**
-   * Lookup619: pallet_proposals_codex::Error<T>
+   * Lookup617: pallet_proposals_codex::Error<T>
    **/
   PalletProposalsCodexError: {
-    _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError']
+    _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError', 'MaxYearlyPatronageRateCannotBeZero']
   },
   /**
-   * Lookup620: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+   * Lookup618: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
    **/
   PalletWorkingGroupOpening: {
     openingType: 'PalletWorkingGroupOpeningType',
@@ -4553,7 +4548,7 @@ export default {
     creationStake: 'u128'
   },
   /**
-   * Lookup621: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+   * Lookup619: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
    **/
   PalletWorkingGroupJobApplication: {
     roleAccountId: 'AccountId32',
@@ -4564,7 +4559,7 @@ export default {
     openingId: 'u64'
   },
   /**
-   * Lookup622: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+   * Lookup620: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
    **/
   PalletWorkingGroupGroupWorker: {
     memberId: 'u64',
@@ -4578,13 +4573,13 @@ export default {
     createdAt: 'u32'
   },
   /**
-   * Lookup623: pallet_working_group::errors::Error<T, I>
+   * Lookup621: pallet_working_group::errors::Error<T, I>
    **/
   PalletWorkingGroupErrorsError: {
     _enum: ['ArithmeticError', 'StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
   },
   /**
-   * Lookup633: sp_runtime::MultiSignature
+   * Lookup631: sp_runtime::MultiSignature
    **/
   SpRuntimeMultiSignature: {
     _enum: {
@@ -4594,39 +4589,39 @@ export default {
     }
   },
   /**
-   * Lookup634: sp_core::ecdsa::Signature
+   * Lookup632: sp_core::ecdsa::Signature
    **/
   SpCoreEcdsaSignature: '[u8;65]',
   /**
-   * Lookup637: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+   * Lookup635: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
    **/
   FrameSystemExtensionsCheckNonZeroSender: 'Null',
   /**
-   * Lookup638: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+   * Lookup636: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
    **/
   FrameSystemExtensionsCheckSpecVersion: 'Null',
   /**
-   * Lookup639: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+   * Lookup637: frame_system::extensions::check_tx_version::CheckTxVersion<T>
    **/
   FrameSystemExtensionsCheckTxVersion: 'Null',
   /**
-   * Lookup640: frame_system::extensions::check_genesis::CheckGenesis<T>
+   * Lookup638: frame_system::extensions::check_genesis::CheckGenesis<T>
    **/
   FrameSystemExtensionsCheckGenesis: 'Null',
   /**
-   * Lookup643: frame_system::extensions::check_nonce::CheckNonce<T>
+   * Lookup641: frame_system::extensions::check_nonce::CheckNonce<T>
    **/
   FrameSystemExtensionsCheckNonce: 'Compact<u32>',
   /**
-   * Lookup644: frame_system::extensions::check_weight::CheckWeight<T>
+   * Lookup642: frame_system::extensions::check_weight::CheckWeight<T>
    **/
   FrameSystemExtensionsCheckWeight: 'Null',
   /**
-   * Lookup645: pallet_transaction_payment::ChargeTransactionPayment<T>
+   * Lookup643: pallet_transaction_payment::ChargeTransactionPayment<T>
    **/
   PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
   /**
-   * Lookup646: joystream_node_runtime::Runtime
+   * Lookup644: joystream_node_runtime::Runtime
    **/
   JoystreamNodeRuntimeRuntime: 'Null'
 };
diff --git a/node_modules/@joystream/types/src/augment/registry.ts b/node_modules/@joystream/types/src/augment/registry.ts
index cdcf544..a882fb3 100644
--- a/node_modules/@joystream/types/src/augment/registry.ts
+++ b/node_modules/@joystream/types/src/augment/registry.ts
@@ -1,7 +1,7 @@
 // Auto-generated via `yarn polkadot-types-from-defs`, do not edit
 /* eslint-disable */
 
-import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletSudoCall, PalletSudoError, PalletSudoEvent, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenAmmCurve, PalletProjectTokenAmmParams, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfers, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
 
 declare module '@polkadot/types/types/registry' {
   export interface InterfaceTypes {
@@ -176,13 +176,14 @@ declare module '@polkadot/types/types/registry' {
     PalletMultisigTimepoint: PalletMultisigTimepoint;
     PalletOffencesEvent: PalletOffencesEvent;
     PalletProjectTokenAccountData: PalletProjectTokenAccountData;
+    PalletProjectTokenAmmCurve: PalletProjectTokenAmmCurve;
+    PalletProjectTokenAmmParams: PalletProjectTokenAmmParams;
     PalletProjectTokenCall: PalletProjectTokenCall;
     PalletProjectTokenErrorsError: PalletProjectTokenErrorsError;
     PalletProjectTokenEventsRawEvent: PalletProjectTokenEventsRawEvent;
     PalletProjectTokenMerkleProof: PalletProjectTokenMerkleProof;
     PalletProjectTokenMerkleSide: PalletProjectTokenMerkleSide;
     PalletProjectTokenPatronageData: PalletProjectTokenPatronageData;
-    PalletProjectTokenPayment: PalletProjectTokenPayment;
     PalletProjectTokenPaymentWithVesting: PalletProjectTokenPaymentWithVesting;
     PalletProjectTokenRevenueSplitInfo: PalletProjectTokenRevenueSplitInfo;
     PalletProjectTokenRevenueSplitState: PalletProjectTokenRevenueSplitState;
@@ -196,8 +197,7 @@ declare module '@polkadot/types/types/registry' {
     PalletProjectTokenTokenSaleParams: PalletProjectTokenTokenSaleParams;
     PalletProjectTokenTransferPolicy: PalletProjectTokenTransferPolicy;
     PalletProjectTokenTransferPolicyParams: PalletProjectTokenTransferPolicyParams;
-    PalletProjectTokenTransfersPayment: PalletProjectTokenTransfersPayment;
-    PalletProjectTokenTransfersPaymentWithVesting: PalletProjectTokenTransfersPaymentWithVesting;
+    PalletProjectTokenTransfers: PalletProjectTokenTransfers;
     PalletProjectTokenValidated: PalletProjectTokenValidated;
     PalletProjectTokenValidatedPayment: PalletProjectTokenValidatedPayment;
     PalletProjectTokenVestingSchedule: PalletProjectTokenVestingSchedule;
@@ -282,9 +282,6 @@ declare module '@polkadot/types/types/registry' {
     PalletStorageStorageBucketRecord: PalletStorageStorageBucketRecord;
     PalletStorageUploadParametersRecord: PalletStorageUploadParametersRecord;
     PalletStorageVoucher: PalletStorageVoucher;
-    PalletSudoCall: PalletSudoCall;
-    PalletSudoError: PalletSudoError;
-    PalletSudoEvent: PalletSudoEvent;
     PalletTimestampCall: PalletTimestampCall;
     PalletTransactionPaymentChargeTransactionPayment: PalletTransactionPaymentChargeTransactionPayment;
     PalletTransactionPaymentReleases: PalletTransactionPaymentReleases;
diff --git a/node_modules/@joystream/types/src/augment/types-lookup.ts b/node_modules/@joystream/types/src/augment/types-lookup.ts
index c035e7d..fd687a8 100644
--- a/node_modules/@joystream/types/src/augment/types-lookup.ts
+++ b/node_modules/@joystream/types/src/augment/types-lookup.ts
@@ -4,7 +4,7 @@
 declare module '@polkadot/types/lookup' {
   import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
   import type { ITuple } from '@polkadot/types-codec/types';
-  import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill, Perquintill } from '@polkadot/types/interfaces/runtime';
+  import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
   import type { Event } from '@polkadot/types/interfaces/system';
 
   /** @name FrameSystemAccountInfo (3) */
@@ -392,24 +392,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Offence';
   }
 
-  /** @name PalletSudoEvent (57) */
-  export interface PalletSudoEvent extends Enum {
-    readonly isSudid: boolean;
-    readonly asSudid: {
-      readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
-    } & Struct;
-    readonly isKeyChanged: boolean;
-    readonly asKeyChanged: {
-      readonly oldSudoer: Option<AccountId32>;
-    } & Struct;
-    readonly isSudoAsDone: boolean;
-    readonly asSudoAsDone: {
-      readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
-    } & Struct;
-    readonly type: 'Sudid' | 'KeyChanged' | 'SudoAsDone';
-  }
-
-  /** @name PalletBagsListEvent (59) */
+  /** @name PalletBagsListEvent (57) */
   export interface PalletBagsListEvent extends Enum {
     readonly isRebagged: boolean;
     readonly asRebagged: {
@@ -425,7 +408,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Rebagged' | 'ScoreUpdated';
   }
 
-  /** @name PalletVestingEvent (60) */
+  /** @name PalletVestingEvent (58) */
   export interface PalletVestingEvent extends Enum {
     readonly isVestingUpdated: boolean;
     readonly asVestingUpdated: {
@@ -439,7 +422,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'VestingUpdated' | 'VestingCompleted';
   }
 
-  /** @name PalletMultisigEvent (61) */
+  /** @name PalletMultisigEvent (59) */
   export interface PalletMultisigEvent extends Enum {
     readonly isNewMultisig: boolean;
     readonly asNewMultisig: {
@@ -472,13 +455,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
   }
 
-  /** @name PalletMultisigTimepoint (62) */
+  /** @name PalletMultisigTimepoint (60) */
   export interface PalletMultisigTimepoint extends Struct {
     readonly height: u32;
     readonly index: u32;
   }
 
-  /** @name PalletCouncilRawEvent (63) */
+  /** @name PalletCouncilRawEvent (61) */
   export interface PalletCouncilRawEvent extends Enum {
     readonly isAnnouncingPeriodStarted: boolean;
     readonly asAnnouncingPeriodStarted: u32;
@@ -521,7 +504,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AnnouncingPeriodStarted' | 'NotEnoughCandidates' | 'VotingPeriodStarted' | 'NewCandidate' | 'NewCouncilElected' | 'NewCouncilNotElected' | 'CandidacyStakeRelease' | 'CandidacyWithdraw' | 'CandidacyNoteSet' | 'RewardPayment' | 'BudgetBalanceSet' | 'BudgetRefill' | 'BudgetRefillPlanned' | 'BudgetIncrementUpdated' | 'CouncilorRewardUpdated' | 'RequestFunded' | 'CouncilBudgetFunded' | 'CouncilorRemarked' | 'CandidateRemarked';
   }
 
-  /** @name PalletReferendumRawEvent (65) */
+  /** @name PalletReferendumRawEvent (63) */
   export interface PalletReferendumRawEvent extends Enum {
     readonly isReferendumStarted: boolean;
     readonly asReferendumStarted: ITuple<[u32, u32]>;
@@ -537,22 +520,24 @@ declare module '@polkadot/types/lookup' {
     readonly asVoteRevealed: ITuple<[AccountId32, u64, Bytes]>;
     readonly isStakeReleased: boolean;
     readonly asStakeReleased: AccountId32;
-    readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased';
+    readonly isAccountOptedOutOfVoting: boolean;
+    readonly asAccountOptedOutOfVoting: AccountId32;
+    readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased' | 'AccountOptedOutOfVoting';
   }
 
-  /** @name PalletReferendumInstance1 (66) */
+  /** @name PalletReferendumInstance1 (64) */
   export type PalletReferendumInstance1 = Null;
 
-  /** @name PalletReferendumOptionResult (68) */
+  /** @name PalletReferendumOptionResult (66) */
   export interface PalletReferendumOptionResult extends Struct {
     readonly optionId: u64;
     readonly votePower: u128;
   }
 
-  /** @name PalletMembershipRawEvent (69) */
+  /** @name PalletMembershipRawEvent (67) */
   export interface PalletMembershipRawEvent extends Enum {
     readonly isMemberInvited: boolean;
-    readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters]>;
+    readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters, u128]>;
     readonly isMembershipGifted: boolean;
     readonly asMembershipGifted: ITuple<[u64, PalletMembershipGiftMembershipParameters]>;
     readonly isMembershipBought: boolean;
@@ -582,13 +567,13 @@ declare module '@polkadot/types/lookup' {
     readonly isStakingAccountConfirmed: boolean;
     readonly asStakingAccountConfirmed: ITuple<[AccountId32, u64]>;
     readonly isMemberRemarked: boolean;
-    readonly asMemberRemarked: ITuple<[u64, Bytes]>;
+    readonly asMemberRemarked: ITuple<[u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
     readonly isMemberCreated: boolean;
     readonly asMemberCreated: ITuple<[u64, PalletMembershipCreateMemberParameters, u32]>;
     readonly type: 'MemberInvited' | 'MembershipGifted' | 'MembershipBought' | 'MemberProfileUpdated' | 'MemberAccountsUpdated' | 'MemberVerificationStatusUpdated' | 'ReferralCutUpdated' | 'InvitesTransferred' | 'MembershipPriceUpdated' | 'InitialInvitationBalanceUpdated' | 'LeaderInvitationQuotaUpdated' | 'InitialInvitationCountUpdated' | 'StakingAccountAdded' | 'StakingAccountRemoved' | 'StakingAccountConfirmed' | 'MemberRemarked' | 'MemberCreated';
   }
 
-  /** @name PalletMembershipBuyMembershipParameters (70) */
+  /** @name PalletMembershipBuyMembershipParameters (68) */
   export interface PalletMembershipBuyMembershipParameters extends Struct {
     readonly rootAccount: AccountId32;
     readonly controllerAccount: AccountId32;
@@ -597,7 +582,7 @@ declare module '@polkadot/types/lookup' {
     readonly referrerId: Option<u64>;
   }
 
-  /** @name PalletMembershipInviteMembershipParameters (73) */
+  /** @name PalletMembershipInviteMembershipParameters (71) */
   export interface PalletMembershipInviteMembershipParameters extends Struct {
     readonly invitingMemberId: u64;
     readonly rootAccount: AccountId32;
@@ -606,7 +591,7 @@ declare module '@polkadot/types/lookup' {
     readonly metadata: Bytes;
   }
 
-  /** @name PalletMembershipCreateMemberParameters (74) */
+  /** @name PalletMembershipCreateMemberParameters (72) */
   export interface PalletMembershipCreateMemberParameters extends Struct {
     readonly rootAccount: AccountId32;
     readonly controllerAccount: AccountId32;
@@ -615,7 +600,7 @@ declare module '@polkadot/types/lookup' {
     readonly isFoundingMember: bool;
   }
 
-  /** @name PalletMembershipGiftMembershipParameters (75) */
+  /** @name PalletMembershipGiftMembershipParameters (73) */
   export interface PalletMembershipGiftMembershipParameters extends Struct {
     readonly rootAccount: AccountId32;
     readonly controllerAccount: AccountId32;
@@ -627,7 +612,7 @@ declare module '@polkadot/types/lookup' {
     readonly applyRootAccountInvitationLock: Option<u128>;
   }
 
-  /** @name PalletForumRawEvent (77) */
+  /** @name PalletForumRawEvent (78) */
   export interface PalletForumRawEvent extends Enum {
     readonly isCategoryCreated: boolean;
     readonly asCategoryCreated: ITuple<[u64, Option<u64>, Bytes, Bytes]>;
@@ -666,7 +651,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
   }
 
-  /** @name PalletForumPrivilegedActor (78) */
+  /** @name PalletForumPrivilegedActor (79) */
   export interface PalletForumPrivilegedActor extends Enum {
     readonly isLead: boolean;
     readonly isModerator: boolean;
@@ -674,21 +659,21 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Lead' | 'Moderator';
   }
 
-  /** @name PalletForumExtendedPostIdObject (79) */
+  /** @name PalletForumExtendedPostIdObject (80) */
   export interface PalletForumExtendedPostIdObject extends Struct {
     readonly categoryId: u64;
     readonly threadId: u64;
     readonly postId: u64;
   }
 
-  /** @name PalletConstitutionRawEvent (84) */
+  /** @name PalletConstitutionRawEvent (85) */
   export interface PalletConstitutionRawEvent extends Enum {
     readonly isConstutionAmended: boolean;
     readonly asConstutionAmended: ITuple<[H256, Bytes]>;
     readonly type: 'ConstutionAmended';
   }
 
-  /** @name PalletBountyRawEvent (85) */
+  /** @name PalletBountyRawEvent (86) */
   export interface PalletBountyRawEvent extends Enum {
     readonly isBountyCreated: boolean;
     readonly asBountyCreated: ITuple<[u64, PalletBountyBountyParametersBTreeSet, Bytes]>;
@@ -739,7 +724,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'BountyCreated' | 'BountyOracleSwitched' | 'BountyTerminated' | 'BountyFunded' | 'BountyMaxFundingReached' | 'BountyFundingWithdrawal' | 'BountyCreatorCherryWithdrawal' | 'BountyCreatorOracleRewardWithdrawal' | 'BountyOracleRewardWithdrawal' | 'BountyRemoved' | 'WorkEntryAnnounced' | 'WorkSubmitted' | 'OracleJudgmentSubmitted' | 'WorkEntrantFundsWithdrawn' | 'BountyContributorRemarked' | 'BountyOracleRemarked' | 'BountyEntrantRemarked' | 'BountyCreatorRemarked' | 'WorkSubmissionPeriodEnded' | 'WorkEntrantStakeUnlocked' | 'WorkEntrantStakeSlashed' | 'FunderStateBloatBondWithdrawn' | 'CreatorStateBloatBondWithdrawn';
   }
 
-  /** @name PalletBountyBountyParametersBTreeSet (86) */
+  /** @name PalletBountyBountyParametersBTreeSet (87) */
   export interface PalletBountyBountyParametersBTreeSet extends Struct {
     readonly oracle: PalletBountyBountyActor;
     readonly contractType: PalletBountyAssuranceContractTypeBTreeSet;
@@ -750,7 +735,7 @@ declare module '@polkadot/types/lookup' {
     readonly fundingType: PalletBountyFundingType;
   }
 
-  /** @name PalletBountyBountyActor (87) */
+  /** @name PalletBountyBountyActor (88) */
   export interface PalletBountyBountyActor extends Enum {
     readonly isCouncil: boolean;
     readonly isMember: boolean;
@@ -758,7 +743,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Council' | 'Member';
   }
 
-  /** @name PalletBountyAssuranceContractTypeBTreeSet (88) */
+  /** @name PalletBountyAssuranceContractTypeBTreeSet (89) */
   export interface PalletBountyAssuranceContractTypeBTreeSet extends Enum {
     readonly isOpen: boolean;
     readonly isClosed: boolean;
@@ -766,7 +751,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Open' | 'Closed';
   }
 
-  /** @name PalletBountyFundingType (89) */
+  /** @name PalletBountyFundingType (90) */
   export interface PalletBountyFundingType extends Enum {
     readonly isPerpetual: boolean;
     readonly asPerpetual: {
@@ -780,7 +765,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Perpetual' | 'Limited';
   }
 
-  /** @name PalletBountyOracleWorkEntryJudgment (91) */
+  /** @name PalletBountyOracleWorkEntryJudgment (92) */
   export interface PalletBountyOracleWorkEntryJudgment extends Enum {
     readonly isWinner: boolean;
     readonly asWinner: {
@@ -794,7 +779,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Winner' | 'Rejected';
   }
 
-  /** @name PalletUtilityRawEvent (94) */
+  /** @name PalletUtilityRawEvent (95) */
   export interface PalletUtilityRawEvent extends Enum {
     readonly isSignaled: boolean;
     readonly asSignaled: Bytes;
@@ -807,7 +792,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Signaled' | 'RuntimeUpgraded' | 'UpdatedWorkingGroupBudget' | 'TokensBurned';
   }
 
-  /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (95) */
+  /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (96) */
   export interface PalletCommonWorkingGroupIterableEnumsWorkingGroup extends Enum {
     readonly isForum: boolean;
     readonly isStorage: boolean;
@@ -821,14 +806,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'App' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership';
   }
 
-  /** @name PalletCommonBalanceKind (96) */
+  /** @name PalletCommonBalanceKind (97) */
   export interface PalletCommonBalanceKind extends Enum {
     readonly isPositive: boolean;
     readonly isNegative: boolean;
     readonly type: 'Positive' | 'Negative';
   }
 
-  /** @name PalletContentRawEvent (97) */
+  /** @name PalletContentRawEvent (98) */
   export interface PalletContentRawEvent extends Enum {
     readonly isCuratorGroupCreated: boolean;
     readonly asCuratorGroupCreated: u64;
@@ -879,11 +864,9 @@ declare module '@polkadot/types/lookup' {
     readonly isVideoAssetsDeletedByModerator: boolean;
     readonly asVideoAssetsDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, bool, Bytes]>;
     readonly isChannelPayoutsUpdated: boolean;
-    readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>]>;
+    readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
     readonly isChannelRewardUpdated: boolean;
-    readonly asChannelRewardUpdated: ITuple<[u128, u64]>;
-    readonly isCouncilRewardClaimed: boolean;
-    readonly asCouncilRewardClaimed: ITuple<[u64, u128]>;
+    readonly asChannelRewardUpdated: ITuple<[u128, u128, u64]>;
     readonly isEnglishAuctionStarted: boolean;
     readonly asEnglishAuctionStarted: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
     readonly isOpenAuctionStarted: boolean;
@@ -940,10 +923,12 @@ declare module '@polkadot/types/lookup' {
     readonly asToggledNftLimits: bool;
     readonly isCreatorTokenIssued: boolean;
     readonly asCreatorTokenIssued: ITuple<[PalletContentPermissionsContentActor, u64, u64]>;
-    readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'CouncilRewardClaimed' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued';
+    readonly isCreatorTokenIssuerRemarked: boolean;
+    readonly asCreatorTokenIssuerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued' | 'CreatorTokenIssuerRemarked';
   }
 
-  /** @name PalletContentPermissionsContentActor (98) */
+  /** @name PalletContentPermissionsContentActor (99) */
   export interface PalletContentPermissionsContentActor extends Enum {
     readonly isCurator: boolean;
     readonly asCurator: ITuple<[u64, u64]>;
@@ -953,7 +938,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Curator' | 'Member' | 'Lead';
   }
 
-  /** @name PalletContentChannelRecord (99) */
+  /** @name PalletContentChannelRecord (100) */
   export interface PalletContentChannelRecord extends Struct {
     readonly owner: PalletContentChannelOwner;
     readonly numVideos: u64;
@@ -971,7 +956,7 @@ declare module '@polkadot/types/lookup' {
     readonly channelStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
   }
 
-  /** @name PalletContentIterableEnumsChannelActionPermission (103) */
+  /** @name PalletContentIterableEnumsChannelActionPermission (104) */
   export interface PalletContentIterableEnumsChannelActionPermission extends Enum {
     readonly isUpdateChannelMetadata: boolean;
     readonly isManageNonVideoChannelAssets: boolean;
@@ -994,10 +979,12 @@ declare module '@polkadot/types/lookup' {
     readonly isReduceCreatorTokenPatronageRate: boolean;
     readonly isManageRevenueSplits: boolean;
     readonly isDeissueCreatorToken: boolean;
-    readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken';
+    readonly isAmmControl: boolean;
+    readonly isCreatorTokenRemarks: boolean;
+    readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken' | 'AmmControl' | 'CreatorTokenRemarks';
   }
 
-  /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (110) */
+  /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (111) */
   export interface PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature extends Enum {
     readonly isChannelFundsTransfer: boolean;
     readonly isCreatorCashout: boolean;
@@ -1009,13 +996,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ChannelFundsTransfer' | 'CreatorCashout' | 'VideoNftIssuance' | 'VideoCreation' | 'VideoUpdate' | 'ChannelUpdate' | 'CreatorTokenIssuance';
   }
 
-  /** @name PalletCommonBloatBondRepayableBloatBond (113) */
+  /** @name PalletCommonBloatBondRepayableBloatBond (114) */
   export interface PalletCommonBloatBondRepayableBloatBond extends Struct {
     readonly repaymentRestrictedTo: Option<AccountId32>;
     readonly amount: u128;
   }
 
-  /** @name PalletContentChannelOwner (114) */
+  /** @name PalletContentChannelOwner (115) */
   export interface PalletContentChannelOwner extends Enum {
     readonly isMember: boolean;
     readonly asMember: u64;
@@ -1024,7 +1011,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Member' | 'CuratorGroup';
   }
 
-  /** @name PalletContentChannelTransferStatus (115) */
+  /** @name PalletContentChannelTransferStatus (116) */
   export interface PalletContentChannelTransferStatus extends Enum {
     readonly isNoActiveTransfer: boolean;
     readonly isPendingTransfer: boolean;
@@ -1032,32 +1019,32 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NoActiveTransfer' | 'PendingTransfer';
   }
 
-  /** @name PalletContentPendingTransfer (116) */
+  /** @name PalletContentPendingTransfer (117) */
   export interface PalletContentPendingTransfer extends Struct {
     readonly newOwner: PalletContentChannelOwner;
     readonly transferParams: PalletContentTransferCommitmentParametersBoundedBTreeMap;
   }
 
-  /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (117) */
+  /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (118) */
   export interface PalletContentTransferCommitmentParametersBoundedBTreeMap extends Struct {
     readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
     readonly price: u128;
     readonly transferId: u64;
   }
 
-  /** @name PalletContentLimitPerPeriod (118) */
+  /** @name PalletContentLimitPerPeriod (119) */
   export interface PalletContentLimitPerPeriod extends Struct {
     readonly limit: u64;
     readonly blockNumberPeriod: u32;
   }
 
-  /** @name PalletContentNftCounter (119) */
+  /** @name PalletContentNftCounter (120) */
   export interface PalletContentNftCounter extends Struct {
     readonly counter: u64;
     readonly lastUpdated: u32;
   }
 
-  /** @name PalletContentNftTypesEnglishAuctionParamsRecord (120) */
+  /** @name PalletContentNftTypesEnglishAuctionParamsRecord (121) */
   export interface PalletContentNftTypesEnglishAuctionParamsRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -1068,7 +1055,7 @@ declare module '@polkadot/types/lookup' {
     readonly minBidStep: u128;
   }
 
-  /** @name PalletContentNftTypesOpenAuctionParamsRecord (122) */
+  /** @name PalletContentNftTypesOpenAuctionParamsRecord (123) */
   export interface PalletContentNftTypesOpenAuctionParamsRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -1077,7 +1064,7 @@ declare module '@polkadot/types/lookup' {
     readonly bidLockDuration: u32;
   }
 
-  /** @name PalletContentNftTypesNftIssuanceParametersRecord (123) */
+  /** @name PalletContentNftTypesNftIssuanceParametersRecord (124) */
   export interface PalletContentNftTypesNftIssuanceParametersRecord extends Struct {
     readonly royalty: Option<Perbill>;
     readonly nftMetadata: Bytes;
@@ -1085,7 +1072,7 @@ declare module '@polkadot/types/lookup' {
     readonly initTransactionalStatus: PalletContentNftTypesInitTransactionalStatusRecord;
   }
 
-  /** @name PalletContentNftTypesInitTransactionalStatusRecord (124) */
+  /** @name PalletContentNftTypesInitTransactionalStatusRecord (125) */
   export interface PalletContentNftTypesInitTransactionalStatusRecord extends Enum {
     readonly isIdle: boolean;
     readonly isBuyNow: boolean;
@@ -1099,7 +1086,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Idle' | 'BuyNow' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction';
   }
 
-  /** @name PalletContentChannelCreationParametersRecord (126) */
+  /** @name PalletContentChannelCreationParametersRecord (127) */
   export interface PalletContentChannelCreationParametersRecord extends Struct {
     readonly assets: Option<PalletContentStorageAssetsRecord>;
     readonly meta: Option<Bytes>;
@@ -1110,25 +1097,25 @@ declare module '@polkadot/types/lookup' {
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletContentStorageAssetsRecord (127) */
+  /** @name PalletContentStorageAssetsRecord (128) */
   export interface PalletContentStorageAssetsRecord extends Struct {
     readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
     readonly expectedDataSizeFee: u128;
   }
 
-  /** @name PalletStorageDataObjectCreationParameters (129) */
+  /** @name PalletStorageDataObjectCreationParameters (130) */
   export interface PalletStorageDataObjectCreationParameters extends Struct {
     readonly size_: u64;
     readonly ipfsContentId: Bytes;
   }
 
-  /** @name PalletStorageDistributionBucketIdRecord (130) */
+  /** @name PalletStorageDistributionBucketIdRecord (131) */
   export interface PalletStorageDistributionBucketIdRecord extends Struct {
     readonly distributionBucketFamilyId: u64;
     readonly distributionBucketIndex: u64;
   }
 
-  /** @name PalletContentChannelUpdateParametersRecord (137) */
+  /** @name PalletContentChannelUpdateParametersRecord (138) */
   export interface PalletContentChannelUpdateParametersRecord extends Struct {
     readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
     readonly newMeta: Option<Bytes>;
@@ -1138,7 +1125,7 @@ declare module '@polkadot/types/lookup' {
     readonly storageBucketsNumWitness: Option<u32>;
   }
 
-  /** @name PalletContentVideoCreationParametersRecord (139) */
+  /** @name PalletContentVideoCreationParametersRecord (140) */
   export interface PalletContentVideoCreationParametersRecord extends Struct {
     readonly assets: Option<PalletContentStorageAssetsRecord>;
     readonly meta: Option<Bytes>;
@@ -1148,7 +1135,7 @@ declare module '@polkadot/types/lookup' {
     readonly storageBucketsNumWitness: u32;
   }
 
-  /** @name PalletContentVideoUpdateParametersRecord (141) */
+  /** @name PalletContentVideoUpdateParametersRecord (142) */
   export interface PalletContentVideoUpdateParametersRecord extends Struct {
     readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
     readonly newMeta: Option<Bytes>;
@@ -1158,7 +1145,7 @@ declare module '@polkadot/types/lookup' {
     readonly storageBucketsNumWitness: Option<u32>;
   }
 
-  /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (144) */
+  /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (145) */
   export interface PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction extends Enum {
     readonly isHideVideo: boolean;
     readonly isHideChannel: boolean;
@@ -1173,14 +1160,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideo' | 'DeleteChannel' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
   }
 
-  /** @name PalletContentTransferCommitmentParametersBTreeMap (148) */
+  /** @name PalletContentTransferCommitmentParametersBTreeMap (149) */
   export interface PalletContentTransferCommitmentParametersBTreeMap extends Struct {
     readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
     readonly price: u128;
     readonly transferId: u64;
   }
 
-  /** @name PalletContentUpdateChannelPayoutsParametersRecord (149) */
+  /** @name PalletContentUpdateChannelPayoutsParametersRecord (150) */
   export interface PalletContentUpdateChannelPayoutsParametersRecord extends Struct {
     readonly commitment: Option<H256>;
     readonly payload: Option<PalletContentChannelPayoutsPayloadParametersRecord>;
@@ -1189,15 +1176,14 @@ declare module '@polkadot/types/lookup' {
     readonly channelCashoutsEnabled: Option<bool>;
   }
 
-  /** @name PalletContentChannelPayoutsPayloadParametersRecord (150) */
+  /** @name PalletContentChannelPayoutsPayloadParametersRecord (151) */
   export interface PalletContentChannelPayoutsPayloadParametersRecord extends Struct {
-    readonly uploaderAccount: AccountId32;
     readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
     readonly expectedDataSizeFee: u128;
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletContentChannelFundsDestination (154) */
+  /** @name PalletContentChannelFundsDestination (155) */
   export interface PalletContentChannelFundsDestination extends Enum {
     readonly isAccountId: boolean;
     readonly asAccountId: AccountId32;
@@ -1205,14 +1191,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AccountId' | 'CouncilBudget';
   }
 
-  /** @name PalletContentNftLimitPeriod (155) */
+  /** @name PalletContentNftLimitPeriod (156) */
   export interface PalletContentNftLimitPeriod extends Enum {
     readonly isDaily: boolean;
     readonly isWeekly: boolean;
     readonly type: 'Daily' | 'Weekly';
   }
 
-  /** @name PalletStorageRawEvent (156) */
+  /** @name PalletStorageRawEvent (157) */
   export interface PalletStorageRawEvent extends Enum {
     readonly isStorageBucketCreated: boolean;
     readonly asStorageBucketCreated: ITuple<[u64, Option<u64>, bool, u64, u64]>;
@@ -1301,7 +1287,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
   }
 
-  /** @name PalletStorageUploadParametersRecord (157) */
+  /** @name PalletStorageUploadParametersRecord (158) */
   export interface PalletStorageUploadParametersRecord extends Struct {
     readonly bagId: PalletStorageBagIdType;
     readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1310,7 +1296,7 @@ declare module '@polkadot/types/lookup' {
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletStorageBagIdType (158) */
+  /** @name PalletStorageBagIdType (159) */
   export interface PalletStorageBagIdType extends Enum {
     readonly isStatic: boolean;
     readonly asStatic: PalletStorageStaticBagId;
@@ -1319,7 +1305,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Static' | 'Dynamic';
   }
 
-  /** @name PalletStorageStaticBagId (159) */
+  /** @name PalletStorageStaticBagId (160) */
   export interface PalletStorageStaticBagId extends Enum {
     readonly isCouncil: boolean;
     readonly isWorkingGroup: boolean;
@@ -1327,7 +1313,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Council' | 'WorkingGroup';
   }
 
-  /** @name PalletStorageDynamicBagIdType (160) */
+  /** @name PalletStorageDynamicBagIdType (161) */
   export interface PalletStorageDynamicBagIdType extends Enum {
     readonly isMember: boolean;
     readonly asMember: u64;
@@ -1336,7 +1322,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Member' | 'Channel';
   }
 
-  /** @name PalletStorageDynBagCreationParametersRecord (161) */
+  /** @name PalletStorageDynBagCreationParametersRecord (162) */
   export interface PalletStorageDynBagCreationParametersRecord extends Struct {
     readonly bagId: PalletStorageDynamicBagIdType;
     readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1347,7 +1333,7 @@ declare module '@polkadot/types/lookup' {
     readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
   }
 
-  /** @name PalletStorageVoucher (164) */
+  /** @name PalletStorageVoucher (165) */
   export interface PalletStorageVoucher extends Struct {
     readonly sizeLimit: u64;
     readonly objectsLimit: u64;
@@ -1355,21 +1341,21 @@ declare module '@polkadot/types/lookup' {
     readonly objectsUsed: u64;
   }
 
-  /** @name PalletStorageDynamicBagType (165) */
+  /** @name PalletStorageDynamicBagType (166) */
   export interface PalletStorageDynamicBagType extends Enum {
     readonly isMember: boolean;
     readonly isChannel: boolean;
     readonly type: 'Member' | 'Channel';
   }
 
-  /** @name PalletProjectTokenEventsRawEvent (169) */
+  /** @name PalletProjectTokenEventsRawEvent (170) */
   export interface PalletProjectTokenEventsRawEvent extends Enum {
     readonly isTokenAmountTransferred: boolean;
-    readonly asTokenAmountTransferred: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
+    readonly asTokenAmountTransferred: ITuple<[u64, u64, PalletProjectTokenTransfers, Bytes]>;
     readonly isTokenAmountTransferredByIssuer: boolean;
-    readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
+    readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, PalletProjectTokenTransfers, Bytes]>;
     readonly isPatronageRateDecreasedTo: boolean;
-    readonly asPatronageRateDecreasedTo: ITuple<[u64, Perquintill]>;
+    readonly asPatronageRateDecreasedTo: ITuple<[u64, Permill]>;
     readonly isPatronageCreditClaimed: boolean;
     readonly asPatronageCreditClaimed: ITuple<[u64, u128, u64]>;
     readonly isRevenueSplitIssued: boolean;
@@ -1400,10 +1386,20 @@ declare module '@polkadot/types/lookup' {
     readonly asTransferPolicyChangedToPermissionless: u64;
     readonly isTokensBurned: boolean;
     readonly asTokensBurned: ITuple<[u64, u64, u128]>;
-    readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned';
-  }
-
-  /** @name PalletProjectTokenTransferPolicy (170) */
+    readonly isAmmActivated: boolean;
+    readonly asAmmActivated: ITuple<[u64, u64, PalletProjectTokenAmmCurve]>;
+    readonly isTokensBoughtOnAmm: boolean;
+    readonly asTokensBoughtOnAmm: ITuple<[u64, u64, u128, u128]>;
+    readonly isTokensSoldOnAmm: boolean;
+    readonly asTokensSoldOnAmm: ITuple<[u64, u64, u128, u128]>;
+    readonly isAmmDeactivated: boolean;
+    readonly asAmmDeactivated: ITuple<[u64, u64, u128]>;
+    readonly isMaxYearlyPatronageRateUpdated: boolean;
+    readonly asMaxYearlyPatronageRateUpdated: Permill;
+    readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned' | 'AmmActivated' | 'TokensBoughtOnAmm' | 'TokensSoldOnAmm' | 'AmmDeactivated' | 'MaxYearlyPatronageRateUpdated';
+  }
+
+  /** @name PalletProjectTokenTransferPolicy (171) */
   export interface PalletProjectTokenTransferPolicy extends Enum {
     readonly isPermissionless: boolean;
     readonly isPermissioned: boolean;
@@ -1411,7 +1407,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Permissionless' | 'Permissioned';
   }
 
-  /** @name PalletProjectTokenTokenIssuanceParameters (171) */
+  /** @name PalletProjectTokenTokenIssuanceParameters (172) */
   export interface PalletProjectTokenTokenIssuanceParameters extends Struct {
     readonly initialAllocation: BTreeMap<u64, PalletProjectTokenTokenAllocation>;
     readonly symbol: H256;
@@ -1420,20 +1416,20 @@ declare module '@polkadot/types/lookup' {
     readonly revenueSplitRate: Permill;
   }
 
-  /** @name PalletProjectTokenTokenAllocation (172) */
+  /** @name PalletProjectTokenTokenAllocation (173) */
   export interface PalletProjectTokenTokenAllocation extends Struct {
     readonly amount: u128;
     readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
   }
 
-  /** @name PalletProjectTokenVestingScheduleParams (173) */
+  /** @name PalletProjectTokenVestingScheduleParams (174) */
   export interface PalletProjectTokenVestingScheduleParams extends Struct {
     readonly linearVestingDuration: u32;
     readonly blocksBeforeCliff: u32;
     readonly cliffAmountPercentage: Permill;
   }
 
-  /** @name PalletProjectTokenTransferPolicyParams (176) */
+  /** @name PalletProjectTokenTransferPolicyParams (177) */
   export interface PalletProjectTokenTransferPolicyParams extends Enum {
     readonly isPermissionless: boolean;
     readonly isPermissioned: boolean;
@@ -1441,20 +1437,23 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Permissionless' | 'Permissioned';
   }
 
-  /** @name PalletProjectTokenWhitelistParams (177) */
+  /** @name PalletProjectTokenWhitelistParams (178) */
   export interface PalletProjectTokenWhitelistParams extends Struct {
     readonly commitment: H256;
     readonly payload: Option<PalletProjectTokenSingleDataObjectUploadParams>;
   }
 
-  /** @name PalletProjectTokenSingleDataObjectUploadParams (178) */
+  /** @name PalletProjectTokenSingleDataObjectUploadParams (179) */
   export interface PalletProjectTokenSingleDataObjectUploadParams extends Struct {
     readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
     readonly expectedDataSizeFee: u128;
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletProjectTokenValidated (185) */
+  /** @name PalletProjectTokenTransfers (185) */
+  export interface PalletProjectTokenTransfers extends BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment> {}
+
+  /** @name PalletProjectTokenValidated (186) */
   export interface PalletProjectTokenValidated extends Enum {
     readonly isExisting: boolean;
     readonly asExisting: u64;
@@ -1463,19 +1462,19 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Existing' | 'NonExisting';
   }
 
-  /** @name PalletProjectTokenValidatedPayment (186) */
+  /** @name PalletProjectTokenValidatedPayment (187) */
   export interface PalletProjectTokenValidatedPayment extends Struct {
     readonly payment: PalletProjectTokenPaymentWithVesting;
     readonly vestingCleanupCandidate: Option<PalletProjectTokenVestingSource>;
   }
 
-  /** @name PalletProjectTokenPaymentWithVesting (187) */
+  /** @name PalletProjectTokenPaymentWithVesting (188) */
   export interface PalletProjectTokenPaymentWithVesting extends Struct {
     readonly amount: u128;
     readonly vestingSchedule: Option<PalletProjectTokenVestingScheduleParams>;
   }
 
-  /** @name PalletProjectTokenVestingSource (189) */
+  /** @name PalletProjectTokenVestingSource (190) */
   export interface PalletProjectTokenVestingSource extends Enum {
     readonly isInitialIssuance: boolean;
     readonly isSale: boolean;
@@ -1485,7 +1484,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InitialIssuance' | 'Sale' | 'IssuerTransfer';
   }
 
-  /** @name PalletProjectTokenTokenSale (193) */
+  /** @name PalletProjectTokenTokenSale (194) */
   export interface PalletProjectTokenTokenSale extends Struct {
     readonly unitPrice: u128;
     readonly quantityLeft: u128;
@@ -1499,7 +1498,14 @@ declare module '@polkadot/types/lookup' {
     readonly autoFinalize: bool;
   }
 
-  /** @name PalletProposalsEngineRawEvent (195) */
+  /** @name PalletProjectTokenAmmCurve (195) */
+  export interface PalletProjectTokenAmmCurve extends Struct {
+    readonly slope: u128;
+    readonly intercept: u128;
+    readonly providedSupply: u128;
+  }
+
+  /** @name PalletProposalsEngineRawEvent (196) */
   export interface PalletProposalsEngineRawEvent extends Enum {
     readonly isProposalStatusUpdated: boolean;
     readonly asProposalStatusUpdated: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
@@ -1516,7 +1522,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ProposalStatusUpdated' | 'ProposalDecisionMade' | 'ProposalExecuted' | 'Voted' | 'ProposalCancelled' | 'ProposerRemarked';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesProposalStatus (196) */
+  /** @name PalletProposalsEngineProposalStatusesProposalStatus (197) */
   export interface PalletProposalsEngineProposalStatusesProposalStatus extends Enum {
     readonly isActive: boolean;
     readonly isPendingExecution: boolean;
@@ -1525,7 +1531,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Active' | 'PendingExecution' | 'PendingConstitutionality';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesProposalDecision (197) */
+  /** @name PalletProposalsEngineProposalStatusesProposalDecision (198) */
   export interface PalletProposalsEngineProposalStatusesProposalDecision extends Enum {
     readonly isCanceled: boolean;
     readonly isCanceledByRuntime: boolean;
@@ -1538,14 +1544,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Canceled' | 'CanceledByRuntime' | 'Vetoed' | 'Rejected' | 'Slashed' | 'Expired' | 'Approved';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (198) */
+  /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (199) */
   export interface PalletProposalsEngineProposalStatusesApprovedProposalDecision extends Enum {
     readonly isPendingExecution: boolean;
     readonly isPendingConstitutionality: boolean;
     readonly type: 'PendingExecution' | 'PendingConstitutionality';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesExecutionStatus (199) */
+  /** @name PalletProposalsEngineProposalStatusesExecutionStatus (200) */
   export interface PalletProposalsEngineProposalStatusesExecutionStatus extends Enum {
     readonly isExecuted: boolean;
     readonly isExecutionFailed: boolean;
@@ -1555,7 +1561,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Executed' | 'ExecutionFailed';
   }
 
-  /** @name PalletProposalsEngineVoteKind (200) */
+  /** @name PalletProposalsEngineVoteKind (201) */
   export interface PalletProposalsEngineVoteKind extends Enum {
     readonly isApprove: boolean;
     readonly isReject: boolean;
@@ -1564,7 +1570,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Approve' | 'Reject' | 'Slash' | 'Abstain';
   }
 
-  /** @name PalletProposalsDiscussionRawEvent (201) */
+  /** @name PalletProposalsDiscussionRawEvent (202) */
   export interface PalletProposalsDiscussionRawEvent extends Enum {
     readonly isThreadCreated: boolean;
     readonly asThreadCreated: ITuple<[u64, u64]>;
@@ -1579,7 +1585,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ThreadCreated' | 'PostCreated' | 'PostUpdated' | 'ThreadModeChanged' | 'PostDeleted';
   }
 
-  /** @name PalletProposalsDiscussionThreadModeBTreeSet (202) */
+  /** @name PalletProposalsDiscussionThreadModeBTreeSet (203) */
   export interface PalletProposalsDiscussionThreadModeBTreeSet extends Enum {
     readonly isOpen: boolean;
     readonly isClosed: boolean;
@@ -1587,14 +1593,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Open' | 'Closed';
   }
 
-  /** @name PalletProposalsCodexRawEvent (203) */
+  /** @name PalletProposalsCodexRawEvent (204) */
   export interface PalletProposalsCodexRawEvent extends Enum {
     readonly isProposalCreated: boolean;
     readonly asProposalCreated: ITuple<[u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
     readonly type: 'ProposalCreated';
   }
 
-  /** @name PalletProposalsCodexGeneralProposalParams (204) */
+  /** @name PalletProposalsCodexGeneralProposalParams (205) */
   export interface PalletProposalsCodexGeneralProposalParams extends Struct {
     readonly memberId: u64;
     readonly title: Bytes;
@@ -1603,7 +1609,7 @@ declare module '@polkadot/types/lookup' {
     readonly exactExecutionBlock: Option<u32>;
   }
 
-  /** @name PalletProposalsCodexProposalDetails (205) */
+  /** @name PalletProposalsCodexProposalDetails (206) */
   export interface PalletProposalsCodexProposalDetails extends Enum {
     readonly isSignal: boolean;
     readonly asSignal: Bytes;
@@ -1651,16 +1657,18 @@ declare module '@polkadot/types/lookup' {
     readonly asUpdateGlobalNftLimit: ITuple<[PalletContentNftLimitPeriod, u64]>;
     readonly isUpdateChannelPayouts: boolean;
     readonly asUpdateChannelPayouts: PalletContentUpdateChannelPayoutsParametersRecord;
-    readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts';
+    readonly isUpdateMaxYearlyPatronageRate: boolean;
+    readonly asUpdateMaxYearlyPatronageRate: Permill;
+    readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts' | 'UpdateMaxYearlyPatronageRate';
   }
 
-  /** @name PalletCommonFundingRequestParameters (207) */
+  /** @name PalletCommonFundingRequestParameters (208) */
   export interface PalletCommonFundingRequestParameters extends Struct {
     readonly account: AccountId32;
     readonly amount: u128;
   }
 
-  /** @name PalletProposalsCodexCreateOpeningParameters (208) */
+  /** @name PalletProposalsCodexCreateOpeningParameters (209) */
   export interface PalletProposalsCodexCreateOpeningParameters extends Struct {
     readonly description: Bytes;
     readonly stakePolicy: PalletWorkingGroupStakePolicy;
@@ -1668,27 +1676,27 @@ declare module '@polkadot/types/lookup' {
     readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
   }
 
-  /** @name PalletWorkingGroupStakePolicy (209) */
+  /** @name PalletWorkingGroupStakePolicy (210) */
   export interface PalletWorkingGroupStakePolicy extends Struct {
     readonly stakeAmount: u128;
     readonly leavingUnstakingPeriod: u32;
   }
 
-  /** @name PalletProposalsCodexFillOpeningParameters (210) */
+  /** @name PalletProposalsCodexFillOpeningParameters (211) */
   export interface PalletProposalsCodexFillOpeningParameters extends Struct {
     readonly openingId: u64;
     readonly applicationId: u64;
     readonly workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
   }
 
-  /** @name PalletProposalsCodexTerminateRoleParameters (211) */
+  /** @name PalletProposalsCodexTerminateRoleParameters (212) */
   export interface PalletProposalsCodexTerminateRoleParameters extends Struct {
     readonly workerId: u64;
     readonly slashingAmount: Option<u128>;
     readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
   }
 
-  /** @name PalletWorkingGroupRawEventInstance1 (212) */
+  /** @name PalletWorkingGroupRawEventInstance1 (213) */
   export interface PalletWorkingGroupRawEventInstance1 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1742,14 +1750,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupOpeningType (216) */
+  /** @name PalletWorkingGroupOpeningType (217) */
   export interface PalletWorkingGroupOpeningType extends Enum {
     readonly isLeader: boolean;
     readonly isRegular: boolean;
     readonly type: 'Leader' | 'Regular';
   }
 
-  /** @name PalletWorkingGroupApplyOnOpeningParams (217) */
+  /** @name PalletWorkingGroupApplyOnOpeningParams (218) */
   export interface PalletWorkingGroupApplyOnOpeningParams extends Struct {
     readonly memberId: u64;
     readonly openingId: u64;
@@ -1759,23 +1767,23 @@ declare module '@polkadot/types/lookup' {
     readonly stakeParameters: PalletWorkingGroupStakeParameters;
   }
 
-  /** @name PalletWorkingGroupStakeParameters (218) */
+  /** @name PalletWorkingGroupStakeParameters (219) */
   export interface PalletWorkingGroupStakeParameters extends Struct {
     readonly stake: u128;
     readonly stakingAccountId: AccountId32;
   }
 
-  /** @name PalletWorkingGroupInstance1 (219) */
+  /** @name PalletWorkingGroupInstance1 (220) */
   export type PalletWorkingGroupInstance1 = Null;
 
-  /** @name PalletWorkingGroupRewardPaymentType (220) */
+  /** @name PalletWorkingGroupRewardPaymentType (221) */
   export interface PalletWorkingGroupRewardPaymentType extends Enum {
     readonly isMissedReward: boolean;
     readonly isRegularReward: boolean;
     readonly type: 'MissedReward' | 'RegularReward';
   }
 
-  /** @name PalletWorkingGroupRawEventInstance2 (221) */
+  /** @name PalletWorkingGroupRawEventInstance2 (222) */
   export interface PalletWorkingGroupRawEventInstance2 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1829,10 +1837,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance2 (222) */
+  /** @name PalletWorkingGroupInstance2 (223) */
   export type PalletWorkingGroupInstance2 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance3 (223) */
+  /** @name PalletWorkingGroupRawEventInstance3 (224) */
   export interface PalletWorkingGroupRawEventInstance3 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1886,10 +1894,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance3 (224) */
+  /** @name PalletWorkingGroupInstance3 (225) */
   export type PalletWorkingGroupInstance3 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance4 (225) */
+  /** @name PalletWorkingGroupRawEventInstance4 (226) */
   export interface PalletWorkingGroupRawEventInstance4 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1943,10 +1951,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance4 (226) */
+  /** @name PalletWorkingGroupInstance4 (227) */
   export type PalletWorkingGroupInstance4 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance5 (227) */
+  /** @name PalletWorkingGroupRawEventInstance5 (228) */
   export interface PalletWorkingGroupRawEventInstance5 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2000,10 +2008,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance5 (228) */
+  /** @name PalletWorkingGroupInstance5 (229) */
   export type PalletWorkingGroupInstance5 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance6 (229) */
+  /** @name PalletWorkingGroupRawEventInstance6 (230) */
   export interface PalletWorkingGroupRawEventInstance6 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2057,10 +2065,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance6 (230) */
+  /** @name PalletWorkingGroupInstance6 (231) */
   export type PalletWorkingGroupInstance6 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance7 (231) */
+  /** @name PalletWorkingGroupRawEventInstance7 (232) */
   export interface PalletWorkingGroupRawEventInstance7 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2114,10 +2122,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance7 (232) */
+  /** @name PalletWorkingGroupInstance7 (233) */
   export type PalletWorkingGroupInstance7 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance8 (233) */
+  /** @name PalletWorkingGroupRawEventInstance8 (234) */
   export interface PalletWorkingGroupRawEventInstance8 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2171,10 +2179,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance8 (234) */
+  /** @name PalletWorkingGroupInstance8 (235) */
   export type PalletWorkingGroupInstance8 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance9 (235) */
+  /** @name PalletWorkingGroupRawEventInstance9 (236) */
   export interface PalletWorkingGroupRawEventInstance9 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2228,10 +2236,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance9 (236) */
+  /** @name PalletWorkingGroupInstance9 (237) */
   export type PalletWorkingGroupInstance9 = Null;
 
-  /** @name FrameSystemPhase (237) */
+  /** @name FrameSystemPhase (238) */
   export interface FrameSystemPhase extends Enum {
     readonly isApplyExtrinsic: boolean;
     readonly asApplyExtrinsic: u32;
@@ -2240,13 +2248,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
   }
 
-  /** @name FrameSystemLastRuntimeUpgradeInfo (241) */
+  /** @name FrameSystemLastRuntimeUpgradeInfo (242) */
   export interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
     readonly specVersion: Compact<u32>;
     readonly specName: Text;
   }
 
-  /** @name FrameSystemCall (244) */
+  /** @name FrameSystemCall (245) */
   export interface FrameSystemCall extends Enum {
     readonly isFillBlock: boolean;
     readonly asFillBlock: {
@@ -2288,21 +2296,21 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
   }
 
-  /** @name FrameSystemLimitsBlockWeights (247) */
+  /** @name FrameSystemLimitsBlockWeights (248) */
   export interface FrameSystemLimitsBlockWeights extends Struct {
     readonly baseBlock: u64;
     readonly maxBlock: u64;
     readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
   }
 
-  /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (248) */
+  /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (249) */
   export interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
     readonly normal: FrameSystemLimitsWeightsPerClass;
     readonly operational: FrameSystemLimitsWeightsPerClass;
     readonly mandatory: FrameSystemLimitsWeightsPerClass;
   }
 
-  /** @name FrameSystemLimitsWeightsPerClass (249) */
+  /** @name FrameSystemLimitsWeightsPerClass (250) */
   export interface FrameSystemLimitsWeightsPerClass extends Struct {
     readonly baseExtrinsic: u64;
     readonly maxExtrinsic: Option<u64>;
@@ -2310,25 +2318,25 @@ declare module '@polkadot/types/lookup' {
     readonly reserved: Option<u64>;
   }
 
-  /** @name FrameSystemLimitsBlockLength (250) */
+  /** @name FrameSystemLimitsBlockLength (251) */
   export interface FrameSystemLimitsBlockLength extends Struct {
     readonly max: FrameSupportWeightsPerDispatchClassU32;
   }
 
-  /** @name FrameSupportWeightsPerDispatchClassU32 (251) */
+  /** @name FrameSupportWeightsPerDispatchClassU32 (252) */
   export interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
     readonly normal: u32;
     readonly operational: u32;
     readonly mandatory: u32;
   }
 
-  /** @name FrameSupportWeightsRuntimeDbWeight (252) */
+  /** @name FrameSupportWeightsRuntimeDbWeight (253) */
   export interface FrameSupportWeightsRuntimeDbWeight extends Struct {
     readonly read: u64;
     readonly write: u64;
   }
 
-  /** @name SpVersionRuntimeVersion (253) */
+  /** @name SpVersionRuntimeVersion (254) */
   export interface SpVersionRuntimeVersion extends Struct {
     readonly specName: Text;
     readonly implName: Text;
@@ -2340,7 +2348,7 @@ declare module '@polkadot/types/lookup' {
     readonly stateVersion: u8;
   }
 
-  /** @name FrameSystemError (259) */
+  /** @name FrameSystemError (260) */
   export interface FrameSystemError extends Enum {
     readonly isInvalidSpecName: boolean;
     readonly isSpecVersionNeedsToIncrease: boolean;
@@ -2351,7 +2359,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
   }
 
-  /** @name PalletUtilityCall (260) */
+  /** @name PalletUtilityCall (261) */
   export interface PalletUtilityCall extends Enum {
     readonly isBatch: boolean;
     readonly asBatch: {
@@ -2378,7 +2386,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
   }
 
-  /** @name PalletBabeCall (263) */
+  /** @name PalletBabeCall (264) */
   export interface PalletBabeCall extends Enum {
     readonly isReportEquivocation: boolean;
     readonly asReportEquivocation: {
@@ -2397,7 +2405,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'PlanConfigChange';
   }
 
-  /** @name SpConsensusSlotsEquivocationProof (264) */
+  /** @name SpConsensusSlotsEquivocationProof (265) */
   export interface SpConsensusSlotsEquivocationProof extends Struct {
     readonly offender: SpConsensusBabeAppPublic;
     readonly slot: u64;
@@ -2405,7 +2413,7 @@ declare module '@polkadot/types/lookup' {
     readonly secondHeader: SpRuntimeHeader;
   }
 
-  /** @name SpRuntimeHeader (265) */
+  /** @name SpRuntimeHeader (266) */
   export interface SpRuntimeHeader extends Struct {
     readonly parentHash: H256;
     readonly number: Compact<u32>;
@@ -2414,20 +2422,20 @@ declare module '@polkadot/types/lookup' {
     readonly digest: SpRuntimeDigest;
   }
 
-  /** @name SpRuntimeBlakeTwo256 (266) */
+  /** @name SpRuntimeBlakeTwo256 (267) */
   export type SpRuntimeBlakeTwo256 = Null;
 
-  /** @name SpConsensusBabeAppPublic (267) */
+  /** @name SpConsensusBabeAppPublic (268) */
   export interface SpConsensusBabeAppPublic extends SpCoreSr25519Public {}
 
-  /** @name SpSessionMembershipProof (269) */
+  /** @name SpSessionMembershipProof (270) */
   export interface SpSessionMembershipProof extends Struct {
     readonly session: u32;
     readonly trieNodes: Vec<Bytes>;
     readonly validatorCount: u32;
   }
 
-  /** @name SpConsensusBabeDigestsNextConfigDescriptor (270) */
+  /** @name SpConsensusBabeDigestsNextConfigDescriptor (271) */
   export interface SpConsensusBabeDigestsNextConfigDescriptor extends Enum {
     readonly isV1: boolean;
     readonly asV1: {
@@ -2437,7 +2445,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'V1';
   }
 
-  /** @name SpConsensusBabeAllowedSlots (271) */
+  /** @name SpConsensusBabeAllowedSlots (272) */
   export interface SpConsensusBabeAllowedSlots extends Enum {
     readonly isPrimarySlots: boolean;
     readonly isPrimaryAndSecondaryPlainSlots: boolean;
@@ -2445,7 +2453,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'PrimarySlots' | 'PrimaryAndSecondaryPlainSlots' | 'PrimaryAndSecondaryVRFSlots';
   }
 
-  /** @name PalletTimestampCall (272) */
+  /** @name PalletTimestampCall (273) */
   export interface PalletTimestampCall extends Enum {
     readonly isSet: boolean;
     readonly asSet: {
@@ -2454,7 +2462,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Set';
   }
 
-  /** @name PalletAuthorshipCall (274) */
+  /** @name PalletAuthorshipCall (275) */
   export interface PalletAuthorshipCall extends Enum {
     readonly isSetUncles: boolean;
     readonly asSetUncles: {
@@ -2463,7 +2471,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'SetUncles';
   }
 
-  /** @name PalletBalancesCall (276) */
+  /** @name PalletBalancesCall (277) */
   export interface PalletBalancesCall extends Enum {
     readonly isTransfer: boolean;
     readonly asTransfer: {
@@ -2500,7 +2508,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
   }
 
-  /** @name PalletElectionProviderMultiPhaseCall (277) */
+  /** @name PalletElectionProviderMultiPhaseCall (278) */
   export interface PalletElectionProviderMultiPhaseCall extends Enum {
     readonly isSubmitUnsigned: boolean;
     readonly asSubmitUnsigned: {
@@ -2527,14 +2535,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'SubmitUnsigned' | 'SetMinimumUntrustedScore' | 'SetEmergencyElectionResult' | 'Submit' | 'GovernanceFallback';
   }
 
-  /** @name PalletElectionProviderMultiPhaseRawSolution (278) */
+  /** @name PalletElectionProviderMultiPhaseRawSolution (279) */
   export interface PalletElectionProviderMultiPhaseRawSolution extends Struct {
     readonly solution: JoystreamNodeRuntimeNposSolution16;
     readonly score: SpNposElectionsElectionScore;
     readonly round: u32;
   }
 
-  /** @name JoystreamNodeRuntimeNposSolution16 (279) */
+  /** @name JoystreamNodeRuntimeNposSolution16 (280) */
   export interface JoystreamNodeRuntimeNposSolution16 extends Struct {
     readonly votes1: Vec<ITuple<[Compact<u32>, Compact<u16>]>>;
     readonly votes2: Vec<ITuple<[Compact<u32>, ITuple<[Compact<u16>, Compact<PerU16>]>, Compact<u16>]>>;
@@ -2554,20 +2562,20 @@ declare module '@polkadot/types/lookup' {
     readonly votes16: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
   }
 
-  /** @name SpNposElectionsElectionScore (330) */
+  /** @name SpNposElectionsElectionScore (331) */
   export interface SpNposElectionsElectionScore extends Struct {
     readonly minimalStake: u128;
     readonly sumStake: u128;
     readonly sumStakeSquared: u128;
   }
 
-  /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (331) */
+  /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (332) */
   export interface PalletElectionProviderMultiPhaseSolutionOrSnapshotSize extends Struct {
     readonly voters: Compact<u32>;
     readonly targets: Compact<u32>;
   }
 
-  /** @name SpNposElectionsSupport (335) */
+  /** @name SpNposElectionsSupport (336) */
   export interface SpNposElectionsSupport extends Struct {
     readonly total: u128;
     readonly voters: Vec<ITuple<[AccountId32, u128]>>;
@@ -2851,30 +2859,7 @@ declare module '@polkadot/types/lookup' {
   /** @name SpCoreSr25519Signature (369) */
   export interface SpCoreSr25519Signature extends U8aFixed {}
 
-  /** @name PalletSudoCall (370) */
-  export interface PalletSudoCall extends Enum {
-    readonly isSudo: boolean;
-    readonly asSudo: {
-      readonly call: Call;
-    } & Struct;
-    readonly isSudoUncheckedWeight: boolean;
-    readonly asSudoUncheckedWeight: {
-      readonly call: Call;
-      readonly weight: u64;
-    } & Struct;
-    readonly isSetKey: boolean;
-    readonly asSetKey: {
-      readonly new_: AccountId32;
-    } & Struct;
-    readonly isSudoAs: boolean;
-    readonly asSudoAs: {
-      readonly who: AccountId32;
-      readonly call: Call;
-    } & Struct;
-    readonly type: 'Sudo' | 'SudoUncheckedWeight' | 'SetKey' | 'SudoAs';
-  }
-
-  /** @name PalletBagsListCall (371) */
+  /** @name PalletBagsListCall (370) */
   export interface PalletBagsListCall extends Enum {
     readonly isRebag: boolean;
     readonly asRebag: {
@@ -2887,7 +2872,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Rebag' | 'PutInFrontOf';
   }
 
-  /** @name PalletVestingCall (372) */
+  /** @name PalletVestingCall (371) */
   export interface PalletVestingCall extends Enum {
     readonly isVest: boolean;
     readonly isVestOther: boolean;
@@ -2913,14 +2898,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Vest' | 'VestOther' | 'VestedTransfer' | 'ForceVestedTransfer' | 'MergeSchedules';
   }
 
-  /** @name PalletVestingVestingInfo (373) */
+  /** @name PalletVestingVestingInfo (372) */
   export interface PalletVestingVestingInfo extends Struct {
     readonly locked: u128;
     readonly perBlock: u128;
     readonly startingBlock: u32;
   }
 
-  /** @name PalletMultisigCall (374) */
+  /** @name PalletMultisigCall (373) */
   export interface PalletMultisigCall extends Enum {
     readonly isAsMultiThreshold1: boolean;
     readonly asAsMultiThreshold1: {
@@ -2954,7 +2939,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
   }
 
-  /** @name PalletCouncilCall (377) */
+  /** @name PalletCouncilCall (376) */
   export interface PalletCouncilCall extends Enum {
     readonly isAnnounceCandidacy: boolean;
     readonly asAnnounceCandidacy: {
@@ -3015,7 +3000,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AnnounceCandidacy' | 'ReleaseCandidacyStake' | 'WithdrawCandidacy' | 'SetCandidacyNote' | 'SetBudget' | 'PlanBudgetRefill' | 'SetBudgetIncrement' | 'SetCouncilorReward' | 'FundingRequest' | 'FundCouncilBudget' | 'CouncilorRemark' | 'CandidateRemark';
   }
 
-  /** @name PalletReferendumCall (378) */
+  /** @name PalletReferendumCall (377) */
   export interface PalletReferendumCall extends Enum {
     readonly isVote: boolean;
     readonly asVote: {
@@ -3028,10 +3013,11 @@ declare module '@polkadot/types/lookup' {
       readonly voteOptionId: u64;
     } & Struct;
     readonly isReleaseVoteStake: boolean;
-    readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake';
+    readonly isOptOutOfVoting: boolean;
+    readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake' | 'OptOutOfVoting';
   }
 
-  /** @name PalletMembershipCall (379) */
+  /** @name PalletMembershipCall (378) */
   export interface PalletMembershipCall extends Enum {
     readonly isBuyMembership: boolean;
     readonly asBuyMembership: {
@@ -3106,6 +3092,7 @@ declare module '@polkadot/types/lookup' {
     readonly asMemberRemark: {
       readonly memberId: u64;
       readonly msg: Bytes;
+      readonly payment: Option<ITuple<[AccountId32, u128]>>;
     } & Struct;
     readonly isCreateMember: boolean;
     readonly asCreateMember: {
@@ -3114,7 +3101,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'BuyMembership' | 'UpdateProfile' | 'UpdateAccounts' | 'UpdateProfileVerification' | 'SetReferralCut' | 'TransferInvites' | 'InviteMember' | 'GiftMembership' | 'SetMembershipPrice' | 'SetLeaderInvitationQuota' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'AddStakingAccountCandidate' | 'RemoveStakingAccount' | 'ConfirmStakingAccount' | 'MemberRemark' | 'CreateMember';
   }
 
-  /** @name PalletForumCall (380) */
+  /** @name PalletForumCall (379) */
   export interface PalletForumCall extends Enum {
     readonly isUpdateCategoryMembershipOfModerator: boolean;
     readonly asUpdateCategoryMembershipOfModerator: {
@@ -3225,7 +3212,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
   }
 
-  /** @name PalletConstitutionCall (381) */
+  /** @name PalletConstitutionCall (380) */
   export interface PalletConstitutionCall extends Enum {
     readonly isAmendConstitution: boolean;
     readonly asAmendConstitution: {
@@ -3234,7 +3221,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AmendConstitution';
   }
 
-  /** @name PalletBountyCall (382) */
+  /** @name PalletBountyCall (381) */
   export interface PalletBountyCall extends Enum {
     readonly isCreateBounty: boolean;
     readonly asCreateBounty: {
@@ -3323,7 +3310,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'CreateBounty' | 'FundBounty' | 'TerminateBounty' | 'SwitchOracle' | 'WithdrawFunding' | 'AnnounceWorkEntry' | 'SubmitWork' | 'EndWorkingPeriod' | 'SubmitOracleJudgment' | 'WithdrawEntrantStake' | 'WithdrawOracleReward' | 'ContributorRemark' | 'OracleRemark' | 'EntrantRemark' | 'CreatorRemark';
   }
 
-  /** @name PalletContentCall (384) */
+  /** @name PalletContentCall (383) */
   export interface PalletContentCall extends Enum {
     readonly isCreateCuratorGroup: boolean;
     readonly asCreateCuratorGroup: {
@@ -3449,6 +3436,7 @@ declare module '@polkadot/types/lookup' {
     readonly isUpdateChannelPayouts: boolean;
     readonly asUpdateChannelPayouts: {
       readonly params: PalletContentUpdateChannelPayoutsParametersRecord;
+      readonly uploaderAccount: AccountId32;
     } & Struct;
     readonly isClaimChannelReward: boolean;
     readonly asClaimChannelReward: {
@@ -3591,6 +3579,12 @@ declare module '@polkadot/types/lookup' {
       readonly channelId: u64;
       readonly msg: Bytes;
     } & Struct;
+    readonly isCreatorTokenIssuerRemark: boolean;
+    readonly asCreatorTokenIssuerRemark: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly msg: Bytes;
+    } & Struct;
     readonly isChannelAgentRemark: boolean;
     readonly asChannelAgentRemark: {
       readonly actor: PalletContentPermissionsContentActor;
@@ -3654,7 +3648,7 @@ declare module '@polkadot/types/lookup' {
     readonly asCreatorTokenIssuerTransfer: {
       readonly actor: PalletContentPermissionsContentActor;
       readonly channelId: u64;
-      readonly outputs: PalletProjectTokenTransfersPaymentWithVesting;
+      readonly outputs: Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>>;
       readonly metadata: Bytes;
     } & Struct;
     readonly isMakeCreatorTokenPermissionless: boolean;
@@ -3695,43 +3689,54 @@ declare module '@polkadot/types/lookup' {
       readonly actor: PalletContentPermissionsContentActor;
       readonly channelId: u64;
     } & Struct;
-    readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken';
+    readonly isActivateAmm: boolean;
+    readonly asActivateAmm: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly params: PalletProjectTokenAmmParams;
+    } & Struct;
+    readonly isDeactivateAmm: boolean;
+    readonly asDeactivateAmm: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+    } & Struct;
+    readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'CreatorTokenIssuerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken' | 'ActivateAmm' | 'DeactivateAmm';
   }
 
-  /** @name PalletContentChannelBagWitness (385) */
+  /** @name PalletContentChannelBagWitness (384) */
   export interface PalletContentChannelBagWitness extends Struct {
     readonly storageBucketsNum: u32;
     readonly distributionBucketsNum: u32;
   }
 
-  /** @name PalletCommonMerkleTreeProofElementRecord (387) */
+  /** @name PalletCommonMerkleTreeProofElementRecord (386) */
   export interface PalletCommonMerkleTreeProofElementRecord extends Struct {
     readonly hash_: H256;
     readonly side: PalletCommonMerkleTreeSide;
   }
 
-  /** @name PalletCommonMerkleTreeSide (388) */
+  /** @name PalletCommonMerkleTreeSide (387) */
   export interface PalletCommonMerkleTreeSide extends Enum {
     readonly isLeft: boolean;
     readonly isRight: boolean;
     readonly type: 'Left' | 'Right';
   }
 
-  /** @name PalletContentPullPaymentElement (389) */
+  /** @name PalletContentPullPaymentElement (388) */
   export interface PalletContentPullPaymentElement extends Struct {
     readonly channelId: u64;
     readonly cumulativeRewardEarned: u128;
     readonly reason: H256;
   }
 
-  /** @name PalletContentInitTransferParameters (390) */
+  /** @name PalletContentInitTransferParameters (389) */
   export interface PalletContentInitTransferParameters extends Struct {
     readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
     readonly price: u128;
     readonly newOwner: PalletContentChannelOwner;
   }
 
-  /** @name PalletProjectTokenTokenSaleParams (391) */
+  /** @name PalletProjectTokenTokenSaleParams (390) */
   export interface PalletProjectTokenTokenSaleParams extends Struct {
     readonly unitPrice: u128;
     readonly upperBoundQuantity: u128;
@@ -3742,10 +3747,13 @@ declare module '@polkadot/types/lookup' {
     readonly metadata: Option<Bytes>;
   }
 
-  /** @name PalletProjectTokenTransfersPaymentWithVesting (392) */
-  export interface PalletProjectTokenTransfersPaymentWithVesting extends BTreeMap<u64, PalletProjectTokenPaymentWithVesting> {}
+  /** @name PalletProjectTokenAmmParams (394) */
+  export interface PalletProjectTokenAmmParams extends Struct {
+    readonly slope: u128;
+    readonly intercept: u128;
+  }
 
-  /** @name PalletStorageCall (396) */
+  /** @name PalletStorageCall (395) */
   export interface PalletStorageCall extends Enum {
     readonly isDeleteStorageBucket: boolean;
     readonly asDeleteStorageBucket: {
@@ -3909,10 +3917,6 @@ declare module '@polkadot/types/lookup' {
       readonly bucketId: PalletStorageDistributionBucketIdRecord;
       readonly metadata: Bytes;
     } & Struct;
-    readonly isSudoUploadDataObjects: boolean;
-    readonly asSudoUploadDataObjects: {
-      readonly params: PalletStorageUploadParametersRecord;
-    } & Struct;
     readonly isStorageOperatorRemark: boolean;
     readonly asStorageOperatorRemark: {
       readonly workerId: u64;
@@ -3925,16 +3929,16 @@ declare module '@polkadot/types/lookup' {
       readonly distributionBucketId: PalletStorageDistributionBucketIdRecord;
       readonly msg: Bytes;
     } & Struct;
-    readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'SudoUploadDataObjects' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
+    readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
   }
 
-  /** @name PalletProjectTokenCall (397) */
+  /** @name PalletProjectTokenCall (396) */
   export interface PalletProjectTokenCall extends Enum {
     readonly isTransfer: boolean;
     readonly asTransfer: {
       readonly srcMemberId: u64;
       readonly tokenId: u64;
-      readonly outputs: PalletProjectTokenTransfersPayment;
+      readonly outputs: Vec<ITuple<[u64, u128]>>;
       readonly metadata: Bytes;
     } & Struct;
     readonly isBurn: boolean;
@@ -3971,28 +3975,38 @@ declare module '@polkadot/types/lookup' {
       readonly tokenId: u64;
       readonly memberId: u64;
     } & Struct;
-    readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit';
-  }
-
-  /** @name PalletProjectTokenTransfersPayment (398) */
-  export interface PalletProjectTokenTransfersPayment extends BTreeMap<u64, PalletProjectTokenPayment> {}
-
-  /** @name PalletProjectTokenPayment (399) */
-  export interface PalletProjectTokenPayment extends Struct {
-    readonly amount: u128;
+    readonly isBuyOnAmm: boolean;
+    readonly asBuyOnAmm: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+      readonly amount: u128;
+      readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+    } & Struct;
+    readonly isSellOnAmm: boolean;
+    readonly asSellOnAmm: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+      readonly amount: u128;
+      readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+    } & Struct;
+    readonly isUpdateMaxYearlyPatronageRate: boolean;
+    readonly asUpdateMaxYearlyPatronageRate: {
+      readonly rate: Permill;
+    } & Struct;
+    readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit' | 'BuyOnAmm' | 'SellOnAmm' | 'UpdateMaxYearlyPatronageRate';
   }
 
-  /** @name PalletProjectTokenMerkleProof (403) */
+  /** @name PalletProjectTokenMerkleProof (400) */
   export interface PalletProjectTokenMerkleProof extends Vec<ITuple<[H256, PalletProjectTokenMerkleSide]>> {}
 
-  /** @name PalletProjectTokenMerkleSide (406) */
+  /** @name PalletProjectTokenMerkleSide (403) */
   export interface PalletProjectTokenMerkleSide extends Enum {
     readonly isRight: boolean;
     readonly isLeft: boolean;
     readonly type: 'Right' | 'Left';
   }
 
-  /** @name PalletProposalsEngineCall (407) */
+  /** @name PalletProposalsEngineCall (406) */
   export interface PalletProposalsEngineCall extends Enum {
     readonly isVote: boolean;
     readonly asVote: {
@@ -4019,7 +4033,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Vote' | 'CancelProposal' | 'VetoProposal' | 'ProposerRemark';
   }
 
-  /** @name PalletProposalsDiscussionCall (408) */
+  /** @name PalletProposalsDiscussionCall (407) */
   export interface PalletProposalsDiscussionCall extends Enum {
     readonly isAddPost: boolean;
     readonly asAddPost: {
@@ -4050,7 +4064,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AddPost' | 'DeletePost' | 'UpdatePost' | 'ChangeThreadMode';
   }
 
-  /** @name PalletProposalsCodexCall (409) */
+  /** @name PalletProposalsCodexCall (408) */
   export interface PalletProposalsCodexCall extends Enum {
     readonly isCreateProposal: boolean;
     readonly asCreateProposal: {
@@ -4060,7 +4074,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'CreateProposal';
   }
 
-  /** @name PalletWorkingGroupCall (410) */
+  /** @name PalletWorkingGroupCall (409) */
   export interface PalletWorkingGroupCall extends Enum {
     readonly isAddOpening: boolean;
     readonly asAddOpening: {
@@ -4160,7 +4174,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AddOpening' | 'ApplyOnOpening' | 'FillOpening' | 'UpdateRoleAccount' | 'LeaveRole' | 'TerminateRole' | 'SlashStake' | 'DecreaseStake' | 'IncreaseStake' | 'WithdrawApplication' | 'CancelOpening' | 'SetBudget' | 'UpdateRewardAccount' | 'UpdateRewardAmount' | 'SetStatusText' | 'SpendFromBudget' | 'FundWorkingGroupBudget' | 'LeadRemark' | 'WorkerRemark';
   }
 
-  /** @name JoystreamNodeRuntimeOriginCaller (419) */
+  /** @name JoystreamNodeRuntimeOriginCaller (418) */
   export interface JoystreamNodeRuntimeOriginCaller extends Enum {
     readonly isSystem: boolean;
     readonly asSystem: FrameSupportDispatchRawOrigin;
@@ -4168,7 +4182,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'System' | 'Void';
   }
 
-  /** @name FrameSupportDispatchRawOrigin (420) */
+  /** @name FrameSupportDispatchRawOrigin (419) */
   export interface FrameSupportDispatchRawOrigin extends Enum {
     readonly isRoot: boolean;
     readonly isSigned: boolean;
@@ -4177,16 +4191,16 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Root' | 'Signed' | 'None';
   }
 
-  /** @name SpCoreVoid (421) */
+  /** @name SpCoreVoid (420) */
   export type SpCoreVoid = Null;
 
-  /** @name PalletUtilityError (422) */
+  /** @name PalletUtilityError (421) */
   export interface PalletUtilityError extends Enum {
     readonly isTooManyCalls: boolean;
     readonly type: 'TooManyCalls';
   }
 
-  /** @name SpConsensusBabeDigestsPreDigest (429) */
+  /** @name SpConsensusBabeDigestsPreDigest (428) */
   export interface SpConsensusBabeDigestsPreDigest extends Enum {
     readonly isPrimary: boolean;
     readonly asPrimary: SpConsensusBabeDigestsPrimaryPreDigest;
@@ -4197,7 +4211,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Primary' | 'SecondaryPlain' | 'SecondaryVRF';
   }
 
-  /** @name SpConsensusBabeDigestsPrimaryPreDigest (430) */
+  /** @name SpConsensusBabeDigestsPrimaryPreDigest (429) */
   export interface SpConsensusBabeDigestsPrimaryPreDigest extends Struct {
     readonly authorityIndex: u32;
     readonly slot: u64;
@@ -4205,13 +4219,13 @@ declare module '@polkadot/types/lookup' {
     readonly vrfProof: U8aFixed;
   }
 
-  /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (431) */
+  /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (430) */
   export interface SpConsensusBabeDigestsSecondaryPlainPreDigest extends Struct {
     readonly authorityIndex: u32;
     readonly slot: u64;
   }
 
-  /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (432) */
+  /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (431) */
   export interface SpConsensusBabeDigestsSecondaryVRFPreDigest extends Struct {
     readonly authorityIndex: u32;
     readonly slot: u64;
@@ -4219,13 +4233,13 @@ declare module '@polkadot/types/lookup' {
     readonly vrfProof: U8aFixed;
   }
 
-  /** @name SpConsensusBabeBabeEpochConfiguration (434) */
+  /** @name SpConsensusBabeBabeEpochConfiguration (433) */
   export interface SpConsensusBabeBabeEpochConfiguration extends Struct {
     readonly c: ITuple<[u64, u64]>;
     readonly allowedSlots: SpConsensusBabeAllowedSlots;
   }
 
-  /** @name PalletBabeError (435) */
+  /** @name PalletBabeError (434) */
   export interface PalletBabeError extends Enum {
     readonly isInvalidEquivocationProof: boolean;
     readonly isInvalidKeyOwnershipProof: boolean;
@@ -4234,7 +4248,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidEquivocationProof' | 'InvalidKeyOwnershipProof' | 'DuplicateOffenceReport' | 'InvalidConfiguration';
   }
 
-  /** @name PalletAuthorshipUncleEntryItem (437) */
+  /** @name PalletAuthorshipUncleEntryItem (436) */
   export interface PalletAuthorshipUncleEntryItem extends Enum {
     readonly isInclusionHeight: boolean;
     readonly asInclusionHeight: u32;
@@ -4243,7 +4257,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InclusionHeight' | 'Uncle';
   }
 
-  /** @name PalletAuthorshipError (438) */
+  /** @name PalletAuthorshipError (437) */
   export interface PalletAuthorshipError extends Enum {
     readonly isInvalidUncleParent: boolean;
     readonly isUnclesAlreadySet: boolean;
@@ -4255,14 +4269,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
   }
 
-  /** @name PalletBalancesBalanceLock (440) */
+  /** @name PalletBalancesBalanceLock (439) */
   export interface PalletBalancesBalanceLock extends Struct {
     readonly id: U8aFixed;
     readonly amount: u128;
     readonly reasons: PalletBalancesReasons;
   }
 
-  /** @name PalletBalancesReasons (441) */
+  /** @name PalletBalancesReasons (440) */
   export interface PalletBalancesReasons extends Enum {
     readonly isFee: boolean;
     readonly isMisc: boolean;
@@ -4270,20 +4284,20 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Fee' | 'Misc' | 'All';
   }
 
-  /** @name PalletBalancesReserveData (444) */
+  /** @name PalletBalancesReserveData (443) */
   export interface PalletBalancesReserveData extends Struct {
     readonly id: U8aFixed;
     readonly amount: u128;
   }
 
-  /** @name PalletBalancesReleases (446) */
+  /** @name PalletBalancesReleases (445) */
   export interface PalletBalancesReleases extends Enum {
     readonly isV100: boolean;
     readonly isV200: boolean;
     readonly type: 'V100' | 'V200';
   }
 
-  /** @name PalletBalancesError (447) */
+  /** @name PalletBalancesError (446) */
   export interface PalletBalancesError extends Enum {
     readonly isVestingBalance: boolean;
     readonly isLiquidityRestrictions: boolean;
@@ -4296,14 +4310,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
   }
 
-  /** @name PalletTransactionPaymentReleases (449) */
+  /** @name PalletTransactionPaymentReleases (448) */
   export interface PalletTransactionPaymentReleases extends Enum {
     readonly isV1Ancient: boolean;
     readonly isV2: boolean;
     readonly type: 'V1Ancient' | 'V2';
   }
 
-  /** @name PalletElectionProviderMultiPhasePhase (450) */
+  /** @name PalletElectionProviderMultiPhasePhase (449) */
   export interface PalletElectionProviderMultiPhasePhase extends Enum {
     readonly isOff: boolean;
     readonly isSigned: boolean;
@@ -4313,20 +4327,20 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
   }
 
-  /** @name PalletElectionProviderMultiPhaseReadySolution (452) */
+  /** @name PalletElectionProviderMultiPhaseReadySolution (451) */
   export interface PalletElectionProviderMultiPhaseReadySolution extends Struct {
     readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
     readonly score: SpNposElectionsElectionScore;
     readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
   }
 
-  /** @name PalletElectionProviderMultiPhaseRoundSnapshot (453) */
+  /** @name PalletElectionProviderMultiPhaseRoundSnapshot (452) */
   export interface PalletElectionProviderMultiPhaseRoundSnapshot extends Struct {
     readonly voters: Vec<ITuple<[AccountId32, u64, Vec<AccountId32>]>>;
     readonly targets: Vec<AccountId32>;
   }
 
-  /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (461) */
+  /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (460) */
   export interface PalletElectionProviderMultiPhaseSignedSignedSubmission extends Struct {
     readonly who: AccountId32;
     readonly deposit: u128;
@@ -4334,7 +4348,7 @@ declare module '@polkadot/types/lookup' {
     readonly callFee: u128;
   }
 
-  /** @name PalletElectionProviderMultiPhaseError (462) */
+  /** @name PalletElectionProviderMultiPhaseError (461) */
   export interface PalletElectionProviderMultiPhaseError extends Enum {
     readonly isPreDispatchEarlySubmission: boolean;
     readonly isPreDispatchWrongWinnerCount: boolean;
@@ -4351,7 +4365,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed';
   }
 
-  /** @name PalletStakingStakingLedger (463) */
+  /** @name PalletStakingStakingLedger (462) */
   export interface PalletStakingStakingLedger extends Struct {
     readonly stash: AccountId32;
     readonly total: Compact<u128>;
@@ -4360,32 +4374,32 @@ declare module '@polkadot/types/lookup' {
     readonly claimedRewards: Vec<u32>;
   }
 
-  /** @name PalletStakingUnlockChunk (465) */
+  /** @name PalletStakingUnlockChunk (464) */
   export interface PalletStakingUnlockChunk extends Struct {
     readonly value: Compact<u128>;
     readonly era: Compact<u32>;
   }
 
-  /** @name PalletStakingNominations (467) */
+  /** @name PalletStakingNominations (466) */
   export interface PalletStakingNominations extends Struct {
     readonly targets: Vec<AccountId32>;
     readonly submittedIn: u32;
     readonly suppressed: bool;
   }
 
-  /** @name PalletStakingActiveEraInfo (468) */
+  /** @name PalletStakingActiveEraInfo (467) */
   export interface PalletStakingActiveEraInfo extends Struct {
     readonly index: u32;
     readonly start: Option<u64>;
   }
 
-  /** @name PalletStakingEraRewardPoints (470) */
+  /** @name PalletStakingEraRewardPoints (469) */
   export interface PalletStakingEraRewardPoints extends Struct {
     readonly total: u32;
     readonly individual: BTreeMap<AccountId32, u32>;
   }
 
-  /** @name PalletStakingForcing (474) */
+  /** @name PalletStakingForcing (473) */
   export interface PalletStakingForcing extends Enum {
     readonly isNotForcing: boolean;
     readonly isForceNew: boolean;
@@ -4394,7 +4408,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
   }
 
-  /** @name PalletStakingUnappliedSlash (476) */
+  /** @name PalletStakingUnappliedSlash (475) */
   export interface PalletStakingUnappliedSlash extends Struct {
     readonly validator: AccountId32;
     readonly own: u128;
@@ -4403,7 +4417,7 @@ declare module '@polkadot/types/lookup' {
     readonly payout: u128;
   }
 
-  /** @name PalletStakingSlashingSlashingSpans (478) */
+  /** @name PalletStakingSlashingSlashingSpans (477) */
   export interface PalletStakingSlashingSlashingSpans extends Struct {
     readonly spanIndex: u32;
     readonly lastStart: u32;
@@ -4411,13 +4425,13 @@ declare module '@polkadot/types/lookup' {
     readonly prior: Vec<u32>;
   }
 
-  /** @name PalletStakingSlashingSpanRecord (479) */
+  /** @name PalletStakingSlashingSpanRecord (478) */
   export interface PalletStakingSlashingSpanRecord extends Struct {
     readonly slashed: u128;
     readonly paidOut: u128;
   }
 
-  /** @name PalletStakingReleases (482) */
+  /** @name PalletStakingReleases (481) */
   export interface PalletStakingReleases extends Enum {
     readonly isV100Ancient: boolean;
     readonly isV200: boolean;
@@ -4431,7 +4445,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'V100Ancient' | 'V200' | 'V300' | 'V400' | 'V500' | 'V600' | 'V700' | 'V800' | 'V900';
   }
 
-  /** @name PalletStakingPalletError (483) */
+  /** @name PalletStakingPalletError (482) */
   export interface PalletStakingPalletError extends Enum {
     readonly isNotController: boolean;
     readonly isNotStash: boolean;
@@ -4461,10 +4475,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BondingRestricted';
   }
 
-  /** @name SpCoreCryptoKeyTypeId (487) */
+  /** @name SpCoreCryptoKeyTypeId (486) */
   export interface SpCoreCryptoKeyTypeId extends U8aFixed {}
 
-  /** @name PalletSessionError (488) */
+  /** @name PalletSessionError (487) */
   export interface PalletSessionError extends Enum {
     readonly isInvalidProof: boolean;
     readonly isNoAssociatedValidatorId: boolean;
@@ -4474,7 +4488,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
   }
 
-  /** @name PalletGrandpaStoredState (490) */
+  /** @name PalletGrandpaStoredState (489) */
   export interface PalletGrandpaStoredState extends Enum {
     readonly isLive: boolean;
     readonly isPendingPause: boolean;
@@ -4491,7 +4505,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Live' | 'PendingPause' | 'Paused' | 'PendingResume';
   }
 
-  /** @name PalletGrandpaStoredPendingChange (491) */
+  /** @name PalletGrandpaStoredPendingChange (490) */
   export interface PalletGrandpaStoredPendingChange extends Struct {
     readonly scheduledAt: u32;
     readonly delay: u32;
@@ -4499,7 +4513,7 @@ declare module '@polkadot/types/lookup' {
     readonly forced: Option<u32>;
   }
 
-  /** @name PalletGrandpaError (493) */
+  /** @name PalletGrandpaError (492) */
   export interface PalletGrandpaError extends Enum {
     readonly isPauseFailed: boolean;
     readonly isResumeFailed: boolean;
@@ -4511,32 +4525,26 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'PauseFailed' | 'ResumeFailed' | 'ChangePending' | 'TooSoon' | 'InvalidKeyOwnershipProof' | 'InvalidEquivocationProof' | 'DuplicateOffenceReport';
   }
 
-  /** @name PalletImOnlineBoundedOpaqueNetworkState (499) */
+  /** @name PalletImOnlineBoundedOpaqueNetworkState (498) */
   export interface PalletImOnlineBoundedOpaqueNetworkState extends Struct {
     readonly peerId: Bytes;
     readonly externalAddresses: Vec<Bytes>;
   }
 
-  /** @name PalletImOnlineError (503) */
+  /** @name PalletImOnlineError (502) */
   export interface PalletImOnlineError extends Enum {
     readonly isInvalidKey: boolean;
     readonly isDuplicatedHeartbeat: boolean;
     readonly type: 'InvalidKey' | 'DuplicatedHeartbeat';
   }
 
-  /** @name SpStakingOffenceOffenceDetails (504) */
+  /** @name SpStakingOffenceOffenceDetails (503) */
   export interface SpStakingOffenceOffenceDetails extends Struct {
     readonly offender: ITuple<[AccountId32, PalletStakingExposure]>;
     readonly reporters: Vec<AccountId32>;
   }
 
-  /** @name PalletSudoError (507) */
-  export interface PalletSudoError extends Enum {
-    readonly isRequireSudo: boolean;
-    readonly type: 'RequireSudo';
-  }
-
-  /** @name PalletBagsListListNode (508) */
+  /** @name PalletBagsListListNode (506) */
   export interface PalletBagsListListNode extends Struct {
     readonly id: AccountId32;
     readonly prev: Option<AccountId32>;
@@ -4545,20 +4553,20 @@ declare module '@polkadot/types/lookup' {
     readonly score: u64;
   }
 
-  /** @name PalletBagsListListBag (509) */
+  /** @name PalletBagsListListBag (507) */
   export interface PalletBagsListListBag extends Struct {
     readonly head: Option<AccountId32>;
     readonly tail: Option<AccountId32>;
   }
 
-  /** @name PalletBagsListError (510) */
+  /** @name PalletBagsListError (508) */
   export interface PalletBagsListError extends Enum {
     readonly isList: boolean;
     readonly asList: PalletBagsListListListError;
     readonly type: 'List';
   }
 
-  /** @name PalletBagsListListListError (511) */
+  /** @name PalletBagsListListListError (509) */
   export interface PalletBagsListListListError extends Enum {
     readonly isDuplicate: boolean;
     readonly isNotHeavier: boolean;
@@ -4567,14 +4575,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';
   }
 
-  /** @name PalletVestingReleases (514) */
+  /** @name PalletVestingReleases (512) */
   export interface PalletVestingReleases extends Enum {
     readonly isV0: boolean;
     readonly isV1: boolean;
     readonly type: 'V0' | 'V1';
   }
 
-  /** @name PalletVestingError (515) */
+  /** @name PalletVestingError (513) */
   export interface PalletVestingError extends Enum {
     readonly isNotVesting: boolean;
     readonly isAtMaxVestingSchedules: boolean;
@@ -4584,7 +4592,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NotVesting' | 'AtMaxVestingSchedules' | 'AmountLow' | 'ScheduleIndexOutOfBounds' | 'InvalidScheduleParams';
   }
 
-  /** @name PalletMultisigMultisig (517) */
+  /** @name PalletMultisigMultisig (515) */
   export interface PalletMultisigMultisig extends Struct {
     readonly when: PalletMultisigTimepoint;
     readonly deposit: u128;
@@ -4592,7 +4600,7 @@ declare module '@polkadot/types/lookup' {
     readonly approvals: Vec<AccountId32>;
   }
 
-  /** @name PalletMultisigError (519) */
+  /** @name PalletMultisigError (517) */
   export interface PalletMultisigError extends Enum {
     readonly isMinimumThreshold: boolean;
     readonly isAlreadyApproved: boolean;
@@ -4611,13 +4619,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
   }
 
-  /** @name PalletCouncilCouncilStageUpdate (520) */
+  /** @name PalletCouncilCouncilStageUpdate (518) */
   export interface PalletCouncilCouncilStageUpdate extends Struct {
     readonly stage: PalletCouncilCouncilStage;
     readonly changedAt: u32;
   }
 
-  /** @name PalletCouncilCouncilStage (521) */
+  /** @name PalletCouncilCouncilStage (519) */
   export interface PalletCouncilCouncilStage extends Enum {
     readonly isAnnouncing: boolean;
     readonly asAnnouncing: PalletCouncilCouncilStageAnnouncing;
@@ -4628,23 +4636,23 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Announcing' | 'Election' | 'Idle';
   }
 
-  /** @name PalletCouncilCouncilStageAnnouncing (522) */
+  /** @name PalletCouncilCouncilStageAnnouncing (520) */
   export interface PalletCouncilCouncilStageAnnouncing extends Struct {
     readonly candidatesCount: u32;
     readonly endsAt: u32;
   }
 
-  /** @name PalletCouncilCouncilStageElection (523) */
+  /** @name PalletCouncilCouncilStageElection (521) */
   export interface PalletCouncilCouncilStageElection extends Struct {
     readonly candidatesCount: u32;
   }
 
-  /** @name PalletCouncilCouncilStageIdle (524) */
+  /** @name PalletCouncilCouncilStageIdle (522) */
   export interface PalletCouncilCouncilStageIdle extends Struct {
     readonly endsAt: u32;
   }
 
-  /** @name PalletCouncilCouncilMember (526) */
+  /** @name PalletCouncilCouncilMember (524) */
   export interface PalletCouncilCouncilMember extends Struct {
     readonly stakingAccountId: AccountId32;
     readonly rewardAccountId: AccountId32;
@@ -4654,7 +4662,7 @@ declare module '@polkadot/types/lookup' {
     readonly unpaidReward: u128;
   }
 
-  /** @name PalletCouncilCandidate (528) */
+  /** @name PalletCouncilCandidate (526) */
   export interface PalletCouncilCandidate extends Struct {
     readonly stakingAccountId: AccountId32;
     readonly rewardAccountId: AccountId32;
@@ -4664,7 +4672,7 @@ declare module '@polkadot/types/lookup' {
     readonly noteHash: Option<H256>;
   }
 
-  /** @name PalletCouncilError (529) */
+  /** @name PalletCouncilError (527) */
   export interface PalletCouncilError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isBadOrigin: boolean;
@@ -4693,7 +4701,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'BadOrigin' | 'CantCandidateNow' | 'CantReleaseStakeNow' | 'CandidacyStakeTooLow' | 'CantCandidateTwice' | 'ConflictingStake' | 'StakeStillNeeded' | 'NoStake' | 'InsufficientBalanceForStaking' | 'CantVoteForYourself' | 'MemberIdNotMatchAccount' | 'InvalidAccountToStakeReuse' | 'NotCandidatingNow' | 'CantWithdrawCandidacyNow' | 'NotCouncilor' | 'InsufficientFundsForFundingRequest' | 'ZeroBalanceFundRequest' | 'RepeatedFundRequestAccount' | 'EmptyFundingRequests' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'CandidateDoesNotExist' | 'InsufficientBalanceForTransfer';
   }
 
-  /** @name PalletReferendumReferendumStage (530) */
+  /** @name PalletReferendumReferendumStage (528) */
   export interface PalletReferendumReferendumStage extends Enum {
     readonly isInactive: boolean;
     readonly isVoting: boolean;
@@ -4703,7 +4711,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Inactive' | 'Voting' | 'Revealing';
   }
 
-  /** @name PalletReferendumReferendumStageVoting (532) */
+  /** @name PalletReferendumReferendumStageVoting (530) */
   export interface PalletReferendumReferendumStageVoting extends Struct {
     readonly started: u32;
     readonly winningTargetCount: u32;
@@ -4711,7 +4719,7 @@ declare module '@polkadot/types/lookup' {
     readonly endsAt: u32;
   }
 
-  /** @name PalletReferendumReferendumStageRevealing (533) */
+  /** @name PalletReferendumReferendumStageRevealing (531) */
   export interface PalletReferendumReferendumStageRevealing extends Struct {
     readonly started: u32;
     readonly winningTargetCount: u32;
@@ -4720,7 +4728,7 @@ declare module '@polkadot/types/lookup' {
     readonly endsAt: u32;
   }
 
-  /** @name PalletReferendumCastVote (534) */
+  /** @name PalletReferendumCastVote (532) */
   export interface PalletReferendumCastVote extends Struct {
     readonly commitment: H256;
     readonly cycleId: u64;
@@ -4728,7 +4736,7 @@ declare module '@polkadot/types/lookup' {
     readonly voteFor: Option<u64>;
   }
 
-  /** @name PalletReferendumError (535) */
+  /** @name PalletReferendumError (533) */
   export interface PalletReferendumError extends Enum {
     readonly isBadOrigin: boolean;
     readonly isReferendumNotRunning: boolean;
@@ -4743,10 +4751,11 @@ declare module '@polkadot/types/lookup' {
     readonly isUnstakingVoteInSameCycle: boolean;
     readonly isSaltTooLong: boolean;
     readonly isUnstakingForbidden: boolean;
-    readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden';
+    readonly isAccountAlreadyOptedOutOfVoting: boolean;
+    readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden' | 'AccountAlreadyOptedOutOfVoting';
   }
 
-  /** @name PalletMembershipMembershipObject (536) */
+  /** @name PalletMembershipMembershipObject (534) */
   export interface PalletMembershipMembershipObject extends Struct {
     readonly handleHash: H256;
     readonly rootAccount: AccountId32;
@@ -4755,13 +4764,13 @@ declare module '@polkadot/types/lookup' {
     readonly invites: u32;
   }
 
-  /** @name PalletMembershipStakingAccountMemberBinding (537) */
+  /** @name PalletMembershipStakingAccountMemberBinding (535) */
   export interface PalletMembershipStakingAccountMemberBinding extends Struct {
     readonly memberId: u64;
     readonly confirmed: bool;
   }
 
-  /** @name PalletMembershipError (538) */
+  /** @name PalletMembershipError (536) */
   export interface PalletMembershipError extends Enum {
     readonly isNotEnoughBalanceToBuyMembership: boolean;
     readonly isControllerAccountRequired: boolean;
@@ -4784,10 +4793,11 @@ declare module '@polkadot/types/lookup' {
     readonly isInsufficientBalanceToCoverStake: boolean;
     readonly isGifLockExceedsCredit: boolean;
     readonly isInsufficientBalanceToGift: boolean;
-    readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift';
+    readonly isInsufficientBalanceToCoverPayment: boolean;
+    readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift' | 'InsufficientBalanceToCoverPayment';
   }
 
-  /** @name PalletForumCategory (539) */
+  /** @name PalletForumCategory (537) */
   export interface PalletForumCategory extends Struct {
     readonly titleHash: H256;
     readonly descriptionHash: H256;
@@ -4799,7 +4809,7 @@ declare module '@polkadot/types/lookup' {
     readonly stickyThreadIds: BTreeSet<u64>;
   }
 
-  /** @name PalletForumThread (541) */
+  /** @name PalletForumThread (539) */
   export interface PalletForumThread extends Struct {
     readonly categoryId: u64;
     readonly authorId: u64;
@@ -4807,7 +4817,7 @@ declare module '@polkadot/types/lookup' {
     readonly numberOfEditablePosts: u64;
   }
 
-  /** @name PalletForumPost (542) */
+  /** @name PalletForumPost (540) */
   export interface PalletForumPost extends Struct {
     readonly threadId: u64;
     readonly textHash: H256;
@@ -4816,7 +4826,7 @@ declare module '@polkadot/types/lookup' {
     readonly lastEdited: u32;
   }
 
-  /** @name PalletForumError (543) */
+  /** @name PalletForumError (541) */
   export interface PalletForumError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isOriginNotForumLead: boolean;
@@ -4848,12 +4858,12 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero' | 'MaxNumberOfStickiedThreadsExceeded';
   }
 
-  /** @name PalletConstitutionConstitutionInfo (544) */
+  /** @name PalletConstitutionConstitutionInfo (542) */
   export interface PalletConstitutionConstitutionInfo extends Struct {
     readonly textHash: H256;
   }
 
-  /** @name PalletBountyBountyRecord (545) */
+  /** @name PalletBountyBountyRecord (543) */
   export interface PalletBountyBountyRecord extends Struct {
     readonly creationParams: PalletBountyBountyParametersBoundedBTreeSet;
     readonly totalFunding: u128;
@@ -4862,7 +4872,7 @@ declare module '@polkadot/types/lookup' {
     readonly hasUnpaidOracleReward: bool;
   }
 
-  /** @name PalletBountyBountyParametersBoundedBTreeSet (547) */
+  /** @name PalletBountyBountyParametersBoundedBTreeSet (545) */
   export interface PalletBountyBountyParametersBoundedBTreeSet extends Struct {
     readonly oracle: PalletBountyBountyActor;
     readonly contractType: PalletBountyAssuranceContractTypeBoundedBTreeSet;
@@ -4873,7 +4883,7 @@ declare module '@polkadot/types/lookup' {
     readonly fundingType: PalletBountyFundingType;
   }
 
-  /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (548) */
+  /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (546) */
   export interface PalletBountyAssuranceContractTypeBoundedBTreeSet extends Enum {
     readonly isOpen: boolean;
     readonly isClosed: boolean;
@@ -4881,7 +4891,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Open' | 'Closed';
   }
 
-  /** @name PalletBountyBountyMilestone (549) */
+  /** @name PalletBountyBountyMilestone (547) */
   export interface PalletBountyBountyMilestone extends Enum {
     readonly isCreated: boolean;
     readonly asCreated: {
@@ -4898,13 +4908,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Created' | 'BountyMaxFundingReached' | 'WorkSubmitted' | 'Terminated' | 'JudgmentSubmitted';
   }
 
-  /** @name PalletBountyContribution (551) */
+  /** @name PalletBountyContribution (549) */
   export interface PalletBountyContribution extends Struct {
     readonly amount: u128;
     readonly funderStateBloatBondAmount: u128;
   }
 
-  /** @name PalletBountyEntryRecord (552) */
+  /** @name PalletBountyEntryRecord (550) */
   export interface PalletBountyEntryRecord extends Struct {
     readonly memberId: u64;
     readonly stakingAccountId: AccountId32;
@@ -4912,7 +4922,7 @@ declare module '@polkadot/types/lookup' {
     readonly workSubmitted: bool;
   }
 
-  /** @name PalletBountyError (553) */
+  /** @name PalletBountyError (551) */
   export interface PalletBountyError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isMinFundingAmountCannotBeGreaterThanMaxAmount: boolean;
@@ -4952,7 +4962,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'MinFundingAmountCannotBeGreaterThanMaxAmount' | 'BountyDoesntExist' | 'SwitchOracleOriginIsRoot' | 'InvalidStageUnexpectedFunding' | 'InvalidStageUnexpectedNoFundingContributed' | 'InvalidStageUnexpectedCancelled' | 'InvalidStageUnexpectedWorkSubmission' | 'InvalidStageUnexpectedJudgment' | 'InvalidStageUnexpectedSuccessfulBountyWithdrawal' | 'InvalidStageUnexpectedFailedBountyWithdrawal' | 'InsufficientBalanceForBounty' | 'NoBountyContributionFound' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'WorkEntryDoesntExist' | 'CherryLessThenMinimumAllowed' | 'CannotSubmitWorkToClosedContractBounty' | 'ClosedContractMemberListIsEmpty' | 'ClosedContractMemberListIsTooLarge' | 'ClosedContractMemberNotFound' | 'InvalidOracleMemberId' | 'InvalidStakingAccountForMember' | 'ZeroWinnerReward' | 'TotalRewardShouldBeEqualToTotalFunding' | 'EntrantStakeIsLessThanMininum' | 'FundingAmountCannotBeZero' | 'FundingPeriodCannotBeZero' | 'WinnerShouldHasWorkSubmission' | 'InvalidContributorActorSpecified' | 'InvalidOracleActorSpecified' | 'InvalidEntrantWorkerSpecified' | 'InvalidCreatorActorSpecified' | 'WorkEntryDoesntBelongToWorker' | 'OracleRewardAlreadyWithdrawn';
   }
 
-  /** @name PalletContentVideoRecord (555) */
+  /** @name PalletContentVideoRecord (553) */
   export interface PalletContentVideoRecord extends Struct {
     readonly inChannel: u64;
     readonly nftStatus: Option<PalletContentNftTypesOwnedNft>;
@@ -4960,7 +4970,7 @@ declare module '@polkadot/types/lookup' {
     readonly videoStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
   }
 
-  /** @name PalletContentNftTypesOwnedNft (556) */
+  /** @name PalletContentNftTypesOwnedNft (554) */
   export interface PalletContentNftTypesOwnedNft extends Struct {
     readonly owner: PalletContentNftTypesNftOwner;
     readonly transactionalStatus: PalletContentNftTypesTransactionalStatusRecord;
@@ -4968,7 +4978,7 @@ declare module '@polkadot/types/lookup' {
     readonly openAuctionsNonce: u64;
   }
 
-  /** @name PalletContentNftTypesTransactionalStatusRecord (557) */
+  /** @name PalletContentNftTypesTransactionalStatusRecord (555) */
   export interface PalletContentNftTypesTransactionalStatusRecord extends Enum {
     readonly isIdle: boolean;
     readonly isInitiatedOfferToMember: boolean;
@@ -4982,7 +4992,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Idle' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction' | 'BuyNow';
   }
 
-  /** @name PalletContentNftTypesEnglishAuctionRecord (558) */
+  /** @name PalletContentNftTypesEnglishAuctionRecord (556) */
   export interface PalletContentNftTypesEnglishAuctionRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -4994,13 +5004,13 @@ declare module '@polkadot/types/lookup' {
     readonly topBid: Option<PalletContentNftTypesEnglishAuctionBid>;
   }
 
-  /** @name PalletContentNftTypesEnglishAuctionBid (561) */
+  /** @name PalletContentNftTypesEnglishAuctionBid (559) */
   export interface PalletContentNftTypesEnglishAuctionBid extends Struct {
     readonly amount: u128;
     readonly bidderId: u64;
   }
 
-  /** @name PalletContentNftTypesOpenAuctionRecord (562) */
+  /** @name PalletContentNftTypesOpenAuctionRecord (560) */
   export interface PalletContentNftTypesOpenAuctionRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -5010,7 +5020,7 @@ declare module '@polkadot/types/lookup' {
     readonly start: u32;
   }
 
-  /** @name PalletContentNftTypesNftOwner (563) */
+  /** @name PalletContentNftTypesNftOwner (561) */
   export interface PalletContentNftTypesNftOwner extends Enum {
     readonly isChannelOwner: boolean;
     readonly isMember: boolean;
@@ -5018,21 +5028,21 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ChannelOwner' | 'Member';
   }
 
-  /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (566) */
+  /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (564) */
   export interface PalletContentPermissionsCuratorGroupCuratorGroupRecord extends Struct {
     readonly curators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
     readonly active: bool;
     readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
   }
 
-  /** @name PalletContentNftTypesOpenAuctionBidRecord (573) */
+  /** @name PalletContentNftTypesOpenAuctionBidRecord (571) */
   export interface PalletContentNftTypesOpenAuctionBidRecord extends Struct {
     readonly amount: u128;
     readonly madeAtBlock: u32;
     readonly auctionId: u64;
   }
 
-  /** @name PalletContentErrorsError (574) */
+  /** @name PalletContentErrorsError (572) */
   export interface PalletContentErrorsError extends Enum {
     readonly isChannelStateBloatBondChanged: boolean;
     readonly isVideoStateBloatBondChanged: boolean;
@@ -5162,10 +5172,11 @@ declare module '@polkadot/types/lookup' {
     readonly isPatronageCanOnlyBeClaimedForMemberOwnedChannels: boolean;
     readonly isChannelTransfersBlockedDuringRevenueSplits: boolean;
     readonly isChannelTransfersBlockedDuringTokenSales: boolean;
-    readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales';
+    readonly isChannelTransfersBlockedDuringActiveAmm: boolean;
+    readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales' | 'ChannelTransfersBlockedDuringActiveAmm';
   }
 
-  /** @name PalletStorageBagRecord (575) */
+  /** @name PalletStorageBagRecord (573) */
   export interface PalletStorageBagRecord extends Struct {
     readonly storedBy: BTreeSet<u64>;
     readonly distributedBy: BTreeSet<PalletStorageDistributionBucketIdRecord>;
@@ -5173,7 +5184,7 @@ declare module '@polkadot/types/lookup' {
     readonly objectsNumber: u64;
   }
 
-  /** @name PalletStorageStorageBucketRecord (578) */
+  /** @name PalletStorageStorageBucketRecord (576) */
   export interface PalletStorageStorageBucketRecord extends Struct {
     readonly operatorStatus: PalletStorageStorageBucketOperatorStatus;
     readonly acceptingNewBags: bool;
@@ -5181,7 +5192,7 @@ declare module '@polkadot/types/lookup' {
     readonly assignedBags: u64;
   }
 
-  /** @name PalletStorageStorageBucketOperatorStatus (579) */
+  /** @name PalletStorageStorageBucketOperatorStatus (577) */
   export interface PalletStorageStorageBucketOperatorStatus extends Enum {
     readonly isMissing: boolean;
     readonly isInvitedStorageWorker: boolean;
@@ -5191,13 +5202,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Missing' | 'InvitedStorageWorker' | 'StorageWorker';
   }
 
-  /** @name PalletStorageDynamicBagCreationPolicy (581) */
+  /** @name PalletStorageDynamicBagCreationPolicy (579) */
   export interface PalletStorageDynamicBagCreationPolicy extends Struct {
     readonly numberOfStorageBuckets: u32;
     readonly families: BTreeMap<u64, u32>;
   }
 
-  /** @name PalletStorageDataObject (584) */
+  /** @name PalletStorageDataObject (582) */
   export interface PalletStorageDataObject extends Struct {
     readonly accepted: bool;
     readonly stateBloatBond: PalletCommonBloatBondRepayableBloatBond;
@@ -5205,12 +5216,12 @@ declare module '@polkadot/types/lookup' {
     readonly ipfsContentId: Bytes;
   }
 
-  /** @name PalletStorageDistributionBucketFamilyRecord (585) */
+  /** @name PalletStorageDistributionBucketFamilyRecord (583) */
   export interface PalletStorageDistributionBucketFamilyRecord extends Struct {
     readonly nextDistributionBucketIndex: u64;
   }
 
-  /** @name PalletStorageDistributionBucketRecord (586) */
+  /** @name PalletStorageDistributionBucketRecord (584) */
   export interface PalletStorageDistributionBucketRecord extends Struct {
     readonly acceptingNewBags: bool;
     readonly distributing: bool;
@@ -5219,7 +5230,7 @@ declare module '@polkadot/types/lookup' {
     readonly assignedBags: u64;
   }
 
-  /** @name PalletStorageError (589) */
+  /** @name PalletStorageError (587) */
   export interface PalletStorageError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isInvalidCidLength: boolean;
@@ -5289,7 +5300,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'MaxNumberOfOperatorsPerDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints' | 'CallDisabled';
   }
 
-  /** @name PalletProjectTokenAccountData (590) */
+  /** @name PalletProjectTokenAccountData (588) */
   export interface PalletProjectTokenAccountData extends Struct {
     readonly vestingSchedules: BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>;
     readonly amount: u128;
@@ -5299,13 +5310,13 @@ declare module '@polkadot/types/lookup' {
     readonly lastSaleTotalPurchasedAmount: Option<ITuple<[u32, u128]>>;
   }
 
-  /** @name PalletProjectTokenStakingStatus (591) */
+  /** @name PalletProjectTokenStakingStatus (589) */
   export interface PalletProjectTokenStakingStatus extends Struct {
     readonly splitId: u32;
     readonly amount: u128;
   }
 
-  /** @name PalletProjectTokenVestingSchedule (593) */
+  /** @name PalletProjectTokenVestingSchedule (591) */
   export interface PalletProjectTokenVestingSchedule extends Struct {
     readonly linearVestingStartBlock: u32;
     readonly linearVestingDuration: u32;
@@ -5314,7 +5325,7 @@ declare module '@polkadot/types/lookup' {
     readonly burnedAmount: u128;
   }
 
-  /** @name PalletProjectTokenTokenData (600) */
+  /** @name PalletProjectTokenTokenData (598) */
   export interface PalletProjectTokenTokenData extends Struct {
     readonly totalSupply: u128;
     readonly tokensIssued: u128;
@@ -5327,9 +5338,10 @@ declare module '@polkadot/types/lookup' {
     readonly revenueSplitRate: Permill;
     readonly revenueSplit: PalletProjectTokenRevenueSplitState;
     readonly nextRevenueSplitId: u32;
+    readonly ammCurve: Option<PalletProjectTokenAmmCurve>;
   }
 
-  /** @name PalletProjectTokenRevenueSplitState (601) */
+  /** @name PalletProjectTokenRevenueSplitState (599) */
   export interface PalletProjectTokenRevenueSplitState extends Enum {
     readonly isInactive: boolean;
     readonly isActive: boolean;
@@ -5337,38 +5349,38 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Inactive' | 'Active';
   }
 
-  /** @name PalletProjectTokenRevenueSplitInfo (602) */
+  /** @name PalletProjectTokenRevenueSplitInfo (600) */
   export interface PalletProjectTokenRevenueSplitInfo extends Struct {
     readonly allocation: u128;
     readonly timeline: PalletProjectTokenTimeline;
     readonly dividendsClaimed: u128;
   }
 
-  /** @name PalletProjectTokenTimeline (603) */
+  /** @name PalletProjectTokenTimeline (601) */
   export interface PalletProjectTokenTimeline extends Struct {
     readonly start: u32;
     readonly duration: u32;
   }
 
-  /** @name PalletProjectTokenPatronageData (605) */
+  /** @name PalletProjectTokenPatronageData (603) */
   export interface PalletProjectTokenPatronageData extends Struct {
-    readonly rate: Perquintill;
+    readonly rate: Permill;
     readonly unclaimedPatronageTallyAmount: u128;
     readonly lastUnclaimedPatronageTallyBlock: u32;
   }
 
-  /** @name PalletProjectTokenErrorsError (607) */
+  /** @name PalletProjectTokenErrorsError (605) */
   export interface PalletProjectTokenErrorsError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isInsufficientTransferrableBalance: boolean;
     readonly isTokenDoesNotExist: boolean;
     readonly isAccountInformationDoesNotExist: boolean;
+    readonly isTransferDestinationMemberDoesNotExist: boolean;
     readonly isMerkleProofVerificationFailure: boolean;
-    readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
     readonly isTokenSymbolAlreadyInUse: boolean;
     readonly isInitialAllocationToNonExistingMember: boolean;
     readonly isAccountAlreadyExists: boolean;
-    readonly isTransferDestinationMemberDoesNotExist: boolean;
+    readonly isTooManyTransferOutputs: boolean;
     readonly isTokenIssuanceNotInIdleState: boolean;
     readonly isInsufficientJoyBalance: boolean;
     readonly isJoyTransferSubjectToDusting: boolean;
@@ -5393,6 +5405,7 @@ declare module '@polkadot/types/lookup' {
     readonly isSaleCapPerMemberIsZero: boolean;
     readonly isSaleUnitPriceIsZero: boolean;
     readonly isSalePurchaseAmountIsZero: boolean;
+    readonly isCannotInitSaleIfAmmIsActive: boolean;
     readonly isRevenueSplitTimeToStartTooShort: boolean;
     readonly isRevenueSplitDurationTooShort: boolean;
     readonly isRevenueSplitAlreadyActiveForToken: boolean;
@@ -5408,10 +5421,19 @@ declare module '@polkadot/types/lookup' {
     readonly isRevenueSplitRateIsZero: boolean;
     readonly isBurnAmountIsZero: boolean;
     readonly isBurnAmountGreaterThanAccountTokensAmount: boolean;
-    readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TransferDestinationMemberDoesNotExist' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount';
+    readonly isNotInAmmState: boolean;
+    readonly isInvalidCurveParameters: boolean;
+    readonly isDeadlineExpired: boolean;
+    readonly isSlippageToleranceExceeded: boolean;
+    readonly isInsufficientTokenBalance: boolean;
+    readonly isOutstandingAmmProvidedSupplyTooLarge: boolean;
+    readonly isCurveSlopeParametersTooLow: boolean;
+    readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
+    readonly isYearlyPatronageRateLimitExceeded: boolean;
+    readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'TransferDestinationMemberDoesNotExist' | 'MerkleProofVerificationFailure' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TooManyTransferOutputs' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'CannotInitSaleIfAmmIsActive' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount' | 'NotInAmmState' | 'InvalidCurveParameters' | 'DeadlineExpired' | 'SlippageToleranceExceeded' | 'InsufficientTokenBalance' | 'OutstandingAmmProvidedSupplyTooLarge' | 'CurveSlopeParametersTooLow' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'YearlyPatronageRateLimitExceeded';
   }
 
-  /** @name PalletProposalsEngineProposal (608) */
+  /** @name PalletProposalsEngineProposal (606) */
   export interface PalletProposalsEngineProposal extends Struct {
     readonly parameters: PalletProposalsEngineProposalParameters;
     readonly proposerId: u64;
@@ -5423,7 +5445,7 @@ declare module '@polkadot/types/lookup' {
     readonly stakingAccountId: Option<AccountId32>;
   }
 
-  /** @name PalletProposalsEngineProposalParameters (609) */
+  /** @name PalletProposalsEngineProposalParameters (607) */
   export interface PalletProposalsEngineProposalParameters extends Struct {
     readonly votingPeriod: u32;
     readonly gracePeriod: u32;
@@ -5435,7 +5457,7 @@ declare module '@polkadot/types/lookup' {
     readonly constitutionality: u32;
   }
 
-  /** @name PalletProposalsEngineVotingResults (610) */
+  /** @name PalletProposalsEngineVotingResults (608) */
   export interface PalletProposalsEngineVotingResults extends Struct {
     readonly abstentions: u32;
     readonly approvals: u32;
@@ -5443,7 +5465,7 @@ declare module '@polkadot/types/lookup' {
     readonly slashes: u32;
   }
 
-  /** @name PalletProposalsEngineError (613) */
+  /** @name PalletProposalsEngineError (611) */
   export interface PalletProposalsEngineError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isEmptyTitleProvided: boolean;
@@ -5471,14 +5493,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'EmptyTitleProvided' | 'EmptyDescriptionProvided' | 'TitleIsTooLong' | 'DescriptionIsTooLong' | 'ProposalNotFound' | 'ProposalFinalized' | 'AlreadyVoted' | 'NotAuthor' | 'MaxActiveProposalNumberExceeded' | 'EmptyStake' | 'StakeShouldBeEmpty' | 'StakeDiffersFromRequired' | 'InvalidParameterApprovalThreshold' | 'InvalidParameterSlashingThreshold' | 'RequireRootOrigin' | 'ProposalHasVotes' | 'ZeroExactExecutionBlock' | 'InvalidExactExecutionBlock' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'InvalidStakingAccountForMember' | 'MaxDispatchableCallCodeSizeExceeded';
   }
 
-  /** @name PalletProposalsDiscussionDiscussionThread (614) */
+  /** @name PalletProposalsDiscussionDiscussionThread (612) */
   export interface PalletProposalsDiscussionDiscussionThread extends Struct {
     readonly activatedAt: u32;
     readonly authorId: u64;
     readonly mode: PalletProposalsDiscussionThreadModeBoundedBTreeSet;
   }
 
-  /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (616) */
+  /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (614) */
   export interface PalletProposalsDiscussionThreadModeBoundedBTreeSet extends Enum {
     readonly isOpen: boolean;
     readonly isClosed: boolean;
@@ -5486,14 +5508,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Open' | 'Closed';
   }
 
-  /** @name PalletProposalsDiscussionDiscussionPost (617) */
+  /** @name PalletProposalsDiscussionDiscussionPost (615) */
   export interface PalletProposalsDiscussionDiscussionPost extends Struct {
     readonly authorId: u64;
     readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
     readonly lastEdited: u32;
   }
 
-  /** @name PalletProposalsDiscussionError (618) */
+  /** @name PalletProposalsDiscussionError (616) */
   export interface PalletProposalsDiscussionError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isThreadDoesntExist: boolean;
@@ -5508,7 +5530,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'WhitelistedMemberDoesNotExist' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
   }
 
-  /** @name PalletProposalsCodexError (619) */
+  /** @name PalletProposalsCodexError (617) */
   export interface PalletProposalsCodexError extends Enum {
     readonly isSignalProposalIsEmpty: boolean;
     readonly isRuntimeProposalIsEmpty: boolean;
@@ -5536,10 +5558,11 @@ declare module '@polkadot/types/lookup' {
     readonly isInvalidLeadApplicationId: boolean;
     readonly isInvalidProposalId: boolean;
     readonly isArithmeticError: boolean;
-    readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId' | 'ArithmeticError';
+    readonly isMaxYearlyPatronageRateCannotBeZero: boolean;
+    readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId' | 'ArithmeticError' | 'MaxYearlyPatronageRateCannotBeZero';
   }
 
-  /** @name PalletWorkingGroupOpening (620) */
+  /** @name PalletWorkingGroupOpening (618) */
   export interface PalletWorkingGroupOpening extends Struct {
     readonly openingType: PalletWorkingGroupOpeningType;
     readonly created: u32;
@@ -5549,7 +5572,7 @@ declare module '@polkadot/types/lookup' {
     readonly creationStake: u128;
   }
 
-  /** @name PalletWorkingGroupJobApplication (621) */
+  /** @name PalletWorkingGroupJobApplication (619) */
   export interface PalletWorkingGroupJobApplication extends Struct {
     readonly roleAccountId: AccountId32;
     readonly rewardAccountId: AccountId32;
@@ -5559,7 +5582,7 @@ declare module '@polkadot/types/lookup' {
     readonly openingId: u64;
   }
 
-  /** @name PalletWorkingGroupGroupWorker (622) */
+  /** @name PalletWorkingGroupGroupWorker (620) */
   export interface PalletWorkingGroupGroupWorker extends Struct {
     readonly memberId: u64;
     readonly roleAccountId: AccountId32;
@@ -5572,7 +5595,7 @@ declare module '@polkadot/types/lookup' {
     readonly createdAt: u32;
   }
 
-  /** @name PalletWorkingGroupErrorsError (623) */
+  /** @name PalletWorkingGroupErrorsError (621) */
   export interface PalletWorkingGroupErrorsError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isStakeBalanceCannotBeZero: boolean;
@@ -5609,7 +5632,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'StakeBalanceCannotBeZero' | 'OpeningDoesNotExist' | 'CannotHireMultipleLeaders' | 'WorkerApplicationDoesNotExist' | 'MaxActiveWorkerNumberExceeded' | 'SuccessfulWorkerApplicationDoesNotExist' | 'CannotHireLeaderWhenLeaderExists' | 'IsNotLeadAccount' | 'CurrentLeadNotSet' | 'WorkerDoesNotExist' | 'InvalidMemberOrigin' | 'SignerIsNotWorkerRoleAccount' | 'BelowMinimumStakes' | 'InsufficientBalanceToCoverStake' | 'ApplicationStakeDoesntMatchOpening' | 'OriginIsNotApplicant' | 'WorkerIsLeaving' | 'CannotRewardWithZero' | 'InvalidStakingAccountForMember' | 'ConflictStakesOnAccount' | 'WorkerHasNoReward' | 'UnstakingPeriodLessThanMinimum' | 'CannotSpendZero' | 'InsufficientBudgetForSpending' | 'NoApplicationsProvided' | 'CannotDecreaseStakeDeltaGreaterThanStake' | 'ApplicationsNotForOpening' | 'WorkerStorageValueTooLong' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'InsufficientBalanceForTransfer';
   }
 
-  /** @name SpRuntimeMultiSignature (633) */
+  /** @name SpRuntimeMultiSignature (631) */
   export interface SpRuntimeMultiSignature extends Enum {
     readonly isEd25519: boolean;
     readonly asEd25519: SpCoreEd25519Signature;
@@ -5620,31 +5643,31 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
   }
 
-  /** @name SpCoreEcdsaSignature (634) */
+  /** @name SpCoreEcdsaSignature (632) */
   export interface SpCoreEcdsaSignature extends U8aFixed {}
 
-  /** @name FrameSystemExtensionsCheckNonZeroSender (637) */
+  /** @name FrameSystemExtensionsCheckNonZeroSender (635) */
   export type FrameSystemExtensionsCheckNonZeroSender = Null;
 
-  /** @name FrameSystemExtensionsCheckSpecVersion (638) */
+  /** @name FrameSystemExtensionsCheckSpecVersion (636) */
   export type FrameSystemExtensionsCheckSpecVersion = Null;
 
-  /** @name FrameSystemExtensionsCheckTxVersion (639) */
+  /** @name FrameSystemExtensionsCheckTxVersion (637) */
   export type FrameSystemExtensionsCheckTxVersion = Null;
 
-  /** @name FrameSystemExtensionsCheckGenesis (640) */
+  /** @name FrameSystemExtensionsCheckGenesis (638) */
   export type FrameSystemExtensionsCheckGenesis = Null;
 
-  /** @name FrameSystemExtensionsCheckNonce (643) */
+  /** @name FrameSystemExtensionsCheckNonce (641) */
   export interface FrameSystemExtensionsCheckNonce extends Compact<u32> {}
 
-  /** @name FrameSystemExtensionsCheckWeight (644) */
+  /** @name FrameSystemExtensionsCheckWeight (642) */
   export type FrameSystemExtensionsCheckWeight = Null;
 
-  /** @name PalletTransactionPaymentChargeTransactionPayment (645) */
+  /** @name PalletTransactionPaymentChargeTransactionPayment (643) */
   export interface PalletTransactionPaymentChargeTransactionPayment extends Compact<u128> {}
 
-  /** @name JoystreamNodeRuntimeRuntime (646) */
+  /** @name JoystreamNodeRuntimeRuntime (644) */
   export type JoystreamNodeRuntimeRuntime = Null;
 
 } // declare module
diff --git a/node_modules/@joystream/types/types/.eslintignore b/node_modules/@joystream/types/types/.eslintignore
new file mode 100644
index 0000000..abedcc7
--- /dev/null
+++ b/node_modules/@joystream/types/types/.eslintignore
@@ -0,0 +1,4 @@
+**/*.d.ts
+augment/
+augment-types/
+augment-codec/
diff --git a/node_modules/@joystream/types/types/.eslintrc.js b/node_modules/@joystream/types/types/.eslintrc.js
new file mode 100644
index 0000000..c4b7f8e
--- /dev/null
+++ b/node_modules/@joystream/types/types/.eslintrc.js
@@ -0,0 +1,11 @@
+module.exports = {
+  rules: {
+    '@typescript-eslint/class-name-casing': 'off',
+    'no-unused-vars': 'off', // Required by the typescript rule below
+    '@typescript-eslint/no-unused-vars': ['error'],
+    '@typescript-eslint/naming-convention': 'off',
+  },
+  parserOptions: {
+    project: './tsconfig-eslint.json',
+  },
+}
diff --git a/node_modules/@joystream/types/types/.gitignore b/node_modules/@joystream/types/types/.gitignore
new file mode 100644
index 0000000..206991f
--- /dev/null
+++ b/node_modules/@joystream/types/types/.gitignore
@@ -0,0 +1,4 @@
+# Don't track build artifacts
+**/*.js
+**/*.d.ts
+!.eslintrc.js
\ No newline at end of file
diff --git a/node_modules/@joystream/types/types/.npmignore b/node_modules/@joystream/types/types/.npmignore
new file mode 100644
index 0000000..acdb6a9
--- /dev/null
+++ b/node_modules/@joystream/types/types/.npmignore
@@ -0,0 +1,6 @@
+# keep src/ files, packages is compiled when installed
+# src/
+
+# old build artifacts
+lib/
+build/
diff --git a/node_modules/@joystream/types/types/.prettierignore b/node_modules/@joystream/types/types/.prettierignore
new file mode 100644
index 0000000..82b7ed9
--- /dev/null
+++ b/node_modules/@joystream/types/types/.prettierignore
@@ -0,0 +1,4 @@
+**/*.js
+**/*.d.ts
+src/augment
+!.eslintrc.js
\ No newline at end of file
diff --git a/node_modules/@joystream/types/types/CHANGELOG.md b/node_modules/@joystream/types/types/CHANGELOG.md
new file mode 100644
index 0000000..8181a69
--- /dev/null
+++ b/node_modules/@joystream/types/types/CHANGELOG.md
@@ -0,0 +1,217 @@
+### 2.1.0
+
+- Bumped version for dependants version release to get the proper types version. [ref](https://github.com/Joystream/joystream/commit/f899922645013cd5aad6d8036aeae2180f123cf7)
+
+### 2.0.0 (Ephesus release)
+
+- Generated Ephesus augment api from metadata
+
+### 1.0.0
+
+- No changes, version bumped for consistency with mainnet release versioning.
+
+### 0.20.0
+
+- `@polkadot/api` upgraded from `5.9.1` to `8.9.1` (along with related dependencies)
+- All custom classes for Joystream runtime types have been removed! Since the `@polkadot/api` no longer relies on custom type definitions provided during `ApiPromise` instantiation for chains using metadata v14, there is no point in maintaining custom type classes. The interfaces for all custom types are still automatically generated from the chain metadata.
+- `@polkadot/typegen`-related scripts were modified in order to generate everything just from the chain metadata
+- Scripts related to custom type classes (ie. generating `augment-codec`) were removed, as custom type classes no longer exist
+- All augmentations are now part of `./src` and imported in `@joystream/types` by default, which means that any import from `@joystream/types` now also automatically imports the api/type augmentations
+- `createType` function was modified to work with interfaces generated via `@polkadot/typegen`
+- `keysOf` utility function was added (see the migration guide below)
+- `entriesByIds` utility function was added
+- `AsCodec` utility type was added (see the migration guide below)
+- `JOYSTREAM_ADDRESS_PREFIX` constant was added
+- New `primitives.ts` file was added, exporting aliases for primitive runtime types like `ProposalId` or `MemberId`
+
+#### Migration guide
+
+1. From `tsconfig.json` you can now remove the `"@polkadot/types/augment"` and `"@polkadot/api/augment"` paths.
+   Augmentations are now directly imported in `@joystream/types`, so in order to use them just make sure to:
+
+   ```typescript
+   import '@joystream/types'
+   ```
+
+   somewhere in your project
+
+1. When you instantiate `ApiPromise`, you no longer need to provide `types`:
+
+   **Before:**
+
+   ```typescript
+   import { types } from '@joystream/types'
+
+   // ...
+   const api = await ApiPromise.create({ provider, types })
+   ```
+
+   **Now:**
+
+   ```typescript
+   const api = await ApiPromise.create({ provider })
+   ```
+
+1. All custom type interfaces should now be imported from the augmented `'@polkadot/types/lookup'`. Notice that the type names now include the pallet name as a prefix. They may also include an additional suffix like `Object`/`Record`, because the type names are no longer based on runtime alises. For example:
+
+   **Before:**
+
+   ```typescript
+   import { Membership } from '@joystream/types/members'
+   ```
+
+   **Now:**
+
+   ```typescript
+   import { PalletMembershipMembershipObject } from '@polkadot/types/lookup'
+   ```
+
+1. Because no runtime aliases are exposed in the v14 metadata, typescript aliases like `MemberId`, `ForumThreadId`, `ProposalId` etc. have been exposed in a new file called `primitives.ts`:
+
+   **Before:**
+
+   ```typescript
+   import { ProposalId } from '@joystream/types/proposals'
+   import { MemberId } from '@joystream/types/members'
+   ```
+
+   Now:
+
+   ```typescript
+   import { MemberId, ProposalId } from '@joystream/types/primitives'
+   ```
+
+1. Because custom type classes were following `snake_case` naming strategy for the `Struct` properties, but the interfaces generated by `@polkadot/typegen` are following `camelCase`, you should make the adjustments to your codebase accordingly, for example:
+
+   **Before:**
+
+   ```typescript
+   // ...
+   const councilStage = await api.query.council.stage()
+   const changedAt = councilStage.changed_at
+   ```
+
+   **Now:**
+
+   ```typescript
+   // ...
+   const councilStage = await api.query.council.stage()
+   const { changedAt } = councilStage
+   ```
+
+1. Another difference between the old custom type classes and interfaces generated by `@polkadot/typegen` is that `isOfType` and `asType` methods (made available because of `JoyEnum`) will no longer exists for enums. You should use the decorated `isX`, `asX` getters instead.
+
+   **Before:**
+
+   ```typescript
+   const groupId = channel.owner.isOfType('CuratorGroup') ? channel.owner.asType('CuratorGroup') : null
+   ```
+
+   **Now:**
+
+   ```typescript
+   const groupId = channel.owner.isCuratorGroup ? channel.owner.asCuratorGroup : null
+   ```
+
+1. Similarly to the enums, if you were relying on some custom `JoyStruct` methods like `getField()`, you should now resolve to using the decorated getters instead (note that `_` suffix is now added in case of property name clashes):
+
+   **Before:**
+
+   ```typescript
+   const dataObject = await api.query.storage.dataObjectsById(/* ... */)
+   const dataObjectContentId = dataObject.ipfs_content_id
+   const dataObjectSize = dataObject.getField('size')
+   ```
+
+   **Now:**
+
+   ```typescript
+   const dataObject = await api.query.storage.dataObjectsById(/* ... */)
+   const dataObjectContentId = dataObject.ipfsContentId
+   const dataObjectSize = dataObject.size_
+   ```
+
+1. Constants that represent the custom `Enum`/`Struct` definitions like `WorkingGroupDef` no longer exist. They were sometimes used, for example, in order to iterate over all existing enum variants. For this specific purpose, the `keysOf` utility function was added to `'@joystream/types'`:
+
+   **Before:**
+
+   ```typescript
+   import { WorkingGroupDef, WorkingGroupKey } from '@joystream/types/common'
+
+   // ...
+   ;(Object.keys(WorkingGroupDef) as WorkingGroupKey).forEach((group) => {
+     /* ... */
+   })
+   ```
+
+   **Now:**
+
+   ```typescript
+   import { keysOf } from '@joystream/types'
+   import { PalletCommonWorkingGroup } from '@polkadot/types/lookup'
+
+   // ...
+   keysOf<PalletCommonWorkingGroup, 'PalletCommonWorkingGroup'>('PalletCommonWorkingGroup').forEach(group, () => /* ... */)
+   ```
+
+1. If you were using custom classes to create a specific type instance, you should now use `createType` approach instead, for example:
+
+   **Before:**
+
+   ```typescript
+   import { registry } from '@joystream/types'
+   import { BuyMembershipParameters } from '@joystream/types/members'
+
+   // ...
+   new BuyMembershipParameters(registry, parameters)
+   ```
+
+   **Now:**
+
+   ```typescript
+   import { createType } from '@joystream/types'
+   import { PalletMembershipBuyMembershipParameters } from '@polkadot/types/lookup'
+
+   // ...
+   createType('PalletMembershipBuyMembershipParameters', parameters)
+   ```
+
+   `createType` function will be fully typesafe, even for types with deep nesting.
+
+1. Because the `api-query` augmentations generated by `@polkadot/typegen` now use `AsCodec<T>`, for example, for the `.entires` decoration, some old implementations of functions like `entiresByIds` may not be compatible with the new typings. In order to fix this, `AsCodec` was also added to `@joystream/types` and can be used to address similar issues. For example:
+
+   **Before:**
+
+   ```typescript
+   async function entriesByIds<IDType extends UInt, ValueType extends Codec>(
+     apiMethod: AugmentedQuery<'promise', (key: IDType) => Observable<ValueType>, [IDType]>
+   ): Promise<[IDType, ValueType][]> {
+     const entries: [IDType, ValueType][] = (await apiMethod.entries()).map(([storageKey, value]) => [
+       storageKey.args[0] as IDType,
+       value,
+     ])
+
+     return entries.sort((a, b) => a[0].toNumber() - b[0].toNumber())
+   }
+   ```
+
+   **Now:**
+
+   ```typescript
+   import { AsCodec } from '@joystream/types'
+
+   // ...
+
+   async function entriesByIds<IDType extends UInt, ValueType extends Codec>(
+     apiMethod: AugmentedQuery<'promise', (key: IDType) => Observable<ValueType>, [IDType]>
+   ): Promise<[IDType, AsCodec<ValueType>][]> {
+     const entries: [IDType, AsCodec<ValueType>][] = (await apiMethod.entries()).map(([storageKey, value]) => [
+       storageKey.args[0] as IDType,
+       value,
+     ])
+
+     return entries.sort((a, b) => a[0].toNumber() - b[0].toNumber())
+   }
+   ```
+
+   Because `entriesByIds` as implemented above is quite frequently used, it is also now exported as a utility function from `@joystream/types`
diff --git a/node_modules/@joystream/types/types/README.md b/node_modules/@joystream/types/types/README.md
new file mode 100644
index 0000000..c57b3ed
--- /dev/null
+++ b/node_modules/@joystream/types/types/README.md
@@ -0,0 +1,68 @@
+# `@joystream/types`
+
+The types package provides types and api augmentation for `@polkadot/api` and some useful reusable functionality related to Joystream runtime types.
+
+## Installation
+
+Add the package as a dependency in your project.
+
+```shell
+yarn add @joystream/types
+
+# or
+
+npm install --save @joystream/types
+```
+
+## Example usage
+
+```typescript
+// Make sure to:
+// import '@joystream/types'
+// Even when you're not using any of functionality exported by the library,
+// as this will automatically provide all the required '@polkadot/api' augmentations!
+import { createType, JOYSTREAM_ADDRESS_PREFIX } from '@joystream/types'
+// TypeScript interfaces for all the runtime types can be imported
+// from the augmented `'@polkadot/types/lookup'`:
+import { PalletMembershipBuyMembershipParameters } from '@polkadot/types/lookup'
+import { ApiPromise, WsProvider } from '@polkadot/api'
+import { Keyring } from '@polkadot/keyring'
+
+async function main() {
+  // Initialise the provider to connect to the local node
+  const provider = new WsProvider('ws://127.0.0.1:9944')
+
+  // Create the API and wait until ready
+  const api = await ApiPromise.create({ provider })
+
+  // Retrieve ALICE key pair
+  const keyring = new Keyring({ type: 'sr25519', ss58Format: JOYSTREAM_ADDRESS_PREFIX })
+  keyring.addFromUri('//Alice')
+  const [ALICE] = keyring.getPairs()
+
+  // Buy a new membership
+  const membershipParams: PalletMembershipBuyMembershipParameters = createType(
+    'PalletMembershipBuyMembershipParameters',
+    // The second parameter is automatically typesafe!
+    {
+      handle: 'alice',
+      rootAccount: ALICE.address,
+      controllerAccount: ALICE.address,
+      referrerId: null,
+      metadata: '0x',
+    }
+  )
+
+  const tx = api.tx.members.buyMembership(membershipParams) // Api interface is automatically decorated!
+
+  await tx.signAndSend(ALICE, async ({ status }) => {
+    if (status.isInBlock) {
+      console.log('Membership successfuly bought!')
+      const aliceMember = await api.query.members.membershipById(0) // Query results are automatically decorated!
+      console.log('Member 0 handle hash:', aliceMember.unwrap().handleHash.toString())
+    }
+  })
+}
+
+main()
+```
diff --git a/node_modules/@joystream/types/types/lib/augment/augment-api-consts.d.ts b/node_modules/@joystream/types/types/lib/augment/augment-api-consts.d.ts
new file mode 100644
index 0000000..d73fad2
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/augment-api-consts.d.ts
@@ -0,0 +1,912 @@
+import type { ApiTypes } from '@polkadot/api-base/types';
+import type { U8aFixed, Vec, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { Perbill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportWeightsRuntimeDbWeight, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, PalletContentLimitPerPeriod, PalletProposalsEngineProposalParameters, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+declare module '@polkadot/api-base/types/consts' {
+    interface AugmentedConsts<ApiType extends ApiTypes> {
+        appWorkingGroup: {
+            /**
+             * Stake needed to create an opening.
+             **/
+            leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Max simultaneous active worker number.
+             **/
+            maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake required for applying into an opening.
+             **/
+            minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Defines min unstaking period in the group.
+             **/
+            minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Defines the period every worker gets paid in blocks.
+             **/
+            rewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        authorship: {
+            /**
+             * The number of blocks back we should accept uncles.
+             * This means that we will deal with uncle-parents that are
+             * `UncleGenerations + 1` before `now`.
+             **/
+            uncleGenerations: u32 & AugmentedConst<ApiType>;
+        };
+        babe: {
+            /**
+             * The amount of time, in slots, that each epoch should last.
+             * NOTE: Currently it is not possible to change the epoch duration after
+             * the chain has started. Attempting to do so will brick block production.
+             **/
+            epochDuration: u64 & AugmentedConst<ApiType>;
+            /**
+             * The expected average block time at which BABE should be creating
+             * blocks. Since BABE is probabilistic it is not trivial to figure out
+             * what the expected average block time should be based on the slot
+             * duration and the security parameter `c` (where `1 - c` represents
+             * the probability of a slot being empty).
+             **/
+            expectedBlockTime: u64 & AugmentedConst<ApiType>;
+            /**
+             * Max number of authorities allowed
+             **/
+            maxAuthorities: u32 & AugmentedConst<ApiType>;
+        };
+        bagsList: {
+            /**
+             * The list of thresholds separating the various bags.
+             *
+             * Ids are separated into unsorted bags according to their score. This specifies the
+             * thresholds separating the bags. An id's bag is the largest bag for which the id's score
+             * is less than or equal to its upper threshold.
+             *
+             * When ids are iterated, higher bags are iterated completely before lower bags. This means
+             * that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower
+             * score, but peer ids within a particular bag are sorted in insertion order.
+             *
+             * # Expressing the constant
+             *
+             * This constant must be sorted in strictly increasing order. Duplicate items are not
+             * permitted.
+             *
+             * There is an implied upper limit of `Score::MAX`; that value does not need to be
+             * specified within the bag. For any two threshold lists, if one ends with
+             * `Score::MAX`, the other one does not, and they are otherwise equal, the two
+             * lists will behave identically.
+             *
+             * # Calculation
+             *
+             * It is recommended to generate the set of thresholds in a geometric series, such that
+             * there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *
+             * constant_ratio).max(threshold[k] + 1)` for all `k`.
+             *
+             * The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.
+             *
+             * # Examples
+             *
+             * - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and
+             * iteration is strictly in insertion order.
+             * - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to
+             * the procedure given above, then the constant ratio is equal to 2.
+             * - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to
+             * the procedure given above, then the constant ratio is approximately equal to 1.248.
+             * - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall
+             * into bag 0, an id with score 2 will fall into bag 1, etc.
+             *
+             * # Migration
+             *
+             * In the event that this list ever changes, a copy of the old bags list must be retained.
+             * With that `List::migrate` can be called, which will perform the appropriate migration.
+             **/
+            bagThresholds: Vec<u64> & AugmentedConst<ApiType>;
+        };
+        balances: {
+            /**
+             * The minimum amount required to keep an account open.
+             **/
+            existentialDeposit: u128 & AugmentedConst<ApiType>;
+            /**
+             * The maximum number of locks that should exist on an account.
+             * Not strictly enforced, but used for weight estimation.
+             **/
+            maxLocks: u32 & AugmentedConst<ApiType>;
+            /**
+             * The maximum number of named reserves that can exist on an account.
+             **/
+            maxReserves: u32 & AugmentedConst<ApiType>;
+        };
+        bounty: {
+            /**
+             * Exports const - max work entry number for a closed assurance type contract bounty.
+             **/
+            closedContractSizeLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - creator state bloat bond amount for a bounty.
+             **/
+            creatorStateBloatBondAmount: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - funder state bloat bond amount for a bounty.
+             **/
+            funderStateBloatBondAmount: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - min work entrant stake for a bounty.
+             **/
+            minWorkEntrantStake: u128 & AugmentedConst<ApiType>;
+        };
+        content: {
+            /**
+             * Exports const - default channel daily NFT limit.
+             **/
+            defaultChannelDailyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+            /**
+             * Exports const - default channel weekly NFT limit.
+             **/
+            defaultChannelWeeklyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+            /**
+             * Exports const - default global daily NFT limit.
+             **/
+            defaultGlobalDailyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+            /**
+             * Exports const - default global weekly NFT limit.
+             **/
+            defaultGlobalWeeklyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+            /**
+             * Export const - max cashout allowed limits
+             **/
+            maximumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - max number of keys per curator_group.permissions_by_level map instance
+             **/
+            maxKeysPerCuratorGroupPermissionsByLevelMap: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - max nft auction whitelist length
+             **/
+            maxNftAuctionWhitelistLength: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - max number of curators per group
+             **/
+            maxNumberOfCuratorsPerGroup: u32 & AugmentedConst<ApiType>;
+            /**
+             * Export const - min cashout allowed limits
+             **/
+            minimumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
+        };
+        contentWorkingGroup: {
+            /**
+             * Stake needed to create an opening.
+             **/
+            leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Max simultaneous active worker number.
+             **/
+            maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake required for applying into an opening.
+             **/
+            minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Defines min unstaking period in the group.
+             **/
+            minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Defines the period every worker gets paid in blocks.
+             **/
+            rewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        council: {
+            /**
+             * Duration of annoncing period
+             **/
+            announcingPeriodDuration: u32 & AugmentedConst<ApiType>;
+            /**
+             * Interval between automatic budget refills.
+             **/
+            budgetRefillPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - candidacy lock id.
+             **/
+            candidacyLockId: U8aFixed & AugmentedConst<ApiType>;
+            /**
+             * Exports const - councilor lock id.
+             **/
+            councilorLockId: U8aFixed & AugmentedConst<ApiType>;
+            /**
+             * Council member count
+             **/
+            councilSize: u32 & AugmentedConst<ApiType>;
+            /**
+             * Interval for automatic reward payments.
+             **/
+            electedMemberRewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Duration of idle period
+             **/
+            idlePeriodDuration: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake candidate has to lock
+             **/
+            minCandidateStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Minimum number of extra candidates needed for the valid election.
+             * Number of total candidates is equal to council size plus extra candidates.
+             **/
+            minNumberOfExtraCandidates: u32 & AugmentedConst<ApiType>;
+        };
+        distributionWorkingGroup: {
+            /**
+             * Stake needed to create an opening.
+             **/
+            leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Max simultaneous active worker number.
+             **/
+            maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake required for applying into an opening.
+             **/
+            minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Defines min unstaking period in the group.
+             **/
+            minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Defines the period every worker gets paid in blocks.
+             **/
+            rewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        electionProviderMultiPhase: {
+            /**
+             * The minimum amount of improvement to the solution score that defines a solution as
+             * "better" in the Signed phase.
+             **/
+            betterSignedThreshold: Perbill & AugmentedConst<ApiType>;
+            /**
+             * The minimum amount of improvement to the solution score that defines a solution as
+             * "better" in the Unsigned phase.
+             **/
+            betterUnsignedThreshold: Perbill & AugmentedConst<ApiType>;
+            /**
+             * The maximum number of electable targets to put in the snapshot.
+             **/
+            maxElectableTargets: u16 & AugmentedConst<ApiType>;
+            /**
+             * The maximum number of electing voters to put in the snapshot. At the moment, snapshots
+             * are only over a single block, but once multi-block elections are introduced they will
+             * take place over multiple blocks.
+             **/
+            maxElectingVoters: u32 & AugmentedConst<ApiType>;
+            /**
+             * The priority of the unsigned transaction submitted in the unsigned-phase
+             **/
+            minerTxPriority: u64 & AugmentedConst<ApiType>;
+            /**
+             * The repeat threshold of the offchain worker.
+             *
+             * For example, if it is 5, that means that at least 5 blocks will elapse between attempts
+             * to submit the worker's solution.
+             **/
+            offchainRepeat: u32 & AugmentedConst<ApiType>;
+            /**
+             * Base deposit for a signed solution.
+             **/
+            signedDepositBase: u128 & AugmentedConst<ApiType>;
+            /**
+             * Per-byte deposit for a signed solution.
+             **/
+            signedDepositByte: u128 & AugmentedConst<ApiType>;
+            /**
+             * Per-weight deposit for a signed solution.
+             **/
+            signedDepositWeight: u128 & AugmentedConst<ApiType>;
+            /**
+             * The maximum amount of unchecked solutions to refund the call fee for.
+             **/
+            signedMaxRefunds: u32 & AugmentedConst<ApiType>;
+            /**
+             * Maximum number of signed submissions that can be queued.
+             *
+             * It is best to avoid adjusting this during an election, as it impacts downstream data
+             * structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you
+             * update this value during an election, you _must_ ensure that
+             * `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,
+             * attempts to submit new solutions may cause a runtime panic.
+             **/
+            signedMaxSubmissions: u32 & AugmentedConst<ApiType>;
+            /**
+             * Maximum weight of a signed solution.
+             *
+             * If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of
+             * this pallet), then [`MinerConfig::solution_weight`] is used to compare against
+             * this value.
+             **/
+            signedMaxWeight: u64 & AugmentedConst<ApiType>;
+            /**
+             * Duration of the signed phase.
+             **/
+            signedPhase: u32 & AugmentedConst<ApiType>;
+            /**
+             * Base reward for a signed solution
+             **/
+            signedRewardBase: u128 & AugmentedConst<ApiType>;
+            /**
+             * Duration of the unsigned phase.
+             **/
+            unsignedPhase: u32 & AugmentedConst<ApiType>;
+        };
+        forum: {
+            /**
+             * MaxDirectSubcategoriesInCategory
+             **/
+            maxDirectSubcategoriesInCategory: u64 & AugmentedConst<ApiType>;
+            /**
+             * MaxTotalCategories
+             **/
+            maxTotalCategories: u64 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Deposit needed to create a post
+             **/
+            postDeposit: u128 & AugmentedConst<ApiType>;
+            /**
+             * Deposit needed to create a thread
+             **/
+            threadDeposit: u128 & AugmentedConst<ApiType>;
+        };
+        forumWorkingGroup: {
+            /**
+             * Stake needed to create an opening.
+             **/
+            leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Max simultaneous active worker number.
+             **/
+            maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake required for applying into an opening.
+             **/
+            minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Defines min unstaking period in the group.
+             **/
+            minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Defines the period every worker gets paid in blocks.
+             **/
+            rewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        grandpa: {
+            /**
+             * Max Authorities in use
+             **/
+            maxAuthorities: u32 & AugmentedConst<ApiType>;
+        };
+        imOnline: {
+            /**
+             * A configuration for base priority of unsigned transactions.
+             *
+             * This is exposed so that it can be tuned for particular runtime, when
+             * multiple pallets send unsigned transactions.
+             **/
+            unsignedPriority: u64 & AugmentedConst<ApiType>;
+        };
+        members: {
+            /**
+             * Exports const - Stake needed to candidate as staking account.
+             **/
+            candidateStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - default balance for the invited member.
+             **/
+            defaultInitialInvitationBalance: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - default membership fee.
+             **/
+            defaultMembershipPrice: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - invited member lock id.
+             **/
+            invitedMemberLockId: U8aFixed & AugmentedConst<ApiType>;
+            /**
+             * Exports const - maximum percent value of the membership fee for the referral cut.
+             **/
+            referralCutMaximumPercent: u8 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - staking candidate lock id.
+             **/
+            stakingCandidateLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        membershipWorkingGroup: {
+            /**
+             * Stake needed to create an opening.
+             **/
+            leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Max simultaneous active worker number.
+             **/
+            maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake required for applying into an opening.
+             **/
+            minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Defines min unstaking period in the group.
+             **/
+            minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Defines the period every worker gets paid in blocks.
+             **/
+            rewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        multisig: {
+            /**
+             * The base amount of currency needed to reserve for creating a multisig execution or to
+             * store a dispatch call for later.
+             *
+             * This is held for an additional storage item whose value size is
+             * `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is
+             * `32 + sizeof(AccountId)` bytes.
+             **/
+            depositBase: u128 & AugmentedConst<ApiType>;
+            /**
+             * The amount of currency needed per unit threshold when creating a multisig execution.
+             *
+             * This is held for adding 32 bytes more into a pre-existing storage value.
+             **/
+            depositFactor: u128 & AugmentedConst<ApiType>;
+            /**
+             * The maximum amount of signatories allowed in the multisig.
+             **/
+            maxSignatories: u16 & AugmentedConst<ApiType>;
+        };
+        operationsWorkingGroupAlpha: {
+            /**
+             * Stake needed to create an opening.
+             **/
+            leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Max simultaneous active worker number.
+             **/
+            maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake required for applying into an opening.
+             **/
+            minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Defines min unstaking period in the group.
+             **/
+            minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Defines the period every worker gets paid in blocks.
+             **/
+            rewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        operationsWorkingGroupBeta: {
+            /**
+             * Stake needed to create an opening.
+             **/
+            leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Max simultaneous active worker number.
+             **/
+            maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake required for applying into an opening.
+             **/
+            minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Defines min unstaking period in the group.
+             **/
+            minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Defines the period every worker gets paid in blocks.
+             **/
+            rewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        operationsWorkingGroupGamma: {
+            /**
+             * Stake needed to create an opening.
+             **/
+            leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Max simultaneous active worker number.
+             **/
+            maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake required for applying into an opening.
+             **/
+            minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Defines min unstaking period in the group.
+             **/
+            minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Defines the period every worker gets paid in blocks.
+             **/
+            rewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        proposalsCodex: {
+            /**
+             * Exports 'Amend Constitution' proposal parameters.
+             **/
+            amendConstitutionProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Cancel Working Group Lead Opening' proposal parameters.
+             **/
+            cancelWorkingGroupLeadOpeningProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Create Working Group Lead Opening' proposal parameters.
+             **/
+            createWorkingGroupLeadOpeningProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Decrease Working Group Lead Stake' proposal parameters.
+             **/
+            decreaseWorkingGroupLeadStakeProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Fill Working Group Lead Opening' proposal parameters.
+             **/
+            fillWorkingGroupOpeningProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Max number of accounts per funding request proposal
+             **/
+            fundingRequestProposalMaxAccounts: u32 & AugmentedConst<ApiType>;
+            /**
+             * Maximum total amount in funding request proposal
+             **/
+            fundingRequestProposalMaxTotalAmount: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Funding Request' proposal parameters.
+             **/
+            fundingRequestProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Runtime Upgrade' proposal parameters.
+             **/
+            runtimeUpgradeProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports `Set Council Budget Increment` proposal parameters.
+             **/
+            setCouncilBudgetIncrementProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports `Set Councilor Reward Proposal Parameters` proposal parameters.
+             **/
+            setCouncilorRewardProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports `Set Initial Invitation Balance` proposal parameters.
+             **/
+            setInitialInvitationBalanceProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            setInvitationCountProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Max allowed number of validators in set max validator count proposal
+             **/
+            setMaxValidatorCountProposalMaxValidators: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Set Max Validator Count' proposal parameters.
+             **/
+            setMaxValidatorCountProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            setMembershipLeadInvitationQuotaProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Set Membership Price' proposal parameters.
+             **/
+            setMembershipPriceProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            setReferralCutProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Set Working Group Lead Reward' proposal parameters.
+             **/
+            setWorkingGroupLeadRewardProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Signal' proposal parameters.
+             **/
+            signalProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Slash Working Group Lead' proposal parameters.
+             **/
+            slashWorkingGroupLeadProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Terminate Working Group Lead' proposal parameters.
+             **/
+            terminateWorkingGroupLeadProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            updateChannelPayoutsProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            updateGlobalNftLimitProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Max yearly patronage rate update proposal
+             **/
+            updateMaxYearlyPatronageRate: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Exports 'Update Working Group Budget' proposal parameters.
+             **/
+            updateWorkingGroupBudgetProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            vetoProposalProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+        };
+        proposalsDiscussion: {
+            /**
+             * Exports const - author list size limit for the Closed discussion.
+             **/
+            maxWhiteListSize: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - fee for creating a post
+             **/
+            postDeposit: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - maximum number of blocks before a post can be erased by anyone
+             **/
+            postLifeTime: u32 & AugmentedConst<ApiType>;
+        };
+        proposalsEngine: {
+            /**
+             * Exports const - the fee is applied when cancel the proposal. A fee would be slashed (burned).
+             **/
+            cancellationFee: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const -  max allowed proposal description length.
+             **/
+            descriptionMaxLength: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const -  max simultaneous active proposals number.
+             **/
+            maxActiveProposalLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const -  the fee is applied when the proposal gets rejected. A fee would
+             * be slashed (burned).
+             **/
+            rejectionFee: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+            /**
+             * Exports const -  max allowed proposal title length.
+             **/
+            titleMaxLength: u32 & AugmentedConst<ApiType>;
+        };
+        referendum: {
+            /**
+             * Maximum length of vote commitment salt. Use length that ensures uniqueness for hashing
+             * e.g. std::u64::MAX.
+             **/
+            maxSaltLength: u64 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake needed for voting
+             **/
+            minimumStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Duration of revealing stage (number of blocks)
+             **/
+            revealStageDuration: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+            /**
+             * Duration of voting stage (number of blocks)
+             **/
+            voteStageDuration: u32 & AugmentedConst<ApiType>;
+        };
+        staking: {
+            /**
+             * Number of eras that staked funds must remain bonded for.
+             **/
+            bondingDuration: u32 & AugmentedConst<ApiType>;
+            /**
+             * Maximum number of nominations per nominator.
+             **/
+            maxNominations: u32 & AugmentedConst<ApiType>;
+            /**
+             * The maximum number of nominators rewarded for each validator.
+             *
+             * For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can
+             * claim their reward. This used to limit the i/o cost for the nominator payout.
+             **/
+            maxNominatorRewardedPerValidator: u32 & AugmentedConst<ApiType>;
+            /**
+             * The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively
+             * determines how many unique eras a staker may be unbonding in.
+             **/
+            maxUnlockingChunks: u32 & AugmentedConst<ApiType>;
+            /**
+             * Number of sessions per era.
+             **/
+            sessionsPerEra: u32 & AugmentedConst<ApiType>;
+            /**
+             * Number of eras that slashes are deferred by, after computation.
+             *
+             * This should be less than the bonding duration. Set to 0 if slashes
+             * should be applied immediately, without opportunity for intervention.
+             **/
+            slashDeferDuration: u32 & AugmentedConst<ApiType>;
+        };
+        storage: {
+            /**
+             * Exports const - maximum size of the "hash blacklist" collection.
+             **/
+            blacklistSizeLimit: u64 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - the default dynamic bag creation policy for channels (storage bucket
+             * number).
+             **/
+            defaultChannelDynamicBagNumberOfStorageBuckets: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - the default dynamic bag creation policy for members (storage bucket
+             * number).
+             **/
+            defaultMemberDynamicBagNumberOfStorageBuckets: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - max data object size in bytes.
+             **/
+            maxDataObjectSize: u64 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - max allowed distribution bucket family number.
+             **/
+            maxDistributionBucketFamilyNumber: u64 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - maximum number of distribution buckets per bag.
+             **/
+            maxDistributionBucketsPerBag: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - max number of operators per distribution bucket.
+             **/
+            maxNumberOfOperatorsPerDistributionBucket: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - max number of pending invitations per distribution bucket.
+             **/
+            maxNumberOfPendingInvitationsPerDistributionBucket: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - maximum number of storage buckets per bag.
+             **/
+            maxStorageBucketsPerBag: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - minimum number of distribution buckets per bag.
+             **/
+            minDistributionBucketsPerBag: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - minimum number of storage buckets per bag.
+             **/
+            minStorageBucketsPerBag: u32 & AugmentedConst<ApiType>;
+        };
+        storageWorkingGroup: {
+            /**
+             * Stake needed to create an opening.
+             **/
+            leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const
+             * Max simultaneous active worker number.
+             **/
+            maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Minimum stake required for applying into an opening.
+             **/
+            minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+            /**
+             * Defines min unstaking period in the group.
+             **/
+            minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Defines the period every worker gets paid in blocks.
+             **/
+            rewardPeriod: u32 & AugmentedConst<ApiType>;
+            /**
+             * Staking handler lock id.
+             **/
+            stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+        };
+        system: {
+            /**
+             * Maximum number of block number to block hash mappings to keep (oldest pruned first).
+             **/
+            blockHashCount: u32 & AugmentedConst<ApiType>;
+            /**
+             * The maximum length of a block (in bytes).
+             **/
+            blockLength: FrameSystemLimitsBlockLength & AugmentedConst<ApiType>;
+            /**
+             * Block & extrinsics weights: base values and limits.
+             **/
+            blockWeights: FrameSystemLimitsBlockWeights & AugmentedConst<ApiType>;
+            /**
+             * The weight of runtime database operations the runtime can invoke.
+             **/
+            dbWeight: FrameSupportWeightsRuntimeDbWeight & AugmentedConst<ApiType>;
+            /**
+             * The designated SS85 prefix of this chain.
+             *
+             * This replaces the "ss58Format" property declared in the chain spec. Reason is
+             * that the runtime should know about the prefix in order to make use of it as
+             * an identifier of the chain.
+             **/
+            ss58Prefix: u16 & AugmentedConst<ApiType>;
+            /**
+             * Get the chain's current version.
+             **/
+            version: SpVersionRuntimeVersion & AugmentedConst<ApiType>;
+        };
+        timestamp: {
+            /**
+             * The minimum period between blocks. Beware that this is different to the *expected*
+             * period that the block production apparatus provides. Your chosen consensus system will
+             * generally work with this to determine a sensible block time. e.g. For Aura, it will be
+             * double this period on default settings.
+             **/
+            minimumPeriod: u64 & AugmentedConst<ApiType>;
+        };
+        transactionPayment: {
+            /**
+             * A fee mulitplier for `Operational` extrinsics to compute "virtual tip" to boost their
+             * `priority`
+             *
+             * This value is multipled by the `final_fee` to obtain a "virtual tip" that is later
+             * added to a tip component in regular `priority` calculations.
+             * It means that a `Normal` transaction can front-run a similarly-sized `Operational`
+             * extrinsic (with no tip), by including a tip value greater than the virtual tip.
+             *
+             * ```rust,ignore
+             * // For `Normal`
+             * let priority = priority_calc(tip);
+             *
+             * // For `Operational`
+             * let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;
+             * let priority = priority_calc(tip + virtual_tip);
+             * ```
+             *
+             * Note that since we use `final_fee` the multiplier applies also to the regular `tip`
+             * sent with the transaction. So, not only does the transaction get a priority bump based
+             * on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`
+             * transactions.
+             **/
+            operationalFeeMultiplier: u8 & AugmentedConst<ApiType>;
+        };
+        utility: {
+            /**
+             * The limit on the number of batched calls.
+             **/
+            batchedCallsLimit: u32 & AugmentedConst<ApiType>;
+        };
+        vesting: {
+            maxVestingSchedules: u32 & AugmentedConst<ApiType>;
+            /**
+             * The minimum amount transferred to call `vested_transfer`.
+             **/
+            minVestedTransfer: u128 & AugmentedConst<ApiType>;
+        };
+    }
+}
diff --git a/node_modules/@joystream/types/types/lib/augment/augment-api-errors.d.ts b/node_modules/@joystream/types/types/lib/augment/augment-api-errors.d.ts
new file mode 100644
index 0000000..fb7f6f4
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/augment-api-errors.d.ts
@@ -0,0 +1,3380 @@
+import type { ApiTypes } from '@polkadot/api-base/types';
+declare module '@polkadot/api-base/types/errors' {
+    interface AugmentedErrors<ApiType extends ApiTypes> {
+        appWorkingGroup: {
+            /**
+             * Trying to fill opening with an application for other opening
+             **/
+            ApplicationsNotForOpening: AugmentedError<ApiType>;
+            /**
+             * Application stake is less than required opening stake.
+             **/
+            ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Staking less than the lower bound.
+             **/
+            BelowMinimumStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot decrease stake - stake delta greater than initial stake.
+             **/
+            CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+            /**
+             * There is leader already, cannot hire another one.
+             **/
+            CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening with multiple applications.
+             **/
+            CannotHireMultipleLeaders: AugmentedError<ApiType>;
+            /**
+             * Reward could not be zero.
+             **/
+            CannotRewardWithZero: AugmentedError<ApiType>;
+            /**
+             * Invalid spending amount.
+             **/
+            CannotSpendZero: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Current lead is not set.
+             **/
+            CurrentLeadNotSet: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * It's not enough budget for this spending.
+             **/
+            InsufficientBudgetForSpending: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid origin for a member.
+             **/
+            InvalidMemberOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Not a lead account.
+             **/
+            IsNotLeadAccount: AugmentedError<ApiType>;
+            /**
+             * Working group size limit exceeded.
+             **/
+            MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening - no applications provided.
+             **/
+            NoApplicationsProvided: AugmentedError<ApiType>;
+            /**
+             * Opening does not exist.
+             **/
+            OpeningDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is not applicant.
+             **/
+            OriginIsNotApplicant: AugmentedError<ApiType>;
+            /**
+             * Signer is not worker role account.
+             **/
+            SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+            /**
+             * Provided stake balance cannot be zero.
+             **/
+            StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Successful worker application does not exist.
+             **/
+            SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Specified unstaking period is less then minimum set for the group.
+             **/
+            UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+            /**
+             * Worker application does not exist.
+             **/
+            WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker does not exist.
+             **/
+            WorkerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker has no recurring reward.
+             **/
+            WorkerHasNoReward: AugmentedError<ApiType>;
+            /**
+             * Invalid operation - worker is leaving.
+             **/
+            WorkerIsLeaving: AugmentedError<ApiType>;
+            /**
+             * Worker storage text is too long.
+             **/
+            WorkerStorageValueTooLong: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        authorship: {
+            /**
+             * The uncle is genesis.
+             **/
+            GenesisUncle: AugmentedError<ApiType>;
+            /**
+             * The uncle parent not in the chain.
+             **/
+            InvalidUncleParent: AugmentedError<ApiType>;
+            /**
+             * The uncle isn't recent enough to be included.
+             **/
+            OldUncle: AugmentedError<ApiType>;
+            /**
+             * The uncle is too high in chain.
+             **/
+            TooHighUncle: AugmentedError<ApiType>;
+            /**
+             * Too many uncles.
+             **/
+            TooManyUncles: AugmentedError<ApiType>;
+            /**
+             * The uncle is already included.
+             **/
+            UncleAlreadyIncluded: AugmentedError<ApiType>;
+            /**
+             * Uncles already set in the block.
+             **/
+            UnclesAlreadySet: AugmentedError<ApiType>;
+        };
+        babe: {
+            /**
+             * A given equivocation report is valid but already previously reported.
+             **/
+            DuplicateOffenceReport: AugmentedError<ApiType>;
+            /**
+             * Submitted configuration is invalid.
+             **/
+            InvalidConfiguration: AugmentedError<ApiType>;
+            /**
+             * An equivocation proof provided as part of an equivocation report is invalid.
+             **/
+            InvalidEquivocationProof: AugmentedError<ApiType>;
+            /**
+             * A key ownership proof provided as part of an equivocation report is invalid.
+             **/
+            InvalidKeyOwnershipProof: AugmentedError<ApiType>;
+        };
+        bagsList: {
+            /**
+             * A error in the list interface implementation.
+             **/
+            List: AugmentedError<ApiType>;
+        };
+        balances: {
+            /**
+             * Beneficiary account must pre-exist
+             **/
+            DeadAccount: AugmentedError<ApiType>;
+            /**
+             * Value too low to create account due to existential deposit
+             **/
+            ExistentialDeposit: AugmentedError<ApiType>;
+            /**
+             * A vesting schedule already exists for this account
+             **/
+            ExistingVestingSchedule: AugmentedError<ApiType>;
+            /**
+             * Balance too low to send value
+             **/
+            InsufficientBalance: AugmentedError<ApiType>;
+            /**
+             * Transfer/payment would kill account
+             **/
+            KeepAlive: AugmentedError<ApiType>;
+            /**
+             * Account liquidity restrictions prevent withdrawal
+             **/
+            LiquidityRestrictions: AugmentedError<ApiType>;
+            /**
+             * Number of named reserves exceed MaxReserves
+             **/
+            TooManyReserves: AugmentedError<ApiType>;
+            /**
+             * Vesting balance too high to send value
+             **/
+            VestingBalance: AugmentedError<ApiType>;
+        };
+        bounty: {
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Bounty doesnt exist.
+             **/
+            BountyDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Incompatible assurance contract type for a member: cannot submit work to the 'closed
+             * assurance' bounty contract.
+             **/
+            CannotSubmitWorkToClosedContractBounty: AugmentedError<ApiType>;
+            /**
+             * Cherry less than minimum allowed.
+             **/
+            CherryLessThenMinimumAllowed: AugmentedError<ApiType>;
+            /**
+             * Cannot create a 'closed assurance contract' bounty with empty member list.
+             **/
+            ClosedContractMemberListIsEmpty: AugmentedError<ApiType>;
+            /**
+             * Cannot create a 'closed assurance contract' bounty with member list larger
+             * than allowed max work entry limit.
+             **/
+            ClosedContractMemberListIsTooLarge: AugmentedError<ApiType>;
+            /**
+             * 'closed assurance contract' bounty member list can only include existing members
+             **/
+            ClosedContractMemberNotFound: AugmentedError<ApiType>;
+            /**
+             * The conflicting stake discovered. Cannot stake.
+             **/
+            ConflictingStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot create a bounty with an entrant stake is less than required minimum.
+             **/
+            EntrantStakeIsLessThanMininum: AugmentedError<ApiType>;
+            /**
+             * Cannot create a bounty with zero funding amount parameter.
+             **/
+            FundingAmountCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Cannot create a bounty with zero funding period parameter.
+             **/
+            FundingPeriodCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance for a bounty cherry.
+             **/
+            InsufficientBalanceForBounty: AugmentedError<ApiType>;
+            /**
+             * There is not enough balance for a stake.
+             **/
+            InsufficientBalanceForStake: AugmentedError<ApiType>;
+            /**
+             * Bounty contributor not found
+             **/
+            InvalidContributorActorSpecified: AugmentedError<ApiType>;
+            /**
+             * Invalid Creator Actor for Bounty specified
+             **/
+            InvalidCreatorActorSpecified: AugmentedError<ApiType>;
+            /**
+             * Member specified is not an entrant worker
+             **/
+            InvalidEntrantWorkerSpecified: AugmentedError<ApiType>;
+            /**
+             * Bounty oracle not found
+             **/
+            InvalidOracleActorSpecified: AugmentedError<ApiType>;
+            /**
+             * Provided oracle member id does not belong to an existing member
+             **/
+            InvalidOracleMemberId: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: Cancelled.
+             **/
+            InvalidStageUnexpectedCancelled: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: FailedBountyWithdrawal.
+             **/
+            InvalidStageUnexpectedFailedBountyWithdrawal: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: Funding.
+             **/
+            InvalidStageUnexpectedFunding: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: Judgment.
+             **/
+            InvalidStageUnexpectedJudgment: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: NoFundingContributed.
+             **/
+            InvalidStageUnexpectedNoFundingContributed: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: SuccessfulBountyWithdrawal.
+             **/
+            InvalidStageUnexpectedSuccessfulBountyWithdrawal: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: WorkSubmission.
+             **/
+            InvalidStageUnexpectedWorkSubmission: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Min funding amount cannot be greater than max amount.
+             **/
+            MinFundingAmountCannotBeGreaterThanMaxAmount: AugmentedError<ApiType>;
+            /**
+             * Cannot found bounty contribution.
+             **/
+            NoBountyContributionFound: AugmentedError<ApiType>;
+            /**
+             * Oracle have already been withdrawn
+             **/
+            OracleRewardAlreadyWithdrawn: AugmentedError<ApiType>;
+            /**
+             * Origin is root, so switching oracle is not allowed in this extrinsic. (call switch_oracle_as_root)
+             **/
+            SwitchOracleOriginIsRoot: AugmentedError<ApiType>;
+            /**
+             * The total reward for winners should be equal to total bounty funding.
+             **/
+            TotalRewardShouldBeEqualToTotalFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid judgment - all winners should have work submissions.
+             **/
+            WinnerShouldHasWorkSubmission: AugmentedError<ApiType>;
+            /**
+             * Worker tried to access a work entry that doesn't belong to him
+             **/
+            WorkEntryDoesntBelongToWorker: AugmentedError<ApiType>;
+            /**
+             * Work entry doesnt exist.
+             **/
+            WorkEntryDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Cannot set zero reward for winners.
+             **/
+            ZeroWinnerReward: AugmentedError<ApiType>;
+        };
+        content: {
+            /**
+             * Already active auction cannot be cancelled
+             **/
+            ActionHasBidsAlready: AugmentedError<ApiType>;
+            /**
+             * Actor cannot authorize as lead for given extrinsic
+             **/
+            ActorCannotBeLead: AugmentedError<ApiType>;
+            /**
+             * Actor cannot Own channel
+             **/
+            ActorCannotOwnChannel: AugmentedError<ApiType>;
+            /**
+             * Actor is not a last bidder
+             **/
+            ActorIsNotBidder: AugmentedError<ApiType>;
+            /**
+             * Actor is not A Member
+             **/
+            ActorNotAMember: AugmentedError<ApiType>;
+            /**
+             * Operation cannot be perfomed with this Actor
+             **/
+            ActorNotAuthorized: AugmentedError<ApiType>;
+            /**
+             * List of assets to remove provided for update_channel / update_video contains assets that don't belong to the specified entity
+             **/
+            AssetsToRemoveBeyondEntityAssetsSet: AugmentedError<ApiType>;
+            /**
+             * Auction bid step lower bound exceeded
+             **/
+            AuctionBidStepLowerBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Auction bid step upper bound exceeded
+             **/
+            AuctionBidStepUpperBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Auction cannot be completed
+             **/
+            AuctionCannotBeCompleted: AugmentedError<ApiType>;
+            /**
+             * Auction did not started
+             **/
+            AuctionDidNotStart: AugmentedError<ApiType>;
+            /**
+             * Auction duration lower bound exceeded
+             **/
+            AuctionDurationLowerBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Auction duration upper bound exceeded
+             **/
+            AuctionDurationUpperBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Expected root or signed origin
+             **/
+            BadOrigin: AugmentedError<ApiType>;
+            /**
+             * Auction does not have bids
+             **/
+            BidDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Selected Bid is for past open auction
+             **/
+            BidIsForPastAuction: AugmentedError<ApiType>;
+            /**
+             * Bid lock duration is not expired
+             **/
+            BidLockDurationIsNotExpired: AugmentedError<ApiType>;
+            /**
+             * Bid lock duration lower bound exceeded
+             **/
+            BidLockDurationLowerBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Bid lock duration upper bound exceeded
+             **/
+            BidLockDurationUpperBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Minimal auction bid step constraint violated.
+             **/
+            BidStepConstraintViolated: AugmentedError<ApiType>;
+            /**
+             * Auction buy now is less then starting price
+             **/
+            BuyNowMustBeGreaterThanStartingPrice: AugmentedError<ApiType>;
+            /**
+             * Cannot directly withdraw funds from a channel account when the channel has
+             * a creator token issued
+             **/
+            CannotWithdrawFromChannelWithCreatorTokenIssued: AugmentedError<ApiType>;
+            /**
+             * Channel cashout amount is too low to be claimed
+             **/
+            CashoutAmountBelowMinimumAmount: AugmentedError<ApiType>;
+            /**
+             * Channel cashout amount is too high to be claimed
+             **/
+            CashoutAmountExceedsMaximumAmount: AugmentedError<ApiType>;
+            /**
+             * A Channel or Video Category does not exist.
+             **/
+            CategoryDoesNotExist: AugmentedError<ApiType>;
+            ChannelAgentInsufficientPermissions: AugmentedError<ApiType>;
+            /**
+             * Unexpected runtime state: missing channel bag during delete_channel attempt
+             **/
+            ChannelBagMissing: AugmentedError<ApiType>;
+            /**
+             * Channel cashouts are currently disabled
+             **/
+            ChannelCashoutsDisabled: AugmentedError<ApiType>;
+            /**
+             * Channel Contains Assets
+             **/
+            ChannelContainsAssets: AugmentedError<ApiType>;
+            /**
+             * Channel Contains Video
+             **/
+            ChannelContainsVideos: AugmentedError<ApiType>;
+            /**
+             * Channel does not exist
+             **/
+            ChannelDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Operation cannot be executed, because this channel feature has been paused by a curator
+             **/
+            ChannelFeaturePaused: AugmentedError<ApiType>;
+            ChannelNftDailyLimitExceeded: AugmentedError<ApiType>;
+            ChannelNftWeeklyLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Provided channel owner (curator group) does not exist
+             **/
+            ChannelOwnerCuratorGroupDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Provided channel owner (member) does not exist
+             **/
+            ChannelOwnerMemberDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Channel state bloat bond cannot be lower than existential deposit,
+             * because it must secure the channel module account against dusting
+             **/
+            ChannelStateBloatBondBelowExistentialDeposit: AugmentedError<ApiType>;
+            /**
+             * Invalid extrinsic call: Channel state bloat bond changed.
+             **/
+            ChannelStateBloatBondChanged: AugmentedError<ApiType>;
+            /**
+             * Channel Transfers are blocked during active AMM
+             **/
+            ChannelTransfersBlockedDuringActiveAmm: AugmentedError<ApiType>;
+            /**
+             * Channel Transfers are blocked during revenue splits
+             **/
+            ChannelTransfersBlockedDuringRevenueSplits: AugmentedError<ApiType>;
+            /**
+             * Channel Transfers are blocked during token sales
+             **/
+            ChannelTransfersBlockedDuringTokenSales: AugmentedError<ApiType>;
+            /**
+             * Creator token was already issued for this channel
+             **/
+            CreatorTokenAlreadyIssued: AugmentedError<ApiType>;
+            /**
+             * Creator token wasn't issued for this channel
+             **/
+            CreatorTokenNotIssued: AugmentedError<ApiType>;
+            /**
+             * Curator authentication failed
+             **/
+            CuratorAuthFailed: AugmentedError<ApiType>;
+            /**
+             * Given curator group does not exist
+             **/
+            CuratorGroupDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Curator group is not active
+             **/
+            CuratorGroupIsNotActive: AugmentedError<ApiType>;
+            /**
+             * Curator group's permissions by level map exceeded the maximum allowed size
+             **/
+            CuratorGroupMaxPermissionsByLevelMapSizeExceeded: AugmentedError<ApiType>;
+            /**
+             * Curator id is not a worker id in content working group
+             **/
+            CuratorIdInvalid: AugmentedError<ApiType>;
+            /**
+             * Curator under provided curator id is already a member of curaror group under given id
+             **/
+            CuratorIsAlreadyAMemberOfGivenCuratorGroup: AugmentedError<ApiType>;
+            /**
+             * Curator under provided curator id is not a member of curaror group under given id
+             **/
+            CuratorIsNotAMemberOfGivenCuratorGroup: AugmentedError<ApiType>;
+            /**
+             * Curator does not have permissions to perform given moderation action
+             **/
+            CuratorModerationActionNotAllowed: AugmentedError<ApiType>;
+            /**
+             * Max number of curators per group limit reached
+             **/
+            CuratorsPerGroupLimitReached: AugmentedError<ApiType>;
+            /**
+             * Given origin does not own nft
+             **/
+            DoesNotOwnNft: AugmentedError<ApiType>;
+            /**
+             * Extension period is greater then auction duration
+             **/
+            ExtensionPeriodIsGreaterThenAuctionDuration: AugmentedError<ApiType>;
+            /**
+             * Auction extension period lower bound exceeded
+             **/
+            ExtensionPeriodLowerBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Auction extension period upper bound exceeded
+             **/
+            ExtensionPeriodUpperBoundExceeded: AugmentedError<ApiType>;
+            GlobalNftDailyLimitExceeded: AugmentedError<ApiType>;
+            GlobalNftWeeklyLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance
+             **/
+            InsufficientBalance: AugmentedError<ApiType>;
+            /**
+             * Cannot create the channel: channel creator has insufficient balance
+             * (budget for channel state bloat bond + channel data objs state bloat bonds + data objs storage fees + existential deposit)
+             **/
+            InsufficientBalanceForChannelCreation: AugmentedError<ApiType>;
+            /**
+             * Cannot transfer the channel: channel owner has insufficient balance (budget for WGs)
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Cannot create the video: video creator has insufficient balance
+             * (budget for video state bloat bond + video data objs state bloat bonds + data objs storage fees + existential deposit)
+             **/
+            InsufficientBalanceForVideoCreation: AugmentedError<ApiType>;
+            InsufficientCouncilBudget: AugmentedError<ApiType>;
+            /**
+             * Insufficient treasury balance
+             **/
+            InsufficientTreasuryBalance: AugmentedError<ApiType>;
+            /**
+             * Channel assets feasibility
+             **/
+            InvalidAssetsProvided: AugmentedError<ApiType>;
+            /**
+             * Bag Size specified is not valid
+             **/
+            InvalidBagSizeSpecified: AugmentedError<ApiType>;
+            /**
+             * Commit verification for bid amount
+             **/
+            InvalidBidAmountSpecified: AugmentedError<ApiType>;
+            /**
+             * `witness_price` provided to `buy_now` extrinsic does not match the current sell price
+             **/
+            InvalidBuyNowWitnessPriceProvided: AugmentedError<ApiType>;
+            /**
+             * Channel bag witness parameters don't match the current runtime state
+             **/
+            InvalidChannelBagWitnessProvided: AugmentedError<ApiType>;
+            /**
+             * Incorrect channel owner for an operation.
+             **/
+            InvalidChannelOwner: AugmentedError<ApiType>;
+            /**
+             * Incorrect actor tries to accept the channel transfer.
+             **/
+            InvalidChannelTransferAcceptor: AugmentedError<ApiType>;
+            /**
+             * Cannot accept the channel transfer: provided commitment parameters doesn't match with
+             * channel pending transfer parameters.
+             **/
+            InvalidChannelTransferCommitmentParams: AugmentedError<ApiType>;
+            /**
+             * Invalid channel transfer status for operations.
+             **/
+            InvalidChannelTransferStatus: AugmentedError<ApiType>;
+            /**
+             * Invalid member id  specified
+             **/
+            InvalidMemberProvided: AugmentedError<ApiType>;
+            /**
+             * Current nft offer price does not match the provided `witness_price`
+             **/
+            InvalidNftOfferWitnessPriceProvided: AugmentedError<ApiType>;
+            /**
+             * Storage buckets number witness parameter does not match the current runtime state
+             **/
+            InvalidStorageBucketsNumWitnessProvided: AugmentedError<ApiType>;
+            /**
+             * Invalid number of objects to delete provided for delete_video
+             **/
+            InvalidVideoDataObjectsCountProvided: AugmentedError<ApiType>;
+            /**
+             * Auction type is not `English`
+             **/
+            IsNotEnglishAuctionType: AugmentedError<ApiType>;
+            /**
+             * Auction type is not `Open`
+             **/
+            IsNotOpenAuctionType: AugmentedError<ApiType>;
+            /**
+             * Lead authentication failed
+             **/
+            LeadAuthFailed: AugmentedError<ApiType>;
+            /**
+             * Max auction whitelist length upper bound exceeded
+             **/
+            MaxAuctionWhiteListLengthUpperBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Attempt to set minimum cashout allowed above the limit
+             **/
+            MaxCashoutValueTooHigh: AugmentedError<ApiType>;
+            /**
+             * Maximum number of curator permissions per given channel privilege level exceeded
+             **/
+            MaxCuratorPermissionsPerLevelExceeded: AugmentedError<ApiType>;
+            /**
+             * Maximum number of channel agent permissions for channel agent exceeded
+             **/
+            MaxNumberOfChannelAgentPermissionsExceeded: AugmentedError<ApiType>;
+            /**
+             * Number of channel assets exceeds MaxNumberOfAssetsPerChannel
+             **/
+            MaxNumberOfChannelAssetsExceeded: AugmentedError<ApiType>;
+            /**
+             * Number of channel collaborators exceeds MaxNumberOfCollaboratorsPerChannel
+             **/
+            MaxNumberOfChannelCollaboratorsExceeded: AugmentedError<ApiType>;
+            /**
+             * Maximum number of paused features per channel exceeded
+             **/
+            MaxNumberOfPausedFeaturesPerChannelExceeded: AugmentedError<ApiType>;
+            /**
+             * Number of video assets exceeds MaxMaxNumberOfAssetsPerVideo
+             **/
+            MaxNumberOfVideoAssetsExceeded: AugmentedError<ApiType>;
+            /**
+             * Member authentication failed
+             **/
+            MemberAuthFailed: AugmentedError<ApiType>;
+            /**
+             * Member id could not be derived from the provided ContentActor context
+             **/
+            MemberIdCouldNotBeDerivedFromActor: AugmentedError<ApiType>;
+            /**
+             * Member is not allowed to participate in auction
+             **/
+            MemberIsNotAllowedToParticipate: AugmentedError<ApiType>;
+            /**
+             * Member profile not found
+             **/
+            MemberProfileNotFound: AugmentedError<ApiType>;
+            /**
+             * Migration not done yet
+             **/
+            MigrationNotFinished: AugmentedError<ApiType>;
+            /**
+             * New values for min_cashout_allowed/max_cashout_allowed are invalid
+             * min_cashout_allowed cannot exceed max_cashout_allowed
+             **/
+            MinCashoutAllowedExceedsMaxCashoutAllowed: AugmentedError<ApiType>;
+            /**
+             * Attempt to set minimum cashout allowed below the limit
+             **/
+            MinCashoutValueTooLow: AugmentedError<ApiType>;
+            /**
+             * Storage buckets number witness parameter must be provided when channel/video assets
+             * are being updated.
+             **/
+            MissingStorageBucketsNumWitness: AugmentedError<ApiType>;
+            /**
+             * Nft for given video id already exists
+             **/
+            NftAlreadyExists: AugmentedError<ApiType>;
+            /**
+             * Attempt to sling back a channel owned nft
+             **/
+            NftAlreadyOwnedByChannel: AugmentedError<ApiType>;
+            /**
+             * Nft auction is already expired
+             **/
+            NftAuctionIsAlreadyExpired: AugmentedError<ApiType>;
+            /**
+             * Nft for given video id does not exist
+             **/
+            NftDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Can not create auction for Nft, if auction have been already started or nft is locked for the transfer
+             **/
+            NftIsNotIdle: AugmentedError<ApiType>;
+            /**
+             * Non-channel owner specified during nft issuance does not exist
+             **/
+            NftNonChannelOwnerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Given video nft is not in buy now state
+             **/
+            NftNotInBuyNowState: AugmentedError<ApiType>;
+            /**
+             * No assets to be removed have been specified
+             **/
+            NoAssetsSpecified: AugmentedError<ApiType>;
+            /**
+             * Nft is not in auction state
+             **/
+            NotInAuctionState: AugmentedError<ApiType>;
+            /**
+             * Delete channel and assets and delete video assets must have a number of assets to remove greater than zero
+             **/
+            NumberOfAssetsToRemoveIsZero: AugmentedError<ApiType>;
+            /**
+             * Overflow or underflow error happened
+             **/
+            OverflowOrUnderflowHappened: AugmentedError<ApiType>;
+            /**
+             * Patronage can only be claimed if channel is owned by a member
+             **/
+            PatronageCanOnlyBeClaimedForMemberOwnedChannels: AugmentedError<ApiType>;
+            /**
+             * Payment Proof verification failed
+             **/
+            PaymentProofVerificationFailed: AugmentedError<ApiType>;
+            /**
+             * No pending offers for given Nft
+             **/
+            PendingOfferDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Partecipant is not a member
+             **/
+            ReplyDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Creator royalty requires reward account to be set.
+             **/
+            RewardAccountIsNotSet: AugmentedError<ApiType>;
+            /**
+             * Royalty Lower Bound Exceeded
+             **/
+            RoyaltyLowerBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Royalty Upper Bound Exceeded
+             **/
+            RoyaltyUpperBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Auction starting price constraint violated.
+             **/
+            StartingPriceConstraintViolated: AugmentedError<ApiType>;
+            /**
+             * Starting price lower bound exceeded
+             **/
+            StartingPriceLowerBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Starting price upper bound exceeded
+             **/
+            StartingPriceUpperBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Auction starts at lower bound exceeded
+             **/
+            StartsAtLowerBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Auction starts at upper bound exceeded
+             **/
+            StartsAtUpperBoundExceeded: AugmentedError<ApiType>;
+            /**
+             * Nft offer target member does not exist
+             **/
+            TargetMemberDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance
+             **/
+            UnsufficientBalance: AugmentedError<ApiType>;
+            /**
+             * Video does not exist
+             **/
+            VideoDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Vfdeo in season can`t be removed (because order is important)
+             **/
+            VideoInSeason: AugmentedError<ApiType>;
+            /**
+             * Invalid extrinsic call: video state bloat bond changed.
+             **/
+            VideoStateBloatBondChanged: AugmentedError<ApiType>;
+            /**
+             * At least one of the whitelisted members does not exist
+             **/
+            WhitelistedMemberDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Auction whitelist has only one member
+             **/
+            WhitelistHasOnlyOneMember: AugmentedError<ApiType>;
+            /**
+             * An attempt to withdraw funds from channel account failed, because the specified amount
+             * exceeds the withdrawable amount (channel account balance minus channel bloat bond)
+             **/
+            WithdrawalAmountExceedsChannelAccountWithdrawableBalance: AugmentedError<ApiType>;
+            /**
+             * An attempt to withdraw funds from channel account failed, because the specified amount
+             * is zero
+             **/
+            WithdrawFromChannelAmountIsZero: AugmentedError<ApiType>;
+            /**
+             * Cannot claim zero reward.
+             **/
+            ZeroReward: AugmentedError<ApiType>;
+        };
+        contentWorkingGroup: {
+            /**
+             * Trying to fill opening with an application for other opening
+             **/
+            ApplicationsNotForOpening: AugmentedError<ApiType>;
+            /**
+             * Application stake is less than required opening stake.
+             **/
+            ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Staking less than the lower bound.
+             **/
+            BelowMinimumStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot decrease stake - stake delta greater than initial stake.
+             **/
+            CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+            /**
+             * There is leader already, cannot hire another one.
+             **/
+            CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening with multiple applications.
+             **/
+            CannotHireMultipleLeaders: AugmentedError<ApiType>;
+            /**
+             * Reward could not be zero.
+             **/
+            CannotRewardWithZero: AugmentedError<ApiType>;
+            /**
+             * Invalid spending amount.
+             **/
+            CannotSpendZero: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Current lead is not set.
+             **/
+            CurrentLeadNotSet: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * It's not enough budget for this spending.
+             **/
+            InsufficientBudgetForSpending: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid origin for a member.
+             **/
+            InvalidMemberOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Not a lead account.
+             **/
+            IsNotLeadAccount: AugmentedError<ApiType>;
+            /**
+             * Working group size limit exceeded.
+             **/
+            MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening - no applications provided.
+             **/
+            NoApplicationsProvided: AugmentedError<ApiType>;
+            /**
+             * Opening does not exist.
+             **/
+            OpeningDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is not applicant.
+             **/
+            OriginIsNotApplicant: AugmentedError<ApiType>;
+            /**
+             * Signer is not worker role account.
+             **/
+            SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+            /**
+             * Provided stake balance cannot be zero.
+             **/
+            StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Successful worker application does not exist.
+             **/
+            SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Specified unstaking period is less then minimum set for the group.
+             **/
+            UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+            /**
+             * Worker application does not exist.
+             **/
+            WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker does not exist.
+             **/
+            WorkerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker has no recurring reward.
+             **/
+            WorkerHasNoReward: AugmentedError<ApiType>;
+            /**
+             * Invalid operation - worker is leaving.
+             **/
+            WorkerIsLeaving: AugmentedError<ApiType>;
+            /**
+             * Worker storage text is too long.
+             **/
+            WorkerStorageValueTooLong: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        council: {
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Origin is invalid.
+             **/
+            BadOrigin: AugmentedError<ApiType>;
+            /**
+             * Candidate haven't provided sufficient stake.
+             **/
+            CandidacyStakeTooLow: AugmentedError<ApiType>;
+            /**
+             * Candidate id not found
+             **/
+            CandidateDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * User tried to announce candidacy outside of the candidacy announcement period.
+             **/
+            CantCandidateNow: AugmentedError<ApiType>;
+            /**
+             * User tried to announce candidacy twice in the same elections.
+             **/
+            CantCandidateTwice: AugmentedError<ApiType>;
+            /**
+             * User tried to release stake outside of the revealing period.
+             **/
+            CantReleaseStakeNow: AugmentedError<ApiType>;
+            /**
+             * Candidate can't vote for himself.
+             **/
+            CantVoteForYourself: AugmentedError<ApiType>;
+            /**
+             * Can't withdraw candidacy outside of the candidacy announcement period.
+             **/
+            CantWithdrawCandidacyNow: AugmentedError<ApiType>;
+            /**
+             * User tried to announce candidacy with an account that has the conflicting type of stake
+             * with candidacy stake and has not enough balance for staking for both purposes.
+             **/
+            ConflictingStake: AugmentedError<ApiType>;
+            /**
+             * Funding requests without recieving accounts
+             **/
+            EmptyFundingRequests: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance for candidacy staking.
+             **/
+            InsufficientBalanceForStaking: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficent funds in council for executing 'Funding Request'
+             **/
+            InsufficientFundsForFundingRequest: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * The combination of membership id and account id is invalid for unstaking an existing
+             * candidacy stake.
+             **/
+            InvalidAccountToStakeReuse: AugmentedError<ApiType>;
+            /**
+             * Invalid membership.
+             **/
+            MemberIdNotMatchAccount: AugmentedError<ApiType>;
+            /**
+             * User tried to release stake when no stake exists.
+             **/
+            NoStake: AugmentedError<ApiType>;
+            /**
+             * User tried to withdraw candidacy when not candidating.
+             **/
+            NotCandidatingNow: AugmentedError<ApiType>;
+            /**
+             * The member is not a councilor.
+             **/
+            NotCouncilor: AugmentedError<ApiType>;
+            /**
+             * The same account is recieving funds from the same request twice
+             **/
+            RepeatedFundRequestAccount: AugmentedError<ApiType>;
+            /**
+             * Council member and candidates can't withdraw stake yet.
+             **/
+            StakeStillNeeded: AugmentedError<ApiType>;
+            /**
+             * Fund request no balance
+             **/
+            ZeroBalanceFundRequest: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        distributionWorkingGroup: {
+            /**
+             * Trying to fill opening with an application for other opening
+             **/
+            ApplicationsNotForOpening: AugmentedError<ApiType>;
+            /**
+             * Application stake is less than required opening stake.
+             **/
+            ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Staking less than the lower bound.
+             **/
+            BelowMinimumStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot decrease stake - stake delta greater than initial stake.
+             **/
+            CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+            /**
+             * There is leader already, cannot hire another one.
+             **/
+            CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening with multiple applications.
+             **/
+            CannotHireMultipleLeaders: AugmentedError<ApiType>;
+            /**
+             * Reward could not be zero.
+             **/
+            CannotRewardWithZero: AugmentedError<ApiType>;
+            /**
+             * Invalid spending amount.
+             **/
+            CannotSpendZero: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Current lead is not set.
+             **/
+            CurrentLeadNotSet: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * It's not enough budget for this spending.
+             **/
+            InsufficientBudgetForSpending: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid origin for a member.
+             **/
+            InvalidMemberOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Not a lead account.
+             **/
+            IsNotLeadAccount: AugmentedError<ApiType>;
+            /**
+             * Working group size limit exceeded.
+             **/
+            MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening - no applications provided.
+             **/
+            NoApplicationsProvided: AugmentedError<ApiType>;
+            /**
+             * Opening does not exist.
+             **/
+            OpeningDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is not applicant.
+             **/
+            OriginIsNotApplicant: AugmentedError<ApiType>;
+            /**
+             * Signer is not worker role account.
+             **/
+            SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+            /**
+             * Provided stake balance cannot be zero.
+             **/
+            StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Successful worker application does not exist.
+             **/
+            SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Specified unstaking period is less then minimum set for the group.
+             **/
+            UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+            /**
+             * Worker application does not exist.
+             **/
+            WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker does not exist.
+             **/
+            WorkerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker has no recurring reward.
+             **/
+            WorkerHasNoReward: AugmentedError<ApiType>;
+            /**
+             * Invalid operation - worker is leaving.
+             **/
+            WorkerIsLeaving: AugmentedError<ApiType>;
+            /**
+             * Worker storage text is too long.
+             **/
+            WorkerStorageValueTooLong: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        electionProviderMultiPhase: {
+            /**
+             * The call is not allowed at this point.
+             **/
+            CallNotAllowed: AugmentedError<ApiType>;
+            /**
+             * The fallback failed
+             **/
+            FallbackFailed: AugmentedError<ApiType>;
+            /**
+             * `Self::insert_submission` returned an invalid index.
+             **/
+            InvalidSubmissionIndex: AugmentedError<ApiType>;
+            /**
+             * Snapshot metadata should exist but didn't.
+             **/
+            MissingSnapshotMetadata: AugmentedError<ApiType>;
+            /**
+             * OCW submitted solution for wrong round
+             **/
+            OcwCallWrongEra: AugmentedError<ApiType>;
+            /**
+             * Submission was too early.
+             **/
+            PreDispatchEarlySubmission: AugmentedError<ApiType>;
+            /**
+             * Submission was too weak, score-wise.
+             **/
+            PreDispatchWeakSubmission: AugmentedError<ApiType>;
+            /**
+             * Wrong number of winners presented.
+             **/
+            PreDispatchWrongWinnerCount: AugmentedError<ApiType>;
+            /**
+             * The origin failed to pay the deposit.
+             **/
+            SignedCannotPayDeposit: AugmentedError<ApiType>;
+            /**
+             * Witness data to dispatchable is invalid.
+             **/
+            SignedInvalidWitness: AugmentedError<ApiType>;
+            /**
+             * The queue was full, and the solution was not better than any of the existing ones.
+             **/
+            SignedQueueFull: AugmentedError<ApiType>;
+            /**
+             * The signed submission consumes too much weight
+             **/
+            SignedTooMuchWeight: AugmentedError<ApiType>;
+        };
+        forum: {
+            /**
+             * Account does not match post author.
+             **/
+            AccountDoesNotMatchPostAuthor: AugmentedError<ApiType>;
+            /**
+             * Thread not authored by the given user.
+             **/
+            AccountDoesNotMatchThreadAuthor: AugmentedError<ApiType>;
+            /**
+             * Ancestor category immutable, i.e. deleted or archived
+             **/
+            AncestorCategoryImmutable: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * A thread with outstanding posts cannot be removed
+             **/
+            CannotDeleteThreadWithOutstandingPosts: AugmentedError<ApiType>;
+            /**
+             * Category does not exist.
+             **/
+            CategoryDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Provided moderator is not given category moderator
+             **/
+            CategoryModeratorDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Category not being updated.
+             **/
+            CategoryNotBeingUpdated: AugmentedError<ApiType>;
+            /**
+             * Category still contains some subcategories.
+             **/
+            CategoryNotEmptyCategories: AugmentedError<ApiType>;
+            /**
+             * Category still contains some threads.
+             **/
+            CategoryNotEmptyThreads: AugmentedError<ApiType>;
+            /**
+             * Forum user id not match its account.
+             **/
+            ForumUserIdNotMatchAccount: AugmentedError<ApiType>;
+            /**
+             * Not enough balance to post
+             **/
+            InsufficientBalanceForPost: AugmentedError<ApiType>;
+            /**
+             * Not enough balance to create thread
+             **/
+            InsufficientBalanceForThreadCreation: AugmentedError<ApiType>;
+            /**
+             * Maximum size of storage map exceeded
+             **/
+            MapSizeLimit: AugmentedError<ApiType>;
+            /**
+             * Maximum number of stickied threads per category exceeded
+             **/
+            MaxNumberOfStickiedThreadsExceeded: AugmentedError<ApiType>;
+            /**
+             * Maximum valid category depth exceeded.
+             **/
+            MaxValidCategoryDepthExceeded: AugmentedError<ApiType>;
+            /**
+             * No permissions to delete category.
+             **/
+            ModeratorCantDeleteCategory: AugmentedError<ApiType>;
+            /**
+             * No permissions to update category.
+             **/
+            ModeratorCantUpdateCategory: AugmentedError<ApiType>;
+            /**
+             * Moderator id not match its account.
+             **/
+            ModeratorIdNotMatchAccount: AugmentedError<ApiType>;
+            /**
+             * Moderator can't moderate destination category.
+             **/
+            ModeratorModerateDestinationCategory: AugmentedError<ApiType>;
+            /**
+             * Moderator can't moderate category containing thread.
+             **/
+            ModeratorModerateOriginCategory: AugmentedError<ApiType>;
+            /**
+             * Origin doesn't correspond to any lead account
+             **/
+            OriginNotForumLead: AugmentedError<ApiType>;
+            /**
+             * Category path len should be greater than zero
+             **/
+            PathLengthShouldBeGreaterThanZero: AugmentedError<ApiType>;
+            /**
+             * Post does not exist.
+             **/
+            PostDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Thread does not exist
+             **/
+            ThreadDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is the same as the destination.
+             **/
+            ThreadMoveInvalid: AugmentedError<ApiType>;
+            /**
+             * Thread not being updated.
+             **/
+            ThreadNotBeingUpdated: AugmentedError<ApiType>;
+        };
+        forumWorkingGroup: {
+            /**
+             * Trying to fill opening with an application for other opening
+             **/
+            ApplicationsNotForOpening: AugmentedError<ApiType>;
+            /**
+             * Application stake is less than required opening stake.
+             **/
+            ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Staking less than the lower bound.
+             **/
+            BelowMinimumStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot decrease stake - stake delta greater than initial stake.
+             **/
+            CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+            /**
+             * There is leader already, cannot hire another one.
+             **/
+            CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening with multiple applications.
+             **/
+            CannotHireMultipleLeaders: AugmentedError<ApiType>;
+            /**
+             * Reward could not be zero.
+             **/
+            CannotRewardWithZero: AugmentedError<ApiType>;
+            /**
+             * Invalid spending amount.
+             **/
+            CannotSpendZero: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Current lead is not set.
+             **/
+            CurrentLeadNotSet: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * It's not enough budget for this spending.
+             **/
+            InsufficientBudgetForSpending: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid origin for a member.
+             **/
+            InvalidMemberOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Not a lead account.
+             **/
+            IsNotLeadAccount: AugmentedError<ApiType>;
+            /**
+             * Working group size limit exceeded.
+             **/
+            MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening - no applications provided.
+             **/
+            NoApplicationsProvided: AugmentedError<ApiType>;
+            /**
+             * Opening does not exist.
+             **/
+            OpeningDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is not applicant.
+             **/
+            OriginIsNotApplicant: AugmentedError<ApiType>;
+            /**
+             * Signer is not worker role account.
+             **/
+            SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+            /**
+             * Provided stake balance cannot be zero.
+             **/
+            StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Successful worker application does not exist.
+             **/
+            SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Specified unstaking period is less then minimum set for the group.
+             **/
+            UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+            /**
+             * Worker application does not exist.
+             **/
+            WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker does not exist.
+             **/
+            WorkerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker has no recurring reward.
+             **/
+            WorkerHasNoReward: AugmentedError<ApiType>;
+            /**
+             * Invalid operation - worker is leaving.
+             **/
+            WorkerIsLeaving: AugmentedError<ApiType>;
+            /**
+             * Worker storage text is too long.
+             **/
+            WorkerStorageValueTooLong: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        grandpa: {
+            /**
+             * Attempt to signal GRANDPA change with one already pending.
+             **/
+            ChangePending: AugmentedError<ApiType>;
+            /**
+             * A given equivocation report is valid but already previously reported.
+             **/
+            DuplicateOffenceReport: AugmentedError<ApiType>;
+            /**
+             * An equivocation proof provided as part of an equivocation report is invalid.
+             **/
+            InvalidEquivocationProof: AugmentedError<ApiType>;
+            /**
+             * A key ownership proof provided as part of an equivocation report is invalid.
+             **/
+            InvalidKeyOwnershipProof: AugmentedError<ApiType>;
+            /**
+             * Attempt to signal GRANDPA pause when the authority set isn't live
+             * (either paused or already pending pause).
+             **/
+            PauseFailed: AugmentedError<ApiType>;
+            /**
+             * Attempt to signal GRANDPA resume when the authority set isn't paused
+             * (either live or already pending resume).
+             **/
+            ResumeFailed: AugmentedError<ApiType>;
+            /**
+             * Cannot signal forced change so soon after last.
+             **/
+            TooSoon: AugmentedError<ApiType>;
+        };
+        imOnline: {
+            /**
+             * Duplicated heartbeat.
+             **/
+            DuplicatedHeartbeat: AugmentedError<ApiType>;
+            /**
+             * Non existent public key.
+             **/
+            InvalidKey: AugmentedError<ApiType>;
+        };
+        joystreamUtility: {
+            /**
+             * Insufficient funds for 'Update Working Group Budget' proposal execution
+             **/
+            InsufficientFundsForBudgetUpdate: AugmentedError<ApiType>;
+            /**
+             * Insufficient funds for burning
+             **/
+            InsufficientFundsForBurn: AugmentedError<ApiType>;
+            /**
+             * Trying to burn zero tokens
+             **/
+            ZeroTokensBurn: AugmentedError<ApiType>;
+        };
+        members: {
+            /**
+             * Cannot set a referral cut percent value. The limit was exceeded.
+             **/
+            CannotExceedReferralCutPercentLimit: AugmentedError<ApiType>;
+            /**
+             * Should be a member to receive invites.
+             **/
+            CannotTransferInvitesForNotMember: AugmentedError<ApiType>;
+            /**
+             * Cannot invite a member. The controller account has an existing conflicting lock.
+             **/
+            ConflictingLock: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Controller account required.
+             **/
+            ControllerAccountRequired: AugmentedError<ApiType>;
+            /**
+             * Locked amount is greater than credit amount
+             **/
+            GifLockExceedsCredit: AugmentedError<ApiType>;
+            /**
+             * Handle already registered.
+             **/
+            HandleAlreadyRegistered: AugmentedError<ApiType>;
+            /**
+             * Handle must be provided during registration.
+             **/
+            HandleMustBeProvidedDuringRegistration: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover payment.
+             **/
+            InsufficientBalanceToCoverPayment: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * Gifter doesn't have sufficient balance to credit
+             **/
+            InsufficientBalanceToGift: AugmentedError<ApiType>;
+            /**
+             * Member profile not found (invalid member id).
+             **/
+            MemberProfileNotFound: AugmentedError<ApiType>;
+            /**
+             * Not enough balance to buy membership.
+             **/
+            NotEnoughBalanceToBuyMembership: AugmentedError<ApiType>;
+            /**
+             * Not enough invites to perform an operation.
+             **/
+            NotEnoughInvites: AugmentedError<ApiType>;
+            /**
+             * Cannot find a membership for a provided referrer id.
+             **/
+            ReferrerIsNotMember: AugmentedError<ApiType>;
+            /**
+             * Root account required.
+             **/
+            RootAccountRequired: AugmentedError<ApiType>;
+            /**
+             * Staking account has already been confirmed.
+             **/
+            StakingAccountAlreadyConfirmed: AugmentedError<ApiType>;
+            /**
+             * Staking account for membership doesn't exist.
+             **/
+            StakingAccountDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Staking account is registered for some member.
+             **/
+            StakingAccountIsAlreadyRegistered: AugmentedError<ApiType>;
+            /**
+             * Unsigned origin.
+             **/
+            UnsignedOrigin: AugmentedError<ApiType>;
+            /**
+             * Cannot invite a member. Working group balance is not sufficient to set the default
+             * balance.
+             **/
+            WorkingGroupBudgetIsNotSufficientForInviting: AugmentedError<ApiType>;
+            /**
+             * Membership working group leader is not set.
+             **/
+            WorkingGroupLeaderNotSet: AugmentedError<ApiType>;
+        };
+        membershipWorkingGroup: {
+            /**
+             * Trying to fill opening with an application for other opening
+             **/
+            ApplicationsNotForOpening: AugmentedError<ApiType>;
+            /**
+             * Application stake is less than required opening stake.
+             **/
+            ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Staking less than the lower bound.
+             **/
+            BelowMinimumStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot decrease stake - stake delta greater than initial stake.
+             **/
+            CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+            /**
+             * There is leader already, cannot hire another one.
+             **/
+            CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening with multiple applications.
+             **/
+            CannotHireMultipleLeaders: AugmentedError<ApiType>;
+            /**
+             * Reward could not be zero.
+             **/
+            CannotRewardWithZero: AugmentedError<ApiType>;
+            /**
+             * Invalid spending amount.
+             **/
+            CannotSpendZero: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Current lead is not set.
+             **/
+            CurrentLeadNotSet: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * It's not enough budget for this spending.
+             **/
+            InsufficientBudgetForSpending: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid origin for a member.
+             **/
+            InvalidMemberOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Not a lead account.
+             **/
+            IsNotLeadAccount: AugmentedError<ApiType>;
+            /**
+             * Working group size limit exceeded.
+             **/
+            MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening - no applications provided.
+             **/
+            NoApplicationsProvided: AugmentedError<ApiType>;
+            /**
+             * Opening does not exist.
+             **/
+            OpeningDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is not applicant.
+             **/
+            OriginIsNotApplicant: AugmentedError<ApiType>;
+            /**
+             * Signer is not worker role account.
+             **/
+            SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+            /**
+             * Provided stake balance cannot be zero.
+             **/
+            StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Successful worker application does not exist.
+             **/
+            SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Specified unstaking period is less then minimum set for the group.
+             **/
+            UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+            /**
+             * Worker application does not exist.
+             **/
+            WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker does not exist.
+             **/
+            WorkerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker has no recurring reward.
+             **/
+            WorkerHasNoReward: AugmentedError<ApiType>;
+            /**
+             * Invalid operation - worker is leaving.
+             **/
+            WorkerIsLeaving: AugmentedError<ApiType>;
+            /**
+             * Worker storage text is too long.
+             **/
+            WorkerStorageValueTooLong: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        multisig: {
+            /**
+             * Call is already approved by this signatory.
+             **/
+            AlreadyApproved: AugmentedError<ApiType>;
+            /**
+             * The data to be stored is already stored.
+             **/
+            AlreadyStored: AugmentedError<ApiType>;
+            /**
+             * The maximum weight information provided was too low.
+             **/
+            MaxWeightTooLow: AugmentedError<ApiType>;
+            /**
+             * Threshold must be 2 or greater.
+             **/
+            MinimumThreshold: AugmentedError<ApiType>;
+            /**
+             * Call doesn't need any (more) approvals.
+             **/
+            NoApprovalsNeeded: AugmentedError<ApiType>;
+            /**
+             * Multisig operation not found when attempting to cancel.
+             **/
+            NotFound: AugmentedError<ApiType>;
+            /**
+             * No timepoint was given, yet the multisig operation is already underway.
+             **/
+            NoTimepoint: AugmentedError<ApiType>;
+            /**
+             * Only the account that originally created the multisig is able to cancel it.
+             **/
+            NotOwner: AugmentedError<ApiType>;
+            /**
+             * The sender was contained in the other signatories; it shouldn't be.
+             **/
+            SenderInSignatories: AugmentedError<ApiType>;
+            /**
+             * The signatories were provided out of order; they should be ordered.
+             **/
+            SignatoriesOutOfOrder: AugmentedError<ApiType>;
+            /**
+             * There are too few signatories in the list.
+             **/
+            TooFewSignatories: AugmentedError<ApiType>;
+            /**
+             * There are too many signatories in the list.
+             **/
+            TooManySignatories: AugmentedError<ApiType>;
+            /**
+             * A timepoint was given, yet no multisig operation is underway.
+             **/
+            UnexpectedTimepoint: AugmentedError<ApiType>;
+            /**
+             * A different timepoint was given to the multisig operation that is underway.
+             **/
+            WrongTimepoint: AugmentedError<ApiType>;
+        };
+        operationsWorkingGroupAlpha: {
+            /**
+             * Trying to fill opening with an application for other opening
+             **/
+            ApplicationsNotForOpening: AugmentedError<ApiType>;
+            /**
+             * Application stake is less than required opening stake.
+             **/
+            ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Staking less than the lower bound.
+             **/
+            BelowMinimumStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot decrease stake - stake delta greater than initial stake.
+             **/
+            CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+            /**
+             * There is leader already, cannot hire another one.
+             **/
+            CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening with multiple applications.
+             **/
+            CannotHireMultipleLeaders: AugmentedError<ApiType>;
+            /**
+             * Reward could not be zero.
+             **/
+            CannotRewardWithZero: AugmentedError<ApiType>;
+            /**
+             * Invalid spending amount.
+             **/
+            CannotSpendZero: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Current lead is not set.
+             **/
+            CurrentLeadNotSet: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * It's not enough budget for this spending.
+             **/
+            InsufficientBudgetForSpending: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid origin for a member.
+             **/
+            InvalidMemberOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Not a lead account.
+             **/
+            IsNotLeadAccount: AugmentedError<ApiType>;
+            /**
+             * Working group size limit exceeded.
+             **/
+            MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening - no applications provided.
+             **/
+            NoApplicationsProvided: AugmentedError<ApiType>;
+            /**
+             * Opening does not exist.
+             **/
+            OpeningDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is not applicant.
+             **/
+            OriginIsNotApplicant: AugmentedError<ApiType>;
+            /**
+             * Signer is not worker role account.
+             **/
+            SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+            /**
+             * Provided stake balance cannot be zero.
+             **/
+            StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Successful worker application does not exist.
+             **/
+            SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Specified unstaking period is less then minimum set for the group.
+             **/
+            UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+            /**
+             * Worker application does not exist.
+             **/
+            WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker does not exist.
+             **/
+            WorkerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker has no recurring reward.
+             **/
+            WorkerHasNoReward: AugmentedError<ApiType>;
+            /**
+             * Invalid operation - worker is leaving.
+             **/
+            WorkerIsLeaving: AugmentedError<ApiType>;
+            /**
+             * Worker storage text is too long.
+             **/
+            WorkerStorageValueTooLong: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        operationsWorkingGroupBeta: {
+            /**
+             * Trying to fill opening with an application for other opening
+             **/
+            ApplicationsNotForOpening: AugmentedError<ApiType>;
+            /**
+             * Application stake is less than required opening stake.
+             **/
+            ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Staking less than the lower bound.
+             **/
+            BelowMinimumStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot decrease stake - stake delta greater than initial stake.
+             **/
+            CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+            /**
+             * There is leader already, cannot hire another one.
+             **/
+            CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening with multiple applications.
+             **/
+            CannotHireMultipleLeaders: AugmentedError<ApiType>;
+            /**
+             * Reward could not be zero.
+             **/
+            CannotRewardWithZero: AugmentedError<ApiType>;
+            /**
+             * Invalid spending amount.
+             **/
+            CannotSpendZero: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Current lead is not set.
+             **/
+            CurrentLeadNotSet: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * It's not enough budget for this spending.
+             **/
+            InsufficientBudgetForSpending: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid origin for a member.
+             **/
+            InvalidMemberOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Not a lead account.
+             **/
+            IsNotLeadAccount: AugmentedError<ApiType>;
+            /**
+             * Working group size limit exceeded.
+             **/
+            MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening - no applications provided.
+             **/
+            NoApplicationsProvided: AugmentedError<ApiType>;
+            /**
+             * Opening does not exist.
+             **/
+            OpeningDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is not applicant.
+             **/
+            OriginIsNotApplicant: AugmentedError<ApiType>;
+            /**
+             * Signer is not worker role account.
+             **/
+            SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+            /**
+             * Provided stake balance cannot be zero.
+             **/
+            StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Successful worker application does not exist.
+             **/
+            SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Specified unstaking period is less then minimum set for the group.
+             **/
+            UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+            /**
+             * Worker application does not exist.
+             **/
+            WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker does not exist.
+             **/
+            WorkerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker has no recurring reward.
+             **/
+            WorkerHasNoReward: AugmentedError<ApiType>;
+            /**
+             * Invalid operation - worker is leaving.
+             **/
+            WorkerIsLeaving: AugmentedError<ApiType>;
+            /**
+             * Worker storage text is too long.
+             **/
+            WorkerStorageValueTooLong: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        operationsWorkingGroupGamma: {
+            /**
+             * Trying to fill opening with an application for other opening
+             **/
+            ApplicationsNotForOpening: AugmentedError<ApiType>;
+            /**
+             * Application stake is less than required opening stake.
+             **/
+            ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Staking less than the lower bound.
+             **/
+            BelowMinimumStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot decrease stake - stake delta greater than initial stake.
+             **/
+            CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+            /**
+             * There is leader already, cannot hire another one.
+             **/
+            CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening with multiple applications.
+             **/
+            CannotHireMultipleLeaders: AugmentedError<ApiType>;
+            /**
+             * Reward could not be zero.
+             **/
+            CannotRewardWithZero: AugmentedError<ApiType>;
+            /**
+             * Invalid spending amount.
+             **/
+            CannotSpendZero: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Current lead is not set.
+             **/
+            CurrentLeadNotSet: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * It's not enough budget for this spending.
+             **/
+            InsufficientBudgetForSpending: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid origin for a member.
+             **/
+            InvalidMemberOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Not a lead account.
+             **/
+            IsNotLeadAccount: AugmentedError<ApiType>;
+            /**
+             * Working group size limit exceeded.
+             **/
+            MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening - no applications provided.
+             **/
+            NoApplicationsProvided: AugmentedError<ApiType>;
+            /**
+             * Opening does not exist.
+             **/
+            OpeningDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is not applicant.
+             **/
+            OriginIsNotApplicant: AugmentedError<ApiType>;
+            /**
+             * Signer is not worker role account.
+             **/
+            SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+            /**
+             * Provided stake balance cannot be zero.
+             **/
+            StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Successful worker application does not exist.
+             **/
+            SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Specified unstaking period is less then minimum set for the group.
+             **/
+            UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+            /**
+             * Worker application does not exist.
+             **/
+            WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker does not exist.
+             **/
+            WorkerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker has no recurring reward.
+             **/
+            WorkerHasNoReward: AugmentedError<ApiType>;
+            /**
+             * Invalid operation - worker is leaving.
+             **/
+            WorkerIsLeaving: AugmentedError<ApiType>;
+            /**
+             * Worker storage text is too long.
+             **/
+            WorkerStorageValueTooLong: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        projectToken: {
+            /**
+             * Account Already exists
+             **/
+            AccountAlreadyExists: AugmentedError<ApiType>;
+            /**
+             * Requested account data does not exist
+             **/
+            AccountInformationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Attempt to remove an account with some outstanding tokens
+             **/
+            AttemptToRemoveNonEmptyAccount: AugmentedError<ApiType>;
+            /**
+             * Attempt to remove non owned account under permissioned mode
+             **/
+            AttemptToRemoveNonOwnedAccountUnderPermissionedMode: AugmentedError<ApiType>;
+            /**
+             * Amount of tokens to burn exceeds total amount of tokens owned by the account
+             **/
+            BurnAmountGreaterThanAccountTokensAmount: AugmentedError<ApiType>;
+            /**
+             * Provided amount to burn is == 0
+             **/
+            BurnAmountIsZero: AugmentedError<ApiType>;
+            /**
+             * Cannot Deissue Token with outstanding accounts
+             **/
+            CannotDeissueTokenWithOutstandingAccounts: AugmentedError<ApiType>;
+            /**
+             * No Sale if Amm is active
+             **/
+            CannotInitSaleIfAmmIsActive: AugmentedError<ApiType>;
+            /**
+             * Attempt to issue in a split with zero allocation amount
+             **/
+            CannotIssueSplitWithZeroAllocationAmount: AugmentedError<ApiType>;
+            /**
+             * Cannot join whitelist in permissionless mode
+             **/
+            CannotJoinWhitelistInPermissionlessMode: AugmentedError<ApiType>;
+            /**
+             * Attempt to modify supply when revenue split is active
+             **/
+            CannotModifySupplyWhenRevenueSplitsAreActive: AugmentedError<ApiType>;
+            /**
+             * Attempt to participate in a split with zero token to stake
+             **/
+            CannotParticipateInSplitWithZeroAmount: AugmentedError<ApiType>;
+            /**
+             * Curve slope parameters below minimum allowed
+             **/
+            CurveSlopeParametersTooLow: AugmentedError<ApiType>;
+            /**
+             * Deadline constraint not satisfied
+             **/
+            DeadlineExpired: AugmentedError<ApiType>;
+            /**
+             * At least one of the members provided as part of InitialAllocation does not exist
+             **/
+            InitialAllocationToNonExistingMember: AugmentedError<ApiType>;
+            /**
+             * User does not posses enough balance to participate in the revenue split
+             **/
+            InsufficientBalanceForSplitParticipation: AugmentedError<ApiType>;
+            /**
+             * Account's JOY balance is insufficient to make the token purchase
+             **/
+            InsufficientBalanceForTokenPurchase: AugmentedError<ApiType>;
+            /**
+             * Insufficient JOY Balance to cover the transaction costs
+             **/
+            InsufficientJoyBalance: AugmentedError<ApiType>;
+            /**
+             * Creator token balance is insufficient
+             **/
+            InsufficientTokenBalance: AugmentedError<ApiType>;
+            /**
+             * Account's transferrable balance is insufficient to perform the transfer or initialize token sale
+             **/
+            InsufficientTransferrableBalance: AugmentedError<ApiType>;
+            /**
+             * Invalid bonding curve construction parameters
+             **/
+            InvalidCurveParameters: AugmentedError<ApiType>;
+            /**
+             * The amount of JOY to be transferred is not enough to keep the destination account alive
+             **/
+            JoyTransferSubjectToDusting: AugmentedError<ApiType>;
+            /**
+             * Cannot add another vesting schedule to an account.
+             * Maximum number of vesting schedules for this account-token pair was reached.
+             **/
+            MaxVestingSchedulesPerAccountPerTokenReached: AugmentedError<ApiType>;
+            /**
+             * Merkle proof verification failed
+             **/
+            MerkleProofVerificationFailure: AugmentedError<ApiType>;
+            /**
+             * The token has no active sale at the moment
+             **/
+            NoActiveSale: AugmentedError<ApiType>;
+            /**
+             * Amount of tokens to purchase on sale exceeds the quantity of tokens still available on the sale
+             **/
+            NotEnoughTokensOnSale: AugmentedError<ApiType>;
+            /**
+             * ------ AMM ---------------------------------------------------------
+             * not in AMM state
+             **/
+            NotInAmmState: AugmentedError<ApiType>;
+            /**
+             * There are no remaining tokes to recover from the previous token sale.
+             **/
+            NoTokensToRecover: AugmentedError<ApiType>;
+            /**
+             * The token has no upcoming sale
+             **/
+            NoUpcomingSale: AugmentedError<ApiType>;
+            /**
+             * Oustanding AMM-provided supply constitutes too large percentage of the token's total supply
+             **/
+            OutstandingAmmProvidedSupplyTooLarge: AugmentedError<ApiType>;
+            /**
+             * Previous sale was still not finalized, finalize it first.
+             **/
+            PreviousSaleNotFinalized: AugmentedError<ApiType>;
+            /**
+             * Attempt to activate split with one ongoing
+             **/
+            RevenueSplitAlreadyActiveForToken: AugmentedError<ApiType>;
+            /**
+             * Revenue Split has not ended yet
+             **/
+            RevenueSplitDidNotEnd: AugmentedError<ApiType>;
+            /**
+             * Revenue Split duration is too short
+             **/
+            RevenueSplitDurationTooShort: AugmentedError<ApiType>;
+            /**
+             * Attempt to make revenue split operations with token not in active split state
+             **/
+            RevenueSplitNotActiveForToken: AugmentedError<ApiType>;
+            /**
+             * Revenue Split for token active, but not ongoing
+             **/
+            RevenueSplitNotOngoing: AugmentedError<ApiType>;
+            /**
+             * Revenue split rate cannot be 0
+             **/
+            RevenueSplitRateIsZero: AugmentedError<ApiType>;
+            /**
+             * Specified revenue split starting block is in the past
+             **/
+            RevenueSplitTimeToStartTooShort: AugmentedError<ApiType>;
+            /**
+             * Participant in sale access proof provided during `purchase_tokens_on_sale`
+             * does not match the sender account
+             **/
+            SaleAccessProofParticipantIsNotSender: AugmentedError<ApiType>;
+            /**
+             * Only whitelisted participants are allowed to access the sale, therefore access proof is required
+             **/
+            SaleAccessProofRequired: AugmentedError<ApiType>;
+            /**
+             * Purchase cap per member cannot be zero
+             **/
+            SaleCapPerMemberIsZero: AugmentedError<ApiType>;
+            /**
+             * Sale duration cannot be zero
+             **/
+            SaleDurationIsZero: AugmentedError<ApiType>;
+            /**
+             * Specified sale duration is shorter than MinSaleDuration
+             **/
+            SaleDurationTooShort: AugmentedError<ApiType>;
+            /**
+             * Amount of tokens to purchase on sale cannot be zero
+             **/
+            SalePurchaseAmountIsZero: AugmentedError<ApiType>;
+            /**
+             * Sale participant's cap (either cap_per_member or whitelisted participant's specific cap)
+             * was exceeded with the purchase
+             **/
+            SalePurchaseCapExceeded: AugmentedError<ApiType>;
+            /**
+             * Specified sale starting block is in the past
+             **/
+            SaleStartingBlockInThePast: AugmentedError<ApiType>;
+            /**
+             * Token's unit price cannot be zero
+             **/
+            SaleUnitPriceIsZero: AugmentedError<ApiType>;
+            /**
+             * Upper bound quantity cannot be zero
+             **/
+            SaleUpperBoundQuantityIsZero: AugmentedError<ApiType>;
+            /**
+             * Slippage tolerance constraint tolerance not satisfied
+             **/
+            SlippageToleranceExceeded: AugmentedError<ApiType>;
+            /**
+             * -------- Patronage --------------------------------------------------
+             * Target Rate is higher than current patronage rate
+             **/
+            TargetPatronageRateIsHigherThanCurrentRate: AugmentedError<ApiType>;
+            /**
+             * Requested token does not exist
+             **/
+            TokenDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Token's current offering state is not Idle
+             **/
+            TokenIssuanceNotInIdleState: AugmentedError<ApiType>;
+            /**
+             * Symbol already in use
+             **/
+            TokenSymbolAlreadyInUse: AugmentedError<ApiType>;
+            /**
+             * Transfer destination member id invalid
+             **/
+            TooManyTransferOutputs: AugmentedError<ApiType>;
+            /**
+             * At least one of the transfer destinations is not an existing member id
+             **/
+            TransferDestinationMemberDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * User already participating in the revenue split
+             **/
+            UserAlreadyParticipating: AugmentedError<ApiType>;
+            /**
+             * User is not participating in any split
+             **/
+            UserNotParticipantingInAnySplit: AugmentedError<ApiType>;
+            /**
+             * Provided value for patronage is too big (yearly format)
+             **/
+            YearlyPatronageRateLimitExceeded: AugmentedError<ApiType>;
+        };
+        proposalsCodex: {
+            /**
+             * Arithmeic Error
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Invalid 'decrease stake proposal' parameter - cannot decrease by zero balance.
+             **/
+            DecreasingStakeIsZero: AugmentedError<ApiType>;
+            /**
+             * Insufficient funds for 'Update Working Group Budget' proposal execution
+             **/
+            InsufficientFundsForBudgetUpdate: AugmentedError<ApiType>;
+            /**
+             * The specified min channel cashout is greater than the specified max channel cashout in `Update Channel Payouts` proposal.
+             **/
+            InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout: AugmentedError<ApiType>;
+            /**
+             * Invalid council election parameter - announcing_period
+             **/
+            InvalidCouncilElectionParameterAnnouncingPeriod: AugmentedError<ApiType>;
+            /**
+             * Invalid council election parameter - candidacy-limit
+             **/
+            InvalidCouncilElectionParameterCandidacyLimit: AugmentedError<ApiType>;
+            /**
+             * Invalid council election parameter - council_size
+             **/
+            InvalidCouncilElectionParameterCouncilSize: AugmentedError<ApiType>;
+            /**
+             * Invalid council election parameter - min_council_stake
+             **/
+            InvalidCouncilElectionParameterMinCouncilStake: AugmentedError<ApiType>;
+            /**
+             * Invalid council election parameter - min-voting_stake
+             **/
+            InvalidCouncilElectionParameterMinVotingStake: AugmentedError<ApiType>;
+            /**
+             * Invalid council election parameter - new_term_duration
+             **/
+            InvalidCouncilElectionParameterNewTermDuration: AugmentedError<ApiType>;
+            /**
+             * Invalid council election parameter - revealing_period
+             **/
+            InvalidCouncilElectionParameterRevealingPeriod: AugmentedError<ApiType>;
+            /**
+             * Invalid council election parameter - voting_period
+             **/
+            InvalidCouncilElectionParameterVotingPeriod: AugmentedError<ApiType>;
+            /**
+             * Invalid balance value for the spending proposal
+             **/
+            InvalidFundingRequestProposalBalance: AugmentedError<ApiType>;
+            /**
+             * Invalid number of accounts recieving funding request for 'Funding Request' proposal.
+             **/
+            InvalidFundingRequestProposalNumberOfAccount: AugmentedError<ApiType>;
+            /**
+             * Repeated account in 'Funding Request' proposal.
+             **/
+            InvalidFundingRequestProposalRepeatedAccount: AugmentedError<ApiType>;
+            /**
+             * Provided lead application id is not valid
+             **/
+            InvalidLeadApplicationId: AugmentedError<ApiType>;
+            /**
+             * Provided lead opening id is not valid
+             **/
+            InvalidLeadOpeningId: AugmentedError<ApiType>;
+            /**
+             * Provided lead worker id is not valid
+             **/
+            InvalidLeadWorkerId: AugmentedError<ApiType>;
+            /**
+             * Provided proposal id is not valid
+             **/
+            InvalidProposalId: AugmentedError<ApiType>;
+            /**
+             * Invalid 'set lead proposal' parameter - proposed lead cannot be a councilor
+             **/
+            InvalidSetLeadParameterCannotBeCouncilor: AugmentedError<ApiType>;
+            /**
+             * Invalid validator count for the 'set validator count' proposal
+             **/
+            InvalidValidatorCount: AugmentedError<ApiType>;
+            /**
+             * Invalid working group budget capacity parameter
+             **/
+            InvalidWorkingGroupBudgetCapacity: AugmentedError<ApiType>;
+            /**
+             * Max yearly patronage rate cannot be zero
+             **/
+            MaxYearlyPatronageRateCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Require root origin in extrinsics
+             **/
+            RequireRootOrigin: AugmentedError<ApiType>;
+            /**
+             * Provided WASM code for the runtime upgrade proposal is empty
+             **/
+            RuntimeProposalIsEmpty: AugmentedError<ApiType>;
+            /**
+             * Provided text for text proposal is empty
+             **/
+            SignalProposalIsEmpty: AugmentedError<ApiType>;
+            /**
+             * Invalid 'slash stake proposal' parameter - cannot slash by zero balance.
+             **/
+            SlashingStakeIsZero: AugmentedError<ApiType>;
+        };
+        proposalsDiscussion: {
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Account can't delete post at the moment
+             **/
+            CannotDeletePost: AugmentedError<ApiType>;
+            /**
+             * The thread has Closed mode. And post author doesn't belong to council or allowed members.
+             **/
+            CannotPostOnClosedThread: AugmentedError<ApiType>;
+            /**
+             * Account has insufficient balance to create a post
+             **/
+            InsufficientBalanceForPost: AugmentedError<ApiType>;
+            /**
+             * Max allowed authors list limit exceeded.
+             **/
+            MaxWhiteListSizeExceeded: AugmentedError<ApiType>;
+            /**
+             * Should be thread author or councilor.
+             **/
+            NotAuthorOrCouncilor: AugmentedError<ApiType>;
+            /**
+             * Post doesn't exist
+             **/
+            PostDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Require root origin in extrinsics
+             **/
+            RequireRootOrigin: AugmentedError<ApiType>;
+            /**
+             * Thread doesn't exist
+             **/
+            ThreadDoesntExist: AugmentedError<ApiType>;
+            /**
+             * At least one of the member ids provided as part of closed thread whitelist belongs
+             * to a non-existing member.
+             **/
+            WhitelistedMemberDoesNotExist: AugmentedError<ApiType>;
+        };
+        proposalsEngine: {
+            /**
+             * The proposal have been already voted on
+             **/
+            AlreadyVoted: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * The conflicting stake discovered. Cannot stake.
+             **/
+            ConflictingStakes: AugmentedError<ApiType>;
+            /**
+             * Description is too long
+             **/
+            DescriptionIsTooLong: AugmentedError<ApiType>;
+            /**
+             * Proposal cannot have an empty body
+             **/
+            EmptyDescriptionProvided: AugmentedError<ApiType>;
+            /**
+             * Stake cannot be empty with this proposal
+             **/
+            EmptyStake: AugmentedError<ApiType>;
+            /**
+             * Proposal cannot have an empty title"
+             **/
+            EmptyTitleProvided: AugmentedError<ApiType>;
+            /**
+             * There is not enough balance for a stake.
+             **/
+            InsufficientBalanceForStake: AugmentedError<ApiType>;
+            /**
+             * Exact execution block cannot be less than current_block.
+             **/
+            InvalidExactExecutionBlock: AugmentedError<ApiType>;
+            /**
+             * Approval threshold cannot be zero
+             **/
+            InvalidParameterApprovalThreshold: AugmentedError<ApiType>;
+            /**
+             * Slashing threshold cannot be zero
+             **/
+            InvalidParameterSlashingThreshold: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Max active proposals number exceeded
+             **/
+            MaxActiveProposalNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * The size of encoded dispatchable call to be executed by the proposal is too big
+             **/
+            MaxDispatchableCallCodeSizeExceeded: AugmentedError<ApiType>;
+            /**
+             * Not an author
+             **/
+            NotAuthor: AugmentedError<ApiType>;
+            /**
+             * Proposal is finalized already
+             **/
+            ProposalFinalized: AugmentedError<ApiType>;
+            /**
+             * Disallow to cancel the proposal if there are any votes on it.
+             **/
+            ProposalHasVotes: AugmentedError<ApiType>;
+            /**
+             * The proposal does not exist
+             **/
+            ProposalNotFound: AugmentedError<ApiType>;
+            /**
+             * Require root origin in extrinsics
+             **/
+            RequireRootOrigin: AugmentedError<ApiType>;
+            /**
+             * Stake differs from the proposal requirements
+             **/
+            StakeDiffersFromRequired: AugmentedError<ApiType>;
+            /**
+             * Stake should be empty for this proposal
+             **/
+            StakeShouldBeEmpty: AugmentedError<ApiType>;
+            /**
+             * Title is too long
+             **/
+            TitleIsTooLong: AugmentedError<ApiType>;
+            /**
+             * Exact execution block cannot be zero.
+             **/
+            ZeroExactExecutionBlock: AugmentedError<ApiType>;
+        };
+        referendum: {
+            /**
+             * A vote cannot be cast from an account that already opted out of voting.
+             **/
+            AccountAlreadyOptedOutOfVoting: AugmentedError<ApiType>;
+            /**
+             * Trying to vote multiple time in the same cycle
+             **/
+            AlreadyVotedThisCycle: AugmentedError<ApiType>;
+            /**
+             * Origin is invalid
+             **/
+            BadOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Account Insufficient Free Balance (now)
+             **/
+            InsufficientBalanceToStake: AugmentedError<ApiType>;
+            /**
+             * Insufficient stake provided to cast a vote
+             **/
+            InsufficientStake: AugmentedError<ApiType>;
+            /**
+             * Salt and referendum option provided don't correspond to the commitment
+             **/
+            InvalidReveal: AugmentedError<ApiType>;
+            /**
+             * Vote for not existing option was revealed
+             **/
+            InvalidVote: AugmentedError<ApiType>;
+            /**
+             * Referendum is not running when expected to
+             **/
+            ReferendumNotRunning: AugmentedError<ApiType>;
+            /**
+             * Revealing stage is not in progress right now
+             **/
+            RevealingNotInProgress: AugmentedError<ApiType>;
+            /**
+             * Salt is too long
+             **/
+            SaltTooLong: AugmentedError<ApiType>;
+            /**
+             * Unstaking has been forbidden for the user (at least for now)
+             **/
+            UnstakingForbidden: AugmentedError<ApiType>;
+            /**
+             * Invalid time to release the locked stake
+             **/
+            UnstakingVoteInSameCycle: AugmentedError<ApiType>;
+            /**
+             * Trying to reveal vote that was not cast
+             **/
+            VoteNotExisting: AugmentedError<ApiType>;
+        };
+        session: {
+            /**
+             * Registered duplicate key.
+             **/
+            DuplicatedKey: AugmentedError<ApiType>;
+            /**
+             * Invalid ownership proof.
+             **/
+            InvalidProof: AugmentedError<ApiType>;
+            /**
+             * Key setting account is not live, so it's impossible to associate keys.
+             **/
+            NoAccount: AugmentedError<ApiType>;
+            /**
+             * No associated validator ID for account.
+             **/
+            NoAssociatedValidatorId: AugmentedError<ApiType>;
+            /**
+             * No keys are associated with this account.
+             **/
+            NoKeys: AugmentedError<ApiType>;
+        };
+        staking: {
+            /**
+             * Stash is already bonded.
+             **/
+            AlreadyBonded: AugmentedError<ApiType>;
+            /**
+             * Rewards for this era have already been claimed for this validator.
+             **/
+            AlreadyClaimed: AugmentedError<ApiType>;
+            /**
+             * Controller is already paired.
+             **/
+            AlreadyPaired: AugmentedError<ApiType>;
+            /**
+             * Internal state has become somehow corrupted and the operation cannot continue.
+             **/
+            BadState: AugmentedError<ApiType>;
+            /**
+             * A nomination target was supplied that was blocked or otherwise not a validator.
+             **/
+            BadTarget: AugmentedError<ApiType>;
+            /**
+             * External restriction prevents bonding with given account
+             **/
+            BondingRestricted: AugmentedError<ApiType>;
+            /**
+             * The user has enough bond and thus cannot be chilled forcefully by an external person.
+             **/
+            CannotChillOther: AugmentedError<ApiType>;
+            /**
+             * Commission is too low. Must be at least `MinCommission`.
+             **/
+            CommissionTooLow: AugmentedError<ApiType>;
+            /**
+             * Duplicate index.
+             **/
+            DuplicateIndex: AugmentedError<ApiType>;
+            /**
+             * Targets cannot be empty.
+             **/
+            EmptyTargets: AugmentedError<ApiType>;
+            /**
+             * Attempting to target a stash that still has funds.
+             **/
+            FundedTarget: AugmentedError<ApiType>;
+            /**
+             * Incorrect previous history depth input provided.
+             **/
+            IncorrectHistoryDepth: AugmentedError<ApiType>;
+            /**
+             * Incorrect number of slashing spans provided.
+             **/
+            IncorrectSlashingSpans: AugmentedError<ApiType>;
+            /**
+             * Cannot have a validator or nominator role, with value less than the minimum defined by
+             * governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the
+             * intention, `chill` first to remove one's role as validator/nominator.
+             **/
+            InsufficientBond: AugmentedError<ApiType>;
+            /**
+             * Invalid era to reward.
+             **/
+            InvalidEraToReward: AugmentedError<ApiType>;
+            /**
+             * Invalid number of nominations.
+             **/
+            InvalidNumberOfNominations: AugmentedError<ApiType>;
+            /**
+             * Slash record index out of bounds.
+             **/
+            InvalidSlashIndex: AugmentedError<ApiType>;
+            /**
+             * Can not schedule more unlock chunks.
+             **/
+            NoMoreChunks: AugmentedError<ApiType>;
+            /**
+             * Not a controller account.
+             **/
+            NotController: AugmentedError<ApiType>;
+            /**
+             * Items are not sorted and unique.
+             **/
+            NotSortedAndUnique: AugmentedError<ApiType>;
+            /**
+             * Not a stash account.
+             **/
+            NotStash: AugmentedError<ApiType>;
+            /**
+             * Can not rebond without unlocking chunks.
+             **/
+            NoUnlockChunk: AugmentedError<ApiType>;
+            /**
+             * There are too many nominators in the system. Governance needs to adjust the staking
+             * settings to keep things safe for the runtime.
+             **/
+            TooManyNominators: AugmentedError<ApiType>;
+            /**
+             * Too many nomination targets supplied.
+             **/
+            TooManyTargets: AugmentedError<ApiType>;
+            /**
+             * There are too many validators in the system. Governance needs to adjust the staking
+             * settings to keep things safe for the runtime.
+             **/
+            TooManyValidators: AugmentedError<ApiType>;
+        };
+        storage: {
+            /**
+             * Generic Arithmetic Error due to internal accounting operation
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Blacklist size limit exceeded.
+             **/
+            BlacklistSizeLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Call Disabled
+             **/
+            CallDisabled: AugmentedError<ApiType>;
+            /**
+             * Cannot delete non empty dynamic bag.
+             **/
+            CannotDeleteNonEmptyDynamicBag: AugmentedError<ApiType>;
+            /**
+             * Cannot delete a non-empty storage bucket.
+             **/
+            CannotDeleteNonEmptyStorageBucket: AugmentedError<ApiType>;
+            /**
+             * Data object hash is part of the blacklist.
+             **/
+            DataObjectBlacklisted: AugmentedError<ApiType>;
+            /**
+             * Data object doesn't exist.
+             **/
+            DataObjectDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Data object id collection is empty.
+             **/
+            DataObjectIdCollectionIsEmpty: AugmentedError<ApiType>;
+            /**
+             * The `data_object_ids` extrinsic parameter collection is empty.
+             **/
+            DataObjectIdParamsAreEmpty: AugmentedError<ApiType>;
+            /**
+             * Invalid extrinsic call: data object state bloat bond changed.
+             **/
+            DataObjectStateBloatBondChanged: AugmentedError<ApiType>;
+            /**
+             * Invalid extrinsic call: data size fee changed.
+             **/
+            DataSizeFeeChanged: AugmentedError<ApiType>;
+            /**
+             * Invalid operation with invites: another storage provider was invited.
+             **/
+            DifferentStorageProviderInvited: AugmentedError<ApiType>;
+            /**
+             * Distribution bucket doesn't accept new bags.
+             **/
+            DistributionBucketDoesntAcceptNewBags: AugmentedError<ApiType>;
+            /**
+             * Distribution bucket doesn't exist.
+             **/
+            DistributionBucketDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Distribution bucket family doesn't exist.
+             **/
+            DistributionBucketFamilyDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Distribution bucket id collections are empty.
+             **/
+            DistributionBucketIdCollectionsAreEmpty: AugmentedError<ApiType>;
+            /**
+             * Distribution bucket is bound to a bag.
+             **/
+            DistributionBucketIsBoundToBag: AugmentedError<ApiType>;
+            /**
+             * Distribution bucket is not bound to a bag.
+             **/
+            DistributionBucketIsNotBoundToBag: AugmentedError<ApiType>;
+            /**
+             * The new `DistributionBucketsPerBagLimit` number is too high.
+             **/
+            DistributionBucketsPerBagLimitTooHigh: AugmentedError<ApiType>;
+            /**
+             * The new `DistributionBucketsPerBagLimit` number is too low.
+             **/
+            DistributionBucketsPerBagLimitTooLow: AugmentedError<ApiType>;
+            /**
+             * Distribution bucket id collection provided contradicts the existing dynamic bag
+             * creation policy.
+             **/
+            DistributionBucketsViolatesDynamicBagCreationPolicy: AugmentedError<ApiType>;
+            /**
+             * Distribution family bound to a bag creation policy.
+             **/
+            DistributionFamilyBoundToBagCreationPolicy: AugmentedError<ApiType>;
+            /**
+             * Distribution provider operator already invited.
+             **/
+            DistributionProviderOperatorAlreadyInvited: AugmentedError<ApiType>;
+            /**
+             * Distribution provider operator doesn't exist.
+             **/
+            DistributionProviderOperatorDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Distribution provider operator already set.
+             **/
+            DistributionProviderOperatorSet: AugmentedError<ApiType>;
+            /**
+             * Dynamic bag doesn't exist.
+             **/
+            DynamicBagDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Cannot create the dynamic bag: dynamic bag exists.
+             **/
+            DynamicBagExists: AugmentedError<ApiType>;
+            /**
+             * Upload data error: empty content ID provided.
+             **/
+            EmptyContentId: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance for an operation.
+             **/
+            InsufficientBalance: AugmentedError<ApiType>;
+            /**
+             * Insufficient module treasury balance for an operation.
+             **/
+            InsufficientTreasuryBalance: AugmentedError<ApiType>;
+            /**
+             * Invalid CID length (must be 46 bytes)
+             **/
+            InvalidCidLength: AugmentedError<ApiType>;
+            /**
+             * Upload data error: invalid state bloat bond source account.
+             **/
+            InvalidStateBloatBondSourceAccount: AugmentedError<ApiType>;
+            /**
+             * Invalid storage provider for bucket.
+             **/
+            InvalidStorageProvider: AugmentedError<ApiType>;
+            /**
+             * Invalid transactor account ID for this bucket.
+             **/
+            InvalidTransactorAccount: AugmentedError<ApiType>;
+            /**
+             * Invalid operation with invites: storage provider was already invited.
+             **/
+            InvitedStorageProvider: AugmentedError<ApiType>;
+            /**
+             * Max data object size exceeded.
+             **/
+            MaxDataObjectSizeExceeded: AugmentedError<ApiType>;
+            /**
+             * Max distribution bucket family number limit exceeded.
+             **/
+            MaxDistributionBucketFamilyNumberLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Max distribution bucket number per bag limit exceeded.
+             **/
+            MaxDistributionBucketNumberPerBagLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Max number of operators for a distribution bucket reached.
+             **/
+            MaxNumberOfOperatorsPerDistributionBucketReached: AugmentedError<ApiType>;
+            /**
+             * Max number of pending invitations limit for a distribution bucket reached.
+             **/
+            MaxNumberOfPendingInvitationsLimitForDistributionBucketReached: AugmentedError<ApiType>;
+            /**
+             * Invalid operations: must be a distribution provider operator for a bucket.
+             **/
+            MustBeDistributionProviderOperatorForBucket: AugmentedError<ApiType>;
+            /**
+             * No distribution bucket invitation.
+             **/
+            NoDistributionBucketInvitation: AugmentedError<ApiType>;
+            /**
+             * Empty "data object creation" collection.
+             **/
+            NoObjectsOnUpload: AugmentedError<ApiType>;
+            /**
+             * Invalid operation with invites: there is no storage bucket invitation.
+             **/
+            NoStorageBucketInvitation: AugmentedError<ApiType>;
+            /**
+             * Not allowed 'number of distribution buckets'
+             **/
+            NumberOfDistributionBucketsOutsideOfAllowedContraints: AugmentedError<ApiType>;
+            /**
+             * Not allowed 'number of storage buckets'
+             **/
+            NumberOfStorageBucketsOutsideOfAllowedContraints: AugmentedError<ApiType>;
+            /**
+             * Cannot move objects within the same bag.
+             **/
+            SourceAndDestinationBagsAreEqual: AugmentedError<ApiType>;
+            /**
+             * The storage bucket doesn't accept new bags.
+             **/
+            StorageBucketDoesntAcceptNewBags: AugmentedError<ApiType>;
+            /**
+             * The requested storage bucket doesn't exist.
+             **/
+            StorageBucketDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Storage bucket id collections are empty.
+             **/
+            StorageBucketIdCollectionsAreEmpty: AugmentedError<ApiType>;
+            /**
+             * The requested storage bucket is already bound to a bag.
+             **/
+            StorageBucketIsBoundToBag: AugmentedError<ApiType>;
+            /**
+             * The requested storage bucket is not bound to a bag.
+             **/
+            StorageBucketIsNotBoundToBag: AugmentedError<ApiType>;
+            /**
+             * Object number limit for the storage bucket reached.
+             **/
+            StorageBucketObjectNumberLimitReached: AugmentedError<ApiType>;
+            /**
+             * Objects total size limit for the storage bucket reached.
+             **/
+            StorageBucketObjectSizeLimitReached: AugmentedError<ApiType>;
+            /**
+             * `StorageBucketsPerBagLimit` was exceeded for a bag.
+             **/
+            StorageBucketPerBagLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Storage bucket id collection provided contradicts the existing dynamic bag
+             * creation policy.
+             **/
+            StorageBucketsNumberViolatesDynamicBagCreationPolicy: AugmentedError<ApiType>;
+            /**
+             * The new `StorageBucketsPerBagLimit` number is too high.
+             **/
+            StorageBucketsPerBagLimitTooHigh: AugmentedError<ApiType>;
+            /**
+             * The new `StorageBucketsPerBagLimit` number is too low.
+             **/
+            StorageBucketsPerBagLimitTooLow: AugmentedError<ApiType>;
+            /**
+             * Invalid operation with invites: storage provider was already set.
+             **/
+            StorageProviderAlreadySet: AugmentedError<ApiType>;
+            /**
+             * Storage provider must be set.
+             **/
+            StorageProviderMustBeSet: AugmentedError<ApiType>;
+            /**
+             * Storage provider operator doesn't exist.
+             **/
+            StorageProviderOperatorDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Uploading of the new object is blocked.
+             **/
+            UploadingBlocked: AugmentedError<ApiType>;
+            /**
+             * Max object number limit exceeded for voucher.
+             **/
+            VoucherMaxObjectNumberLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Max object size limit exceeded for voucher.
+             **/
+            VoucherMaxObjectSizeLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Upload data error: zero object size.
+             **/
+            ZeroObjectSize: AugmentedError<ApiType>;
+        };
+        storageWorkingGroup: {
+            /**
+             * Trying to fill opening with an application for other opening
+             **/
+            ApplicationsNotForOpening: AugmentedError<ApiType>;
+            /**
+             * Application stake is less than required opening stake.
+             **/
+            ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+            /**
+             * Unexpected arithmetic error (overflow / underflow)
+             **/
+            ArithmeticError: AugmentedError<ApiType>;
+            /**
+             * Staking less than the lower bound.
+             **/
+            BelowMinimumStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot decrease stake - stake delta greater than initial stake.
+             **/
+            CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+            /**
+             * There is leader already, cannot hire another one.
+             **/
+            CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening with multiple applications.
+             **/
+            CannotHireMultipleLeaders: AugmentedError<ApiType>;
+            /**
+             * Reward could not be zero.
+             **/
+            CannotRewardWithZero: AugmentedError<ApiType>;
+            /**
+             * Invalid spending amount.
+             **/
+            CannotSpendZero: AugmentedError<ApiType>;
+            /**
+             * Staking account contains conflicting stakes.
+             **/
+            ConflictStakesOnAccount: AugmentedError<ApiType>;
+            /**
+             * Current lead is not set.
+             **/
+            CurrentLeadNotSet: AugmentedError<ApiType>;
+            /**
+             * Cannot withdraw: insufficient budget balance.
+             **/
+            InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover stake.
+             **/
+            InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+            /**
+             * It's not enough budget for this spending.
+             **/
+            InsufficientBudgetForSpending: AugmentedError<ApiType>;
+            /**
+             * Insufficient tokens for funding (on member controller account)
+             **/
+            InsufficientTokensForFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid origin for a member.
+             **/
+            InvalidMemberOrigin: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Not a lead account.
+             **/
+            IsNotLeadAccount: AugmentedError<ApiType>;
+            /**
+             * Working group size limit exceeded.
+             **/
+            MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+            /**
+             * Cannot fill opening - no applications provided.
+             **/
+            NoApplicationsProvided: AugmentedError<ApiType>;
+            /**
+             * Opening does not exist.
+             **/
+            OpeningDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Origin is not applicant.
+             **/
+            OriginIsNotApplicant: AugmentedError<ApiType>;
+            /**
+             * Signer is not worker role account.
+             **/
+            SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+            /**
+             * Provided stake balance cannot be zero.
+             **/
+            StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Successful worker application does not exist.
+             **/
+            SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Specified unstaking period is less then minimum set for the group.
+             **/
+            UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+            /**
+             * Worker application does not exist.
+             **/
+            WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker does not exist.
+             **/
+            WorkerDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Worker has no recurring reward.
+             **/
+            WorkerHasNoReward: AugmentedError<ApiType>;
+            /**
+             * Invalid operation - worker is leaving.
+             **/
+            WorkerIsLeaving: AugmentedError<ApiType>;
+            /**
+             * Worker storage text is too long.
+             **/
+            WorkerStorageValueTooLong: AugmentedError<ApiType>;
+            /**
+             * Trying to fund with zero tokens
+             **/
+            ZeroTokensFunding: AugmentedError<ApiType>;
+        };
+        system: {
+            /**
+             * The origin filter prevent the call to be dispatched.
+             **/
+            CallFiltered: AugmentedError<ApiType>;
+            /**
+             * Failed to extract the runtime version from the new runtime.
+             *
+             * Either calling `Core_version` or decoding `RuntimeVersion` failed.
+             **/
+            FailedToExtractRuntimeVersion: AugmentedError<ApiType>;
+            /**
+             * The name of specification does not match between the current runtime
+             * and the new runtime.
+             **/
+            InvalidSpecName: AugmentedError<ApiType>;
+            /**
+             * Suicide called when the account has non-default composite data.
+             **/
+            NonDefaultComposite: AugmentedError<ApiType>;
+            /**
+             * There is a non-zero reference count preventing the account from being purged.
+             **/
+            NonZeroRefCount: AugmentedError<ApiType>;
+            /**
+             * The specification version is not allowed to decrease between the current runtime
+             * and the new runtime.
+             **/
+            SpecVersionNeedsToIncrease: AugmentedError<ApiType>;
+        };
+        utility: {
+            /**
+             * Too many calls batched.
+             **/
+            TooManyCalls: AugmentedError<ApiType>;
+        };
+        vesting: {
+            /**
+             * Amount being transferred is too low to create a vesting schedule.
+             **/
+            AmountLow: AugmentedError<ApiType>;
+            /**
+             * The account already has `MaxVestingSchedules` count of schedules and thus
+             * cannot add another one. Consider merging existing schedules in order to add another.
+             **/
+            AtMaxVestingSchedules: AugmentedError<ApiType>;
+            /**
+             * Failed to create a new schedule because some parameter was invalid.
+             **/
+            InvalidScheduleParams: AugmentedError<ApiType>;
+            /**
+             * The account given is not vesting.
+             **/
+            NotVesting: AugmentedError<ApiType>;
+            /**
+             * An index was out of bounds of the vesting schedules.
+             **/
+            ScheduleIndexOutOfBounds: AugmentedError<ApiType>;
+        };
+    }
+}
diff --git a/node_modules/@joystream/types/types/lib/augment/augment-api-events.d.ts b/node_modules/@joystream/types/types/lib/augment/augment-api-events.d.ts
new file mode 100644
index 0000000..b41f0d8
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/augment-api-events.d.ts
@@ -0,0 +1,3092 @@
+import type { ApiTypes } from '@polkadot/api-base/types';
+import type { BTreeMap, BTreeSet, Bytes, Null, Option, Result, U8aFixed, Vec, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
+import type { ITuple } from '@polkadot/types-codec/types';
+import type { AccountId32, H256, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmCurve, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenTransfers, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
+declare module '@polkadot/api-base/types/events' {
+    interface AugmentedEvents<ApiType extends ApiTypes> {
+        appWorkingGroup: {
+            /**
+             * Emits on withdrawing the application for the regular worker/lead opening.
+             * Params:
+             * - Job application id
+             **/
+            ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on adding the application for the worker opening.
+             * Params:
+             * - Opening parameteres
+             * - Application id
+             **/
+            AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+            /**
+             * Emits on setting the budget for the working group.
+             * Params:
+             * - new budget
+             **/
+            BudgetSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on budget from the working group being spent
+             * Params:
+             * - Receiver Account Id.
+             * - Balance spent.
+             * - Rationale.
+             **/
+            BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Emits on setting the group leader.
+             * Params:
+             * - Group worker id.
+             **/
+            LeaderSet: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on un-setting the leader.
+             **/
+            LeaderUnset: AugmentedEvent<ApiType, []>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - message
+             **/
+            LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * Emits on reaching new missed reward.
+             * Params:
+             * - Worker ID.
+             * - Missed reward (optional). None means 'no missed reward'.
+             **/
+            NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on adding new job opening.
+             * Params:
+             * - Opening id
+             * - Description
+             * - Opening Type(Lead or Worker)
+             * - Stake Policy for the opening
+             * - Reward per block
+             **/
+            OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Emits on canceling the job opening.
+             * Params:
+             * - Opening id
+             **/
+            OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on filling the job opening.
+             * Params:
+             * - Worker opening id
+             * - Worker application id to the worker id dictionary
+             * - Applicationd ids used to fill the opening
+             **/
+            OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on paying the reward.
+             * Params:
+             * - Id of the worker.
+             * - Receiver Account Id.
+             * - Reward
+             * - Payment type (missed reward or regular one)
+             **/
+            RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+            /**
+             * Emits on decreasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on increasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on slashing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - actual slashed balance.
+             * - Requested slashed balance.
+             * - Rationale.
+             **/
+            StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+            /**
+             * Emits on updating the status text of the working group.
+             * Params:
+             * - status text hash
+             * - status text
+             **/
+            StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+            /**
+             * Emits on terminating the leader.
+             * Params:
+             * - leader worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on terminating the worker.
+             * Params:
+             * - worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on exiting the worker.
+             * Params:
+             * - worker id.
+             * - Rationale.
+             **/
+            WorkerExited: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - worker
+             * - message
+             **/
+            WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on updating the reward account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward account id of the worker.
+             **/
+            WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits on updating the reward amount of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward per block
+             **/
+            WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on updating the role account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Role account id of the worker.
+             **/
+            WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits when worker started leaving their role.
+             * Params:
+             * - Worker id.
+             * - Rationale.
+             **/
+            WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+            /**
+             * Fund the working group budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+        };
+        bagsList: {
+            /**
+             * Moved an account from one bag to another.
+             **/
+            Rebagged: AugmentedEvent<ApiType, [who: AccountId32, from: u64, to: u64], {
+                who: AccountId32;
+                from: u64;
+                to: u64;
+            }>;
+            /**
+             * Updated the score of some account to the given amount.
+             **/
+            ScoreUpdated: AugmentedEvent<ApiType, [who: AccountId32, newScore: u64], {
+                who: AccountId32;
+                newScore: u64;
+            }>;
+        };
+        balances: {
+            /**
+             * A balance was set by root.
+             **/
+            BalanceSet: AugmentedEvent<ApiType, [who: AccountId32, free: u128, reserved: u128], {
+                who: AccountId32;
+                free: u128;
+                reserved: u128;
+            }>;
+            /**
+             * Some amount was deposited (e.g. for transaction fees).
+             **/
+            Deposit: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], {
+                who: AccountId32;
+                amount: u128;
+            }>;
+            /**
+             * An account was removed whose balance was non-zero but below ExistentialDeposit,
+             * resulting in an outright loss.
+             **/
+            DustLost: AugmentedEvent<ApiType, [account: AccountId32, amount: u128], {
+                account: AccountId32;
+                amount: u128;
+            }>;
+            /**
+             * An account was created with some free balance.
+             **/
+            Endowed: AugmentedEvent<ApiType, [account: AccountId32, freeBalance: u128], {
+                account: AccountId32;
+                freeBalance: u128;
+            }>;
+            /**
+             * Some balance was reserved (moved from free to reserved).
+             **/
+            Reserved: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], {
+                who: AccountId32;
+                amount: u128;
+            }>;
+            /**
+             * Some balance was moved from the reserve of the first account to the second account.
+             * Final argument indicates the destination balance type.
+             **/
+            ReserveRepatriated: AugmentedEvent<ApiType, [from: AccountId32, to: AccountId32, amount: u128, destinationStatus: FrameSupportTokensMiscBalanceStatus], {
+                from: AccountId32;
+                to: AccountId32;
+                amount: u128;
+                destinationStatus: FrameSupportTokensMiscBalanceStatus;
+            }>;
+            /**
+             * Some amount was removed from the account (e.g. for misbehavior).
+             **/
+            Slashed: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], {
+                who: AccountId32;
+                amount: u128;
+            }>;
+            /**
+             * Transfer succeeded.
+             **/
+            Transfer: AugmentedEvent<ApiType, [from: AccountId32, to: AccountId32, amount: u128], {
+                from: AccountId32;
+                to: AccountId32;
+                amount: u128;
+            }>;
+            /**
+             * Some balance was unreserved (moved from reserved to free).
+             **/
+            Unreserved: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], {
+                who: AccountId32;
+                amount: u128;
+            }>;
+            /**
+             * Some amount was withdrawn from the account (e.g. for transaction fees).
+             **/
+            Withdraw: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], {
+                who: AccountId32;
+                amount: u128;
+            }>;
+        };
+        bounty: {
+            /**
+             * Bounty contributor made a message remark
+             * Params:
+             * - contributor
+             * - bounty id
+             * - message
+             **/
+            BountyContributorRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * A bounty was created.
+             * Params:
+             * - bounty ID
+             * - creation parameters
+             * - bounty metadata
+             **/
+            BountyCreated: AugmentedEvent<ApiType, [u64, PalletBountyBountyParametersBTreeSet, Bytes]>;
+            /**
+             * A bounty creator has withdrawn the cherry (member or council).
+             * Params:
+             * - bounty ID
+             * - bounty creator
+             **/
+            BountyCreatorCherryWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+            /**
+             * A bounty creator has withdrawn the oracle reward (member or council).
+             * Params:
+             * - bounty ID
+             * - bounty creator
+             **/
+            BountyCreatorOracleRewardWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+            /**
+             * Bounty creator made a message remark
+             * Params:
+             * - creator
+             * - bounty id
+             * - message
+             **/
+            BountyCreatorRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * Bounty entrant made a message remark
+             * Params:
+             * - entrant_id
+             * - bounty id
+             * - entry id
+             * - message
+             **/
+            BountyEntrantRemarked: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+            /**
+             * A bounty was funded by a member or a council.
+             * Params:
+             * - bounty ID
+             * - bounty funder
+             * - funding amount
+             **/
+            BountyFunded: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+            /**
+             * A member or a council has withdrawn the funding.
+             * Params:
+             * - bounty ID
+             * - bounty funder
+             **/
+            BountyFundingWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+            /**
+             * A bounty has reached its target funding amount.
+             * Params:
+             * - bounty ID
+             **/
+            BountyMaxFundingReached: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Bounty oracle made a message remark
+             * Params:
+             * - oracle
+             * - bounty id
+             * - message
+             **/
+            BountyOracleRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * A Oracle has withdrawn the oracle reward (member or council).
+             * Params:
+             * - bounty ID
+             * - bounty creator
+             * - Oracle Reward
+             **/
+            BountyOracleRewardWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+            /**
+             * Bounty Oracle Switched by current oracle or council.
+             * Params:
+             * - bounty ID
+             * - switcher
+             * - current_oracle,
+             * - new oracle
+             **/
+            BountyOracleSwitched: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+            /**
+             * A bounty was removed.
+             * Params:
+             * - bounty ID
+             **/
+            BountyRemoved: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * A bounty was terminated by council.
+             * Params:
+             * - bounty ID
+             * - bounty terminator
+             * - bounty creator
+             * - bounty oracle
+             **/
+            BountyTerminated: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+            /**
+             * A member or a council creator has withdrawn the creator state bloat bond.
+             * Params:
+             * - bounty ID
+             * - bounty creator
+             * - Creator State bloat bond amount
+             **/
+            CreatorStateBloatBondWithdrawn: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+            /**
+             * A member or a council funder has withdrawn the funder state bloat bond.
+             * Params:
+             * - bounty ID
+             * - bounty funder
+             * - funder State bloat bond amount
+             **/
+            FunderStateBloatBondWithdrawn: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+            /**
+             * Submit oracle judgment.
+             * Params:
+             * - bounty ID
+             * - oracle
+             * - judgment data
+             * - rationale
+             **/
+            OracleJudgmentSubmitted: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+            /**
+             * Work entry was slashed.
+             * Params:
+             * - bounty ID
+             * - entry ID
+             * - entrant member ID
+             **/
+            WorkEntrantFundsWithdrawn: AugmentedEvent<ApiType, [u64, u64, u64]>;
+            /**
+             * Work entry stake slashed.
+             * Params:
+             * - bounty ID
+             * - entry ID
+             * - stake account
+             * - slashed amount
+             **/
+            WorkEntrantStakeSlashed: AugmentedEvent<ApiType, [u64, u64, AccountId32, u128]>;
+            /**
+             * Work entry stake unlocked.
+             * Params:
+             * - bounty ID
+             * - entry ID
+             * - stake account
+             **/
+            WorkEntrantStakeUnlocked: AugmentedEvent<ApiType, [u64, u64, AccountId32]>;
+            /**
+             * Work entry was announced.
+             * Params:
+             * - bounty ID
+             * - created entry ID
+             * - entrant member ID
+             * - staking account ID
+             * - work description
+             **/
+            WorkEntryAnnounced: AugmentedEvent<ApiType, [u64, u64, u64, AccountId32, Bytes]>;
+            /**
+             * Work entry was slashed.
+             * Params:
+             * - bounty ID
+             * - oracle (caller)
+             **/
+            WorkSubmissionPeriodEnded: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+            /**
+             * Submit work.
+             * Params:
+             * - bounty ID
+             * - created entry ID
+             * - entrant member ID
+             * - work data (description, URL, BLOB, etc.)
+             **/
+            WorkSubmitted: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+        };
+        constitution: {
+            /**
+             * Emits on constitution amendment.
+             * Parameters:
+             * - constitution text hash
+             * - constitution text
+             **/
+            ConstutionAmended: AugmentedEvent<ApiType, [H256, Bytes]>;
+        };
+        content: {
+            AuctionBidCanceled: AugmentedEvent<ApiType, [u64, u64]>;
+            AuctionBidMade: AugmentedEvent<ApiType, [u64, u64, u128, Option<u64>]>;
+            AuctionCanceled: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64]>;
+            BidMadeCompletingAuction: AugmentedEvent<ApiType, [u64, u64, Option<u64>]>;
+            BuyNowCanceled: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor]>;
+            BuyNowPriceUpdated: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor, u128]>;
+            CancelChannelTransfer: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor]>;
+            ChannelAgentRemarked: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, Bytes]>;
+            ChannelAssetsDeletedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, Bytes]>;
+            ChannelAssetsRemoved: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, PalletContentChannelRecord]>;
+            ChannelCreated: AugmentedEvent<ApiType, [u64, PalletContentChannelRecord, PalletContentChannelCreationParametersRecord, AccountId32]>;
+            ChannelDeleted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64]>;
+            ChannelDeletedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, Bytes]>;
+            ChannelFundsWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
+            ChannelNftLimitUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, PalletContentNftLimitPeriod, u64, u64]>;
+            /**
+             * Metaprotocols related event
+             **/
+            ChannelOwnerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            ChannelPausedFeaturesUpdatedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
+            ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
+            ChannelPrivilegeLevelUpdated: AugmentedEvent<ApiType, [u64, u8]>;
+            ChannelRewardClaimedAndWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
+            ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u128, u64]>;
+            ChannelStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
+            ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
+            ChannelUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
+            ChannelVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+            CreatorTokenIssued: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64]>;
+            CreatorTokenIssuerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            CuratorAdded: AugmentedEvent<ApiType, [u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
+            CuratorGroupCreated: AugmentedEvent<ApiType, [u64]>;
+            CuratorGroupPermissionsUpdated: AugmentedEvent<ApiType, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
+            CuratorGroupStatusSet: AugmentedEvent<ApiType, [u64, bool]>;
+            CuratorRemoved: AugmentedEvent<ApiType, [u64, u64]>;
+            EnglishAuctionSettled: AugmentedEvent<ApiType, [u64, AccountId32, u64]>;
+            EnglishAuctionStarted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
+            GlobalNftLimitUpdated: AugmentedEvent<ApiType, [PalletContentNftLimitPeriod, u64]>;
+            InitializedChannelTransfer: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor, PalletContentPendingTransfer]>;
+            NftBought: AugmentedEvent<ApiType, [u64, u64]>;
+            NftDestroyed: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64]>;
+            NftIssued: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesNftIssuanceParametersRecord]>;
+            NftOwnerRemarked: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, Bytes]>;
+            NftSellOrderMade: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor, u128]>;
+            NftSlingedBackToTheOriginalArtist: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor]>;
+            OfferAccepted: AugmentedEvent<ApiType, [u64]>;
+            OfferCanceled: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor]>;
+            OfferStarted: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor, u64, Option<u128>]>;
+            OpenAuctionBidAccepted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64, u128]>;
+            OpenAuctionStarted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesOpenAuctionParamsRecord, u64]>;
+            ToggledNftLimits: AugmentedEvent<ApiType, [bool]>;
+            VideoAssetsDeletedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, bool, Bytes]>;
+            VideoCreated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64, PalletContentVideoCreationParametersRecord, BTreeSet<u64>]>;
+            VideoDeleted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64]>;
+            VideoDeletedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, Bytes]>;
+            VideoStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
+            VideoUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentVideoUpdateParametersRecord, BTreeSet<u64>]>;
+            VideoVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+        };
+        contentWorkingGroup: {
+            /**
+             * Emits on withdrawing the application for the regular worker/lead opening.
+             * Params:
+             * - Job application id
+             **/
+            ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on adding the application for the worker opening.
+             * Params:
+             * - Opening parameteres
+             * - Application id
+             **/
+            AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+            /**
+             * Emits on setting the budget for the working group.
+             * Params:
+             * - new budget
+             **/
+            BudgetSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on budget from the working group being spent
+             * Params:
+             * - Receiver Account Id.
+             * - Balance spent.
+             * - Rationale.
+             **/
+            BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Emits on setting the group leader.
+             * Params:
+             * - Group worker id.
+             **/
+            LeaderSet: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on un-setting the leader.
+             **/
+            LeaderUnset: AugmentedEvent<ApiType, []>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - message
+             **/
+            LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * Emits on reaching new missed reward.
+             * Params:
+             * - Worker ID.
+             * - Missed reward (optional). None means 'no missed reward'.
+             **/
+            NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on adding new job opening.
+             * Params:
+             * - Opening id
+             * - Description
+             * - Opening Type(Lead or Worker)
+             * - Stake Policy for the opening
+             * - Reward per block
+             **/
+            OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Emits on canceling the job opening.
+             * Params:
+             * - Opening id
+             **/
+            OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on filling the job opening.
+             * Params:
+             * - Worker opening id
+             * - Worker application id to the worker id dictionary
+             * - Applicationd ids used to fill the opening
+             **/
+            OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on paying the reward.
+             * Params:
+             * - Id of the worker.
+             * - Receiver Account Id.
+             * - Reward
+             * - Payment type (missed reward or regular one)
+             **/
+            RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+            /**
+             * Emits on decreasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on increasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on slashing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - actual slashed balance.
+             * - Requested slashed balance.
+             * - Rationale.
+             **/
+            StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+            /**
+             * Emits on updating the status text of the working group.
+             * Params:
+             * - status text hash
+             * - status text
+             **/
+            StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+            /**
+             * Emits on terminating the leader.
+             * Params:
+             * - leader worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on terminating the worker.
+             * Params:
+             * - worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on exiting the worker.
+             * Params:
+             * - worker id.
+             * - Rationale.
+             **/
+            WorkerExited: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - worker
+             * - message
+             **/
+            WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on updating the reward account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward account id of the worker.
+             **/
+            WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits on updating the reward amount of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward per block
+             **/
+            WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on updating the role account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Role account id of the worker.
+             **/
+            WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits when worker started leaving their role.
+             * Params:
+             * - Worker id.
+             * - Rationale.
+             **/
+            WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+            /**
+             * Fund the working group budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+        };
+        council: {
+            /**
+             * New council was elected
+             **/
+            AnnouncingPeriodStarted: AugmentedEvent<ApiType, [u32]>;
+            /**
+             * Budget balance was changed by the root.
+             **/
+            BudgetBalanceSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Budget increment has been updated.
+             **/
+            BudgetIncrementUpdated: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Budget balance was increased by automatic refill.
+             **/
+            BudgetRefill: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * The next budget refill was planned.
+             **/
+            BudgetRefillPlanned: AugmentedEvent<ApiType, [u32]>;
+            /**
+             * The candidate has set a new note for their candidacy
+             **/
+            CandidacyNoteSet: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Candidacy stake that was no longer needed was released
+             **/
+            CandidacyStakeRelease: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Candidate has withdrawn his candidacy
+             **/
+            CandidacyWithdraw: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Candidate remark message
+             **/
+            CandidateRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Fund the council budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            CouncilBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+            /**
+             * Councilor remark message
+             **/
+            CouncilorRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Councilor reward has been updated.
+             **/
+            CouncilorRewardUpdated: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * New candidate announced
+             **/
+            NewCandidate: AugmentedEvent<ApiType, [u64, AccountId32, AccountId32, u128]>;
+            /**
+             * New council was elected and appointed
+             **/
+            NewCouncilElected: AugmentedEvent<ApiType, [Vec<u64>, u32]>;
+            /**
+             * New council was not elected
+             **/
+            NewCouncilNotElected: AugmentedEvent<ApiType, [u32]>;
+            /**
+             * Announcing period can't finish because of insufficient candidtate count
+             **/
+            NotEnoughCandidates: AugmentedEvent<ApiType, [u32]>;
+            /**
+             * Request has been funded
+             **/
+            RequestFunded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            /**
+             * The whole reward was paid to the council member.
+             **/
+            RewardPayment: AugmentedEvent<ApiType, [u64, AccountId32, u128, u128]>;
+            /**
+             * Candidates are announced and voting starts
+             **/
+            VotingPeriodStarted: AugmentedEvent<ApiType, [u32]>;
+        };
+        distributionWorkingGroup: {
+            /**
+             * Emits on withdrawing the application for the regular worker/lead opening.
+             * Params:
+             * - Job application id
+             **/
+            ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on adding the application for the worker opening.
+             * Params:
+             * - Opening parameteres
+             * - Application id
+             **/
+            AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+            /**
+             * Emits on setting the budget for the working group.
+             * Params:
+             * - new budget
+             **/
+            BudgetSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on budget from the working group being spent
+             * Params:
+             * - Receiver Account Id.
+             * - Balance spent.
+             * - Rationale.
+             **/
+            BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Emits on setting the group leader.
+             * Params:
+             * - Group worker id.
+             **/
+            LeaderSet: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on un-setting the leader.
+             **/
+            LeaderUnset: AugmentedEvent<ApiType, []>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - message
+             **/
+            LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * Emits on reaching new missed reward.
+             * Params:
+             * - Worker ID.
+             * - Missed reward (optional). None means 'no missed reward'.
+             **/
+            NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on adding new job opening.
+             * Params:
+             * - Opening id
+             * - Description
+             * - Opening Type(Lead or Worker)
+             * - Stake Policy for the opening
+             * - Reward per block
+             **/
+            OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Emits on canceling the job opening.
+             * Params:
+             * - Opening id
+             **/
+            OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on filling the job opening.
+             * Params:
+             * - Worker opening id
+             * - Worker application id to the worker id dictionary
+             * - Applicationd ids used to fill the opening
+             **/
+            OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on paying the reward.
+             * Params:
+             * - Id of the worker.
+             * - Receiver Account Id.
+             * - Reward
+             * - Payment type (missed reward or regular one)
+             **/
+            RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+            /**
+             * Emits on decreasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on increasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on slashing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - actual slashed balance.
+             * - Requested slashed balance.
+             * - Rationale.
+             **/
+            StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+            /**
+             * Emits on updating the status text of the working group.
+             * Params:
+             * - status text hash
+             * - status text
+             **/
+            StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+            /**
+             * Emits on terminating the leader.
+             * Params:
+             * - leader worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on terminating the worker.
+             * Params:
+             * - worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on exiting the worker.
+             * Params:
+             * - worker id.
+             * - Rationale.
+             **/
+            WorkerExited: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - worker
+             * - message
+             **/
+            WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on updating the reward account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward account id of the worker.
+             **/
+            WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits on updating the reward amount of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward per block
+             **/
+            WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on updating the role account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Role account id of the worker.
+             **/
+            WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits when worker started leaving their role.
+             * Params:
+             * - Worker id.
+             * - Rationale.
+             **/
+            WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+            /**
+             * Fund the working group budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+        };
+        electionProviderMultiPhase: {
+            /**
+             * The election has been finalized, with `Some` of the given computation, or else if the
+             * election failed, `None`.
+             **/
+            ElectionFinalized: AugmentedEvent<ApiType, [electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>], {
+                electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>;
+            }>;
+            /**
+             * An account has been rewarded for their signed submission being finalized.
+             **/
+            Rewarded: AugmentedEvent<ApiType, [account: AccountId32, value: u128], {
+                account: AccountId32;
+                value: u128;
+            }>;
+            /**
+             * The signed phase of the given round has started.
+             **/
+            SignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], {
+                round: u32;
+            }>;
+            /**
+             * An account has been slashed for submitting an invalid signed submission.
+             **/
+            Slashed: AugmentedEvent<ApiType, [account: AccountId32, value: u128], {
+                account: AccountId32;
+                value: u128;
+            }>;
+            /**
+             * A solution was stored with the given compute.
+             *
+             * If the solution is signed, this means that it hasn't yet been processed. If the
+             * solution is unsigned, this means that it has also been processed.
+             *
+             * The `bool` is `true` when a previous solution was ejected to make room for this one.
+             **/
+            SolutionStored: AugmentedEvent<ApiType, [electionCompute: PalletElectionProviderMultiPhaseElectionCompute, prevEjected: bool], {
+                electionCompute: PalletElectionProviderMultiPhaseElectionCompute;
+                prevEjected: bool;
+            }>;
+            /**
+             * The unsigned phase of the given round has started.
+             **/
+            UnsignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], {
+                round: u32;
+            }>;
+        };
+        forum: {
+            /**
+             * An arhical status of category with given id was updated.
+             * The second argument reflects the new archival status of the category.
+             **/
+            CategoryArchivalStatusUpdated: AugmentedEvent<ApiType, [u64, bool, PalletForumPrivilegedActor]>;
+            /**
+             * A category was introduced
+             **/
+            CategoryCreated: AugmentedEvent<ApiType, [u64, Option<u64>, Bytes, Bytes]>;
+            /**
+             * A category was deleted
+             **/
+            CategoryDeleted: AugmentedEvent<ApiType, [u64, PalletForumPrivilegedActor]>;
+            /**
+             * A discription of category with given id was updated.
+             * The second argument reflects the new description hash of the category.
+             **/
+            CategoryDescriptionUpdated: AugmentedEvent<ApiType, [u64, H256, PalletForumPrivilegedActor]>;
+            /**
+             * An moderator ability to moderate a category and its subcategories updated
+             **/
+            CategoryMembershipOfModeratorUpdated: AugmentedEvent<ApiType, [u64, u64, bool]>;
+            /**
+             * Sticky thread updated for category
+             **/
+            CategoryStickyThreadUpdate: AugmentedEvent<ApiType, [u64, BTreeSet<u64>, PalletForumPrivilegedActor]>;
+            /**
+             * A title of category with given id was updated.
+             * The second argument reflects the new title hash of the category.
+             **/
+            CategoryTitleUpdated: AugmentedEvent<ApiType, [u64, H256, PalletForumPrivilegedActor]>;
+            /**
+             * Post with given id was created.
+             **/
+            PostAdded: AugmentedEvent<ApiType, [u64, u64, u64, u64, Bytes, bool]>;
+            /**
+             * Post with givne id was deleted.
+             **/
+            PostDeleted: AugmentedEvent<ApiType, [Bytes, u64, BTreeMap<PalletForumExtendedPostIdObject, bool>]>;
+            /**
+             * Post with givne id was moderated.
+             **/
+            PostModerated: AugmentedEvent<ApiType, [u64, Bytes, PalletForumPrivilegedActor, u64, u64]>;
+            /**
+             * Post with given id had its text updated.
+             * The second argument reflects the number of total edits when the text update occurs.
+             **/
+            PostTextUpdated: AugmentedEvent<ApiType, [u64, u64, u64, u64, Bytes]>;
+            /**
+             * A thread with given id was created.
+             * A third argument reflects the initial post id of the thread.
+             **/
+            ThreadCreated: AugmentedEvent<ApiType, [u64, u64, u64, u64, Bytes, Bytes]>;
+            /**
+             * A thread was deleted.
+             **/
+            ThreadDeleted: AugmentedEvent<ApiType, [u64, u64, u64, bool]>;
+            /**
+             * A thread metadata given id was updated.
+             **/
+            ThreadMetadataUpdated: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+            /**
+             * A thread with given id was moderated.
+             **/
+            ThreadModerated: AugmentedEvent<ApiType, [u64, Bytes, PalletForumPrivilegedActor, u64]>;
+            /**
+             * A thread was moved to new category
+             **/
+            ThreadMoved: AugmentedEvent<ApiType, [u64, u64, PalletForumPrivilegedActor, u64]>;
+            /**
+             * A thread with given id was updated.
+             * The second argument reflects the new archival status of the thread.
+             **/
+            ThreadUpdated: AugmentedEvent<ApiType, [u64, bool, PalletForumPrivilegedActor, u64]>;
+        };
+        forumWorkingGroup: {
+            /**
+             * Emits on withdrawing the application for the regular worker/lead opening.
+             * Params:
+             * - Job application id
+             **/
+            ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on adding the application for the worker opening.
+             * Params:
+             * - Opening parameteres
+             * - Application id
+             **/
+            AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+            /**
+             * Emits on setting the budget for the working group.
+             * Params:
+             * - new budget
+             **/
+            BudgetSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on budget from the working group being spent
+             * Params:
+             * - Receiver Account Id.
+             * - Balance spent.
+             * - Rationale.
+             **/
+            BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Emits on setting the group leader.
+             * Params:
+             * - Group worker id.
+             **/
+            LeaderSet: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on un-setting the leader.
+             **/
+            LeaderUnset: AugmentedEvent<ApiType, []>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - message
+             **/
+            LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * Emits on reaching new missed reward.
+             * Params:
+             * - Worker ID.
+             * - Missed reward (optional). None means 'no missed reward'.
+             **/
+            NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on adding new job opening.
+             * Params:
+             * - Opening id
+             * - Description
+             * - Opening Type(Lead or Worker)
+             * - Stake Policy for the opening
+             * - Reward per block
+             **/
+            OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Emits on canceling the job opening.
+             * Params:
+             * - Opening id
+             **/
+            OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on filling the job opening.
+             * Params:
+             * - Worker opening id
+             * - Worker application id to the worker id dictionary
+             * - Applicationd ids used to fill the opening
+             **/
+            OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on paying the reward.
+             * Params:
+             * - Id of the worker.
+             * - Receiver Account Id.
+             * - Reward
+             * - Payment type (missed reward or regular one)
+             **/
+            RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+            /**
+             * Emits on decreasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on increasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on slashing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - actual slashed balance.
+             * - Requested slashed balance.
+             * - Rationale.
+             **/
+            StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+            /**
+             * Emits on updating the status text of the working group.
+             * Params:
+             * - status text hash
+             * - status text
+             **/
+            StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+            /**
+             * Emits on terminating the leader.
+             * Params:
+             * - leader worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on terminating the worker.
+             * Params:
+             * - worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on exiting the worker.
+             * Params:
+             * - worker id.
+             * - Rationale.
+             **/
+            WorkerExited: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - worker
+             * - message
+             **/
+            WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on updating the reward account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward account id of the worker.
+             **/
+            WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits on updating the reward amount of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward per block
+             **/
+            WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on updating the role account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Role account id of the worker.
+             **/
+            WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits when worker started leaving their role.
+             * Params:
+             * - Worker id.
+             * - Rationale.
+             **/
+            WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+            /**
+             * Fund the working group budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+        };
+        grandpa: {
+            /**
+             * New authority set has been applied.
+             **/
+            NewAuthorities: AugmentedEvent<ApiType, [authoritySet: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>], {
+                authoritySet: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
+            }>;
+            /**
+             * Current authority set has been paused.
+             **/
+            Paused: AugmentedEvent<ApiType, []>;
+            /**
+             * Current authority set has been resumed.
+             **/
+            Resumed: AugmentedEvent<ApiType, []>;
+        };
+        imOnline: {
+            /**
+             * At the end of the session, no offence was committed.
+             **/
+            AllGood: AugmentedEvent<ApiType, []>;
+            /**
+             * A new heartbeat was received from `AuthorityId`.
+             **/
+            HeartbeatReceived: AugmentedEvent<ApiType, [authorityId: PalletImOnlineSr25519AppSr25519Public], {
+                authorityId: PalletImOnlineSr25519AppSr25519Public;
+            }>;
+            /**
+             * At the end of the session, at least one validator was found to be offline.
+             **/
+            SomeOffline: AugmentedEvent<ApiType, [offline: Vec<ITuple<[AccountId32, PalletStakingExposure]>>], {
+                offline: Vec<ITuple<[AccountId32, PalletStakingExposure]>>;
+            }>;
+        };
+        joystreamUtility: {
+            /**
+             * A runtime upgrade was executed
+             * Params:
+             * - New code encoded in bytes
+             **/
+            RuntimeUpgraded: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * A signal proposal was executed
+             * Params:
+             * - Signal given when creating the corresponding proposal
+             **/
+            Signaled: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * An account burned tokens
+             * Params:
+             * - Account Id of the burning tokens
+             * - Balance burned from that account
+             **/
+            TokensBurned: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            /**
+             * An `Update Working Group Budget` proposal was executed
+             * Params:
+             * - Working group which budget is being updated
+             * - Amount of balance being moved
+             * - Enum variant with positive indicating funds moved torwards working group and negative
+             * and negative funds moving from the working group
+             **/
+            UpdatedWorkingGroupBudget: AugmentedEvent<ApiType, [PalletCommonWorkingGroupIterableEnumsWorkingGroup, u128, PalletCommonBalanceKind]>;
+        };
+        members: {
+            InitialInvitationBalanceUpdated: AugmentedEvent<ApiType, [u128]>;
+            InitialInvitationCountUpdated: AugmentedEvent<ApiType, [u32]>;
+            InvitesTransferred: AugmentedEvent<ApiType, [u64, u64, u32]>;
+            LeaderInvitationQuotaUpdated: AugmentedEvent<ApiType, [u32]>;
+            MemberAccountsUpdated: AugmentedEvent<ApiType, [u64, Option<AccountId32>, Option<AccountId32>]>;
+            MemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateMemberParameters, u32]>;
+            MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters, u128]>;
+            MemberProfileUpdated: AugmentedEvent<ApiType, [u64, Option<Bytes>, Option<Bytes>]>;
+            MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
+            MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters, u32]>;
+            MembershipGifted: AugmentedEvent<ApiType, [u64, PalletMembershipGiftMembershipParameters]>;
+            MembershipPriceUpdated: AugmentedEvent<ApiType, [u128]>;
+            MemberVerificationStatusUpdated: AugmentedEvent<ApiType, [u64, bool, u64]>;
+            ReferralCutUpdated: AugmentedEvent<ApiType, [u8]>;
+            StakingAccountAdded: AugmentedEvent<ApiType, [AccountId32, u64]>;
+            StakingAccountConfirmed: AugmentedEvent<ApiType, [AccountId32, u64]>;
+            StakingAccountRemoved: AugmentedEvent<ApiType, [AccountId32, u64]>;
+        };
+        membershipWorkingGroup: {
+            /**
+             * Emits on withdrawing the application for the regular worker/lead opening.
+             * Params:
+             * - Job application id
+             **/
+            ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on adding the application for the worker opening.
+             * Params:
+             * - Opening parameteres
+             * - Application id
+             **/
+            AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+            /**
+             * Emits on setting the budget for the working group.
+             * Params:
+             * - new budget
+             **/
+            BudgetSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on budget from the working group being spent
+             * Params:
+             * - Receiver Account Id.
+             * - Balance spent.
+             * - Rationale.
+             **/
+            BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Emits on setting the group leader.
+             * Params:
+             * - Group worker id.
+             **/
+            LeaderSet: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on un-setting the leader.
+             **/
+            LeaderUnset: AugmentedEvent<ApiType, []>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - message
+             **/
+            LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * Emits on reaching new missed reward.
+             * Params:
+             * - Worker ID.
+             * - Missed reward (optional). None means 'no missed reward'.
+             **/
+            NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on adding new job opening.
+             * Params:
+             * - Opening id
+             * - Description
+             * - Opening Type(Lead or Worker)
+             * - Stake Policy for the opening
+             * - Reward per block
+             **/
+            OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Emits on canceling the job opening.
+             * Params:
+             * - Opening id
+             **/
+            OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on filling the job opening.
+             * Params:
+             * - Worker opening id
+             * - Worker application id to the worker id dictionary
+             * - Applicationd ids used to fill the opening
+             **/
+            OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on paying the reward.
+             * Params:
+             * - Id of the worker.
+             * - Receiver Account Id.
+             * - Reward
+             * - Payment type (missed reward or regular one)
+             **/
+            RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+            /**
+             * Emits on decreasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on increasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on slashing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - actual slashed balance.
+             * - Requested slashed balance.
+             * - Rationale.
+             **/
+            StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+            /**
+             * Emits on updating the status text of the working group.
+             * Params:
+             * - status text hash
+             * - status text
+             **/
+            StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+            /**
+             * Emits on terminating the leader.
+             * Params:
+             * - leader worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on terminating the worker.
+             * Params:
+             * - worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on exiting the worker.
+             * Params:
+             * - worker id.
+             * - Rationale.
+             **/
+            WorkerExited: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - worker
+             * - message
+             **/
+            WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on updating the reward account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward account id of the worker.
+             **/
+            WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits on updating the reward amount of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward per block
+             **/
+            WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on updating the role account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Role account id of the worker.
+             **/
+            WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits when worker started leaving their role.
+             * Params:
+             * - Worker id.
+             * - Rationale.
+             **/
+            WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+            /**
+             * Fund the working group budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+        };
+        multisig: {
+            /**
+             * A multisig operation has been approved by someone.
+             **/
+            MultisigApproval: AugmentedEvent<ApiType, [approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed], {
+                approving: AccountId32;
+                timepoint: PalletMultisigTimepoint;
+                multisig: AccountId32;
+                callHash: U8aFixed;
+            }>;
+            /**
+             * A multisig operation has been cancelled.
+             **/
+            MultisigCancelled: AugmentedEvent<ApiType, [cancelling: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed], {
+                cancelling: AccountId32;
+                timepoint: PalletMultisigTimepoint;
+                multisig: AccountId32;
+                callHash: U8aFixed;
+            }>;
+            /**
+             * A multisig operation has been executed.
+             **/
+            MultisigExecuted: AugmentedEvent<ApiType, [approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed, result: Result<Null, SpRuntimeDispatchError>], {
+                approving: AccountId32;
+                timepoint: PalletMultisigTimepoint;
+                multisig: AccountId32;
+                callHash: U8aFixed;
+                result: Result<Null, SpRuntimeDispatchError>;
+            }>;
+            /**
+             * A new multisig operation has begun.
+             **/
+            NewMultisig: AugmentedEvent<ApiType, [approving: AccountId32, multisig: AccountId32, callHash: U8aFixed], {
+                approving: AccountId32;
+                multisig: AccountId32;
+                callHash: U8aFixed;
+            }>;
+        };
+        offences: {
+            /**
+             * There is an offence reported of the given `kind` happened at the `session_index` and
+             * (kind-specific) time slot. This event is not deposited for duplicate slashes.
+             * \[kind, timeslot\].
+             **/
+            Offence: AugmentedEvent<ApiType, [kind: U8aFixed, timeslot: Bytes], {
+                kind: U8aFixed;
+                timeslot: Bytes;
+            }>;
+        };
+        operationsWorkingGroupAlpha: {
+            /**
+             * Emits on withdrawing the application for the regular worker/lead opening.
+             * Params:
+             * - Job application id
+             **/
+            ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on adding the application for the worker opening.
+             * Params:
+             * - Opening parameteres
+             * - Application id
+             **/
+            AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+            /**
+             * Emits on setting the budget for the working group.
+             * Params:
+             * - new budget
+             **/
+            BudgetSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on budget from the working group being spent
+             * Params:
+             * - Receiver Account Id.
+             * - Balance spent.
+             * - Rationale.
+             **/
+            BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Emits on setting the group leader.
+             * Params:
+             * - Group worker id.
+             **/
+            LeaderSet: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on un-setting the leader.
+             **/
+            LeaderUnset: AugmentedEvent<ApiType, []>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - message
+             **/
+            LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * Emits on reaching new missed reward.
+             * Params:
+             * - Worker ID.
+             * - Missed reward (optional). None means 'no missed reward'.
+             **/
+            NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on adding new job opening.
+             * Params:
+             * - Opening id
+             * - Description
+             * - Opening Type(Lead or Worker)
+             * - Stake Policy for the opening
+             * - Reward per block
+             **/
+            OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Emits on canceling the job opening.
+             * Params:
+             * - Opening id
+             **/
+            OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on filling the job opening.
+             * Params:
+             * - Worker opening id
+             * - Worker application id to the worker id dictionary
+             * - Applicationd ids used to fill the opening
+             **/
+            OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on paying the reward.
+             * Params:
+             * - Id of the worker.
+             * - Receiver Account Id.
+             * - Reward
+             * - Payment type (missed reward or regular one)
+             **/
+            RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+            /**
+             * Emits on decreasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on increasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on slashing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - actual slashed balance.
+             * - Requested slashed balance.
+             * - Rationale.
+             **/
+            StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+            /**
+             * Emits on updating the status text of the working group.
+             * Params:
+             * - status text hash
+             * - status text
+             **/
+            StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+            /**
+             * Emits on terminating the leader.
+             * Params:
+             * - leader worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on terminating the worker.
+             * Params:
+             * - worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on exiting the worker.
+             * Params:
+             * - worker id.
+             * - Rationale.
+             **/
+            WorkerExited: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - worker
+             * - message
+             **/
+            WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on updating the reward account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward account id of the worker.
+             **/
+            WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits on updating the reward amount of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward per block
+             **/
+            WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on updating the role account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Role account id of the worker.
+             **/
+            WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits when worker started leaving their role.
+             * Params:
+             * - Worker id.
+             * - Rationale.
+             **/
+            WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+            /**
+             * Fund the working group budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+        };
+        operationsWorkingGroupBeta: {
+            /**
+             * Emits on withdrawing the application for the regular worker/lead opening.
+             * Params:
+             * - Job application id
+             **/
+            ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on adding the application for the worker opening.
+             * Params:
+             * - Opening parameteres
+             * - Application id
+             **/
+            AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+            /**
+             * Emits on setting the budget for the working group.
+             * Params:
+             * - new budget
+             **/
+            BudgetSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on budget from the working group being spent
+             * Params:
+             * - Receiver Account Id.
+             * - Balance spent.
+             * - Rationale.
+             **/
+            BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Emits on setting the group leader.
+             * Params:
+             * - Group worker id.
+             **/
+            LeaderSet: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on un-setting the leader.
+             **/
+            LeaderUnset: AugmentedEvent<ApiType, []>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - message
+             **/
+            LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * Emits on reaching new missed reward.
+             * Params:
+             * - Worker ID.
+             * - Missed reward (optional). None means 'no missed reward'.
+             **/
+            NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on adding new job opening.
+             * Params:
+             * - Opening id
+             * - Description
+             * - Opening Type(Lead or Worker)
+             * - Stake Policy for the opening
+             * - Reward per block
+             **/
+            OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Emits on canceling the job opening.
+             * Params:
+             * - Opening id
+             **/
+            OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on filling the job opening.
+             * Params:
+             * - Worker opening id
+             * - Worker application id to the worker id dictionary
+             * - Applicationd ids used to fill the opening
+             **/
+            OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on paying the reward.
+             * Params:
+             * - Id of the worker.
+             * - Receiver Account Id.
+             * - Reward
+             * - Payment type (missed reward or regular one)
+             **/
+            RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+            /**
+             * Emits on decreasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on increasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on slashing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - actual slashed balance.
+             * - Requested slashed balance.
+             * - Rationale.
+             **/
+            StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+            /**
+             * Emits on updating the status text of the working group.
+             * Params:
+             * - status text hash
+             * - status text
+             **/
+            StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+            /**
+             * Emits on terminating the leader.
+             * Params:
+             * - leader worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on terminating the worker.
+             * Params:
+             * - worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on exiting the worker.
+             * Params:
+             * - worker id.
+             * - Rationale.
+             **/
+            WorkerExited: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - worker
+             * - message
+             **/
+            WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on updating the reward account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward account id of the worker.
+             **/
+            WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits on updating the reward amount of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward per block
+             **/
+            WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on updating the role account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Role account id of the worker.
+             **/
+            WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits when worker started leaving their role.
+             * Params:
+             * - Worker id.
+             * - Rationale.
+             **/
+            WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+            /**
+             * Fund the working group budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+        };
+        operationsWorkingGroupGamma: {
+            /**
+             * Emits on withdrawing the application for the regular worker/lead opening.
+             * Params:
+             * - Job application id
+             **/
+            ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on adding the application for the worker opening.
+             * Params:
+             * - Opening parameteres
+             * - Application id
+             **/
+            AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+            /**
+             * Emits on setting the budget for the working group.
+             * Params:
+             * - new budget
+             **/
+            BudgetSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on budget from the working group being spent
+             * Params:
+             * - Receiver Account Id.
+             * - Balance spent.
+             * - Rationale.
+             **/
+            BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Emits on setting the group leader.
+             * Params:
+             * - Group worker id.
+             **/
+            LeaderSet: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on un-setting the leader.
+             **/
+            LeaderUnset: AugmentedEvent<ApiType, []>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - message
+             **/
+            LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * Emits on reaching new missed reward.
+             * Params:
+             * - Worker ID.
+             * - Missed reward (optional). None means 'no missed reward'.
+             **/
+            NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on adding new job opening.
+             * Params:
+             * - Opening id
+             * - Description
+             * - Opening Type(Lead or Worker)
+             * - Stake Policy for the opening
+             * - Reward per block
+             **/
+            OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Emits on canceling the job opening.
+             * Params:
+             * - Opening id
+             **/
+            OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on filling the job opening.
+             * Params:
+             * - Worker opening id
+             * - Worker application id to the worker id dictionary
+             * - Applicationd ids used to fill the opening
+             **/
+            OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on paying the reward.
+             * Params:
+             * - Id of the worker.
+             * - Receiver Account Id.
+             * - Reward
+             * - Payment type (missed reward or regular one)
+             **/
+            RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+            /**
+             * Emits on decreasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on increasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on slashing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - actual slashed balance.
+             * - Requested slashed balance.
+             * - Rationale.
+             **/
+            StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+            /**
+             * Emits on updating the status text of the working group.
+             * Params:
+             * - status text hash
+             * - status text
+             **/
+            StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+            /**
+             * Emits on terminating the leader.
+             * Params:
+             * - leader worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on terminating the worker.
+             * Params:
+             * - worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on exiting the worker.
+             * Params:
+             * - worker id.
+             * - Rationale.
+             **/
+            WorkerExited: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - worker
+             * - message
+             **/
+            WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on updating the reward account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward account id of the worker.
+             **/
+            WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits on updating the reward amount of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward per block
+             **/
+            WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on updating the role account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Role account id of the worker.
+             **/
+            WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits when worker started leaving their role.
+             * Params:
+             * - Worker id.
+             * - Rationale.
+             **/
+            WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+            /**
+             * Fund the working group budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+        };
+        projectToken: {
+            /**
+             * Account Dusted
+             * Params:
+             * - token identifier
+             * - id of the dusted account owner member
+             * - account that called the extrinsic
+             * - ongoing policy
+             **/
+            AccountDustedBy: AugmentedEvent<ApiType, [u64, u64, AccountId32, PalletProjectTokenTransferPolicy]>;
+            /**
+             * AMM activated
+             * Params:
+             * - token id
+             * - member id
+             * - params for the bonding curve
+             **/
+            AmmActivated: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenAmmCurve]>;
+            /**
+             * AMM deactivated
+             * Params:
+             * - token id
+             * - member id
+             * - amm treasury amount burned upon deactivation
+             **/
+            AmmDeactivated: AugmentedEvent<ApiType, [u64, u64, u128]>;
+            /**
+             * Max patronage yearly rate updated
+             * Params:
+             * - new rate
+             **/
+            MaxYearlyPatronageRateUpdated: AugmentedEvent<ApiType, [Permill]>;
+            /**
+             * Member joined whitelist
+             * Params:
+             * - token identifier
+             * - member id
+             * - ongoing transfer policy
+             **/
+            MemberJoinedWhitelist: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransferPolicy]>;
+            /**
+             * Patronage credit claimed by creator
+             * Params:
+             * - token identifier
+             * - credit amount
+             * - member id
+             **/
+            PatronageCreditClaimed: AugmentedEvent<ApiType, [u64, u128, u64]>;
+            /**
+             * Patronage rate decreased
+             * Params:
+             * - token identifier
+             * - new patronage rate
+             **/
+            PatronageRateDecreasedTo: AugmentedEvent<ApiType, [u64, Permill]>;
+            /**
+             * Revenue Split finalized
+             * Params:
+             * - token identifier
+             * - recovery account for the leftover funds
+             * - leftover funds
+             **/
+            RevenueSplitFinalized: AugmentedEvent<ApiType, [u64, AccountId32, u128]>;
+            /**
+             * Revenue Split issued
+             * Params:
+             * - token identifier
+             * - starting block for the split
+             * - duration of the split
+             * - JOY allocated for the split
+             **/
+            RevenueSplitIssued: AugmentedEvent<ApiType, [u64, u32, u32, u128]>;
+            /**
+             * User left revenue split
+             * Params:
+             * - token identifier
+             * - ex-participant's member id
+             * - amount unstaked
+             **/
+            RevenueSplitLeft: AugmentedEvent<ApiType, [u64, u64, u128]>;
+            /**
+             * Token amount is transferred from src to dst
+             * Params:
+             * - token identifier
+             * - source member id
+             * - map containing validated outputs (amount indexed by (member_id + account existance))
+             * - transfer's metadata
+             **/
+            TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransfers, Bytes]>;
+            /**
+             * Token amount transferred by issuer
+             * Params:
+             * - token identifier
+             * - source (issuer) member id
+             * - map containing validated outputs
+             * (amount, opt. vesting schedule, opt. vesting cleanup key) data indexed by
+             * (account_id + account existance)
+             * - transfer's metadata
+             **/
+            TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransfers, Bytes]>;
+            /**
+             * Token Deissued
+             * Params:
+             * - token id
+             **/
+            TokenDeissued: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Token Issued
+             * Params:
+             * - token id
+             * - token issuance parameters
+             **/
+            TokenIssued: AugmentedEvent<ApiType, [u64, PalletProjectTokenTokenIssuanceParameters]>;
+            /**
+             * Token Sale Finalized
+             * Params:
+             * - token id
+             * - token sale id
+             * - amount of unsold tokens recovered
+             * - amount of JOY collected
+             **/
+            TokenSaleFinalized: AugmentedEvent<ApiType, [u64, u32, u128, u128]>;
+            /**
+             * Toke Sale was Initialized
+             * Params:
+             * - token id
+             * - token sale id
+             * - token sale data
+             * - token sale metadata
+             **/
+            TokenSaleInitialized: AugmentedEvent<ApiType, [u64, u32, PalletProjectTokenTokenSale, Option<Bytes>]>;
+            /**
+             * Tokens Bought on AMM
+             * Params:
+             * - token id
+             * - member id
+             * - amount of CRT minted
+             * - amount of JOY deposited into curve treasury
+             **/
+            TokensBoughtOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
+            /**
+             * Tokens Burned
+             * Params:
+             * - token id
+             * - member id
+             * - number of tokens burned
+             **/
+            TokensBurned: AugmentedEvent<ApiType, [u64, u64, u128]>;
+            /**
+             * Tokens Purchased On Sale
+             * Params:
+             * - token id
+             * - token sale id
+             * - amount of tokens purchased
+             * - buyer's member id
+             **/
+            TokensPurchasedOnSale: AugmentedEvent<ApiType, [u64, u32, u128, u64]>;
+            /**
+             * Tokens Sold on AMM
+             * Params:
+             * - token id
+             * - member id
+             * - amount of CRT burned
+             * - amount of JOY withdrawn from curve treasury
+             **/
+            TokensSoldOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
+            /**
+             * Transfer Policy Changed To Permissionless
+             * Params:
+             * - token id
+             **/
+            TransferPolicyChangedToPermissionless: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Upcoming Token Sale was Updated
+             * Params:
+             * - token id
+             * - token sale id
+             * - new sale start block
+             * - new sale duration
+             **/
+            UpcomingTokenSaleUpdated: AugmentedEvent<ApiType, [u64, u32, Option<u32>, Option<u32>]>;
+            /**
+             * User partipated in a revenue split
+             * Params:
+             * - token identifier
+             * - participant's member id
+             * - user allocated staked balance
+             * - dividend amount (JOY) granted
+             * - revenue split identifier
+             **/
+            UserParticipatedInSplit: AugmentedEvent<ApiType, [u64, u64, u128, u128, u32]>;
+        };
+        proposalsCodex: {
+            /**
+             * A proposal was created
+             * Params:
+             * - Id of a newly created proposal after it was saved in storage.
+             * - General proposal parameter. Parameters shared by all proposals
+             * - Proposal Details. Parameter of proposal with a variant for each kind of proposal
+             * - Id of a newly created proposal thread
+             **/
+            ProposalCreated: AugmentedEvent<ApiType, [u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
+        };
+        proposalsDiscussion: {
+            /**
+             * Emits on post creation.
+             **/
+            PostCreated: AugmentedEvent<ApiType, [u64, u64, u64, Bytes, bool]>;
+            /**
+             * Emits on post deleted
+             **/
+            PostDeleted: AugmentedEvent<ApiType, [u64, u64, u64, bool]>;
+            /**
+             * Emits on post update.
+             **/
+            PostUpdated: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+            /**
+             * Emits on thread creation.
+             **/
+            ThreadCreated: AugmentedEvent<ApiType, [u64, u64]>;
+            /**
+             * Emits on thread mode change.
+             **/
+            ThreadModeChanged: AugmentedEvent<ApiType, [u64, PalletProposalsDiscussionThreadModeBTreeSet, u64]>;
+        };
+        proposalsEngine: {
+            /**
+             * Emits on a proposal being cancelled
+             * Params:
+             * - Member Id of the proposer
+             * - Id of the proposal
+             **/
+            ProposalCancelled: AugmentedEvent<ApiType, [u64, u32]>;
+            /**
+             * Emits on getting a proposal status decision.
+             * Params:
+             * - Id of a proposal.
+             * - Proposal decision
+             **/
+            ProposalDecisionMade: AugmentedEvent<ApiType, [u32, PalletProposalsEngineProposalStatusesProposalDecision]>;
+            /**
+             * Emits on proposal execution.
+             * Params:
+             * - Id of a updated proposal.
+             * - Proposal execution status.
+             **/
+            ProposalExecuted: AugmentedEvent<ApiType, [u32, PalletProposalsEngineProposalStatusesExecutionStatus]>;
+            /**
+             * Emits on proposal creation.
+             * Params:
+             * - Id of a proposal.
+             * - New proposal status.
+             **/
+            ProposalStatusUpdated: AugmentedEvent<ApiType, [u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
+            /**
+             * Emits on proposer making a remark
+             * - proposer id
+             * - proposal id
+             * - message
+             **/
+            ProposerRemarked: AugmentedEvent<ApiType, [u64, u32, Bytes]>;
+            /**
+             * Emits on voting for the proposal
+             * Params:
+             * - Voter - member id of a voter.
+             * - Id of a proposal.
+             * - Kind of vote.
+             * - Rationale.
+             **/
+            Voted: AugmentedEvent<ApiType, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
+        };
+        referendum: {
+            /**
+             * Account permanently opted out of voting in referendum.
+             **/
+            AccountOptedOutOfVoting: AugmentedEvent<ApiType, [AccountId32]>;
+            /**
+             * Referendum ended and winning option was selected
+             **/
+            ReferendumFinished: AugmentedEvent<ApiType, [Vec<PalletReferendumOptionResult>]>;
+            /**
+             * Referendum started
+             **/
+            ReferendumStarted: AugmentedEvent<ApiType, [u32, u32]>;
+            /**
+             * Referendum started
+             **/
+            ReferendumStartedForcefully: AugmentedEvent<ApiType, [u32, u32]>;
+            /**
+             * Revealing phase has begun
+             **/
+            RevealingStageStarted: AugmentedEvent<ApiType, [u32]>;
+            /**
+             * User released his stake
+             **/
+            StakeReleased: AugmentedEvent<ApiType, [AccountId32]>;
+            /**
+             * User cast a vote in referendum
+             **/
+            VoteCast: AugmentedEvent<ApiType, [AccountId32, H256, u128]>;
+            /**
+             * User revealed his vote
+             **/
+            VoteRevealed: AugmentedEvent<ApiType, [AccountId32, u64, Bytes]>;
+        };
+        session: {
+            /**
+             * New session has happened. Note that the argument is the session index, not the
+             * block number as the type might suggest.
+             **/
+            NewSession: AugmentedEvent<ApiType, [sessionIndex: u32], {
+                sessionIndex: u32;
+            }>;
+        };
+        staking: {
+            /**
+             * An account has bonded this amount. \[stash, amount\]
+             *
+             * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
+             * it will not be emitted for staking rewards when they are added to stake.
+             **/
+            Bonded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            /**
+             * An account has stopped participating as either a validator or nominator.
+             * \[stash\]
+             **/
+            Chilled: AugmentedEvent<ApiType, [AccountId32]>;
+            /**
+             * The era payout has been set; the first balance is the validator-payout; the second is
+             * the remainder from the maximum amount of reward.
+             * \[era_index, validator_payout, remainder\]
+             **/
+            EraPaid: AugmentedEvent<ApiType, [u32, u128, u128]>;
+            /**
+             * A nominator has been kicked from a validator. \[nominator, stash\]
+             **/
+            Kicked: AugmentedEvent<ApiType, [AccountId32, AccountId32]>;
+            /**
+             * An old slashing report from a prior era was discarded because it could
+             * not be processed. \[session_index\]
+             **/
+            OldSlashingReportDiscarded: AugmentedEvent<ApiType, [u32]>;
+            /**
+             * The stakers' rewards are getting paid. \[era_index, validator_stash\]
+             **/
+            PayoutStarted: AugmentedEvent<ApiType, [u32, AccountId32]>;
+            /**
+             * The nominator has been rewarded by this amount. \[stash, amount\]
+             **/
+            Rewarded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            /**
+             * One validator (and its nominators) has been slashed by the given amount.
+             * \[validator, amount\]
+             **/
+            Slashed: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            /**
+             * A new set of stakers was elected.
+             **/
+            StakersElected: AugmentedEvent<ApiType, []>;
+            /**
+             * The election failed. No new era is planned.
+             **/
+            StakingElectionFailed: AugmentedEvent<ApiType, []>;
+            /**
+             * An account has unbonded this amount. \[stash, amount\]
+             **/
+            Unbonded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            /**
+             * A validator has set their preferences.
+             **/
+            ValidatorPrefsSet: AugmentedEvent<ApiType, [AccountId32, PalletStakingValidatorPrefs]>;
+            /**
+             * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
+             * from the unlocking queue. \[stash, amount\]
+             **/
+            Withdrawn: AugmentedEvent<ApiType, [AccountId32, u128]>;
+        };
+        storage: {
+            /**
+             * Emits on changing the size-based pricing of new objects uploaded.
+             * Params
+             * - new data size fee
+             **/
+            DataObjectPerMegabyteFeeUpdated: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on data objects deletion from bags.
+             * Params
+             * - account ID for the state bloat bond
+             * - bag ID
+             * - data object IDs
+             **/
+            DataObjectsDeleted: AugmentedEvent<ApiType, [AccountId32, PalletStorageBagIdType, BTreeSet<u64>]>;
+            /**
+             * Emits on moving data objects between bags.
+             * Params
+             * - source bag ID
+             * - destination bag ID
+             * - data object IDs
+             **/
+            DataObjectsMoved: AugmentedEvent<ApiType, [PalletStorageBagIdType, PalletStorageBagIdType, BTreeSet<u64>]>;
+            /**
+             * Emits on updating the data object state bloat bond.
+             * Params
+             * - state bloat bond value
+             **/
+            DataObjectStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on storage assets being uploaded and deleted at the same time
+             * Params
+             * - UploadParameters
+             * - Ids of the uploaded objects
+             * - Ids of the removed objects
+             **/
+            DataObjectsUpdated: AugmentedEvent<ApiType, [PalletStorageUploadParametersRecord, BTreeSet<u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on uploading data objects.
+             * Params
+             * - data objects IDs
+             * - initial uploading parameters
+             * - state bloat bond for objects
+             **/
+            DataObjectsUploaded: AugmentedEvent<ApiType, [BTreeSet<u64>, PalletStorageUploadParametersRecord, u128]>;
+            /**
+             * Emits on creating distribution bucket.
+             * Params
+             * - distribution bucket family ID
+             * - accepting new bags
+             * - distribution bucket ID
+             **/
+            DistributionBucketCreated: AugmentedEvent<ApiType, [u64, bool, PalletStorageDistributionBucketIdRecord]>;
+            /**
+             * Emits on deleting distribution bucket.
+             * Params
+             * - distribution bucket ID
+             **/
+            DistributionBucketDeleted: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord]>;
+            /**
+             * Emits on creating distribution bucket family.
+             * Params
+             * - distribution family bucket ID
+             **/
+            DistributionBucketFamilyCreated: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on deleting distribution bucket family.
+             * Params
+             * - distribution family bucket ID
+             **/
+            DistributionBucketFamilyDeleted: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on setting the metadata by a distribution bucket family.
+             * Params
+             * - distribution bucket family ID
+             * - metadata
+             **/
+            DistributionBucketFamilyMetadataSet: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on accepting a distribution bucket invitation for the operator.
+             * Params
+             * - worker ID
+             * - distribution bucket ID
+             **/
+            DistributionBucketInvitationAccepted: AugmentedEvent<ApiType, [u64, PalletStorageDistributionBucketIdRecord]>;
+            /**
+             * Emits on canceling a distribution bucket invitation for the operator.
+             * Params
+             * - distribution bucket ID
+             * - operator worker ID
+             **/
+            DistributionBucketInvitationCancelled: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, u64]>;
+            /**
+             * Emits on setting the metadata by a distribution bucket operator.
+             * Params
+             * - worker ID
+             * - distribution bucket ID
+             * - metadata
+             **/
+            DistributionBucketMetadataSet: AugmentedEvent<ApiType, [u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+            /**
+             * Emits on storage bucket mode update (distributing flag).
+             * Params
+             * - distribution bucket ID
+             * - distributing
+             **/
+            DistributionBucketModeUpdated: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, bool]>;
+            /**
+             * Emits on creating a distribution bucket invitation for the operator.
+             * Params
+             * - distribution bucket ID
+             * - worker ID
+             **/
+            DistributionBucketOperatorInvited: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, u64]>;
+            /**
+             * Emits on the distribution bucket operator removal.
+             * Params
+             * - distribution bucket ID
+             * - distribution bucket operator ID
+             **/
+            DistributionBucketOperatorRemoved: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, u64]>;
+            /**
+             * Emits on changing the "Distribution buckets per bag" number limit.
+             * Params
+             * - new limit
+             **/
+            DistributionBucketsPerBagLimitUpdated: AugmentedEvent<ApiType, [u32]>;
+            /**
+             * Emits on storage bucket status update (accepting new bags).
+             * Params
+             * - distribution bucket ID
+             * - new status (accepting new bags)
+             **/
+            DistributionBucketStatusUpdated: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, bool]>;
+            /**
+             * Emits on updating distribution buckets for bag.
+             * Params
+             * - bag ID
+             * - storage buckets to add ID collection
+             * - storage buckets to remove ID collection
+             **/
+            DistributionBucketsUpdatedForBag: AugmentedEvent<ApiType, [PalletStorageBagIdType, u64, BTreeSet<u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on Distribution Operator making a remark
+             * Params
+             * - operator's worker id
+             * - distribution bucket id
+             * - remark message
+             **/
+            DistributionOperatorRemarked: AugmentedEvent<ApiType, [u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+            /**
+             * Emits on creating a dynamic bag.
+             * Params
+             * - dynamic bag creation parameters
+             * - uploaded data objects ids
+             **/
+            DynamicBagCreated: AugmentedEvent<ApiType, [PalletStorageDynBagCreationParametersRecord, BTreeSet<u64>]>;
+            /**
+             * Emits on deleting a dynamic bag.
+             * Params
+             * - dynamic bag ID
+             **/
+            DynamicBagDeleted: AugmentedEvent<ApiType, [PalletStorageDynamicBagIdType]>;
+            /**
+             * Emits on dynamic bag creation policy update (distribution bucket families).
+             * Params
+             * - dynamic bag type
+             * - families and bucket numbers
+             **/
+            FamiliesInDynamicBagCreationPolicyUpdated: AugmentedEvent<ApiType, [PalletStorageDynamicBagType, BTreeMap<u64, u32>]>;
+            /**
+             * Emits on updating the number of storage buckets in dynamic bag creation policy.
+             * Params
+             * - dynamic bag type
+             * - new number of storage buckets
+             **/
+            NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: AugmentedEvent<ApiType, [PalletStorageDynamicBagType, u32]>;
+            /**
+             * Emits on accepting pending data objects.
+             * Params
+             * - storage bucket ID
+             * - worker ID (storage provider ID)
+             * - bag ID
+             * - pending data objects
+             **/
+            PendingDataObjectsAccepted: AugmentedEvent<ApiType, [u64, u64, PalletStorageBagIdType, BTreeSet<u64>]>;
+            /**
+             * Emits on creating the storage bucket.
+             * Params
+             * - storage bucket ID
+             * - invited worker
+             * - flag "accepting_new_bags"
+             * - size limit for voucher,
+             * - objects limit for voucher,
+             **/
+            StorageBucketCreated: AugmentedEvent<ApiType, [u64, Option<u64>, bool, u64, u64]>;
+            /**
+             * Emits on storage bucket deleting.
+             * Params
+             * - storage bucket ID
+             **/
+            StorageBucketDeleted: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on accepting the storage bucket invitation.
+             * Params
+             * - storage bucket ID
+             * - invited worker ID
+             * - transactor account ID
+             **/
+            StorageBucketInvitationAccepted: AugmentedEvent<ApiType, [u64, u64, AccountId32]>;
+            /**
+             * Emits on cancelling the storage bucket invitation.
+             * Params
+             * - storage bucket ID
+             **/
+            StorageBucketInvitationCancelled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on the storage bucket operator invitation.
+             * Params
+             * - storage bucket ID
+             * - operator worker ID (storage provider ID)
+             **/
+            StorageBucketOperatorInvited: AugmentedEvent<ApiType, [u64, u64]>;
+            /**
+             * Emits on the storage bucket operator removal.
+             * Params
+             * - storage bucket ID
+             **/
+            StorageBucketOperatorRemoved: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on changing the "Storage buckets per bag" number limit.
+             * Params
+             * - new limit
+             **/
+            StorageBucketsPerBagLimitUpdated: AugmentedEvent<ApiType, [u32]>;
+            /**
+             * Emits on storage bucket status update.
+             * Params
+             * - storage bucket ID
+             * - new status
+             **/
+            StorageBucketStatusUpdated: AugmentedEvent<ApiType, [u64, bool]>;
+            /**
+             * Emits on updating storage buckets for bag.
+             * Params
+             * - bag ID
+             * - storage buckets to add ID collection
+             * - storage buckets to remove ID collection
+             **/
+            StorageBucketsUpdatedForBag: AugmentedEvent<ApiType, [PalletStorageBagIdType, BTreeSet<u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on changing the "Storage buckets voucher max limits".
+             * Params
+             * - new objects size limit
+             * - new objects number limit
+             **/
+            StorageBucketsVoucherMaxLimitsUpdated: AugmentedEvent<ApiType, [u64, u64]>;
+            /**
+             * Emits on setting the storage bucket voucher limits.
+             * Params
+             * - storage bucket ID
+             * - new total objects size limit
+             * - new total objects number limit
+             **/
+            StorageBucketVoucherLimitsSet: AugmentedEvent<ApiType, [u64, u64, u64]>;
+            /**
+             * Emits on setting the storage operator metadata.
+             * Params
+             * - storage bucket ID
+             * - invited worker ID
+             * - metadata
+             **/
+            StorageOperatorMetadataSet: AugmentedEvent<ApiType, [u64, u64, Bytes]>;
+            /**
+             * Emits on Storage Operator making a remark
+             * Params
+             * - operator's worker id
+             * - storage bucket id
+             * - remark message
+             **/
+            StorageOperatorRemarked: AugmentedEvent<ApiType, [u64, u64, Bytes]>;
+            /**
+             * Emits on updating the blacklist with data hashes.
+             * Params
+             * - hashes to remove from the blacklist
+             * - hashes to add to the blacklist
+             **/
+            UpdateBlacklist: AugmentedEvent<ApiType, [BTreeSet<Bytes>, BTreeSet<Bytes>]>;
+            /**
+             * Emits on changing the size-based pricing of new objects uploaded.
+             * Params
+             * - new status
+             **/
+            UploadingBlockStatusUpdated: AugmentedEvent<ApiType, [bool]>;
+            /**
+             * Emits on changing the voucher for a storage bucket.
+             * Params
+             * - storage bucket ID
+             * - new voucher
+             **/
+            VoucherChanged: AugmentedEvent<ApiType, [u64, PalletStorageVoucher]>;
+        };
+        storageWorkingGroup: {
+            /**
+             * Emits on withdrawing the application for the regular worker/lead opening.
+             * Params:
+             * - Job application id
+             **/
+            ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on adding the application for the worker opening.
+             * Params:
+             * - Opening parameteres
+             * - Application id
+             **/
+            AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+            /**
+             * Emits on setting the budget for the working group.
+             * Params:
+             * - new budget
+             **/
+            BudgetSet: AugmentedEvent<ApiType, [u128]>;
+            /**
+             * Emits on budget from the working group being spent
+             * Params:
+             * - Receiver Account Id.
+             * - Balance spent.
+             * - Rationale.
+             **/
+            BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Emits on setting the group leader.
+             * Params:
+             * - Group worker id.
+             **/
+            LeaderSet: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on un-setting the leader.
+             **/
+            LeaderUnset: AugmentedEvent<ApiType, []>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - message
+             **/
+            LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+            /**
+             * Emits on reaching new missed reward.
+             * Params:
+             * - Worker ID.
+             * - Missed reward (optional). None means 'no missed reward'.
+             **/
+            NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on adding new job opening.
+             * Params:
+             * - Opening id
+             * - Description
+             * - Opening Type(Lead or Worker)
+             * - Stake Policy for the opening
+             * - Reward per block
+             **/
+            OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Emits on canceling the job opening.
+             * Params:
+             * - Opening id
+             **/
+            OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on filling the job opening.
+             * Params:
+             * - Worker opening id
+             * - Worker application id to the worker id dictionary
+             * - Applicationd ids used to fill the opening
+             **/
+            OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+            /**
+             * Emits on paying the reward.
+             * Params:
+             * - Id of the worker.
+             * - Receiver Account Id.
+             * - Reward
+             * - Payment type (missed reward or regular one)
+             **/
+            RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+            /**
+             * Emits on decreasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on increasing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - stake delta amount
+             **/
+            StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+            /**
+             * Emits on slashing the regular worker/lead stake.
+             * Params:
+             * - regular worker/lead id.
+             * - actual slashed balance.
+             * - Requested slashed balance.
+             * - Rationale.
+             **/
+            StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+            /**
+             * Emits on updating the status text of the working group.
+             * Params:
+             * - status text hash
+             * - status text
+             **/
+            StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+            /**
+             * Emits on terminating the leader.
+             * Params:
+             * - leader worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on terminating the worker.
+             * Params:
+             * - worker id.
+             * - Penalty.
+             * - Rationale.
+             **/
+            TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Emits on exiting the worker.
+             * Params:
+             * - worker id.
+             * - Rationale.
+             **/
+            WorkerExited: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Emits on Lead making a remark message
+             * Params:
+             * - worker
+             * - message
+             **/
+            WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            /**
+             * Emits on updating the reward account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward account id of the worker.
+             **/
+            WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits on updating the reward amount of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Reward per block
+             **/
+            WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+            /**
+             * Emits on updating the role account of the worker.
+             * Params:
+             * - Id of the worker.
+             * - Role account id of the worker.
+             **/
+            WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+            /**
+             * Emits when worker started leaving their role.
+             * Params:
+             * - Worker id.
+             * - Rationale.
+             **/
+            WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+            /**
+             * Fund the working group budget.
+             * Params:
+             * - Member ID
+             * - Amount of balance
+             * - Rationale
+             **/
+            WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+        };
+        system: {
+            /**
+             * `:code` was updated.
+             **/
+            CodeUpdated: AugmentedEvent<ApiType, []>;
+            /**
+             * An extrinsic failed.
+             **/
+            ExtrinsicFailed: AugmentedEvent<ApiType, [dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportWeightsDispatchInfo], {
+                dispatchError: SpRuntimeDispatchError;
+                dispatchInfo: FrameSupportWeightsDispatchInfo;
+            }>;
+            /**
+             * An extrinsic completed successfully.
+             **/
+            ExtrinsicSuccess: AugmentedEvent<ApiType, [dispatchInfo: FrameSupportWeightsDispatchInfo], {
+                dispatchInfo: FrameSupportWeightsDispatchInfo;
+            }>;
+            /**
+             * An account was reaped.
+             **/
+            KilledAccount: AugmentedEvent<ApiType, [account: AccountId32], {
+                account: AccountId32;
+            }>;
+            /**
+             * A new account was created.
+             **/
+            NewAccount: AugmentedEvent<ApiType, [account: AccountId32], {
+                account: AccountId32;
+            }>;
+            /**
+             * On on-chain remark happened.
+             **/
+            Remarked: AugmentedEvent<ApiType, [sender: AccountId32, hash_: H256], {
+                sender: AccountId32;
+                hash_: H256;
+            }>;
+        };
+        utility: {
+            /**
+             * Batch of dispatches completed fully with no error.
+             **/
+            BatchCompleted: AugmentedEvent<ApiType, []>;
+            /**
+             * Batch of dispatches completed but has errors.
+             **/
+            BatchCompletedWithErrors: AugmentedEvent<ApiType, []>;
+            /**
+             * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
+             * well as the error.
+             **/
+            BatchInterrupted: AugmentedEvent<ApiType, [index: u32, error: SpRuntimeDispatchError], {
+                index: u32;
+                error: SpRuntimeDispatchError;
+            }>;
+            /**
+             * A call was dispatched.
+             **/
+            DispatchedAs: AugmentedEvent<ApiType, [result: Result<Null, SpRuntimeDispatchError>], {
+                result: Result<Null, SpRuntimeDispatchError>;
+            }>;
+            /**
+             * A single item within a Batch of dispatches has completed with no error.
+             **/
+            ItemCompleted: AugmentedEvent<ApiType, []>;
+            /**
+             * A single item within a Batch of dispatches has completed with error.
+             **/
+            ItemFailed: AugmentedEvent<ApiType, [error: SpRuntimeDispatchError], {
+                error: SpRuntimeDispatchError;
+            }>;
+        };
+        vesting: {
+            /**
+             * An \[account\] has become fully vested.
+             **/
+            VestingCompleted: AugmentedEvent<ApiType, [account: AccountId32], {
+                account: AccountId32;
+            }>;
+            /**
+             * The amount vested has been updated. This could indicate a change in funds available.
+             * The balance given is the amount which is left unvested (and thus locked).
+             **/
+            VestingUpdated: AugmentedEvent<ApiType, [account: AccountId32, unvested: u128], {
+                account: AccountId32;
+                unvested: u128;
+            }>;
+        };
+    }
+}
diff --git a/node_modules/@joystream/types/types/lib/augment/augment-api-query.d.ts b/node_modules/@joystream/types/types/lib/augment/augment-api-query.d.ts
new file mode 100644
index 0000000..e89ee70
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/augment-api-query.d.ts
@@ -0,0 +1,1590 @@
+import type { ApiTypes } from '@polkadot/api-base/types';
+import type { BTreeMap, Bytes, Null, Option, U8aFixed, Vec, WrapperKeepOpaque, WrapperOpaque, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
+import type { AnyNumber, ITuple } from '@polkadot/types-codec/types';
+import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportWeightsPerDispatchClassU64, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipUncleEntryItem, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyBountyActor, PalletBountyBountyRecord, PalletBountyContribution, PalletBountyEntryRecord, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletMultisigMultisig, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
+import type { Observable } from '@polkadot/types/types';
+declare module '@polkadot/api-base/types/storage' {
+    interface AugmentedQueries<ApiType extends ApiTypes> {
+        appWorkingGroup: {
+            /**
+             * Count of active workers.
+             **/
+            activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Maps identifier to worker application on opening.
+             **/
+            applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+            /**
+             * Budget for the working group.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Current group lead.
+             **/
+            currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+            /**
+             * Next identifier value for new worker application.
+             **/
+            nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier value for new job opening.
+             **/
+            nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier for a new worker.
+             **/
+            nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Maps identifier to job opening.
+             **/
+            openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+            /**
+             * Status text hash.
+             **/
+            statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * Maps identifier to corresponding worker.
+             **/
+            workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+        };
+        authorityDiscovery: {
+            /**
+             * Keys of the current authority set.
+             **/
+            keys: AugmentedQuery<ApiType, () => Observable<Vec<SpAuthorityDiscoveryAppPublic>>, []>;
+            /**
+             * Keys of the next authority set.
+             **/
+            nextKeys: AugmentedQuery<ApiType, () => Observable<Vec<SpAuthorityDiscoveryAppPublic>>, []>;
+        };
+        authorship: {
+            /**
+             * Author of current block.
+             **/
+            author: AugmentedQuery<ApiType, () => Observable<Option<AccountId32>>, []>;
+            /**
+             * Whether uncles were already set in this block.
+             **/
+            didSetUncles: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+            /**
+             * Uncles
+             **/
+            uncles: AugmentedQuery<ApiType, () => Observable<Vec<PalletAuthorshipUncleEntryItem>>, []>;
+        };
+        babe: {
+            /**
+             * Current epoch authorities.
+             **/
+            authorities: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[SpConsensusBabeAppPublic, u64]>>>, []>;
+            /**
+             * This field should always be populated during block processing unless
+             * secondary plain slots are enabled (which don't contain a VRF output).
+             *
+             * It is set in `on_finalize`, before it will contain the value from the last block.
+             **/
+            authorVrfRandomness: AugmentedQuery<ApiType, () => Observable<Option<U8aFixed>>, []>;
+            /**
+             * Current slot number.
+             **/
+            currentSlot: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * The configuration for the current epoch. Should never be `None` as it is initialized in
+             * genesis.
+             **/
+            epochConfig: AugmentedQuery<ApiType, () => Observable<Option<SpConsensusBabeBabeEpochConfiguration>>, []>;
+            /**
+             * Current epoch index.
+             **/
+            epochIndex: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * The block numbers when the last and current epoch have started, respectively `N-1` and
+             * `N`.
+             * NOTE: We track this is in order to annotate the block number when a given pool of
+             * entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in
+             * slots, which may be skipped, the block numbers may not line up with the slot numbers.
+             **/
+            epochStart: AugmentedQuery<ApiType, () => Observable<ITuple<[u32, u32]>>, []>;
+            /**
+             * The slot at which the first epoch actually started. This is 0
+             * until the first block of the chain.
+             **/
+            genesisSlot: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Temporary value (cleared at block finalization) which is `Some`
+             * if per-block initialization has already been called for current block.
+             **/
+            initialized: AugmentedQuery<ApiType, () => Observable<Option<Option<SpConsensusBabeDigestsPreDigest>>>, []>;
+            /**
+             * How late the current block is compared to its parent.
+             *
+             * This entry is populated as part of block execution and is cleaned up
+             * on block finalization. Querying this storage entry outside of block
+             * execution context should always yield zero.
+             **/
+            lateness: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Next epoch authorities.
+             **/
+            nextAuthorities: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[SpConsensusBabeAppPublic, u64]>>>, []>;
+            /**
+             * The configuration for the next epoch, `None` if the config will not change
+             * (you can fallback to `EpochConfig` instead in that case).
+             **/
+            nextEpochConfig: AugmentedQuery<ApiType, () => Observable<Option<SpConsensusBabeBabeEpochConfiguration>>, []>;
+            /**
+             * Next epoch randomness.
+             **/
+            nextRandomness: AugmentedQuery<ApiType, () => Observable<U8aFixed>, []>;
+            /**
+             * Pending epoch configuration change that will be applied when the next epoch is enacted.
+             **/
+            pendingEpochConfigChange: AugmentedQuery<ApiType, () => Observable<Option<SpConsensusBabeDigestsNextConfigDescriptor>>, []>;
+            /**
+             * The epoch randomness for the *current* epoch.
+             *
+             * # Security
+             *
+             * This MUST NOT be used for gambling, as it can be influenced by a
+             * malicious validator in the short term. It MAY be used in many
+             * cryptographic protocols, however, so long as one remembers that this
+             * (like everything else on-chain) it is public. For example, it can be
+             * used where a number is needed that cannot have been chosen by an
+             * adversary, for purposes such as public-coin zero-knowledge proofs.
+             **/
+            randomness: AugmentedQuery<ApiType, () => Observable<U8aFixed>, []>;
+            /**
+             * Randomness under construction.
+             *
+             * We make a trade-off between storage accesses and list length.
+             * We store the under-construction randomness in segments of up to
+             * `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
+             *
+             * Once a segment reaches this length, we begin the next one.
+             * We reset all segments and return to `0` at the beginning of every
+             * epoch.
+             **/
+            segmentIndex: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
+             **/
+            underConstruction: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Vec<U8aFixed>>, [u32]>;
+        };
+        bagsList: {
+            /**
+             * Counter for the related counted storage map
+             **/
+            counterForListNodes: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * A bag stored in storage.
+             *
+             * Stores a `Bag` struct, which stores head and tail pointers to itself.
+             **/
+            listBags: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletBagsListListBag>>, [u64]>;
+            /**
+             * A single node, within some bag.
+             *
+             * Nodes store links forward and back within their respective bags.
+             **/
+            listNodes: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletBagsListListNode>>, [AccountId32]>;
+        };
+        balances: {
+            /**
+             * The Balances pallet example of storing the balance of an account.
+             *
+             * # Example
+             *
+             * ```nocompile
+             * impl pallet_balances::Config for Runtime {
+             * type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
+             * }
+             * ```
+             *
+             * You can also store the balance of an account in the `System` pallet.
+             *
+             * # Example
+             *
+             * ```nocompile
+             * impl pallet_balances::Config for Runtime {
+             * type AccountStore = System
+             * }
+             * ```
+             *
+             * But this comes with tradeoffs, storing account balances in the system pallet stores
+             * `frame_system` data alongside the account data contrary to storing account balances in the
+             * `Balances` pallet, which uses a `StorageMap` to store balances data only.
+             * NOTE: This is only used in the case that this pallet is used to store balances.
+             **/
+            account: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletBalancesAccountData>, [AccountId32]>;
+            /**
+             * Any liquidity locks on some account balances.
+             * NOTE: Should only be accessed when setting, changing and freeing a lock.
+             **/
+            locks: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Vec<PalletBalancesBalanceLock>>, [AccountId32]>;
+            /**
+             * Named reserves on some account balances.
+             **/
+            reserves: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Vec<PalletBalancesReserveData>>, [AccountId32]>;
+            /**
+             * Storage version of the pallet.
+             *
+             * This is set to v2.0.0 for new networks.
+             **/
+            storageVersion: AugmentedQuery<ApiType, () => Observable<PalletBalancesReleases>, []>;
+            /**
+             * The total units issued in the system.
+             **/
+            totalIssuance: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+        };
+        bounty: {
+            /**
+             * Bounty storage.
+             **/
+            bounties: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletBountyBountyRecord>, [u64]>;
+            /**
+             * Double map for bounty funding. It stores a member or council funding for bounties.
+             **/
+            bountyContributions: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array) => Observable<PalletBountyContribution>, [u64, PalletBountyBountyActor]>;
+            /**
+             * Count of all bounties that have been created.
+             **/
+            bountyCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Work entry storage map.
+             **/
+            entries: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletBountyEntryRecord>>, [u64, u64]>;
+            /**
+             * Count of all work entries that have been created.
+             **/
+            entryCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+        };
+        constitution: {
+            constitution: AugmentedQuery<ApiType, () => Observable<PalletConstitutionConstitutionInfo>, []>;
+        };
+        content: {
+            /**
+             * Max delta between current block and starts at
+             **/
+            auctionStartsAtMaxDelta: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            channelById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletContentChannelRecord>, [u64]>;
+            channelCashoutsEnabled: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+            /**
+             * The state bloat bond for the channel (helps preventing the state bloat).
+             **/
+            channelStateBloatBondValue: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            commitment: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            curatorGroupById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletContentPermissionsCuratorGroupCuratorGroupRecord>, [u64]>;
+            /**
+             * Global daily NFT counter.
+             **/
+            globalDailyNftCounter: AugmentedQuery<ApiType, () => Observable<PalletContentNftCounter>, []>;
+            /**
+             * Global daily NFT limit.
+             **/
+            globalDailyNftLimit: AugmentedQuery<ApiType, () => Observable<PalletContentLimitPerPeriod>, []>;
+            /**
+             * Global weekly NFT counter.
+             **/
+            globalWeeklyNftCounter: AugmentedQuery<ApiType, () => Observable<PalletContentNftCounter>, []>;
+            /**
+             * Global weekly NFT limit.
+             **/
+            globalWeeklyNftLimit: AugmentedQuery<ApiType, () => Observable<PalletContentLimitPerPeriod>, []>;
+            /**
+             * Max auction duration
+             **/
+            maxAuctionDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Max auction extension period
+             **/
+            maxAuctionExtensionPeriod: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Max bid lock duration
+             **/
+            maxBidLockDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Max auction bid step
+             **/
+            maxBidStep: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            maxCashoutAllowed: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Max creator royalty percentage
+             **/
+            maxCreatorRoyalty: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+            /**
+             * Max auction staring price
+             **/
+            maxStartingPrice: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Min auction duration
+             **/
+            minAuctionDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Min auction extension period
+             **/
+            minAuctionExtensionPeriod: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Min bid lock duration
+             **/
+            minBidLockDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Min auction bid step
+             **/
+            minBidStep: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            minCashoutAllowed: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Min creator royalty percentage
+             **/
+            minCreatorRoyalty: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+            /**
+             * Min auction staring price
+             **/
+            minStartingPrice: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            nextChannelId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            nextCuratorGroupId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            nextTransferId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            nextVideoId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * NFT limits enabled or not
+             * Can be updated in flight by the Council
+             **/
+            nftLimitsEnabled: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+            /**
+             * Bids for open auctions
+             **/
+            openAuctionBidByVideoAndMember: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletContentNftTypesOpenAuctionBidRecord>, [u64, u64]>;
+            /**
+             * Platform fee percentage
+             **/
+            platfromFeePercentage: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+            videoById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletContentVideoRecord>, [u64]>;
+            /**
+             * The state bloat bond for the video (helps preventing the state bloat).
+             **/
+            videoStateBloatBondValue: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+        };
+        contentWorkingGroup: {
+            /**
+             * Count of active workers.
+             **/
+            activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Maps identifier to worker application on opening.
+             **/
+            applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+            /**
+             * Budget for the working group.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Current group lead.
+             **/
+            currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+            /**
+             * Next identifier value for new worker application.
+             **/
+            nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier value for new job opening.
+             **/
+            nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier for a new worker.
+             **/
+            nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Maps identifier to job opening.
+             **/
+            openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+            /**
+             * Status text hash.
+             **/
+            statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * Maps identifier to corresponding worker.
+             **/
+            workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+        };
+        council: {
+            /**
+             * Index of the current candidacy period. It is incremented everytime announcement period
+             * starts.
+             **/
+            announcementPeriodNr: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Budget for the council's elected members rewards.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Amount of balance to be refilled every budget period
+             **/
+            budgetIncrement: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Map of all candidates that ever candidated and haven't unstake yet.
+             **/
+            candidates: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletCouncilCandidate>>, [u64]>;
+            /**
+             * Current council members
+             **/
+            councilMembers: AugmentedQuery<ApiType, () => Observable<Vec<PalletCouncilCouncilMember>>, []>;
+            /**
+             * Councilor reward per block
+             **/
+            councilorReward: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * The next block in which the budget will be increased.
+             **/
+            nextBudgetRefill: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * The next block in which the elected council member rewards will be payed.
+             **/
+            nextRewardPayments: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Current council voting stage
+             **/
+            stage: AugmentedQuery<ApiType, () => Observable<PalletCouncilCouncilStageUpdate>, []>;
+        };
+        distributionWorkingGroup: {
+            /**
+             * Count of active workers.
+             **/
+            activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Maps identifier to worker application on opening.
+             **/
+            applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+            /**
+             * Budget for the working group.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Current group lead.
+             **/
+            currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+            /**
+             * Next identifier value for new worker application.
+             **/
+            nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier value for new job opening.
+             **/
+            nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier for a new worker.
+             **/
+            nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Maps identifier to job opening.
+             **/
+            openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+            /**
+             * Status text hash.
+             **/
+            statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * Maps identifier to corresponding worker.
+             **/
+            workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+        };
+        electionProviderMultiPhase: {
+            /**
+             * Current phase.
+             **/
+            currentPhase: AugmentedQuery<ApiType, () => Observable<PalletElectionProviderMultiPhasePhase>, []>;
+            /**
+             * Desired number of targets to elect for this round.
+             *
+             * Only exists when [`Snapshot`] is present.
+             **/
+            desiredTargets: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+            /**
+             * The minimum score that each 'untrusted' solution must attain in order to be considered
+             * feasible.
+             *
+             * Can be set via `set_minimum_untrusted_score`.
+             **/
+            minimumUntrustedScore: AugmentedQuery<ApiType, () => Observable<Option<SpNposElectionsElectionScore>>, []>;
+            /**
+             * Current best solution, signed or unsigned, queued to be returned upon `elect`.
+             **/
+            queuedSolution: AugmentedQuery<ApiType, () => Observable<Option<PalletElectionProviderMultiPhaseReadySolution>>, []>;
+            /**
+             * Internal counter for the number of rounds.
+             *
+             * This is useful for de-duplication of transactions submitted to the pool, and general
+             * diagnostics of the pallet.
+             *
+             * This is merely incremented once per every time that an upstream `elect` is called.
+             **/
+            round: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * A sorted, bounded set of `(score, index)`, where each `index` points to a value in
+             * `SignedSubmissions`.
+             *
+             * We never need to process more than a single signed submission at a time. Signed submissions
+             * can be quite large, so we're willing to pay the cost of multiple database accesses to access
+             * them one at a time instead of reading and decoding all of them at once.
+             **/
+            signedSubmissionIndices: AugmentedQuery<ApiType, () => Observable<BTreeMap<SpNposElectionsElectionScore, u32>>, []>;
+            /**
+             * The next index to be assigned to an incoming signed submission.
+             *
+             * Every accepted submission is assigned a unique index; that index is bound to that particular
+             * submission for the duration of the election. On election finalization, the next index is
+             * reset to 0.
+             *
+             * We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its
+             * capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,
+             * because iteration is slow. Instead, we store the value here.
+             **/
+            signedSubmissionNextIndex: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Unchecked, signed solutions.
+             *
+             * Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
+             * allowing us to keep only a single one in memory at a time.
+             *
+             * Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
+             * affect; we shouldn't need a cryptographically secure hasher.
+             **/
+            signedSubmissionsMap: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Option<PalletElectionProviderMultiPhaseSignedSignedSubmission>>, [u32]>;
+            /**
+             * Snapshot data of the round.
+             *
+             * This is created at the beginning of the signed phase and cleared upon calling `elect`.
+             **/
+            snapshot: AugmentedQuery<ApiType, () => Observable<Option<PalletElectionProviderMultiPhaseRoundSnapshot>>, []>;
+            /**
+             * The metadata of the [`RoundSnapshot`]
+             *
+             * Only exists when [`Snapshot`] is present.
+             **/
+            snapshotMetadata: AugmentedQuery<ApiType, () => Observable<Option<PalletElectionProviderMultiPhaseSolutionOrSnapshotSize>>, []>;
+        };
+        forum: {
+            /**
+             * Map category identifier to corresponding category.
+             **/
+            categoryById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletForumCategory>, [u64]>;
+            /**
+             * Moderator set for each Category
+             **/
+            categoryByModerator: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<Null>, [u64, u64]>;
+            /**
+             * Counter for all existing categories.
+             **/
+            categoryCounter: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Category identifier value to be used for the next Category created.
+             **/
+            nextCategoryId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Post identifier value to be used for for next post created.
+             **/
+            nextPostId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Thread identifier value to be used for next Thread in threadById.
+             **/
+            nextThreadId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Map post identifier to corresponding post.
+             **/
+            postById: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletForumPost>, [u64, u64]>;
+            /**
+             * Map thread identifier to corresponding thread.
+             **/
+            threadById: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletForumThread>, [u64, u64]>;
+        };
+        forumWorkingGroup: {
+            /**
+             * Count of active workers.
+             **/
+            activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Maps identifier to worker application on opening.
+             **/
+            applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+            /**
+             * Budget for the working group.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Current group lead.
+             **/
+            currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+            /**
+             * Next identifier value for new worker application.
+             **/
+            nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier value for new job opening.
+             **/
+            nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier for a new worker.
+             **/
+            nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Maps identifier to job opening.
+             **/
+            openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+            /**
+             * Status text hash.
+             **/
+            statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * Maps identifier to corresponding worker.
+             **/
+            workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+        };
+        grandpa: {
+            /**
+             * The number of changes (both in terms of keys and underlying economic responsibilities)
+             * in the "set" of Grandpa validators from genesis.
+             **/
+            currentSetId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * next block number where we can force a change.
+             **/
+            nextForced: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+            /**
+             * Pending change: (signaled at, scheduled change).
+             **/
+            pendingChange: AugmentedQuery<ApiType, () => Observable<Option<PalletGrandpaStoredPendingChange>>, []>;
+            /**
+             * A mapping from grandpa set ID to the index of the *most recent* session for which its
+             * members were responsible.
+             *
+             * TWOX-NOTE: `SetId` is not under user control.
+             **/
+            setIdSession: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<u32>>, [u64]>;
+            /**
+             * `true` if we are currently stalled.
+             **/
+            stalled: AugmentedQuery<ApiType, () => Observable<Option<ITuple<[u32, u32]>>>, []>;
+            /**
+             * State of the current authority set.
+             **/
+            state: AugmentedQuery<ApiType, () => Observable<PalletGrandpaStoredState>, []>;
+        };
+        historical: {
+            /**
+             * Mapping from historical session indices to session-data root hash and validator count.
+             **/
+            historicalSessions: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Option<ITuple<[H256, u32]>>>, [u32]>;
+            /**
+             * The range of historical sessions we store. [first, last)
+             **/
+            storedRange: AugmentedQuery<ApiType, () => Observable<Option<ITuple<[u32, u32]>>>, []>;
+        };
+        imOnline: {
+            /**
+             * For each session index, we keep a mapping of `ValidatorId<T>` to the
+             * number of blocks authored by the given authority.
+             **/
+            authoredBlocks: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<u32>, [u32, AccountId32]>;
+            /**
+             * The block number after which it's ok to send heartbeats in the current
+             * session.
+             *
+             * At the beginning of each session we set this to a value that should fall
+             * roughly in the middle of the session duration. The idea is to first wait for
+             * the validators to produce a block in the current session, so that the
+             * heartbeat later on will not be necessary.
+             *
+             * This value will only be used as a fallback if we fail to get a proper session
+             * progress estimate from `NextSessionRotation`, as those estimates should be
+             * more accurate then the value we calculate for `HeartbeatAfter`.
+             **/
+            heartbeatAfter: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * The current set of keys that may issue a heartbeat.
+             **/
+            keys: AugmentedQuery<ApiType, () => Observable<Vec<PalletImOnlineSr25519AppSr25519Public>>, []>;
+            /**
+             * For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to
+             * `WrapperOpaque<BoundedOpaqueNetworkState>`.
+             **/
+            receivedHeartbeats: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: u32 | AnyNumber | Uint8Array) => Observable<Option<WrapperOpaque<PalletImOnlineBoundedOpaqueNetworkState>>>, [u32, u32]>;
+        };
+        joystreamUtility: {};
+        members: {
+            /**
+             * Initial invitation balance for the invited member.
+             **/
+            initialInvitationBalance: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Initial invitation count for the newly bought membership.
+             **/
+            initialInvitationCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Registered unique handles hash and their mapping to their owner.
+             **/
+            memberIdByHandleHash: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<u64>, [H256]>;
+            /**
+             * Mapping of member's id to their membership profile.
+             **/
+            membershipById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletMembershipMembershipObject>>, [u64]>;
+            /**
+             * Current membership price.
+             **/
+            membershipPrice: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * MemberId to assign to next member that is added to the registry, and is also the
+             * total number of members created. MemberIds start at Zero.
+             **/
+            nextMemberId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Referral cut percent of the membership fee to receive on buying the membership.
+             **/
+            referralCut: AugmentedQuery<ApiType, () => Observable<u8>, []>;
+            /**
+             * Double of a staking account id and member id to the confirmation status.
+             **/
+            stakingAccountIdMemberStatus: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletMembershipStakingAccountMemberBinding>, [AccountId32]>;
+        };
+        membershipWorkingGroup: {
+            /**
+             * Count of active workers.
+             **/
+            activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Maps identifier to worker application on opening.
+             **/
+            applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+            /**
+             * Budget for the working group.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Current group lead.
+             **/
+            currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+            /**
+             * Next identifier value for new worker application.
+             **/
+            nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier value for new job opening.
+             **/
+            nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier for a new worker.
+             **/
+            nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Maps identifier to job opening.
+             **/
+            openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+            /**
+             * Status text hash.
+             **/
+            statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * Maps identifier to corresponding worker.
+             **/
+            workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+        };
+        multisig: {
+            calls: AugmentedQuery<ApiType, (arg: U8aFixed | string | Uint8Array) => Observable<Option<ITuple<[WrapperKeepOpaque<Call>, AccountId32, u128]>>>, [U8aFixed]>;
+            /**
+             * The set of open multisig operations.
+             **/
+            multisigs: AugmentedQuery<ApiType, (arg1: AccountId32 | string | Uint8Array, arg2: U8aFixed | string | Uint8Array) => Observable<Option<PalletMultisigMultisig>>, [AccountId32, U8aFixed]>;
+        };
+        offences: {
+            /**
+             * A vector of reports of the same kind that happened at the same time slot.
+             **/
+            concurrentReportsIndex: AugmentedQuery<ApiType, (arg1: U8aFixed | string | Uint8Array, arg2: Bytes | string | Uint8Array) => Observable<Vec<H256>>, [U8aFixed, Bytes]>;
+            /**
+             * The primary structure that holds all offence records keyed by report identifiers.
+             **/
+            reports: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<Option<SpStakingOffenceOffenceDetails>>, [H256]>;
+            /**
+             * Enumerates all reports of a kind along with the time they happened.
+             *
+             * All reports are sorted by the time of offence.
+             *
+             * Note that the actual type of this mapping is `Vec<u8>`, this is because values of
+             * different types are not supported at the moment so we are doing the manual serialization.
+             **/
+            reportsByKindIndex: AugmentedQuery<ApiType, (arg: U8aFixed | string | Uint8Array) => Observable<Bytes>, [U8aFixed]>;
+        };
+        operationsWorkingGroupAlpha: {
+            /**
+             * Count of active workers.
+             **/
+            activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Maps identifier to worker application on opening.
+             **/
+            applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+            /**
+             * Budget for the working group.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Current group lead.
+             **/
+            currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+            /**
+             * Next identifier value for new worker application.
+             **/
+            nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier value for new job opening.
+             **/
+            nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier for a new worker.
+             **/
+            nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Maps identifier to job opening.
+             **/
+            openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+            /**
+             * Status text hash.
+             **/
+            statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * Maps identifier to corresponding worker.
+             **/
+            workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+        };
+        operationsWorkingGroupBeta: {
+            /**
+             * Count of active workers.
+             **/
+            activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Maps identifier to worker application on opening.
+             **/
+            applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+            /**
+             * Budget for the working group.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Current group lead.
+             **/
+            currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+            /**
+             * Next identifier value for new worker application.
+             **/
+            nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier value for new job opening.
+             **/
+            nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier for a new worker.
+             **/
+            nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Maps identifier to job opening.
+             **/
+            openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+            /**
+             * Status text hash.
+             **/
+            statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * Maps identifier to corresponding worker.
+             **/
+            workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+        };
+        operationsWorkingGroupGamma: {
+            /**
+             * Count of active workers.
+             **/
+            activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Maps identifier to worker application on opening.
+             **/
+            applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+            /**
+             * Budget for the working group.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Current group lead.
+             **/
+            currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+            /**
+             * Next identifier value for new worker application.
+             **/
+            nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier value for new job opening.
+             **/
+            nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier for a new worker.
+             **/
+            nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Maps identifier to job opening.
+             **/
+            openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+            /**
+             * Status text hash.
+             **/
+            statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * Maps identifier to corresponding worker.
+             **/
+            workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+        };
+        projectToken: {
+            /**
+             * Double map TokenId x MemberId => AccountData for managing account data
+             **/
+            accountInfoByTokenAndMember: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProjectTokenAccountData>, [u64, u64]>;
+            /**
+             * AMM buy transaction fee percentage
+             **/
+            ammBuyTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * Percentage threshold for deactivating the amm functionality
+             **/
+            ammDeactivationThreshold: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * AMM sell transaction fee percentage
+             **/
+            ammSellTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * Bloat Bond value used during account creation
+             **/
+            bloatBond: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Max patronage rate allowed
+             **/
+            maxYearlyPatronageRate: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * Minimum slope parameters allowed for AMM curve
+             **/
+            minAmmSlopeParameter: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Minimum revenue split duration constraint
+             **/
+            minRevenueSplitDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Minimum revenue split time to start constraint
+             **/
+            minRevenueSplitTimeToStart: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Minimum duration of a token sale
+             **/
+            minSaleDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Token Id nonce
+             **/
+            nextTokenId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Platform fee (percentage) charged on top of each sale purchase (in JOY) and burned
+             **/
+            salePlatformFee: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * Set for the tokens symbols
+             **/
+            symbolsUsed: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<Null>, [H256]>;
+            /**
+             * map TokenId => TokenData to retrieve token information
+             **/
+            tokenInfoById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletProjectTokenTokenData>, [u64]>;
+        };
+        proposalsCodex: {
+            /**
+             * Map proposal id to its discussion thread id
+             **/
+            threadIdByProposalId: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<u64>, [u32]>;
+        };
+        proposalsDiscussion: {
+            /**
+             * Count of all posts that have been created.
+             **/
+            postCount: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Map thread id and post id to corresponding post.
+             **/
+            postThreadIdByPostId: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProposalsDiscussionDiscussionPost>, [u64, u64]>;
+            /**
+             * Map thread identifier to corresponding thread.
+             **/
+            threadById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletProposalsDiscussionDiscussionThread>, [u64]>;
+            /**
+             * Count of all threads that have been created.
+             **/
+            threadCount: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+        };
+        proposalsEngine: {
+            /**
+             * Count of active proposals.
+             **/
+            activeProposalCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Map proposal executable code by proposal id.
+             **/
+            dispatchableCallCode: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Bytes>, [u32]>;
+            /**
+             * Count of all proposals that have been created.
+             **/
+            proposalCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Map proposal by its id.
+             **/
+            proposals: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<PalletProposalsEngineProposal>, [u32]>;
+            /**
+             * Double map for preventing duplicate votes. Should be cleaned after usage.
+             **/
+            voteExistsByProposalByVoter: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProposalsEngineVoteKind>, [u32, u64]>;
+        };
+        randomnessCollectiveFlip: {
+            /**
+             * Series of block headers from the last 81 blocks that acts as random seed material. This
+             * is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of
+             * the oldest hash.
+             **/
+            randomMaterial: AugmentedQuery<ApiType, () => Observable<Vec<H256>>, []>;
+        };
+        referendum: {
+            /**
+             * Accounts that permanently opted out of voting in referendum.
+             **/
+            accountsOptedOut: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Null>, [AccountId32]>;
+            /**
+             * Current referendum stage.
+             **/
+            stage: AugmentedQuery<ApiType, () => Observable<PalletReferendumReferendumStage>, []>;
+            /**
+             * Votes cast in the referendum. A new record is added to this map when a user casts a
+             * sealed vote.
+             * It is modified when a user reveals the vote's commitment proof.
+             * A record is finally removed when the user unstakes, which can happen during a voting
+             * stage or after the current cycle ends.
+             * A stake for a vote can be reused in future referendum cycles.
+             **/
+            votes: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletReferendumCastVote>, [AccountId32]>;
+        };
+        session: {
+            /**
+             * Current index of the session.
+             **/
+            currentIndex: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Indices of disabled validators.
+             *
+             * The vec is always kept sorted so that we can find whether a given validator is
+             * disabled using binary search. It gets cleared when `on_session_ending` returns
+             * a new set of identities.
+             **/
+            disabledValidators: AugmentedQuery<ApiType, () => Observable<Vec<u32>>, []>;
+            /**
+             * The owner of a key. The key is the `KeyTypeId` + the encoded key.
+             **/
+            keyOwner: AugmentedQuery<ApiType, (arg: ITuple<[SpCoreCryptoKeyTypeId, Bytes]> | [SpCoreCryptoKeyTypeId | string | Uint8Array, Bytes | string | Uint8Array]) => Observable<Option<AccountId32>>, [ITuple<[SpCoreCryptoKeyTypeId, Bytes]>]>;
+            /**
+             * The next session keys for a validator.
+             **/
+            nextKeys: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<JoystreamNodeRuntimeSessionKeys>>, [AccountId32]>;
+            /**
+             * True if the underlying economic identities or weighting behind the validators
+             * has changed in the queued validator set.
+             **/
+            queuedChanged: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+            /**
+             * The queued keys for the next session. When the next session begins, these keys
+             * will be used to determine the validator's session keys.
+             **/
+            queuedKeys: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[AccountId32, JoystreamNodeRuntimeSessionKeys]>>>, []>;
+            /**
+             * The current set of validators.
+             **/
+            validators: AugmentedQuery<ApiType, () => Observable<Vec<AccountId32>>, []>;
+        };
+        staking: {
+            /**
+             * The active era information, it holds index and start.
+             *
+             * The active era is the era being currently rewarded. Validator set of this era must be
+             * equal to [`SessionInterface::validators`].
+             **/
+            activeEra: AugmentedQuery<ApiType, () => Observable<Option<PalletStakingActiveEraInfo>>, []>;
+            /**
+             * Map from all locked "stash" accounts to the controller account.
+             **/
+            bonded: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<AccountId32>>, [AccountId32]>;
+            /**
+             * A mapping from still-bonded eras to the first session index of that era.
+             *
+             * Must contains information for eras for the range:
+             * `[active_era - bounding_duration; active_era]`
+             **/
+            bondedEras: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[u32, u32]>>>, []>;
+            /**
+             * The amount of currency given to reporters of a slash event which was
+             * canceled by extraordinary circumstances (e.g. governance).
+             **/
+            canceledSlashPayout: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * The threshold for when users can start calling `chill_other` for other validators /
+             * nominators. The threshold is compared to the actual number of validators / nominators
+             * (`CountFor*`) in the system compared to the configured max (`Max*Count`).
+             **/
+            chillThreshold: AugmentedQuery<ApiType, () => Observable<Option<Percent>>, []>;
+            /**
+             * Counter for the related counted storage map
+             **/
+            counterForNominators: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Counter for the related counted storage map
+             **/
+            counterForValidators: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * The current era index.
+             *
+             * This is the latest planned era, depending on how the Session pallet queues the validator
+             * set, it might be active or not.
+             **/
+            currentEra: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+            /**
+             * The last planned session scheduled by the session pallet.
+             *
+             * This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
+             **/
+            currentPlannedSession: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * The earliest era for which we have a pending, unapplied slash.
+             **/
+            earliestUnappliedSlash: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+            /**
+             * Rewards for the last `HISTORY_DEPTH` eras.
+             * If reward hasn't been set or has been removed then 0 reward is returned.
+             **/
+            erasRewardPoints: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<PalletStakingEraRewardPoints>, [u32]>;
+            /**
+             * Exposure of validator at era.
+             *
+             * This is keyed first by the era index to allow bulk deletion and then the stash account.
+             *
+             * Is it removed after `HISTORY_DEPTH` eras.
+             * If stakers hasn't been set or has been removed then empty exposure is returned.
+             **/
+            erasStakers: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<PalletStakingExposure>, [u32, AccountId32]>;
+            /**
+             * Clipped Exposure of validator at era.
+             *
+             * This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
+             * `T::MaxNominatorRewardedPerValidator` biggest stakers.
+             * (Note: the field `total` and `own` of the exposure remains unchanged).
+             * This is used to limit the i/o cost for the nominator payout.
+             *
+             * This is keyed fist by the era index to allow bulk deletion and then the stash account.
+             *
+             * Is it removed after `HISTORY_DEPTH` eras.
+             * If stakers hasn't been set or has been removed then empty exposure is returned.
+             **/
+            erasStakersClipped: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<PalletStakingExposure>, [u32, AccountId32]>;
+            /**
+             * The session index at which the era start for the last `HISTORY_DEPTH` eras.
+             *
+             * Note: This tracks the starting session (i.e. session index when era start being active)
+             * for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
+             **/
+            erasStartSessionIndex: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Option<u32>>, [u32]>;
+            /**
+             * The total amount staked for the last `HISTORY_DEPTH` eras.
+             * If total hasn't been set or has been removed then 0 stake is returned.
+             **/
+            erasTotalStake: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<u128>, [u32]>;
+            /**
+             * Similar to `ErasStakers`, this holds the preferences of validators.
+             *
+             * This is keyed first by the era index to allow bulk deletion and then the stash account.
+             *
+             * Is it removed after `HISTORY_DEPTH` eras.
+             **/
+            erasValidatorPrefs: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<PalletStakingValidatorPrefs>, [u32, AccountId32]>;
+            /**
+             * The total validator era payout for the last `HISTORY_DEPTH` eras.
+             *
+             * Eras that haven't finished yet or has been removed doesn't have reward.
+             **/
+            erasValidatorReward: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Option<u128>>, [u32]>;
+            /**
+             * Mode of era forcing.
+             **/
+            forceEra: AugmentedQuery<ApiType, () => Observable<PalletStakingForcing>, []>;
+            /**
+             * Number of eras to keep in history.
+             *
+             * Information is kept for eras in `[current_era - history_depth; current_era]`.
+             *
+             * Must be more than the number of eras delayed by session otherwise. I.e. active era must
+             * always be in history. I.e. `active_era > current_era - history_depth` must be
+             * guaranteed.
+             **/
+            historyDepth: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Any validators that may never be slashed or forcibly kicked. It's a Vec since they're
+             * easy to initialize and the performance hit is minimal (we expect no more than four
+             * invulnerables) and restricted to testnets.
+             **/
+            invulnerables: AugmentedQuery<ApiType, () => Observable<Vec<AccountId32>>, []>;
+            /**
+             * Map from all (unlocked) "controller" accounts to the info regarding the staking.
+             **/
+            ledger: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletStakingStakingLedger>>, [AccountId32]>;
+            /**
+             * The maximum nominator count before we stop allowing new validators to join.
+             *
+             * When this value is not set, no limits are enforced.
+             **/
+            maxNominatorsCount: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+            /**
+             * The maximum validator count before we stop allowing new validators to join.
+             *
+             * When this value is not set, no limits are enforced.
+             **/
+            maxValidatorsCount: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+            /**
+             * The minimum amount of commission that validators can set.
+             *
+             * If set to `0`, no limit exists.
+             **/
+            minCommission: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+            /**
+             * Minimum number of staking participants before emergency conditions are imposed.
+             **/
+            minimumValidatorCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * The minimum active bond to become and maintain the role of a nominator.
+             **/
+            minNominatorBond: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * The minimum active bond to become and maintain the role of a validator.
+             **/
+            minValidatorBond: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * The map from nominator stash key to their nomination preferences, namely the validators that
+             * they wish to support.
+             *
+             * Note that the keys of this storage map might become non-decodable in case the
+             * [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators
+             * are still existent in storage, their key is correct and retrievable (i.e. `contains_key`
+             * indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable
+             * nominators will effectively not-exist, until they re-submit their preferences such that it
+             * is within the bounds of the newly set `Config::MaxNominations`.
+             *
+             * This implies that `::iter_keys().count()` and `::iter().count()` might return different
+             * values for this map. Moreover, the main `::count()` is aligned with the former, namely the
+             * number of keys that exist.
+             *
+             * Lastly, if any of the nominators become non-decodable, they can be chilled immediately via
+             * [`Call::chill_other`] dispatchable by anyone.
+             **/
+            nominators: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletStakingNominations>>, [AccountId32]>;
+            /**
+             * All slashing events on nominators, mapped by era to the highest slash value of the era.
+             **/
+            nominatorSlashInEra: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<Option<u128>>, [u32, AccountId32]>;
+            /**
+             * Indices of validators that have offended in the active era and whether they are currently
+             * disabled.
+             *
+             * This value should be a superset of disabled validators since not all offences lead to the
+             * validator being disabled (if there was no slash). This is needed to track the percentage of
+             * validators that have offended in the current era, ensuring a new era is forced if
+             * `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find
+             * whether a given validator has previously offended using binary search. It gets cleared when
+             * the era ends.
+             **/
+            offendingValidators: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[u32, bool]>>>, []>;
+            /**
+             * Where the reward payment should be made. Keyed by stash.
+             **/
+            payee: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletStakingRewardDestination>, [AccountId32]>;
+            /**
+             * Slashing spans for stash accounts.
+             **/
+            slashingSpans: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletStakingSlashingSlashingSpans>>, [AccountId32]>;
+            /**
+             * The percentage of the slash that is distributed to reporters.
+             *
+             * The rest of the slashed value is handled by the `Slash`.
+             **/
+            slashRewardFraction: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+            /**
+             * Records information about the maximum slash of a stash within a slashing span,
+             * as well as how much reward has been paid out.
+             **/
+            spanSlash: AugmentedQuery<ApiType, (arg: ITuple<[AccountId32, u32]> | [AccountId32 | string | Uint8Array, u32 | AnyNumber | Uint8Array]) => Observable<PalletStakingSlashingSpanRecord>, [ITuple<[AccountId32, u32]>]>;
+            /**
+             * True if network has been upgraded to this version.
+             * Storage version of the pallet.
+             *
+             * This is set to v7.0.0 for new networks.
+             **/
+            storageVersion: AugmentedQuery<ApiType, () => Observable<PalletStakingReleases>, []>;
+            /**
+             * All unapplied slashes that are queued for later.
+             **/
+            unappliedSlashes: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Vec<PalletStakingUnappliedSlash>>, [u32]>;
+            /**
+             * The ideal number of staking participants.
+             **/
+            validatorCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * The map from (wannabe) validator stash key to the preferences of that validator.
+             **/
+            validators: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletStakingValidatorPrefs>, [AccountId32]>;
+            /**
+             * All slashing events on validators, mapped by era to the highest slash proportion
+             * and slash value of the era.
+             **/
+            validatorSlashInEra: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<Option<ITuple<[Perbill, u128]>>>, [u32, AccountId32]>;
+        };
+        storage: {
+            /**
+             * Bags storage map.
+             **/
+            bags: AugmentedQuery<ApiType, (arg: PalletStorageBagIdType | {
+                Static: any;
+            } | {
+                Dynamic: any;
+            } | string | Uint8Array) => Observable<PalletStorageBagRecord>, [PalletStorageBagIdType]>;
+            /**
+             * Blacklisted data object hashes.
+             **/
+            blacklist: AugmentedQuery<ApiType, (arg: Bytes | string | Uint8Array) => Observable<Null>, [Bytes]>;
+            /**
+             * Blacklist collection counter.
+             **/
+            currentBlacklistSize: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Size based pricing of new objects uploaded.
+             **/
+            dataObjectPerMegabyteFee: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * 'Data objects for bags' storage double map.
+             **/
+            dataObjectsById: AugmentedQuery<ApiType, (arg1: PalletStorageBagIdType | {
+                Static: any;
+            } | {
+                Dynamic: any;
+            } | string | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletStorageDataObject>, [PalletStorageBagIdType, u64]>;
+            /**
+             * The state bloat bond for the data objects (helps preventing the state bloat).
+             **/
+            dataObjectStateBloatBondValue: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * 'Distribution bucket' storage double map.
+             **/
+            distributionBucketByFamilyIdById: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletStorageDistributionBucketRecord>, [u64, u64]>;
+            /**
+             * Distribution bucket families.
+             **/
+            distributionBucketFamilyById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletStorageDistributionBucketFamilyRecord>, [u64]>;
+            /**
+             * Total number of distribution bucket families in the system.
+             **/
+            distributionBucketFamilyNumber: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * "Distribution buckets per bag" number limit.
+             **/
+            distributionBucketsPerBagLimit: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * DynamicBagCreationPolicy by bag type storage map.
+             **/
+            dynamicBagCreationPolicies: AugmentedQuery<ApiType, (arg: PalletStorageDynamicBagType | 'Member' | 'Channel' | number | Uint8Array) => Observable<PalletStorageDynamicBagCreationPolicy>, [PalletStorageDynamicBagType]>;
+            /**
+             * Data object id counter. Starts at zero.
+             **/
+            nextDataObjectId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Distribution bucket family id counter. Starts at zero.
+             **/
+            nextDistributionBucketFamilyId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Storage bucket id counter. Starts at zero.
+             **/
+            nextStorageBucketId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Storage buckets.
+             **/
+            storageBucketById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletStorageStorageBucketRecord>>, [u64]>;
+            /**
+             * "Storage buckets per bag" number limit.
+             **/
+            storageBucketsPerBagLimit: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Defines whether all new uploads blocked
+             **/
+            uploadingBlocked: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+            /**
+             * "Max objects number for a storage  bucket voucher" number limit.
+             **/
+            voucherMaxObjectsNumberLimit: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * "Max objects size for a storage bucket voucher" number limit.
+             **/
+            voucherMaxObjectsSizeLimit: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+        };
+        storageWorkingGroup: {
+            /**
+             * Count of active workers.
+             **/
+            activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Maps identifier to worker application on opening.
+             **/
+            applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+            /**
+             * Budget for the working group.
+             **/
+            budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            /**
+             * Current group lead.
+             **/
+            currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+            /**
+             * Next identifier value for new worker application.
+             **/
+            nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier value for new job opening.
+             **/
+            nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Next identifier for a new worker.
+             **/
+            nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+            /**
+             * Maps identifier to job opening.
+             **/
+            openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+            /**
+             * Status text hash.
+             **/
+            statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * Maps identifier to corresponding worker.
+             **/
+            workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+        };
+        system: {
+            /**
+             * The full account information for a particular account ID.
+             **/
+            account: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<FrameSystemAccountInfo>, [AccountId32]>;
+            /**
+             * Total length (in bytes) for all extrinsics put together, for the current block.
+             **/
+            allExtrinsicsLen: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+            /**
+             * Map of block numbers to block hashes.
+             **/
+            blockHash: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<H256>, [u32]>;
+            /**
+             * The current weight for the block.
+             **/
+            blockWeight: AugmentedQuery<ApiType, () => Observable<FrameSupportWeightsPerDispatchClassU64>, []>;
+            /**
+             * Digest of the current block, also part of the block header.
+             **/
+            digest: AugmentedQuery<ApiType, () => Observable<SpRuntimeDigest>, []>;
+            /**
+             * The number of events in the `Events<T>` list.
+             **/
+            eventCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Events deposited for the current block.
+             *
+             * NOTE: The item is unbound and should therefore never be read on chain.
+             * It could otherwise inflate the PoV size of a block.
+             *
+             * Events have a large in-memory size. Box the events to not go out-of-memory
+             * just in case someone still reads them from within the runtime.
+             **/
+            events: AugmentedQuery<ApiType, () => Observable<Vec<FrameSystemEventRecord>>, []>;
+            /**
+             * Mapping between a topic (represented by T::Hash) and a vector of indexes
+             * of events in the `<Events<T>>` list.
+             *
+             * All topic vectors have deterministic storage locations depending on the topic. This
+             * allows light-clients to leverage the changes trie storage tracking mechanism and
+             * in case of changes fetch the list of events of interest.
+             *
+             * The value has the type `(T::BlockNumber, EventIndex)` because if we used only just
+             * the `EventIndex` then in case if the topic has the same contents on the next block
+             * no notification will be triggered thus the event might be lost.
+             **/
+            eventTopics: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<Vec<ITuple<[u32, u32]>>>, [H256]>;
+            /**
+             * The execution phase of the block.
+             **/
+            executionPhase: AugmentedQuery<ApiType, () => Observable<Option<FrameSystemPhase>>, []>;
+            /**
+             * Total extrinsics count for the current block.
+             **/
+            extrinsicCount: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+            /**
+             * Extrinsics data for the current block (maps an extrinsic's index to its data).
+             **/
+            extrinsicData: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Bytes>, [u32]>;
+            /**
+             * Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.
+             **/
+            lastRuntimeUpgrade: AugmentedQuery<ApiType, () => Observable<Option<FrameSystemLastRuntimeUpgradeInfo>>, []>;
+            /**
+             * The current block number being processed. Set by `execute_block`.
+             **/
+            number: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Hash of the previous block.
+             **/
+            parentHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+            /**
+             * True if we have upgraded so that AccountInfo contains three types of `RefCount`. False
+             * (default) if not.
+             **/
+            upgradedToTripleRefCount: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+            /**
+             * True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.
+             **/
+            upgradedToU32RefCount: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+        };
+        timestamp: {
+            /**
+             * Did the timestamp get updated in this block?
+             **/
+            didUpdate: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+            /**
+             * Current time for the current block.
+             **/
+            now: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+        };
+        transactionPayment: {
+            nextFeeMultiplier: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+            storageVersion: AugmentedQuery<ApiType, () => Observable<PalletTransactionPaymentReleases>, []>;
+        };
+        vesting: {
+            /**
+             * Storage version of the pallet.
+             *
+             * New networks start with latest version, as determined by the genesis build.
+             **/
+            storageVersion: AugmentedQuery<ApiType, () => Observable<PalletVestingReleases>, []>;
+            /**
+             * Information regarding the vesting of a given account.
+             **/
+            vesting: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<Vec<PalletVestingVestingInfo>>>, [AccountId32]>;
+        };
+    }
+}
diff --git a/node_modules/@joystream/types/types/lib/augment/augment-api-rpc.d.ts b/node_modules/@joystream/types/types/lib/augment/augment-api-rpc.d.ts
new file mode 100644
index 0000000..8b95002
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/augment-api-rpc.d.ts
@@ -0,0 +1,645 @@
+import type { AugmentedRpc } from '@polkadot/rpc-core/types';
+import type { Metadata, StorageKey } from '@polkadot/types';
+import type { Bytes, HashMap, Json, Null, Option, Text, U256, U64, Vec, bool, u32, u64 } from '@polkadot/types-codec';
+import type { AnyNumber, Codec } from '@polkadot/types-codec/types';
+import type { ExtrinsicOrHash, ExtrinsicStatus } from '@polkadot/types/interfaces/author';
+import type { EpochAuthorship } from '@polkadot/types/interfaces/babe';
+import type { BeefySignedCommitment } from '@polkadot/types/interfaces/beefy';
+import type { BlockHash } from '@polkadot/types/interfaces/chain';
+import type { PrefixedStorageKey } from '@polkadot/types/interfaces/childstate';
+import type { AuthorityId } from '@polkadot/types/interfaces/consensus';
+import type { CodeUploadRequest, CodeUploadResult, ContractCallRequest, ContractExecResult, ContractInstantiateResult, InstantiateRequest } from '@polkadot/types/interfaces/contracts';
+import type { BlockStats } from '@polkadot/types/interfaces/dev';
+import type { CreatedBlock } from '@polkadot/types/interfaces/engine';
+import type { EthAccount, EthCallRequest, EthFilter, EthFilterChanges, EthLog, EthReceipt, EthRichBlock, EthSubKind, EthSubParams, EthSyncStatus, EthTransaction, EthTransactionRequest, EthWork } from '@polkadot/types/interfaces/eth';
+import type { Extrinsic } from '@polkadot/types/interfaces/extrinsics';
+import type { EncodedFinalityProofs, JustificationNotification, ReportedRoundStates } from '@polkadot/types/interfaces/grandpa';
+import type { MmrLeafBatchProof, MmrLeafProof } from '@polkadot/types/interfaces/mmr';
+import type { StorageKind } from '@polkadot/types/interfaces/offchain';
+import type { FeeDetails, RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment';
+import type { RpcMethods } from '@polkadot/types/interfaces/rpc';
+import type { AccountId, BlockNumber, H160, H256, H64, Hash, Header, Index, Justification, KeyValue, SignedBlock, StorageData } from '@polkadot/types/interfaces/runtime';
+import type { MigrationStatusResult, ReadProof, RuntimeVersion, TraceBlockResponse } from '@polkadot/types/interfaces/state';
+import type { ApplyExtrinsicResult, ChainProperties, ChainType, Health, NetworkState, NodeRole, PeerInfo, SyncState } from '@polkadot/types/interfaces/system';
+import type { IExtrinsic, Observable } from '@polkadot/types/types';
+declare module '@polkadot/rpc-core/types/jsonrpc' {
+    interface RpcInterface {
+        author: {
+            /**
+             * Returns true if the keystore has private keys for the given public key and key type.
+             **/
+            hasKey: AugmentedRpc<(publicKey: Bytes | string | Uint8Array, keyType: Text | string) => Observable<bool>>;
+            /**
+             * Returns true if the keystore has private keys for the given session public keys.
+             **/
+            hasSessionKeys: AugmentedRpc<(sessionKeys: Bytes | string | Uint8Array) => Observable<bool>>;
+            /**
+             * Insert a key into the keystore.
+             **/
+            insertKey: AugmentedRpc<(keyType: Text | string, suri: Text | string, publicKey: Bytes | string | Uint8Array) => Observable<Bytes>>;
+            /**
+             * Returns all pending extrinsics, potentially grouped by sender
+             **/
+            pendingExtrinsics: AugmentedRpc<() => Observable<Vec<Extrinsic>>>;
+            /**
+             * Remove given extrinsic from the pool and temporarily ban it to prevent reimporting
+             **/
+            removeExtrinsic: AugmentedRpc<(bytesOrHash: Vec<ExtrinsicOrHash> | (ExtrinsicOrHash | {
+                Hash: any;
+            } | {
+                Extrinsic: any;
+            } | string | Uint8Array)[]) => Observable<Vec<Hash>>>;
+            /**
+             * Generate new session keys and returns the corresponding public keys
+             **/
+            rotateKeys: AugmentedRpc<() => Observable<Bytes>>;
+            /**
+             * Submit and subscribe to watch an extrinsic until unsubscribed
+             **/
+            submitAndWatchExtrinsic: AugmentedRpc<(extrinsic: IExtrinsic) => Observable<ExtrinsicStatus>>;
+            /**
+             * Submit a fully formatted extrinsic for block inclusion
+             **/
+            submitExtrinsic: AugmentedRpc<(extrinsic: IExtrinsic) => Observable<Hash>>;
+        };
+        babe: {
+            /**
+             * Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore
+             **/
+            epochAuthorship: AugmentedRpc<() => Observable<HashMap<AuthorityId, EpochAuthorship>>>;
+        };
+        beefy: {
+            /**
+             * Returns hash of the latest BEEFY finalized block as seen by this client.
+             **/
+            getFinalizedHead: AugmentedRpc<() => Observable<H256>>;
+            /**
+             * Returns the block most recently finalized by BEEFY, alongside side its justification.
+             **/
+            subscribeJustifications: AugmentedRpc<() => Observable<BeefySignedCommitment>>;
+        };
+        chain: {
+            /**
+             * Get header and body of a relay chain block
+             **/
+            getBlock: AugmentedRpc<(hash?: BlockHash | string | Uint8Array) => Observable<SignedBlock>>;
+            /**
+             * Get the block hash for a specific block
+             **/
+            getBlockHash: AugmentedRpc<(blockNumber?: BlockNumber | AnyNumber | Uint8Array) => Observable<BlockHash>>;
+            /**
+             * Get hash of the last finalized block in the canon chain
+             **/
+            getFinalizedHead: AugmentedRpc<() => Observable<BlockHash>>;
+            /**
+             * Retrieves the header for a specific block
+             **/
+            getHeader: AugmentedRpc<(hash?: BlockHash | string | Uint8Array) => Observable<Header>>;
+            /**
+             * Retrieves the newest header via subscription
+             **/
+            subscribeAllHeads: AugmentedRpc<() => Observable<Header>>;
+            /**
+             * Retrieves the best finalized header via subscription
+             **/
+            subscribeFinalizedHeads: AugmentedRpc<() => Observable<Header>>;
+            /**
+             * Retrieves the best header via subscription
+             **/
+            subscribeNewHeads: AugmentedRpc<() => Observable<Header>>;
+        };
+        childstate: {
+            /**
+             * Returns the keys with prefix from a child storage, leave empty to get all the keys
+             **/
+            getKeys: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, prefix: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+            /**
+             * Returns the keys with prefix from a child storage with pagination support
+             **/
+            getKeysPaged: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, prefix: StorageKey | string | Uint8Array | any, count: u32 | AnyNumber | Uint8Array, startKey?: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+            /**
+             * Returns a child storage entry at a specific block state
+             **/
+            getStorage: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Option<StorageData>>>;
+            /**
+             * Returns child storage entries for multiple keys at a specific block state
+             **/
+            getStorageEntries: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], at?: Hash | string | Uint8Array) => Observable<Vec<Option<StorageData>>>>;
+            /**
+             * Returns the hash of a child storage entry at a block state
+             **/
+            getStorageHash: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Option<Hash>>>;
+            /**
+             * Returns the size of a child storage entry at a block state
+             **/
+            getStorageSize: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Option<u64>>>;
+        };
+        contracts: {
+            /**
+             * Executes a call to a contract
+             **/
+            call: AugmentedRpc<(callRequest: ContractCallRequest | {
+                origin?: any;
+                dest?: any;
+                value?: any;
+                gasLimit?: any;
+                storageDepositLimit?: any;
+                inputData?: any;
+            } | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<ContractExecResult>>;
+            /**
+             * Returns the value under a specified storage key in a contract
+             **/
+            getStorage: AugmentedRpc<(address: AccountId | string | Uint8Array, key: H256 | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<Option<Bytes>>>;
+            /**
+             * Instantiate a new contract
+             **/
+            instantiate: AugmentedRpc<(request: InstantiateRequest | {
+                origin?: any;
+                value?: any;
+                gasLimit?: any;
+                storageDepositLimit?: any;
+                code?: any;
+                data?: any;
+                salt?: any;
+            } | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<ContractInstantiateResult>>;
+            /**
+             * Returns the projected time a given contract will be able to sustain paying its rent
+             **/
+            rentProjection: AugmentedRpc<(address: AccountId | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<Option<BlockNumber>>>;
+            /**
+             * Upload new code without instantiating a contract from it
+             **/
+            uploadCode: AugmentedRpc<(uploadRequest: CodeUploadRequest | {
+                origin?: any;
+                code?: any;
+                storageDepositLimit?: any;
+            } | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<CodeUploadResult>>;
+        };
+        dev: {
+            /**
+             * Reexecute the specified `block_hash` and gather statistics while doing so
+             **/
+            getBlockStats: AugmentedRpc<(at: Hash | string | Uint8Array) => Observable<Option<BlockStats>>>;
+        };
+        engine: {
+            /**
+             * Instructs the manual-seal authorship task to create a new block
+             **/
+            createBlock: AugmentedRpc<(createEmpty: bool | boolean | Uint8Array, finalize: bool | boolean | Uint8Array, parentHash?: BlockHash | string | Uint8Array) => Observable<CreatedBlock>>;
+            /**
+             * Instructs the manual-seal authorship task to finalize a block
+             **/
+            finalizeBlock: AugmentedRpc<(hash: BlockHash | string | Uint8Array, justification?: Justification) => Observable<bool>>;
+        };
+        eth: {
+            /**
+             * Returns accounts list.
+             **/
+            accounts: AugmentedRpc<() => Observable<Vec<H160>>>;
+            /**
+             * Returns the blockNumber
+             **/
+            blockNumber: AugmentedRpc<() => Observable<U256>>;
+            /**
+             * Call contract, returning the output data.
+             **/
+            call: AugmentedRpc<(request: EthCallRequest | {
+                from?: any;
+                to?: any;
+                gasPrice?: any;
+                gas?: any;
+                value?: any;
+                data?: any;
+                nonce?: any;
+            } | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<Bytes>>;
+            /**
+             * Returns the chain ID used for transaction signing at the current best block. None is returned if not available.
+             **/
+            chainId: AugmentedRpc<() => Observable<U64>>;
+            /**
+             * Returns block author.
+             **/
+            coinbase: AugmentedRpc<() => Observable<H160>>;
+            /**
+             * Estimate gas needed for execution of given contract.
+             **/
+            estimateGas: AugmentedRpc<(request: EthCallRequest | {
+                from?: any;
+                to?: any;
+                gasPrice?: any;
+                gas?: any;
+                value?: any;
+                data?: any;
+                nonce?: any;
+            } | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+            /**
+             * Returns current gas price.
+             **/
+            gasPrice: AugmentedRpc<() => Observable<U256>>;
+            /**
+             * Returns balance of the given account.
+             **/
+            getBalance: AugmentedRpc<(address: H160 | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+            /**
+             * Returns block with given hash.
+             **/
+            getBlockByHash: AugmentedRpc<(hash: H256 | string | Uint8Array, full: bool | boolean | Uint8Array) => Observable<Option<EthRichBlock>>>;
+            /**
+             * Returns block with given number.
+             **/
+            getBlockByNumber: AugmentedRpc<(block: BlockNumber | AnyNumber | Uint8Array, full: bool | boolean | Uint8Array) => Observable<Option<EthRichBlock>>>;
+            /**
+             * Returns the number of transactions in a block with given hash.
+             **/
+            getBlockTransactionCountByHash: AugmentedRpc<(hash: H256 | string | Uint8Array) => Observable<U256>>;
+            /**
+             * Returns the number of transactions in a block with given block number.
+             **/
+            getBlockTransactionCountByNumber: AugmentedRpc<(block: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+            /**
+             * Returns the code at given address at given time (block number).
+             **/
+            getCode: AugmentedRpc<(address: H160 | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<Bytes>>;
+            /**
+             * Returns filter changes since last poll.
+             **/
+            getFilterChanges: AugmentedRpc<(index: U256 | AnyNumber | Uint8Array) => Observable<EthFilterChanges>>;
+            /**
+             * Returns all logs matching given filter (in a range 'from' - 'to').
+             **/
+            getFilterLogs: AugmentedRpc<(index: U256 | AnyNumber | Uint8Array) => Observable<Vec<EthLog>>>;
+            /**
+             * Returns logs matching given filter object.
+             **/
+            getLogs: AugmentedRpc<(filter: EthFilter | {
+                fromBlock?: any;
+                toBlock?: any;
+                blockHash?: any;
+                address?: any;
+                topics?: any;
+            } | string | Uint8Array) => Observable<Vec<EthLog>>>;
+            /**
+             * Returns proof for account and storage.
+             **/
+            getProof: AugmentedRpc<(address: H160 | string | Uint8Array, storageKeys: Vec<H256> | (H256 | string | Uint8Array)[], number: BlockNumber | AnyNumber | Uint8Array) => Observable<EthAccount>>;
+            /**
+             * Returns content of the storage at given address.
+             **/
+            getStorageAt: AugmentedRpc<(address: H160 | string | Uint8Array, index: U256 | AnyNumber | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<H256>>;
+            /**
+             * Returns transaction at given block hash and index.
+             **/
+            getTransactionByBlockHashAndIndex: AugmentedRpc<(hash: H256 | string | Uint8Array, index: U256 | AnyNumber | Uint8Array) => Observable<EthTransaction>>;
+            /**
+             * Returns transaction by given block number and index.
+             **/
+            getTransactionByBlockNumberAndIndex: AugmentedRpc<(number: BlockNumber | AnyNumber | Uint8Array, index: U256 | AnyNumber | Uint8Array) => Observable<EthTransaction>>;
+            /**
+             * Get transaction by its hash.
+             **/
+            getTransactionByHash: AugmentedRpc<(hash: H256 | string | Uint8Array) => Observable<EthTransaction>>;
+            /**
+             * Returns the number of transactions sent from given address at given time (block number).
+             **/
+            getTransactionCount: AugmentedRpc<(hash: H256 | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+            /**
+             * Returns transaction receipt by transaction hash.
+             **/
+            getTransactionReceipt: AugmentedRpc<(hash: H256 | string | Uint8Array) => Observable<EthReceipt>>;
+            /**
+             * Returns an uncles at given block and index.
+             **/
+            getUncleByBlockHashAndIndex: AugmentedRpc<(hash: H256 | string | Uint8Array, index: U256 | AnyNumber | Uint8Array) => Observable<EthRichBlock>>;
+            /**
+             * Returns an uncles at given block and index.
+             **/
+            getUncleByBlockNumberAndIndex: AugmentedRpc<(number: BlockNumber | AnyNumber | Uint8Array, index: U256 | AnyNumber | Uint8Array) => Observable<EthRichBlock>>;
+            /**
+             * Returns the number of uncles in a block with given hash.
+             **/
+            getUncleCountByBlockHash: AugmentedRpc<(hash: H256 | string | Uint8Array) => Observable<U256>>;
+            /**
+             * Returns the number of uncles in a block with given block number.
+             **/
+            getUncleCountByBlockNumber: AugmentedRpc<(number: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+            /**
+             * Returns the hash of the current block, the seedHash, and the boundary condition to be met.
+             **/
+            getWork: AugmentedRpc<() => Observable<EthWork>>;
+            /**
+             * Returns the number of hashes per second that the node is mining with.
+             **/
+            hashrate: AugmentedRpc<() => Observable<U256>>;
+            /**
+             * Returns true if client is actively mining new blocks.
+             **/
+            mining: AugmentedRpc<() => Observable<bool>>;
+            /**
+             * Returns id of new block filter.
+             **/
+            newBlockFilter: AugmentedRpc<() => Observable<U256>>;
+            /**
+             * Returns id of new filter.
+             **/
+            newFilter: AugmentedRpc<(filter: EthFilter | {
+                fromBlock?: any;
+                toBlock?: any;
+                blockHash?: any;
+                address?: any;
+                topics?: any;
+            } | string | Uint8Array) => Observable<U256>>;
+            /**
+             * Returns id of new block filter.
+             **/
+            newPendingTransactionFilter: AugmentedRpc<() => Observable<U256>>;
+            /**
+             * Returns protocol version encoded as a string (quotes are necessary).
+             **/
+            protocolVersion: AugmentedRpc<() => Observable<u64>>;
+            /**
+             * Sends signed transaction, returning its hash.
+             **/
+            sendRawTransaction: AugmentedRpc<(bytes: Bytes | string | Uint8Array) => Observable<H256>>;
+            /**
+             * Sends transaction; will block waiting for signer to return the transaction hash
+             **/
+            sendTransaction: AugmentedRpc<(tx: EthTransactionRequest | {
+                from?: any;
+                to?: any;
+                gasPrice?: any;
+                gas?: any;
+                value?: any;
+                data?: any;
+                nonce?: any;
+            } | string | Uint8Array) => Observable<H256>>;
+            /**
+             * Used for submitting mining hashrate.
+             **/
+            submitHashrate: AugmentedRpc<(index: U256 | AnyNumber | Uint8Array, hash: H256 | string | Uint8Array) => Observable<bool>>;
+            /**
+             * Used for submitting a proof-of-work solution.
+             **/
+            submitWork: AugmentedRpc<(nonce: H64 | string | Uint8Array, headerHash: H256 | string | Uint8Array, mixDigest: H256 | string | Uint8Array) => Observable<bool>>;
+            /**
+             * Subscribe to Eth subscription.
+             **/
+            subscribe: AugmentedRpc<(kind: EthSubKind | 'newHeads' | 'logs' | 'newPendingTransactions' | 'syncing' | number | Uint8Array, params?: EthSubParams | {
+                None: any;
+            } | {
+                Logs: any;
+            } | string | Uint8Array) => Observable<Null>>;
+            /**
+             * Returns an object with data about the sync status or false.
+             **/
+            syncing: AugmentedRpc<() => Observable<EthSyncStatus>>;
+            /**
+             * Uninstalls filter.
+             **/
+            uninstallFilter: AugmentedRpc<(index: U256 | AnyNumber | Uint8Array) => Observable<bool>>;
+        };
+        grandpa: {
+            /**
+             * Prove finality for the given block number, returning the Justification for the last block in the set.
+             **/
+            proveFinality: AugmentedRpc<(blockNumber: BlockNumber | AnyNumber | Uint8Array) => Observable<Option<EncodedFinalityProofs>>>;
+            /**
+             * Returns the state of the current best round state as well as the ongoing background rounds
+             **/
+            roundState: AugmentedRpc<() => Observable<ReportedRoundStates>>;
+            /**
+             * Subscribes to grandpa justifications
+             **/
+            subscribeJustifications: AugmentedRpc<() => Observable<JustificationNotification>>;
+        };
+        mmr: {
+            /**
+             * Generate MMR proof for the given leaf indices.
+             **/
+            generateBatchProof: AugmentedRpc<(leafIndices: Vec<u64> | (u64 | AnyNumber | Uint8Array)[], at?: BlockHash | string | Uint8Array) => Observable<MmrLeafProof>>;
+            /**
+             * Generate MMR proof for given leaf index.
+             **/
+            generateProof: AugmentedRpc<(leafIndex: u64 | AnyNumber | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<MmrLeafBatchProof>>;
+        };
+        net: {
+            /**
+             * Returns true if client is actively listening for network connections. Otherwise false.
+             **/
+            listening: AugmentedRpc<() => Observable<bool>>;
+            /**
+             * Returns number of peers connected to node.
+             **/
+            peerCount: AugmentedRpc<() => Observable<Text>>;
+            /**
+             * Returns protocol version.
+             **/
+            version: AugmentedRpc<() => Observable<Text>>;
+        };
+        offchain: {
+            /**
+             * Get offchain local storage under given key and prefix
+             **/
+            localStorageGet: AugmentedRpc<(kind: StorageKind | 'PERSISTENT' | 'LOCAL' | number | Uint8Array, key: Bytes | string | Uint8Array) => Observable<Option<Bytes>>>;
+            /**
+             * Set offchain local storage under given key and prefix
+             **/
+            localStorageSet: AugmentedRpc<(kind: StorageKind | 'PERSISTENT' | 'LOCAL' | number | Uint8Array, key: Bytes | string | Uint8Array, value: Bytes | string | Uint8Array) => Observable<Null>>;
+        };
+        payment: {
+            /**
+             * Query the detailed fee of a given encoded extrinsic
+             **/
+            queryFeeDetails: AugmentedRpc<(extrinsic: Bytes | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<FeeDetails>>;
+            /**
+             * Retrieves the fee information for an encoded extrinsic
+             **/
+            queryInfo: AugmentedRpc<(extrinsic: Bytes | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<RuntimeDispatchInfo>>;
+        };
+        rpc: {
+            /**
+             * Retrieves the list of RPC methods that are exposed by the node
+             **/
+            methods: AugmentedRpc<() => Observable<RpcMethods>>;
+        };
+        state: {
+            /**
+             * Perform a call to a builtin on the chain
+             **/
+            call: AugmentedRpc<(method: Text | string, data: Bytes | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<Bytes>>;
+            /**
+             * Retrieves the keys with prefix of a specific child storage
+             **/
+            getChildKeys: AugmentedRpc<(childStorageKey: StorageKey | string | Uint8Array | any, childDefinition: StorageKey | string | Uint8Array | any, childType: u32 | AnyNumber | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+            /**
+             * Returns proof of storage for child key entries at a specific block state.
+             **/
+            getChildReadProof: AugmentedRpc<(childStorageKey: PrefixedStorageKey | string | Uint8Array, keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], at?: BlockHash | string | Uint8Array) => Observable<ReadProof>>;
+            /**
+             * Retrieves the child storage for a key
+             **/
+            getChildStorage: AugmentedRpc<(childStorageKey: StorageKey | string | Uint8Array | any, childDefinition: StorageKey | string | Uint8Array | any, childType: u32 | AnyNumber | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<StorageData>>;
+            /**
+             * Retrieves the child storage hash
+             **/
+            getChildStorageHash: AugmentedRpc<(childStorageKey: StorageKey | string | Uint8Array | any, childDefinition: StorageKey | string | Uint8Array | any, childType: u32 | AnyNumber | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Hash>>;
+            /**
+             * Retrieves the child storage size
+             **/
+            getChildStorageSize: AugmentedRpc<(childStorageKey: StorageKey | string | Uint8Array | any, childDefinition: StorageKey | string | Uint8Array | any, childType: u32 | AnyNumber | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<u64>>;
+            /**
+             * Retrieves the keys with a certain prefix
+             **/
+            getKeys: AugmentedRpc<(key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+            /**
+             * Returns the keys with prefix with pagination support.
+             **/
+            getKeysPaged: AugmentedRpc<(key: StorageKey | string | Uint8Array | any, count: u32 | AnyNumber | Uint8Array, startKey?: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+            /**
+             * Returns the runtime metadata
+             **/
+            getMetadata: AugmentedRpc<(at?: BlockHash | string | Uint8Array) => Observable<Metadata>>;
+            /**
+             * Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)
+             **/
+            getPairs: AugmentedRpc<(prefix: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Vec<KeyValue>>>;
+            /**
+             * Returns proof of storage entries at a specific block state
+             **/
+            getReadProof: AugmentedRpc<(keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], at?: BlockHash | string | Uint8Array) => Observable<ReadProof>>;
+            /**
+             * Get the runtime version
+             **/
+            getRuntimeVersion: AugmentedRpc<(at?: BlockHash | string | Uint8Array) => Observable<RuntimeVersion>>;
+            /**
+             * Retrieves the storage for a key
+             **/
+            getStorage: AugmentedRpc<(<T = Codec>(key: StorageKey | string | Uint8Array | any, block?: Hash | Uint8Array | string) => Observable<T>)>;
+            /**
+             * Retrieves the storage hash
+             **/
+            getStorageHash: AugmentedRpc<(key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Hash>>;
+            /**
+             * Retrieves the storage size
+             **/
+            getStorageSize: AugmentedRpc<(key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<u64>>;
+            /**
+             * Query historical storage entries (by key) starting from a start block
+             **/
+            queryStorage: AugmentedRpc<(<T = Codec[]>(keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], fromBlock?: Hash | Uint8Array | string, toBlock?: Hash | Uint8Array | string) => Observable<[Hash, T][]>)>;
+            /**
+             * Query storage entries (by key) starting at block hash given as the second parameter
+             **/
+            queryStorageAt: AugmentedRpc<(<T = Codec[]>(keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], at?: Hash | Uint8Array | string) => Observable<T>)>;
+            /**
+             * Retrieves the runtime version via subscription
+             **/
+            subscribeRuntimeVersion: AugmentedRpc<() => Observable<RuntimeVersion>>;
+            /**
+             * Subscribes to storage changes for the provided keys
+             **/
+            subscribeStorage: AugmentedRpc<(<T = Codec[]>(keys?: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[]) => Observable<T>)>;
+            /**
+             * Provides a way to trace the re-execution of a single block
+             **/
+            traceBlock: AugmentedRpc<(block: Hash | string | Uint8Array, targets: Option<Text> | null | object | string | Uint8Array, storageKeys: Option<Text> | null | object | string | Uint8Array, methods: Option<Text> | null | object | string | Uint8Array) => Observable<TraceBlockResponse>>;
+            /**
+             * Check current migration state
+             **/
+            trieMigrationStatus: AugmentedRpc<(at?: BlockHash | string | Uint8Array) => Observable<MigrationStatusResult>>;
+        };
+        syncstate: {
+            /**
+             * Returns the json-serialized chainspec running the node, with a sync state.
+             **/
+            genSyncSpec: AugmentedRpc<(raw: bool | boolean | Uint8Array) => Observable<Json>>;
+        };
+        system: {
+            /**
+             * Retrieves the next accountIndex as available on the node
+             **/
+            accountNextIndex: AugmentedRpc<(accountId: AccountId | string | Uint8Array) => Observable<Index>>;
+            /**
+             * Adds the supplied directives to the current log filter
+             **/
+            addLogFilter: AugmentedRpc<(directives: Text | string) => Observable<Null>>;
+            /**
+             * Adds a reserved peer
+             **/
+            addReservedPeer: AugmentedRpc<(peer: Text | string) => Observable<Text>>;
+            /**
+             * Retrieves the chain
+             **/
+            chain: AugmentedRpc<() => Observable<Text>>;
+            /**
+             * Retrieves the chain type
+             **/
+            chainType: AugmentedRpc<() => Observable<ChainType>>;
+            /**
+             * Dry run an extrinsic at a given block
+             **/
+            dryRun: AugmentedRpc<(extrinsic: Bytes | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<ApplyExtrinsicResult>>;
+            /**
+             * Return health status of the node
+             **/
+            health: AugmentedRpc<() => Observable<Health>>;
+            /**
+             * The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example
+             **/
+            localListenAddresses: AugmentedRpc<() => Observable<Vec<Text>>>;
+            /**
+             * Returns the base58-encoded PeerId of the node
+             **/
+            localPeerId: AugmentedRpc<() => Observable<Text>>;
+            /**
+             * Retrieves the node name
+             **/
+            name: AugmentedRpc<() => Observable<Text>>;
+            /**
+             * Returns current state of the network
+             **/
+            networkState: AugmentedRpc<() => Observable<NetworkState>>;
+            /**
+             * Returns the roles the node is running as
+             **/
+            nodeRoles: AugmentedRpc<() => Observable<Vec<NodeRole>>>;
+            /**
+             * Returns the currently connected peers
+             **/
+            peers: AugmentedRpc<() => Observable<Vec<PeerInfo>>>;
+            /**
+             * Get a custom set of properties as a JSON object, defined in the chain spec
+             **/
+            properties: AugmentedRpc<() => Observable<ChainProperties>>;
+            /**
+             * Remove a reserved peer
+             **/
+            removeReservedPeer: AugmentedRpc<(peerId: Text | string) => Observable<Text>>;
+            /**
+             * Returns the list of reserved peers
+             **/
+            reservedPeers: AugmentedRpc<() => Observable<Vec<Text>>>;
+            /**
+             * Resets the log filter to Substrate defaults
+             **/
+            resetLogFilter: AugmentedRpc<() => Observable<Null>>;
+            /**
+             * Returns the state of the syncing of the node
+             **/
+            syncState: AugmentedRpc<() => Observable<SyncState>>;
+            /**
+             * Retrieves the version of the node
+             **/
+            version: AugmentedRpc<() => Observable<Text>>;
+        };
+        web3: {
+            /**
+             * Returns current client version.
+             **/
+            clientVersion: AugmentedRpc<() => Observable<Text>>;
+            /**
+             * Returns sha3 of the given data
+             **/
+            sha3: AugmentedRpc<(data: Bytes | string | Uint8Array) => Observable<H256>>;
+        };
+    }
+}
diff --git a/node_modules/@joystream/types/types/lib/augment/augment-api-tx.d.ts b/node_modules/@joystream/types/types/lib/augment/augment-api-tx.d.ts
new file mode 100644
index 0000000..59193fe
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/augment-api-tx.d.ts
@@ -0,0 +1,6618 @@
+import type { ApiTypes } from '@polkadot/api-base/types';
+import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { AnyNumber, IMethod, ITuple } from '@polkadot/types-codec/types';
+import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmParams, PalletProjectTokenMerkleProof, PalletProjectTokenPaymentWithVesting, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
+declare module '@polkadot/api-base/types/submittable' {
+    interface AugmentedSubmittables<ApiType extends ApiTypes> {
+        appWorkingGroup: {
+            /**
+             * Add a job opening for a regular worker/lead role.
+             * Require signed leader origin or the root (to add opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | {
+                stakeAmount?: any;
+                leavingUnstakingPeriod?: any;
+            } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Apply on a worker opening.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `p.description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | {
+                memberId?: any;
+                openingId?: any;
+                roleAccountId?: any;
+                rewardAccountId?: any;
+                description?: any;
+                stakeParameters?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+            /**
+             * Cancel an opening for the regular worker/lead position.
+             * Require signed leader origin or the root (to cancel opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Decreases the regular worker/lead stake and returns the remainder to the
+             * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+             * Accepts the stake amount to decrease.
+             * Requires signed leader origin or the root (to decrease the leader stake).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Fill opening for the regular/lead position.
+             * Require signed leader origin or the root (to fill opening for the leader position).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `successful_application_ids`
+             * - DB:
+             * - O(A)
+             * # </weight>
+             **/
+            fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+            /**
+             * Fund working group budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Increases the regular worker/lead stake, demands a worker origin.
+             * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Lead remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Leave the role by the active worker.
+             * # <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+            /**
+             * Sets a new budget for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets a new status text for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+             *
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+            /**
+             * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+             * If slashing balance greater than the existing stake - stake is slashed to zero.
+             * Requires signed leader origin or the root (to slash the leader stake).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size of `penality.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+            /**
+             * Transfers specified amount to any account.
+             * Requires leader origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Terminate the active worker by the lead.
+             * Requires signed leader origin or the root (to terminate the leader role).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size `penalty.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Update the reward account associated with a set reward relationship for the active worker.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Update the reward per block for the active worker.
+             * Require signed leader origin or the root (to update leader's reward amount).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Update the associated role account of the active regular worker/lead.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Withdraw the worker application. Can be done by the worker only.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Worker remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+        };
+        authorship: {
+            /**
+             * Provide a set of uncles.
+             **/
+            setUncles: AugmentedSubmittable<(newUncles: Vec<SpRuntimeHeader> | (SpRuntimeHeader | {
+                parentHash?: any;
+                number?: any;
+                stateRoot?: any;
+                extrinsicsRoot?: any;
+                digest?: any;
+            } | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<SpRuntimeHeader>]>;
+        };
+        babe: {
+            /**
+             * Plan an epoch config change. The epoch config change is recorded and will be enacted on
+             * the next call to `enact_epoch_change`. The config will be activated one epoch after.
+             * Multiple calls to this method will replace any existing planned config change that had
+             * not been enacted yet.
+             **/
+            planConfigChange: AugmentedSubmittable<(config: SpConsensusBabeDigestsNextConfigDescriptor | {
+                V1: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpConsensusBabeDigestsNextConfigDescriptor]>;
+            /**
+             * Report authority equivocation/misbehavior. This method will verify
+             * the equivocation proof and validate the given key ownership proof
+             * against the extracted offender. If both are valid, the offence will
+             * be reported.
+             **/
+            reportEquivocation: AugmentedSubmittable<(equivocationProof: SpConsensusSlotsEquivocationProof | {
+                offender?: any;
+                slot?: any;
+                firstHeader?: any;
+                secondHeader?: any;
+            } | string | Uint8Array, keyOwnerProof: SpSessionMembershipProof | {
+                session?: any;
+                trieNodes?: any;
+                validatorCount?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpConsensusSlotsEquivocationProof, SpSessionMembershipProof]>;
+            /**
+             * Report authority equivocation/misbehavior. This method will verify
+             * the equivocation proof and validate the given key ownership proof
+             * against the extracted offender. If both are valid, the offence will
+             * be reported.
+             * This extrinsic must be called unsigned and it is expected that only
+             * block authors will call it (validated in `ValidateUnsigned`), as such
+             * if the block author is defined it will be defined as the equivocation
+             * reporter.
+             **/
+            reportEquivocationUnsigned: AugmentedSubmittable<(equivocationProof: SpConsensusSlotsEquivocationProof | {
+                offender?: any;
+                slot?: any;
+                firstHeader?: any;
+                secondHeader?: any;
+            } | string | Uint8Array, keyOwnerProof: SpSessionMembershipProof | {
+                session?: any;
+                trieNodes?: any;
+                validatorCount?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpConsensusSlotsEquivocationProof, SpSessionMembershipProof]>;
+        };
+        bagsList: {
+            /**
+             * Move the caller's Id directly in front of `lighter`.
+             *
+             * The dispatch origin for this call must be _Signed_ and can only be called by the Id of
+             * the account going in front of `lighter`.
+             *
+             * Only works if
+             * - both nodes are within the same bag,
+             * - and `origin` has a greater `Score` than `lighter`.
+             **/
+            putInFrontOf: AugmentedSubmittable<(lighter: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+            /**
+             * Declare that some `dislocated` account has, through rewards or penalties, sufficiently
+             * changed its score that it should properly fall into a different bag than its current
+             * one.
+             *
+             * Anyone can call this function about any potentially dislocated account.
+             *
+             * Will always update the stored score of `dislocated` to the correct score, based on
+             * `ScoreProvider`.
+             *
+             * If `dislocated` does not exists, it returns an error.
+             **/
+            rebag: AugmentedSubmittable<(dislocated: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+        };
+        balances: {
+            /**
+             * Exactly as `transfer`, except the origin must be root and the source account may be
+             * specified.
+             * # <weight>
+             * - Same as transfer, but additional read and write because the source account is not
+             * assumed to be in the overlay.
+             * # </weight>
+             **/
+            forceTransfer: AugmentedSubmittable<(source: AccountId32 | string | Uint8Array, dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, AccountId32, Compact<u128>]>;
+            /**
+             * Unreserve some balance from a user by force.
+             *
+             * Can only be called by ROOT.
+             **/
+            forceUnreserve: AugmentedSubmittable<(who: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128]>;
+            /**
+             * Set the balances of a given account.
+             *
+             * This will alter `FreeBalance` and `ReservedBalance` in storage. it will
+             * also alter the total issuance of the system (`TotalIssuance`) appropriately.
+             * If the new free or reserved balance is below the existential deposit,
+             * it will reset the account nonce (`frame_system::AccountNonce`).
+             *
+             * The dispatch origin for this call is `root`.
+             **/
+            setBalance: AugmentedSubmittable<(who: AccountId32 | string | Uint8Array, newFree: Compact<u128> | AnyNumber | Uint8Array, newReserved: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>, Compact<u128>]>;
+            /**
+             * Transfer some liquid free balance to another account.
+             *
+             * `transfer` will set the `FreeBalance` of the sender and receiver.
+             * If the sender's account is below the existential deposit as a result
+             * of the transfer, the account will be reaped.
+             *
+             * The dispatch origin for this call must be `Signed` by the transactor.
+             *
+             * # <weight>
+             * - Dependent on arguments but not critical, given proper implementations for input config
+             * types. See related functions below.
+             * - It contains a limited number of reads and writes internally and no complex
+             * computation.
+             *
+             * Related functions:
+             *
+             * - `ensure_can_withdraw` is always called internally but has a bounded complexity.
+             * - Transferring balances to accounts that did not exist before will cause
+             * `T::OnNewAccount::on_new_account` to be called.
+             * - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.
+             * - `transfer_keep_alive` works the same way as `transfer`, but has an additional check
+             * that the transfer will not kill the origin account.
+             * ---------------------------------
+             * - Origin account is already in memory, so no DB operations for them.
+             * # </weight>
+             **/
+            transfer: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>]>;
+            /**
+             * Transfer the entire transferable balance from the caller account.
+             *
+             * NOTE: This function only attempts to transfer _transferable_ balances. This means that
+             * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
+             * transferred by this function. To ensure that this function results in a killed account,
+             * you might need to prepare the account by removing any reference counters, storage
+             * deposits, etc...
+             *
+             * The dispatch origin of this call must be Signed.
+             *
+             * - `dest`: The recipient of the transfer.
+             * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
+             * of the funds the account has, causing the sender account to be killed (false), or
+             * transfer everything except at least the existential deposit, which will guarantee to
+             * keep the sender account alive (true). # <weight>
+             * - O(1). Just like transfer, but reading the user's transferable balance first.
+             * #</weight>
+             **/
+            transferAll: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, keepAlive: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, bool]>;
+            /**
+             * Same as the [`transfer`] call, but with a check that the transfer will not kill the
+             * origin account.
+             *
+             * 99% of the time you want [`transfer`] instead.
+             *
+             * [`transfer`]: struct.Pallet.html#method.transfer
+             **/
+            transferKeepAlive: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>]>;
+        };
+        bounty: {
+            /**
+             * Announce work entry for a successful bounty.
+             * # <weight>
+             *
+             * ## weight
+             * `O (W + M)` where:
+             * - `W` is the work_description size in kilobytes.
+             * - `M` is closed contract member list length.
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            announceWorkEntry: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, stakingAccountId: AccountId32 | string | Uint8Array, workDescription: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, AccountId32, Bytes]>;
+            /**
+             * Bounty Contributor made a remark
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is msg size in kilobytes
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            contributorRemark: AugmentedSubmittable<(contributor: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * Creates a bounty. Metadata stored in the transaction log but discarded after that.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is the _metadata size in kilobytes.
+             * - `M` is closed contract member list length.
+             * - DB:
+             * - O(M) (O(1) on open contract)
+             * # </weight>
+             **/
+            createBounty: AugmentedSubmittable<(params: PalletBountyBountyParametersBTreeSet | {
+                oracle?: any;
+                contractType?: any;
+                creator?: any;
+                cherry?: any;
+                oracleReward?: any;
+                entrantStake?: any;
+                fundingType?: any;
+            } | string | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyParametersBTreeSet, Bytes]>;
+            /**
+             * Bounty Oracle made a remark
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is msg size in kilobytes
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            creatorRemark: AugmentedSubmittable<(creator: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * end bounty working period.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            endWorkingPeriod: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Bounty Entrant Worker made a remark
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is msg size in kilobytes
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            entrantRemark: AugmentedSubmittable<(entrantId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+            /**
+             * Provides bounty funding.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundBounty: AugmentedSubmittable<(funder: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, u128]>;
+            /**
+             * Bounty Oracle made a remark
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is msg size in kilobytes
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            oracleRemark: AugmentedSubmittable<(oracle: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * Submits an oracle judgment for a bounty, slashing the entries rejected
+             * by an arbitrary percentage and rewarding the winners by an arbitrary amount
+             * (not surpassing the total fund amount)
+             * # <weight>
+             *
+             * ## weight
+             * `O (J + K + W + R)`
+             * - `J` is rationale size in kilobytes,
+             * - `K` is the sum of all action_justification sizes (in kilobytes) inside OracleJudgment,
+             * - `W` is number of winner judgment entries,
+             * - `R` is number of rejected judgment entries,
+             * - db:
+             * - `O(W + R)`
+             * # </weight>
+             **/
+            submitOracleJudgment: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array, judgment: BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+            /**
+             * Submit work for a bounty.
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is the work_data size in kilobytes,
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            submitWork: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array, workData: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+            /**
+             * Oracle switches himself to a new one
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             *
+             **/
+            switchOracle: AugmentedSubmittable<(newOracle: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64]>;
+            /**
+             * Terminates a bounty in funding, funding expired,
+             * worksubmission, judging period.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateBounty: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Unlocks the stake related to a work entry
+             * After the oracle makes the judgment or the council terminates the bounty by calling terminate_bounty(...),
+             * each worker whose entry has not been judged, can unlock the totality of their stake.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawEntrantStake: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64]>;
+            /**
+             * Withdraw bounty funding by a member or a council.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawFunding: AugmentedSubmittable<(funder: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64]>;
+            /**
+             * Withraws the oracle reward to oracle
+             * If bounty is successfully, Failed or Cancelled oracle must call this
+             * extrinsic to withdraw the oracle reward,
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawOracleReward: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+        };
+        constitution: {
+            /**
+             * Sets the current constitution hash. Requires root origin.
+             * # <weight>
+             * - Complexity: `O(C)` where C is the length of the constitution text.
+             * - Db reads: 0
+             * - Db writes: 1 (constant value)
+             * # </weight>
+             **/
+            amendConstitution: AugmentedSubmittable<(constitutionText: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+        };
+        content: {
+            /**
+             * Accepts channel transfer.
+             * `commitment_params` is required to prevent changing the transfer conditions.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `commitment_params.new_collaborators` map
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            acceptChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, commitmentParams: PalletContentTransferCommitmentParametersBTreeMap | {
+                newCollaborators?: any;
+                price?: any;
+                transferId?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
+            /**
+             * Accept incoming Nft offer
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            acceptIncomingOffer: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, witnessPrice: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Activate Amm functionality for token
+             **/
+            activateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenAmmParams | {
+                slope?: any;
+                intercept?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenAmmParams]>;
+            /**
+             * Add curator to curator group under given `curator_group_id`
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addCuratorToGroup: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, curatorId: u64 | AnyNumber | Uint8Array, permissions: BTreeSet<PalletContentIterableEnumsChannelActionPermission>) => SubmittableExtrinsic<ApiType>, [u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
+            /**
+             * Buy Nft
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            buyNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, participantId: u64 | AnyNumber | Uint8Array, witnessPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * Cancel Nft sell order
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * </weight>
+             **/
+            cancelBuyNow: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * cancel channel transfer
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor]>;
+            /**
+             * Cancel video nft english auction
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            cancelEnglishAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * Cancel Nft offer
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            cancelOffer: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * Cancel video nft open auction
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            cancelOpenAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * Cancel open auction bid
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            cancelOpenAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+            /**
+             * Channel collaborator remark
+             * <weight>
+             *
+             * ## Weight
+             * `O (B)`
+             * - DB:
+             * - O(1)
+             * where:
+             * - B is the byte lenght of `msg`
+             * # </weight>
+             **/
+            channelAgentRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
+            /**
+             * Channel owner remark
+             * <weight>
+             *
+             * ## Weight
+             * `O (B)`
+             * - DB:
+             * - O(1)
+             * where:
+             * - B is the kilobyte lenght of `msg`
+             * # </weight>
+             **/
+            channelOwnerRemark: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+            /**
+             * Claim and withdraw reward in JOY from channel account
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (H)` where:
+             * - `H` is the lenght of the provided merkle `proof`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            claimAndWithdrawChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, proof: Vec<PalletCommonMerkleTreeProofElementRecord> | (PalletCommonMerkleTreeProofElementRecord | {
+                hash_?: any;
+                side?: any;
+            } | string | Uint8Array)[], item: PalletContentPullPaymentElement | {
+                channelId?: any;
+                cumulativeRewardEarned?: any;
+                reason?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonMerkleTreeProofElementRecord>, PalletContentPullPaymentElement]>;
+            /**
+             * Claim reward in JOY from channel account
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (H)` where:
+             * - `H` is the lenght of the provided merkle `proof`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            claimChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, proof: Vec<PalletCommonMerkleTreeProofElementRecord> | (PalletCommonMerkleTreeProofElementRecord | {
+                hash_?: any;
+                side?: any;
+            } | string | Uint8Array)[], item: PalletContentPullPaymentElement | {
+                channelId?: any;
+                cumulativeRewardEarned?: any;
+                reason?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonMerkleTreeProofElementRecord>, PalletContentPullPaymentElement]>;
+            /**
+             * Claim channel's creator token patronage credit
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            claimCreatorTokenPatronageCredit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C + D + E)` where:
+             * - `A` is the number of entries in `params.collaborators`
+             * - `B` is the number of items in `params.storage_buckets`
+             * - `C` is the number of items in `params.distribution_buckets`
+             * - `D` is the number of items in `params.assets.object_creation_list`
+             * - `E` is the size of  `params.meta` in kilobytes
+             * - DB:
+             * - `O(A + B + C + D)` - from the the generated weights
+             * # </weight>
+             **/
+            createChannel: AugmentedSubmittable<(channelOwner: PalletContentChannelOwner | {
+                Member: any;
+            } | {
+                CuratorGroup: any;
+            } | string | Uint8Array, params: PalletContentChannelCreationParametersRecord | {
+                assets?: any;
+                meta?: any;
+                collaborators?: any;
+                storageBuckets?: any;
+                distributionBuckets?: any;
+                expectedChannelStateBloatBond?: any;
+                expectedDataObjectStateBloatBond?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentChannelOwner, PalletContentChannelCreationParametersRecord]>;
+            /**
+             * Add new curator group to runtime storage
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `permissions_by_level` map
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            createCuratorGroup: AugmentedSubmittable<(isActive: bool | boolean | Uint8Array, permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>) => SubmittableExtrinsic<ApiType>, [bool, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C + D)` where:
+             * - `A` is the number of items in `params.assets.object_creation_list`
+             * - `B` is `params.storage_buckets_num_witness`
+             * - `C` is the length of open auction / english auction whitelist (if provided)
+             * - `D` is the size of `params.meta` in kilobytes (if provided)
+             * - DB:
+             * - `O(A + B + C)` - from the the generated weights
+             * # </weight>
+             **/
+            createVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoCreationParametersRecord | {
+                assets?: any;
+                meta?: any;
+                autoIssueNft?: any;
+                expectedVideoStateBloatBond?: any;
+                expectedDataObjectStateBloatBond?: any;
+                storageBucketsNumWitness?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoCreationParametersRecord]>;
+            creatorTokenIssuerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
+            /**
+             * Perform transfer of tokens as creator token issuer
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B)` where:
+             * - `A` is the number of entries in `outputs`
+             * - `B` is the size of the `metadata` in kilobytes
+             * - DB:
+             * - `O(A)` - from the the generated weights
+             * # </weight>
+             **/
+            creatorTokenIssuerTransfer: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>> | ([u64 | AnyNumber | Uint8Array, PalletProjectTokenPaymentWithVesting | {
+                amount?: any;
+                vestingSchedule?: any;
+            } | string | Uint8Array])[], metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>>, Bytes]>;
+            /**
+             * Deactivate Amm functionality for token
+             **/
+            deactivateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * Deissue channel's creator token
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            deissueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C)` where:
+             * - `A` is `num_objects_to_delete`
+             * - `B` is `channel_bag_witness.storage_buckets_num`
+             * - `C` is `channel_bag_witness.distribution_buckets_num`
+             * - DB:
+             * - `O(A + B + C)` - from the the generated weights
+             * # </weight>
+             **/
+            deleteChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | {
+                storageBucketsNum?: any;
+                distributionBucketsNum?: any;
+            } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64]>;
+            deleteChannelAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | {
+                storageBucketsNum?: any;
+                distributionBucketsNum?: any;
+            } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64, Bytes]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C)` where:
+             * - `A` is the length of `assets_to_remove`
+             * - `B` is the value of `storage_buckets_num_witness`
+             * - `C` is the size of `rationale` in kilobytes
+             * - DB:
+             * - `O(A + B)` - from the the generated weights
+             * # </weight>
+             **/
+            deleteChannelAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, storageBucketsNumWitness: u32 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, u32, Bytes]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B)` where:
+             * - `A` is num_objects_to_delete
+             * - `B` is `params.storage_buckets_num_witness` (if provided)
+             * - DB:
+             * - `O(A + B)` - from the the generated weights
+             * # </weight>
+             **/
+            deleteVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Option<u32>]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C)` where:
+             * - `A` is the value of `num_objects_to_delete`
+             * - `B` is the value of `storage_buckets_num_witness`
+             * - `C` is the size of `rationale` in kilobytes
+             * - DB:
+             * - `O(A + B)` - from the the generated weights
+             * # </weight>
+             **/
+            deleteVideoAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u64, Bytes]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C)` where:
+             * - `A` is the length of `assets_to_remove`
+             * - `B` is the value of `storage_buckets_num_witness`
+             * - `C` is the size of `rationale` in kilobytes
+             * - DB:
+             * - `O(A + B)` - from the the generated weights
+             * # </weight>
+             **/
+            deleteVideoAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: u32 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u32, BTreeSet<u64>, Bytes]>;
+            /**
+             * Destroy NFT
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            destroyNft: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * Finalize an ended creator token sale
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            finalizeCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * Finalize an ended revenue split
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            finalizeRevenueSplit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * Initialize creator token sale
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the size of `params.metadata` in kilobytes (or 0 if not provided)
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            initCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenTokenSaleParams | {
+                unitPrice?: any;
+                upperBoundQuantity?: any;
+                startsAt?: any;
+                duration?: any;
+                vestingScheduleParams?: any;
+                capPerMember?: any;
+                metadata?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenSaleParams]>;
+            /**
+             * Start a channel transfer with specified characteristics
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `transfer_params.new_collaborators` map
+             * - DB:
+             * - O(A) - from the the generated weights
+             * # </weight>
+             **/
+            initializeChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, transferParams: PalletContentInitTransferParameters | {
+                newCollaborators?: any;
+                price?: any;
+                newOwner?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, PalletContentInitTransferParameters]>;
+            /**
+             * Issue creator token
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `params.initial_allocation` map
+             * - DB:
+             * - `O(A)` - from the the generated weights
+             * # </weight>
+             **/
+            issueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenTokenIssuanceParameters | {
+                initialAllocation?: any;
+                symbol?: any;
+                transferPolicy?: any;
+                patronageRate?: any;
+                revenueSplitRate?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenIssuanceParameters]>;
+            /**
+             * Issue NFT
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + B)`
+             * - DB:
+             * - O(W)
+             * where:
+             * - W : member whitelist length in case nft initial status is auction
+             * - B : size of metadata parameter in kilobytes
+             * # </weight>
+             **/
+            issueNft: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, params: PalletContentNftTypesNftIssuanceParametersRecord | {
+                royalty?: any;
+                nftMetadata?: any;
+                nonChannelOwner?: any;
+                initTransactionalStatus?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesNftIssuanceParametersRecord]>;
+            /**
+             * Issue revenue split for a channel
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            issueRevenueSplit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, start: Option<u32> | null | object | string | Uint8Array, duration: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u32]>;
+            /**
+             * Make channel's creator token permissionless
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            makeCreatorTokenPermissionless: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * Make english auction bid
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            makeEnglishAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, bidAmount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * Make auction bid
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            makeOpenAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, bidAmount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * NFT owner remark
+             * <weight>
+             *
+             * ## Weight
+             * `O (B)`
+             * - DB:
+             * - O(1)
+             * where:
+             * - B is the byte lenght of `msg`
+             * # </weight>
+             **/
+            nftOwnerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
+            /**
+             * Offer Nft
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            offerNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, to: u64 | AnyNumber | Uint8Array, price: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, u64, Option<u128>]>;
+            /**
+             * Accept open auction bid
+             * Should only be called by auctioneer
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            pickOpenAuctionWinner: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, winnerId: u64 | AnyNumber | Uint8Array, commit: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, u128]>;
+            /**
+             * Reduce channel's creator token patronage rate to given value
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            reduceCreatorTokenPatronageRateTo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, targetRate: Permill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Permill]>;
+            /**
+             * Remove curator from a given curator group
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            removeCuratorFromGroup: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, curatorId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+            /**
+             * Sell Nft
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            sellNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, price: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, u128]>;
+            /**
+             * Extrinsic for pausing/re-enabling channel features
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setChannelPausedFeaturesAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, newPausedFeatures: BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
+            /**
+             * Extrinsic for setting channel visibility status (hidden/visible) by moderator
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setChannelVisibilityAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, isHidden: bool | boolean | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+            /**
+             * Set `is_active` status for curator group under given `curator_group_id`
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setCuratorGroupStatus: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, isActive: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, bool]>;
+            /**
+             * Claim won english auction
+             * Can be called by anyone
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            settleEnglishAuction: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Extrinsic for video visibility status (hidden/visible) setting by moderator
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setVideoVisibilityAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, isHidden: bool | boolean | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+            /**
+             * Return Nft back to the original artist at no cost
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            slingNftBack: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor]>;
+            /**
+             * Start video nft english auction
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - W : whitelist member list length
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            startEnglishAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, auctionParams: PalletContentNftTypesEnglishAuctionParamsRecord | {
+                startingPrice?: any;
+                buyNowPrice?: any;
+                whitelist?: any;
+                startsAt?: any;
+                duration?: any;
+                extensionPeriod?: any;
+                minBidStep?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
+            /**
+             * Start video nft open auction
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - W : member whitelist length
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            startOpenAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, auctionParams: PalletContentNftTypesOpenAuctionParamsRecord | {
+                startingPrice?: any;
+                buyNowPrice?: any;
+                startsAt?: any;
+                whitelist?: any;
+                bidLockDuration?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesOpenAuctionParamsRecord]>;
+            /**
+             * Only Council can toggle nft issuance limits constraints
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            toggleNftLimits: AugmentedSubmittable<(enabled: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [bool]>;
+            /**
+             * Update Buy now nft price
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            updateBuyNowPrice: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, newPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u128]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C + D + E)` where:
+             * - `A` is the number of entries in `params.collaborators`
+             * - `B` is the number of items in `params.assets_to_upload.object_creation_list` (if provided)
+             * - `C` is the number of items in `params.assets_to_remove`
+             * - `D` is the size of `params.new_meta` in kilobytes
+             * - `E` is `params.storage_buckets_num_witness` (if provided)
+             * - DB:
+             * - `O(A + B + C + E)` - from the the generated weights
+             * # </weight>
+             **/
+            updateChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentChannelUpdateParametersRecord | {
+                assetsToUpload?: any;
+                newMeta?: any;
+                assetsToRemove?: any;
+                collaborators?: any;
+                expectedDataObjectStateBloatBond?: any;
+                storageBucketsNumWitness?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord]>;
+            /**
+             * Updates channel's NFT limit.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            updateChannelNftLimit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, nftLimitPeriod: PalletContentNftLimitPeriod | 'Daily' | 'Weekly' | number | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, limit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, PalletContentNftLimitPeriod, u64, u64]>;
+            /**
+             * Update channel payouts
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` where:
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            updateChannelPayouts: AugmentedSubmittable<(params: PalletContentUpdateChannelPayoutsParametersRecord | {
+                commitment?: any;
+                payload?: any;
+                minCashoutAllowed?: any;
+                maxCashoutAllowed?: any;
+                channelCashoutsEnabled?: any;
+            } | string | Uint8Array, uploaderAccount: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord, AccountId32]>;
+            /**
+             * Extrinsic for updating channel privilege level (requires lead access)
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateChannelPrivilegeLevel: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, newPrivilegeLevel: u8 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u8]>;
+            /**
+             * Updates channel state bloat bond value.
+             * Only lead can upload this value
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            updateChannelStateBloatBond: AugmentedSubmittable<(newChannelStateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Update existing curator group's permissions
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `permissions_by_level` map
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateCuratorGroupPermissions: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
+            /**
+             * Updates global NFT limit
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            updateGlobalNftLimit: AugmentedSubmittable<(nftLimitPeriod: PalletContentNftLimitPeriod | 'Daily' | 'Weekly' | number | Uint8Array, limit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentNftLimitPeriod, u64]>;
+            /**
+             * Update upcoming creator token sale
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateUpcomingCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, newStartBlock: Option<u32> | null | object | string | Uint8Array, newDuration: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, Option<u32>]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C + D + E)` where:
+             * - `A` is params.assets_to_upload.object_creation_list.len() (if provided)
+             * - `B` is params.assets_to_remove.len()
+             * - `C` is `params.storage_buckets_num_witness` (if provided)
+             * - `D` is the length of open auction / english auction whitelist (if provided)
+             * - `E` is the size of `params.new_meta` in kilobytes (if provided)
+             * - DB:
+             * - `O(A + B + C + D)` - from the the generated weights
+             * # </weight>
+             **/
+            updateVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoUpdateParametersRecord | {
+                assetsToUpload?: any;
+                newMeta?: any;
+                assetsToRemove?: any;
+                autoIssueNft?: any;
+                expectedDataObjectStateBloatBond?: any;
+                storageBucketsNumWitness?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoUpdateParametersRecord]>;
+            /**
+             * Updates video state bloat bond value.
+             * Only lead can upload this value
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            updateVideoStateBloatBond: AugmentedSubmittable<(newVideoStateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Withdraw JOY from channel account
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            withdrawFromChannelBalance: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u128]>;
+        };
+        contentWorkingGroup: {
+            /**
+             * Add a job opening for a regular worker/lead role.
+             * Require signed leader origin or the root (to add opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | {
+                stakeAmount?: any;
+                leavingUnstakingPeriod?: any;
+            } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Apply on a worker opening.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `p.description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | {
+                memberId?: any;
+                openingId?: any;
+                roleAccountId?: any;
+                rewardAccountId?: any;
+                description?: any;
+                stakeParameters?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+            /**
+             * Cancel an opening for the regular worker/lead position.
+             * Require signed leader origin or the root (to cancel opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Decreases the regular worker/lead stake and returns the remainder to the
+             * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+             * Accepts the stake amount to decrease.
+             * Requires signed leader origin or the root (to decrease the leader stake).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Fill opening for the regular/lead position.
+             * Require signed leader origin or the root (to fill opening for the leader position).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `successful_application_ids`
+             * - DB:
+             * - O(A)
+             * # </weight>
+             **/
+            fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+            /**
+             * Fund working group budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Increases the regular worker/lead stake, demands a worker origin.
+             * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Lead remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Leave the role by the active worker.
+             * # <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+            /**
+             * Sets a new budget for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets a new status text for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+             *
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+            /**
+             * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+             * If slashing balance greater than the existing stake - stake is slashed to zero.
+             * Requires signed leader origin or the root (to slash the leader stake).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size of `penality.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+            /**
+             * Transfers specified amount to any account.
+             * Requires leader origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Terminate the active worker by the lead.
+             * Requires signed leader origin or the root (to terminate the leader role).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size `penalty.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Update the reward account associated with a set reward relationship for the active worker.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Update the reward per block for the active worker.
+             * Require signed leader origin or the root (to update leader's reward amount).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Update the associated role account of the active regular worker/lead.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Withdraw the worker application. Can be done by the worker only.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Worker remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+        };
+        council: {
+            /**
+             * Subscribe candidate
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            announceCandidacy: AugmentedSubmittable<(membershipId: u64 | AnyNumber | Uint8Array, stakingAccountId: AccountId32 | string | Uint8Array, rewardAccountId: AccountId32 | string | Uint8Array, stake: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32, AccountId32, u128]>;
+            /**
+             * Candidate makes a remark message
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            candidateRemark: AugmentedSubmittable<(candidateId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+            /**
+             * Councilor makes a remark message
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            councilorRemark: AugmentedSubmittable<(councilorId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+            /**
+             * Fund the council budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundCouncilBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Transfers funds from council budget to account
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (F)` where:
+             * `F` is the length of `funding_requests`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundingRequest: AugmentedSubmittable<(fundingRequests: Vec<PalletCommonFundingRequestParameters> | (PalletCommonFundingRequestParameters | {
+                account?: any;
+                amount?: any;
+            } | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<PalletCommonFundingRequestParameters>]>;
+            /**
+             * Plan the next budget refill.
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            planBudgetRefill: AugmentedSubmittable<(nextRefill: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+            /**
+             * Release candidacy stake that is no longer needed.
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            releaseCandidacyStake: AugmentedSubmittable<(membershipId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Sets the budget balance.
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(balance: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets the budget refill amount
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudgetIncrement: AugmentedSubmittable<(budgetIncrement: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Set short description for the user's candidacy. Can be called anytime during user's candidacy.
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)` where:
+             * `N` is the size of `note` in kilobytes
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setCandidacyNote: AugmentedSubmittable<(membershipId: u64 | AnyNumber | Uint8Array, note: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+            /**
+             * Sets the councilor reward per block
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setCouncilorReward: AugmentedSubmittable<(councilorReward: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Withdraw candidacy and release candidacy stake.
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawCandidacy: AugmentedSubmittable<(membershipId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+        };
+        distributionWorkingGroup: {
+            /**
+             * Add a job opening for a regular worker/lead role.
+             * Require signed leader origin or the root (to add opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | {
+                stakeAmount?: any;
+                leavingUnstakingPeriod?: any;
+            } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Apply on a worker opening.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `p.description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | {
+                memberId?: any;
+                openingId?: any;
+                roleAccountId?: any;
+                rewardAccountId?: any;
+                description?: any;
+                stakeParameters?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+            /**
+             * Cancel an opening for the regular worker/lead position.
+             * Require signed leader origin or the root (to cancel opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Decreases the regular worker/lead stake and returns the remainder to the
+             * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+             * Accepts the stake amount to decrease.
+             * Requires signed leader origin or the root (to decrease the leader stake).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Fill opening for the regular/lead position.
+             * Require signed leader origin or the root (to fill opening for the leader position).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `successful_application_ids`
+             * - DB:
+             * - O(A)
+             * # </weight>
+             **/
+            fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+            /**
+             * Fund working group budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Increases the regular worker/lead stake, demands a worker origin.
+             * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Lead remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Leave the role by the active worker.
+             * # <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+            /**
+             * Sets a new budget for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets a new status text for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+             *
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+            /**
+             * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+             * If slashing balance greater than the existing stake - stake is slashed to zero.
+             * Requires signed leader origin or the root (to slash the leader stake).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size of `penality.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+            /**
+             * Transfers specified amount to any account.
+             * Requires leader origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Terminate the active worker by the lead.
+             * Requires signed leader origin or the root (to terminate the leader role).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size `penalty.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Update the reward account associated with a set reward relationship for the active worker.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Update the reward per block for the active worker.
+             * Require signed leader origin or the root (to update leader's reward amount).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Update the associated role account of the active regular worker/lead.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Withdraw the worker application. Can be done by the worker only.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Worker remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+        };
+        electionProviderMultiPhase: {
+            /**
+             * Trigger the governance fallback.
+             *
+             * This can only be called when [`Phase::Emergency`] is enabled, as an alternative to
+             * calling [`Call::set_emergency_election_result`].
+             **/
+            governanceFallback: AugmentedSubmittable<(maybeMaxVoters: Option<u32> | null | object | string | Uint8Array, maybeMaxTargets: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<u32>, Option<u32>]>;
+            /**
+             * Set a solution in the queue, to be handed out to the client of this pallet in the next
+             * call to `ElectionProvider::elect`.
+             *
+             * This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.
+             *
+             * The solution is not checked for any feasibility and is assumed to be trustworthy, as any
+             * feasibility check itself can in principle cause the election process to fail (due to
+             * memory/weight constrains).
+             **/
+            setEmergencyElectionResult: AugmentedSubmittable<(supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>> | ([AccountId32 | string | Uint8Array, SpNposElectionsSupport | {
+                total?: any;
+                voters?: any;
+            } | string | Uint8Array])[]) => SubmittableExtrinsic<ApiType>, [Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>]>;
+            /**
+             * Set a new value for `MinimumUntrustedScore`.
+             *
+             * Dispatch origin must be aligned with `T::ForceOrigin`.
+             *
+             * This check can be turned off by setting the value to `None`.
+             **/
+            setMinimumUntrustedScore: AugmentedSubmittable<(maybeNextScore: Option<SpNposElectionsElectionScore> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<SpNposElectionsElectionScore>]>;
+            /**
+             * Submit a solution for the signed phase.
+             *
+             * The dispatch origin fo this call must be __signed__.
+             *
+             * The solution is potentially queued, based on the claimed score and processed at the end
+             * of the signed phase.
+             *
+             * A deposit is reserved and recorded for the solution. Based on the outcome, the solution
+             * might be rewarded, slashed, or get all or a part of the deposit back.
+             **/
+            submit: AugmentedSubmittable<(rawSolution: PalletElectionProviderMultiPhaseRawSolution | {
+                solution?: any;
+                score?: any;
+                round?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletElectionProviderMultiPhaseRawSolution]>;
+            /**
+             * Submit a solution for the unsigned phase.
+             *
+             * The dispatch origin fo this call must be __none__.
+             *
+             * This submission is checked on the fly. Moreover, this unsigned solution is only
+             * validated when submitted to the pool from the **local** node. Effectively, this means
+             * that only active validators can submit this transaction when authoring a block (similar
+             * to an inherent).
+             *
+             * To prevent any incorrect solution (and thus wasted time/weight), this transaction will
+             * panic if the solution submitted by the validator is invalid in any way, effectively
+             * putting their authoring reward at risk.
+             *
+             * No deposit or reward is associated with this submission.
+             **/
+            submitUnsigned: AugmentedSubmittable<(rawSolution: PalletElectionProviderMultiPhaseRawSolution | {
+                solution?: any;
+                score?: any;
+                round?: any;
+            } | string | Uint8Array, witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize | {
+                voters?: any;
+                targets?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize]>;
+        };
+        forum: {
+            /**
+             * Add post
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V)` where:
+             * - `W` is the category depth,
+             * - `V` is the size of the text in kilobytes
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            addPost: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, text: Bytes | string | Uint8Array, editable: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes, bool]>;
+            /**
+             * Add a new category.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V + X)` where:
+             * - `W` is the category depth
+             * - `V` is the size of the category title in kilobytes.
+             * - `X` is the size of the category description in kilobytes.
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            createCategory: AugmentedSubmittable<(parentCategoryId: Option<u64> | null | object | string | Uint8Array, title: Bytes | string | Uint8Array, description: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<u64>, Bytes, Bytes]>;
+            /**
+             * Create new thread in category
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V + X)` where:
+             * - `W` is the category depth
+             * - `V` is the size of the thread title in kilobytes.
+             * - `X` is the size of the thread text in kilobytes.
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            createThread: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array, text: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes, Bytes]>;
+            /**
+             * Delete category
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is the category depth
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            deleteCategory: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | {
+                Lead: any;
+            } | {
+                Moderator: any;
+            } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64]>;
+            /**
+             * Delete post from storage.
+             * You need to provide a vector of posts to delete in the form
+             * (T::CategoryId, T::ThreadId, T::PostId, bool)
+             * where the last bool is whether you want to hide it apart from deleting it
+             *
+             * ## Weight
+             * `O (W + V + P)` where:
+             * - `W` is the category depth,
+             * - `V` is the size of the rationale in kilobytes
+             * - `P` is the number of posts to delete
+             * - DB:
+             * - O(W + P)
+             * # </weight>
+             **/
+            deletePosts: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, posts: BTreeMap<PalletForumExtendedPostIdObject, bool>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<PalletForumExtendedPostIdObject, bool>, Bytes]>;
+            /**
+             * Delete thread
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is the category depth
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            deleteThread: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, hide: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, bool]>;
+            /**
+             * Edit post text
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V)` where:
+             * - `W` is the category depth,
+             * - `V` is the size of the new text in kilobytes
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            editPostText: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, newText: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, u64, Bytes]>;
+            /**
+             * Edit thread metadata
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V)` where:
+             * - `W` is the category depth
+             * - `V` is the size of the thread metadata in kilobytes.
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            editThreadMetadata: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, newMetadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+            /**
+             * Moderate post
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V)` where:
+             * - `W` is the category depth,
+             * - `V` is the size of the rationale in kilobytes
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            moderatePost: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | {
+                Lead: any;
+            } | {
+                Moderator: any;
+            } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, u64, u64, Bytes]>;
+            /**
+             * Moderate thread
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V + X)` where:
+             * - `W` is the category depth,
+             * - `V` is the number of thread posts,
+             * - `X` is the size of the rationale in kilobytes
+             * - DB:
+             * - O(W + V)
+             * # </weight>
+             **/
+            moderateThread: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | {
+                Lead: any;
+            } | {
+                Moderator: any;
+            } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, u64, Bytes]>;
+            /**
+             * Move thread to another category
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is the category depth
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            moveThreadToCategory: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | {
+                Lead: any;
+            } | {
+                Moderator: any;
+            } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, newCategoryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, u64, u64]>;
+            /**
+             * Set stickied threads for category
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V)` where:
+             * - `W` is the category depth,
+             * - `V` is the length of the stickied_ids
+             * - DB:
+             * - O(W + V)
+             * # </weight>
+             **/
+            setStickiedThreads: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | {
+                Lead: any;
+            } | {
+                Moderator: any;
+            } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, stickiedIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, BTreeSet<u64>]>;
+            /**
+             * Update archival status
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is the category depth
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            updateCategoryArchivalStatus: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | {
+                Lead: any;
+            } | {
+                Moderator: any;
+            } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, newArchivalStatus: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, bool]>;
+            /**
+             * Update category description
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is the category depth
+             * - `V` is the size of the category description in kilobytes.
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            updateCategoryDescription: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | {
+                Lead: any;
+            } | {
+                Moderator: any;
+            } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, description: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, Bytes]>;
+            /**
+             * Enable a moderator can moderate a category and its sub categories.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateCategoryMembershipOfModerator: AugmentedSubmittable<(moderatorId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, newValue: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, bool]>;
+            /**
+             * Update category title
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V)` where:
+             * - `W` is the category depth
+             * - `V` is the size of the category title in kilobytes.
+             * - DB:
+             * - O(W)
+             * # </weight>
+             **/
+            updateCategoryTitle: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | {
+                Lead: any;
+            } | {
+                Moderator: any;
+            } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, title: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, Bytes]>;
+        };
+        forumWorkingGroup: {
+            /**
+             * Add a job opening for a regular worker/lead role.
+             * Require signed leader origin or the root (to add opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | {
+                stakeAmount?: any;
+                leavingUnstakingPeriod?: any;
+            } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Apply on a worker opening.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `p.description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | {
+                memberId?: any;
+                openingId?: any;
+                roleAccountId?: any;
+                rewardAccountId?: any;
+                description?: any;
+                stakeParameters?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+            /**
+             * Cancel an opening for the regular worker/lead position.
+             * Require signed leader origin or the root (to cancel opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Decreases the regular worker/lead stake and returns the remainder to the
+             * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+             * Accepts the stake amount to decrease.
+             * Requires signed leader origin or the root (to decrease the leader stake).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Fill opening for the regular/lead position.
+             * Require signed leader origin or the root (to fill opening for the leader position).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `successful_application_ids`
+             * - DB:
+             * - O(A)
+             * # </weight>
+             **/
+            fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+            /**
+             * Fund working group budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Increases the regular worker/lead stake, demands a worker origin.
+             * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Lead remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Leave the role by the active worker.
+             * # <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+            /**
+             * Sets a new budget for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets a new status text for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+             *
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+            /**
+             * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+             * If slashing balance greater than the existing stake - stake is slashed to zero.
+             * Requires signed leader origin or the root (to slash the leader stake).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size of `penality.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+            /**
+             * Transfers specified amount to any account.
+             * Requires leader origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Terminate the active worker by the lead.
+             * Requires signed leader origin or the root (to terminate the leader role).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size `penalty.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Update the reward account associated with a set reward relationship for the active worker.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Update the reward per block for the active worker.
+             * Require signed leader origin or the root (to update leader's reward amount).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Update the associated role account of the active regular worker/lead.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Withdraw the worker application. Can be done by the worker only.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Worker remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+        };
+        grandpa: {
+            /**
+             * Note that the current authority set of the GRANDPA finality gadget has
+             * stalled. This will trigger a forced authority set change at the beginning
+             * of the next session, to be enacted `delay` blocks after that. The delay
+             * should be high enough to safely assume that the block signalling the
+             * forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters
+             * will start the new authority set using the given finalized block as base.
+             * Only callable by root.
+             **/
+            noteStalled: AugmentedSubmittable<(delay: u32 | AnyNumber | Uint8Array, bestFinalizedBlockNumber: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32, u32]>;
+            /**
+             * Report voter equivocation/misbehavior. This method will verify the
+             * equivocation proof and validate the given key ownership proof
+             * against the extracted offender. If both are valid, the offence
+             * will be reported.
+             **/
+            reportEquivocation: AugmentedSubmittable<(equivocationProof: SpFinalityGrandpaEquivocationProof | {
+                setId?: any;
+                equivocation?: any;
+            } | string | Uint8Array, keyOwnerProof: SpSessionMembershipProof | {
+                session?: any;
+                trieNodes?: any;
+                validatorCount?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpFinalityGrandpaEquivocationProof, SpSessionMembershipProof]>;
+            /**
+             * Report voter equivocation/misbehavior. This method will verify the
+             * equivocation proof and validate the given key ownership proof
+             * against the extracted offender. If both are valid, the offence
+             * will be reported.
+             *
+             * This extrinsic must be called unsigned and it is expected that only
+             * block authors will call it (validated in `ValidateUnsigned`), as such
+             * if the block author is defined it will be defined as the equivocation
+             * reporter.
+             **/
+            reportEquivocationUnsigned: AugmentedSubmittable<(equivocationProof: SpFinalityGrandpaEquivocationProof | {
+                setId?: any;
+                equivocation?: any;
+            } | string | Uint8Array, keyOwnerProof: SpSessionMembershipProof | {
+                session?: any;
+                trieNodes?: any;
+                validatorCount?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpFinalityGrandpaEquivocationProof, SpSessionMembershipProof]>;
+        };
+        imOnline: {
+            /**
+             * # <weight>
+             * - Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is
+             * length of `heartbeat.network_state.external_address`
+             * - `O(K)`: decoding of length `K`
+             * - `O(E)`: decoding/encoding of length `E`
+             * - DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,
+             * `ReceivedHeartbeats`
+             * - DbWrites: `ReceivedHeartbeats`
+             * # </weight>
+             **/
+            heartbeat: AugmentedSubmittable<(heartbeat: PalletImOnlineHeartbeat | {
+                blockNumber?: any;
+                networkState?: any;
+                sessionIndex?: any;
+                authorityIndex?: any;
+                validatorsLen?: any;
+            } | string | Uint8Array, signature: PalletImOnlineSr25519AppSr25519Signature | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature]>;
+        };
+        joystreamUtility: {
+            /**
+             * Burns token for caller account
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            burnAccountTokens: AugmentedSubmittable<(amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Runtime upgrade proposal extrinsic.
+             * Should be used as callable object to pass to the `engine` module.
+             * <weight>
+             *
+             * ## Weight
+             * `O (C)` where:
+             * - `C` is the length of `wasm`
+             * However, we treat this as a full block as `frame_system::Module::set_code` does
+             * # </weight>
+             * #[weight = (T::BlockWeights::get().get(DispatchClass::Operational).base_extrinsic, DispatchClass::Operational)]
+             **/
+            executeRuntimeUpgradeProposal: AugmentedSubmittable<(wasm: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Signal proposal extrinsic. Should be used as callable object to pass to the `engine` module.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the signal in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            executeSignalProposal: AugmentedSubmittable<(signal: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Update working group budget
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateWorkingGroupBudget: AugmentedSubmittable<(workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup | 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'App' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership' | number | Uint8Array, amount: u128 | AnyNumber | Uint8Array, balanceKind: PalletCommonBalanceKind | 'Positive' | 'Negative' | number | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletCommonWorkingGroupIterableEnumsWorkingGroup, u128, PalletCommonBalanceKind]>;
+        };
+        members: {
+            /**
+             * Add staking account candidate for a member.
+             * The membership must be confirmed before usage.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addStakingAccountCandidate: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Non-members can buy membership.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + M)` where:
+             * - `W` is the handle size in kilobytes
+             * - `M` is the metadata size in kilobytes
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            buyMembership: AugmentedSubmittable<(params: PalletMembershipBuyMembershipParameters | {
+                rootAccount?: any;
+                controllerAccount?: any;
+                handle?: any;
+                metadata?: any;
+                referrerId?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletMembershipBuyMembershipParameters]>;
+            /**
+             * Confirm staking account candidate for a member.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            confirmStakingAccount: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, stakingAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Create a member profile as root.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (I + J)` where:
+             * - `I` is the handle size in kilobytes
+             * - `J` is the metadata size in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            createMember: AugmentedSubmittable<(params: PalletMembershipCreateMemberParameters | {
+                rootAccount?: any;
+                controllerAccount?: any;
+                handle?: any;
+                metadata?: any;
+                isFoundingMember?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletMembershipCreateMemberParameters]>;
+            /**
+             * Gift a membership using own funds. Gifter does not need to be a member.
+             * Can optinally apply a lock on a portion of the funds transferred to root and controller
+             * accounts. Gifter also pays the membership fee.
+             **/
+            giftMembership: AugmentedSubmittable<(params: PalletMembershipGiftMembershipParameters | {
+                rootAccount?: any;
+                controllerAccount?: any;
+                handle?: any;
+                metadata?: any;
+                creditControllerAccount?: any;
+                applyControllerAccountInvitationLock?: any;
+                creditRootAccount?: any;
+                applyRootAccountInvitationLock?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletMembershipGiftMembershipParameters]>;
+            /**
+             * Invite a new member.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + M)` where:
+             * - `W` is the handle size in kilobytes
+             * - `M` is the metadata size in kilobytes
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            inviteMember: AugmentedSubmittable<(params: PalletMembershipInviteMembershipParameters | {
+                invitingMemberId?: any;
+                rootAccount?: any;
+                controllerAccount?: any;
+                handle?: any;
+                metadata?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletMembershipInviteMembershipParameters]>;
+            /**
+             * Member makes a remark
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array, payment: Option<ITuple<[AccountId32, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
+            /**
+             * Remove staking account for a member.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            removeStakingAccount: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Updates initial invitation balance for a invited member. Requires root origin.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setInitialInvitationBalance: AugmentedSubmittable<(newInitialBalance: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Updates initial invitation count for a member. Requires root origin.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setInitialInvitationCount: AugmentedSubmittable<(newInvitationCount: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+            /**
+             * Updates leader invitation quota. Requires root origin.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setLeaderInvitationQuota: AugmentedSubmittable<(invitationQuota: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+            /**
+             * Updates membership price. Requires root origin.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setMembershipPrice: AugmentedSubmittable<(newPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Updates membership referral cut percent value. Requires root origin.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setReferralCut: AugmentedSubmittable<(percentValue: u8 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u8]>;
+            /**
+             * Transfers invites from one member to another.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            transferInvites: AugmentedSubmittable<(sourceMemberId: u64 | AnyNumber | Uint8Array, targetMemberId: u64 | AnyNumber | Uint8Array, numberOfInvites: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u32]>;
+            /**
+             * Updates member root or controller accounts. No effect if both new accounts are empty.
+             *
+             * <weight>
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateAccounts: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, newRootAccount: Option<AccountId32> | null | object | string | Uint8Array, newControllerAccount: Option<AccountId32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<AccountId32>, Option<AccountId32>]>;
+            /**
+             * Update member's all or some of name, handle, avatar and about text.
+             * No effect if no changed fields.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + M)` where:
+             * - `W` is the handle size in kilobytes
+             * - `M` is the metadata size in kilobytes
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
+            updateProfile: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, handle: Option<Bytes> | null | object | string | Uint8Array, metadata: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>, Option<Bytes>]>;
+            /**
+             * Updates member profile verification status. Requires working group member origin.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateProfileVerification: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, targetMemberId: u64 | AnyNumber | Uint8Array, isVerified: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, bool]>;
+        };
+        membershipWorkingGroup: {
+            /**
+             * Add a job opening for a regular worker/lead role.
+             * Require signed leader origin or the root (to add opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | {
+                stakeAmount?: any;
+                leavingUnstakingPeriod?: any;
+            } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Apply on a worker opening.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `p.description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | {
+                memberId?: any;
+                openingId?: any;
+                roleAccountId?: any;
+                rewardAccountId?: any;
+                description?: any;
+                stakeParameters?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+            /**
+             * Cancel an opening for the regular worker/lead position.
+             * Require signed leader origin or the root (to cancel opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Decreases the regular worker/lead stake and returns the remainder to the
+             * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+             * Accepts the stake amount to decrease.
+             * Requires signed leader origin or the root (to decrease the leader stake).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Fill opening for the regular/lead position.
+             * Require signed leader origin or the root (to fill opening for the leader position).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `successful_application_ids`
+             * - DB:
+             * - O(A)
+             * # </weight>
+             **/
+            fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+            /**
+             * Fund working group budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Increases the regular worker/lead stake, demands a worker origin.
+             * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Lead remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Leave the role by the active worker.
+             * # <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+            /**
+             * Sets a new budget for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets a new status text for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+             *
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+            /**
+             * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+             * If slashing balance greater than the existing stake - stake is slashed to zero.
+             * Requires signed leader origin or the root (to slash the leader stake).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size of `penality.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+            /**
+             * Transfers specified amount to any account.
+             * Requires leader origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Terminate the active worker by the lead.
+             * Requires signed leader origin or the root (to terminate the leader role).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size `penalty.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Update the reward account associated with a set reward relationship for the active worker.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Update the reward per block for the active worker.
+             * Require signed leader origin or the root (to update leader's reward amount).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Update the associated role account of the active regular worker/lead.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Withdraw the worker application. Can be done by the worker only.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Worker remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+        };
+        multisig: {
+            /**
+             * Register approval for a dispatch to be made from a deterministic composite account if
+             * approved by a total of `threshold - 1` of `other_signatories`.
+             *
+             * Payment: `DepositBase` will be reserved if this is the first approval, plus
+             * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
+             * is cancelled.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `threshold`: The total number of approvals for this dispatch before it is executed.
+             * - `other_signatories`: The accounts (other than the sender) who can approve this
+             * dispatch. May not be empty.
+             * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
+             * not the first approval, then it must be `Some`, with the timepoint (block number and
+             * transaction index) of the first approval transaction.
+             * - `call_hash`: The hash of the call to be executed.
+             *
+             * NOTE: If this is the final approval, you will want to use `as_multi` instead.
+             *
+             * # <weight>
+             * - `O(S)`.
+             * - Up to one balance-reserve or unreserve operation.
+             * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+             * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+             * - One encode & hash, both of complexity `O(S)`.
+             * - Up to one binary search and insert (`O(logS + S)`).
+             * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
+             * - One event.
+             * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
+             * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
+             * ----------------------------------
+             * - DB Weight:
+             * - Read: Multisig Storage, [Caller Account]
+             * - Write: Multisig Storage, [Caller Account]
+             * # </weight>
+             **/
+            approveAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, callHash: U8aFixed | string | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, U8aFixed, u64]>;
+            /**
+             * Register approval for a dispatch to be made from a deterministic composite account if
+             * approved by a total of `threshold - 1` of `other_signatories`.
+             *
+             * If there are enough, then dispatch the call.
+             *
+             * Payment: `DepositBase` will be reserved if this is the first approval, plus
+             * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
+             * is cancelled.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `threshold`: The total number of approvals for this dispatch before it is executed.
+             * - `other_signatories`: The accounts (other than the sender) who can approve this
+             * dispatch. May not be empty.
+             * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
+             * not the first approval, then it must be `Some`, with the timepoint (block number and
+             * transaction index) of the first approval transaction.
+             * - `call`: The call to be executed.
+             *
+             * NOTE: Unless this is the final approval, you will generally want to use
+             * `approve_as_multi` instead, since it only requires a hash of the call.
+             *
+             * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
+             * on success, result is `Ok` and the result from the interior call, if it was executed,
+             * may be found in the deposited `MultisigExecuted` event.
+             *
+             * # <weight>
+             * - `O(S + Z + Call)`.
+             * - Up to one balance-reserve or unreserve operation.
+             * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+             * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+             * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
+             * - One encode & hash, both of complexity `O(S)`.
+             * - Up to one binary search and insert (`O(logS + S)`).
+             * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
+             * - One event.
+             * - The weight of the `call`.
+             * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
+             * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
+             * -------------------------------
+             * - DB Weight:
+             * - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)
+             * - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)
+             * - Plus Call Weight
+             * # </weight>
+             **/
+            asMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, call: WrapperKeepOpaque<Call> | object | string | Uint8Array, storeCall: bool | boolean | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, WrapperKeepOpaque<Call>, bool, u64]>;
+            /**
+             * Immediately dispatch a multi-signature call using a single approval from the caller.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `other_signatories`: The accounts (other than the sender) who are part of the
+             * multi-signature, but do not participate in the approval process.
+             * - `call`: The call to be executed.
+             *
+             * Result is equivalent to the dispatched result.
+             *
+             * # <weight>
+             * O(Z + C) where Z is the length of the call and C its execution weight.
+             * -------------------------------
+             * - DB Weight: None
+             * - Plus Call Weight
+             * # </weight>
+             **/
+            asMultiThreshold1: AugmentedSubmittable<(otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>, Call]>;
+            /**
+             * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
+             * for this operation will be unreserved on success.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `threshold`: The total number of approvals for this dispatch before it is executed.
+             * - `other_signatories`: The accounts (other than the sender) who can approve this
+             * dispatch. May not be empty.
+             * - `timepoint`: The timepoint (block number and transaction index) of the first approval
+             * transaction for this dispatch.
+             * - `call_hash`: The hash of the call to be executed.
+             *
+             * # <weight>
+             * - `O(S)`.
+             * - Up to one balance-reserve or unreserve operation.
+             * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+             * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+             * - One encode & hash, both of complexity `O(S)`.
+             * - One event.
+             * - I/O: 1 read `O(S)`, one remove.
+             * - Storage: removes one item.
+             * ----------------------------------
+             * - DB Weight:
+             * - Read: Multisig Storage, [Caller Account], Refund Account, Calls
+             * - Write: Multisig Storage, [Caller Account], Refund Account, Calls
+             * # </weight>
+             **/
+            cancelAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], timepoint: PalletMultisigTimepoint | {
+                height?: any;
+                index?: any;
+            } | string | Uint8Array, callHash: U8aFixed | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, PalletMultisigTimepoint, U8aFixed]>;
+        };
+        operationsWorkingGroupAlpha: {
+            /**
+             * Add a job opening for a regular worker/lead role.
+             * Require signed leader origin or the root (to add opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | {
+                stakeAmount?: any;
+                leavingUnstakingPeriod?: any;
+            } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Apply on a worker opening.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `p.description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | {
+                memberId?: any;
+                openingId?: any;
+                roleAccountId?: any;
+                rewardAccountId?: any;
+                description?: any;
+                stakeParameters?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+            /**
+             * Cancel an opening for the regular worker/lead position.
+             * Require signed leader origin or the root (to cancel opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Decreases the regular worker/lead stake and returns the remainder to the
+             * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+             * Accepts the stake amount to decrease.
+             * Requires signed leader origin or the root (to decrease the leader stake).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Fill opening for the regular/lead position.
+             * Require signed leader origin or the root (to fill opening for the leader position).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `successful_application_ids`
+             * - DB:
+             * - O(A)
+             * # </weight>
+             **/
+            fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+            /**
+             * Fund working group budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Increases the regular worker/lead stake, demands a worker origin.
+             * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Lead remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Leave the role by the active worker.
+             * # <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+            /**
+             * Sets a new budget for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets a new status text for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+             *
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+            /**
+             * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+             * If slashing balance greater than the existing stake - stake is slashed to zero.
+             * Requires signed leader origin or the root (to slash the leader stake).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size of `penality.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+            /**
+             * Transfers specified amount to any account.
+             * Requires leader origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Terminate the active worker by the lead.
+             * Requires signed leader origin or the root (to terminate the leader role).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size `penalty.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Update the reward account associated with a set reward relationship for the active worker.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Update the reward per block for the active worker.
+             * Require signed leader origin or the root (to update leader's reward amount).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Update the associated role account of the active regular worker/lead.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Withdraw the worker application. Can be done by the worker only.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Worker remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+        };
+        operationsWorkingGroupBeta: {
+            /**
+             * Add a job opening for a regular worker/lead role.
+             * Require signed leader origin or the root (to add opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | {
+                stakeAmount?: any;
+                leavingUnstakingPeriod?: any;
+            } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Apply on a worker opening.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `p.description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | {
+                memberId?: any;
+                openingId?: any;
+                roleAccountId?: any;
+                rewardAccountId?: any;
+                description?: any;
+                stakeParameters?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+            /**
+             * Cancel an opening for the regular worker/lead position.
+             * Require signed leader origin or the root (to cancel opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Decreases the regular worker/lead stake and returns the remainder to the
+             * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+             * Accepts the stake amount to decrease.
+             * Requires signed leader origin or the root (to decrease the leader stake).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Fill opening for the regular/lead position.
+             * Require signed leader origin or the root (to fill opening for the leader position).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `successful_application_ids`
+             * - DB:
+             * - O(A)
+             * # </weight>
+             **/
+            fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+            /**
+             * Fund working group budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Increases the regular worker/lead stake, demands a worker origin.
+             * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Lead remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Leave the role by the active worker.
+             * # <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+            /**
+             * Sets a new budget for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets a new status text for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+             *
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+            /**
+             * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+             * If slashing balance greater than the existing stake - stake is slashed to zero.
+             * Requires signed leader origin or the root (to slash the leader stake).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size of `penality.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+            /**
+             * Transfers specified amount to any account.
+             * Requires leader origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Terminate the active worker by the lead.
+             * Requires signed leader origin or the root (to terminate the leader role).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size `penalty.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Update the reward account associated with a set reward relationship for the active worker.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Update the reward per block for the active worker.
+             * Require signed leader origin or the root (to update leader's reward amount).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Update the associated role account of the active regular worker/lead.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Withdraw the worker application. Can be done by the worker only.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Worker remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+        };
+        operationsWorkingGroupGamma: {
+            /**
+             * Add a job opening for a regular worker/lead role.
+             * Require signed leader origin or the root (to add opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | {
+                stakeAmount?: any;
+                leavingUnstakingPeriod?: any;
+            } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Apply on a worker opening.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `p.description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | {
+                memberId?: any;
+                openingId?: any;
+                roleAccountId?: any;
+                rewardAccountId?: any;
+                description?: any;
+                stakeParameters?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+            /**
+             * Cancel an opening for the regular worker/lead position.
+             * Require signed leader origin or the root (to cancel opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Decreases the regular worker/lead stake and returns the remainder to the
+             * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+             * Accepts the stake amount to decrease.
+             * Requires signed leader origin or the root (to decrease the leader stake).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Fill opening for the regular/lead position.
+             * Require signed leader origin or the root (to fill opening for the leader position).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `successful_application_ids`
+             * - DB:
+             * - O(A)
+             * # </weight>
+             **/
+            fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+            /**
+             * Fund working group budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Increases the regular worker/lead stake, demands a worker origin.
+             * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Lead remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Leave the role by the active worker.
+             * # <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+            /**
+             * Sets a new budget for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets a new status text for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+             *
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+            /**
+             * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+             * If slashing balance greater than the existing stake - stake is slashed to zero.
+             * Requires signed leader origin or the root (to slash the leader stake).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size of `penality.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+            /**
+             * Transfers specified amount to any account.
+             * Requires leader origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Terminate the active worker by the lead.
+             * Requires signed leader origin or the root (to terminate the leader role).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size `penalty.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Update the reward account associated with a set reward relationship for the active worker.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Update the reward per block for the active worker.
+             * Require signed leader origin or the root (to update leader's reward amount).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Update the associated role account of the active regular worker/lead.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Withdraw the worker application. Can be done by the worker only.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Worker remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+        };
+        projectToken: {
+            /**
+             * Burn tokens from specified account
+             *
+             * Preconditions:
+             * - `amount` is > 0
+             * - origin signer is a controller account of `member_id` member
+             * - token by `token_id` exists
+             * - an account exists for `token_id` x `member_id`
+             * - account's tokens amount is >= `amount`
+             * - token supply can be modified (there is no active revenue split)
+             *
+             * Postconditions:
+             * - starting with `unprocessed` beeing equal to `amount`, account's vesting schedules
+             * are iterated over and:
+             * - updated with `burned_amount += uprocessed` if vesting schedule's unvested amount is
+             * greater than `uprocessed`
+             * - removed otherwise
+             * (after each iteration `unprocessed` is reduced by the amount of unvested tokens
+             * burned during that iteration)
+             * - if the account has any `split_staking_status`, the `split_staking_status.amount`
+             * is reduced by `min(amount, split_staking_status.amount)`
+             * - `account.amount` is reduced by `amount`
+             * - token supply is reduced by `amount`
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - `O(1)` - doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            burn: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * Mint desired `token_id` amount into user account via JOY exchnage
+             * Preconditions
+             * - origin, member_id pair must be a valid authentication pair
+             * - token_id must exist
+             * - user usable JOY balance must be enough for buying (+ existential deposit)
+             * - slippage tolerance constraints respected if provided
+             * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+             *
+             * Postconditions
+             * - `amount` CRT minted into account (which is created if necessary with existential deposit transferred to it)
+             * - respective JOY amount transferred from user balance to amm treasury account
+             * - event deposited
+             **/
+            buyOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
+            /**
+             * Allow any user to remove an account
+             *
+             * Preconditions:
+             * - token by `token_id` must exist
+             * - an account must exist for `token_id` x `member_id`
+             * - if Permissioned token: `origin` signer must be `member_id` member's
+             * controller account
+             * - `token_id` x `member_id` account must be an empty account
+             * (`account_data.amount` == 0)
+             * Postconditions:
+             * - Account information for `token_id` x `member_id` removed from storage
+             * - bloat bond refunded to `member_id` controller account
+             * (or `bloat_bond.repayment_restricted_to` account)
+             *
+             * <weight>
+             *
+             * `O (1)`
+             * - DB:
+             * - `O(1)` - doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            dustAccount: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+            /**
+             * Split-participating user leaves revenue split
+             * Preconditions
+             * - `token` must exist for `token_id`
+             * - `origin` signer must be `member_id` member controller account
+             * - `account` must exist for `(token_id, member_id)`
+             * - `account.staking status.is_some()'
+             * - if `(account.staking_status.split_id == token.next_revenue_split_id - 1`
+             * AND `token.revenue_split` is active) THEN split staking period  must be ended
+             *
+             * Postconditions
+             * - `account.staking_status` set to None
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - `O(1)` - doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            exitRevenueSplit: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+            /**
+             * Join whitelist for permissioned case: used to add accounts for token
+             * Preconditions:
+             * - 'token_id' must be valid
+             * - `origin` signer must be a controller account of `member_id`
+             * - account for `member_id` must not already exist
+             * - transfer policy is `Permissioned` and merkle proof must be valid
+             *
+             * Postconditions:
+             * - account for `member_id` created and added to pallet storage
+             * - `bloat_bond` transferred from sender to treasury account
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (H)` where:
+             * - `H` is the length of `proof.0`
+             * - DB:
+             * - `O(1)` - doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            joinWhitelist: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, proof: PalletProjectTokenMerkleProof) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProjectTokenMerkleProof]>;
+            /**
+             * Participate in the *latest* token revenue split (if ongoing)
+             * Preconditions:
+             * - `token` must exist for `token_id`
+             * - `origin` signer must be `member_id` member controller account
+             * - `amount` must be > 0
+             * - `account` must exist  for `(token_id, member_id)`
+             * - `token.split_status` must be active AND THEN current_block in
+             * [split.start, split.start + split_duration)
+             * - `account.staking_status.is_none()` OR `account.staking_status.split_id` refers to a past split
+             * - `account.amount` >= `amount`
+             * - let `dividend = split_allocation * account.staked_amount / token.supply``
+             * then `treasury` must be able to transfer `dividend` amount of JOY.
+             * (This condition technically, should always be satisfied)
+             *
+             * Postconditions
+             * - `dividend` amount of JOYs transferred from `treasury_account` to `sender`
+             * - `token` revenue split dividends payed tracking variable increased by `dividend`
+             * - `account.staking_status` set to Some(..) with `amount` and `token.latest_split`
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - `O(1)` - doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            participateInSplit: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * Purchase tokens on active token sale.
+             *
+             * Preconditions:
+             * - token by `token_id` must exist
+             * - token by `token_id` must be in OfferingState::Sale
+             * - `amount` cannot exceed number of tokens remaining on sale
+             * - `origin` signer must be controller account of `member_id` member
+             * - sender's available JOY balance must be:
+             * - >= `joy_existential_deposit + amount * sale.unit_price`
+             * if AccountData already exist
+             * - >= `joy_existential_deposit + amount * sale.unit_price + bloat_bond`
+             * if AccountData does not exist
+             * - let `fee_amount` be `sale_platform_fee.mul_floor(amount * sale.unit_price)`
+             * - if `sale.earnings_destination.is_some()` and `sale.earnings_destination` account has
+             * zero balance:
+             * - the amount to be transferred from `sender` to `sale.earnings_destination`,
+             * which is equal to `amount * sale.unit_price - fee_amount`, must be greater than
+             * `joy_existential_deposit`
+             * - total number of tokens already purchased by the member on the current sale
+             * PLUS `amount` must not exceed sale's purchase cap per member
+             * - if Permissioned token:
+             * - AccountInfoByTokenAndMember(token_id, &member_id) must exist
+             * - if `sale.vesting_schedule.is_some()`:
+             * - number of sender account's ongoing vesting schedules
+             * must be < MaxVestingSchedulesPerAccountPerToken
+             *
+             * Postconditions:
+             * - if `sale.earnings_destination.is_some()`:
+             * - `amount * sale.unit_price - fee_amount` JOY tokens are transfered from `sender`
+             * to `sale.earnings_destination`
+             * - `fee_amount` JOY is slashed from `sender` balance
+             * - if `sale.earnings_destination.is_none()`:
+             * - `amount * sale.unit_price` JOY is slashed from `sender` balance
+             * - if new token account created: `bloat_bond` transferred from `sender` to treasury
+             * - if `sale.vesting_schedule.is_some()`:
+             * - if buyer has no `vesting_schedule` related to the current sale:
+             * - a new vesting schedule (`sale.get_vesting_schedule(purchase_amount)`) is added to
+             * buyer's `vesing_schedules`
+             * - some finished vesting schedule is removed from buyer's account_data in case the
+             * number of buyer's vesting_schedules was == MaxVestingSchedulesPerAccountPerToken
+             * - if buyer already has a `vesting_schedule` related to the current sale:
+             * - current vesting schedule's `cliff_amount` is increased by
+             * `sale.get_vesting_schedule(purchase_amount).cliff_amount`
+             * - current vesting schedule's `post_cliff_total_amount` is increased by
+             * `sale.get_vesting_schedule(purchase_amount).post_cliff_total_amount`
+             * - if `sale.vesting_schedule.is_none()`:
+             * - buyer's account token amount increased by `amount`
+             * - if `token_data.sale.quantity_left - amount == 0` and `sale.auto_finalize` is `true`
+             * `token_data.sale` is set to None, otherwise `token_data.sale.quantity_left` is
+             * decreased by `amount` and `token_data.sale.funds_collected` in increased by
+             * `amount * sale.unit_price`
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - `O(1)` - doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            purchaseTokensOnSale: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * Burn desired `token_id` amount from user account and get JOY from treasury account
+             * Preconditions
+             * - origin, member_id pair must be a valid authentication pair
+             * - token_id must exist
+             * - token_id, member_id must be valid account coordinates
+             * - user usable CRT balance must be at least `amount`
+             * - slippage tolerance constraints respected if provided
+             * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+             * - amm treasury account must have sufficient JOYs for the operation
+             *
+             * Postconditions
+             * - `amount` burned from user account
+             * - total supply decreased by amount
+             * - respective JOY amount transferred from amm treasury account to user account
+             * - event deposited
+             **/
+            sellOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
+            /**
+             * Allow to transfer from `src_member_id` account to the various `outputs` beneficiaries
+             * in the specified amounts.
+             *
+             * Preconditions:
+             * - origin signer must be `src_member_id` controller account
+             * - token by `token_id` must exists
+             * - account of `src_member_id` must exist for `token_id`
+             * - sender must have enough JOYs to cover the total bloat bond required in case of
+             * destination(s) not existing.
+             * - source account must have enough token funds to cover all the transfer(s)
+             * - `outputs` must designate existing destination(s) for "Permissioned" transfers.
+             * Postconditions:
+             * - source account's tokens amount is decreased by `amount`.
+             * - total bloat bond transferred from sender's JOY balance into the treasury account
+             * in case destination(s) have been added to storage
+             * - `outputs.beneficiary` tokens amount increased by `amount`
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (T + M)` where:
+             * - `T` is the length of `outputs`
+             * - `M` is the size of `metadata` in kilobytes
+             * - DB:
+             * - `O(T)` - from the the generated weights
+             * # </weight>
+             **/
+            transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: Vec<ITuple<[u64, u128]>> | ([u64 | AnyNumber | Uint8Array, u128 | AnyNumber | Uint8Array])[], metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Vec<ITuple<[u64, u128]>>, Bytes]>;
+            updateMaxYearlyPatronageRate: AugmentedSubmittable<(rate: Permill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Permill]>;
+        };
+        proposalsCodex: {
+            /**
+             * Create a proposal, the type of proposal depends on the `proposal_details` variant
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (T + D + I)` where:
+             * - `T` is the title size in kilobytes
+             * - `D` is the description size in kilobytes
+             * - `I` is the size of any parameter in `proposal_details`
+             * (in kilobytes if it's metadata)
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            createProposal: AugmentedSubmittable<(generalProposalParameters: PalletProposalsCodexGeneralProposalParams | {
+                memberId?: any;
+                title?: any;
+                description?: any;
+                stakingAccountId?: any;
+                exactExecutionBlock?: any;
+            } | string | Uint8Array, proposalDetails: PalletProposalsCodexProposalDetails | {
+                Signal: any;
+            } | {
+                RuntimeUpgrade: any;
+            } | {
+                FundingRequest: any;
+            } | {
+                SetMaxValidatorCount: any;
+            } | {
+                CreateWorkingGroupLeadOpening: any;
+            } | {
+                FillWorkingGroupLeadOpening: any;
+            } | {
+                UpdateWorkingGroupBudget: any;
+            } | {
+                DecreaseWorkingGroupLeadStake: any;
+            } | {
+                SlashWorkingGroupLead: any;
+            } | {
+                SetWorkingGroupLeadReward: any;
+            } | {
+                TerminateWorkingGroupLead: any;
+            } | {
+                AmendConstitution: any;
+            } | {
+                CancelWorkingGroupLeadOpening: any;
+            } | {
+                SetMembershipPrice: any;
+            } | {
+                SetCouncilBudgetIncrement: any;
+            } | {
+                SetCouncilorReward: any;
+            } | {
+                SetInitialInvitationBalance: any;
+            } | {
+                SetInitialInvitationCount: any;
+            } | {
+                SetMembershipLeadInvitationQuota: any;
+            } | {
+                SetReferralCut: any;
+            } | {
+                VetoProposal: any;
+            } | {
+                UpdateGlobalNftLimit: any;
+            } | {
+                UpdateChannelPayouts: any;
+            } | {
+                UpdateMaxYearlyPatronageRate: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails]>;
+        };
+        proposalsDiscussion: {
+            /**
+             * Adds a post with author origin check.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (L)` where:
+             * - `L` is the size of `text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addPost: AugmentedSubmittable<(postAuthorId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, text: Bytes | string | Uint8Array, editable: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes, bool]>;
+            /**
+             * Changes thread permission mode.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` if ThreadMode is close or O(1) otherwise where:
+             * - `W` is the number of whitelisted members in `mode`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            changeThreadMode: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, mode: PalletProposalsDiscussionThreadModeBTreeSet | {
+                Open: any;
+            } | {
+                Closed: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProposalsDiscussionThreadModeBTreeSet]>;
+            /**
+             * Remove post from storage, with the last parameter indicating whether to also hide it
+             * in the UI.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            deletePost: AugmentedSubmittable<(deleterId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, hide: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, bool]>;
+            /**
+             * Updates a post with author origin check. Update attempts number is limited.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (L)` where:
+             * - `L` is the size of `text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updatePost: AugmentedSubmittable<(threadId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, text: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
+        };
+        proposalsEngine: {
+            /**
+             * Cancel a proposal by its original proposer.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (L)` where:
+             * - `L` is the total number of locks in `Balances`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelProposal: AugmentedSubmittable<(proposerId: u64 | AnyNumber | Uint8Array, proposalId: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u32]>;
+            /**
+             * Proposer Remark
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            proposerRemark: AugmentedSubmittable<(proposalId: u32 | AnyNumber | Uint8Array, proposerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32, u64, Bytes]>;
+            /**
+             * Veto a proposal. Must be root.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            vetoProposal: AugmentedSubmittable<(proposalId: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+            /**
+             * Vote extrinsic. Conditions:  origin must allow votes.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or paraemters
+             * # </weight>
+             **/
+            vote: AugmentedSubmittable<(voterId: u64 | AnyNumber | Uint8Array, proposalId: u32 | AnyNumber | Uint8Array, vote: PalletProposalsEngineVoteKind | 'Approve' | 'Reject' | 'Slash' | 'Abstain' | number | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
+        };
+        referendum: {
+            /**
+             * Permanently opt out of voting from a given account.
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            optOutOfVoting: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+            /**
+             * Release a locked stake.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            releaseVoteStake: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+            /**
+             * Reveal a sealed vote in the referendum.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is the number of `intermediate_winners` stored in the current
+             * `Stage::<T, I>::get()`
+             * - DB:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            revealVote: AugmentedSubmittable<(salt: Bytes | string | Uint8Array, voteOptionId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, u64]>;
+            /**
+             * Cast a sealed vote in the referendum.
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            vote: AugmentedSubmittable<(commitment: H256 | string | Uint8Array, stake: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [H256, u128]>;
+        };
+        session: {
+            /**
+             * Removes any session key(s) of the function caller.
+             *
+             * This doesn't take effect until the next session.
+             *
+             * The dispatch origin of this function must be Signed and the account must be either be
+             * convertible to a validator ID using the chain's typical addressing system (this usually
+             * means being a controller account) or directly convertible into a validator ID (which
+             * usually means being a stash account).
+             *
+             * # <weight>
+             * - Complexity: `O(1)` in number of key types. Actual cost depends on the number of length
+             * of `T::Keys::key_ids()` which is fixed.
+             * - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`
+             * - DbWrites: `NextKeys`, `origin account`
+             * - DbWrites per key id: `KeyOwner`
+             * # </weight>
+             **/
+            purgeKeys: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+            /**
+             * Sets the session key(s) of the function caller to `keys`.
+             * Allows an account to set its session key prior to becoming a validator.
+             * This doesn't take effect until the next session.
+             *
+             * The dispatch origin of this function must be signed.
+             *
+             * # <weight>
+             * - Complexity: `O(1)`. Actual cost depends on the number of length of
+             * `T::Keys::key_ids()` which is fixed.
+             * - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`
+             * - DbWrites: `origin account`, `NextKeys`
+             * - DbReads per key id: `KeyOwner`
+             * - DbWrites per key id: `KeyOwner`
+             * # </weight>
+             **/
+            setKeys: AugmentedSubmittable<(keys: JoystreamNodeRuntimeSessionKeys | {
+                grandpa?: any;
+                babe?: any;
+                imOnline?: any;
+                authorityDiscovery?: any;
+            } | string | Uint8Array, proof: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [JoystreamNodeRuntimeSessionKeys, Bytes]>;
+        };
+        staking: {
+            /**
+             * Take the origin account as a stash and lock up `value` of its balance. `controller` will
+             * be the account that controls it.
+             *
+             * `value` must be more than the `minimum_balance` specified by `T::Currency`.
+             *
+             * The dispatch origin for this call must be _Signed_ by the stash account.
+             *
+             * Emits `Bonded`.
+             * # <weight>
+             * - Independent of the arguments. Moderate complexity.
+             * - O(1).
+             * - Three extra DB entries.
+             *
+             * NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned
+             * unless the `origin` falls below _existential deposit_ and gets removed as dust.
+             * ------------------
+             * # </weight>
+             **/
+            bond: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array, payee: PalletStakingRewardDestination | {
+                Staked: any;
+            } | {
+                Stash: any;
+            } | {
+                Controller: any;
+            } | {
+                Account: any;
+            } | {
+                None: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>, PalletStakingRewardDestination]>;
+            /**
+             * Add some extra amount that have appeared in the stash `free_balance` into the balance up
+             * for staking.
+             *
+             * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
+             *
+             * Use this if there are additional funds in your stash account that you wish to bond.
+             * Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose
+             * any limitation on the amount that can be added.
+             *
+             * Emits `Bonded`.
+             *
+             * # <weight>
+             * - Independent of the arguments. Insignificant complexity.
+             * - O(1).
+             * # </weight>
+             **/
+            bondExtra: AugmentedSubmittable<(maxAdditional: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
+            /**
+             * Cancel enactment of a deferred slash.
+             *
+             * Can be called by the `T::SlashCancelOrigin`.
+             *
+             * Parameters: era and indices of the slashes for that era to kill.
+             **/
+            cancelDeferredSlash: AugmentedSubmittable<(era: u32 | AnyNumber | Uint8Array, slashIndices: Vec<u32> | (u32 | AnyNumber | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [u32, Vec<u32>]>;
+            /**
+             * Declare no desire to either validate or nominate.
+             *
+             * Effects will be felt at the beginning of the next era.
+             *
+             * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+             *
+             * # <weight>
+             * - Independent of the arguments. Insignificant complexity.
+             * - Contains one read.
+             * - Writes are limited to the `origin` account key.
+             * # </weight>
+             **/
+            chill: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+            /**
+             * Declare a `controller` to stop participating as either a validator or nominator.
+             *
+             * Effects will be felt at the beginning of the next era.
+             *
+             * The dispatch origin for this call must be _Signed_, but can be called by anyone.
+             *
+             * If the caller is the same as the controller being targeted, then no further checks are
+             * enforced, and this function behaves just like `chill`.
+             *
+             * If the caller is different than the controller being targeted, the following conditions
+             * must be met:
+             *
+             * * `controller` must belong to a nominator who has become non-decodable,
+             *
+             * Or:
+             *
+             * * A `ChillThreshold` must be set and checked which defines how close to the max
+             * nominators or validators we must reach before users can start chilling one-another.
+             * * A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine
+             * how close we are to the threshold.
+             * * A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines
+             * if this is a person that should be chilled because they have not met the threshold
+             * bond required.
+             *
+             * This can be helpful if bond requirements are updated, and we need to remove old users
+             * who do not satisfy these requirements.
+             **/
+            chillOther: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+            /**
+             * Force a validator to have at least the minimum commission. This will not affect a
+             * validator who already has a commission greater than or equal to the minimum. Any account
+             * can call this.
+             **/
+            forceApplyMinCommission: AugmentedSubmittable<(validatorStash: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+            /**
+             * Force there to be a new era at the end of the next session. After this, it will be
+             * reset to normal (non-forced) behaviour.
+             *
+             * The dispatch origin must be Root.
+             *
+             * # Warning
+             *
+             * The election process starts multiple blocks before the end of the era.
+             * If this is called just before a new era is triggered, the election process may not
+             * have enough blocks to get a result.
+             *
+             * # <weight>
+             * - No arguments.
+             * - Weight: O(1)
+             * - Write ForceEra
+             * # </weight>
+             **/
+            forceNewEra: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+            /**
+             * Force there to be a new era at the end of sessions indefinitely.
+             *
+             * The dispatch origin must be Root.
+             *
+             * # Warning
+             *
+             * The election process starts multiple blocks before the end of the era.
+             * If this is called just before a new era is triggered, the election process may not
+             * have enough blocks to get a result.
+             **/
+            forceNewEraAlways: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+            /**
+             * Force there to be no new eras indefinitely.
+             *
+             * The dispatch origin must be Root.
+             *
+             * # Warning
+             *
+             * The election process starts multiple blocks before the end of the era.
+             * Thus the election process may be ongoing when this is called. In this case the
+             * election will continue until the next era is triggered.
+             *
+             * # <weight>
+             * - No arguments.
+             * - Weight: O(1)
+             * - Write: ForceEra
+             * # </weight>
+             **/
+            forceNoEras: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+            /**
+             * Force a current staker to become completely unstaked, immediately.
+             *
+             * The dispatch origin must be Root.
+             **/
+            forceUnstake: AugmentedSubmittable<(stash: AccountId32 | string | Uint8Array, numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
+            /**
+             * Increments the ideal number of validators.
+             *
+             * The dispatch origin must be Root.
+             *
+             * # <weight>
+             * Same as [`Self::set_validator_count`].
+             * # </weight>
+             **/
+            increaseValidatorCount: AugmentedSubmittable<(additional: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>]>;
+            /**
+             * Remove the given nominations from the calling validator.
+             *
+             * Effects will be felt at the beginning of the next era.
+             *
+             * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+             *
+             * - `who`: A list of nominator stash accounts who are nominating this validator which
+             * should no longer be nominating this validator.
+             *
+             * Note: Making this call only makes sense if you first set the validator preferences to
+             * block any further nominations.
+             **/
+            kick: AugmentedSubmittable<(who: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
+            /**
+             * Declare the desire to nominate `targets` for the origin controller.
+             *
+             * Effects will be felt at the beginning of the next era.
+             *
+             * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+             *
+             * # <weight>
+             * - The transaction's complexity is proportional to the size of `targets` (N)
+             * which is capped at CompactAssignments::LIMIT (T::MaxNominations).
+             * - Both the reads and writes follow a similar pattern.
+             * # </weight>
+             **/
+            nominate: AugmentedSubmittable<(targets: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
+            /**
+             * Pay out all the stakers behind a single validator for a single era.
+             *
+             * - `validator_stash` is the stash account of the validator. Their nominators, up to
+             * `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.
+             * - `era` may be any era between `[current_era - history_depth; current_era]`.
+             *
+             * The origin of this call must be _Signed_. Any account can call this function, even if
+             * it is not one of the stakers.
+             *
+             * # <weight>
+             * - Time complexity: at most O(MaxNominatorRewardedPerValidator).
+             * - Contains a limited number of reads and writes.
+             * -----------
+             * N is the Number of payouts for the validator (including the validator)
+             * Weight:
+             * - Reward Destination Staked: O(N)
+             * - Reward Destination Controller (Creating): O(N)
+             *
+             * NOTE: weights are assuming that payouts are made to alive stash account (Staked).
+             * Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.
+             * # </weight>
+             **/
+            payoutStakers: AugmentedSubmittable<(validatorStash: AccountId32 | string | Uint8Array, era: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
+            /**
+             * Remove all data structures concerning a staker/stash once it is at a state where it can
+             * be considered `dust` in the staking system. The requirements are:
+             *
+             * 1. the `total_balance` of the stash is below existential deposit.
+             * 2. or, the `ledger.total` of the stash is below existential deposit.
+             *
+             * The former can happen in cases like a slash; the latter when a fully unbonded account
+             * is still receiving staking rewards in `RewardDestination::Staked`.
+             *
+             * It can be called by anyone, as long as `stash` meets the above requirements.
+             *
+             * Refunds the transaction fees upon successful execution.
+             **/
+            reapStash: AugmentedSubmittable<(stash: AccountId32 | string | Uint8Array, numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
+            /**
+             * Rebond a portion of the stash scheduled to be unlocked.
+             *
+             * The dispatch origin must be signed by the controller.
+             *
+             * # <weight>
+             * - Time complexity: O(L), where L is unlocking chunks
+             * - Bounded by `MaxUnlockingChunks`.
+             * - Storage changes: Can't increase storage, only decrease it.
+             * # </weight>
+             **/
+            rebond: AugmentedSubmittable<(value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
+            /**
+             * Scale up the ideal number of validators by a factor.
+             *
+             * The dispatch origin must be Root.
+             *
+             * # <weight>
+             * Same as [`Self::set_validator_count`].
+             * # </weight>
+             **/
+            scaleValidatorCount: AugmentedSubmittable<(factor: Percent | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Percent]>;
+            /**
+             * (Re-)set the controller of a stash.
+             *
+             * Effects will be felt instantly (as soon as this function is completed successfully).
+             *
+             * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
+             *
+             * # <weight>
+             * - Independent of the arguments. Insignificant complexity.
+             * - Contains a limited number of reads.
+             * - Writes are limited to the `origin` account key.
+             * ----------
+             * Weight: O(1)
+             * DB Weight:
+             * - Read: Bonded, Ledger New Controller, Ledger Old Controller
+             * - Write: Bonded, Ledger New Controller, Ledger Old Controller
+             * # </weight>
+             **/
+            setController: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+            /**
+             * Set `HistoryDepth` value. This function will delete any history information
+             * when `HistoryDepth` is reduced.
+             *
+             * Parameters:
+             * - `new_history_depth`: The new history depth you would like to set.
+             * - `era_items_deleted`: The number of items that will be deleted by this dispatch. This
+             * should report all the storage items that will be deleted by clearing old era history.
+             * Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an
+             * accurate number.
+             *
+             * Origin must be root.
+             *
+             * # <weight>
+             * - E: Number of history depths removed, i.e. 10 -> 7 = 3
+             * - Weight: O(E)
+             * - DB Weight:
+             * - Reads: Current Era, History Depth
+             * - Writes: History Depth
+             * - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs
+             * - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,
+             * ErasStartSessionIndex
+             * # </weight>
+             **/
+            setHistoryDepth: AugmentedSubmittable<(newHistoryDepth: Compact<u32> | AnyNumber | Uint8Array, eraItemsDeleted: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>, Compact<u32>]>;
+            /**
+             * Set the validators who cannot be slashed (if any).
+             *
+             * The dispatch origin must be Root.
+             **/
+            setInvulnerables: AugmentedSubmittable<(invulnerables: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
+            /**
+             * (Re-)set the payment target for a controller.
+             *
+             * Effects will be felt instantly (as soon as this function is completed successfully).
+             *
+             * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+             *
+             * # <weight>
+             * - Independent of the arguments. Insignificant complexity.
+             * - Contains a limited number of reads.
+             * - Writes are limited to the `origin` account key.
+             * ---------
+             * - Weight: O(1)
+             * - DB Weight:
+             * - Read: Ledger
+             * - Write: Payee
+             * # </weight>
+             **/
+            setPayee: AugmentedSubmittable<(payee: PalletStakingRewardDestination | {
+                Staked: any;
+            } | {
+                Stash: any;
+            } | {
+                Controller: any;
+            } | {
+                Account: any;
+            } | {
+                None: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStakingRewardDestination]>;
+            /**
+             * Update the various staking configurations .
+             *
+             * * `min_nominator_bond`: The minimum active bond needed to be a nominator.
+             * * `min_validator_bond`: The minimum active bond needed to be a validator.
+             * * `max_nominator_count`: The max number of users who can be a nominator at once. When
+             * set to `None`, no limit is enforced.
+             * * `max_validator_count`: The max number of users who can be a validator at once. When
+             * set to `None`, no limit is enforced.
+             * * `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which
+             * should be filled in order for the `chill_other` transaction to work.
+             * * `min_commission`: The minimum amount of commission that each validators must maintain.
+             * This is checked only upon calling `validate`. Existing validators are not affected.
+             *
+             * Origin must be Root to call this function.
+             *
+             * NOTE: Existing nominators and validators will not be affected by this update.
+             * to kick people under the new limits, `chill_other` should be called.
+             **/
+            setStakingConfigs: AugmentedSubmittable<(minNominatorBond: PalletStakingPalletConfigOpU128 | {
+                Noop: any;
+            } | {
+                Set: any;
+            } | {
+                Remove: any;
+            } | string | Uint8Array, minValidatorBond: PalletStakingPalletConfigOpU128 | {
+                Noop: any;
+            } | {
+                Set: any;
+            } | {
+                Remove: any;
+            } | string | Uint8Array, maxNominatorCount: PalletStakingPalletConfigOpU32 | {
+                Noop: any;
+            } | {
+                Set: any;
+            } | {
+                Remove: any;
+            } | string | Uint8Array, maxValidatorCount: PalletStakingPalletConfigOpU32 | {
+                Noop: any;
+            } | {
+                Set: any;
+            } | {
+                Remove: any;
+            } | string | Uint8Array, chillThreshold: PalletStakingPalletConfigOpPercent | {
+                Noop: any;
+            } | {
+                Set: any;
+            } | {
+                Remove: any;
+            } | string | Uint8Array, minCommission: PalletStakingPalletConfigOpPerbill | {
+                Noop: any;
+            } | {
+                Set: any;
+            } | {
+                Remove: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletConfigOpU32, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpPerbill]>;
+            /**
+             * Sets the ideal number of validators.
+             *
+             * The dispatch origin must be Root.
+             *
+             * # <weight>
+             * Weight: O(1)
+             * Write: Validator Count
+             * # </weight>
+             **/
+            setValidatorCount: AugmentedSubmittable<(updated: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>]>;
+            /**
+             * Schedule a portion of the stash to be unlocked ready for transfer out after the bond
+             * period ends. If this leaves an amount actively bonded less than
+             * T::Currency::minimum_balance(), then it is increased to the full amount.
+             *
+             * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+             *
+             * Once the unlock period is done, you can call `withdraw_unbonded` to actually move
+             * the funds out of management ready for transfer.
+             *
+             * No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)
+             * can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need
+             * to be called first to remove some of the chunks (if possible).
+             *
+             * If a user encounters the `InsufficientBond` error when calling this extrinsic,
+             * they should call `chill` first in order to free up their bonded funds.
+             *
+             * Emits `Unbonded`.
+             *
+             * See also [`Call::withdraw_unbonded`].
+             **/
+            unbond: AugmentedSubmittable<(value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
+            /**
+             * Declare the desire to validate for the origin controller.
+             *
+             * Effects will be felt at the beginning of the next era.
+             *
+             * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+             **/
+            validate: AugmentedSubmittable<(prefs: PalletStakingValidatorPrefs | {
+                commission?: any;
+                blocked?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStakingValidatorPrefs]>;
+            /**
+             * Remove any unlocked chunks from the `unlocking` queue from our management.
+             *
+             * This essentially frees up that balance to be used by the stash account to do
+             * whatever it wants.
+             *
+             * The dispatch origin for this call must be _Signed_ by the controller.
+             *
+             * Emits `Withdrawn`.
+             *
+             * See also [`Call::unbond`].
+             *
+             * # <weight>
+             * Complexity O(S) where S is the number of slashing spans to remove
+             * NOTE: Weight annotation is the kill scenario, we refund otherwise.
+             * # </weight>
+             **/
+            withdrawUnbonded: AugmentedSubmittable<(numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+        };
+        storage: {
+            /**
+             * Accept pending invite.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            acceptDistributionBucketInvitation: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, bucketId: PalletStorageDistributionBucketIdRecord | {
+                distributionBucketFamilyId?: any;
+                distributionBucketIndex?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletStorageDistributionBucketIdRecord]>;
+            /**
+             * A storage provider signals that the data object was successfully uploaded to its storage.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W )` where:
+             * - `W` is the number of items in `data_objects`
+             * - DB:
+             * - `O(W)` - from the the generated weights
+             * # </weight>
+             **/
+            acceptPendingDataObjects: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, bagId: PalletStorageBagIdType | {
+                Static: any;
+            } | {
+                Dynamic: any;
+            } | string | Uint8Array, dataObjects: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletStorageBagIdType, BTreeSet<u64>]>;
+            /**
+             * Accept the storage bucket invitation. An invitation must match the worker_id parameter.
+             * It accepts an additional account ID (transactor) for accepting data objects to prevent
+             * transaction nonce collisions.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            acceptStorageBucketInvitation: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, transactorAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, AccountId32]>;
+            /**
+             * Cancel pending invite. Must be pending.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelDistributionBucketOperatorInvite: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | {
+                distributionBucketFamilyId?: any;
+                distributionBucketIndex?: any;
+            } | string | Uint8Array, operatorWorkerId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, u64]>;
+            /**
+             * Cancel pending storage bucket invite. An invitation must be pending.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelStorageBucketOperatorInvite: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Create a distribution bucket.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            createDistributionBucket: AugmentedSubmittable<(familyId: u64 | AnyNumber | Uint8Array, acceptingNewBags: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, bool]>;
+            /**
+             * Create a distribution bucket family.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            createDistributionBucketFamily: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+            /**
+             * Create storage bucket.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            createStorageBucket: AugmentedSubmittable<(inviteWorker: Option<u64> | null | object | string | Uint8Array, acceptingNewBags: bool | boolean | Uint8Array, sizeLimit: u64 | AnyNumber | Uint8Array, objectsLimit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<u64>, bool, u64, u64]>;
+            /**
+             * Delete distribution bucket. Must be empty.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            deleteDistributionBucket: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | {
+                distributionBucketFamilyId?: any;
+                distributionBucketIndex?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord]>;
+            /**
+             * Deletes a distribution bucket family.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            deleteDistributionBucketFamily: AugmentedSubmittable<(familyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Delete storage bucket. Must be empty. Storage operator must be missing.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            deleteStorageBucket: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Create a dynamic bag. Development mode.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is size of `message` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            distributionOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, distributionBucketId: PalletStorageDistributionBucketIdRecord | {
+                distributionBucketFamilyId?: any;
+                distributionBucketIndex?: any;
+            } | string | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+            /**
+             * Invite an operator. Must be missing.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            inviteDistributionBucketOperator: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | {
+                distributionBucketFamilyId?: any;
+                distributionBucketIndex?: any;
+            } | string | Uint8Array, operatorWorkerId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, u64]>;
+            /**
+             * Invite storage bucket operator. Must be missing.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            inviteStorageBucketOperator: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array, operatorId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+            /**
+             * Removes distribution bucket operator.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            removeDistributionBucketOperator: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | {
+                distributionBucketFamilyId?: any;
+                distributionBucketIndex?: any;
+            } | string | Uint8Array, operatorWorkerId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, u64]>;
+            /**
+             * Removes storage bucket operator.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            removeStorageBucketOperator: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Set distribution bucket family metadata.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is size of `metadata` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setDistributionBucketFamilyMetadata: AugmentedSubmittable<(familyId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+            /**
+             * Set distribution operator metadata for the distribution bucket.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is size of `metadata` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setDistributionOperatorMetadata: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, bucketId: PalletStorageDistributionBucketIdRecord | {
+                distributionBucketFamilyId?: any;
+                distributionBucketIndex?: any;
+            } | string | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+            /**
+             * Sets storage bucket voucher limits.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStorageBucketVoucherLimits: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array, newObjectsSizeLimit: u64 | AnyNumber | Uint8Array, newObjectsNumberLimit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64]>;
+            /**
+             * Sets storage operator metadata (eg.: storage node URL).
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is size of `metadata` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStorageOperatorMetadata: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
+            /**
+             * Deposit a StorageOperatorRemarked event
+             * containing a generic message.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is size of `message` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            storageOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
+            /**
+             * Add and remove hashes to the current blacklist.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V)` where:
+             * - `W` is the number of items in `remove_hashes`
+             * - `V` is the number of items in `add_hashes`
+             * - DB:
+             * - `O(W)` - from the the generated weights
+             * # </weight>
+             **/
+            updateBlacklist: AugmentedSubmittable<(removeHashes: BTreeSet<Bytes>, addHashes: BTreeSet<Bytes>) => SubmittableExtrinsic<ApiType>, [BTreeSet<Bytes>, BTreeSet<Bytes>]>;
+            /**
+             * Updates data object state bloat bond value.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateDataObjectStateBloatBond: AugmentedSubmittable<(stateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Updates size-based pricing of new objects uploaded.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateDataSizeFee: AugmentedSubmittable<(newDataSizeFee: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Updates 'distributing' flag for the distributing flag.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateDistributionBucketMode: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | {
+                distributionBucketFamilyId?: any;
+                distributionBucketIndex?: any;
+            } | string | Uint8Array, distributing: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, bool]>;
+            /**
+             * Updates distribution buckets for a bag.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V)` where:
+             * - `W` is the number of items in `add_buckets_indices`
+             * - `V` is the number of items in `remove_buckets_indices`
+             * - DB:
+             * - `O(V + W)` - from the the generated weights
+             * # </weight>
+             **/
+            updateDistributionBucketsForBag: AugmentedSubmittable<(bagId: PalletStorageBagIdType | {
+                Static: any;
+            } | {
+                Dynamic: any;
+            } | string | Uint8Array, familyId: u64 | AnyNumber | Uint8Array, addBucketsIndices: BTreeSet<u64>, removeBucketsIndices: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [PalletStorageBagIdType, u64, BTreeSet<u64>, BTreeSet<u64>]>;
+            /**
+             * Updates "Distribution buckets per bag" number limit.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateDistributionBucketsPerBagLimit: AugmentedSubmittable<(newLimit: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+            /**
+             * Updates a distribution bucket 'accepts new bags' flag.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateDistributionBucketStatus: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | {
+                distributionBucketFamilyId?: any;
+                distributionBucketIndex?: any;
+            } | string | Uint8Array, acceptingNewBags: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, bool]>;
+            /**
+             * Update number of distributed buckets used in given dynamic bag creation policy.
+             * Updates distribution buckets for a bag.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is the number of items in `families`
+             * - DB:
+             * - `O(W)` - from the the generated weights
+             * # </weight>
+             **/
+            updateFamiliesInDynamicBagCreationPolicy: AugmentedSubmittable<(dynamicBagType: PalletStorageDynamicBagType | 'Member' | 'Channel' | number | Uint8Array, families: BTreeMap<u64, u32>) => SubmittableExtrinsic<ApiType>, [PalletStorageDynamicBagType, BTreeMap<u64, u32>]>;
+            /**
+             * Update number of storage buckets used in given dynamic bag creation policy.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateNumberOfStorageBucketsInDynamicBagCreationPolicy: AugmentedSubmittable<(dynamicBagType: PalletStorageDynamicBagType | 'Member' | 'Channel' | number | Uint8Array, numberOfStorageBuckets: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDynamicBagType, u32]>;
+            /**
+             * Updates storage buckets for a bag.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + V)` where:
+             * - `W` is the number of items in `add_buckets`
+             * - `V` is the number of items in `remove_buckets`
+             * - DB:
+             * - `O(V + W)` - from the the generated weights
+             * # </weight>
+             **/
+            updateStorageBucketsForBag: AugmentedSubmittable<(bagId: PalletStorageBagIdType | {
+                Static: any;
+            } | {
+                Dynamic: any;
+            } | string | Uint8Array, addBuckets: BTreeSet<u64>, removeBuckets: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [PalletStorageBagIdType, BTreeSet<u64>, BTreeSet<u64>]>;
+            /**
+             * Updates "Storage buckets per bag" number limit.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateStorageBucketsPerBagLimit: AugmentedSubmittable<(newLimit: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+            /**
+             * Update whether new bags are being accepted for storage.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateStorageBucketStatus: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array, acceptingNewBags: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, bool]>;
+            /**
+             * Updates "Storage buckets voucher max limits".
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateStorageBucketsVoucherMaxLimits: AugmentedSubmittable<(newObjectsSize: u64 | AnyNumber | Uint8Array, newObjectsNumber: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+            /**
+             * Updates global uploading flag.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateUploadingBlockedStatus: AugmentedSubmittable<(newStatus: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [bool]>;
+        };
+        storageWorkingGroup: {
+            /**
+             * Add a job opening for a regular worker/lead role.
+             * Require signed leader origin or the root (to add opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | {
+                stakeAmount?: any;
+                leavingUnstakingPeriod?: any;
+            } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+            /**
+             * Apply on a worker opening.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (D)` where:
+             * - `D` is the size of `p.description` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | {
+                memberId?: any;
+                openingId?: any;
+                roleAccountId?: any;
+                rewardAccountId?: any;
+                description?: any;
+                stakeParameters?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+            /**
+             * Cancel an opening for the regular worker/lead position.
+             * Require signed leader origin or the root (to cancel opening for the leader position).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Decreases the regular worker/lead stake and returns the remainder to the
+             * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+             * Accepts the stake amount to decrease.
+             * Requires signed leader origin or the root (to decrease the leader stake).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Fill opening for the regular/lead position.
+             * Require signed leader origin or the root (to fill opening for the leader position).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `successful_application_ids`
+             * - DB:
+             * - O(A)
+             * # </weight>
+             **/
+            fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+            /**
+             * Fund working group budget by a member.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` Doesn't depend on the state or parameters
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+            /**
+             * Increases the regular worker/lead stake, demands a worker origin.
+             * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+            /**
+             * Lead remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Leave the role by the active worker.
+             * # <weight>
+             *
+             * ## Weight
+             * `O (R)` where:
+             * - `R` is the size of `rationale` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+            /**
+             * Sets a new budget for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Sets a new status text for the working group.
+             * Requires root origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (S)` where:
+             * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+             *
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+            /**
+             * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+             * If slashing balance greater than the existing stake - stake is slashed to zero.
+             * Requires signed leader origin or the root (to slash the leader stake).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size of `penality.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+            /**
+             * Transfers specified amount to any account.
+             * Requires leader origin.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+            /**
+             * Terminate the active worker by the lead.
+             * Requires signed leader origin or the root (to terminate the leader role).
+             * # <weight>
+             *
+             * ## Weight
+             * `O (P)` where:
+             * - `P` is the size `penalty.slashing_text` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+            /**
+             * Update the reward account associated with a set reward relationship for the active worker.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Update the reward per block for the active worker.
+             * Require signed leader origin or the root (to update leader's reward amount).
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Update the associated role account of the active regular worker/lead.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+            /**
+             * Withdraw the worker application. Can be done by the worker only.
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Worker remark message
+             *
+             * # <weight>
+             *
+             * ## Weight
+             * `O (M)` where:
+             * - `M` is the size of `msg` in kilobytes
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+        };
+        system: {
+            /**
+             * A dispatch that will fill the block weight up to the given ratio.
+             **/
+            fillBlock: AugmentedSubmittable<(ratio: Perbill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Perbill]>;
+            /**
+             * Kill all storage items with a key that starts with the given prefix.
+             *
+             * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
+             * the prefix we are removing to accurately calculate the weight of this function.
+             **/
+            killPrefix: AugmentedSubmittable<(prefix: Bytes | string | Uint8Array, subkeys: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, u32]>;
+            /**
+             * Kill some items from storage.
+             **/
+            killStorage: AugmentedSubmittable<(keys: Vec<Bytes> | (Bytes | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Bytes>]>;
+            /**
+             * Make some on-chain remark.
+             *
+             * # <weight>
+             * - `O(1)`
+             * # </weight>
+             **/
+            remark: AugmentedSubmittable<(remark: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Make some on-chain remark and emit event.
+             **/
+            remarkWithEvent: AugmentedSubmittable<(remark: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Set the new runtime code.
+             *
+             * # <weight>
+             * - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`
+             * - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is
+             * expensive).
+             * - 1 storage write (codec `O(C)`).
+             * - 1 digest item.
+             * - 1 event.
+             * The weight of this function is dependent on the runtime, but generally this is very
+             * expensive. We will treat this as a full block.
+             * # </weight>
+             **/
+            setCode: AugmentedSubmittable<(code: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Set the new runtime code without doing any checks of the given `code`.
+             *
+             * # <weight>
+             * - `O(C)` where `C` length of `code`
+             * - 1 storage write (codec `O(C)`).
+             * - 1 digest item.
+             * - 1 event.
+             * The weight of this function is dependent on the runtime. We will treat this as a full
+             * block. # </weight>
+             **/
+            setCodeWithoutChecks: AugmentedSubmittable<(code: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+            /**
+             * Set the number of pages in the WebAssembly environment's heap.
+             **/
+            setHeapPages: AugmentedSubmittable<(pages: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Set some items of storage.
+             **/
+            setStorage: AugmentedSubmittable<(items: Vec<ITuple<[Bytes, Bytes]>> | ([Bytes | string | Uint8Array, Bytes | string | Uint8Array])[]) => SubmittableExtrinsic<ApiType>, [Vec<ITuple<[Bytes, Bytes]>>]>;
+        };
+        timestamp: {
+            /**
+             * Set the current time.
+             *
+             * This call should be invoked exactly once per block. It will panic at the finalization
+             * phase, if this call hasn't been invoked by that time.
+             *
+             * The timestamp should be greater than the previous one by the amount specified by
+             * `MinimumPeriod`.
+             *
+             * The dispatch origin for this call must be `Inherent`.
+             *
+             * # <weight>
+             * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
+             * - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in
+             * `on_finalize`)
+             * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
+             * # </weight>
+             **/
+            set: AugmentedSubmittable<(now: Compact<u64> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u64>]>;
+        };
+        utility: {
+            /**
+             * Send a call through an indexed pseudonym of the sender.
+             *
+             * Filter from origin are passed along. The call will be dispatched with an origin which
+             * use the same filter as the origin of this call.
+             *
+             * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
+             * because you expect `proxy` to have been used prior in the call stack and you do not want
+             * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
+             * in the Multisig pallet instead.
+             *
+             * NOTE: Prior to version *12, this was called `as_limited_sub`.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             **/
+            asDerivative: AugmentedSubmittable<(index: u16 | AnyNumber | Uint8Array, call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Call]>;
+            /**
+             * Send a batch of dispatch calls.
+             *
+             * May be called from any origin.
+             *
+             * - `calls`: The calls to be dispatched from the same origin. The number of call must not
+             * exceed the constant: `batched_calls_limit` (available in constant metadata).
+             *
+             * If origin is root then call are dispatch without checking origin filter. (This includes
+             * bypassing `frame_system::Config::BaseCallFilter`).
+             *
+             * # <weight>
+             * - Complexity: O(C) where C is the number of calls to be batched.
+             * # </weight>
+             *
+             * This will return `Ok` in all circumstances. To determine the success of the batch, an
+             * event is deposited. If a call failed and the batch was interrupted, then the
+             * `BatchInterrupted` event is deposited, along with the number of successful calls made
+             * and the error of the failed call. If all were successful, then the `BatchCompleted`
+             * event is deposited.
+             **/
+            batch: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
+            /**
+             * Send a batch of dispatch calls and atomically execute them.
+             * The whole transaction will rollback and fail if any of the calls failed.
+             *
+             * May be called from any origin.
+             *
+             * - `calls`: The calls to be dispatched from the same origin. The number of call must not
+             * exceed the constant: `batched_calls_limit` (available in constant metadata).
+             *
+             * If origin is root then call are dispatch without checking origin filter. (This includes
+             * bypassing `frame_system::Config::BaseCallFilter`).
+             *
+             * # <weight>
+             * - Complexity: O(C) where C is the number of calls to be batched.
+             * # </weight>
+             **/
+            batchAll: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
+            /**
+             * Dispatches a function call with a provided origin.
+             *
+             * The dispatch origin for this call must be _Root_.
+             *
+             * # <weight>
+             * - O(1).
+             * - Limited storage reads.
+             * - One DB write (event).
+             * - Weight of derivative `call` execution + T::WeightInfo::dispatch_as().
+             * # </weight>
+             **/
+            dispatchAs: AugmentedSubmittable<(asOrigin: JoystreamNodeRuntimeOriginCaller | {
+                system: any;
+            } | {
+                Void: any;
+            } | string | Uint8Array, call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [JoystreamNodeRuntimeOriginCaller, Call]>;
+            /**
+             * Send a batch of dispatch calls.
+             * Unlike `batch`, it allows errors and won't interrupt.
+             *
+             * May be called from any origin.
+             *
+             * - `calls`: The calls to be dispatched from the same origin. The number of call must not
+             * exceed the constant: `batched_calls_limit` (available in constant metadata).
+             *
+             * If origin is root then call are dispatch without checking origin filter. (This includes
+             * bypassing `frame_system::Config::BaseCallFilter`).
+             *
+             * # <weight>
+             * - Complexity: O(C) where C is the number of calls to be batched.
+             * # </weight>
+             **/
+            forceBatch: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
+        };
+        vesting: {
+            /**
+             * Force a vested transfer.
+             *
+             * The dispatch origin for this call must be _Root_.
+             *
+             * - `source`: The account whose funds should be transferred.
+             * - `target`: The account that should be transferred the vested funds.
+             * - `schedule`: The vesting schedule attached to the transfer.
+             *
+             * Emits `VestingCreated`.
+             *
+             * NOTE: This will unlock all schedules through the current block.
+             *
+             * # <weight>
+             * - `O(1)`.
+             * - DbWeight: 4 Reads, 4 Writes
+             * - Reads: Vesting Storage, Balances Locks, Target Account, Source Account
+             * - Writes: Vesting Storage, Balances Locks, Target Account, Source Account
+             * # </weight>
+             **/
+            forceVestedTransfer: AugmentedSubmittable<(source: AccountId32 | string | Uint8Array, target: AccountId32 | string | Uint8Array, schedule: PalletVestingVestingInfo | {
+                locked?: any;
+                perBlock?: any;
+                startingBlock?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, AccountId32, PalletVestingVestingInfo]>;
+            /**
+             * Merge two vesting schedules together, creating a new vesting schedule that unlocks over
+             * the highest possible start and end blocks. If both schedules have already started the
+             * current block will be used as the schedule start; with the caveat that if one schedule
+             * is finished by the current block, the other will be treated as the new merged schedule,
+             * unmodified.
+             *
+             * NOTE: If `schedule1_index == schedule2_index` this is a no-op.
+             * NOTE: This will unlock all schedules through the current block prior to merging.
+             * NOTE: If both schedules have ended by the current block, no new schedule will be created
+             * and both will be removed.
+             *
+             * Merged schedule attributes:
+             * - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
+             * current_block)`.
+             * - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
+             * - `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `schedule1_index`: index of the first schedule to merge.
+             * - `schedule2_index`: index of the second schedule to merge.
+             **/
+            mergeSchedules: AugmentedSubmittable<(schedule1Index: u32 | AnyNumber | Uint8Array, schedule2Index: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32, u32]>;
+            /**
+             * Unlock any vested funds of the sender account.
+             *
+             * The dispatch origin for this call must be _Signed_ and the sender must have funds still
+             * locked under this pallet.
+             *
+             * Emits either `VestingCompleted` or `VestingUpdated`.
+             *
+             * # <weight>
+             * - `O(1)`.
+             * - DbWeight: 2 Reads, 2 Writes
+             * - Reads: Vesting Storage, Balances Locks, [Sender Account]
+             * - Writes: Vesting Storage, Balances Locks, [Sender Account]
+             * # </weight>
+             **/
+            vest: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+            /**
+             * Create a vested transfer.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `target`: The account receiving the vested funds.
+             * - `schedule`: The vesting schedule attached to the transfer.
+             *
+             * Emits `VestingCreated`.
+             *
+             * NOTE: This will unlock all schedules through the current block.
+             *
+             * # <weight>
+             * - `O(1)`.
+             * - DbWeight: 3 Reads, 3 Writes
+             * - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]
+             * - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]
+             * # </weight>
+             **/
+            vestedTransfer: AugmentedSubmittable<(target: AccountId32 | string | Uint8Array, schedule: PalletVestingVestingInfo | {
+                locked?: any;
+                perBlock?: any;
+                startingBlock?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, PalletVestingVestingInfo]>;
+            /**
+             * Unlock any vested funds of a `target` account.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `target`: The account whose vested funds should be unlocked. Must have funds still
+             * locked under this pallet.
+             *
+             * Emits either `VestingCompleted` or `VestingUpdated`.
+             *
+             * # <weight>
+             * - `O(1)`.
+             * - DbWeight: 3 Reads, 3 Writes
+             * - Reads: Vesting Storage, Balances Locks, Target Account
+             * - Writes: Vesting Storage, Balances Locks, Target Account
+             * # </weight>
+             **/
+            vestOther: AugmentedSubmittable<(target: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+        };
+    }
+}
diff --git a/node_modules/@joystream/types/types/lib/augment/augment-api.d.ts b/node_modules/@joystream/types/types/lib/augment/augment-api.d.ts
new file mode 100644
index 0000000..176ecb9
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/augment-api.d.ts
@@ -0,0 +1,6 @@
+import './augment-api-consts';
+import './augment-api-errors';
+import './augment-api-events';
+import './augment-api-query';
+import './augment-api-tx';
+import './augment-api-rpc';
diff --git a/node_modules/@joystream/types/types/lib/augment/augment-types.d.ts b/node_modules/@joystream/types/types/lib/augment/augment-types.d.ts
new file mode 100644
index 0000000..bb40c7b
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/augment-types.d.ts
@@ -0,0 +1,1112 @@
+import type { Data, StorageKey } from '@polkadot/types';
+import type { BitVec, Bool, Bytes, I128, I16, I256, I32, I64, I8, Json, Null, OptionBool, Raw, Text, Type, U128, U16, U256, U32, U64, U8, USize, bool, i128, i16, i256, i32, i64, i8, u128, u16, u256, u32, u64, u8, usize } from '@polkadot/types-codec';
+import type { AssetApproval, AssetApprovalKey, AssetBalance, AssetDestroyWitness, AssetDetails, AssetMetadata, TAssetBalance, TAssetDepositBalance } from '@polkadot/types/interfaces/assets';
+import type { BlockAttestations, IncludedBlocks, MoreAttestations } from '@polkadot/types/interfaces/attestations';
+import type { RawAuraPreDigest } from '@polkadot/types/interfaces/aura';
+import type { ExtrinsicOrHash, ExtrinsicStatus } from '@polkadot/types/interfaces/author';
+import type { UncleEntryItem } from '@polkadot/types/interfaces/authorship';
+import type { AllowedSlots, BabeAuthorityWeight, BabeBlockWeight, BabeEpochConfiguration, BabeEquivocationProof, BabeWeight, EpochAuthorship, MaybeRandomness, MaybeVrf, NextConfigDescriptor, NextConfigDescriptorV1, Randomness, RawBabePreDigest, RawBabePreDigestCompat, RawBabePreDigestPrimary, RawBabePreDigestPrimaryTo159, RawBabePreDigestSecondaryPlain, RawBabePreDigestSecondaryTo159, RawBabePreDigestSecondaryVRF, RawBabePreDigestTo159, SlotNumber, VrfData, VrfOutput, VrfProof } from '@polkadot/types/interfaces/babe';
+import type { AccountData, BalanceLock, BalanceLockTo212, BalanceStatus, Reasons, ReserveData, ReserveIdentifier, VestingSchedule, WithdrawReasons } from '@polkadot/types/interfaces/balances';
+import type { BeefyCommitment, BeefyId, BeefyNextAuthoritySet, BeefyPayload, BeefySignedCommitment, MmrRootHash, ValidatorSetId } from '@polkadot/types/interfaces/beefy';
+import type { BridgeMessageId, BridgedBlockHash, BridgedBlockNumber, BridgedHeader, CallOrigin, ChainId, DeliveredMessages, DispatchFeePayment, InboundLaneData, InboundRelayer, InitializationData, LaneId, MessageData, MessageKey, MessageNonce, MessagesDeliveryProofOf, MessagesProofOf, OperatingMode, OutboundLaneData, OutboundMessageFee, OutboundPayload, Parameter, RelayerId, UnrewardedRelayer, UnrewardedRelayersState } from '@polkadot/types/interfaces/bridges';
+import type { BlockHash } from '@polkadot/types/interfaces/chain';
+import type { PrefixedStorageKey } from '@polkadot/types/interfaces/childstate';
+import type { StatementKind } from '@polkadot/types/interfaces/claims';
+import type { CollectiveOrigin, MemberCount, ProposalIndex, Votes, VotesTo230 } from '@polkadot/types/interfaces/collective';
+import type { AuthorityId, RawVRFOutput } from '@polkadot/types/interfaces/consensus';
+import type { AliveContractInfo, CodeHash, CodeSource, CodeUploadRequest, CodeUploadResult, CodeUploadResultValue, ContractCallFlags, ContractCallRequest, ContractExecResult, ContractExecResultOk, ContractExecResultResult, ContractExecResultSuccessTo255, ContractExecResultSuccessTo260, ContractExecResultTo255, ContractExecResultTo260, ContractExecResultTo267, ContractInfo, ContractInstantiateResult, ContractInstantiateResultTo267, ContractInstantiateResultTo299, ContractReturnFlags, ContractStorageKey, DeletedContract, ExecReturnValue, Gas, HostFnWeights, HostFnWeightsTo264, InstantiateRequest, InstantiateRequestV1, InstantiateRequestV2, InstantiateReturnValue, InstantiateReturnValueOk, InstantiateReturnValueTo267, InstructionWeights, Limits, LimitsTo264, PrefabWasmModule, RentProjection, Schedule, ScheduleTo212, ScheduleTo258, ScheduleTo264, SeedOf, StorageDeposit, TombstoneContractInfo, TrieId } from '@polkadot/types/interfaces/contracts';
+import type { ContractConstructorSpecLatest, ContractConstructorSpecV0, ContractConstructorSpecV1, ContractConstructorSpecV2, ContractConstructorSpecV3, ContractContractSpecV0, ContractContractSpecV1, ContractContractSpecV2, ContractContractSpecV3, ContractCryptoHasher, ContractDiscriminant, ContractDisplayName, ContractEventParamSpecLatest, ContractEventParamSpecV0, ContractEventParamSpecV2, ContractEventSpecLatest, ContractEventSpecV0, ContractEventSpecV1, ContractEventSpecV2, ContractLayoutArray, ContractLayoutCell, ContractLayoutEnum, ContractLayoutHash, ContractLayoutHashingStrategy, ContractLayoutKey, ContractLayoutStruct, ContractLayoutStructField, ContractMessageParamSpecLatest, ContractMessageParamSpecV0, ContractMessageParamSpecV2, ContractMessageSpecLatest, ContractMessageSpecV0, ContractMessageSpecV1, ContractMessageSpecV2, ContractMetadata, ContractMetadataLatest, ContractMetadataV0, ContractMetadataV1, ContractMetadataV2, ContractMetadataV3, ContractProject, ContractProjectContract, ContractProjectInfo, ContractProjectSource, ContractProjectV0, ContractSelector, ContractStorageLayout, ContractTypeSpec } from '@polkadot/types/interfaces/contractsAbi';
+import type { FundIndex, FundInfo, LastContribution, TrieIndex } from '@polkadot/types/interfaces/crowdloan';
+import type { ConfigData, MessageId, OverweightIndex, PageCounter, PageIndexData } from '@polkadot/types/interfaces/cumulus';
+import type { AccountVote, AccountVoteSplit, AccountVoteStandard, Conviction, Delegations, PreimageStatus, PreimageStatusAvailable, PriorLock, PropIndex, Proposal, ProxyState, ReferendumIndex, ReferendumInfo, ReferendumInfoFinished, ReferendumInfoTo239, ReferendumStatus, Tally, Voting, VotingDelegating, VotingDirect, VotingDirectVote } from '@polkadot/types/interfaces/democracy';
+import type { BlockStats } from '@polkadot/types/interfaces/dev';
+import type { ApprovalFlag, DefunctVoter, Renouncing, SetIndex, Vote, VoteIndex, VoteThreshold, VoterInfo } from '@polkadot/types/interfaces/elections';
+import type { CreatedBlock, ImportedAux } from '@polkadot/types/interfaces/engine';
+import type { BlockV0, BlockV1, BlockV2, EIP1559Transaction, EIP2930Transaction, EthAccessList, EthAccessListItem, EthAccount, EthAddress, EthBlock, EthBloom, EthCallRequest, EthFilter, EthFilterAddress, EthFilterChanges, EthFilterTopic, EthFilterTopicEntry, EthFilterTopicInner, EthHeader, EthLog, EthReceipt, EthRichBlock, EthRichHeader, EthStorageProof, EthSubKind, EthSubParams, EthSubResult, EthSyncInfo, EthSyncStatus, EthTransaction, EthTransactionAction, EthTransactionCondition, EthTransactionRequest, EthTransactionSignature, EthTransactionStatus, EthWork, EthereumAccountId, EthereumAddress, EthereumLookupSource, EthereumSignature, LegacyTransaction, TransactionV0, TransactionV1, TransactionV2 } from '@polkadot/types/interfaces/eth';
+import type { EvmAccount, EvmLog, EvmVicinity, ExitError, ExitFatal, ExitReason, ExitRevert, ExitSucceed } from '@polkadot/types/interfaces/evm';
+import type { AnySignature, EcdsaSignature, Ed25519Signature, Era, Extrinsic, ExtrinsicEra, ExtrinsicPayload, ExtrinsicPayloadUnknown, ExtrinsicPayloadV4, ExtrinsicSignature, ExtrinsicSignatureV4, ExtrinsicUnknown, ExtrinsicV4, ImmortalEra, MortalEra, MultiSignature, Signature, SignerPayload, Sr25519Signature } from '@polkadot/types/interfaces/extrinsics';
+import type { AssetOptions, Owner, PermissionLatest, PermissionVersions, PermissionsV1 } from '@polkadot/types/interfaces/genericAsset';
+import type { ActiveGilt, ActiveGiltsTotal, ActiveIndex, GiltBid } from '@polkadot/types/interfaces/gilt';
+import type { AuthorityIndex, AuthorityList, AuthoritySet, AuthoritySetChange, AuthoritySetChanges, AuthorityWeight, DelayKind, DelayKindBest, EncodedFinalityProofs, ForkTreePendingChange, ForkTreePendingChangeNode, GrandpaCommit, GrandpaEquivocation, GrandpaEquivocationProof, GrandpaEquivocationValue, GrandpaJustification, GrandpaPrecommit, GrandpaPrevote, GrandpaSignedPrecommit, JustificationNotification, KeyOwnerProof, NextAuthority, PendingChange, PendingPause, PendingResume, Precommits, Prevotes, ReportedRoundStates, RoundState, SetId, StoredPendingChange, StoredState } from '@polkadot/types/interfaces/grandpa';
+import type { IdentityFields, IdentityInfo, IdentityInfoAdditional, IdentityInfoTo198, IdentityJudgement, RegistrarIndex, RegistrarInfo, Registration, RegistrationJudgement, RegistrationTo198 } from '@polkadot/types/interfaces/identity';
+import type { AuthIndex, AuthoritySignature, Heartbeat, HeartbeatTo244, OpaqueMultiaddr, OpaqueNetworkState, OpaquePeerId } from '@polkadot/types/interfaces/imOnline';
+import type { CallIndex, LotteryConfig } from '@polkadot/types/interfaces/lottery';
+import type { ErrorMetadataLatest, ErrorMetadataV10, ErrorMetadataV11, ErrorMetadataV12, ErrorMetadataV13, ErrorMetadataV14, ErrorMetadataV9, EventMetadataLatest, EventMetadataV10, EventMetadataV11, EventMetadataV12, EventMetadataV13, EventMetadataV14, EventMetadataV9, ExtrinsicMetadataLatest, ExtrinsicMetadataV11, ExtrinsicMetadataV12, ExtrinsicMetadataV13, ExtrinsicMetadataV14, FunctionArgumentMetadataLatest, FunctionArgumentMetadataV10, FunctionArgumentMetadataV11, FunctionArgumentMetadataV12, FunctionArgumentMetadataV13, FunctionArgumentMetadataV14, FunctionArgumentMetadataV9, FunctionMetadataLatest, FunctionMetadataV10, FunctionMetadataV11, FunctionMetadataV12, FunctionMetadataV13, FunctionMetadataV14, FunctionMetadataV9, MetadataAll, MetadataLatest, MetadataV10, MetadataV11, MetadataV12, MetadataV13, MetadataV14, MetadataV9, ModuleConstantMetadataV10, ModuleConstantMetadataV11, ModuleConstantMetadataV12, ModuleConstantMetadataV13, ModuleConstantMetadataV9, ModuleMetadataV10, ModuleMetadataV11, ModuleMetadataV12, ModuleMetadataV13, ModuleMetadataV9, PalletCallMetadataLatest, PalletCallMetadataV14, PalletConstantMetadataLatest, PalletConstantMetadataV14, PalletErrorMetadataLatest, PalletErrorMetadataV14, PalletEventMetadataLatest, PalletEventMetadataV14, PalletMetadataLatest, PalletMetadataV14, PalletStorageMetadataLatest, PalletStorageMetadataV14, PortableType, PortableTypeV14, SignedExtensionMetadataLatest, SignedExtensionMetadataV14, StorageEntryMetadataLatest, StorageEntryMetadataV10, StorageEntryMetadataV11, StorageEntryMetadataV12, StorageEntryMetadataV13, StorageEntryMetadataV14, StorageEntryMetadataV9, StorageEntryModifierLatest, StorageEntryModifierV10, StorageEntryModifierV11, StorageEntryModifierV12, StorageEntryModifierV13, StorageEntryModifierV14, StorageEntryModifierV9, StorageEntryTypeLatest, StorageEntryTypeV10, StorageEntryTypeV11, StorageEntryTypeV12, StorageEntryTypeV13, StorageEntryTypeV14, StorageEntryTypeV9, StorageHasher, StorageHasherV10, StorageHasherV11, StorageHasherV12, StorageHasherV13, StorageHasherV14, StorageHasherV9, StorageMetadataV10, StorageMetadataV11, StorageMetadataV12, StorageMetadataV13, StorageMetadataV9 } from '@polkadot/types/interfaces/metadata';
+import type { MmrLeafBatchProof, MmrLeafProof } from '@polkadot/types/interfaces/mmr';
+import type { StorageKind } from '@polkadot/types/interfaces/offchain';
+import type { DeferredOffenceOf, Kind, OffenceDetails, Offender, OpaqueTimeSlot, ReportIdOf, Reporter } from '@polkadot/types/interfaces/offences';
+import type { AbridgedCandidateReceipt, AbridgedHostConfiguration, AbridgedHrmpChannel, AssignmentId, AssignmentKind, AttestedCandidate, AuctionIndex, AuthorityDiscoveryId, AvailabilityBitfield, AvailabilityBitfieldRecord, BackedCandidate, Bidder, BufferedSessionChange, CandidateCommitments, CandidateDescriptor, CandidateHash, CandidateInfo, CandidatePendingAvailability, CandidateReceipt, CollatorId, CollatorSignature, CommittedCandidateReceipt, CoreAssignment, CoreIndex, CoreOccupied, DisputeLocation, DisputeResult, DisputeState, DisputeStatement, DisputeStatementSet, DoubleVoteReport, DownwardMessage, ExplicitDisputeStatement, GlobalValidationData, GlobalValidationSchedule, GroupIndex, HeadData, HostConfiguration, HrmpChannel, HrmpChannelId, HrmpOpenChannelRequest, InboundDownwardMessage, InboundHrmpMessage, InboundHrmpMessages, IncomingParachain, IncomingParachainDeploy, IncomingParachainFixed, InvalidDisputeStatementKind, LeasePeriod, LeasePeriodOf, LocalValidationData, MessageIngestionType, MessageQueueChain, MessagingStateSnapshot, MessagingStateSnapshotEgressEntry, MultiDisputeStatementSet, NewBidder, OutboundHrmpMessage, ParaGenesisArgs, ParaId, ParaInfo, ParaLifecycle, ParaPastCodeMeta, ParaScheduling, ParaValidatorIndex, ParachainDispatchOrigin, ParachainInherentData, ParachainProposal, ParachainsInherentData, ParathreadClaim, ParathreadClaimQueue, ParathreadEntry, PersistedValidationData, QueuedParathread, RegisteredParachainInfo, RelayBlockNumber, RelayChainBlockNumber, RelayChainHash, RelayHash, Remark, ReplacementTimes, Retriable, Scheduling, ServiceQuality, SessionInfo, SessionInfoValidatorGroup, SignedAvailabilityBitfield, SignedAvailabilityBitfields, SigningContext, SlotRange, SlotRange10, Statement, SubId, SystemInherentData, TransientValidationData, UpgradeGoAhead, UpgradeRestriction, UpwardMessage, ValidDisputeStatementKind, ValidationCode, ValidationCodeHash, ValidationData, ValidationDataType, ValidationFunctionParams, ValidatorSignature, ValidityAttestation, VecInboundHrmpMessage, WinnersData, WinnersData10, WinnersDataTuple, WinnersDataTuple10, WinningData, WinningData10, WinningDataEntry } from '@polkadot/types/interfaces/parachains';
+import type { FeeDetails, InclusionFee, RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment';
+import type { Approvals } from '@polkadot/types/interfaces/poll';
+import type { ProxyAnnouncement, ProxyDefinition, ProxyType } from '@polkadot/types/interfaces/proxy';
+import type { AccountStatus, AccountValidity } from '@polkadot/types/interfaces/purchase';
+import type { ActiveRecovery, RecoveryConfig } from '@polkadot/types/interfaces/recovery';
+import type { RpcMethods } from '@polkadot/types/interfaces/rpc';
+import type { AccountId, AccountId20, AccountId32, AccountIdOf, AccountIndex, Address, AssetId, Balance, BalanceOf, Block, BlockNumber, BlockNumberFor, BlockNumberOf, Call, CallHash, CallHashOf, ChangesTrieConfiguration, ChangesTrieSignal, CodecHash, Consensus, ConsensusEngineId, CrateVersion, Digest, DigestItem, EncodedJustification, ExtrinsicsWeight, Fixed128, Fixed64, FixedI128, FixedI64, FixedU128, FixedU64, H1024, H128, H160, H2048, H256, H32, H512, H64, Hash, Header, HeaderPartial, I32F32, Index, IndicesLookupSource, Justification, Justifications, KeyTypeId, KeyValue, LockIdentifier, LookupSource, LookupTarget, ModuleId, Moment, MultiAddress, MultiSigner, OpaqueCall, Origin, OriginCaller, PalletId, PalletVersion, PalletsOrigin, Pays, PerU16, Perbill, Percent, Permill, Perquintill, Phantom, PhantomData, PreRuntime, Releases, RuntimeDbWeight, Seal, SealV0, SignedBlock, SignedBlockWithJustification, SignedBlockWithJustifications, Slot, StorageData, StorageProof, TransactionInfo, TransactionPriority, TransactionStorageProof, U32F32, ValidatorId, ValidatorIdOf, Weight, WeightMultiplier } from '@polkadot/types/interfaces/runtime';
+import type { Si0Field, Si0LookupTypeId, Si0Path, Si0Type, Si0TypeDef, Si0TypeDefArray, Si0TypeDefBitSequence, Si0TypeDefCompact, Si0TypeDefComposite, Si0TypeDefPhantom, Si0TypeDefPrimitive, Si0TypeDefSequence, Si0TypeDefTuple, Si0TypeDefVariant, Si0TypeParameter, Si0Variant, Si1Field, Si1LookupTypeId, Si1Path, Si1Type, Si1TypeDef, Si1TypeDefArray, Si1TypeDefBitSequence, Si1TypeDefCompact, Si1TypeDefComposite, Si1TypeDefPrimitive, Si1TypeDefSequence, Si1TypeDefTuple, Si1TypeDefVariant, Si1TypeParameter, Si1Variant, SiField, SiLookupTypeId, SiPath, SiType, SiTypeDef, SiTypeDefArray, SiTypeDefBitSequence, SiTypeDefCompact, SiTypeDefComposite, SiTypeDefPrimitive, SiTypeDefSequence, SiTypeDefTuple, SiTypeDefVariant, SiTypeParameter, SiVariant } from '@polkadot/types/interfaces/scaleInfo';
+import type { Period, Priority, SchedulePeriod, SchedulePriority, Scheduled, ScheduledTo254, TaskAddress } from '@polkadot/types/interfaces/scheduler';
+import type { BeefyKey, FullIdentification, IdentificationTuple, Keys, MembershipProof, SessionIndex, SessionKeys1, SessionKeys10, SessionKeys10B, SessionKeys2, SessionKeys3, SessionKeys4, SessionKeys5, SessionKeys6, SessionKeys6B, SessionKeys7, SessionKeys7B, SessionKeys8, SessionKeys8B, SessionKeys9, SessionKeys9B, ValidatorCount } from '@polkadot/types/interfaces/session';
+import type { Bid, BidKind, SocietyJudgement, SocietyVote, StrikeCount, VouchingStatus } from '@polkadot/types/interfaces/society';
+import type { ActiveEraInfo, CompactAssignments, CompactAssignmentsTo257, CompactAssignmentsTo265, CompactAssignmentsWith16, CompactAssignmentsWith24, CompactScore, CompactScoreCompact, ElectionCompute, ElectionPhase, ElectionResult, ElectionScore, ElectionSize, ElectionStatus, EraIndex, EraPoints, EraRewardPoints, EraRewards, Exposure, ExtendedBalance, Forcing, IndividualExposure, KeyType, MomentOf, Nominations, NominatorIndex, NominatorIndexCompact, OffchainAccuracy, OffchainAccuracyCompact, PhragmenScore, Points, RawSolution, RawSolutionTo265, RawSolutionWith16, RawSolutionWith24, ReadySolution, RewardDestination, RewardPoint, RoundSnapshot, SeatHolder, SignedSubmission, SignedSubmissionOf, SignedSubmissionTo276, SlashJournalEntry, SlashingSpans, SlashingSpansTo204, SolutionOrSnapshotSize, SolutionSupport, SolutionSupports, SpanIndex, SpanRecord, StakingLedger, StakingLedgerTo223, StakingLedgerTo240, SubmissionIndicesOf, Supports, UnappliedSlash, UnappliedSlashOther, UnlockChunk, ValidatorIndex, ValidatorIndexCompact, ValidatorPrefs, ValidatorPrefsTo145, ValidatorPrefsTo196, ValidatorPrefsWithBlocked, ValidatorPrefsWithCommission, VoteWeight, Voter } from '@polkadot/types/interfaces/staking';
+import type { ApiId, BlockTrace, BlockTraceEvent, BlockTraceEventData, BlockTraceSpan, KeyValueOption, MigrationStatusResult, ReadProof, RuntimeVersion, RuntimeVersionApi, RuntimeVersionPartial, SpecVersion, StorageChangeSet, TraceBlockResponse, TraceError } from '@polkadot/types/interfaces/state';
+import type { WeightToFeeCoefficient } from '@polkadot/types/interfaces/support';
+import type { AccountInfo, AccountInfoWithDualRefCount, AccountInfoWithProviders, AccountInfoWithRefCount, AccountInfoWithRefCountU8, AccountInfoWithTripleRefCount, ApplyExtrinsicResult, ArithmeticError, BlockLength, BlockWeights, ChainProperties, ChainType, ConsumedWeight, DigestOf, DispatchClass, DispatchError, DispatchErrorModule, DispatchErrorModuleU8, DispatchErrorModuleU8a, DispatchErrorTo198, DispatchInfo, DispatchInfoTo190, DispatchInfoTo244, DispatchOutcome, DispatchResult, DispatchResultOf, DispatchResultTo198, Event, EventId, EventIndex, EventRecord, Health, InvalidTransaction, Key, LastRuntimeUpgradeInfo, NetworkState, NetworkStatePeerset, NetworkStatePeersetInfo, NodeRole, NotConnectedPeer, Peer, PeerEndpoint, PeerEndpointAddr, PeerInfo, PeerPing, PerDispatchClassU32, PerDispatchClassWeight, PerDispatchClassWeightsPerClass, Phase, RawOrigin, RefCount, RefCountTo259, SyncState, SystemOrigin, TokenError, TransactionValidityError, TransactionalError, UnknownTransaction, WeightPerClass } from '@polkadot/types/interfaces/system';
+import type { Bounty, BountyIndex, BountyStatus, BountyStatusActive, BountyStatusCuratorProposed, BountyStatusPendingPayout, OpenTip, OpenTipFinderTo225, OpenTipTip, OpenTipTo225, TreasuryProposal } from '@polkadot/types/interfaces/treasury';
+import type { Multiplier } from '@polkadot/types/interfaces/txpayment';
+import type { ClassDetails, ClassId, ClassMetadata, DepositBalance, DepositBalanceOf, DestroyWitness, InstanceDetails, InstanceId, InstanceMetadata } from '@polkadot/types/interfaces/uniques';
+import type { Multisig, Timepoint } from '@polkadot/types/interfaces/utility';
+import type { VestingInfo } from '@polkadot/types/interfaces/vesting';
+import type { AssetInstance, AssetInstanceV0, AssetInstanceV1, AssetInstanceV2, BodyId, BodyPart, DoubleEncodedCall, Fungibility, FungibilityV0, FungibilityV1, FungibilityV2, InboundStatus, InstructionV2, InteriorMultiLocation, Junction, JunctionV0, JunctionV1, JunctionV2, Junctions, JunctionsV1, JunctionsV2, MultiAsset, MultiAssetFilter, MultiAssetFilterV1, MultiAssetFilterV2, MultiAssetV0, MultiAssetV1, MultiAssetV2, MultiAssets, MultiAssetsV1, MultiAssetsV2, MultiLocation, MultiLocationV0, MultiLocationV1, MultiLocationV2, NetworkId, OriginKindV0, OriginKindV1, OriginKindV2, OutboundStatus, Outcome, QueryId, QueryStatus, QueueConfigData, Response, ResponseV0, ResponseV1, ResponseV2, ResponseV2Error, ResponseV2Result, VersionMigrationStage, VersionedMultiAsset, VersionedMultiAssets, VersionedMultiLocation, VersionedResponse, VersionedXcm, WeightLimitV2, WildFungibility, WildFungibilityV0, WildFungibilityV1, WildFungibilityV2, WildMultiAsset, WildMultiAssetV1, WildMultiAssetV2, Xcm, XcmAssetId, XcmError, XcmErrorV0, XcmErrorV1, XcmErrorV2, XcmOrder, XcmOrderV0, XcmOrderV1, XcmOrderV2, XcmOrigin, XcmOriginKind, XcmV0, XcmV1, XcmV2, XcmVersion, XcmpMessageFormat } from '@polkadot/types/interfaces/xcm';
+declare module '@polkadot/types/types/registry' {
+    interface InterfaceTypes {
+        AbridgedCandidateReceipt: AbridgedCandidateReceipt;
+        AbridgedHostConfiguration: AbridgedHostConfiguration;
+        AbridgedHrmpChannel: AbridgedHrmpChannel;
+        AccountData: AccountData;
+        AccountId: AccountId;
+        AccountId20: AccountId20;
+        AccountId32: AccountId32;
+        AccountIdOf: AccountIdOf;
+        AccountIndex: AccountIndex;
+        AccountInfo: AccountInfo;
+        AccountInfoWithDualRefCount: AccountInfoWithDualRefCount;
+        AccountInfoWithProviders: AccountInfoWithProviders;
+        AccountInfoWithRefCount: AccountInfoWithRefCount;
+        AccountInfoWithRefCountU8: AccountInfoWithRefCountU8;
+        AccountInfoWithTripleRefCount: AccountInfoWithTripleRefCount;
+        AccountStatus: AccountStatus;
+        AccountValidity: AccountValidity;
+        AccountVote: AccountVote;
+        AccountVoteSplit: AccountVoteSplit;
+        AccountVoteStandard: AccountVoteStandard;
+        ActiveEraInfo: ActiveEraInfo;
+        ActiveGilt: ActiveGilt;
+        ActiveGiltsTotal: ActiveGiltsTotal;
+        ActiveIndex: ActiveIndex;
+        ActiveRecovery: ActiveRecovery;
+        Address: Address;
+        AliveContractInfo: AliveContractInfo;
+        AllowedSlots: AllowedSlots;
+        AnySignature: AnySignature;
+        ApiId: ApiId;
+        ApplyExtrinsicResult: ApplyExtrinsicResult;
+        ApprovalFlag: ApprovalFlag;
+        Approvals: Approvals;
+        ArithmeticError: ArithmeticError;
+        AssetApproval: AssetApproval;
+        AssetApprovalKey: AssetApprovalKey;
+        AssetBalance: AssetBalance;
+        AssetDestroyWitness: AssetDestroyWitness;
+        AssetDetails: AssetDetails;
+        AssetId: AssetId;
+        AssetInstance: AssetInstance;
+        AssetInstanceV0: AssetInstanceV0;
+        AssetInstanceV1: AssetInstanceV1;
+        AssetInstanceV2: AssetInstanceV2;
+        AssetMetadata: AssetMetadata;
+        AssetOptions: AssetOptions;
+        AssignmentId: AssignmentId;
+        AssignmentKind: AssignmentKind;
+        AttestedCandidate: AttestedCandidate;
+        AuctionIndex: AuctionIndex;
+        AuthIndex: AuthIndex;
+        AuthorityDiscoveryId: AuthorityDiscoveryId;
+        AuthorityId: AuthorityId;
+        AuthorityIndex: AuthorityIndex;
+        AuthorityList: AuthorityList;
+        AuthoritySet: AuthoritySet;
+        AuthoritySetChange: AuthoritySetChange;
+        AuthoritySetChanges: AuthoritySetChanges;
+        AuthoritySignature: AuthoritySignature;
+        AuthorityWeight: AuthorityWeight;
+        AvailabilityBitfield: AvailabilityBitfield;
+        AvailabilityBitfieldRecord: AvailabilityBitfieldRecord;
+        BabeAuthorityWeight: BabeAuthorityWeight;
+        BabeBlockWeight: BabeBlockWeight;
+        BabeEpochConfiguration: BabeEpochConfiguration;
+        BabeEquivocationProof: BabeEquivocationProof;
+        BabeWeight: BabeWeight;
+        BackedCandidate: BackedCandidate;
+        Balance: Balance;
+        BalanceLock: BalanceLock;
+        BalanceLockTo212: BalanceLockTo212;
+        BalanceOf: BalanceOf;
+        BalanceStatus: BalanceStatus;
+        BeefyCommitment: BeefyCommitment;
+        BeefyId: BeefyId;
+        BeefyKey: BeefyKey;
+        BeefyNextAuthoritySet: BeefyNextAuthoritySet;
+        BeefyPayload: BeefyPayload;
+        BeefySignedCommitment: BeefySignedCommitment;
+        Bid: Bid;
+        Bidder: Bidder;
+        BidKind: BidKind;
+        BitVec: BitVec;
+        Block: Block;
+        BlockAttestations: BlockAttestations;
+        BlockHash: BlockHash;
+        BlockLength: BlockLength;
+        BlockNumber: BlockNumber;
+        BlockNumberFor: BlockNumberFor;
+        BlockNumberOf: BlockNumberOf;
+        BlockStats: BlockStats;
+        BlockTrace: BlockTrace;
+        BlockTraceEvent: BlockTraceEvent;
+        BlockTraceEventData: BlockTraceEventData;
+        BlockTraceSpan: BlockTraceSpan;
+        BlockV0: BlockV0;
+        BlockV1: BlockV1;
+        BlockV2: BlockV2;
+        BlockWeights: BlockWeights;
+        BodyId: BodyId;
+        BodyPart: BodyPart;
+        bool: bool;
+        Bool: Bool;
+        Bounty: Bounty;
+        BountyIndex: BountyIndex;
+        BountyStatus: BountyStatus;
+        BountyStatusActive: BountyStatusActive;
+        BountyStatusCuratorProposed: BountyStatusCuratorProposed;
+        BountyStatusPendingPayout: BountyStatusPendingPayout;
+        BridgedBlockHash: BridgedBlockHash;
+        BridgedBlockNumber: BridgedBlockNumber;
+        BridgedHeader: BridgedHeader;
+        BridgeMessageId: BridgeMessageId;
+        BufferedSessionChange: BufferedSessionChange;
+        Bytes: Bytes;
+        Call: Call;
+        CallHash: CallHash;
+        CallHashOf: CallHashOf;
+        CallIndex: CallIndex;
+        CallOrigin: CallOrigin;
+        CandidateCommitments: CandidateCommitments;
+        CandidateDescriptor: CandidateDescriptor;
+        CandidateHash: CandidateHash;
+        CandidateInfo: CandidateInfo;
+        CandidatePendingAvailability: CandidatePendingAvailability;
+        CandidateReceipt: CandidateReceipt;
+        ChainId: ChainId;
+        ChainProperties: ChainProperties;
+        ChainType: ChainType;
+        ChangesTrieConfiguration: ChangesTrieConfiguration;
+        ChangesTrieSignal: ChangesTrieSignal;
+        ClassDetails: ClassDetails;
+        ClassId: ClassId;
+        ClassMetadata: ClassMetadata;
+        CodecHash: CodecHash;
+        CodeHash: CodeHash;
+        CodeSource: CodeSource;
+        CodeUploadRequest: CodeUploadRequest;
+        CodeUploadResult: CodeUploadResult;
+        CodeUploadResultValue: CodeUploadResultValue;
+        CollatorId: CollatorId;
+        CollatorSignature: CollatorSignature;
+        CollectiveOrigin: CollectiveOrigin;
+        CommittedCandidateReceipt: CommittedCandidateReceipt;
+        CompactAssignments: CompactAssignments;
+        CompactAssignmentsTo257: CompactAssignmentsTo257;
+        CompactAssignmentsTo265: CompactAssignmentsTo265;
+        CompactAssignmentsWith16: CompactAssignmentsWith16;
+        CompactAssignmentsWith24: CompactAssignmentsWith24;
+        CompactScore: CompactScore;
+        CompactScoreCompact: CompactScoreCompact;
+        ConfigData: ConfigData;
+        Consensus: Consensus;
+        ConsensusEngineId: ConsensusEngineId;
+        ConsumedWeight: ConsumedWeight;
+        ContractCallFlags: ContractCallFlags;
+        ContractCallRequest: ContractCallRequest;
+        ContractConstructorSpecLatest: ContractConstructorSpecLatest;
+        ContractConstructorSpecV0: ContractConstructorSpecV0;
+        ContractConstructorSpecV1: ContractConstructorSpecV1;
+        ContractConstructorSpecV2: ContractConstructorSpecV2;
+        ContractConstructorSpecV3: ContractConstructorSpecV3;
+        ContractContractSpecV0: ContractContractSpecV0;
+        ContractContractSpecV1: ContractContractSpecV1;
+        ContractContractSpecV2: ContractContractSpecV2;
+        ContractContractSpecV3: ContractContractSpecV3;
+        ContractCryptoHasher: ContractCryptoHasher;
+        ContractDiscriminant: ContractDiscriminant;
+        ContractDisplayName: ContractDisplayName;
+        ContractEventParamSpecLatest: ContractEventParamSpecLatest;
+        ContractEventParamSpecV0: ContractEventParamSpecV0;
+        ContractEventParamSpecV2: ContractEventParamSpecV2;
+        ContractEventSpecLatest: ContractEventSpecLatest;
+        ContractEventSpecV0: ContractEventSpecV0;
+        ContractEventSpecV1: ContractEventSpecV1;
+        ContractEventSpecV2: ContractEventSpecV2;
+        ContractExecResult: ContractExecResult;
+        ContractExecResultOk: ContractExecResultOk;
+        ContractExecResultResult: ContractExecResultResult;
+        ContractExecResultSuccessTo255: ContractExecResultSuccessTo255;
+        ContractExecResultSuccessTo260: ContractExecResultSuccessTo260;
+        ContractExecResultTo255: ContractExecResultTo255;
+        ContractExecResultTo260: ContractExecResultTo260;
+        ContractExecResultTo267: ContractExecResultTo267;
+        ContractInfo: ContractInfo;
+        ContractInstantiateResult: ContractInstantiateResult;
+        ContractInstantiateResultTo267: ContractInstantiateResultTo267;
+        ContractInstantiateResultTo299: ContractInstantiateResultTo299;
+        ContractLayoutArray: ContractLayoutArray;
+        ContractLayoutCell: ContractLayoutCell;
+        ContractLayoutEnum: ContractLayoutEnum;
+        ContractLayoutHash: ContractLayoutHash;
+        ContractLayoutHashingStrategy: ContractLayoutHashingStrategy;
+        ContractLayoutKey: ContractLayoutKey;
+        ContractLayoutStruct: ContractLayoutStruct;
+        ContractLayoutStructField: ContractLayoutStructField;
+        ContractMessageParamSpecLatest: ContractMessageParamSpecLatest;
+        ContractMessageParamSpecV0: ContractMessageParamSpecV0;
+        ContractMessageParamSpecV2: ContractMessageParamSpecV2;
+        ContractMessageSpecLatest: ContractMessageSpecLatest;
+        ContractMessageSpecV0: ContractMessageSpecV0;
+        ContractMessageSpecV1: ContractMessageSpecV1;
+        ContractMessageSpecV2: ContractMessageSpecV2;
+        ContractMetadata: ContractMetadata;
+        ContractMetadataLatest: ContractMetadataLatest;
+        ContractMetadataV0: ContractMetadataV0;
+        ContractMetadataV1: ContractMetadataV1;
+        ContractMetadataV2: ContractMetadataV2;
+        ContractMetadataV3: ContractMetadataV3;
+        ContractProject: ContractProject;
+        ContractProjectContract: ContractProjectContract;
+        ContractProjectInfo: ContractProjectInfo;
+        ContractProjectSource: ContractProjectSource;
+        ContractProjectV0: ContractProjectV0;
+        ContractReturnFlags: ContractReturnFlags;
+        ContractSelector: ContractSelector;
+        ContractStorageKey: ContractStorageKey;
+        ContractStorageLayout: ContractStorageLayout;
+        ContractTypeSpec: ContractTypeSpec;
+        Conviction: Conviction;
+        CoreAssignment: CoreAssignment;
+        CoreIndex: CoreIndex;
+        CoreOccupied: CoreOccupied;
+        CrateVersion: CrateVersion;
+        CreatedBlock: CreatedBlock;
+        Data: Data;
+        DeferredOffenceOf: DeferredOffenceOf;
+        DefunctVoter: DefunctVoter;
+        DelayKind: DelayKind;
+        DelayKindBest: DelayKindBest;
+        Delegations: Delegations;
+        DeletedContract: DeletedContract;
+        DeliveredMessages: DeliveredMessages;
+        DepositBalance: DepositBalance;
+        DepositBalanceOf: DepositBalanceOf;
+        DestroyWitness: DestroyWitness;
+        Digest: Digest;
+        DigestItem: DigestItem;
+        DigestOf: DigestOf;
+        DispatchClass: DispatchClass;
+        DispatchError: DispatchError;
+        DispatchErrorModule: DispatchErrorModule;
+        DispatchErrorModuleU8: DispatchErrorModuleU8;
+        DispatchErrorModuleU8a: DispatchErrorModuleU8a;
+        DispatchErrorTo198: DispatchErrorTo198;
+        DispatchFeePayment: DispatchFeePayment;
+        DispatchInfo: DispatchInfo;
+        DispatchInfoTo190: DispatchInfoTo190;
+        DispatchInfoTo244: DispatchInfoTo244;
+        DispatchOutcome: DispatchOutcome;
+        DispatchResult: DispatchResult;
+        DispatchResultOf: DispatchResultOf;
+        DispatchResultTo198: DispatchResultTo198;
+        DisputeLocation: DisputeLocation;
+        DisputeResult: DisputeResult;
+        DisputeState: DisputeState;
+        DisputeStatement: DisputeStatement;
+        DisputeStatementSet: DisputeStatementSet;
+        DoubleEncodedCall: DoubleEncodedCall;
+        DoubleVoteReport: DoubleVoteReport;
+        DownwardMessage: DownwardMessage;
+        EcdsaSignature: EcdsaSignature;
+        Ed25519Signature: Ed25519Signature;
+        EIP1559Transaction: EIP1559Transaction;
+        EIP2930Transaction: EIP2930Transaction;
+        ElectionCompute: ElectionCompute;
+        ElectionPhase: ElectionPhase;
+        ElectionResult: ElectionResult;
+        ElectionScore: ElectionScore;
+        ElectionSize: ElectionSize;
+        ElectionStatus: ElectionStatus;
+        EncodedFinalityProofs: EncodedFinalityProofs;
+        EncodedJustification: EncodedJustification;
+        EpochAuthorship: EpochAuthorship;
+        Era: Era;
+        EraIndex: EraIndex;
+        EraPoints: EraPoints;
+        EraRewardPoints: EraRewardPoints;
+        EraRewards: EraRewards;
+        ErrorMetadataLatest: ErrorMetadataLatest;
+        ErrorMetadataV10: ErrorMetadataV10;
+        ErrorMetadataV11: ErrorMetadataV11;
+        ErrorMetadataV12: ErrorMetadataV12;
+        ErrorMetadataV13: ErrorMetadataV13;
+        ErrorMetadataV14: ErrorMetadataV14;
+        ErrorMetadataV9: ErrorMetadataV9;
+        EthAccessList: EthAccessList;
+        EthAccessListItem: EthAccessListItem;
+        EthAccount: EthAccount;
+        EthAddress: EthAddress;
+        EthBlock: EthBlock;
+        EthBloom: EthBloom;
+        EthCallRequest: EthCallRequest;
+        EthereumAccountId: EthereumAccountId;
+        EthereumAddress: EthereumAddress;
+        EthereumLookupSource: EthereumLookupSource;
+        EthereumSignature: EthereumSignature;
+        EthFilter: EthFilter;
+        EthFilterAddress: EthFilterAddress;
+        EthFilterChanges: EthFilterChanges;
+        EthFilterTopic: EthFilterTopic;
+        EthFilterTopicEntry: EthFilterTopicEntry;
+        EthFilterTopicInner: EthFilterTopicInner;
+        EthHeader: EthHeader;
+        EthLog: EthLog;
+        EthReceipt: EthReceipt;
+        EthRichBlock: EthRichBlock;
+        EthRichHeader: EthRichHeader;
+        EthStorageProof: EthStorageProof;
+        EthSubKind: EthSubKind;
+        EthSubParams: EthSubParams;
+        EthSubResult: EthSubResult;
+        EthSyncInfo: EthSyncInfo;
+        EthSyncStatus: EthSyncStatus;
+        EthTransaction: EthTransaction;
+        EthTransactionAction: EthTransactionAction;
+        EthTransactionCondition: EthTransactionCondition;
+        EthTransactionRequest: EthTransactionRequest;
+        EthTransactionSignature: EthTransactionSignature;
+        EthTransactionStatus: EthTransactionStatus;
+        EthWork: EthWork;
+        Event: Event;
+        EventId: EventId;
+        EventIndex: EventIndex;
+        EventMetadataLatest: EventMetadataLatest;
+        EventMetadataV10: EventMetadataV10;
+        EventMetadataV11: EventMetadataV11;
+        EventMetadataV12: EventMetadataV12;
+        EventMetadataV13: EventMetadataV13;
+        EventMetadataV14: EventMetadataV14;
+        EventMetadataV9: EventMetadataV9;
+        EventRecord: EventRecord;
+        EvmAccount: EvmAccount;
+        EvmLog: EvmLog;
+        EvmVicinity: EvmVicinity;
+        ExecReturnValue: ExecReturnValue;
+        ExitError: ExitError;
+        ExitFatal: ExitFatal;
+        ExitReason: ExitReason;
+        ExitRevert: ExitRevert;
+        ExitSucceed: ExitSucceed;
+        ExplicitDisputeStatement: ExplicitDisputeStatement;
+        Exposure: Exposure;
+        ExtendedBalance: ExtendedBalance;
+        Extrinsic: Extrinsic;
+        ExtrinsicEra: ExtrinsicEra;
+        ExtrinsicMetadataLatest: ExtrinsicMetadataLatest;
+        ExtrinsicMetadataV11: ExtrinsicMetadataV11;
+        ExtrinsicMetadataV12: ExtrinsicMetadataV12;
+        ExtrinsicMetadataV13: ExtrinsicMetadataV13;
+        ExtrinsicMetadataV14: ExtrinsicMetadataV14;
+        ExtrinsicOrHash: ExtrinsicOrHash;
+        ExtrinsicPayload: ExtrinsicPayload;
+        ExtrinsicPayloadUnknown: ExtrinsicPayloadUnknown;
+        ExtrinsicPayloadV4: ExtrinsicPayloadV4;
+        ExtrinsicSignature: ExtrinsicSignature;
+        ExtrinsicSignatureV4: ExtrinsicSignatureV4;
+        ExtrinsicStatus: ExtrinsicStatus;
+        ExtrinsicsWeight: ExtrinsicsWeight;
+        ExtrinsicUnknown: ExtrinsicUnknown;
+        ExtrinsicV4: ExtrinsicV4;
+        FeeDetails: FeeDetails;
+        Fixed128: Fixed128;
+        Fixed64: Fixed64;
+        FixedI128: FixedI128;
+        FixedI64: FixedI64;
+        FixedU128: FixedU128;
+        FixedU64: FixedU64;
+        Forcing: Forcing;
+        ForkTreePendingChange: ForkTreePendingChange;
+        ForkTreePendingChangeNode: ForkTreePendingChangeNode;
+        FullIdentification: FullIdentification;
+        FunctionArgumentMetadataLatest: FunctionArgumentMetadataLatest;
+        FunctionArgumentMetadataV10: FunctionArgumentMetadataV10;
+        FunctionArgumentMetadataV11: FunctionArgumentMetadataV11;
+        FunctionArgumentMetadataV12: FunctionArgumentMetadataV12;
+        FunctionArgumentMetadataV13: FunctionArgumentMetadataV13;
+        FunctionArgumentMetadataV14: FunctionArgumentMetadataV14;
+        FunctionArgumentMetadataV9: FunctionArgumentMetadataV9;
+        FunctionMetadataLatest: FunctionMetadataLatest;
+        FunctionMetadataV10: FunctionMetadataV10;
+        FunctionMetadataV11: FunctionMetadataV11;
+        FunctionMetadataV12: FunctionMetadataV12;
+        FunctionMetadataV13: FunctionMetadataV13;
+        FunctionMetadataV14: FunctionMetadataV14;
+        FunctionMetadataV9: FunctionMetadataV9;
+        FundIndex: FundIndex;
+        FundInfo: FundInfo;
+        Fungibility: Fungibility;
+        FungibilityV0: FungibilityV0;
+        FungibilityV1: FungibilityV1;
+        FungibilityV2: FungibilityV2;
+        Gas: Gas;
+        GiltBid: GiltBid;
+        GlobalValidationData: GlobalValidationData;
+        GlobalValidationSchedule: GlobalValidationSchedule;
+        GrandpaCommit: GrandpaCommit;
+        GrandpaEquivocation: GrandpaEquivocation;
+        GrandpaEquivocationProof: GrandpaEquivocationProof;
+        GrandpaEquivocationValue: GrandpaEquivocationValue;
+        GrandpaJustification: GrandpaJustification;
+        GrandpaPrecommit: GrandpaPrecommit;
+        GrandpaPrevote: GrandpaPrevote;
+        GrandpaSignedPrecommit: GrandpaSignedPrecommit;
+        GroupIndex: GroupIndex;
+        H1024: H1024;
+        H128: H128;
+        H160: H160;
+        H2048: H2048;
+        H256: H256;
+        H32: H32;
+        H512: H512;
+        H64: H64;
+        Hash: Hash;
+        HeadData: HeadData;
+        Header: Header;
+        HeaderPartial: HeaderPartial;
+        Health: Health;
+        Heartbeat: Heartbeat;
+        HeartbeatTo244: HeartbeatTo244;
+        HostConfiguration: HostConfiguration;
+        HostFnWeights: HostFnWeights;
+        HostFnWeightsTo264: HostFnWeightsTo264;
+        HrmpChannel: HrmpChannel;
+        HrmpChannelId: HrmpChannelId;
+        HrmpOpenChannelRequest: HrmpOpenChannelRequest;
+        i128: i128;
+        I128: I128;
+        i16: i16;
+        I16: I16;
+        i256: i256;
+        I256: I256;
+        i32: i32;
+        I32: I32;
+        I32F32: I32F32;
+        i64: i64;
+        I64: I64;
+        i8: i8;
+        I8: I8;
+        IdentificationTuple: IdentificationTuple;
+        IdentityFields: IdentityFields;
+        IdentityInfo: IdentityInfo;
+        IdentityInfoAdditional: IdentityInfoAdditional;
+        IdentityInfoTo198: IdentityInfoTo198;
+        IdentityJudgement: IdentityJudgement;
+        ImmortalEra: ImmortalEra;
+        ImportedAux: ImportedAux;
+        InboundDownwardMessage: InboundDownwardMessage;
+        InboundHrmpMessage: InboundHrmpMessage;
+        InboundHrmpMessages: InboundHrmpMessages;
+        InboundLaneData: InboundLaneData;
+        InboundRelayer: InboundRelayer;
+        InboundStatus: InboundStatus;
+        IncludedBlocks: IncludedBlocks;
+        InclusionFee: InclusionFee;
+        IncomingParachain: IncomingParachain;
+        IncomingParachainDeploy: IncomingParachainDeploy;
+        IncomingParachainFixed: IncomingParachainFixed;
+        Index: Index;
+        IndicesLookupSource: IndicesLookupSource;
+        IndividualExposure: IndividualExposure;
+        InitializationData: InitializationData;
+        InstanceDetails: InstanceDetails;
+        InstanceId: InstanceId;
+        InstanceMetadata: InstanceMetadata;
+        InstantiateRequest: InstantiateRequest;
+        InstantiateRequestV1: InstantiateRequestV1;
+        InstantiateRequestV2: InstantiateRequestV2;
+        InstantiateReturnValue: InstantiateReturnValue;
+        InstantiateReturnValueOk: InstantiateReturnValueOk;
+        InstantiateReturnValueTo267: InstantiateReturnValueTo267;
+        InstructionV2: InstructionV2;
+        InstructionWeights: InstructionWeights;
+        InteriorMultiLocation: InteriorMultiLocation;
+        InvalidDisputeStatementKind: InvalidDisputeStatementKind;
+        InvalidTransaction: InvalidTransaction;
+        Json: Json;
+        Junction: Junction;
+        Junctions: Junctions;
+        JunctionsV1: JunctionsV1;
+        JunctionsV2: JunctionsV2;
+        JunctionV0: JunctionV0;
+        JunctionV1: JunctionV1;
+        JunctionV2: JunctionV2;
+        Justification: Justification;
+        JustificationNotification: JustificationNotification;
+        Justifications: Justifications;
+        Key: Key;
+        KeyOwnerProof: KeyOwnerProof;
+        Keys: Keys;
+        KeyType: KeyType;
+        KeyTypeId: KeyTypeId;
+        KeyValue: KeyValue;
+        KeyValueOption: KeyValueOption;
+        Kind: Kind;
+        LaneId: LaneId;
+        LastContribution: LastContribution;
+        LastRuntimeUpgradeInfo: LastRuntimeUpgradeInfo;
+        LeasePeriod: LeasePeriod;
+        LeasePeriodOf: LeasePeriodOf;
+        LegacyTransaction: LegacyTransaction;
+        Limits: Limits;
+        LimitsTo264: LimitsTo264;
+        LocalValidationData: LocalValidationData;
+        LockIdentifier: LockIdentifier;
+        LookupSource: LookupSource;
+        LookupTarget: LookupTarget;
+        LotteryConfig: LotteryConfig;
+        MaybeRandomness: MaybeRandomness;
+        MaybeVrf: MaybeVrf;
+        MemberCount: MemberCount;
+        MembershipProof: MembershipProof;
+        MessageData: MessageData;
+        MessageId: MessageId;
+        MessageIngestionType: MessageIngestionType;
+        MessageKey: MessageKey;
+        MessageNonce: MessageNonce;
+        MessageQueueChain: MessageQueueChain;
+        MessagesDeliveryProofOf: MessagesDeliveryProofOf;
+        MessagesProofOf: MessagesProofOf;
+        MessagingStateSnapshot: MessagingStateSnapshot;
+        MessagingStateSnapshotEgressEntry: MessagingStateSnapshotEgressEntry;
+        MetadataAll: MetadataAll;
+        MetadataLatest: MetadataLatest;
+        MetadataV10: MetadataV10;
+        MetadataV11: MetadataV11;
+        MetadataV12: MetadataV12;
+        MetadataV13: MetadataV13;
+        MetadataV14: MetadataV14;
+        MetadataV9: MetadataV9;
+        MigrationStatusResult: MigrationStatusResult;
+        MmrLeafBatchProof: MmrLeafBatchProof;
+        MmrLeafProof: MmrLeafProof;
+        MmrRootHash: MmrRootHash;
+        ModuleConstantMetadataV10: ModuleConstantMetadataV10;
+        ModuleConstantMetadataV11: ModuleConstantMetadataV11;
+        ModuleConstantMetadataV12: ModuleConstantMetadataV12;
+        ModuleConstantMetadataV13: ModuleConstantMetadataV13;
+        ModuleConstantMetadataV9: ModuleConstantMetadataV9;
+        ModuleId: ModuleId;
+        ModuleMetadataV10: ModuleMetadataV10;
+        ModuleMetadataV11: ModuleMetadataV11;
+        ModuleMetadataV12: ModuleMetadataV12;
+        ModuleMetadataV13: ModuleMetadataV13;
+        ModuleMetadataV9: ModuleMetadataV9;
+        Moment: Moment;
+        MomentOf: MomentOf;
+        MoreAttestations: MoreAttestations;
+        MortalEra: MortalEra;
+        MultiAddress: MultiAddress;
+        MultiAsset: MultiAsset;
+        MultiAssetFilter: MultiAssetFilter;
+        MultiAssetFilterV1: MultiAssetFilterV1;
+        MultiAssetFilterV2: MultiAssetFilterV2;
+        MultiAssets: MultiAssets;
+        MultiAssetsV1: MultiAssetsV1;
+        MultiAssetsV2: MultiAssetsV2;
+        MultiAssetV0: MultiAssetV0;
+        MultiAssetV1: MultiAssetV1;
+        MultiAssetV2: MultiAssetV2;
+        MultiDisputeStatementSet: MultiDisputeStatementSet;
+        MultiLocation: MultiLocation;
+        MultiLocationV0: MultiLocationV0;
+        MultiLocationV1: MultiLocationV1;
+        MultiLocationV2: MultiLocationV2;
+        Multiplier: Multiplier;
+        Multisig: Multisig;
+        MultiSignature: MultiSignature;
+        MultiSigner: MultiSigner;
+        NetworkId: NetworkId;
+        NetworkState: NetworkState;
+        NetworkStatePeerset: NetworkStatePeerset;
+        NetworkStatePeersetInfo: NetworkStatePeersetInfo;
+        NewBidder: NewBidder;
+        NextAuthority: NextAuthority;
+        NextConfigDescriptor: NextConfigDescriptor;
+        NextConfigDescriptorV1: NextConfigDescriptorV1;
+        NodeRole: NodeRole;
+        Nominations: Nominations;
+        NominatorIndex: NominatorIndex;
+        NominatorIndexCompact: NominatorIndexCompact;
+        NotConnectedPeer: NotConnectedPeer;
+        Null: Null;
+        OffchainAccuracy: OffchainAccuracy;
+        OffchainAccuracyCompact: OffchainAccuracyCompact;
+        OffenceDetails: OffenceDetails;
+        Offender: Offender;
+        OpaqueCall: OpaqueCall;
+        OpaqueMultiaddr: OpaqueMultiaddr;
+        OpaqueNetworkState: OpaqueNetworkState;
+        OpaquePeerId: OpaquePeerId;
+        OpaqueTimeSlot: OpaqueTimeSlot;
+        OpenTip: OpenTip;
+        OpenTipFinderTo225: OpenTipFinderTo225;
+        OpenTipTip: OpenTipTip;
+        OpenTipTo225: OpenTipTo225;
+        OperatingMode: OperatingMode;
+        OptionBool: OptionBool;
+        Origin: Origin;
+        OriginCaller: OriginCaller;
+        OriginKindV0: OriginKindV0;
+        OriginKindV1: OriginKindV1;
+        OriginKindV2: OriginKindV2;
+        OutboundHrmpMessage: OutboundHrmpMessage;
+        OutboundLaneData: OutboundLaneData;
+        OutboundMessageFee: OutboundMessageFee;
+        OutboundPayload: OutboundPayload;
+        OutboundStatus: OutboundStatus;
+        Outcome: Outcome;
+        OverweightIndex: OverweightIndex;
+        Owner: Owner;
+        PageCounter: PageCounter;
+        PageIndexData: PageIndexData;
+        PalletCallMetadataLatest: PalletCallMetadataLatest;
+        PalletCallMetadataV14: PalletCallMetadataV14;
+        PalletConstantMetadataLatest: PalletConstantMetadataLatest;
+        PalletConstantMetadataV14: PalletConstantMetadataV14;
+        PalletErrorMetadataLatest: PalletErrorMetadataLatest;
+        PalletErrorMetadataV14: PalletErrorMetadataV14;
+        PalletEventMetadataLatest: PalletEventMetadataLatest;
+        PalletEventMetadataV14: PalletEventMetadataV14;
+        PalletId: PalletId;
+        PalletMetadataLatest: PalletMetadataLatest;
+        PalletMetadataV14: PalletMetadataV14;
+        PalletsOrigin: PalletsOrigin;
+        PalletStorageMetadataLatest: PalletStorageMetadataLatest;
+        PalletStorageMetadataV14: PalletStorageMetadataV14;
+        PalletVersion: PalletVersion;
+        ParachainDispatchOrigin: ParachainDispatchOrigin;
+        ParachainInherentData: ParachainInherentData;
+        ParachainProposal: ParachainProposal;
+        ParachainsInherentData: ParachainsInherentData;
+        ParaGenesisArgs: ParaGenesisArgs;
+        ParaId: ParaId;
+        ParaInfo: ParaInfo;
+        ParaLifecycle: ParaLifecycle;
+        Parameter: Parameter;
+        ParaPastCodeMeta: ParaPastCodeMeta;
+        ParaScheduling: ParaScheduling;
+        ParathreadClaim: ParathreadClaim;
+        ParathreadClaimQueue: ParathreadClaimQueue;
+        ParathreadEntry: ParathreadEntry;
+        ParaValidatorIndex: ParaValidatorIndex;
+        Pays: Pays;
+        Peer: Peer;
+        PeerEndpoint: PeerEndpoint;
+        PeerEndpointAddr: PeerEndpointAddr;
+        PeerInfo: PeerInfo;
+        PeerPing: PeerPing;
+        PendingChange: PendingChange;
+        PendingPause: PendingPause;
+        PendingResume: PendingResume;
+        Perbill: Perbill;
+        Percent: Percent;
+        PerDispatchClassU32: PerDispatchClassU32;
+        PerDispatchClassWeight: PerDispatchClassWeight;
+        PerDispatchClassWeightsPerClass: PerDispatchClassWeightsPerClass;
+        Period: Period;
+        Permill: Permill;
+        PermissionLatest: PermissionLatest;
+        PermissionsV1: PermissionsV1;
+        PermissionVersions: PermissionVersions;
+        Perquintill: Perquintill;
+        PersistedValidationData: PersistedValidationData;
+        PerU16: PerU16;
+        Phantom: Phantom;
+        PhantomData: PhantomData;
+        Phase: Phase;
+        PhragmenScore: PhragmenScore;
+        Points: Points;
+        PortableType: PortableType;
+        PortableTypeV14: PortableTypeV14;
+        Precommits: Precommits;
+        PrefabWasmModule: PrefabWasmModule;
+        PrefixedStorageKey: PrefixedStorageKey;
+        PreimageStatus: PreimageStatus;
+        PreimageStatusAvailable: PreimageStatusAvailable;
+        PreRuntime: PreRuntime;
+        Prevotes: Prevotes;
+        Priority: Priority;
+        PriorLock: PriorLock;
+        PropIndex: PropIndex;
+        Proposal: Proposal;
+        ProposalIndex: ProposalIndex;
+        ProxyAnnouncement: ProxyAnnouncement;
+        ProxyDefinition: ProxyDefinition;
+        ProxyState: ProxyState;
+        ProxyType: ProxyType;
+        QueryId: QueryId;
+        QueryStatus: QueryStatus;
+        QueueConfigData: QueueConfigData;
+        QueuedParathread: QueuedParathread;
+        Randomness: Randomness;
+        Raw: Raw;
+        RawAuraPreDigest: RawAuraPreDigest;
+        RawBabePreDigest: RawBabePreDigest;
+        RawBabePreDigestCompat: RawBabePreDigestCompat;
+        RawBabePreDigestPrimary: RawBabePreDigestPrimary;
+        RawBabePreDigestPrimaryTo159: RawBabePreDigestPrimaryTo159;
+        RawBabePreDigestSecondaryPlain: RawBabePreDigestSecondaryPlain;
+        RawBabePreDigestSecondaryTo159: RawBabePreDigestSecondaryTo159;
+        RawBabePreDigestSecondaryVRF: RawBabePreDigestSecondaryVRF;
+        RawBabePreDigestTo159: RawBabePreDigestTo159;
+        RawOrigin: RawOrigin;
+        RawSolution: RawSolution;
+        RawSolutionTo265: RawSolutionTo265;
+        RawSolutionWith16: RawSolutionWith16;
+        RawSolutionWith24: RawSolutionWith24;
+        RawVRFOutput: RawVRFOutput;
+        ReadProof: ReadProof;
+        ReadySolution: ReadySolution;
+        Reasons: Reasons;
+        RecoveryConfig: RecoveryConfig;
+        RefCount: RefCount;
+        RefCountTo259: RefCountTo259;
+        ReferendumIndex: ReferendumIndex;
+        ReferendumInfo: ReferendumInfo;
+        ReferendumInfoFinished: ReferendumInfoFinished;
+        ReferendumInfoTo239: ReferendumInfoTo239;
+        ReferendumStatus: ReferendumStatus;
+        RegisteredParachainInfo: RegisteredParachainInfo;
+        RegistrarIndex: RegistrarIndex;
+        RegistrarInfo: RegistrarInfo;
+        Registration: Registration;
+        RegistrationJudgement: RegistrationJudgement;
+        RegistrationTo198: RegistrationTo198;
+        RelayBlockNumber: RelayBlockNumber;
+        RelayChainBlockNumber: RelayChainBlockNumber;
+        RelayChainHash: RelayChainHash;
+        RelayerId: RelayerId;
+        RelayHash: RelayHash;
+        Releases: Releases;
+        Remark: Remark;
+        Renouncing: Renouncing;
+        RentProjection: RentProjection;
+        ReplacementTimes: ReplacementTimes;
+        ReportedRoundStates: ReportedRoundStates;
+        Reporter: Reporter;
+        ReportIdOf: ReportIdOf;
+        ReserveData: ReserveData;
+        ReserveIdentifier: ReserveIdentifier;
+        Response: Response;
+        ResponseV0: ResponseV0;
+        ResponseV1: ResponseV1;
+        ResponseV2: ResponseV2;
+        ResponseV2Error: ResponseV2Error;
+        ResponseV2Result: ResponseV2Result;
+        Retriable: Retriable;
+        RewardDestination: RewardDestination;
+        RewardPoint: RewardPoint;
+        RoundSnapshot: RoundSnapshot;
+        RoundState: RoundState;
+        RpcMethods: RpcMethods;
+        RuntimeDbWeight: RuntimeDbWeight;
+        RuntimeDispatchInfo: RuntimeDispatchInfo;
+        RuntimeVersion: RuntimeVersion;
+        RuntimeVersionApi: RuntimeVersionApi;
+        RuntimeVersionPartial: RuntimeVersionPartial;
+        Schedule: Schedule;
+        Scheduled: Scheduled;
+        ScheduledTo254: ScheduledTo254;
+        SchedulePeriod: SchedulePeriod;
+        SchedulePriority: SchedulePriority;
+        ScheduleTo212: ScheduleTo212;
+        ScheduleTo258: ScheduleTo258;
+        ScheduleTo264: ScheduleTo264;
+        Scheduling: Scheduling;
+        Seal: Seal;
+        SealV0: SealV0;
+        SeatHolder: SeatHolder;
+        SeedOf: SeedOf;
+        ServiceQuality: ServiceQuality;
+        SessionIndex: SessionIndex;
+        SessionInfo: SessionInfo;
+        SessionInfoValidatorGroup: SessionInfoValidatorGroup;
+        SessionKeys1: SessionKeys1;
+        SessionKeys10: SessionKeys10;
+        SessionKeys10B: SessionKeys10B;
+        SessionKeys2: SessionKeys2;
+        SessionKeys3: SessionKeys3;
+        SessionKeys4: SessionKeys4;
+        SessionKeys5: SessionKeys5;
+        SessionKeys6: SessionKeys6;
+        SessionKeys6B: SessionKeys6B;
+        SessionKeys7: SessionKeys7;
+        SessionKeys7B: SessionKeys7B;
+        SessionKeys8: SessionKeys8;
+        SessionKeys8B: SessionKeys8B;
+        SessionKeys9: SessionKeys9;
+        SessionKeys9B: SessionKeys9B;
+        SetId: SetId;
+        SetIndex: SetIndex;
+        Si0Field: Si0Field;
+        Si0LookupTypeId: Si0LookupTypeId;
+        Si0Path: Si0Path;
+        Si0Type: Si0Type;
+        Si0TypeDef: Si0TypeDef;
+        Si0TypeDefArray: Si0TypeDefArray;
+        Si0TypeDefBitSequence: Si0TypeDefBitSequence;
+        Si0TypeDefCompact: Si0TypeDefCompact;
+        Si0TypeDefComposite: Si0TypeDefComposite;
+        Si0TypeDefPhantom: Si0TypeDefPhantom;
+        Si0TypeDefPrimitive: Si0TypeDefPrimitive;
+        Si0TypeDefSequence: Si0TypeDefSequence;
+        Si0TypeDefTuple: Si0TypeDefTuple;
+        Si0TypeDefVariant: Si0TypeDefVariant;
+        Si0TypeParameter: Si0TypeParameter;
+        Si0Variant: Si0Variant;
+        Si1Field: Si1Field;
+        Si1LookupTypeId: Si1LookupTypeId;
+        Si1Path: Si1Path;
+        Si1Type: Si1Type;
+        Si1TypeDef: Si1TypeDef;
+        Si1TypeDefArray: Si1TypeDefArray;
+        Si1TypeDefBitSequence: Si1TypeDefBitSequence;
+        Si1TypeDefCompact: Si1TypeDefCompact;
+        Si1TypeDefComposite: Si1TypeDefComposite;
+        Si1TypeDefPrimitive: Si1TypeDefPrimitive;
+        Si1TypeDefSequence: Si1TypeDefSequence;
+        Si1TypeDefTuple: Si1TypeDefTuple;
+        Si1TypeDefVariant: Si1TypeDefVariant;
+        Si1TypeParameter: Si1TypeParameter;
+        Si1Variant: Si1Variant;
+        SiField: SiField;
+        Signature: Signature;
+        SignedAvailabilityBitfield: SignedAvailabilityBitfield;
+        SignedAvailabilityBitfields: SignedAvailabilityBitfields;
+        SignedBlock: SignedBlock;
+        SignedBlockWithJustification: SignedBlockWithJustification;
+        SignedBlockWithJustifications: SignedBlockWithJustifications;
+        SignedExtensionMetadataLatest: SignedExtensionMetadataLatest;
+        SignedExtensionMetadataV14: SignedExtensionMetadataV14;
+        SignedSubmission: SignedSubmission;
+        SignedSubmissionOf: SignedSubmissionOf;
+        SignedSubmissionTo276: SignedSubmissionTo276;
+        SignerPayload: SignerPayload;
+        SigningContext: SigningContext;
+        SiLookupTypeId: SiLookupTypeId;
+        SiPath: SiPath;
+        SiType: SiType;
+        SiTypeDef: SiTypeDef;
+        SiTypeDefArray: SiTypeDefArray;
+        SiTypeDefBitSequence: SiTypeDefBitSequence;
+        SiTypeDefCompact: SiTypeDefCompact;
+        SiTypeDefComposite: SiTypeDefComposite;
+        SiTypeDefPrimitive: SiTypeDefPrimitive;
+        SiTypeDefSequence: SiTypeDefSequence;
+        SiTypeDefTuple: SiTypeDefTuple;
+        SiTypeDefVariant: SiTypeDefVariant;
+        SiTypeParameter: SiTypeParameter;
+        SiVariant: SiVariant;
+        SlashingSpans: SlashingSpans;
+        SlashingSpansTo204: SlashingSpansTo204;
+        SlashJournalEntry: SlashJournalEntry;
+        Slot: Slot;
+        SlotNumber: SlotNumber;
+        SlotRange: SlotRange;
+        SlotRange10: SlotRange10;
+        SocietyJudgement: SocietyJudgement;
+        SocietyVote: SocietyVote;
+        SolutionOrSnapshotSize: SolutionOrSnapshotSize;
+        SolutionSupport: SolutionSupport;
+        SolutionSupports: SolutionSupports;
+        SpanIndex: SpanIndex;
+        SpanRecord: SpanRecord;
+        SpecVersion: SpecVersion;
+        Sr25519Signature: Sr25519Signature;
+        StakingLedger: StakingLedger;
+        StakingLedgerTo223: StakingLedgerTo223;
+        StakingLedgerTo240: StakingLedgerTo240;
+        Statement: Statement;
+        StatementKind: StatementKind;
+        StorageChangeSet: StorageChangeSet;
+        StorageData: StorageData;
+        StorageDeposit: StorageDeposit;
+        StorageEntryMetadataLatest: StorageEntryMetadataLatest;
+        StorageEntryMetadataV10: StorageEntryMetadataV10;
+        StorageEntryMetadataV11: StorageEntryMetadataV11;
+        StorageEntryMetadataV12: StorageEntryMetadataV12;
+        StorageEntryMetadataV13: StorageEntryMetadataV13;
+        StorageEntryMetadataV14: StorageEntryMetadataV14;
+        StorageEntryMetadataV9: StorageEntryMetadataV9;
+        StorageEntryModifierLatest: StorageEntryModifierLatest;
+        StorageEntryModifierV10: StorageEntryModifierV10;
+        StorageEntryModifierV11: StorageEntryModifierV11;
+        StorageEntryModifierV12: StorageEntryModifierV12;
+        StorageEntryModifierV13: StorageEntryModifierV13;
+        StorageEntryModifierV14: StorageEntryModifierV14;
+        StorageEntryModifierV9: StorageEntryModifierV9;
+        StorageEntryTypeLatest: StorageEntryTypeLatest;
+        StorageEntryTypeV10: StorageEntryTypeV10;
+        StorageEntryTypeV11: StorageEntryTypeV11;
+        StorageEntryTypeV12: StorageEntryTypeV12;
+        StorageEntryTypeV13: StorageEntryTypeV13;
+        StorageEntryTypeV14: StorageEntryTypeV14;
+        StorageEntryTypeV9: StorageEntryTypeV9;
+        StorageHasher: StorageHasher;
+        StorageHasherV10: StorageHasherV10;
+        StorageHasherV11: StorageHasherV11;
+        StorageHasherV12: StorageHasherV12;
+        StorageHasherV13: StorageHasherV13;
+        StorageHasherV14: StorageHasherV14;
+        StorageHasherV9: StorageHasherV9;
+        StorageKey: StorageKey;
+        StorageKind: StorageKind;
+        StorageMetadataV10: StorageMetadataV10;
+        StorageMetadataV11: StorageMetadataV11;
+        StorageMetadataV12: StorageMetadataV12;
+        StorageMetadataV13: StorageMetadataV13;
+        StorageMetadataV9: StorageMetadataV9;
+        StorageProof: StorageProof;
+        StoredPendingChange: StoredPendingChange;
+        StoredState: StoredState;
+        StrikeCount: StrikeCount;
+        SubId: SubId;
+        SubmissionIndicesOf: SubmissionIndicesOf;
+        Supports: Supports;
+        SyncState: SyncState;
+        SystemInherentData: SystemInherentData;
+        SystemOrigin: SystemOrigin;
+        Tally: Tally;
+        TaskAddress: TaskAddress;
+        TAssetBalance: TAssetBalance;
+        TAssetDepositBalance: TAssetDepositBalance;
+        Text: Text;
+        Timepoint: Timepoint;
+        TokenError: TokenError;
+        TombstoneContractInfo: TombstoneContractInfo;
+        TraceBlockResponse: TraceBlockResponse;
+        TraceError: TraceError;
+        TransactionalError: TransactionalError;
+        TransactionInfo: TransactionInfo;
+        TransactionPriority: TransactionPriority;
+        TransactionStorageProof: TransactionStorageProof;
+        TransactionV0: TransactionV0;
+        TransactionV1: TransactionV1;
+        TransactionV2: TransactionV2;
+        TransactionValidityError: TransactionValidityError;
+        TransientValidationData: TransientValidationData;
+        TreasuryProposal: TreasuryProposal;
+        TrieId: TrieId;
+        TrieIndex: TrieIndex;
+        Type: Type;
+        u128: u128;
+        U128: U128;
+        u16: u16;
+        U16: U16;
+        u256: u256;
+        U256: U256;
+        u32: u32;
+        U32: U32;
+        U32F32: U32F32;
+        u64: u64;
+        U64: U64;
+        u8: u8;
+        U8: U8;
+        UnappliedSlash: UnappliedSlash;
+        UnappliedSlashOther: UnappliedSlashOther;
+        UncleEntryItem: UncleEntryItem;
+        UnknownTransaction: UnknownTransaction;
+        UnlockChunk: UnlockChunk;
+        UnrewardedRelayer: UnrewardedRelayer;
+        UnrewardedRelayersState: UnrewardedRelayersState;
+        UpgradeGoAhead: UpgradeGoAhead;
+        UpgradeRestriction: UpgradeRestriction;
+        UpwardMessage: UpwardMessage;
+        usize: usize;
+        USize: USize;
+        ValidationCode: ValidationCode;
+        ValidationCodeHash: ValidationCodeHash;
+        ValidationData: ValidationData;
+        ValidationDataType: ValidationDataType;
+        ValidationFunctionParams: ValidationFunctionParams;
+        ValidatorCount: ValidatorCount;
+        ValidatorId: ValidatorId;
+        ValidatorIdOf: ValidatorIdOf;
+        ValidatorIndex: ValidatorIndex;
+        ValidatorIndexCompact: ValidatorIndexCompact;
+        ValidatorPrefs: ValidatorPrefs;
+        ValidatorPrefsTo145: ValidatorPrefsTo145;
+        ValidatorPrefsTo196: ValidatorPrefsTo196;
+        ValidatorPrefsWithBlocked: ValidatorPrefsWithBlocked;
+        ValidatorPrefsWithCommission: ValidatorPrefsWithCommission;
+        ValidatorSetId: ValidatorSetId;
+        ValidatorSignature: ValidatorSignature;
+        ValidDisputeStatementKind: ValidDisputeStatementKind;
+        ValidityAttestation: ValidityAttestation;
+        VecInboundHrmpMessage: VecInboundHrmpMessage;
+        VersionedMultiAsset: VersionedMultiAsset;
+        VersionedMultiAssets: VersionedMultiAssets;
+        VersionedMultiLocation: VersionedMultiLocation;
+        VersionedResponse: VersionedResponse;
+        VersionedXcm: VersionedXcm;
+        VersionMigrationStage: VersionMigrationStage;
+        VestingInfo: VestingInfo;
+        VestingSchedule: VestingSchedule;
+        Vote: Vote;
+        VoteIndex: VoteIndex;
+        Voter: Voter;
+        VoterInfo: VoterInfo;
+        Votes: Votes;
+        VotesTo230: VotesTo230;
+        VoteThreshold: VoteThreshold;
+        VoteWeight: VoteWeight;
+        Voting: Voting;
+        VotingDelegating: VotingDelegating;
+        VotingDirect: VotingDirect;
+        VotingDirectVote: VotingDirectVote;
+        VouchingStatus: VouchingStatus;
+        VrfData: VrfData;
+        VrfOutput: VrfOutput;
+        VrfProof: VrfProof;
+        Weight: Weight;
+        WeightLimitV2: WeightLimitV2;
+        WeightMultiplier: WeightMultiplier;
+        WeightPerClass: WeightPerClass;
+        WeightToFeeCoefficient: WeightToFeeCoefficient;
+        WildFungibility: WildFungibility;
+        WildFungibilityV0: WildFungibilityV0;
+        WildFungibilityV1: WildFungibilityV1;
+        WildFungibilityV2: WildFungibilityV2;
+        WildMultiAsset: WildMultiAsset;
+        WildMultiAssetV1: WildMultiAssetV1;
+        WildMultiAssetV2: WildMultiAssetV2;
+        WinnersData: WinnersData;
+        WinnersData10: WinnersData10;
+        WinnersDataTuple: WinnersDataTuple;
+        WinnersDataTuple10: WinnersDataTuple10;
+        WinningData: WinningData;
+        WinningData10: WinningData10;
+        WinningDataEntry: WinningDataEntry;
+        WithdrawReasons: WithdrawReasons;
+        Xcm: Xcm;
+        XcmAssetId: XcmAssetId;
+        XcmError: XcmError;
+        XcmErrorV0: XcmErrorV0;
+        XcmErrorV1: XcmErrorV1;
+        XcmErrorV2: XcmErrorV2;
+        XcmOrder: XcmOrder;
+        XcmOrderV0: XcmOrderV0;
+        XcmOrderV1: XcmOrderV1;
+        XcmOrderV2: XcmOrderV2;
+        XcmOrigin: XcmOrigin;
+        XcmOriginKind: XcmOriginKind;
+        XcmpMessageFormat: XcmpMessageFormat;
+        XcmV0: XcmV0;
+        XcmV1: XcmV1;
+        XcmV2: XcmV2;
+        XcmVersion: XcmVersion;
+    }
+}
diff --git a/node_modules/@joystream/types/types/lib/augment/lookup.d.ts b/node_modules/@joystream/types/types/lib/augment/lookup.d.ts
new file mode 100644
index 0000000..daf1979
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/lookup.d.ts
@@ -0,0 +1,4623 @@
+declare const _default: {
+    /**
+     * Lookup3: frame_system::AccountInfo<Index, pallet_balances::AccountData<Balance>>
+     **/
+    FrameSystemAccountInfo: {
+        nonce: string;
+        consumers: string;
+        providers: string;
+        sufficients: string;
+        data: string;
+    };
+    /**
+     * Lookup5: pallet_balances::AccountData<Balance>
+     **/
+    PalletBalancesAccountData: {
+        free: string;
+        reserved: string;
+        miscFrozen: string;
+        feeFrozen: string;
+    };
+    /**
+     * Lookup7: frame_support::weights::PerDispatchClass<T>
+     **/
+    FrameSupportWeightsPerDispatchClassU64: {
+        normal: string;
+        operational: string;
+        mandatory: string;
+    };
+    /**
+     * Lookup11: sp_runtime::generic::digest::Digest
+     **/
+    SpRuntimeDigest: {
+        logs: string;
+    };
+    /**
+     * Lookup13: sp_runtime::generic::digest::DigestItem
+     **/
+    SpRuntimeDigestDigestItem: {
+        _enum: {
+            Other: string;
+            __Unused1: string;
+            __Unused2: string;
+            __Unused3: string;
+            Consensus: string;
+            Seal: string;
+            PreRuntime: string;
+            __Unused7: string;
+            RuntimeEnvironmentUpdated: string;
+        };
+    };
+    /**
+     * Lookup16: frame_system::EventRecord<joystream_node_runtime::Event, primitive_types::H256>
+     **/
+    FrameSystemEventRecord: {
+        phase: string;
+        event: string;
+        topics: string;
+    };
+    /**
+     * Lookup18: frame_system::pallet::Event<T>
+     **/
+    FrameSystemEvent: {
+        _enum: {
+            ExtrinsicSuccess: {
+                dispatchInfo: string;
+            };
+            ExtrinsicFailed: {
+                dispatchError: string;
+                dispatchInfo: string;
+            };
+            CodeUpdated: string;
+            NewAccount: {
+                account: string;
+            };
+            KilledAccount: {
+                account: string;
+            };
+            Remarked: {
+                _alias: {
+                    hash_: string;
+                };
+                sender: string;
+                hash_: string;
+            };
+        };
+    };
+    /**
+     * Lookup19: frame_support::weights::DispatchInfo
+     **/
+    FrameSupportWeightsDispatchInfo: {
+        weight: string;
+        class: string;
+        paysFee: string;
+    };
+    /**
+     * Lookup20: frame_support::weights::DispatchClass
+     **/
+    FrameSupportWeightsDispatchClass: {
+        _enum: string[];
+    };
+    /**
+     * Lookup21: frame_support::weights::Pays
+     **/
+    FrameSupportWeightsPays: {
+        _enum: string[];
+    };
+    /**
+     * Lookup22: sp_runtime::DispatchError
+     **/
+    SpRuntimeDispatchError: {
+        _enum: {
+            Other: string;
+            CannotLookup: string;
+            BadOrigin: string;
+            Module: string;
+            ConsumerRemaining: string;
+            NoProviders: string;
+            TooManyConsumers: string;
+            Token: string;
+            Arithmetic: string;
+            Transactional: string;
+        };
+    };
+    /**
+     * Lookup23: sp_runtime::ModuleError
+     **/
+    SpRuntimeModuleError: {
+        index: string;
+        error: string;
+    };
+    /**
+     * Lookup24: sp_runtime::TokenError
+     **/
+    SpRuntimeTokenError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup25: sp_runtime::ArithmeticError
+     **/
+    SpRuntimeArithmeticError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup26: sp_runtime::TransactionalError
+     **/
+    SpRuntimeTransactionalError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup27: pallet_utility::pallet::Event
+     **/
+    PalletUtilityEvent: {
+        _enum: {
+            BatchInterrupted: {
+                index: string;
+                error: string;
+            };
+            BatchCompleted: string;
+            BatchCompletedWithErrors: string;
+            ItemCompleted: string;
+            ItemFailed: {
+                error: string;
+            };
+            DispatchedAs: {
+                result: string;
+            };
+        };
+    };
+    /**
+     * Lookup30: pallet_balances::pallet::Event<T, I>
+     **/
+    PalletBalancesEvent: {
+        _enum: {
+            Endowed: {
+                account: string;
+                freeBalance: string;
+            };
+            DustLost: {
+                account: string;
+                amount: string;
+            };
+            Transfer: {
+                from: string;
+                to: string;
+                amount: string;
+            };
+            BalanceSet: {
+                who: string;
+                free: string;
+                reserved: string;
+            };
+            Reserved: {
+                who: string;
+                amount: string;
+            };
+            Unreserved: {
+                who: string;
+                amount: string;
+            };
+            ReserveRepatriated: {
+                from: string;
+                to: string;
+                amount: string;
+                destinationStatus: string;
+            };
+            Deposit: {
+                who: string;
+                amount: string;
+            };
+            Withdraw: {
+                who: string;
+                amount: string;
+            };
+            Slashed: {
+                who: string;
+                amount: string;
+            };
+        };
+    };
+    /**
+     * Lookup31: frame_support::traits::tokens::misc::BalanceStatus
+     **/
+    FrameSupportTokensMiscBalanceStatus: {
+        _enum: string[];
+    };
+    /**
+     * Lookup32: pallet_election_provider_multi_phase::pallet::Event<T>
+     **/
+    PalletElectionProviderMultiPhaseEvent: {
+        _enum: {
+            SolutionStored: {
+                electionCompute: string;
+                prevEjected: string;
+            };
+            ElectionFinalized: {
+                electionCompute: string;
+            };
+            Rewarded: {
+                account: string;
+                value: string;
+            };
+            Slashed: {
+                account: string;
+                value: string;
+            };
+            SignedPhaseStarted: {
+                round: string;
+            };
+            UnsignedPhaseStarted: {
+                round: string;
+            };
+        };
+    };
+    /**
+     * Lookup33: pallet_election_provider_multi_phase::ElectionCompute
+     **/
+    PalletElectionProviderMultiPhaseElectionCompute: {
+        _enum: string[];
+    };
+    /**
+     * Lookup36: pallet_staking::pallet::pallet::Event<T>
+     **/
+    PalletStakingPalletEvent: {
+        _enum: {
+            EraPaid: string;
+            Rewarded: string;
+            Slashed: string;
+            OldSlashingReportDiscarded: string;
+            StakersElected: string;
+            Bonded: string;
+            Unbonded: string;
+            Withdrawn: string;
+            Kicked: string;
+            StakingElectionFailed: string;
+            Chilled: string;
+            PayoutStarted: string;
+            ValidatorPrefsSet: string;
+        };
+    };
+    /**
+     * Lookup37: pallet_staking::ValidatorPrefs
+     **/
+    PalletStakingValidatorPrefs: {
+        commission: string;
+        blocked: string;
+    };
+    /**
+     * Lookup40: pallet_session::pallet::Event
+     **/
+    PalletSessionEvent: {
+        _enum: {
+            NewSession: {
+                sessionIndex: string;
+            };
+        };
+    };
+    /**
+     * Lookup41: pallet_grandpa::pallet::Event
+     **/
+    PalletGrandpaEvent: {
+        _enum: {
+            NewAuthorities: {
+                authoritySet: string;
+            };
+            Paused: string;
+            Resumed: string;
+        };
+    };
+    /**
+     * Lookup44: sp_finality_grandpa::app::Public
+     **/
+    SpFinalityGrandpaAppPublic: string;
+    /**
+     * Lookup45: sp_core::ed25519::Public
+     **/
+    SpCoreEd25519Public: string;
+    /**
+     * Lookup46: pallet_im_online::pallet::Event<T>
+     **/
+    PalletImOnlineEvent: {
+        _enum: {
+            HeartbeatReceived: {
+                authorityId: string;
+            };
+            AllGood: string;
+            SomeOffline: {
+                offline: string;
+            };
+        };
+    };
+    /**
+     * Lookup47: pallet_im_online::sr25519::app_sr25519::Public
+     **/
+    PalletImOnlineSr25519AppSr25519Public: string;
+    /**
+     * Lookup48: sp_core::sr25519::Public
+     **/
+    SpCoreSr25519Public: string;
+    /**
+     * Lookup51: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStakingExposure: {
+        total: string;
+        own: string;
+        others: string;
+    };
+    /**
+     * Lookup54: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStakingIndividualExposure: {
+        who: string;
+        value: string;
+    };
+    /**
+     * Lookup55: pallet_offences::pallet::Event
+     **/
+    PalletOffencesEvent: {
+        _enum: {
+            Offence: {
+                kind: string;
+                timeslot: string;
+            };
+        };
+    };
+    /**
+     * Lookup57: pallet_bags_list::pallet::Event<T, I>
+     **/
+    PalletBagsListEvent: {
+        _enum: {
+            Rebagged: {
+                who: string;
+                from: string;
+                to: string;
+            };
+            ScoreUpdated: {
+                who: string;
+                newScore: string;
+            };
+        };
+    };
+    /**
+     * Lookup58: pallet_vesting::pallet::Event<T>
+     **/
+    PalletVestingEvent: {
+        _enum: {
+            VestingUpdated: {
+                account: string;
+                unvested: string;
+            };
+            VestingCompleted: {
+                account: string;
+            };
+        };
+    };
+    /**
+     * Lookup59: pallet_multisig::pallet::Event<T>
+     **/
+    PalletMultisigEvent: {
+        _enum: {
+            NewMultisig: {
+                approving: string;
+                multisig: string;
+                callHash: string;
+            };
+            MultisigApproval: {
+                approving: string;
+                timepoint: string;
+                multisig: string;
+                callHash: string;
+            };
+            MultisigExecuted: {
+                approving: string;
+                timepoint: string;
+                multisig: string;
+                callHash: string;
+                result: string;
+            };
+            MultisigCancelled: {
+                cancelling: string;
+                timepoint: string;
+                multisig: string;
+                callHash: string;
+            };
+        };
+    };
+    /**
+     * Lookup60: pallet_multisig::Timepoint<BlockNumber>
+     **/
+    PalletMultisigTimepoint: {
+        height: string;
+        index: string;
+    };
+    /**
+     * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     **/
+    PalletCouncilRawEvent: {
+        _enum: {
+            AnnouncingPeriodStarted: string;
+            NotEnoughCandidates: string;
+            VotingPeriodStarted: string;
+            NewCandidate: string;
+            NewCouncilElected: string;
+            NewCouncilNotElected: string;
+            CandidacyStakeRelease: string;
+            CandidacyWithdraw: string;
+            CandidacyNoteSet: string;
+            RewardPayment: string;
+            BudgetBalanceSet: string;
+            BudgetRefill: string;
+            BudgetRefillPlanned: string;
+            BudgetIncrementUpdated: string;
+            CouncilorRewardUpdated: string;
+            RequestFunded: string;
+            CouncilBudgetFunded: string;
+            CouncilorRemarked: string;
+            CandidateRemarked: string;
+        };
+    };
+    /**
+     * Lookup63: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     **/
+    PalletReferendumRawEvent: {
+        _enum: {
+            ReferendumStarted: string;
+            ReferendumStartedForcefully: string;
+            RevealingStageStarted: string;
+            ReferendumFinished: string;
+            VoteCast: string;
+            VoteRevealed: string;
+            StakeReleased: string;
+            AccountOptedOutOfVoting: string;
+        };
+    };
+    /**
+     * Lookup64: pallet_referendum::Instance1
+     **/
+    PalletReferendumInstance1: string;
+    /**
+     * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
+     **/
+    PalletReferendumOptionResult: {
+        optionId: string;
+        votePower: string;
+    };
+    /**
+     * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletMembershipRawEvent: {
+        _enum: {
+            MemberInvited: string;
+            MembershipGifted: string;
+            MembershipBought: string;
+            MemberProfileUpdated: string;
+            MemberAccountsUpdated: string;
+            MemberVerificationStatusUpdated: string;
+            ReferralCutUpdated: string;
+            InvitesTransferred: string;
+            MembershipPriceUpdated: string;
+            InitialInvitationBalanceUpdated: string;
+            LeaderInvitationQuotaUpdated: string;
+            InitialInvitationCountUpdated: string;
+            StakingAccountAdded: string;
+            StakingAccountRemoved: string;
+            StakingAccountConfirmed: string;
+            MemberRemarked: string;
+            MemberCreated: string;
+        };
+    };
+    /**
+     * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     **/
+    PalletMembershipBuyMembershipParameters: {
+        rootAccount: string;
+        controllerAccount: string;
+        handle: string;
+        metadata: string;
+        referrerId: string;
+    };
+    /**
+     * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     **/
+    PalletMembershipInviteMembershipParameters: {
+        invitingMemberId: string;
+        rootAccount: string;
+        controllerAccount: string;
+        handle: string;
+        metadata: string;
+    };
+    /**
+     * Lookup72: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+     **/
+    PalletMembershipCreateMemberParameters: {
+        rootAccount: string;
+        controllerAccount: string;
+        handle: string;
+        metadata: string;
+        isFoundingMember: string;
+    };
+    /**
+     * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletMembershipGiftMembershipParameters: {
+        rootAccount: string;
+        controllerAccount: string;
+        handle: string;
+        metadata: string;
+        creditControllerAccount: string;
+        applyControllerAccountInvitationLock: string;
+        creditRootAccount: string;
+        applyRootAccountInvitationLock: string;
+    };
+    /**
+     * Lookup78: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     **/
+    PalletForumRawEvent: {
+        _enum: {
+            CategoryCreated: string;
+            CategoryArchivalStatusUpdated: string;
+            CategoryTitleUpdated: string;
+            CategoryDescriptionUpdated: string;
+            CategoryDeleted: string;
+            ThreadCreated: string;
+            ThreadModerated: string;
+            ThreadUpdated: string;
+            ThreadMetadataUpdated: string;
+            ThreadDeleted: string;
+            ThreadMoved: string;
+            PostAdded: string;
+            PostModerated: string;
+            PostDeleted: string;
+            PostTextUpdated: string;
+            CategoryStickyThreadUpdate: string;
+            CategoryMembershipOfModeratorUpdated: string;
+        };
+    };
+    /**
+     * Lookup79: pallet_forum::PrivilegedActor<T>
+     **/
+    PalletForumPrivilegedActor: {
+        _enum: {
+            Lead: string;
+            Moderator: string;
+        };
+    };
+    /**
+     * Lookup80: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     **/
+    PalletForumExtendedPostIdObject: {
+        categoryId: string;
+        threadId: string;
+        postId: string;
+    };
+    /**
+     * Lookup85: pallet_constitution::RawEvent<primitive_types::H256>
+     **/
+    PalletConstitutionRawEvent: {
+        _enum: {
+            ConstutionAmended: string;
+        };
+    };
+    /**
+     * Lookup86: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     **/
+    PalletBountyRawEvent: {
+        _enum: {
+            BountyCreated: string;
+            BountyOracleSwitched: string;
+            BountyTerminated: string;
+            BountyFunded: string;
+            BountyMaxFundingReached: string;
+            BountyFundingWithdrawal: string;
+            BountyCreatorCherryWithdrawal: string;
+            BountyCreatorOracleRewardWithdrawal: string;
+            BountyOracleRewardWithdrawal: string;
+            BountyRemoved: string;
+            WorkEntryAnnounced: string;
+            WorkSubmitted: string;
+            OracleJudgmentSubmitted: string;
+            WorkEntrantFundsWithdrawn: string;
+            BountyContributorRemarked: string;
+            BountyOracleRemarked: string;
+            BountyEntrantRemarked: string;
+            BountyCreatorRemarked: string;
+            WorkSubmissionPeriodEnded: string;
+            WorkEntrantStakeUnlocked: string;
+            WorkEntrantStakeSlashed: string;
+            FunderStateBloatBondWithdrawn: string;
+            CreatorStateBloatBondWithdrawn: string;
+        };
+    };
+    /**
+     * Lookup87: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+     **/
+    PalletBountyBountyParametersBTreeSet: {
+        oracle: string;
+        contractType: string;
+        creator: string;
+        cherry: string;
+        oracleReward: string;
+        entrantStake: string;
+        fundingType: string;
+    };
+    /**
+     * Lookup88: pallet_bounty::BountyActor<MemberId>
+     **/
+    PalletBountyBountyActor: {
+        _enum: {
+            Council: string;
+            Member: string;
+        };
+    };
+    /**
+     * Lookup89: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+     **/
+    PalletBountyAssuranceContractTypeBTreeSet: {
+        _enum: {
+            Open: string;
+            Closed: string;
+        };
+    };
+    /**
+     * Lookup90: pallet_bounty::FundingType<BlockNumber, Balance>
+     **/
+    PalletBountyFundingType: {
+        _enum: {
+            Perpetual: {
+                target: string;
+            };
+            Limited: {
+                target: string;
+                fundingPeriod: string;
+            };
+        };
+    };
+    /**
+     * Lookup92: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     **/
+    PalletBountyOracleWorkEntryJudgment: {
+        _enum: {
+            Winner: {
+                reward: string;
+            };
+            Rejected: {
+                slashingShare: string;
+                actionJustification: string;
+            };
+        };
+    };
+    /**
+     * Lookup95: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletUtilityRawEvent: {
+        _enum: {
+            Signaled: string;
+            RuntimeUpgraded: string;
+            UpdatedWorkingGroupBudget: string;
+            TokensBurned: string;
+        };
+    };
+    /**
+     * Lookup96: pallet_common::working_group::iterable_enums::WorkingGroup
+     **/
+    PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
+        _enum: string[];
+    };
+    /**
+     * Lookup97: pallet_common::BalanceKind
+     **/
+    PalletCommonBalanceKind: {
+        _enum: string[];
+    };
+    /**
+     * Lookup98: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     **/
+    PalletContentRawEvent: {
+        _enum: {
+            CuratorGroupCreated: string;
+            CuratorGroupPermissionsUpdated: string;
+            CuratorGroupStatusSet: string;
+            CuratorAdded: string;
+            CuratorRemoved: string;
+            ChannelCreated: string;
+            ChannelUpdated: string;
+            ChannelPrivilegeLevelUpdated: string;
+            ChannelStateBloatBondValueUpdated: string;
+            VideoStateBloatBondValueUpdated: string;
+            ChannelAssetsRemoved: string;
+            ChannelDeleted: string;
+            ChannelDeletedByModerator: string;
+            ChannelVisibilitySetByModerator: string;
+            ChannelPausedFeaturesUpdatedByModerator: string;
+            ChannelAssetsDeletedByModerator: string;
+            ChannelFundsWithdrawn: string;
+            ChannelRewardClaimedAndWithdrawn: string;
+            VideoCreated: string;
+            VideoUpdated: string;
+            VideoDeleted: string;
+            VideoDeletedByModerator: string;
+            VideoVisibilitySetByModerator: string;
+            VideoAssetsDeletedByModerator: string;
+            ChannelPayoutsUpdated: string;
+            ChannelRewardUpdated: string;
+            EnglishAuctionStarted: string;
+            OpenAuctionStarted: string;
+            NftIssued: string;
+            NftDestroyed: string;
+            AuctionBidMade: string;
+            AuctionBidCanceled: string;
+            AuctionCanceled: string;
+            EnglishAuctionSettled: string;
+            BidMadeCompletingAuction: string;
+            OpenAuctionBidAccepted: string;
+            OfferStarted: string;
+            OfferAccepted: string;
+            OfferCanceled: string;
+            NftSellOrderMade: string;
+            NftBought: string;
+            BuyNowCanceled: string;
+            BuyNowPriceUpdated: string;
+            NftSlingedBackToTheOriginalArtist: string;
+            ChannelOwnerRemarked: string;
+            ChannelAgentRemarked: string;
+            NftOwnerRemarked: string;
+            InitializedChannelTransfer: string;
+            CancelChannelTransfer: string;
+            ChannelTransferAccepted: string;
+            GlobalNftLimitUpdated: string;
+            ChannelNftLimitUpdated: string;
+            ToggledNftLimits: string;
+            CreatorTokenIssued: string;
+            CreatorTokenIssuerRemarked: string;
+        };
+    };
+    /**
+     * Lookup99: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     **/
+    PalletContentPermissionsContentActor: {
+        _enum: {
+            Curator: string;
+            Member: string;
+            Lead: string;
+        };
+    };
+    /**
+     * Lookup100: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletContentChannelRecord: {
+        owner: string;
+        numVideos: string;
+        collaborators: string;
+        cumulativeRewardClaimed: string;
+        privilegeLevel: string;
+        pausedFeatures: string;
+        transferStatus: string;
+        dataObjects: string;
+        dailyNftLimit: string;
+        weeklyNftLimit: string;
+        dailyNftCounter: string;
+        weeklyNftCounter: string;
+        creatorTokenId: string;
+        channelStateBloatBond: string;
+    };
+    /**
+     * Lookup104: pallet_content::types::iterable_enums::ChannelActionPermission
+     **/
+    PalletContentIterableEnumsChannelActionPermission: {
+        _enum: string[];
+    };
+    /**
+     * Lookup111: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+     **/
+    PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
+        _enum: string[];
+    };
+    /**
+     * Lookup114: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletCommonBloatBondRepayableBloatBond: {
+        repaymentRestrictedTo: string;
+        amount: string;
+    };
+    /**
+     * Lookup115: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     **/
+    PalletContentChannelOwner: {
+        _enum: {
+            Member: string;
+            CuratorGroup: string;
+        };
+    };
+    /**
+     * Lookup116: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     **/
+    PalletContentChannelTransferStatus: {
+        _enum: {
+            NoActiveTransfer: string;
+            PendingTransfer: string;
+        };
+    };
+    /**
+     * Lookup117: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     **/
+    PalletContentPendingTransfer: {
+        newOwner: string;
+        transferParams: string;
+    };
+    /**
+     * Lookup118: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+     **/
+    PalletContentTransferCommitmentParametersBoundedBTreeMap: {
+        newCollaborators: string;
+        price: string;
+        transferId: string;
+    };
+    /**
+     * Lookup119: pallet_content::types::LimitPerPeriod<BlockNumber>
+     **/
+    PalletContentLimitPerPeriod: {
+        limit: string;
+        blockNumberPeriod: string;
+    };
+    /**
+     * Lookup120: pallet_content::types::NftCounter<BlockNumber>
+     **/
+    PalletContentNftCounter: {
+        counter: string;
+        lastUpdated: string;
+    };
+    /**
+     * Lookup121: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     **/
+    PalletContentNftTypesEnglishAuctionParamsRecord: {
+        startingPrice: string;
+        buyNowPrice: string;
+        whitelist: string;
+        startsAt: string;
+        duration: string;
+        extensionPeriod: string;
+        minBidStep: string;
+    };
+    /**
+     * Lookup123: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     **/
+    PalletContentNftTypesOpenAuctionParamsRecord: {
+        startingPrice: string;
+        buyNowPrice: string;
+        startsAt: string;
+        whitelist: string;
+        bidLockDuration: string;
+    };
+    /**
+     * Lookup124: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     **/
+    PalletContentNftTypesNftIssuanceParametersRecord: {
+        royalty: string;
+        nftMetadata: string;
+        nonChannelOwner: string;
+        initTransactionalStatus: string;
+    };
+    /**
+     * Lookup125: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     **/
+    PalletContentNftTypesInitTransactionalStatusRecord: {
+        _enum: {
+            Idle: string;
+            BuyNow: string;
+            InitiatedOfferToMember: string;
+            EnglishAuction: string;
+            OpenAuction: string;
+        };
+    };
+    /**
+     * Lookup127: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     **/
+    PalletContentChannelCreationParametersRecord: {
+        assets: string;
+        meta: string;
+        collaborators: string;
+        storageBuckets: string;
+        distributionBuckets: string;
+        expectedChannelStateBloatBond: string;
+        expectedDataObjectStateBloatBond: string;
+    };
+    /**
+     * Lookup128: pallet_content::types::StorageAssetsRecord<Balance>
+     **/
+    PalletContentStorageAssetsRecord: {
+        objectCreationList: string;
+        expectedDataSizeFee: string;
+    };
+    /**
+     * Lookup130: pallet_storage::DataObjectCreationParameters
+     **/
+    PalletStorageDataObjectCreationParameters: {
+        _alias: {
+            size_: string;
+        };
+        size_: string;
+        ipfsContentId: string;
+    };
+    /**
+     * Lookup131: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     **/
+    PalletStorageDistributionBucketIdRecord: {
+        distributionBucketFamilyId: string;
+        distributionBucketIndex: string;
+    };
+    /**
+     * Lookup138: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     **/
+    PalletContentChannelUpdateParametersRecord: {
+        assetsToUpload: string;
+        newMeta: string;
+        assetsToRemove: string;
+        collaborators: string;
+        expectedDataObjectStateBloatBond: string;
+        storageBucketsNumWitness: string;
+    };
+    /**
+     * Lookup140: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     **/
+    PalletContentVideoCreationParametersRecord: {
+        assets: string;
+        meta: string;
+        autoIssueNft: string;
+        expectedVideoStateBloatBond: string;
+        expectedDataObjectStateBloatBond: string;
+        storageBucketsNumWitness: string;
+    };
+    /**
+     * Lookup142: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     **/
+    PalletContentVideoUpdateParametersRecord: {
+        assetsToUpload: string;
+        newMeta: string;
+        assetsToRemove: string;
+        autoIssueNft: string;
+        expectedDataObjectStateBloatBond: string;
+        storageBucketsNumWitness: string;
+    };
+    /**
+     * Lookup145: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+     **/
+    PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
+        _enum: {
+            HideVideo: string;
+            HideChannel: string;
+            ChangeChannelFeatureStatus: string;
+            DeleteVideo: string;
+            DeleteChannel: string;
+            DeleteVideoAssets: string;
+            DeleteNonVideoChannelAssets: string;
+            UpdateChannelNftLimits: string;
+        };
+    };
+    /**
+     * Lookup149: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+     **/
+    PalletContentTransferCommitmentParametersBTreeMap: {
+        newCollaborators: string;
+        price: string;
+        transferId: string;
+    };
+    /**
+     * Lookup150: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
+     **/
+    PalletContentUpdateChannelPayoutsParametersRecord: {
+        commitment: string;
+        payload: string;
+        minCashoutAllowed: string;
+        maxCashoutAllowed: string;
+        channelCashoutsEnabled: string;
+    };
+    /**
+     * Lookup151: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
+     **/
+    PalletContentChannelPayoutsPayloadParametersRecord: {
+        objectCreationParams: string;
+        expectedDataSizeFee: string;
+        expectedDataObjectStateBloatBond: string;
+    };
+    /**
+     * Lookup155: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     **/
+    PalletContentChannelFundsDestination: {
+        _enum: {
+            AccountId: string;
+            CouncilBudget: string;
+        };
+    };
+    /**
+     * Lookup156: pallet_content::types::NftLimitPeriod
+     **/
+    PalletContentNftLimitPeriod: {
+        _enum: string[];
+    };
+    /**
+     * Lookup157: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+     **/
+    PalletStorageRawEvent: {
+        _enum: {
+            StorageBucketCreated: string;
+            StorageBucketInvitationAccepted: string;
+            StorageBucketsUpdatedForBag: string;
+            DataObjectsUploaded: string;
+            StorageOperatorMetadataSet: string;
+            StorageBucketVoucherLimitsSet: string;
+            PendingDataObjectsAccepted: string;
+            StorageBucketInvitationCancelled: string;
+            StorageBucketOperatorInvited: string;
+            StorageBucketOperatorRemoved: string;
+            UploadingBlockStatusUpdated: string;
+            DataObjectPerMegabyteFeeUpdated: string;
+            StorageBucketsPerBagLimitUpdated: string;
+            StorageBucketsVoucherMaxLimitsUpdated: string;
+            DataObjectsMoved: string;
+            DataObjectsDeleted: string;
+            StorageBucketStatusUpdated: string;
+            UpdateBlacklist: string;
+            DynamicBagDeleted: string;
+            DynamicBagCreated: string;
+            VoucherChanged: string;
+            StorageBucketDeleted: string;
+            NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: string;
+            DistributionBucketFamilyCreated: string;
+            DistributionBucketFamilyDeleted: string;
+            DistributionBucketCreated: string;
+            DistributionBucketStatusUpdated: string;
+            DistributionBucketDeleted: string;
+            DistributionBucketsUpdatedForBag: string;
+            DistributionBucketsPerBagLimitUpdated: string;
+            DistributionBucketModeUpdated: string;
+            FamiliesInDynamicBagCreationPolicyUpdated: string;
+            DistributionBucketOperatorInvited: string;
+            DistributionBucketInvitationCancelled: string;
+            DistributionBucketInvitationAccepted: string;
+            DistributionBucketMetadataSet: string;
+            DistributionBucketOperatorRemoved: string;
+            DistributionBucketFamilyMetadataSet: string;
+            DataObjectStateBloatBondValueUpdated: string;
+            DataObjectsUpdated: string;
+            StorageOperatorRemarked: string;
+            DistributionOperatorRemarked: string;
+        };
+    };
+    /**
+     * Lookup158: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStorageUploadParametersRecord: {
+        bagId: string;
+        objectCreationList: string;
+        stateBloatBondSourceAccountId: string;
+        expectedDataSizeFee: string;
+        expectedDataObjectStateBloatBond: string;
+    };
+    /**
+     * Lookup159: pallet_storage::BagIdType<MemberId, ChannelId>
+     **/
+    PalletStorageBagIdType: {
+        _enum: {
+            Static: string;
+            Dynamic: string;
+        };
+    };
+    /**
+     * Lookup160: pallet_storage::StaticBagId
+     **/
+    PalletStorageStaticBagId: {
+        _enum: {
+            Council: string;
+            WorkingGroup: string;
+        };
+    };
+    /**
+     * Lookup161: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     **/
+    PalletStorageDynamicBagIdType: {
+        _enum: {
+            Member: string;
+            Channel: string;
+        };
+    };
+    /**
+     * Lookup162: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     **/
+    PalletStorageDynBagCreationParametersRecord: {
+        bagId: string;
+        objectCreationList: string;
+        stateBloatBondSourceAccountId: string;
+        expectedDataSizeFee: string;
+        expectedDataObjectStateBloatBond: string;
+        storageBuckets: string;
+        distributionBuckets: string;
+    };
+    /**
+     * Lookup165: pallet_storage::Voucher
+     **/
+    PalletStorageVoucher: {
+        sizeLimit: string;
+        objectsLimit: string;
+        sizeUsed: string;
+        objectsUsed: string;
+    };
+    /**
+     * Lookup166: pallet_storage::DynamicBagType
+     **/
+    PalletStorageDynamicBagType: {
+        _enum: string[];
+    };
+    /**
+     * Lookup170: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
+     **/
+    PalletProjectTokenEventsRawEvent: {
+        _enum: {
+            TokenAmountTransferred: string;
+            TokenAmountTransferredByIssuer: string;
+            PatronageRateDecreasedTo: string;
+            PatronageCreditClaimed: string;
+            RevenueSplitIssued: string;
+            RevenueSplitFinalized: string;
+            UserParticipatedInSplit: string;
+            RevenueSplitLeft: string;
+            MemberJoinedWhitelist: string;
+            AccountDustedBy: string;
+            TokenDeissued: string;
+            TokenIssued: string;
+            TokenSaleInitialized: string;
+            UpcomingTokenSaleUpdated: string;
+            TokensPurchasedOnSale: string;
+            TokenSaleFinalized: string;
+            TransferPolicyChangedToPermissionless: string;
+            TokensBurned: string;
+            AmmActivated: string;
+            TokensBoughtOnAmm: string;
+            TokensSoldOnAmm: string;
+            AmmDeactivated: string;
+            MaxYearlyPatronageRateUpdated: string;
+        };
+    };
+    /**
+     * Lookup171: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     **/
+    PalletProjectTokenTransferPolicy: {
+        _enum: {
+            Permissionless: string;
+            Permissioned: string;
+        };
+    };
+    /**
+     * Lookup172: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     **/
+    PalletProjectTokenTokenIssuanceParameters: {
+        initialAllocation: string;
+        symbol: string;
+        transferPolicy: string;
+        patronageRate: string;
+        revenueSplitRate: string;
+    };
+    /**
+     * Lookup173: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     **/
+    PalletProjectTokenTokenAllocation: {
+        amount: string;
+        vestingScheduleParams: string;
+    };
+    /**
+     * Lookup174: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     **/
+    PalletProjectTokenVestingScheduleParams: {
+        linearVestingDuration: string;
+        blocksBeforeCliff: string;
+        cliffAmountPercentage: string;
+    };
+    /**
+     * Lookup177: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     **/
+    PalletProjectTokenTransferPolicyParams: {
+        _enum: {
+            Permissionless: string;
+            Permissioned: string;
+        };
+    };
+    /**
+     * Lookup178: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     **/
+    PalletProjectTokenWhitelistParams: {
+        commitment: string;
+        payload: string;
+    };
+    /**
+     * Lookup179: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     **/
+    PalletProjectTokenSingleDataObjectUploadParams: {
+        objectCreationParams: string;
+        expectedDataSizeFee: string;
+        expectedDataObjectStateBloatBond: string;
+    };
+    /**
+     * Lookup185: pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>
+     **/
+    PalletProjectTokenTransfers: string;
+    /**
+     * Lookup186: pallet_project_token::types::Validated<MemberId>
+     **/
+    PalletProjectTokenValidated: {
+        _enum: {
+            Existing: string;
+            NonExisting: string;
+        };
+    };
+    /**
+     * Lookup187: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     **/
+    PalletProjectTokenValidatedPayment: {
+        payment: string;
+        vestingCleanupCandidate: string;
+    };
+    /**
+     * Lookup188: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     **/
+    PalletProjectTokenPaymentWithVesting: {
+        amount: string;
+        vestingSchedule: string;
+    };
+    /**
+     * Lookup190: pallet_project_token::types::VestingSource
+     **/
+    PalletProjectTokenVestingSource: {
+        _enum: {
+            InitialIssuance: string;
+            Sale: string;
+            IssuerTransfer: string;
+        };
+    };
+    /**
+     * Lookup194: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     **/
+    PalletProjectTokenTokenSale: {
+        unitPrice: string;
+        quantityLeft: string;
+        fundsCollected: string;
+        tokensSource: string;
+        earningsDestination: string;
+        startBlock: string;
+        duration: string;
+        vestingScheduleParams: string;
+        capPerMember: string;
+        autoFinalize: string;
+    };
+    /**
+     * Lookup195: pallet_project_token::types::AmmCurve<Balance>
+     **/
+    PalletProjectTokenAmmCurve: {
+        slope: string;
+        intercept: string;
+        providedSupply: string;
+    };
+    /**
+     * Lookup196: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     **/
+    PalletProposalsEngineRawEvent: {
+        _enum: {
+            ProposalStatusUpdated: string;
+            ProposalDecisionMade: string;
+            ProposalExecuted: string;
+            Voted: string;
+            ProposalCancelled: string;
+            ProposerRemarked: string;
+        };
+    };
+    /**
+     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     **/
+    PalletProposalsEngineProposalStatusesProposalStatus: {
+        _enum: {
+            Active: string;
+            PendingExecution: string;
+            PendingConstitutionality: string;
+        };
+    };
+    /**
+     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     **/
+    PalletProposalsEngineProposalStatusesProposalDecision: {
+        _enum: {
+            Canceled: string;
+            CanceledByRuntime: string;
+            Vetoed: string;
+            Rejected: string;
+            Slashed: string;
+            Expired: string;
+            Approved: string;
+        };
+    };
+    /**
+     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     **/
+    PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
+        _enum: string[];
+    };
+    /**
+     * Lookup200: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     **/
+    PalletProposalsEngineProposalStatusesExecutionStatus: {
+        _enum: {
+            Executed: string;
+            ExecutionFailed: {
+                error: string;
+            };
+        };
+    };
+    /**
+     * Lookup201: pallet_proposals_engine::types::VoteKind
+     **/
+    PalletProposalsEngineVoteKind: {
+        _enum: string[];
+    };
+    /**
+     * Lookup202: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     **/
+    PalletProposalsDiscussionRawEvent: {
+        _enum: {
+            ThreadCreated: string;
+            PostCreated: string;
+            PostUpdated: string;
+            ThreadModeChanged: string;
+            PostDeleted: string;
+        };
+    };
+    /**
+     * Lookup203: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+     **/
+    PalletProposalsDiscussionThreadModeBTreeSet: {
+        _enum: {
+            Open: string;
+            Closed: string;
+        };
+    };
+    /**
+     * Lookup204: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     **/
+    PalletProposalsCodexRawEvent: {
+        _enum: {
+            ProposalCreated: string;
+        };
+    };
+    /**
+     * Lookup205: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     **/
+    PalletProposalsCodexGeneralProposalParams: {
+        memberId: string;
+        title: string;
+        description: string;
+        stakingAccountId: string;
+        exactExecutionBlock: string;
+    };
+    /**
+     * Lookup206: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
+     **/
+    PalletProposalsCodexProposalDetails: {
+        _enum: {
+            Signal: string;
+            RuntimeUpgrade: string;
+            FundingRequest: string;
+            SetMaxValidatorCount: string;
+            CreateWorkingGroupLeadOpening: string;
+            FillWorkingGroupLeadOpening: string;
+            UpdateWorkingGroupBudget: string;
+            DecreaseWorkingGroupLeadStake: string;
+            SlashWorkingGroupLead: string;
+            SetWorkingGroupLeadReward: string;
+            TerminateWorkingGroupLead: string;
+            AmendConstitution: string;
+            CancelWorkingGroupLeadOpening: string;
+            SetMembershipPrice: string;
+            SetCouncilBudgetIncrement: string;
+            SetCouncilorReward: string;
+            SetInitialInvitationBalance: string;
+            SetInitialInvitationCount: string;
+            SetMembershipLeadInvitationQuota: string;
+            SetReferralCut: string;
+            VetoProposal: string;
+            UpdateGlobalNftLimit: string;
+            UpdateChannelPayouts: string;
+            UpdateMaxYearlyPatronageRate: string;
+        };
+    };
+    /**
+     * Lookup208: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletCommonFundingRequestParameters: {
+        account: string;
+        amount: string;
+    };
+    /**
+     * Lookup209: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     **/
+    PalletProposalsCodexCreateOpeningParameters: {
+        description: string;
+        stakePolicy: string;
+        rewardPerBlock: string;
+        group: string;
+    };
+    /**
+     * Lookup210: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     **/
+    PalletWorkingGroupStakePolicy: {
+        stakeAmount: string;
+        leavingUnstakingPeriod: string;
+    };
+    /**
+     * Lookup211: pallet_proposals_codex::types::FillOpeningParameters
+     **/
+    PalletProposalsCodexFillOpeningParameters: {
+        openingId: string;
+        applicationId: string;
+        workingGroup: string;
+    };
+    /**
+     * Lookup212: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     **/
+    PalletProposalsCodexTerminateRoleParameters: {
+        workerId: string;
+        slashingAmount: string;
+        group: string;
+    };
+    /**
+     * Lookup213: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+     **/
+    PalletWorkingGroupRawEventInstance1: {
+        _enum: {
+            OpeningAdded: string;
+            AppliedOnOpening: string;
+            OpeningFilled: string;
+            LeaderSet: string;
+            WorkerRoleAccountUpdated: string;
+            LeaderUnset: string;
+            WorkerExited: string;
+            WorkerStartedLeaving: string;
+            TerminatedWorker: string;
+            TerminatedLeader: string;
+            StakeSlashed: string;
+            StakeDecreased: string;
+            StakeIncreased: string;
+            ApplicationWithdrawn: string;
+            OpeningCanceled: string;
+            BudgetSet: string;
+            WorkerRewardAccountUpdated: string;
+            WorkerRewardAmountUpdated: string;
+            StatusTextChanged: string;
+            BudgetSpending: string;
+            RewardPaid: string;
+            NewMissedRewardLevelReached: string;
+            WorkingGroupBudgetFunded: string;
+            LeadRemarked: string;
+            WorkerRemarked: string;
+        };
+    };
+    /**
+     * Lookup217: pallet_working_group::types::OpeningType
+     **/
+    PalletWorkingGroupOpeningType: {
+        _enum: string[];
+    };
+    /**
+     * Lookup218: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletWorkingGroupApplyOnOpeningParams: {
+        memberId: string;
+        openingId: string;
+        roleAccountId: string;
+        rewardAccountId: string;
+        description: string;
+        stakeParameters: string;
+    };
+    /**
+     * Lookup219: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletWorkingGroupStakeParameters: {
+        stake: string;
+        stakingAccountId: string;
+    };
+    /**
+     * Lookup220: pallet_working_group::Instance1
+     **/
+    PalletWorkingGroupInstance1: string;
+    /**
+     * Lookup221: pallet_working_group::types::RewardPaymentType
+     **/
+    PalletWorkingGroupRewardPaymentType: {
+        _enum: string[];
+    };
+    /**
+     * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+     **/
+    PalletWorkingGroupRawEventInstance2: {
+        _enum: {
+            OpeningAdded: string;
+            AppliedOnOpening: string;
+            OpeningFilled: string;
+            LeaderSet: string;
+            WorkerRoleAccountUpdated: string;
+            LeaderUnset: string;
+            WorkerExited: string;
+            WorkerStartedLeaving: string;
+            TerminatedWorker: string;
+            TerminatedLeader: string;
+            StakeSlashed: string;
+            StakeDecreased: string;
+            StakeIncreased: string;
+            ApplicationWithdrawn: string;
+            OpeningCanceled: string;
+            BudgetSet: string;
+            WorkerRewardAccountUpdated: string;
+            WorkerRewardAmountUpdated: string;
+            StatusTextChanged: string;
+            BudgetSpending: string;
+            RewardPaid: string;
+            NewMissedRewardLevelReached: string;
+            WorkingGroupBudgetFunded: string;
+            LeadRemarked: string;
+            WorkerRemarked: string;
+        };
+    };
+    /**
+     * Lookup223: pallet_working_group::Instance2
+     **/
+    PalletWorkingGroupInstance2: string;
+    /**
+     * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+     **/
+    PalletWorkingGroupRawEventInstance3: {
+        _enum: {
+            OpeningAdded: string;
+            AppliedOnOpening: string;
+            OpeningFilled: string;
+            LeaderSet: string;
+            WorkerRoleAccountUpdated: string;
+            LeaderUnset: string;
+            WorkerExited: string;
+            WorkerStartedLeaving: string;
+            TerminatedWorker: string;
+            TerminatedLeader: string;
+            StakeSlashed: string;
+            StakeDecreased: string;
+            StakeIncreased: string;
+            ApplicationWithdrawn: string;
+            OpeningCanceled: string;
+            BudgetSet: string;
+            WorkerRewardAccountUpdated: string;
+            WorkerRewardAmountUpdated: string;
+            StatusTextChanged: string;
+            BudgetSpending: string;
+            RewardPaid: string;
+            NewMissedRewardLevelReached: string;
+            WorkingGroupBudgetFunded: string;
+            LeadRemarked: string;
+            WorkerRemarked: string;
+        };
+    };
+    /**
+     * Lookup225: pallet_working_group::Instance3
+     **/
+    PalletWorkingGroupInstance3: string;
+    /**
+     * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+     **/
+    PalletWorkingGroupRawEventInstance4: {
+        _enum: {
+            OpeningAdded: string;
+            AppliedOnOpening: string;
+            OpeningFilled: string;
+            LeaderSet: string;
+            WorkerRoleAccountUpdated: string;
+            LeaderUnset: string;
+            WorkerExited: string;
+            WorkerStartedLeaving: string;
+            TerminatedWorker: string;
+            TerminatedLeader: string;
+            StakeSlashed: string;
+            StakeDecreased: string;
+            StakeIncreased: string;
+            ApplicationWithdrawn: string;
+            OpeningCanceled: string;
+            BudgetSet: string;
+            WorkerRewardAccountUpdated: string;
+            WorkerRewardAmountUpdated: string;
+            StatusTextChanged: string;
+            BudgetSpending: string;
+            RewardPaid: string;
+            NewMissedRewardLevelReached: string;
+            WorkingGroupBudgetFunded: string;
+            LeadRemarked: string;
+            WorkerRemarked: string;
+        };
+    };
+    /**
+     * Lookup227: pallet_working_group::Instance4
+     **/
+    PalletWorkingGroupInstance4: string;
+    /**
+     * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+     **/
+    PalletWorkingGroupRawEventInstance5: {
+        _enum: {
+            OpeningAdded: string;
+            AppliedOnOpening: string;
+            OpeningFilled: string;
+            LeaderSet: string;
+            WorkerRoleAccountUpdated: string;
+            LeaderUnset: string;
+            WorkerExited: string;
+            WorkerStartedLeaving: string;
+            TerminatedWorker: string;
+            TerminatedLeader: string;
+            StakeSlashed: string;
+            StakeDecreased: string;
+            StakeIncreased: string;
+            ApplicationWithdrawn: string;
+            OpeningCanceled: string;
+            BudgetSet: string;
+            WorkerRewardAccountUpdated: string;
+            WorkerRewardAmountUpdated: string;
+            StatusTextChanged: string;
+            BudgetSpending: string;
+            RewardPaid: string;
+            NewMissedRewardLevelReached: string;
+            WorkingGroupBudgetFunded: string;
+            LeadRemarked: string;
+            WorkerRemarked: string;
+        };
+    };
+    /**
+     * Lookup229: pallet_working_group::Instance5
+     **/
+    PalletWorkingGroupInstance5: string;
+    /**
+     * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+     **/
+    PalletWorkingGroupRawEventInstance6: {
+        _enum: {
+            OpeningAdded: string;
+            AppliedOnOpening: string;
+            OpeningFilled: string;
+            LeaderSet: string;
+            WorkerRoleAccountUpdated: string;
+            LeaderUnset: string;
+            WorkerExited: string;
+            WorkerStartedLeaving: string;
+            TerminatedWorker: string;
+            TerminatedLeader: string;
+            StakeSlashed: string;
+            StakeDecreased: string;
+            StakeIncreased: string;
+            ApplicationWithdrawn: string;
+            OpeningCanceled: string;
+            BudgetSet: string;
+            WorkerRewardAccountUpdated: string;
+            WorkerRewardAmountUpdated: string;
+            StatusTextChanged: string;
+            BudgetSpending: string;
+            RewardPaid: string;
+            NewMissedRewardLevelReached: string;
+            WorkingGroupBudgetFunded: string;
+            LeadRemarked: string;
+            WorkerRemarked: string;
+        };
+    };
+    /**
+     * Lookup231: pallet_working_group::Instance6
+     **/
+    PalletWorkingGroupInstance6: string;
+    /**
+     * Lookup232: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+     **/
+    PalletWorkingGroupRawEventInstance7: {
+        _enum: {
+            OpeningAdded: string;
+            AppliedOnOpening: string;
+            OpeningFilled: string;
+            LeaderSet: string;
+            WorkerRoleAccountUpdated: string;
+            LeaderUnset: string;
+            WorkerExited: string;
+            WorkerStartedLeaving: string;
+            TerminatedWorker: string;
+            TerminatedLeader: string;
+            StakeSlashed: string;
+            StakeDecreased: string;
+            StakeIncreased: string;
+            ApplicationWithdrawn: string;
+            OpeningCanceled: string;
+            BudgetSet: string;
+            WorkerRewardAccountUpdated: string;
+            WorkerRewardAmountUpdated: string;
+            StatusTextChanged: string;
+            BudgetSpending: string;
+            RewardPaid: string;
+            NewMissedRewardLevelReached: string;
+            WorkingGroupBudgetFunded: string;
+            LeadRemarked: string;
+            WorkerRemarked: string;
+        };
+    };
+    /**
+     * Lookup233: pallet_working_group::Instance7
+     **/
+    PalletWorkingGroupInstance7: string;
+    /**
+     * Lookup234: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+     **/
+    PalletWorkingGroupRawEventInstance8: {
+        _enum: {
+            OpeningAdded: string;
+            AppliedOnOpening: string;
+            OpeningFilled: string;
+            LeaderSet: string;
+            WorkerRoleAccountUpdated: string;
+            LeaderUnset: string;
+            WorkerExited: string;
+            WorkerStartedLeaving: string;
+            TerminatedWorker: string;
+            TerminatedLeader: string;
+            StakeSlashed: string;
+            StakeDecreased: string;
+            StakeIncreased: string;
+            ApplicationWithdrawn: string;
+            OpeningCanceled: string;
+            BudgetSet: string;
+            WorkerRewardAccountUpdated: string;
+            WorkerRewardAmountUpdated: string;
+            StatusTextChanged: string;
+            BudgetSpending: string;
+            RewardPaid: string;
+            NewMissedRewardLevelReached: string;
+            WorkingGroupBudgetFunded: string;
+            LeadRemarked: string;
+            WorkerRemarked: string;
+        };
+    };
+    /**
+     * Lookup235: pallet_working_group::Instance8
+     **/
+    PalletWorkingGroupInstance8: string;
+    /**
+     * Lookup236: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+     **/
+    PalletWorkingGroupRawEventInstance9: {
+        _enum: {
+            OpeningAdded: string;
+            AppliedOnOpening: string;
+            OpeningFilled: string;
+            LeaderSet: string;
+            WorkerRoleAccountUpdated: string;
+            LeaderUnset: string;
+            WorkerExited: string;
+            WorkerStartedLeaving: string;
+            TerminatedWorker: string;
+            TerminatedLeader: string;
+            StakeSlashed: string;
+            StakeDecreased: string;
+            StakeIncreased: string;
+            ApplicationWithdrawn: string;
+            OpeningCanceled: string;
+            BudgetSet: string;
+            WorkerRewardAccountUpdated: string;
+            WorkerRewardAmountUpdated: string;
+            StatusTextChanged: string;
+            BudgetSpending: string;
+            RewardPaid: string;
+            NewMissedRewardLevelReached: string;
+            WorkingGroupBudgetFunded: string;
+            LeadRemarked: string;
+            WorkerRemarked: string;
+        };
+    };
+    /**
+     * Lookup237: pallet_working_group::Instance9
+     **/
+    PalletWorkingGroupInstance9: string;
+    /**
+     * Lookup238: frame_system::Phase
+     **/
+    FrameSystemPhase: {
+        _enum: {
+            ApplyExtrinsic: string;
+            Finalization: string;
+            Initialization: string;
+        };
+    };
+    /**
+     * Lookup242: frame_system::LastRuntimeUpgradeInfo
+     **/
+    FrameSystemLastRuntimeUpgradeInfo: {
+        specVersion: string;
+        specName: string;
+    };
+    /**
+     * Lookup245: frame_system::pallet::Call<T>
+     **/
+    FrameSystemCall: {
+        _enum: {
+            fill_block: {
+                ratio: string;
+            };
+            remark: {
+                remark: string;
+            };
+            set_heap_pages: {
+                pages: string;
+            };
+            set_code: {
+                code: string;
+            };
+            set_code_without_checks: {
+                code: string;
+            };
+            set_storage: {
+                items: string;
+            };
+            kill_storage: {
+                _alias: {
+                    keys_: string;
+                };
+                keys_: string;
+            };
+            kill_prefix: {
+                prefix: string;
+                subkeys: string;
+            };
+            remark_with_event: {
+                remark: string;
+            };
+        };
+    };
+    /**
+     * Lookup248: frame_system::limits::BlockWeights
+     **/
+    FrameSystemLimitsBlockWeights: {
+        baseBlock: string;
+        maxBlock: string;
+        perClass: string;
+    };
+    /**
+     * Lookup249: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     **/
+    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
+        normal: string;
+        operational: string;
+        mandatory: string;
+    };
+    /**
+     * Lookup250: frame_system::limits::WeightsPerClass
+     **/
+    FrameSystemLimitsWeightsPerClass: {
+        baseExtrinsic: string;
+        maxExtrinsic: string;
+        maxTotal: string;
+        reserved: string;
+    };
+    /**
+     * Lookup251: frame_system::limits::BlockLength
+     **/
+    FrameSystemLimitsBlockLength: {
+        max: string;
+    };
+    /**
+     * Lookup252: frame_support::weights::PerDispatchClass<T>
+     **/
+    FrameSupportWeightsPerDispatchClassU32: {
+        normal: string;
+        operational: string;
+        mandatory: string;
+    };
+    /**
+     * Lookup253: frame_support::weights::RuntimeDbWeight
+     **/
+    FrameSupportWeightsRuntimeDbWeight: {
+        read: string;
+        write: string;
+    };
+    /**
+     * Lookup254: sp_version::RuntimeVersion
+     **/
+    SpVersionRuntimeVersion: {
+        specName: string;
+        implName: string;
+        authoringVersion: string;
+        specVersion: string;
+        implVersion: string;
+        apis: string;
+        transactionVersion: string;
+        stateVersion: string;
+    };
+    /**
+     * Lookup260: frame_system::pallet::Error<T>
+     **/
+    FrameSystemError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup261: pallet_utility::pallet::Call<T>
+     **/
+    PalletUtilityCall: {
+        _enum: {
+            batch: {
+                calls: string;
+            };
+            as_derivative: {
+                index: string;
+                call: string;
+            };
+            batch_all: {
+                calls: string;
+            };
+            dispatch_as: {
+                asOrigin: string;
+                call: string;
+            };
+            force_batch: {
+                calls: string;
+            };
+        };
+    };
+    /**
+     * Lookup264: pallet_babe::pallet::Call<T>
+     **/
+    PalletBabeCall: {
+        _enum: {
+            report_equivocation: {
+                equivocationProof: string;
+                keyOwnerProof: string;
+            };
+            report_equivocation_unsigned: {
+                equivocationProof: string;
+                keyOwnerProof: string;
+            };
+            plan_config_change: {
+                config: string;
+            };
+        };
+    };
+    /**
+     * Lookup265: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     **/
+    SpConsensusSlotsEquivocationProof: {
+        offender: string;
+        slot: string;
+        firstHeader: string;
+        secondHeader: string;
+    };
+    /**
+     * Lookup266: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     **/
+    SpRuntimeHeader: {
+        parentHash: string;
+        number: string;
+        stateRoot: string;
+        extrinsicsRoot: string;
+        digest: string;
+    };
+    /**
+     * Lookup267: sp_runtime::traits::BlakeTwo256
+     **/
+    SpRuntimeBlakeTwo256: string;
+    /**
+     * Lookup268: sp_consensus_babe::app::Public
+     **/
+    SpConsensusBabeAppPublic: string;
+    /**
+     * Lookup270: sp_session::MembershipProof
+     **/
+    SpSessionMembershipProof: {
+        session: string;
+        trieNodes: string;
+        validatorCount: string;
+    };
+    /**
+     * Lookup271: sp_consensus_babe::digests::NextConfigDescriptor
+     **/
+    SpConsensusBabeDigestsNextConfigDescriptor: {
+        _enum: {
+            __Unused0: string;
+            V1: {
+                c: string;
+                allowedSlots: string;
+            };
+        };
+    };
+    /**
+     * Lookup272: sp_consensus_babe::AllowedSlots
+     **/
+    SpConsensusBabeAllowedSlots: {
+        _enum: string[];
+    };
+    /**
+     * Lookup273: pallet_timestamp::pallet::Call<T>
+     **/
+    PalletTimestampCall: {
+        _enum: {
+            set: {
+                now: string;
+            };
+        };
+    };
+    /**
+     * Lookup275: pallet_authorship::pallet::Call<T>
+     **/
+    PalletAuthorshipCall: {
+        _enum: {
+            set_uncles: {
+                newUncles: string;
+            };
+        };
+    };
+    /**
+     * Lookup277: pallet_balances::pallet::Call<T, I>
+     **/
+    PalletBalancesCall: {
+        _enum: {
+            transfer: {
+                dest: string;
+                value: string;
+            };
+            set_balance: {
+                who: string;
+                newFree: string;
+                newReserved: string;
+            };
+            force_transfer: {
+                source: string;
+                dest: string;
+                value: string;
+            };
+            transfer_keep_alive: {
+                dest: string;
+                value: string;
+            };
+            transfer_all: {
+                dest: string;
+                keepAlive: string;
+            };
+            force_unreserve: {
+                who: string;
+                amount: string;
+            };
+        };
+    };
+    /**
+     * Lookup278: pallet_election_provider_multi_phase::pallet::Call<T>
+     **/
+    PalletElectionProviderMultiPhaseCall: {
+        _enum: {
+            submit_unsigned: {
+                rawSolution: string;
+                witness: string;
+            };
+            set_minimum_untrusted_score: {
+                maybeNextScore: string;
+            };
+            set_emergency_election_result: {
+                supports: string;
+            };
+            submit: {
+                rawSolution: string;
+            };
+            governance_fallback: {
+                maybeMaxVoters: string;
+                maybeMaxTargets: string;
+            };
+        };
+    };
+    /**
+     * Lookup279: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     **/
+    PalletElectionProviderMultiPhaseRawSolution: {
+        solution: string;
+        score: string;
+        round: string;
+    };
+    /**
+     * Lookup280: joystream_node_runtime::NposSolution16
+     **/
+    JoystreamNodeRuntimeNposSolution16: {
+        votes1: string;
+        votes2: string;
+        votes3: string;
+        votes4: string;
+        votes5: string;
+        votes6: string;
+        votes7: string;
+        votes8: string;
+        votes9: string;
+        votes10: string;
+        votes11: string;
+        votes12: string;
+        votes13: string;
+        votes14: string;
+        votes15: string;
+        votes16: string;
+    };
+    /**
+     * Lookup331: sp_npos_elections::ElectionScore
+     **/
+    SpNposElectionsElectionScore: {
+        minimalStake: string;
+        sumStake: string;
+        sumStakeSquared: string;
+    };
+    /**
+     * Lookup332: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     **/
+    PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
+        voters: string;
+        targets: string;
+    };
+    /**
+     * Lookup336: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     **/
+    SpNposElectionsSupport: {
+        total: string;
+        voters: string;
+    };
+    /**
+     * Lookup338: pallet_staking::pallet::pallet::Call<T>
+     **/
+    PalletStakingPalletCall: {
+        _enum: {
+            bond: {
+                controller: string;
+                value: string;
+                payee: string;
+            };
+            bond_extra: {
+                maxAdditional: string;
+            };
+            unbond: {
+                value: string;
+            };
+            withdraw_unbonded: {
+                numSlashingSpans: string;
+            };
+            validate: {
+                prefs: string;
+            };
+            nominate: {
+                targets: string;
+            };
+            chill: string;
+            set_payee: {
+                payee: string;
+            };
+            set_controller: {
+                controller: string;
+            };
+            set_validator_count: {
+                _alias: {
+                    new_: string;
+                };
+                new_: string;
+            };
+            increase_validator_count: {
+                additional: string;
+            };
+            scale_validator_count: {
+                factor: string;
+            };
+            force_no_eras: string;
+            force_new_era: string;
+            set_invulnerables: {
+                invulnerables: string;
+            };
+            force_unstake: {
+                stash: string;
+                numSlashingSpans: string;
+            };
+            force_new_era_always: string;
+            cancel_deferred_slash: {
+                era: string;
+                slashIndices: string;
+            };
+            payout_stakers: {
+                validatorStash: string;
+                era: string;
+            };
+            rebond: {
+                value: string;
+            };
+            set_history_depth: {
+                newHistoryDepth: string;
+                eraItemsDeleted: string;
+            };
+            reap_stash: {
+                stash: string;
+                numSlashingSpans: string;
+            };
+            kick: {
+                who: string;
+            };
+            set_staking_configs: {
+                minNominatorBond: string;
+                minValidatorBond: string;
+                maxNominatorCount: string;
+                maxValidatorCount: string;
+                chillThreshold: string;
+                minCommission: string;
+            };
+            chill_other: {
+                controller: string;
+            };
+            force_apply_min_commission: {
+                validatorStash: string;
+            };
+        };
+    };
+    /**
+     * Lookup339: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+     **/
+    PalletStakingRewardDestination: {
+        _enum: {
+            Staked: string;
+            Stash: string;
+            Controller: string;
+            Account: string;
+            None: string;
+        };
+    };
+    /**
+     * Lookup343: pallet_staking::pallet::pallet::ConfigOp<T>
+     **/
+    PalletStakingPalletConfigOpU128: {
+        _enum: {
+            Noop: string;
+            Set: string;
+            Remove: string;
+        };
+    };
+    /**
+     * Lookup344: pallet_staking::pallet::pallet::ConfigOp<T>
+     **/
+    PalletStakingPalletConfigOpU32: {
+        _enum: {
+            Noop: string;
+            Set: string;
+            Remove: string;
+        };
+    };
+    /**
+     * Lookup345: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+     **/
+    PalletStakingPalletConfigOpPercent: {
+        _enum: {
+            Noop: string;
+            Set: string;
+            Remove: string;
+        };
+    };
+    /**
+     * Lookup346: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+     **/
+    PalletStakingPalletConfigOpPerbill: {
+        _enum: {
+            Noop: string;
+            Set: string;
+            Remove: string;
+        };
+    };
+    /**
+     * Lookup347: pallet_session::pallet::Call<T>
+     **/
+    PalletSessionCall: {
+        _enum: {
+            set_keys: {
+                _alias: {
+                    keys_: string;
+                };
+                keys_: string;
+                proof: string;
+            };
+            purge_keys: string;
+        };
+    };
+    /**
+     * Lookup348: joystream_node_runtime::SessionKeys
+     **/
+    JoystreamNodeRuntimeSessionKeys: {
+        grandpa: string;
+        babe: string;
+        imOnline: string;
+        authorityDiscovery: string;
+    };
+    /**
+     * Lookup349: sp_authority_discovery::app::Public
+     **/
+    SpAuthorityDiscoveryAppPublic: string;
+    /**
+     * Lookup350: pallet_grandpa::pallet::Call<T>
+     **/
+    PalletGrandpaCall: {
+        _enum: {
+            report_equivocation: {
+                equivocationProof: string;
+                keyOwnerProof: string;
+            };
+            report_equivocation_unsigned: {
+                equivocationProof: string;
+                keyOwnerProof: string;
+            };
+            note_stalled: {
+                delay: string;
+                bestFinalizedBlockNumber: string;
+            };
+        };
+    };
+    /**
+     * Lookup351: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+     **/
+    SpFinalityGrandpaEquivocationProof: {
+        setId: string;
+        equivocation: string;
+    };
+    /**
+     * Lookup352: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+     **/
+    SpFinalityGrandpaEquivocation: {
+        _enum: {
+            Prevote: string;
+            Precommit: string;
+        };
+    };
+    /**
+     * Lookup353: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     **/
+    FinalityGrandpaEquivocationPrevote: {
+        roundNumber: string;
+        identity: string;
+        first: string;
+        second: string;
+    };
+    /**
+     * Lookup354: finality_grandpa::Prevote<primitive_types::H256, N>
+     **/
+    FinalityGrandpaPrevote: {
+        targetHash: string;
+        targetNumber: string;
+    };
+    /**
+     * Lookup355: sp_finality_grandpa::app::Signature
+     **/
+    SpFinalityGrandpaAppSignature: string;
+    /**
+     * Lookup356: sp_core::ed25519::Signature
+     **/
+    SpCoreEd25519Signature: string;
+    /**
+     * Lookup359: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     **/
+    FinalityGrandpaEquivocationPrecommit: {
+        roundNumber: string;
+        identity: string;
+        first: string;
+        second: string;
+    };
+    /**
+     * Lookup360: finality_grandpa::Precommit<primitive_types::H256, N>
+     **/
+    FinalityGrandpaPrecommit: {
+        targetHash: string;
+        targetNumber: string;
+    };
+    /**
+     * Lookup362: pallet_im_online::pallet::Call<T>
+     **/
+    PalletImOnlineCall: {
+        _enum: {
+            heartbeat: {
+                heartbeat: string;
+                signature: string;
+            };
+        };
+    };
+    /**
+     * Lookup363: pallet_im_online::Heartbeat<BlockNumber>
+     **/
+    PalletImOnlineHeartbeat: {
+        blockNumber: string;
+        networkState: string;
+        sessionIndex: string;
+        authorityIndex: string;
+        validatorsLen: string;
+    };
+    /**
+     * Lookup364: sp_core::offchain::OpaqueNetworkState
+     **/
+    SpCoreOffchainOpaqueNetworkState: {
+        peerId: string;
+        externalAddresses: string;
+    };
+    /**
+     * Lookup368: pallet_im_online::sr25519::app_sr25519::Signature
+     **/
+    PalletImOnlineSr25519AppSr25519Signature: string;
+    /**
+     * Lookup369: sp_core::sr25519::Signature
+     **/
+    SpCoreSr25519Signature: string;
+    /**
+     * Lookup370: pallet_bags_list::pallet::Call<T, I>
+     **/
+    PalletBagsListCall: {
+        _enum: {
+            rebag: {
+                dislocated: string;
+            };
+            put_in_front_of: {
+                lighter: string;
+            };
+        };
+    };
+    /**
+     * Lookup371: pallet_vesting::pallet::Call<T>
+     **/
+    PalletVestingCall: {
+        _enum: {
+            vest: string;
+            vest_other: {
+                target: string;
+            };
+            vested_transfer: {
+                target: string;
+                schedule: string;
+            };
+            force_vested_transfer: {
+                source: string;
+                target: string;
+                schedule: string;
+            };
+            merge_schedules: {
+                schedule1Index: string;
+                schedule2Index: string;
+            };
+        };
+    };
+    /**
+     * Lookup372: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     **/
+    PalletVestingVestingInfo: {
+        locked: string;
+        perBlock: string;
+        startingBlock: string;
+    };
+    /**
+     * Lookup373: pallet_multisig::pallet::Call<T>
+     **/
+    PalletMultisigCall: {
+        _enum: {
+            as_multi_threshold_1: {
+                otherSignatories: string;
+                call: string;
+            };
+            as_multi: {
+                threshold: string;
+                otherSignatories: string;
+                maybeTimepoint: string;
+                call: string;
+                storeCall: string;
+                maxWeight: string;
+            };
+            approve_as_multi: {
+                threshold: string;
+                otherSignatories: string;
+                maybeTimepoint: string;
+                callHash: string;
+                maxWeight: string;
+            };
+            cancel_as_multi: {
+                threshold: string;
+                otherSignatories: string;
+                timepoint: string;
+                callHash: string;
+            };
+        };
+    };
+    /**
+     * Lookup376: pallet_council::Call<T>
+     **/
+    PalletCouncilCall: {
+        _enum: {
+            announce_candidacy: {
+                membershipId: string;
+                stakingAccountId: string;
+                rewardAccountId: string;
+                stake: string;
+            };
+            release_candidacy_stake: {
+                membershipId: string;
+            };
+            withdraw_candidacy: {
+                membershipId: string;
+            };
+            set_candidacy_note: {
+                membershipId: string;
+                note: string;
+            };
+            set_budget: {
+                balance: string;
+            };
+            plan_budget_refill: {
+                nextRefill: string;
+            };
+            set_budget_increment: {
+                budgetIncrement: string;
+            };
+            set_councilor_reward: {
+                councilorReward: string;
+            };
+            funding_request: {
+                fundingRequests: string;
+            };
+            fund_council_budget: {
+                memberId: string;
+                amount: string;
+                rationale: string;
+            };
+            councilor_remark: {
+                councilorId: string;
+                msg: string;
+            };
+            candidate_remark: {
+                candidateId: string;
+                msg: string;
+            };
+        };
+    };
+    /**
+     * Lookup377: pallet_referendum::Call<T, I>
+     **/
+    PalletReferendumCall: {
+        _enum: {
+            vote: {
+                commitment: string;
+                stake: string;
+            };
+            reveal_vote: {
+                salt: string;
+                voteOptionId: string;
+            };
+            release_vote_stake: string;
+            opt_out_of_voting: string;
+        };
+    };
+    /**
+     * Lookup378: pallet_membership::Call<T>
+     **/
+    PalletMembershipCall: {
+        _enum: {
+            buy_membership: {
+                params: string;
+            };
+            update_profile: {
+                memberId: string;
+                handle: string;
+                metadata: string;
+            };
+            update_accounts: {
+                memberId: string;
+                newRootAccount: string;
+                newControllerAccount: string;
+            };
+            update_profile_verification: {
+                workerId: string;
+                targetMemberId: string;
+                isVerified: string;
+            };
+            set_referral_cut: {
+                percentValue: string;
+            };
+            transfer_invites: {
+                sourceMemberId: string;
+                targetMemberId: string;
+                numberOfInvites: string;
+            };
+            invite_member: {
+                params: string;
+            };
+            gift_membership: {
+                params: string;
+            };
+            set_membership_price: {
+                newPrice: string;
+            };
+            set_leader_invitation_quota: {
+                invitationQuota: string;
+            };
+            set_initial_invitation_balance: {
+                newInitialBalance: string;
+            };
+            set_initial_invitation_count: {
+                newInvitationCount: string;
+            };
+            add_staking_account_candidate: {
+                memberId: string;
+            };
+            remove_staking_account: {
+                memberId: string;
+            };
+            confirm_staking_account: {
+                memberId: string;
+                stakingAccountId: string;
+            };
+            member_remark: {
+                memberId: string;
+                msg: string;
+                payment: string;
+            };
+            create_member: {
+                params: string;
+            };
+        };
+    };
+    /**
+     * Lookup379: pallet_forum::Call<T>
+     **/
+    PalletForumCall: {
+        _enum: {
+            update_category_membership_of_moderator: {
+                moderatorId: string;
+                categoryId: string;
+                newValue: string;
+            };
+            create_category: {
+                parentCategoryId: string;
+                title: string;
+                description: string;
+            };
+            update_category_archival_status: {
+                actor: string;
+                categoryId: string;
+                newArchivalStatus: string;
+            };
+            update_category_title: {
+                actor: string;
+                categoryId: string;
+                title: string;
+            };
+            update_category_description: {
+                actor: string;
+                categoryId: string;
+                description: string;
+            };
+            delete_category: {
+                actor: string;
+                categoryId: string;
+            };
+            create_thread: {
+                forumUserId: string;
+                categoryId: string;
+                metadata: string;
+                text: string;
+            };
+            edit_thread_metadata: {
+                forumUserId: string;
+                categoryId: string;
+                threadId: string;
+                newMetadata: string;
+            };
+            delete_thread: {
+                forumUserId: string;
+                categoryId: string;
+                threadId: string;
+                hide: string;
+            };
+            move_thread_to_category: {
+                actor: string;
+                categoryId: string;
+                threadId: string;
+                newCategoryId: string;
+            };
+            moderate_thread: {
+                actor: string;
+                categoryId: string;
+                threadId: string;
+                rationale: string;
+            };
+            add_post: {
+                forumUserId: string;
+                categoryId: string;
+                threadId: string;
+                text: string;
+                editable: string;
+            };
+            edit_post_text: {
+                forumUserId: string;
+                categoryId: string;
+                threadId: string;
+                postId: string;
+                newText: string;
+            };
+            moderate_post: {
+                actor: string;
+                categoryId: string;
+                threadId: string;
+                postId: string;
+                rationale: string;
+            };
+            delete_posts: {
+                forumUserId: string;
+                posts: string;
+                rationale: string;
+            };
+            set_stickied_threads: {
+                actor: string;
+                categoryId: string;
+                stickiedIds: string;
+            };
+        };
+    };
+    /**
+     * Lookup380: pallet_constitution::Call<T>
+     **/
+    PalletConstitutionCall: {
+        _enum: {
+            amend_constitution: {
+                constitutionText: string;
+            };
+        };
+    };
+    /**
+     * Lookup381: pallet_bounty::Call<T>
+     **/
+    PalletBountyCall: {
+        _enum: {
+            create_bounty: {
+                params: string;
+                metadata: string;
+            };
+            fund_bounty: {
+                funder: string;
+                bountyId: string;
+                amount: string;
+            };
+            terminate_bounty: {
+                bountyId: string;
+            };
+            switch_oracle: {
+                newOracle: string;
+                bountyId: string;
+            };
+            withdraw_funding: {
+                funder: string;
+                bountyId: string;
+            };
+            announce_work_entry: {
+                memberId: string;
+                bountyId: string;
+                stakingAccountId: string;
+                workDescription: string;
+            };
+            submit_work: {
+                memberId: string;
+                bountyId: string;
+                entryId: string;
+                workData: string;
+            };
+            end_working_period: {
+                bountyId: string;
+            };
+            submit_oracle_judgment: {
+                bountyId: string;
+                judgment: string;
+                rationale: string;
+            };
+            withdraw_entrant_stake: {
+                memberId: string;
+                bountyId: string;
+                entryId: string;
+            };
+            withdraw_oracle_reward: {
+                bountyId: string;
+            };
+            contributor_remark: {
+                contributor: string;
+                bountyId: string;
+                msg: string;
+            };
+            oracle_remark: {
+                oracle: string;
+                bountyId: string;
+                msg: string;
+            };
+            entrant_remark: {
+                entrantId: string;
+                bountyId: string;
+                entryId: string;
+                msg: string;
+            };
+            creator_remark: {
+                creator: string;
+                bountyId: string;
+                msg: string;
+            };
+        };
+    };
+    /**
+     * Lookup383: pallet_content::Call<T>
+     **/
+    PalletContentCall: {
+        _enum: {
+            create_curator_group: {
+                isActive: string;
+                permissionsByLevel: string;
+            };
+            update_curator_group_permissions: {
+                curatorGroupId: string;
+                permissionsByLevel: string;
+            };
+            set_curator_group_status: {
+                curatorGroupId: string;
+                isActive: string;
+            };
+            add_curator_to_group: {
+                curatorGroupId: string;
+                curatorId: string;
+                permissions: string;
+            };
+            remove_curator_from_group: {
+                curatorGroupId: string;
+                curatorId: string;
+            };
+            create_channel: {
+                channelOwner: string;
+                params: string;
+            };
+            update_channel: {
+                actor: string;
+                channelId: string;
+                params: string;
+            };
+            update_channel_privilege_level: {
+                channelId: string;
+                newPrivilegeLevel: string;
+            };
+            set_channel_paused_features_as_moderator: {
+                actor: string;
+                channelId: string;
+                newPausedFeatures: string;
+                rationale: string;
+            };
+            delete_channel: {
+                actor: string;
+                channelId: string;
+                channelBagWitness: string;
+                numObjectsToDelete: string;
+            };
+            delete_channel_assets_as_moderator: {
+                actor: string;
+                channelId: string;
+                assetsToRemove: string;
+                storageBucketsNumWitness: string;
+                rationale: string;
+            };
+            delete_channel_as_moderator: {
+                actor: string;
+                channelId: string;
+                channelBagWitness: string;
+                numObjectsToDelete: string;
+                rationale: string;
+            };
+            set_channel_visibility_as_moderator: {
+                actor: string;
+                channelId: string;
+                isHidden: string;
+                rationale: string;
+            };
+            create_video: {
+                actor: string;
+                channelId: string;
+                params: string;
+            };
+            update_video: {
+                actor: string;
+                videoId: string;
+                params: string;
+            };
+            delete_video: {
+                actor: string;
+                videoId: string;
+                numObjectsToDelete: string;
+                storageBucketsNumWitness: string;
+            };
+            delete_video_assets_as_moderator: {
+                actor: string;
+                videoId: string;
+                storageBucketsNumWitness: string;
+                assetsToRemove: string;
+                rationale: string;
+            };
+            delete_video_as_moderator: {
+                actor: string;
+                videoId: string;
+                storageBucketsNumWitness: string;
+                numObjectsToDelete: string;
+                rationale: string;
+            };
+            set_video_visibility_as_moderator: {
+                actor: string;
+                videoId: string;
+                isHidden: string;
+                rationale: string;
+            };
+            update_channel_payouts: {
+                params: string;
+                uploaderAccount: string;
+            };
+            claim_channel_reward: {
+                actor: string;
+                proof: string;
+                item: string;
+            };
+            withdraw_from_channel_balance: {
+                actor: string;
+                channelId: string;
+                amount: string;
+            };
+            update_channel_state_bloat_bond: {
+                newChannelStateBloatBond: string;
+            };
+            update_video_state_bloat_bond: {
+                newVideoStateBloatBond: string;
+            };
+            claim_and_withdraw_channel_reward: {
+                actor: string;
+                proof: string;
+                item: string;
+            };
+            issue_nft: {
+                actor: string;
+                videoId: string;
+                params: string;
+            };
+            destroy_nft: {
+                actor: string;
+                videoId: string;
+            };
+            start_open_auction: {
+                ownerId: string;
+                videoId: string;
+                auctionParams: string;
+            };
+            start_english_auction: {
+                ownerId: string;
+                videoId: string;
+                auctionParams: string;
+            };
+            cancel_english_auction: {
+                ownerId: string;
+                videoId: string;
+            };
+            cancel_open_auction: {
+                ownerId: string;
+                videoId: string;
+            };
+            cancel_offer: {
+                ownerId: string;
+                videoId: string;
+            };
+            cancel_buy_now: {
+                ownerId: string;
+                videoId: string;
+            };
+            update_buy_now_price: {
+                ownerId: string;
+                videoId: string;
+                newPrice: string;
+            };
+            make_open_auction_bid: {
+                participantId: string;
+                videoId: string;
+                bidAmount: string;
+            };
+            make_english_auction_bid: {
+                participantId: string;
+                videoId: string;
+                bidAmount: string;
+            };
+            cancel_open_auction_bid: {
+                participantId: string;
+                videoId: string;
+            };
+            settle_english_auction: {
+                videoId: string;
+            };
+            pick_open_auction_winner: {
+                ownerId: string;
+                videoId: string;
+                winnerId: string;
+                commit: string;
+            };
+            offer_nft: {
+                videoId: string;
+                ownerId: string;
+                to: string;
+                price: string;
+            };
+            sling_nft_back: {
+                videoId: string;
+                ownerId: string;
+            };
+            accept_incoming_offer: {
+                videoId: string;
+                witnessPrice: string;
+            };
+            sell_nft: {
+                videoId: string;
+                ownerId: string;
+                price: string;
+            };
+            buy_nft: {
+                videoId: string;
+                participantId: string;
+                witnessPrice: string;
+            };
+            toggle_nft_limits: {
+                enabled: string;
+            };
+            channel_owner_remark: {
+                channelId: string;
+                msg: string;
+            };
+            creator_token_issuer_remark: {
+                actor: string;
+                channelId: string;
+                msg: string;
+            };
+            channel_agent_remark: {
+                actor: string;
+                channelId: string;
+                msg: string;
+            };
+            nft_owner_remark: {
+                actor: string;
+                videoId: string;
+                msg: string;
+            };
+            initialize_channel_transfer: {
+                channelId: string;
+                actor: string;
+                transferParams: string;
+            };
+            cancel_channel_transfer: {
+                channelId: string;
+                actor: string;
+            };
+            accept_channel_transfer: {
+                channelId: string;
+                commitmentParams: string;
+            };
+            update_global_nft_limit: {
+                nftLimitPeriod: string;
+                limit: string;
+            };
+            update_channel_nft_limit: {
+                actor: string;
+                nftLimitPeriod: string;
+                channelId: string;
+                limit: string;
+            };
+            issue_creator_token: {
+                actor: string;
+                channelId: string;
+                params: string;
+            };
+            init_creator_token_sale: {
+                actor: string;
+                channelId: string;
+                params: string;
+            };
+            update_upcoming_creator_token_sale: {
+                actor: string;
+                channelId: string;
+                newStartBlock: string;
+                newDuration: string;
+            };
+            creator_token_issuer_transfer: {
+                actor: string;
+                channelId: string;
+                outputs: string;
+                metadata: string;
+            };
+            make_creator_token_permissionless: {
+                actor: string;
+                channelId: string;
+            };
+            reduce_creator_token_patronage_rate_to: {
+                actor: string;
+                channelId: string;
+                targetRate: string;
+            };
+            claim_creator_token_patronage_credit: {
+                actor: string;
+                channelId: string;
+            };
+            issue_revenue_split: {
+                actor: string;
+                channelId: string;
+                start: string;
+                duration: string;
+            };
+            finalize_revenue_split: {
+                actor: string;
+                channelId: string;
+            };
+            finalize_creator_token_sale: {
+                actor: string;
+                channelId: string;
+            };
+            deissue_creator_token: {
+                actor: string;
+                channelId: string;
+            };
+            activate_amm: {
+                actor: string;
+                channelId: string;
+                params: string;
+            };
+            deactivate_amm: {
+                actor: string;
+                channelId: string;
+            };
+        };
+    };
+    /**
+     * Lookup384: pallet_content::types::ChannelBagWitness
+     **/
+    PalletContentChannelBagWitness: {
+        storageBucketsNum: string;
+        distributionBucketsNum: string;
+    };
+    /**
+     * Lookup386: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+     **/
+    PalletCommonMerkleTreeProofElementRecord: {
+        _alias: {
+            hash_: string;
+        };
+        hash_: string;
+        side: string;
+    };
+    /**
+     * Lookup387: pallet_common::merkle_tree::Side
+     **/
+    PalletCommonMerkleTreeSide: {
+        _enum: string[];
+    };
+    /**
+     * Lookup388: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     **/
+    PalletContentPullPaymentElement: {
+        channelId: string;
+        cumulativeRewardEarned: string;
+        reason: string;
+    };
+    /**
+     * Lookup389: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     **/
+    PalletContentInitTransferParameters: {
+        newCollaborators: string;
+        price: string;
+        newOwner: string;
+    };
+    /**
+     * Lookup390: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     **/
+    PalletProjectTokenTokenSaleParams: {
+        unitPrice: string;
+        upperBoundQuantity: string;
+        startsAt: string;
+        duration: string;
+        vestingScheduleParams: string;
+        capPerMember: string;
+        metadata: string;
+    };
+    /**
+     * Lookup394: pallet_project_token::types::AmmParams<Balance>
+     **/
+    PalletProjectTokenAmmParams: {
+        slope: string;
+        intercept: string;
+    };
+    /**
+     * Lookup395: pallet_storage::Call<T>
+     **/
+    PalletStorageCall: {
+        _enum: {
+            delete_storage_bucket: {
+                storageBucketId: string;
+            };
+            update_uploading_blocked_status: {
+                newStatus: string;
+            };
+            update_data_size_fee: {
+                newDataSizeFee: string;
+            };
+            update_storage_buckets_per_bag_limit: {
+                newLimit: string;
+            };
+            update_storage_buckets_voucher_max_limits: {
+                newObjectsSize: string;
+                newObjectsNumber: string;
+            };
+            update_data_object_state_bloat_bond: {
+                stateBloatBond: string;
+            };
+            update_number_of_storage_buckets_in_dynamic_bag_creation_policy: {
+                dynamicBagType: string;
+                numberOfStorageBuckets: string;
+            };
+            update_blacklist: {
+                removeHashes: string;
+                addHashes: string;
+            };
+            create_storage_bucket: {
+                inviteWorker: string;
+                acceptingNewBags: string;
+                sizeLimit: string;
+                objectsLimit: string;
+            };
+            update_storage_buckets_for_bag: {
+                bagId: string;
+                addBuckets: string;
+                removeBuckets: string;
+            };
+            cancel_storage_bucket_operator_invite: {
+                storageBucketId: string;
+            };
+            invite_storage_bucket_operator: {
+                storageBucketId: string;
+                operatorId: string;
+            };
+            remove_storage_bucket_operator: {
+                storageBucketId: string;
+            };
+            update_storage_bucket_status: {
+                storageBucketId: string;
+                acceptingNewBags: string;
+            };
+            set_storage_bucket_voucher_limits: {
+                storageBucketId: string;
+                newObjectsSizeLimit: string;
+                newObjectsNumberLimit: string;
+            };
+            accept_storage_bucket_invitation: {
+                workerId: string;
+                storageBucketId: string;
+                transactorAccountId: string;
+            };
+            set_storage_operator_metadata: {
+                workerId: string;
+                storageBucketId: string;
+                metadata: string;
+            };
+            accept_pending_data_objects: {
+                workerId: string;
+                storageBucketId: string;
+                bagId: string;
+                dataObjects: string;
+            };
+            create_distribution_bucket_family: string;
+            delete_distribution_bucket_family: {
+                familyId: string;
+            };
+            create_distribution_bucket: {
+                familyId: string;
+                acceptingNewBags: string;
+            };
+            update_distribution_bucket_status: {
+                bucketId: string;
+                acceptingNewBags: string;
+            };
+            delete_distribution_bucket: {
+                bucketId: string;
+            };
+            update_distribution_buckets_for_bag: {
+                bagId: string;
+                familyId: string;
+                addBucketsIndices: string;
+                removeBucketsIndices: string;
+            };
+            update_distribution_buckets_per_bag_limit: {
+                newLimit: string;
+            };
+            update_distribution_bucket_mode: {
+                bucketId: string;
+                distributing: string;
+            };
+            update_families_in_dynamic_bag_creation_policy: {
+                dynamicBagType: string;
+                families: string;
+            };
+            invite_distribution_bucket_operator: {
+                bucketId: string;
+                operatorWorkerId: string;
+            };
+            cancel_distribution_bucket_operator_invite: {
+                bucketId: string;
+                operatorWorkerId: string;
+            };
+            remove_distribution_bucket_operator: {
+                bucketId: string;
+                operatorWorkerId: string;
+            };
+            set_distribution_bucket_family_metadata: {
+                familyId: string;
+                metadata: string;
+            };
+            accept_distribution_bucket_invitation: {
+                workerId: string;
+                bucketId: string;
+            };
+            set_distribution_operator_metadata: {
+                workerId: string;
+                bucketId: string;
+                metadata: string;
+            };
+            storage_operator_remark: {
+                workerId: string;
+                storageBucketId: string;
+                msg: string;
+            };
+            distribution_operator_remark: {
+                workerId: string;
+                distributionBucketId: string;
+                msg: string;
+            };
+        };
+    };
+    /**
+     * Lookup396: pallet_project_token::Call<T>
+     **/
+    PalletProjectTokenCall: {
+        _enum: {
+            transfer: {
+                srcMemberId: string;
+                tokenId: string;
+                outputs: string;
+                metadata: string;
+            };
+            burn: {
+                tokenId: string;
+                memberId: string;
+                amount: string;
+            };
+            dust_account: {
+                tokenId: string;
+                memberId: string;
+            };
+            join_whitelist: {
+                memberId: string;
+                tokenId: string;
+                proof: string;
+            };
+            purchase_tokens_on_sale: {
+                tokenId: string;
+                memberId: string;
+                amount: string;
+            };
+            participate_in_split: {
+                tokenId: string;
+                memberId: string;
+                amount: string;
+            };
+            exit_revenue_split: {
+                tokenId: string;
+                memberId: string;
+            };
+            buy_on_amm: {
+                tokenId: string;
+                memberId: string;
+                amount: string;
+                slippageTolerance: string;
+            };
+            sell_on_amm: {
+                tokenId: string;
+                memberId: string;
+                amount: string;
+                slippageTolerance: string;
+            };
+            update_max_yearly_patronage_rate: {
+                rate: string;
+            };
+        };
+    };
+    /**
+     * Lookup400: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     **/
+    PalletProjectTokenMerkleProof: string;
+    /**
+     * Lookup403: pallet_project_token::types::MerkleSide
+     **/
+    PalletProjectTokenMerkleSide: {
+        _enum: string[];
+    };
+    /**
+     * Lookup406: pallet_proposals_engine::Call<T>
+     **/
+    PalletProposalsEngineCall: {
+        _enum: {
+            vote: {
+                voterId: string;
+                proposalId: string;
+                vote: string;
+                rationale: string;
+            };
+            cancel_proposal: {
+                proposerId: string;
+                proposalId: string;
+            };
+            veto_proposal: {
+                proposalId: string;
+            };
+            proposer_remark: {
+                proposalId: string;
+                proposerId: string;
+                msg: string;
+            };
+        };
+    };
+    /**
+     * Lookup407: pallet_proposals_discussion::Call<T>
+     **/
+    PalletProposalsDiscussionCall: {
+        _enum: {
+            add_post: {
+                postAuthorId: string;
+                threadId: string;
+                text: string;
+                editable: string;
+            };
+            delete_post: {
+                deleterId: string;
+                postId: string;
+                threadId: string;
+                hide: string;
+            };
+            update_post: {
+                threadId: string;
+                postId: string;
+                text: string;
+            };
+            change_thread_mode: {
+                memberId: string;
+                threadId: string;
+                mode: string;
+            };
+        };
+    };
+    /**
+     * Lookup408: pallet_proposals_codex::Call<T>
+     **/
+    PalletProposalsCodexCall: {
+        _enum: {
+            create_proposal: {
+                generalProposalParameters: string;
+                proposalDetails: string;
+            };
+        };
+    };
+    /**
+     * Lookup409: pallet_working_group::Call<T, I>
+     **/
+    PalletWorkingGroupCall: {
+        _enum: {
+            add_opening: {
+                description: string;
+                openingType: string;
+                stakePolicy: string;
+                rewardPerBlock: string;
+            };
+            apply_on_opening: {
+                p: string;
+            };
+            fill_opening: {
+                openingId: string;
+                successfulApplicationIds: string;
+            };
+            update_role_account: {
+                workerId: string;
+                newRoleAccountId: string;
+            };
+            leave_role: {
+                workerId: string;
+                rationale: string;
+            };
+            terminate_role: {
+                workerId: string;
+                penalty: string;
+                rationale: string;
+            };
+            slash_stake: {
+                workerId: string;
+                penalty: string;
+                rationale: string;
+            };
+            decrease_stake: {
+                workerId: string;
+                stakeBalanceDelta: string;
+            };
+            increase_stake: {
+                workerId: string;
+                stakeBalanceDelta: string;
+            };
+            withdraw_application: {
+                applicationId: string;
+            };
+            cancel_opening: {
+                openingId: string;
+            };
+            set_budget: {
+                newBudget: string;
+            };
+            update_reward_account: {
+                workerId: string;
+                newRewardAccountId: string;
+            };
+            update_reward_amount: {
+                workerId: string;
+                rewardPerBlock: string;
+            };
+            set_status_text: {
+                statusText: string;
+            };
+            spend_from_budget: {
+                accountId: string;
+                amount: string;
+                rationale: string;
+            };
+            fund_working_group_budget: {
+                memberId: string;
+                amount: string;
+                rationale: string;
+            };
+            lead_remark: {
+                msg: string;
+            };
+            worker_remark: {
+                workerId: string;
+                msg: string;
+            };
+        };
+    };
+    /**
+     * Lookup418: joystream_node_runtime::OriginCaller
+     **/
+    JoystreamNodeRuntimeOriginCaller: {
+        _enum: {
+            system: string;
+            Void: string;
+        };
+    };
+    /**
+     * Lookup419: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     **/
+    FrameSupportDispatchRawOrigin: {
+        _enum: {
+            Root: string;
+            Signed: string;
+            None: string;
+        };
+    };
+    /**
+     * Lookup420: sp_core::Void
+     **/
+    SpCoreVoid: string;
+    /**
+     * Lookup421: pallet_utility::pallet::Error<T>
+     **/
+    PalletUtilityError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup428: sp_consensus_babe::digests::PreDigest
+     **/
+    SpConsensusBabeDigestsPreDigest: {
+        _enum: {
+            __Unused0: string;
+            Primary: string;
+            SecondaryPlain: string;
+            SecondaryVRF: string;
+        };
+    };
+    /**
+     * Lookup429: sp_consensus_babe::digests::PrimaryPreDigest
+     **/
+    SpConsensusBabeDigestsPrimaryPreDigest: {
+        authorityIndex: string;
+        slot: string;
+        vrfOutput: string;
+        vrfProof: string;
+    };
+    /**
+     * Lookup430: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     **/
+    SpConsensusBabeDigestsSecondaryPlainPreDigest: {
+        authorityIndex: string;
+        slot: string;
+    };
+    /**
+     * Lookup431: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     **/
+    SpConsensusBabeDigestsSecondaryVRFPreDigest: {
+        authorityIndex: string;
+        slot: string;
+        vrfOutput: string;
+        vrfProof: string;
+    };
+    /**
+     * Lookup433: sp_consensus_babe::BabeEpochConfiguration
+     **/
+    SpConsensusBabeBabeEpochConfiguration: {
+        c: string;
+        allowedSlots: string;
+    };
+    /**
+     * Lookup434: pallet_babe::pallet::Error<T>
+     **/
+    PalletBabeError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup436: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+     **/
+    PalletAuthorshipUncleEntryItem: {
+        _enum: {
+            InclusionHeight: string;
+            Uncle: string;
+        };
+    };
+    /**
+     * Lookup437: pallet_authorship::pallet::Error<T>
+     **/
+    PalletAuthorshipError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup439: pallet_balances::BalanceLock<Balance>
+     **/
+    PalletBalancesBalanceLock: {
+        id: string;
+        amount: string;
+        reasons: string;
+    };
+    /**
+     * Lookup440: pallet_balances::Reasons
+     **/
+    PalletBalancesReasons: {
+        _enum: string[];
+    };
+    /**
+     * Lookup443: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     **/
+    PalletBalancesReserveData: {
+        id: string;
+        amount: string;
+    };
+    /**
+     * Lookup445: pallet_balances::Releases
+     **/
+    PalletBalancesReleases: {
+        _enum: string[];
+    };
+    /**
+     * Lookup446: pallet_balances::pallet::Error<T, I>
+     **/
+    PalletBalancesError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup448: pallet_transaction_payment::Releases
+     **/
+    PalletTransactionPaymentReleases: {
+        _enum: string[];
+    };
+    /**
+     * Lookup449: pallet_election_provider_multi_phase::Phase<Bn>
+     **/
+    PalletElectionProviderMultiPhasePhase: {
+        _enum: {
+            Off: string;
+            Signed: string;
+            Unsigned: string;
+            Emergency: string;
+        };
+    };
+    /**
+     * Lookup451: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     **/
+    PalletElectionProviderMultiPhaseReadySolution: {
+        supports: string;
+        score: string;
+        compute: string;
+    };
+    /**
+     * Lookup452: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     **/
+    PalletElectionProviderMultiPhaseRoundSnapshot: {
+        voters: string;
+        targets: string;
+    };
+    /**
+     * Lookup460: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+     **/
+    PalletElectionProviderMultiPhaseSignedSignedSubmission: {
+        who: string;
+        deposit: string;
+        rawSolution: string;
+        callFee: string;
+    };
+    /**
+     * Lookup461: pallet_election_provider_multi_phase::pallet::Error<T>
+     **/
+    PalletElectionProviderMultiPhaseError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup462: pallet_staking::StakingLedger<T>
+     **/
+    PalletStakingStakingLedger: {
+        stash: string;
+        total: string;
+        active: string;
+        unlocking: string;
+        claimedRewards: string;
+    };
+    /**
+     * Lookup464: pallet_staking::UnlockChunk<Balance>
+     **/
+    PalletStakingUnlockChunk: {
+        value: string;
+        era: string;
+    };
+    /**
+     * Lookup466: pallet_staking::Nominations<T>
+     **/
+    PalletStakingNominations: {
+        targets: string;
+        submittedIn: string;
+        suppressed: string;
+    };
+    /**
+     * Lookup467: pallet_staking::ActiveEraInfo
+     **/
+    PalletStakingActiveEraInfo: {
+        index: string;
+        start: string;
+    };
+    /**
+     * Lookup469: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     **/
+    PalletStakingEraRewardPoints: {
+        total: string;
+        individual: string;
+    };
+    /**
+     * Lookup473: pallet_staking::Forcing
+     **/
+    PalletStakingForcing: {
+        _enum: string[];
+    };
+    /**
+     * Lookup475: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStakingUnappliedSlash: {
+        validator: string;
+        own: string;
+        others: string;
+        reporters: string;
+        payout: string;
+    };
+    /**
+     * Lookup477: pallet_staking::slashing::SlashingSpans
+     **/
+    PalletStakingSlashingSlashingSpans: {
+        spanIndex: string;
+        lastStart: string;
+        lastNonzeroSlash: string;
+        prior: string;
+    };
+    /**
+     * Lookup478: pallet_staking::slashing::SpanRecord<Balance>
+     **/
+    PalletStakingSlashingSpanRecord: {
+        slashed: string;
+        paidOut: string;
+    };
+    /**
+     * Lookup481: pallet_staking::Releases
+     **/
+    PalletStakingReleases: {
+        _enum: string[];
+    };
+    /**
+     * Lookup482: pallet_staking::pallet::pallet::Error<T>
+     **/
+    PalletStakingPalletError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup486: sp_core::crypto::KeyTypeId
+     **/
+    SpCoreCryptoKeyTypeId: string;
+    /**
+     * Lookup487: pallet_session::pallet::Error<T>
+     **/
+    PalletSessionError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup489: pallet_grandpa::StoredState<N>
+     **/
+    PalletGrandpaStoredState: {
+        _enum: {
+            Live: string;
+            PendingPause: {
+                scheduledAt: string;
+                delay: string;
+            };
+            Paused: string;
+            PendingResume: {
+                scheduledAt: string;
+                delay: string;
+            };
+        };
+    };
+    /**
+     * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
+     **/
+    PalletGrandpaStoredPendingChange: {
+        scheduledAt: string;
+        delay: string;
+        nextAuthorities: string;
+        forced: string;
+    };
+    /**
+     * Lookup492: pallet_grandpa::pallet::Error<T>
+     **/
+    PalletGrandpaError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     **/
+    PalletImOnlineBoundedOpaqueNetworkState: {
+        peerId: string;
+        externalAddresses: string;
+    };
+    /**
+     * Lookup502: pallet_im_online::pallet::Error<T>
+     **/
+    PalletImOnlineError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     **/
+    SpStakingOffenceOffenceDetails: {
+        offender: string;
+        reporters: string;
+    };
+    /**
+     * Lookup506: pallet_bags_list::list::Node<T, I>
+     **/
+    PalletBagsListListNode: {
+        id: string;
+        prev: string;
+        next: string;
+        bagUpper: string;
+        score: string;
+    };
+    /**
+     * Lookup507: pallet_bags_list::list::Bag<T, I>
+     **/
+    PalletBagsListListBag: {
+        head: string;
+        tail: string;
+    };
+    /**
+     * Lookup508: pallet_bags_list::pallet::Error<T, I>
+     **/
+    PalletBagsListError: {
+        _enum: {
+            List: string;
+        };
+    };
+    /**
+     * Lookup509: pallet_bags_list::list::ListError
+     **/
+    PalletBagsListListListError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup512: pallet_vesting::Releases
+     **/
+    PalletVestingReleases: {
+        _enum: string[];
+    };
+    /**
+     * Lookup513: pallet_vesting::pallet::Error<T>
+     **/
+    PalletVestingError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletMultisigMultisig: {
+        when: string;
+        deposit: string;
+        depositor: string;
+        approvals: string;
+    };
+    /**
+     * Lookup517: pallet_multisig::pallet::Error<T>
+     **/
+    PalletMultisigError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
+     **/
+    PalletCouncilCouncilStageUpdate: {
+        stage: string;
+        changedAt: string;
+    };
+    /**
+     * Lookup519: pallet_council::CouncilStage<BlockNumber>
+     **/
+    PalletCouncilCouncilStage: {
+        _enum: {
+            Announcing: string;
+            Election: string;
+            Idle: string;
+        };
+    };
+    /**
+     * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
+     **/
+    PalletCouncilCouncilStageAnnouncing: {
+        candidatesCount: string;
+        endsAt: string;
+    };
+    /**
+     * Lookup521: pallet_council::CouncilStageElection
+     **/
+    PalletCouncilCouncilStageElection: {
+        candidatesCount: string;
+    };
+    /**
+     * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
+     **/
+    PalletCouncilCouncilStageIdle: {
+        endsAt: string;
+    };
+    /**
+     * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     **/
+    PalletCouncilCouncilMember: {
+        stakingAccountId: string;
+        rewardAccountId: string;
+        membershipId: string;
+        stake: string;
+        lastPaymentBlock: string;
+        unpaidReward: string;
+    };
+    /**
+     * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     **/
+    PalletCouncilCandidate: {
+        stakingAccountId: string;
+        rewardAccountId: string;
+        cycleId: string;
+        stake: string;
+        votePower: string;
+        noteHash: string;
+    };
+    /**
+     * Lookup527: pallet_council::Error<T>
+     **/
+    PalletCouncilError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     **/
+    PalletReferendumReferendumStage: {
+        _enum: {
+            Inactive: string;
+            Voting: string;
+            Revealing: string;
+        };
+    };
+    /**
+     * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     **/
+    PalletReferendumReferendumStageVoting: {
+        started: string;
+        winningTargetCount: string;
+        currentCycleId: string;
+        endsAt: string;
+    };
+    /**
+     * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     **/
+    PalletReferendumReferendumStageRevealing: {
+        started: string;
+        winningTargetCount: string;
+        intermediateWinners: string;
+        currentCycleId: string;
+        endsAt: string;
+    };
+    /**
+     * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     **/
+    PalletReferendumCastVote: {
+        commitment: string;
+        cycleId: string;
+        stake: string;
+        voteFor: string;
+    };
+    /**
+     * Lookup533: pallet_referendum::Error<T, I>
+     **/
+    PalletReferendumError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+     **/
+    PalletMembershipMembershipObject: {
+        handleHash: string;
+        rootAccount: string;
+        controllerAccount: string;
+        verified: string;
+        invites: string;
+    };
+    /**
+     * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
+     **/
+    PalletMembershipStakingAccountMemberBinding: {
+        memberId: string;
+        confirmed: string;
+    };
+    /**
+     * Lookup536: pallet_membership::Error<T>
+     **/
+    PalletMembershipError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletForumCategory: {
+        titleHash: string;
+        descriptionHash: string;
+        archived: string;
+        numDirectSubcategories: string;
+        numDirectThreads: string;
+        numDirectModerators: string;
+        parentCategoryId: string;
+        stickyThreadIds: string;
+    };
+    /**
+     * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletForumThread: {
+        categoryId: string;
+        authorId: string;
+        cleanupPayOff: string;
+        numberOfEditablePosts: string;
+    };
+    /**
+     * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletForumPost: {
+        threadId: string;
+        textHash: string;
+        authorId: string;
+        cleanupPayOff: string;
+        lastEdited: string;
+    };
+    /**
+     * Lookup541: pallet_forum::Error<T>
+     **/
+    PalletForumError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+     **/
+    PalletConstitutionConstitutionInfo: {
+        textHash: string;
+    };
+    /**
+     * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletBountyBountyRecord: {
+        creationParams: string;
+        totalFunding: string;
+        milestone: string;
+        activeWorkEntryCount: string;
+        hasUnpaidOracleReward: string;
+    };
+    /**
+     * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletBountyBountyParametersBoundedBTreeSet: {
+        oracle: string;
+        contractType: string;
+        creator: string;
+        cherry: string;
+        oracleReward: string;
+        entrantStake: string;
+        fundingType: string;
+    };
+    /**
+     * Lookup546: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletBountyAssuranceContractTypeBoundedBTreeSet: {
+        _enum: {
+            Open: string;
+            Closed: string;
+        };
+    };
+    /**
+     * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
+     **/
+    PalletBountyBountyMilestone: {
+        _enum: {
+            Created: {
+                createdAt: string;
+                hasContributions: string;
+            };
+            BountyMaxFundingReached: string;
+            WorkSubmitted: string;
+            Terminated: string;
+            JudgmentSubmitted: {
+                successfulBounty: string;
+            };
+        };
+    };
+    /**
+     * Lookup549: pallet_bounty::Contribution<T>
+     **/
+    PalletBountyContribution: {
+        amount: string;
+        funderStateBloatBondAmount: string;
+    };
+    /**
+     * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     **/
+    PalletBountyEntryRecord: {
+        memberId: string;
+        stakingAccountId: string;
+        submittedAt: string;
+        workSubmitted: string;
+    };
+    /**
+     * Lookup551: pallet_bounty::Error<T>
+     **/
+    PalletBountyError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletContentVideoRecord: {
+        inChannel: string;
+        nftStatus: string;
+        dataObjects: string;
+        videoStateBloatBond: string;
+    };
+    /**
+     * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+     **/
+    PalletContentNftTypesOwnedNft: {
+        owner: string;
+        transactionalStatus: string;
+        creatorRoyalty: string;
+        openAuctionsNonce: string;
+    };
+    /**
+     * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+     **/
+    PalletContentNftTypesTransactionalStatusRecord: {
+        _enum: {
+            Idle: string;
+            InitiatedOfferToMember: string;
+            EnglishAuction: string;
+            OpenAuction: string;
+            BuyNow: string;
+        };
+    };
+    /**
+     * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletContentNftTypesEnglishAuctionRecord: {
+        startingPrice: string;
+        buyNowPrice: string;
+        whitelist: string;
+        end: string;
+        start: string;
+        extensionPeriod: string;
+        minBidStep: string;
+        topBid: string;
+    };
+    /**
+     * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     **/
+    PalletContentNftTypesEnglishAuctionBid: {
+        amount: string;
+        bidderId: string;
+    };
+    /**
+     * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletContentNftTypesOpenAuctionRecord: {
+        startingPrice: string;
+        buyNowPrice: string;
+        whitelist: string;
+        bidLockDuration: string;
+        auctionId: string;
+        start: string;
+    };
+    /**
+     * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
+     **/
+    PalletContentNftTypesNftOwner: {
+        _enum: {
+            ChannelOwner: string;
+            Member: string;
+        };
+    };
+    /**
+     * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+     **/
+    PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
+        curators: string;
+        active: string;
+        permissionsByLevel: string;
+    };
+    /**
+     * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     **/
+    PalletContentNftTypesOpenAuctionBidRecord: {
+        amount: string;
+        madeAtBlock: string;
+        auctionId: string;
+    };
+    /**
+     * Lookup572: pallet_content::errors::Error<T>
+     **/
+    PalletContentErrorsError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup573: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+     **/
+    PalletStorageBagRecord: {
+        storedBy: string;
+        distributedBy: string;
+        objectsTotalSize: string;
+        objectsNumber: string;
+    };
+    /**
+     * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     **/
+    PalletStorageStorageBucketRecord: {
+        operatorStatus: string;
+        acceptingNewBags: string;
+        voucher: string;
+        assignedBags: string;
+    };
+    /**
+     * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     **/
+    PalletStorageStorageBucketOperatorStatus: {
+        _enum: {
+            Missing: string;
+            InvitedStorageWorker: string;
+            StorageWorker: string;
+        };
+    };
+    /**
+     * Lookup579: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+     **/
+    PalletStorageDynamicBagCreationPolicy: {
+        numberOfStorageBuckets: string;
+        families: string;
+    };
+    /**
+     * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletStorageDataObject: {
+        _alias: {
+            size_: string;
+        };
+        accepted: string;
+        stateBloatBond: string;
+        size_: string;
+        ipfsContentId: string;
+    };
+    /**
+     * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     **/
+    PalletStorageDistributionBucketFamilyRecord: {
+        nextDistributionBucketIndex: string;
+    };
+    /**
+     * Lookup584: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletStorageDistributionBucketRecord: {
+        acceptingNewBags: string;
+        distributing: string;
+        pendingInvitations: string;
+        operators: string;
+        assignedBags: string;
+    };
+    /**
+     * Lookup587: pallet_storage::Error<T>
+     **/
+    PalletStorageError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+     **/
+    PalletProjectTokenAccountData: {
+        vestingSchedules: string;
+        amount: string;
+        splitStakingStatus: string;
+        bloatBond: string;
+        nextVestingTransferId: string;
+        lastSaleTotalPurchasedAmount: string;
+    };
+    /**
+     * Lookup589: pallet_project_token::types::StakingStatus<Balance>
+     **/
+    PalletProjectTokenStakingStatus: {
+        splitId: string;
+        amount: string;
+    };
+    /**
+     * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     **/
+    PalletProjectTokenVestingSchedule: {
+        linearVestingStartBlock: string;
+        linearVestingDuration: string;
+        cliffAmount: string;
+        postCliffTotalAmount: string;
+        burnedAmount: string;
+    };
+    /**
+     * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     **/
+    PalletProjectTokenTokenData: {
+        totalSupply: string;
+        tokensIssued: string;
+        nextSaleId: string;
+        sale: string;
+        transferPolicy: string;
+        symbol: string;
+        patronageInfo: string;
+        accountsNumber: string;
+        revenueSplitRate: string;
+        revenueSplit: string;
+        nextRevenueSplitId: string;
+        ammCurve: string;
+    };
+    /**
+     * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     **/
+    PalletProjectTokenRevenueSplitState: {
+        _enum: {
+            Inactive: string;
+            Active: string;
+        };
+    };
+    /**
+     * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     **/
+    PalletProjectTokenRevenueSplitInfo: {
+        allocation: string;
+        timeline: string;
+        dividendsClaimed: string;
+    };
+    /**
+     * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
+     **/
+    PalletProjectTokenTimeline: {
+        start: string;
+        duration: string;
+    };
+    /**
+     * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     **/
+    PalletProjectTokenPatronageData: {
+        rate: string;
+        unclaimedPatronageTallyAmount: string;
+        lastUnclaimedPatronageTallyBlock: string;
+    };
+    /**
+     * Lookup605: pallet_project_token::errors::Error<T>
+     **/
+    PalletProjectTokenErrorsError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup606: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletProposalsEngineProposal: {
+        parameters: string;
+        proposerId: string;
+        activatedAt: string;
+        status: string;
+        votingResults: string;
+        exactExecutionBlock: string;
+        nrOfCouncilConfirmations: string;
+        stakingAccountId: string;
+    };
+    /**
+     * Lookup607: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     **/
+    PalletProposalsEngineProposalParameters: {
+        votingPeriod: string;
+        gracePeriod: string;
+        approvalQuorumPercentage: string;
+        approvalThresholdPercentage: string;
+        slashingQuorumPercentage: string;
+        slashingThresholdPercentage: string;
+        requiredStake: string;
+        constitutionality: string;
+    };
+    /**
+     * Lookup608: pallet_proposals_engine::types::VotingResults
+     **/
+    PalletProposalsEngineVotingResults: {
+        abstentions: string;
+        approvals: string;
+        rejections: string;
+        slashes: string;
+    };
+    /**
+     * Lookup611: pallet_proposals_engine::Error<T>
+     **/
+    PalletProposalsEngineError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup612: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletProposalsDiscussionDiscussionThread: {
+        activatedAt: string;
+        authorId: string;
+        mode: string;
+    };
+    /**
+     * Lookup614: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
+        _enum: {
+            Open: string;
+            Closed: string;
+        };
+    };
+    /**
+     * Lookup615: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletProposalsDiscussionDiscussionPost: {
+        authorId: string;
+        cleanupPayOff: string;
+        lastEdited: string;
+    };
+    /**
+     * Lookup616: pallet_proposals_discussion::Error<T>
+     **/
+    PalletProposalsDiscussionError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup617: pallet_proposals_codex::Error<T>
+     **/
+    PalletProposalsCodexError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup618: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+     **/
+    PalletWorkingGroupOpening: {
+        openingType: string;
+        created: string;
+        descriptionHash: string;
+        stakePolicy: string;
+        rewardPerBlock: string;
+        creationStake: string;
+    };
+    /**
+     * Lookup619: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+     **/
+    PalletWorkingGroupJobApplication: {
+        roleAccountId: string;
+        rewardAccountId: string;
+        stakingAccountId: string;
+        memberId: string;
+        descriptionHash: string;
+        openingId: string;
+    };
+    /**
+     * Lookup620: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     **/
+    PalletWorkingGroupGroupWorker: {
+        memberId: string;
+        roleAccountId: string;
+        stakingAccountId: string;
+        rewardAccountId: string;
+        startedLeavingAt: string;
+        jobUnstakingPeriod: string;
+        rewardPerBlock: string;
+        missedReward: string;
+        createdAt: string;
+    };
+    /**
+     * Lookup621: pallet_working_group::errors::Error<T, I>
+     **/
+    PalletWorkingGroupErrorsError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup631: sp_runtime::MultiSignature
+     **/
+    SpRuntimeMultiSignature: {
+        _enum: {
+            Ed25519: string;
+            Sr25519: string;
+            Ecdsa: string;
+        };
+    };
+    /**
+     * Lookup632: sp_core::ecdsa::Signature
+     **/
+    SpCoreEcdsaSignature: string;
+    /**
+     * Lookup635: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     **/
+    FrameSystemExtensionsCheckNonZeroSender: string;
+    /**
+     * Lookup636: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     **/
+    FrameSystemExtensionsCheckSpecVersion: string;
+    /**
+     * Lookup637: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     **/
+    FrameSystemExtensionsCheckTxVersion: string;
+    /**
+     * Lookup638: frame_system::extensions::check_genesis::CheckGenesis<T>
+     **/
+    FrameSystemExtensionsCheckGenesis: string;
+    /**
+     * Lookup641: frame_system::extensions::check_nonce::CheckNonce<T>
+     **/
+    FrameSystemExtensionsCheckNonce: string;
+    /**
+     * Lookup642: frame_system::extensions::check_weight::CheckWeight<T>
+     **/
+    FrameSystemExtensionsCheckWeight: string;
+    /**
+     * Lookup643: pallet_transaction_payment::ChargeTransactionPayment<T>
+     **/
+    PalletTransactionPaymentChargeTransactionPayment: string;
+    /**
+     * Lookup644: joystream_node_runtime::Runtime
+     **/
+    JoystreamNodeRuntimeRuntime: string;
+};
+export default _default;
diff --git a/node_modules/@joystream/types/types/lib/augment/registry.d.ts b/node_modules/@joystream/types/types/lib/augment/registry.d.ts
new file mode 100644
index 0000000..65b6fcd
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/registry.d.ts
@@ -0,0 +1,359 @@
+import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenAmmCurve, PalletProjectTokenAmmParams, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfers, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+declare module '@polkadot/types/types/registry' {
+    interface InterfaceTypes {
+        FinalityGrandpaEquivocationPrecommit: FinalityGrandpaEquivocationPrecommit;
+        FinalityGrandpaEquivocationPrevote: FinalityGrandpaEquivocationPrevote;
+        FinalityGrandpaPrecommit: FinalityGrandpaPrecommit;
+        FinalityGrandpaPrevote: FinalityGrandpaPrevote;
+        FrameSupportDispatchRawOrigin: FrameSupportDispatchRawOrigin;
+        FrameSupportTokensMiscBalanceStatus: FrameSupportTokensMiscBalanceStatus;
+        FrameSupportWeightsDispatchClass: FrameSupportWeightsDispatchClass;
+        FrameSupportWeightsDispatchInfo: FrameSupportWeightsDispatchInfo;
+        FrameSupportWeightsPays: FrameSupportWeightsPays;
+        FrameSupportWeightsPerDispatchClassU32: FrameSupportWeightsPerDispatchClassU32;
+        FrameSupportWeightsPerDispatchClassU64: FrameSupportWeightsPerDispatchClassU64;
+        FrameSupportWeightsPerDispatchClassWeightsPerClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
+        FrameSupportWeightsRuntimeDbWeight: FrameSupportWeightsRuntimeDbWeight;
+        FrameSystemAccountInfo: FrameSystemAccountInfo;
+        FrameSystemCall: FrameSystemCall;
+        FrameSystemError: FrameSystemError;
+        FrameSystemEvent: FrameSystemEvent;
+        FrameSystemEventRecord: FrameSystemEventRecord;
+        FrameSystemExtensionsCheckGenesis: FrameSystemExtensionsCheckGenesis;
+        FrameSystemExtensionsCheckNonZeroSender: FrameSystemExtensionsCheckNonZeroSender;
+        FrameSystemExtensionsCheckNonce: FrameSystemExtensionsCheckNonce;
+        FrameSystemExtensionsCheckSpecVersion: FrameSystemExtensionsCheckSpecVersion;
+        FrameSystemExtensionsCheckTxVersion: FrameSystemExtensionsCheckTxVersion;
+        FrameSystemExtensionsCheckWeight: FrameSystemExtensionsCheckWeight;
+        FrameSystemLastRuntimeUpgradeInfo: FrameSystemLastRuntimeUpgradeInfo;
+        FrameSystemLimitsBlockLength: FrameSystemLimitsBlockLength;
+        FrameSystemLimitsBlockWeights: FrameSystemLimitsBlockWeights;
+        FrameSystemLimitsWeightsPerClass: FrameSystemLimitsWeightsPerClass;
+        FrameSystemPhase: FrameSystemPhase;
+        JoystreamNodeRuntimeNposSolution16: JoystreamNodeRuntimeNposSolution16;
+        JoystreamNodeRuntimeOriginCaller: JoystreamNodeRuntimeOriginCaller;
+        JoystreamNodeRuntimeRuntime: JoystreamNodeRuntimeRuntime;
+        JoystreamNodeRuntimeSessionKeys: JoystreamNodeRuntimeSessionKeys;
+        PalletAuthorshipCall: PalletAuthorshipCall;
+        PalletAuthorshipError: PalletAuthorshipError;
+        PalletAuthorshipUncleEntryItem: PalletAuthorshipUncleEntryItem;
+        PalletBabeCall: PalletBabeCall;
+        PalletBabeError: PalletBabeError;
+        PalletBagsListCall: PalletBagsListCall;
+        PalletBagsListError: PalletBagsListError;
+        PalletBagsListEvent: PalletBagsListEvent;
+        PalletBagsListListBag: PalletBagsListListBag;
+        PalletBagsListListListError: PalletBagsListListListError;
+        PalletBagsListListNode: PalletBagsListListNode;
+        PalletBalancesAccountData: PalletBalancesAccountData;
+        PalletBalancesBalanceLock: PalletBalancesBalanceLock;
+        PalletBalancesCall: PalletBalancesCall;
+        PalletBalancesError: PalletBalancesError;
+        PalletBalancesEvent: PalletBalancesEvent;
+        PalletBalancesReasons: PalletBalancesReasons;
+        PalletBalancesReleases: PalletBalancesReleases;
+        PalletBalancesReserveData: PalletBalancesReserveData;
+        PalletBountyAssuranceContractTypeBTreeSet: PalletBountyAssuranceContractTypeBTreeSet;
+        PalletBountyAssuranceContractTypeBoundedBTreeSet: PalletBountyAssuranceContractTypeBoundedBTreeSet;
+        PalletBountyBountyActor: PalletBountyBountyActor;
+        PalletBountyBountyMilestone: PalletBountyBountyMilestone;
+        PalletBountyBountyParametersBTreeSet: PalletBountyBountyParametersBTreeSet;
+        PalletBountyBountyParametersBoundedBTreeSet: PalletBountyBountyParametersBoundedBTreeSet;
+        PalletBountyBountyRecord: PalletBountyBountyRecord;
+        PalletBountyCall: PalletBountyCall;
+        PalletBountyContribution: PalletBountyContribution;
+        PalletBountyEntryRecord: PalletBountyEntryRecord;
+        PalletBountyError: PalletBountyError;
+        PalletBountyFundingType: PalletBountyFundingType;
+        PalletBountyOracleWorkEntryJudgment: PalletBountyOracleWorkEntryJudgment;
+        PalletBountyRawEvent: PalletBountyRawEvent;
+        PalletCommonBalanceKind: PalletCommonBalanceKind;
+        PalletCommonBloatBondRepayableBloatBond: PalletCommonBloatBondRepayableBloatBond;
+        PalletCommonFundingRequestParameters: PalletCommonFundingRequestParameters;
+        PalletCommonMerkleTreeProofElementRecord: PalletCommonMerkleTreeProofElementRecord;
+        PalletCommonMerkleTreeSide: PalletCommonMerkleTreeSide;
+        PalletCommonWorkingGroupIterableEnumsWorkingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+        PalletConstitutionCall: PalletConstitutionCall;
+        PalletConstitutionConstitutionInfo: PalletConstitutionConstitutionInfo;
+        PalletConstitutionRawEvent: PalletConstitutionRawEvent;
+        PalletContentCall: PalletContentCall;
+        PalletContentChannelBagWitness: PalletContentChannelBagWitness;
+        PalletContentChannelCreationParametersRecord: PalletContentChannelCreationParametersRecord;
+        PalletContentChannelFundsDestination: PalletContentChannelFundsDestination;
+        PalletContentChannelOwner: PalletContentChannelOwner;
+        PalletContentChannelPayoutsPayloadParametersRecord: PalletContentChannelPayoutsPayloadParametersRecord;
+        PalletContentChannelRecord: PalletContentChannelRecord;
+        PalletContentChannelTransferStatus: PalletContentChannelTransferStatus;
+        PalletContentChannelUpdateParametersRecord: PalletContentChannelUpdateParametersRecord;
+        PalletContentErrorsError: PalletContentErrorsError;
+        PalletContentInitTransferParameters: PalletContentInitTransferParameters;
+        PalletContentIterableEnumsChannelActionPermission: PalletContentIterableEnumsChannelActionPermission;
+        PalletContentLimitPerPeriod: PalletContentLimitPerPeriod;
+        PalletContentNftCounter: PalletContentNftCounter;
+        PalletContentNftLimitPeriod: PalletContentNftLimitPeriod;
+        PalletContentNftTypesEnglishAuctionBid: PalletContentNftTypesEnglishAuctionBid;
+        PalletContentNftTypesEnglishAuctionParamsRecord: PalletContentNftTypesEnglishAuctionParamsRecord;
+        PalletContentNftTypesEnglishAuctionRecord: PalletContentNftTypesEnglishAuctionRecord;
+        PalletContentNftTypesInitTransactionalStatusRecord: PalletContentNftTypesInitTransactionalStatusRecord;
+        PalletContentNftTypesNftIssuanceParametersRecord: PalletContentNftTypesNftIssuanceParametersRecord;
+        PalletContentNftTypesNftOwner: PalletContentNftTypesNftOwner;
+        PalletContentNftTypesOpenAuctionBidRecord: PalletContentNftTypesOpenAuctionBidRecord;
+        PalletContentNftTypesOpenAuctionParamsRecord: PalletContentNftTypesOpenAuctionParamsRecord;
+        PalletContentNftTypesOpenAuctionRecord: PalletContentNftTypesOpenAuctionRecord;
+        PalletContentNftTypesOwnedNft: PalletContentNftTypesOwnedNft;
+        PalletContentNftTypesTransactionalStatusRecord: PalletContentNftTypesTransactionalStatusRecord;
+        PalletContentPendingTransfer: PalletContentPendingTransfer;
+        PalletContentPermissionsContentActor: PalletContentPermissionsContentActor;
+        PalletContentPermissionsCuratorGroupCuratorGroupRecord: PalletContentPermissionsCuratorGroupCuratorGroupRecord;
+        PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction;
+        PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature;
+        PalletContentPullPaymentElement: PalletContentPullPaymentElement;
+        PalletContentRawEvent: PalletContentRawEvent;
+        PalletContentStorageAssetsRecord: PalletContentStorageAssetsRecord;
+        PalletContentTransferCommitmentParametersBTreeMap: PalletContentTransferCommitmentParametersBTreeMap;
+        PalletContentTransferCommitmentParametersBoundedBTreeMap: PalletContentTransferCommitmentParametersBoundedBTreeMap;
+        PalletContentUpdateChannelPayoutsParametersRecord: PalletContentUpdateChannelPayoutsParametersRecord;
+        PalletContentVideoCreationParametersRecord: PalletContentVideoCreationParametersRecord;
+        PalletContentVideoRecord: PalletContentVideoRecord;
+        PalletContentVideoUpdateParametersRecord: PalletContentVideoUpdateParametersRecord;
+        PalletCouncilCall: PalletCouncilCall;
+        PalletCouncilCandidate: PalletCouncilCandidate;
+        PalletCouncilCouncilMember: PalletCouncilCouncilMember;
+        PalletCouncilCouncilStage: PalletCouncilCouncilStage;
+        PalletCouncilCouncilStageAnnouncing: PalletCouncilCouncilStageAnnouncing;
+        PalletCouncilCouncilStageElection: PalletCouncilCouncilStageElection;
+        PalletCouncilCouncilStageIdle: PalletCouncilCouncilStageIdle;
+        PalletCouncilCouncilStageUpdate: PalletCouncilCouncilStageUpdate;
+        PalletCouncilError: PalletCouncilError;
+        PalletCouncilRawEvent: PalletCouncilRawEvent;
+        PalletElectionProviderMultiPhaseCall: PalletElectionProviderMultiPhaseCall;
+        PalletElectionProviderMultiPhaseElectionCompute: PalletElectionProviderMultiPhaseElectionCompute;
+        PalletElectionProviderMultiPhaseError: PalletElectionProviderMultiPhaseError;
+        PalletElectionProviderMultiPhaseEvent: PalletElectionProviderMultiPhaseEvent;
+        PalletElectionProviderMultiPhasePhase: PalletElectionProviderMultiPhasePhase;
+        PalletElectionProviderMultiPhaseRawSolution: PalletElectionProviderMultiPhaseRawSolution;
+        PalletElectionProviderMultiPhaseReadySolution: PalletElectionProviderMultiPhaseReadySolution;
+        PalletElectionProviderMultiPhaseRoundSnapshot: PalletElectionProviderMultiPhaseRoundSnapshot;
+        PalletElectionProviderMultiPhaseSignedSignedSubmission: PalletElectionProviderMultiPhaseSignedSignedSubmission;
+        PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
+        PalletForumCall: PalletForumCall;
+        PalletForumCategory: PalletForumCategory;
+        PalletForumError: PalletForumError;
+        PalletForumExtendedPostIdObject: PalletForumExtendedPostIdObject;
+        PalletForumPost: PalletForumPost;
+        PalletForumPrivilegedActor: PalletForumPrivilegedActor;
+        PalletForumRawEvent: PalletForumRawEvent;
+        PalletForumThread: PalletForumThread;
+        PalletGrandpaCall: PalletGrandpaCall;
+        PalletGrandpaError: PalletGrandpaError;
+        PalletGrandpaEvent: PalletGrandpaEvent;
+        PalletGrandpaStoredPendingChange: PalletGrandpaStoredPendingChange;
+        PalletGrandpaStoredState: PalletGrandpaStoredState;
+        PalletImOnlineBoundedOpaqueNetworkState: PalletImOnlineBoundedOpaqueNetworkState;
+        PalletImOnlineCall: PalletImOnlineCall;
+        PalletImOnlineError: PalletImOnlineError;
+        PalletImOnlineEvent: PalletImOnlineEvent;
+        PalletImOnlineHeartbeat: PalletImOnlineHeartbeat;
+        PalletImOnlineSr25519AppSr25519Public: PalletImOnlineSr25519AppSr25519Public;
+        PalletImOnlineSr25519AppSr25519Signature: PalletImOnlineSr25519AppSr25519Signature;
+        PalletMembershipBuyMembershipParameters: PalletMembershipBuyMembershipParameters;
+        PalletMembershipCall: PalletMembershipCall;
+        PalletMembershipCreateMemberParameters: PalletMembershipCreateMemberParameters;
+        PalletMembershipError: PalletMembershipError;
+        PalletMembershipGiftMembershipParameters: PalletMembershipGiftMembershipParameters;
+        PalletMembershipInviteMembershipParameters: PalletMembershipInviteMembershipParameters;
+        PalletMembershipMembershipObject: PalletMembershipMembershipObject;
+        PalletMembershipRawEvent: PalletMembershipRawEvent;
+        PalletMembershipStakingAccountMemberBinding: PalletMembershipStakingAccountMemberBinding;
+        PalletMultisigCall: PalletMultisigCall;
+        PalletMultisigError: PalletMultisigError;
+        PalletMultisigEvent: PalletMultisigEvent;
+        PalletMultisigMultisig: PalletMultisigMultisig;
+        PalletMultisigTimepoint: PalletMultisigTimepoint;
+        PalletOffencesEvent: PalletOffencesEvent;
+        PalletProjectTokenAccountData: PalletProjectTokenAccountData;
+        PalletProjectTokenAmmCurve: PalletProjectTokenAmmCurve;
+        PalletProjectTokenAmmParams: PalletProjectTokenAmmParams;
+        PalletProjectTokenCall: PalletProjectTokenCall;
+        PalletProjectTokenErrorsError: PalletProjectTokenErrorsError;
+        PalletProjectTokenEventsRawEvent: PalletProjectTokenEventsRawEvent;
+        PalletProjectTokenMerkleProof: PalletProjectTokenMerkleProof;
+        PalletProjectTokenMerkleSide: PalletProjectTokenMerkleSide;
+        PalletProjectTokenPatronageData: PalletProjectTokenPatronageData;
+        PalletProjectTokenPaymentWithVesting: PalletProjectTokenPaymentWithVesting;
+        PalletProjectTokenRevenueSplitInfo: PalletProjectTokenRevenueSplitInfo;
+        PalletProjectTokenRevenueSplitState: PalletProjectTokenRevenueSplitState;
+        PalletProjectTokenSingleDataObjectUploadParams: PalletProjectTokenSingleDataObjectUploadParams;
+        PalletProjectTokenStakingStatus: PalletProjectTokenStakingStatus;
+        PalletProjectTokenTimeline: PalletProjectTokenTimeline;
+        PalletProjectTokenTokenAllocation: PalletProjectTokenTokenAllocation;
+        PalletProjectTokenTokenData: PalletProjectTokenTokenData;
+        PalletProjectTokenTokenIssuanceParameters: PalletProjectTokenTokenIssuanceParameters;
+        PalletProjectTokenTokenSale: PalletProjectTokenTokenSale;
+        PalletProjectTokenTokenSaleParams: PalletProjectTokenTokenSaleParams;
+        PalletProjectTokenTransferPolicy: PalletProjectTokenTransferPolicy;
+        PalletProjectTokenTransferPolicyParams: PalletProjectTokenTransferPolicyParams;
+        PalletProjectTokenTransfers: PalletProjectTokenTransfers;
+        PalletProjectTokenValidated: PalletProjectTokenValidated;
+        PalletProjectTokenValidatedPayment: PalletProjectTokenValidatedPayment;
+        PalletProjectTokenVestingSchedule: PalletProjectTokenVestingSchedule;
+        PalletProjectTokenVestingScheduleParams: PalletProjectTokenVestingScheduleParams;
+        PalletProjectTokenVestingSource: PalletProjectTokenVestingSource;
+        PalletProjectTokenWhitelistParams: PalletProjectTokenWhitelistParams;
+        PalletProposalsCodexCall: PalletProposalsCodexCall;
+        PalletProposalsCodexCreateOpeningParameters: PalletProposalsCodexCreateOpeningParameters;
+        PalletProposalsCodexError: PalletProposalsCodexError;
+        PalletProposalsCodexFillOpeningParameters: PalletProposalsCodexFillOpeningParameters;
+        PalletProposalsCodexGeneralProposalParams: PalletProposalsCodexGeneralProposalParams;
+        PalletProposalsCodexProposalDetails: PalletProposalsCodexProposalDetails;
+        PalletProposalsCodexRawEvent: PalletProposalsCodexRawEvent;
+        PalletProposalsCodexTerminateRoleParameters: PalletProposalsCodexTerminateRoleParameters;
+        PalletProposalsDiscussionCall: PalletProposalsDiscussionCall;
+        PalletProposalsDiscussionDiscussionPost: PalletProposalsDiscussionDiscussionPost;
+        PalletProposalsDiscussionDiscussionThread: PalletProposalsDiscussionDiscussionThread;
+        PalletProposalsDiscussionError: PalletProposalsDiscussionError;
+        PalletProposalsDiscussionRawEvent: PalletProposalsDiscussionRawEvent;
+        PalletProposalsDiscussionThreadModeBTreeSet: PalletProposalsDiscussionThreadModeBTreeSet;
+        PalletProposalsDiscussionThreadModeBoundedBTreeSet: PalletProposalsDiscussionThreadModeBoundedBTreeSet;
+        PalletProposalsEngineCall: PalletProposalsEngineCall;
+        PalletProposalsEngineError: PalletProposalsEngineError;
+        PalletProposalsEngineProposal: PalletProposalsEngineProposal;
+        PalletProposalsEngineProposalParameters: PalletProposalsEngineProposalParameters;
+        PalletProposalsEngineProposalStatusesApprovedProposalDecision: PalletProposalsEngineProposalStatusesApprovedProposalDecision;
+        PalletProposalsEngineProposalStatusesExecutionStatus: PalletProposalsEngineProposalStatusesExecutionStatus;
+        PalletProposalsEngineProposalStatusesProposalDecision: PalletProposalsEngineProposalStatusesProposalDecision;
+        PalletProposalsEngineProposalStatusesProposalStatus: PalletProposalsEngineProposalStatusesProposalStatus;
+        PalletProposalsEngineRawEvent: PalletProposalsEngineRawEvent;
+        PalletProposalsEngineVoteKind: PalletProposalsEngineVoteKind;
+        PalletProposalsEngineVotingResults: PalletProposalsEngineVotingResults;
+        PalletReferendumCall: PalletReferendumCall;
+        PalletReferendumCastVote: PalletReferendumCastVote;
+        PalletReferendumError: PalletReferendumError;
+        PalletReferendumInstance1: PalletReferendumInstance1;
+        PalletReferendumOptionResult: PalletReferendumOptionResult;
+        PalletReferendumRawEvent: PalletReferendumRawEvent;
+        PalletReferendumReferendumStage: PalletReferendumReferendumStage;
+        PalletReferendumReferendumStageRevealing: PalletReferendumReferendumStageRevealing;
+        PalletReferendumReferendumStageVoting: PalletReferendumReferendumStageVoting;
+        PalletSessionCall: PalletSessionCall;
+        PalletSessionError: PalletSessionError;
+        PalletSessionEvent: PalletSessionEvent;
+        PalletStakingActiveEraInfo: PalletStakingActiveEraInfo;
+        PalletStakingEraRewardPoints: PalletStakingEraRewardPoints;
+        PalletStakingExposure: PalletStakingExposure;
+        PalletStakingForcing: PalletStakingForcing;
+        PalletStakingIndividualExposure: PalletStakingIndividualExposure;
+        PalletStakingNominations: PalletStakingNominations;
+        PalletStakingPalletCall: PalletStakingPalletCall;
+        PalletStakingPalletConfigOpPerbill: PalletStakingPalletConfigOpPerbill;
+        PalletStakingPalletConfigOpPercent: PalletStakingPalletConfigOpPercent;
+        PalletStakingPalletConfigOpU128: PalletStakingPalletConfigOpU128;
+        PalletStakingPalletConfigOpU32: PalletStakingPalletConfigOpU32;
+        PalletStakingPalletError: PalletStakingPalletError;
+        PalletStakingPalletEvent: PalletStakingPalletEvent;
+        PalletStakingReleases: PalletStakingReleases;
+        PalletStakingRewardDestination: PalletStakingRewardDestination;
+        PalletStakingSlashingSlashingSpans: PalletStakingSlashingSlashingSpans;
+        PalletStakingSlashingSpanRecord: PalletStakingSlashingSpanRecord;
+        PalletStakingStakingLedger: PalletStakingStakingLedger;
+        PalletStakingUnappliedSlash: PalletStakingUnappliedSlash;
+        PalletStakingUnlockChunk: PalletStakingUnlockChunk;
+        PalletStakingValidatorPrefs: PalletStakingValidatorPrefs;
+        PalletStorageBagIdType: PalletStorageBagIdType;
+        PalletStorageBagRecord: PalletStorageBagRecord;
+        PalletStorageCall: PalletStorageCall;
+        PalletStorageDataObject: PalletStorageDataObject;
+        PalletStorageDataObjectCreationParameters: PalletStorageDataObjectCreationParameters;
+        PalletStorageDistributionBucketFamilyRecord: PalletStorageDistributionBucketFamilyRecord;
+        PalletStorageDistributionBucketIdRecord: PalletStorageDistributionBucketIdRecord;
+        PalletStorageDistributionBucketRecord: PalletStorageDistributionBucketRecord;
+        PalletStorageDynBagCreationParametersRecord: PalletStorageDynBagCreationParametersRecord;
+        PalletStorageDynamicBagCreationPolicy: PalletStorageDynamicBagCreationPolicy;
+        PalletStorageDynamicBagIdType: PalletStorageDynamicBagIdType;
+        PalletStorageDynamicBagType: PalletStorageDynamicBagType;
+        PalletStorageError: PalletStorageError;
+        PalletStorageRawEvent: PalletStorageRawEvent;
+        PalletStorageStaticBagId: PalletStorageStaticBagId;
+        PalletStorageStorageBucketOperatorStatus: PalletStorageStorageBucketOperatorStatus;
+        PalletStorageStorageBucketRecord: PalletStorageStorageBucketRecord;
+        PalletStorageUploadParametersRecord: PalletStorageUploadParametersRecord;
+        PalletStorageVoucher: PalletStorageVoucher;
+        PalletTimestampCall: PalletTimestampCall;
+        PalletTransactionPaymentChargeTransactionPayment: PalletTransactionPaymentChargeTransactionPayment;
+        PalletTransactionPaymentReleases: PalletTransactionPaymentReleases;
+        PalletUtilityCall: PalletUtilityCall;
+        PalletUtilityError: PalletUtilityError;
+        PalletUtilityEvent: PalletUtilityEvent;
+        PalletUtilityRawEvent: PalletUtilityRawEvent;
+        PalletVestingCall: PalletVestingCall;
+        PalletVestingError: PalletVestingError;
+        PalletVestingEvent: PalletVestingEvent;
+        PalletVestingReleases: PalletVestingReleases;
+        PalletVestingVestingInfo: PalletVestingVestingInfo;
+        PalletWorkingGroupApplyOnOpeningParams: PalletWorkingGroupApplyOnOpeningParams;
+        PalletWorkingGroupCall: PalletWorkingGroupCall;
+        PalletWorkingGroupErrorsError: PalletWorkingGroupErrorsError;
+        PalletWorkingGroupGroupWorker: PalletWorkingGroupGroupWorker;
+        PalletWorkingGroupInstance1: PalletWorkingGroupInstance1;
+        PalletWorkingGroupInstance2: PalletWorkingGroupInstance2;
+        PalletWorkingGroupInstance3: PalletWorkingGroupInstance3;
+        PalletWorkingGroupInstance4: PalletWorkingGroupInstance4;
+        PalletWorkingGroupInstance5: PalletWorkingGroupInstance5;
+        PalletWorkingGroupInstance6: PalletWorkingGroupInstance6;
+        PalletWorkingGroupInstance7: PalletWorkingGroupInstance7;
+        PalletWorkingGroupInstance8: PalletWorkingGroupInstance8;
+        PalletWorkingGroupInstance9: PalletWorkingGroupInstance9;
+        PalletWorkingGroupJobApplication: PalletWorkingGroupJobApplication;
+        PalletWorkingGroupOpening: PalletWorkingGroupOpening;
+        PalletWorkingGroupOpeningType: PalletWorkingGroupOpeningType;
+        PalletWorkingGroupRawEventInstance1: PalletWorkingGroupRawEventInstance1;
+        PalletWorkingGroupRawEventInstance2: PalletWorkingGroupRawEventInstance2;
+        PalletWorkingGroupRawEventInstance3: PalletWorkingGroupRawEventInstance3;
+        PalletWorkingGroupRawEventInstance4: PalletWorkingGroupRawEventInstance4;
+        PalletWorkingGroupRawEventInstance5: PalletWorkingGroupRawEventInstance5;
+        PalletWorkingGroupRawEventInstance6: PalletWorkingGroupRawEventInstance6;
+        PalletWorkingGroupRawEventInstance7: PalletWorkingGroupRawEventInstance7;
+        PalletWorkingGroupRawEventInstance8: PalletWorkingGroupRawEventInstance8;
+        PalletWorkingGroupRawEventInstance9: PalletWorkingGroupRawEventInstance9;
+        PalletWorkingGroupRewardPaymentType: PalletWorkingGroupRewardPaymentType;
+        PalletWorkingGroupStakeParameters: PalletWorkingGroupStakeParameters;
+        PalletWorkingGroupStakePolicy: PalletWorkingGroupStakePolicy;
+        SpAuthorityDiscoveryAppPublic: SpAuthorityDiscoveryAppPublic;
+        SpConsensusBabeAllowedSlots: SpConsensusBabeAllowedSlots;
+        SpConsensusBabeAppPublic: SpConsensusBabeAppPublic;
+        SpConsensusBabeBabeEpochConfiguration: SpConsensusBabeBabeEpochConfiguration;
+        SpConsensusBabeDigestsNextConfigDescriptor: SpConsensusBabeDigestsNextConfigDescriptor;
+        SpConsensusBabeDigestsPreDigest: SpConsensusBabeDigestsPreDigest;
+        SpConsensusBabeDigestsPrimaryPreDigest: SpConsensusBabeDigestsPrimaryPreDigest;
+        SpConsensusBabeDigestsSecondaryPlainPreDigest: SpConsensusBabeDigestsSecondaryPlainPreDigest;
+        SpConsensusBabeDigestsSecondaryVRFPreDigest: SpConsensusBabeDigestsSecondaryVRFPreDigest;
+        SpConsensusSlotsEquivocationProof: SpConsensusSlotsEquivocationProof;
+        SpCoreCryptoKeyTypeId: SpCoreCryptoKeyTypeId;
+        SpCoreEcdsaSignature: SpCoreEcdsaSignature;
+        SpCoreEd25519Public: SpCoreEd25519Public;
+        SpCoreEd25519Signature: SpCoreEd25519Signature;
+        SpCoreOffchainOpaqueNetworkState: SpCoreOffchainOpaqueNetworkState;
+        SpCoreSr25519Public: SpCoreSr25519Public;
+        SpCoreSr25519Signature: SpCoreSr25519Signature;
+        SpCoreVoid: SpCoreVoid;
+        SpFinalityGrandpaAppPublic: SpFinalityGrandpaAppPublic;
+        SpFinalityGrandpaAppSignature: SpFinalityGrandpaAppSignature;
+        SpFinalityGrandpaEquivocation: SpFinalityGrandpaEquivocation;
+        SpFinalityGrandpaEquivocationProof: SpFinalityGrandpaEquivocationProof;
+        SpNposElectionsElectionScore: SpNposElectionsElectionScore;
+        SpNposElectionsSupport: SpNposElectionsSupport;
+        SpRuntimeArithmeticError: SpRuntimeArithmeticError;
+        SpRuntimeBlakeTwo256: SpRuntimeBlakeTwo256;
+        SpRuntimeDigest: SpRuntimeDigest;
+        SpRuntimeDigestDigestItem: SpRuntimeDigestDigestItem;
+        SpRuntimeDispatchError: SpRuntimeDispatchError;
+        SpRuntimeHeader: SpRuntimeHeader;
+        SpRuntimeModuleError: SpRuntimeModuleError;
+        SpRuntimeMultiSignature: SpRuntimeMultiSignature;
+        SpRuntimeTokenError: SpRuntimeTokenError;
+        SpRuntimeTransactionalError: SpRuntimeTransactionalError;
+        SpSessionMembershipProof: SpSessionMembershipProof;
+        SpStakingOffenceOffenceDetails: SpStakingOffenceOffenceDetails;
+        SpVersionRuntimeVersion: SpVersionRuntimeVersion;
+    }
+}
diff --git a/node_modules/@joystream/types/types/lib/augment/types-lookup.d.ts b/node_modules/@joystream/types/types/lib/augment/types-lookup.d.ts
new file mode 100644
index 0000000..2b243b0
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/augment/types-lookup.d.ts
@@ -0,0 +1,5331 @@
+declare module '@polkadot/types/lookup' {
+    import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+    import type { ITuple } from '@polkadot/types-codec/types';
+    import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+    import type { Event } from '@polkadot/types/interfaces/system';
+    /** @name FrameSystemAccountInfo (3) */
+    interface FrameSystemAccountInfo extends Struct {
+        readonly nonce: u32;
+        readonly consumers: u32;
+        readonly providers: u32;
+        readonly sufficients: u32;
+        readonly data: PalletBalancesAccountData;
+    }
+    /** @name PalletBalancesAccountData (5) */
+    interface PalletBalancesAccountData extends Struct {
+        readonly free: u128;
+        readonly reserved: u128;
+        readonly miscFrozen: u128;
+        readonly feeFrozen: u128;
+    }
+    /** @name FrameSupportWeightsPerDispatchClassU64 (7) */
+    interface FrameSupportWeightsPerDispatchClassU64 extends Struct {
+        readonly normal: u64;
+        readonly operational: u64;
+        readonly mandatory: u64;
+    }
+    /** @name SpRuntimeDigest (11) */
+    interface SpRuntimeDigest extends Struct {
+        readonly logs: Vec<SpRuntimeDigestDigestItem>;
+    }
+    /** @name SpRuntimeDigestDigestItem (13) */
+    interface SpRuntimeDigestDigestItem extends Enum {
+        readonly isOther: boolean;
+        readonly asOther: Bytes;
+        readonly isConsensus: boolean;
+        readonly asConsensus: ITuple<[U8aFixed, Bytes]>;
+        readonly isSeal: boolean;
+        readonly asSeal: ITuple<[U8aFixed, Bytes]>;
+        readonly isPreRuntime: boolean;
+        readonly asPreRuntime: ITuple<[U8aFixed, Bytes]>;
+        readonly isRuntimeEnvironmentUpdated: boolean;
+        readonly type: 'Other' | 'Consensus' | 'Seal' | 'PreRuntime' | 'RuntimeEnvironmentUpdated';
+    }
+    /** @name FrameSystemEventRecord (16) */
+    interface FrameSystemEventRecord extends Struct {
+        readonly phase: FrameSystemPhase;
+        readonly event: Event;
+        readonly topics: Vec<H256>;
+    }
+    /** @name FrameSystemEvent (18) */
+    interface FrameSystemEvent extends Enum {
+        readonly isExtrinsicSuccess: boolean;
+        readonly asExtrinsicSuccess: {
+            readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
+        } & Struct;
+        readonly isExtrinsicFailed: boolean;
+        readonly asExtrinsicFailed: {
+            readonly dispatchError: SpRuntimeDispatchError;
+            readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
+        } & Struct;
+        readonly isCodeUpdated: boolean;
+        readonly isNewAccount: boolean;
+        readonly asNewAccount: {
+            readonly account: AccountId32;
+        } & Struct;
+        readonly isKilledAccount: boolean;
+        readonly asKilledAccount: {
+            readonly account: AccountId32;
+        } & Struct;
+        readonly isRemarked: boolean;
+        readonly asRemarked: {
+            readonly sender: AccountId32;
+            readonly hash_: H256;
+        } & Struct;
+        readonly type: 'ExtrinsicSuccess' | 'ExtrinsicFailed' | 'CodeUpdated' | 'NewAccount' | 'KilledAccount' | 'Remarked';
+    }
+    /** @name FrameSupportWeightsDispatchInfo (19) */
+    interface FrameSupportWeightsDispatchInfo extends Struct {
+        readonly weight: u64;
+        readonly class: FrameSupportWeightsDispatchClass;
+        readonly paysFee: FrameSupportWeightsPays;
+    }
+    /** @name FrameSupportWeightsDispatchClass (20) */
+    interface FrameSupportWeightsDispatchClass extends Enum {
+        readonly isNormal: boolean;
+        readonly isOperational: boolean;
+        readonly isMandatory: boolean;
+        readonly type: 'Normal' | 'Operational' | 'Mandatory';
+    }
+    /** @name FrameSupportWeightsPays (21) */
+    interface FrameSupportWeightsPays extends Enum {
+        readonly isYes: boolean;
+        readonly isNo: boolean;
+        readonly type: 'Yes' | 'No';
+    }
+    /** @name SpRuntimeDispatchError (22) */
+    interface SpRuntimeDispatchError extends Enum {
+        readonly isOther: boolean;
+        readonly isCannotLookup: boolean;
+        readonly isBadOrigin: boolean;
+        readonly isModule: boolean;
+        readonly asModule: SpRuntimeModuleError;
+        readonly isConsumerRemaining: boolean;
+        readonly isNoProviders: boolean;
+        readonly isTooManyConsumers: boolean;
+        readonly isToken: boolean;
+        readonly asToken: SpRuntimeTokenError;
+        readonly isArithmetic: boolean;
+        readonly asArithmetic: SpRuntimeArithmeticError;
+        readonly isTransactional: boolean;
+        readonly asTransactional: SpRuntimeTransactionalError;
+        readonly type: 'Other' | 'CannotLookup' | 'BadOrigin' | 'Module' | 'ConsumerRemaining' | 'NoProviders' | 'TooManyConsumers' | 'Token' | 'Arithmetic' | 'Transactional';
+    }
+    /** @name SpRuntimeModuleError (23) */
+    interface SpRuntimeModuleError extends Struct {
+        readonly index: u8;
+        readonly error: U8aFixed;
+    }
+    /** @name SpRuntimeTokenError (24) */
+    interface SpRuntimeTokenError extends Enum {
+        readonly isNoFunds: boolean;
+        readonly isWouldDie: boolean;
+        readonly isBelowMinimum: boolean;
+        readonly isCannotCreate: boolean;
+        readonly isUnknownAsset: boolean;
+        readonly isFrozen: boolean;
+        readonly isUnsupported: boolean;
+        readonly type: 'NoFunds' | 'WouldDie' | 'BelowMinimum' | 'CannotCreate' | 'UnknownAsset' | 'Frozen' | 'Unsupported';
+    }
+    /** @name SpRuntimeArithmeticError (25) */
+    interface SpRuntimeArithmeticError extends Enum {
+        readonly isUnderflow: boolean;
+        readonly isOverflow: boolean;
+        readonly isDivisionByZero: boolean;
+        readonly type: 'Underflow' | 'Overflow' | 'DivisionByZero';
+    }
+    /** @name SpRuntimeTransactionalError (26) */
+    interface SpRuntimeTransactionalError extends Enum {
+        readonly isLimitReached: boolean;
+        readonly isNoLayer: boolean;
+        readonly type: 'LimitReached' | 'NoLayer';
+    }
+    /** @name PalletUtilityEvent (27) */
+    interface PalletUtilityEvent extends Enum {
+        readonly isBatchInterrupted: boolean;
+        readonly asBatchInterrupted: {
+            readonly index: u32;
+            readonly error: SpRuntimeDispatchError;
+        } & Struct;
+        readonly isBatchCompleted: boolean;
+        readonly isBatchCompletedWithErrors: boolean;
+        readonly isItemCompleted: boolean;
+        readonly isItemFailed: boolean;
+        readonly asItemFailed: {
+            readonly error: SpRuntimeDispatchError;
+        } & Struct;
+        readonly isDispatchedAs: boolean;
+        readonly asDispatchedAs: {
+            readonly result: Result<Null, SpRuntimeDispatchError>;
+        } & Struct;
+        readonly type: 'BatchInterrupted' | 'BatchCompleted' | 'BatchCompletedWithErrors' | 'ItemCompleted' | 'ItemFailed' | 'DispatchedAs';
+    }
+    /** @name PalletBalancesEvent (30) */
+    interface PalletBalancesEvent extends Enum {
+        readonly isEndowed: boolean;
+        readonly asEndowed: {
+            readonly account: AccountId32;
+            readonly freeBalance: u128;
+        } & Struct;
+        readonly isDustLost: boolean;
+        readonly asDustLost: {
+            readonly account: AccountId32;
+            readonly amount: u128;
+        } & Struct;
+        readonly isTransfer: boolean;
+        readonly asTransfer: {
+            readonly from: AccountId32;
+            readonly to: AccountId32;
+            readonly amount: u128;
+        } & Struct;
+        readonly isBalanceSet: boolean;
+        readonly asBalanceSet: {
+            readonly who: AccountId32;
+            readonly free: u128;
+            readonly reserved: u128;
+        } & Struct;
+        readonly isReserved: boolean;
+        readonly asReserved: {
+            readonly who: AccountId32;
+            readonly amount: u128;
+        } & Struct;
+        readonly isUnreserved: boolean;
+        readonly asUnreserved: {
+            readonly who: AccountId32;
+            readonly amount: u128;
+        } & Struct;
+        readonly isReserveRepatriated: boolean;
+        readonly asReserveRepatriated: {
+            readonly from: AccountId32;
+            readonly to: AccountId32;
+            readonly amount: u128;
+            readonly destinationStatus: FrameSupportTokensMiscBalanceStatus;
+        } & Struct;
+        readonly isDeposit: boolean;
+        readonly asDeposit: {
+            readonly who: AccountId32;
+            readonly amount: u128;
+        } & Struct;
+        readonly isWithdraw: boolean;
+        readonly asWithdraw: {
+            readonly who: AccountId32;
+            readonly amount: u128;
+        } & Struct;
+        readonly isSlashed: boolean;
+        readonly asSlashed: {
+            readonly who: AccountId32;
+            readonly amount: u128;
+        } & Struct;
+        readonly type: 'Endowed' | 'DustLost' | 'Transfer' | 'BalanceSet' | 'Reserved' | 'Unreserved' | 'ReserveRepatriated' | 'Deposit' | 'Withdraw' | 'Slashed';
+    }
+    /** @name FrameSupportTokensMiscBalanceStatus (31) */
+    interface FrameSupportTokensMiscBalanceStatus extends Enum {
+        readonly isFree: boolean;
+        readonly isReserved: boolean;
+        readonly type: 'Free' | 'Reserved';
+    }
+    /** @name PalletElectionProviderMultiPhaseEvent (32) */
+    interface PalletElectionProviderMultiPhaseEvent extends Enum {
+        readonly isSolutionStored: boolean;
+        readonly asSolutionStored: {
+            readonly electionCompute: PalletElectionProviderMultiPhaseElectionCompute;
+            readonly prevEjected: bool;
+        } & Struct;
+        readonly isElectionFinalized: boolean;
+        readonly asElectionFinalized: {
+            readonly electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>;
+        } & Struct;
+        readonly isRewarded: boolean;
+        readonly asRewarded: {
+            readonly account: AccountId32;
+            readonly value: u128;
+        } & Struct;
+        readonly isSlashed: boolean;
+        readonly asSlashed: {
+            readonly account: AccountId32;
+            readonly value: u128;
+        } & Struct;
+        readonly isSignedPhaseStarted: boolean;
+        readonly asSignedPhaseStarted: {
+            readonly round: u32;
+        } & Struct;
+        readonly isUnsignedPhaseStarted: boolean;
+        readonly asUnsignedPhaseStarted: {
+            readonly round: u32;
+        } & Struct;
+        readonly type: 'SolutionStored' | 'ElectionFinalized' | 'Rewarded' | 'Slashed' | 'SignedPhaseStarted' | 'UnsignedPhaseStarted';
+    }
+    /** @name PalletElectionProviderMultiPhaseElectionCompute (33) */
+    interface PalletElectionProviderMultiPhaseElectionCompute extends Enum {
+        readonly isOnChain: boolean;
+        readonly isSigned: boolean;
+        readonly isUnsigned: boolean;
+        readonly isFallback: boolean;
+        readonly isEmergency: boolean;
+        readonly type: 'OnChain' | 'Signed' | 'Unsigned' | 'Fallback' | 'Emergency';
+    }
+    /** @name PalletStakingPalletEvent (36) */
+    interface PalletStakingPalletEvent extends Enum {
+        readonly isEraPaid: boolean;
+        readonly asEraPaid: ITuple<[u32, u128, u128]>;
+        readonly isRewarded: boolean;
+        readonly asRewarded: ITuple<[AccountId32, u128]>;
+        readonly isSlashed: boolean;
+        readonly asSlashed: ITuple<[AccountId32, u128]>;
+        readonly isOldSlashingReportDiscarded: boolean;
+        readonly asOldSlashingReportDiscarded: u32;
+        readonly isStakersElected: boolean;
+        readonly isBonded: boolean;
+        readonly asBonded: ITuple<[AccountId32, u128]>;
+        readonly isUnbonded: boolean;
+        readonly asUnbonded: ITuple<[AccountId32, u128]>;
+        readonly isWithdrawn: boolean;
+        readonly asWithdrawn: ITuple<[AccountId32, u128]>;
+        readonly isKicked: boolean;
+        readonly asKicked: ITuple<[AccountId32, AccountId32]>;
+        readonly isStakingElectionFailed: boolean;
+        readonly isChilled: boolean;
+        readonly asChilled: AccountId32;
+        readonly isPayoutStarted: boolean;
+        readonly asPayoutStarted: ITuple<[u32, AccountId32]>;
+        readonly isValidatorPrefsSet: boolean;
+        readonly asValidatorPrefsSet: ITuple<[AccountId32, PalletStakingValidatorPrefs]>;
+        readonly type: 'EraPaid' | 'Rewarded' | 'Slashed' | 'OldSlashingReportDiscarded' | 'StakersElected' | 'Bonded' | 'Unbonded' | 'Withdrawn' | 'Kicked' | 'StakingElectionFailed' | 'Chilled' | 'PayoutStarted' | 'ValidatorPrefsSet';
+    }
+    /** @name PalletStakingValidatorPrefs (37) */
+    interface PalletStakingValidatorPrefs extends Struct {
+        readonly commission: Compact<Perbill>;
+        readonly blocked: bool;
+    }
+    /** @name PalletSessionEvent (40) */
+    interface PalletSessionEvent extends Enum {
+        readonly isNewSession: boolean;
+        readonly asNewSession: {
+            readonly sessionIndex: u32;
+        } & Struct;
+        readonly type: 'NewSession';
+    }
+    /** @name PalletGrandpaEvent (41) */
+    interface PalletGrandpaEvent extends Enum {
+        readonly isNewAuthorities: boolean;
+        readonly asNewAuthorities: {
+            readonly authoritySet: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
+        } & Struct;
+        readonly isPaused: boolean;
+        readonly isResumed: boolean;
+        readonly type: 'NewAuthorities' | 'Paused' | 'Resumed';
+    }
+    /** @name SpFinalityGrandpaAppPublic (44) */
+    interface SpFinalityGrandpaAppPublic extends SpCoreEd25519Public {
+    }
+    /** @name SpCoreEd25519Public (45) */
+    interface SpCoreEd25519Public extends U8aFixed {
+    }
+    /** @name PalletImOnlineEvent (46) */
+    interface PalletImOnlineEvent extends Enum {
+        readonly isHeartbeatReceived: boolean;
+        readonly asHeartbeatReceived: {
+            readonly authorityId: PalletImOnlineSr25519AppSr25519Public;
+        } & Struct;
+        readonly isAllGood: boolean;
+        readonly isSomeOffline: boolean;
+        readonly asSomeOffline: {
+            readonly offline: Vec<ITuple<[AccountId32, PalletStakingExposure]>>;
+        } & Struct;
+        readonly type: 'HeartbeatReceived' | 'AllGood' | 'SomeOffline';
+    }
+    /** @name PalletImOnlineSr25519AppSr25519Public (47) */
+    interface PalletImOnlineSr25519AppSr25519Public extends SpCoreSr25519Public {
+    }
+    /** @name SpCoreSr25519Public (48) */
+    interface SpCoreSr25519Public extends U8aFixed {
+    }
+    /** @name PalletStakingExposure (51) */
+    interface PalletStakingExposure extends Struct {
+        readonly total: Compact<u128>;
+        readonly own: Compact<u128>;
+        readonly others: Vec<PalletStakingIndividualExposure>;
+    }
+    /** @name PalletStakingIndividualExposure (54) */
+    interface PalletStakingIndividualExposure extends Struct {
+        readonly who: AccountId32;
+        readonly value: Compact<u128>;
+    }
+    /** @name PalletOffencesEvent (55) */
+    interface PalletOffencesEvent extends Enum {
+        readonly isOffence: boolean;
+        readonly asOffence: {
+            readonly kind: U8aFixed;
+            readonly timeslot: Bytes;
+        } & Struct;
+        readonly type: 'Offence';
+    }
+    /** @name PalletBagsListEvent (57) */
+    interface PalletBagsListEvent extends Enum {
+        readonly isRebagged: boolean;
+        readonly asRebagged: {
+            readonly who: AccountId32;
+            readonly from: u64;
+            readonly to: u64;
+        } & Struct;
+        readonly isScoreUpdated: boolean;
+        readonly asScoreUpdated: {
+            readonly who: AccountId32;
+            readonly newScore: u64;
+        } & Struct;
+        readonly type: 'Rebagged' | 'ScoreUpdated';
+    }
+    /** @name PalletVestingEvent (58) */
+    interface PalletVestingEvent extends Enum {
+        readonly isVestingUpdated: boolean;
+        readonly asVestingUpdated: {
+            readonly account: AccountId32;
+            readonly unvested: u128;
+        } & Struct;
+        readonly isVestingCompleted: boolean;
+        readonly asVestingCompleted: {
+            readonly account: AccountId32;
+        } & Struct;
+        readonly type: 'VestingUpdated' | 'VestingCompleted';
+    }
+    /** @name PalletMultisigEvent (59) */
+    interface PalletMultisigEvent extends Enum {
+        readonly isNewMultisig: boolean;
+        readonly asNewMultisig: {
+            readonly approving: AccountId32;
+            readonly multisig: AccountId32;
+            readonly callHash: U8aFixed;
+        } & Struct;
+        readonly isMultisigApproval: boolean;
+        readonly asMultisigApproval: {
+            readonly approving: AccountId32;
+            readonly timepoint: PalletMultisigTimepoint;
+            readonly multisig: AccountId32;
+            readonly callHash: U8aFixed;
+        } & Struct;
+        readonly isMultisigExecuted: boolean;
+        readonly asMultisigExecuted: {
+            readonly approving: AccountId32;
+            readonly timepoint: PalletMultisigTimepoint;
+            readonly multisig: AccountId32;
+            readonly callHash: U8aFixed;
+            readonly result: Result<Null, SpRuntimeDispatchError>;
+        } & Struct;
+        readonly isMultisigCancelled: boolean;
+        readonly asMultisigCancelled: {
+            readonly cancelling: AccountId32;
+            readonly timepoint: PalletMultisigTimepoint;
+            readonly multisig: AccountId32;
+            readonly callHash: U8aFixed;
+        } & Struct;
+        readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
+    }
+    /** @name PalletMultisigTimepoint (60) */
+    interface PalletMultisigTimepoint extends Struct {
+        readonly height: u32;
+        readonly index: u32;
+    }
+    /** @name PalletCouncilRawEvent (61) */
+    interface PalletCouncilRawEvent extends Enum {
+        readonly isAnnouncingPeriodStarted: boolean;
+        readonly asAnnouncingPeriodStarted: u32;
+        readonly isNotEnoughCandidates: boolean;
+        readonly asNotEnoughCandidates: u32;
+        readonly isVotingPeriodStarted: boolean;
+        readonly asVotingPeriodStarted: u32;
+        readonly isNewCandidate: boolean;
+        readonly asNewCandidate: ITuple<[u64, AccountId32, AccountId32, u128]>;
+        readonly isNewCouncilElected: boolean;
+        readonly asNewCouncilElected: ITuple<[Vec<u64>, u32]>;
+        readonly isNewCouncilNotElected: boolean;
+        readonly asNewCouncilNotElected: u32;
+        readonly isCandidacyStakeRelease: boolean;
+        readonly asCandidacyStakeRelease: u64;
+        readonly isCandidacyWithdraw: boolean;
+        readonly asCandidacyWithdraw: u64;
+        readonly isCandidacyNoteSet: boolean;
+        readonly asCandidacyNoteSet: ITuple<[u64, Bytes]>;
+        readonly isRewardPayment: boolean;
+        readonly asRewardPayment: ITuple<[u64, AccountId32, u128, u128]>;
+        readonly isBudgetBalanceSet: boolean;
+        readonly asBudgetBalanceSet: u128;
+        readonly isBudgetRefill: boolean;
+        readonly asBudgetRefill: u128;
+        readonly isBudgetRefillPlanned: boolean;
+        readonly asBudgetRefillPlanned: u32;
+        readonly isBudgetIncrementUpdated: boolean;
+        readonly asBudgetIncrementUpdated: u128;
+        readonly isCouncilorRewardUpdated: boolean;
+        readonly asCouncilorRewardUpdated: u128;
+        readonly isRequestFunded: boolean;
+        readonly asRequestFunded: ITuple<[AccountId32, u128]>;
+        readonly isCouncilBudgetFunded: boolean;
+        readonly asCouncilBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isCouncilorRemarked: boolean;
+        readonly asCouncilorRemarked: ITuple<[u64, Bytes]>;
+        readonly isCandidateRemarked: boolean;
+        readonly asCandidateRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'AnnouncingPeriodStarted' | 'NotEnoughCandidates' | 'VotingPeriodStarted' | 'NewCandidate' | 'NewCouncilElected' | 'NewCouncilNotElected' | 'CandidacyStakeRelease' | 'CandidacyWithdraw' | 'CandidacyNoteSet' | 'RewardPayment' | 'BudgetBalanceSet' | 'BudgetRefill' | 'BudgetRefillPlanned' | 'BudgetIncrementUpdated' | 'CouncilorRewardUpdated' | 'RequestFunded' | 'CouncilBudgetFunded' | 'CouncilorRemarked' | 'CandidateRemarked';
+    }
+    /** @name PalletReferendumRawEvent (63) */
+    interface PalletReferendumRawEvent extends Enum {
+        readonly isReferendumStarted: boolean;
+        readonly asReferendumStarted: ITuple<[u32, u32]>;
+        readonly isReferendumStartedForcefully: boolean;
+        readonly asReferendumStartedForcefully: ITuple<[u32, u32]>;
+        readonly isRevealingStageStarted: boolean;
+        readonly asRevealingStageStarted: u32;
+        readonly isReferendumFinished: boolean;
+        readonly asReferendumFinished: Vec<PalletReferendumOptionResult>;
+        readonly isVoteCast: boolean;
+        readonly asVoteCast: ITuple<[AccountId32, H256, u128]>;
+        readonly isVoteRevealed: boolean;
+        readonly asVoteRevealed: ITuple<[AccountId32, u64, Bytes]>;
+        readonly isStakeReleased: boolean;
+        readonly asStakeReleased: AccountId32;
+        readonly isAccountOptedOutOfVoting: boolean;
+        readonly asAccountOptedOutOfVoting: AccountId32;
+        readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased' | 'AccountOptedOutOfVoting';
+    }
+    /** @name PalletReferendumInstance1 (64) */
+    type PalletReferendumInstance1 = Null;
+    /** @name PalletReferendumOptionResult (66) */
+    interface PalletReferendumOptionResult extends Struct {
+        readonly optionId: u64;
+        readonly votePower: u128;
+    }
+    /** @name PalletMembershipRawEvent (67) */
+    interface PalletMembershipRawEvent extends Enum {
+        readonly isMemberInvited: boolean;
+        readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters, u128]>;
+        readonly isMembershipGifted: boolean;
+        readonly asMembershipGifted: ITuple<[u64, PalletMembershipGiftMembershipParameters]>;
+        readonly isMembershipBought: boolean;
+        readonly asMembershipBought: ITuple<[u64, PalletMembershipBuyMembershipParameters, u32]>;
+        readonly isMemberProfileUpdated: boolean;
+        readonly asMemberProfileUpdated: ITuple<[u64, Option<Bytes>, Option<Bytes>]>;
+        readonly isMemberAccountsUpdated: boolean;
+        readonly asMemberAccountsUpdated: ITuple<[u64, Option<AccountId32>, Option<AccountId32>]>;
+        readonly isMemberVerificationStatusUpdated: boolean;
+        readonly asMemberVerificationStatusUpdated: ITuple<[u64, bool, u64]>;
+        readonly isReferralCutUpdated: boolean;
+        readonly asReferralCutUpdated: u8;
+        readonly isInvitesTransferred: boolean;
+        readonly asInvitesTransferred: ITuple<[u64, u64, u32]>;
+        readonly isMembershipPriceUpdated: boolean;
+        readonly asMembershipPriceUpdated: u128;
+        readonly isInitialInvitationBalanceUpdated: boolean;
+        readonly asInitialInvitationBalanceUpdated: u128;
+        readonly isLeaderInvitationQuotaUpdated: boolean;
+        readonly asLeaderInvitationQuotaUpdated: u32;
+        readonly isInitialInvitationCountUpdated: boolean;
+        readonly asInitialInvitationCountUpdated: u32;
+        readonly isStakingAccountAdded: boolean;
+        readonly asStakingAccountAdded: ITuple<[AccountId32, u64]>;
+        readonly isStakingAccountRemoved: boolean;
+        readonly asStakingAccountRemoved: ITuple<[AccountId32, u64]>;
+        readonly isStakingAccountConfirmed: boolean;
+        readonly asStakingAccountConfirmed: ITuple<[AccountId32, u64]>;
+        readonly isMemberRemarked: boolean;
+        readonly asMemberRemarked: ITuple<[u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
+        readonly isMemberCreated: boolean;
+        readonly asMemberCreated: ITuple<[u64, PalletMembershipCreateMemberParameters, u32]>;
+        readonly type: 'MemberInvited' | 'MembershipGifted' | 'MembershipBought' | 'MemberProfileUpdated' | 'MemberAccountsUpdated' | 'MemberVerificationStatusUpdated' | 'ReferralCutUpdated' | 'InvitesTransferred' | 'MembershipPriceUpdated' | 'InitialInvitationBalanceUpdated' | 'LeaderInvitationQuotaUpdated' | 'InitialInvitationCountUpdated' | 'StakingAccountAdded' | 'StakingAccountRemoved' | 'StakingAccountConfirmed' | 'MemberRemarked' | 'MemberCreated';
+    }
+    /** @name PalletMembershipBuyMembershipParameters (68) */
+    interface PalletMembershipBuyMembershipParameters extends Struct {
+        readonly rootAccount: AccountId32;
+        readonly controllerAccount: AccountId32;
+        readonly handle: Option<Bytes>;
+        readonly metadata: Bytes;
+        readonly referrerId: Option<u64>;
+    }
+    /** @name PalletMembershipInviteMembershipParameters (71) */
+    interface PalletMembershipInviteMembershipParameters extends Struct {
+        readonly invitingMemberId: u64;
+        readonly rootAccount: AccountId32;
+        readonly controllerAccount: AccountId32;
+        readonly handle: Option<Bytes>;
+        readonly metadata: Bytes;
+    }
+    /** @name PalletMembershipCreateMemberParameters (72) */
+    interface PalletMembershipCreateMemberParameters extends Struct {
+        readonly rootAccount: AccountId32;
+        readonly controllerAccount: AccountId32;
+        readonly handle: Bytes;
+        readonly metadata: Bytes;
+        readonly isFoundingMember: bool;
+    }
+    /** @name PalletMembershipGiftMembershipParameters (73) */
+    interface PalletMembershipGiftMembershipParameters extends Struct {
+        readonly rootAccount: AccountId32;
+        readonly controllerAccount: AccountId32;
+        readonly handle: Option<Bytes>;
+        readonly metadata: Bytes;
+        readonly creditControllerAccount: u128;
+        readonly applyControllerAccountInvitationLock: Option<u128>;
+        readonly creditRootAccount: u128;
+        readonly applyRootAccountInvitationLock: Option<u128>;
+    }
+    /** @name PalletForumRawEvent (78) */
+    interface PalletForumRawEvent extends Enum {
+        readonly isCategoryCreated: boolean;
+        readonly asCategoryCreated: ITuple<[u64, Option<u64>, Bytes, Bytes]>;
+        readonly isCategoryArchivalStatusUpdated: boolean;
+        readonly asCategoryArchivalStatusUpdated: ITuple<[u64, bool, PalletForumPrivilegedActor]>;
+        readonly isCategoryTitleUpdated: boolean;
+        readonly asCategoryTitleUpdated: ITuple<[u64, H256, PalletForumPrivilegedActor]>;
+        readonly isCategoryDescriptionUpdated: boolean;
+        readonly asCategoryDescriptionUpdated: ITuple<[u64, H256, PalletForumPrivilegedActor]>;
+        readonly isCategoryDeleted: boolean;
+        readonly asCategoryDeleted: ITuple<[u64, PalletForumPrivilegedActor]>;
+        readonly isThreadCreated: boolean;
+        readonly asThreadCreated: ITuple<[u64, u64, u64, u64, Bytes, Bytes]>;
+        readonly isThreadModerated: boolean;
+        readonly asThreadModerated: ITuple<[u64, Bytes, PalletForumPrivilegedActor, u64]>;
+        readonly isThreadUpdated: boolean;
+        readonly asThreadUpdated: ITuple<[u64, bool, PalletForumPrivilegedActor, u64]>;
+        readonly isThreadMetadataUpdated: boolean;
+        readonly asThreadMetadataUpdated: ITuple<[u64, u64, u64, Bytes]>;
+        readonly isThreadDeleted: boolean;
+        readonly asThreadDeleted: ITuple<[u64, u64, u64, bool]>;
+        readonly isThreadMoved: boolean;
+        readonly asThreadMoved: ITuple<[u64, u64, PalletForumPrivilegedActor, u64]>;
+        readonly isPostAdded: boolean;
+        readonly asPostAdded: ITuple<[u64, u64, u64, u64, Bytes, bool]>;
+        readonly isPostModerated: boolean;
+        readonly asPostModerated: ITuple<[u64, Bytes, PalletForumPrivilegedActor, u64, u64]>;
+        readonly isPostDeleted: boolean;
+        readonly asPostDeleted: ITuple<[Bytes, u64, BTreeMap<PalletForumExtendedPostIdObject, bool>]>;
+        readonly isPostTextUpdated: boolean;
+        readonly asPostTextUpdated: ITuple<[u64, u64, u64, u64, Bytes]>;
+        readonly isCategoryStickyThreadUpdate: boolean;
+        readonly asCategoryStickyThreadUpdate: ITuple<[u64, BTreeSet<u64>, PalletForumPrivilegedActor]>;
+        readonly isCategoryMembershipOfModeratorUpdated: boolean;
+        readonly asCategoryMembershipOfModeratorUpdated: ITuple<[u64, u64, bool]>;
+        readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
+    }
+    /** @name PalletForumPrivilegedActor (79) */
+    interface PalletForumPrivilegedActor extends Enum {
+        readonly isLead: boolean;
+        readonly isModerator: boolean;
+        readonly asModerator: u64;
+        readonly type: 'Lead' | 'Moderator';
+    }
+    /** @name PalletForumExtendedPostIdObject (80) */
+    interface PalletForumExtendedPostIdObject extends Struct {
+        readonly categoryId: u64;
+        readonly threadId: u64;
+        readonly postId: u64;
+    }
+    /** @name PalletConstitutionRawEvent (85) */
+    interface PalletConstitutionRawEvent extends Enum {
+        readonly isConstutionAmended: boolean;
+        readonly asConstutionAmended: ITuple<[H256, Bytes]>;
+        readonly type: 'ConstutionAmended';
+    }
+    /** @name PalletBountyRawEvent (86) */
+    interface PalletBountyRawEvent extends Enum {
+        readonly isBountyCreated: boolean;
+        readonly asBountyCreated: ITuple<[u64, PalletBountyBountyParametersBTreeSet, Bytes]>;
+        readonly isBountyOracleSwitched: boolean;
+        readonly asBountyOracleSwitched: ITuple<[u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+        readonly isBountyTerminated: boolean;
+        readonly asBountyTerminated: ITuple<[u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+        readonly isBountyFunded: boolean;
+        readonly asBountyFunded: ITuple<[u64, PalletBountyBountyActor, u128]>;
+        readonly isBountyMaxFundingReached: boolean;
+        readonly asBountyMaxFundingReached: u64;
+        readonly isBountyFundingWithdrawal: boolean;
+        readonly asBountyFundingWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+        readonly isBountyCreatorCherryWithdrawal: boolean;
+        readonly asBountyCreatorCherryWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+        readonly isBountyCreatorOracleRewardWithdrawal: boolean;
+        readonly asBountyCreatorOracleRewardWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+        readonly isBountyOracleRewardWithdrawal: boolean;
+        readonly asBountyOracleRewardWithdrawal: ITuple<[u64, PalletBountyBountyActor, u128]>;
+        readonly isBountyRemoved: boolean;
+        readonly asBountyRemoved: u64;
+        readonly isWorkEntryAnnounced: boolean;
+        readonly asWorkEntryAnnounced: ITuple<[u64, u64, u64, AccountId32, Bytes]>;
+        readonly isWorkSubmitted: boolean;
+        readonly asWorkSubmitted: ITuple<[u64, u64, u64, Bytes]>;
+        readonly isOracleJudgmentSubmitted: boolean;
+        readonly asOracleJudgmentSubmitted: ITuple<[u64, PalletBountyBountyActor, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+        readonly isWorkEntrantFundsWithdrawn: boolean;
+        readonly asWorkEntrantFundsWithdrawn: ITuple<[u64, u64, u64]>;
+        readonly isBountyContributorRemarked: boolean;
+        readonly asBountyContributorRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+        readonly isBountyOracleRemarked: boolean;
+        readonly asBountyOracleRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+        readonly isBountyEntrantRemarked: boolean;
+        readonly asBountyEntrantRemarked: ITuple<[u64, u64, u64, Bytes]>;
+        readonly isBountyCreatorRemarked: boolean;
+        readonly asBountyCreatorRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+        readonly isWorkSubmissionPeriodEnded: boolean;
+        readonly asWorkSubmissionPeriodEnded: ITuple<[u64, PalletBountyBountyActor]>;
+        readonly isWorkEntrantStakeUnlocked: boolean;
+        readonly asWorkEntrantStakeUnlocked: ITuple<[u64, u64, AccountId32]>;
+        readonly isWorkEntrantStakeSlashed: boolean;
+        readonly asWorkEntrantStakeSlashed: ITuple<[u64, u64, AccountId32, u128]>;
+        readonly isFunderStateBloatBondWithdrawn: boolean;
+        readonly asFunderStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
+        readonly isCreatorStateBloatBondWithdrawn: boolean;
+        readonly asCreatorStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
+        readonly type: 'BountyCreated' | 'BountyOracleSwitched' | 'BountyTerminated' | 'BountyFunded' | 'BountyMaxFundingReached' | 'BountyFundingWithdrawal' | 'BountyCreatorCherryWithdrawal' | 'BountyCreatorOracleRewardWithdrawal' | 'BountyOracleRewardWithdrawal' | 'BountyRemoved' | 'WorkEntryAnnounced' | 'WorkSubmitted' | 'OracleJudgmentSubmitted' | 'WorkEntrantFundsWithdrawn' | 'BountyContributorRemarked' | 'BountyOracleRemarked' | 'BountyEntrantRemarked' | 'BountyCreatorRemarked' | 'WorkSubmissionPeriodEnded' | 'WorkEntrantStakeUnlocked' | 'WorkEntrantStakeSlashed' | 'FunderStateBloatBondWithdrawn' | 'CreatorStateBloatBondWithdrawn';
+    }
+    /** @name PalletBountyBountyParametersBTreeSet (87) */
+    interface PalletBountyBountyParametersBTreeSet extends Struct {
+        readonly oracle: PalletBountyBountyActor;
+        readonly contractType: PalletBountyAssuranceContractTypeBTreeSet;
+        readonly creator: PalletBountyBountyActor;
+        readonly cherry: u128;
+        readonly oracleReward: u128;
+        readonly entrantStake: u128;
+        readonly fundingType: PalletBountyFundingType;
+    }
+    /** @name PalletBountyBountyActor (88) */
+    interface PalletBountyBountyActor extends Enum {
+        readonly isCouncil: boolean;
+        readonly isMember: boolean;
+        readonly asMember: u64;
+        readonly type: 'Council' | 'Member';
+    }
+    /** @name PalletBountyAssuranceContractTypeBTreeSet (89) */
+    interface PalletBountyAssuranceContractTypeBTreeSet extends Enum {
+        readonly isOpen: boolean;
+        readonly isClosed: boolean;
+        readonly asClosed: BTreeSet<u64>;
+        readonly type: 'Open' | 'Closed';
+    }
+    /** @name PalletBountyFundingType (90) */
+    interface PalletBountyFundingType extends Enum {
+        readonly isPerpetual: boolean;
+        readonly asPerpetual: {
+            readonly target: u128;
+        } & Struct;
+        readonly isLimited: boolean;
+        readonly asLimited: {
+            readonly target: u128;
+            readonly fundingPeriod: u32;
+        } & Struct;
+        readonly type: 'Perpetual' | 'Limited';
+    }
+    /** @name PalletBountyOracleWorkEntryJudgment (92) */
+    interface PalletBountyOracleWorkEntryJudgment extends Enum {
+        readonly isWinner: boolean;
+        readonly asWinner: {
+            readonly reward: u128;
+        } & Struct;
+        readonly isRejected: boolean;
+        readonly asRejected: {
+            readonly slashingShare: Perbill;
+            readonly actionJustification: Bytes;
+        } & Struct;
+        readonly type: 'Winner' | 'Rejected';
+    }
+    /** @name PalletUtilityRawEvent (95) */
+    interface PalletUtilityRawEvent extends Enum {
+        readonly isSignaled: boolean;
+        readonly asSignaled: Bytes;
+        readonly isRuntimeUpgraded: boolean;
+        readonly asRuntimeUpgraded: Bytes;
+        readonly isUpdatedWorkingGroupBudget: boolean;
+        readonly asUpdatedWorkingGroupBudget: ITuple<[PalletCommonWorkingGroupIterableEnumsWorkingGroup, u128, PalletCommonBalanceKind]>;
+        readonly isTokensBurned: boolean;
+        readonly asTokensBurned: ITuple<[AccountId32, u128]>;
+        readonly type: 'Signaled' | 'RuntimeUpgraded' | 'UpdatedWorkingGroupBudget' | 'TokensBurned';
+    }
+    /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (96) */
+    interface PalletCommonWorkingGroupIterableEnumsWorkingGroup extends Enum {
+        readonly isForum: boolean;
+        readonly isStorage: boolean;
+        readonly isContent: boolean;
+        readonly isOperationsAlpha: boolean;
+        readonly isApp: boolean;
+        readonly isDistribution: boolean;
+        readonly isOperationsBeta: boolean;
+        readonly isOperationsGamma: boolean;
+        readonly isMembership: boolean;
+        readonly type: 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'App' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership';
+    }
+    /** @name PalletCommonBalanceKind (97) */
+    interface PalletCommonBalanceKind extends Enum {
+        readonly isPositive: boolean;
+        readonly isNegative: boolean;
+        readonly type: 'Positive' | 'Negative';
+    }
+    /** @name PalletContentRawEvent (98) */
+    interface PalletContentRawEvent extends Enum {
+        readonly isCuratorGroupCreated: boolean;
+        readonly asCuratorGroupCreated: u64;
+        readonly isCuratorGroupPermissionsUpdated: boolean;
+        readonly asCuratorGroupPermissionsUpdated: ITuple<[u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
+        readonly isCuratorGroupStatusSet: boolean;
+        readonly asCuratorGroupStatusSet: ITuple<[u64, bool]>;
+        readonly isCuratorAdded: boolean;
+        readonly asCuratorAdded: ITuple<[u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
+        readonly isCuratorRemoved: boolean;
+        readonly asCuratorRemoved: ITuple<[u64, u64]>;
+        readonly isChannelCreated: boolean;
+        readonly asChannelCreated: ITuple<[u64, PalletContentChannelRecord, PalletContentChannelCreationParametersRecord, AccountId32]>;
+        readonly isChannelUpdated: boolean;
+        readonly asChannelUpdated: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
+        readonly isChannelPrivilegeLevelUpdated: boolean;
+        readonly asChannelPrivilegeLevelUpdated: ITuple<[u64, u8]>;
+        readonly isChannelStateBloatBondValueUpdated: boolean;
+        readonly asChannelStateBloatBondValueUpdated: u128;
+        readonly isVideoStateBloatBondValueUpdated: boolean;
+        readonly asVideoStateBloatBondValueUpdated: u128;
+        readonly isChannelAssetsRemoved: boolean;
+        readonly asChannelAssetsRemoved: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, PalletContentChannelRecord]>;
+        readonly isChannelDeleted: boolean;
+        readonly asChannelDeleted: ITuple<[PalletContentPermissionsContentActor, u64]>;
+        readonly isChannelDeletedByModerator: boolean;
+        readonly asChannelDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, Bytes]>;
+        readonly isChannelVisibilitySetByModerator: boolean;
+        readonly asChannelVisibilitySetByModerator: ITuple<[PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+        readonly isChannelPausedFeaturesUpdatedByModerator: boolean;
+        readonly asChannelPausedFeaturesUpdatedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
+        readonly isChannelAssetsDeletedByModerator: boolean;
+        readonly asChannelAssetsDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, Bytes]>;
+        readonly isChannelFundsWithdrawn: boolean;
+        readonly asChannelFundsWithdrawn: ITuple<[PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
+        readonly isChannelRewardClaimedAndWithdrawn: boolean;
+        readonly asChannelRewardClaimedAndWithdrawn: ITuple<[PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
+        readonly isVideoCreated: boolean;
+        readonly asVideoCreated: ITuple<[PalletContentPermissionsContentActor, u64, u64, PalletContentVideoCreationParametersRecord, BTreeSet<u64>]>;
+        readonly isVideoUpdated: boolean;
+        readonly asVideoUpdated: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentVideoUpdateParametersRecord, BTreeSet<u64>]>;
+        readonly isVideoDeleted: boolean;
+        readonly asVideoDeleted: ITuple<[PalletContentPermissionsContentActor, u64]>;
+        readonly isVideoDeletedByModerator: boolean;
+        readonly asVideoDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, Bytes]>;
+        readonly isVideoVisibilitySetByModerator: boolean;
+        readonly asVideoVisibilitySetByModerator: ITuple<[PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+        readonly isVideoAssetsDeletedByModerator: boolean;
+        readonly asVideoAssetsDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, bool, Bytes]>;
+        readonly isChannelPayoutsUpdated: boolean;
+        readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
+        readonly isChannelRewardUpdated: boolean;
+        readonly asChannelRewardUpdated: ITuple<[u128, u128, u64]>;
+        readonly isEnglishAuctionStarted: boolean;
+        readonly asEnglishAuctionStarted: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
+        readonly isOpenAuctionStarted: boolean;
+        readonly asOpenAuctionStarted: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesOpenAuctionParamsRecord, u64]>;
+        readonly isNftIssued: boolean;
+        readonly asNftIssued: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesNftIssuanceParametersRecord]>;
+        readonly isNftDestroyed: boolean;
+        readonly asNftDestroyed: ITuple<[PalletContentPermissionsContentActor, u64]>;
+        readonly isAuctionBidMade: boolean;
+        readonly asAuctionBidMade: ITuple<[u64, u64, u128, Option<u64>]>;
+        readonly isAuctionBidCanceled: boolean;
+        readonly asAuctionBidCanceled: ITuple<[u64, u64]>;
+        readonly isAuctionCanceled: boolean;
+        readonly asAuctionCanceled: ITuple<[PalletContentPermissionsContentActor, u64]>;
+        readonly isEnglishAuctionSettled: boolean;
+        readonly asEnglishAuctionSettled: ITuple<[u64, AccountId32, u64]>;
+        readonly isBidMadeCompletingAuction: boolean;
+        readonly asBidMadeCompletingAuction: ITuple<[u64, u64, Option<u64>]>;
+        readonly isOpenAuctionBidAccepted: boolean;
+        readonly asOpenAuctionBidAccepted: ITuple<[PalletContentPermissionsContentActor, u64, u64, u128]>;
+        readonly isOfferStarted: boolean;
+        readonly asOfferStarted: ITuple<[u64, PalletContentPermissionsContentActor, u64, Option<u128>]>;
+        readonly isOfferAccepted: boolean;
+        readonly asOfferAccepted: u64;
+        readonly isOfferCanceled: boolean;
+        readonly asOfferCanceled: ITuple<[u64, PalletContentPermissionsContentActor]>;
+        readonly isNftSellOrderMade: boolean;
+        readonly asNftSellOrderMade: ITuple<[u64, PalletContentPermissionsContentActor, u128]>;
+        readonly isNftBought: boolean;
+        readonly asNftBought: ITuple<[u64, u64]>;
+        readonly isBuyNowCanceled: boolean;
+        readonly asBuyNowCanceled: ITuple<[u64, PalletContentPermissionsContentActor]>;
+        readonly isBuyNowPriceUpdated: boolean;
+        readonly asBuyNowPriceUpdated: ITuple<[u64, PalletContentPermissionsContentActor, u128]>;
+        readonly isNftSlingedBackToTheOriginalArtist: boolean;
+        readonly asNftSlingedBackToTheOriginalArtist: ITuple<[u64, PalletContentPermissionsContentActor]>;
+        readonly isChannelOwnerRemarked: boolean;
+        readonly asChannelOwnerRemarked: ITuple<[u64, Bytes]>;
+        readonly isChannelAgentRemarked: boolean;
+        readonly asChannelAgentRemarked: ITuple<[PalletContentPermissionsContentActor, u64, Bytes]>;
+        readonly isNftOwnerRemarked: boolean;
+        readonly asNftOwnerRemarked: ITuple<[PalletContentPermissionsContentActor, u64, Bytes]>;
+        readonly isInitializedChannelTransfer: boolean;
+        readonly asInitializedChannelTransfer: ITuple<[u64, PalletContentPermissionsContentActor, PalletContentPendingTransfer]>;
+        readonly isCancelChannelTransfer: boolean;
+        readonly asCancelChannelTransfer: ITuple<[u64, PalletContentPermissionsContentActor]>;
+        readonly isChannelTransferAccepted: boolean;
+        readonly asChannelTransferAccepted: ITuple<[u64, PalletContentTransferCommitmentParametersBTreeMap]>;
+        readonly isGlobalNftLimitUpdated: boolean;
+        readonly asGlobalNftLimitUpdated: ITuple<[PalletContentNftLimitPeriod, u64]>;
+        readonly isChannelNftLimitUpdated: boolean;
+        readonly asChannelNftLimitUpdated: ITuple<[PalletContentPermissionsContentActor, PalletContentNftLimitPeriod, u64, u64]>;
+        readonly isToggledNftLimits: boolean;
+        readonly asToggledNftLimits: bool;
+        readonly isCreatorTokenIssued: boolean;
+        readonly asCreatorTokenIssued: ITuple<[PalletContentPermissionsContentActor, u64, u64]>;
+        readonly isCreatorTokenIssuerRemarked: boolean;
+        readonly asCreatorTokenIssuerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued' | 'CreatorTokenIssuerRemarked';
+    }
+    /** @name PalletContentPermissionsContentActor (99) */
+    interface PalletContentPermissionsContentActor extends Enum {
+        readonly isCurator: boolean;
+        readonly asCurator: ITuple<[u64, u64]>;
+        readonly isMember: boolean;
+        readonly asMember: u64;
+        readonly isLead: boolean;
+        readonly type: 'Curator' | 'Member' | 'Lead';
+    }
+    /** @name PalletContentChannelRecord (100) */
+    interface PalletContentChannelRecord extends Struct {
+        readonly owner: PalletContentChannelOwner;
+        readonly numVideos: u64;
+        readonly collaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+        readonly cumulativeRewardClaimed: u128;
+        readonly privilegeLevel: u8;
+        readonly pausedFeatures: BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>;
+        readonly transferStatus: PalletContentChannelTransferStatus;
+        readonly dataObjects: BTreeSet<u64>;
+        readonly dailyNftLimit: PalletContentLimitPerPeriod;
+        readonly weeklyNftLimit: PalletContentLimitPerPeriod;
+        readonly dailyNftCounter: PalletContentNftCounter;
+        readonly weeklyNftCounter: PalletContentNftCounter;
+        readonly creatorTokenId: Option<u64>;
+        readonly channelStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
+    }
+    /** @name PalletContentIterableEnumsChannelActionPermission (104) */
+    interface PalletContentIterableEnumsChannelActionPermission extends Enum {
+        readonly isUpdateChannelMetadata: boolean;
+        readonly isManageNonVideoChannelAssets: boolean;
+        readonly isManageChannelCollaborators: boolean;
+        readonly isUpdateVideoMetadata: boolean;
+        readonly isAddVideo: boolean;
+        readonly isManageVideoAssets: boolean;
+        readonly isDeleteChannel: boolean;
+        readonly isDeleteVideo: boolean;
+        readonly isManageVideoNfts: boolean;
+        readonly isAgentRemark: boolean;
+        readonly isTransferChannel: boolean;
+        readonly isClaimChannelReward: boolean;
+        readonly isWithdrawFromChannelBalance: boolean;
+        readonly isIssueCreatorToken: boolean;
+        readonly isClaimCreatorTokenPatronage: boolean;
+        readonly isInitAndManageCreatorTokenSale: boolean;
+        readonly isCreatorTokenIssuerTransfer: boolean;
+        readonly isMakeCreatorTokenPermissionless: boolean;
+        readonly isReduceCreatorTokenPatronageRate: boolean;
+        readonly isManageRevenueSplits: boolean;
+        readonly isDeissueCreatorToken: boolean;
+        readonly isAmmControl: boolean;
+        readonly isCreatorTokenRemarks: boolean;
+        readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken' | 'AmmControl' | 'CreatorTokenRemarks';
+    }
+    /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (111) */
+    interface PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature extends Enum {
+        readonly isChannelFundsTransfer: boolean;
+        readonly isCreatorCashout: boolean;
+        readonly isVideoNftIssuance: boolean;
+        readonly isVideoCreation: boolean;
+        readonly isVideoUpdate: boolean;
+        readonly isChannelUpdate: boolean;
+        readonly isCreatorTokenIssuance: boolean;
+        readonly type: 'ChannelFundsTransfer' | 'CreatorCashout' | 'VideoNftIssuance' | 'VideoCreation' | 'VideoUpdate' | 'ChannelUpdate' | 'CreatorTokenIssuance';
+    }
+    /** @name PalletCommonBloatBondRepayableBloatBond (114) */
+    interface PalletCommonBloatBondRepayableBloatBond extends Struct {
+        readonly repaymentRestrictedTo: Option<AccountId32>;
+        readonly amount: u128;
+    }
+    /** @name PalletContentChannelOwner (115) */
+    interface PalletContentChannelOwner extends Enum {
+        readonly isMember: boolean;
+        readonly asMember: u64;
+        readonly isCuratorGroup: boolean;
+        readonly asCuratorGroup: u64;
+        readonly type: 'Member' | 'CuratorGroup';
+    }
+    /** @name PalletContentChannelTransferStatus (116) */
+    interface PalletContentChannelTransferStatus extends Enum {
+        readonly isNoActiveTransfer: boolean;
+        readonly isPendingTransfer: boolean;
+        readonly asPendingTransfer: PalletContentPendingTransfer;
+        readonly type: 'NoActiveTransfer' | 'PendingTransfer';
+    }
+    /** @name PalletContentPendingTransfer (117) */
+    interface PalletContentPendingTransfer extends Struct {
+        readonly newOwner: PalletContentChannelOwner;
+        readonly transferParams: PalletContentTransferCommitmentParametersBoundedBTreeMap;
+    }
+    /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (118) */
+    interface PalletContentTransferCommitmentParametersBoundedBTreeMap extends Struct {
+        readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+        readonly price: u128;
+        readonly transferId: u64;
+    }
+    /** @name PalletContentLimitPerPeriod (119) */
+    interface PalletContentLimitPerPeriod extends Struct {
+        readonly limit: u64;
+        readonly blockNumberPeriod: u32;
+    }
+    /** @name PalletContentNftCounter (120) */
+    interface PalletContentNftCounter extends Struct {
+        readonly counter: u64;
+        readonly lastUpdated: u32;
+    }
+    /** @name PalletContentNftTypesEnglishAuctionParamsRecord (121) */
+    interface PalletContentNftTypesEnglishAuctionParamsRecord extends Struct {
+        readonly startingPrice: u128;
+        readonly buyNowPrice: Option<u128>;
+        readonly whitelist: BTreeSet<u64>;
+        readonly startsAt: Option<u32>;
+        readonly duration: u32;
+        readonly extensionPeriod: u32;
+        readonly minBidStep: u128;
+    }
+    /** @name PalletContentNftTypesOpenAuctionParamsRecord (123) */
+    interface PalletContentNftTypesOpenAuctionParamsRecord extends Struct {
+        readonly startingPrice: u128;
+        readonly buyNowPrice: Option<u128>;
+        readonly startsAt: Option<u32>;
+        readonly whitelist: BTreeSet<u64>;
+        readonly bidLockDuration: u32;
+    }
+    /** @name PalletContentNftTypesNftIssuanceParametersRecord (124) */
+    interface PalletContentNftTypesNftIssuanceParametersRecord extends Struct {
+        readonly royalty: Option<Perbill>;
+        readonly nftMetadata: Bytes;
+        readonly nonChannelOwner: Option<u64>;
+        readonly initTransactionalStatus: PalletContentNftTypesInitTransactionalStatusRecord;
+    }
+    /** @name PalletContentNftTypesInitTransactionalStatusRecord (125) */
+    interface PalletContentNftTypesInitTransactionalStatusRecord extends Enum {
+        readonly isIdle: boolean;
+        readonly isBuyNow: boolean;
+        readonly asBuyNow: u128;
+        readonly isInitiatedOfferToMember: boolean;
+        readonly asInitiatedOfferToMember: ITuple<[u64, Option<u128>]>;
+        readonly isEnglishAuction: boolean;
+        readonly asEnglishAuction: PalletContentNftTypesEnglishAuctionParamsRecord;
+        readonly isOpenAuction: boolean;
+        readonly asOpenAuction: PalletContentNftTypesOpenAuctionParamsRecord;
+        readonly type: 'Idle' | 'BuyNow' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction';
+    }
+    /** @name PalletContentChannelCreationParametersRecord (127) */
+    interface PalletContentChannelCreationParametersRecord extends Struct {
+        readonly assets: Option<PalletContentStorageAssetsRecord>;
+        readonly meta: Option<Bytes>;
+        readonly collaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+        readonly storageBuckets: BTreeSet<u64>;
+        readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+        readonly expectedChannelStateBloatBond: u128;
+        readonly expectedDataObjectStateBloatBond: u128;
+    }
+    /** @name PalletContentStorageAssetsRecord (128) */
+    interface PalletContentStorageAssetsRecord extends Struct {
+        readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
+        readonly expectedDataSizeFee: u128;
+    }
+    /** @name PalletStorageDataObjectCreationParameters (130) */
+    interface PalletStorageDataObjectCreationParameters extends Struct {
+        readonly size_: u64;
+        readonly ipfsContentId: Bytes;
+    }
+    /** @name PalletStorageDistributionBucketIdRecord (131) */
+    interface PalletStorageDistributionBucketIdRecord extends Struct {
+        readonly distributionBucketFamilyId: u64;
+        readonly distributionBucketIndex: u64;
+    }
+    /** @name PalletContentChannelUpdateParametersRecord (138) */
+    interface PalletContentChannelUpdateParametersRecord extends Struct {
+        readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
+        readonly newMeta: Option<Bytes>;
+        readonly assetsToRemove: BTreeSet<u64>;
+        readonly collaborators: Option<BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>>;
+        readonly expectedDataObjectStateBloatBond: u128;
+        readonly storageBucketsNumWitness: Option<u32>;
+    }
+    /** @name PalletContentVideoCreationParametersRecord (140) */
+    interface PalletContentVideoCreationParametersRecord extends Struct {
+        readonly assets: Option<PalletContentStorageAssetsRecord>;
+        readonly meta: Option<Bytes>;
+        readonly autoIssueNft: Option<PalletContentNftTypesNftIssuanceParametersRecord>;
+        readonly expectedVideoStateBloatBond: u128;
+        readonly expectedDataObjectStateBloatBond: u128;
+        readonly storageBucketsNumWitness: u32;
+    }
+    /** @name PalletContentVideoUpdateParametersRecord (142) */
+    interface PalletContentVideoUpdateParametersRecord extends Struct {
+        readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
+        readonly newMeta: Option<Bytes>;
+        readonly assetsToRemove: BTreeSet<u64>;
+        readonly autoIssueNft: Option<PalletContentNftTypesNftIssuanceParametersRecord>;
+        readonly expectedDataObjectStateBloatBond: u128;
+        readonly storageBucketsNumWitness: Option<u32>;
+    }
+    /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (145) */
+    interface PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction extends Enum {
+        readonly isHideVideo: boolean;
+        readonly isHideChannel: boolean;
+        readonly isChangeChannelFeatureStatus: boolean;
+        readonly asChangeChannelFeatureStatus: PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature;
+        readonly isDeleteVideo: boolean;
+        readonly isDeleteChannel: boolean;
+        readonly isDeleteVideoAssets: boolean;
+        readonly asDeleteVideoAssets: bool;
+        readonly isDeleteNonVideoChannelAssets: boolean;
+        readonly isUpdateChannelNftLimits: boolean;
+        readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideo' | 'DeleteChannel' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
+    }
+    /** @name PalletContentTransferCommitmentParametersBTreeMap (149) */
+    interface PalletContentTransferCommitmentParametersBTreeMap extends Struct {
+        readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+        readonly price: u128;
+        readonly transferId: u64;
+    }
+    /** @name PalletContentUpdateChannelPayoutsParametersRecord (150) */
+    interface PalletContentUpdateChannelPayoutsParametersRecord extends Struct {
+        readonly commitment: Option<H256>;
+        readonly payload: Option<PalletContentChannelPayoutsPayloadParametersRecord>;
+        readonly minCashoutAllowed: Option<u128>;
+        readonly maxCashoutAllowed: Option<u128>;
+        readonly channelCashoutsEnabled: Option<bool>;
+    }
+    /** @name PalletContentChannelPayoutsPayloadParametersRecord (151) */
+    interface PalletContentChannelPayoutsPayloadParametersRecord extends Struct {
+        readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
+        readonly expectedDataSizeFee: u128;
+        readonly expectedDataObjectStateBloatBond: u128;
+    }
+    /** @name PalletContentChannelFundsDestination (155) */
+    interface PalletContentChannelFundsDestination extends Enum {
+        readonly isAccountId: boolean;
+        readonly asAccountId: AccountId32;
+        readonly isCouncilBudget: boolean;
+        readonly type: 'AccountId' | 'CouncilBudget';
+    }
+    /** @name PalletContentNftLimitPeriod (156) */
+    interface PalletContentNftLimitPeriod extends Enum {
+        readonly isDaily: boolean;
+        readonly isWeekly: boolean;
+        readonly type: 'Daily' | 'Weekly';
+    }
+    /** @name PalletStorageRawEvent (157) */
+    interface PalletStorageRawEvent extends Enum {
+        readonly isStorageBucketCreated: boolean;
+        readonly asStorageBucketCreated: ITuple<[u64, Option<u64>, bool, u64, u64]>;
+        readonly isStorageBucketInvitationAccepted: boolean;
+        readonly asStorageBucketInvitationAccepted: ITuple<[u64, u64, AccountId32]>;
+        readonly isStorageBucketsUpdatedForBag: boolean;
+        readonly asStorageBucketsUpdatedForBag: ITuple<[PalletStorageBagIdType, BTreeSet<u64>, BTreeSet<u64>]>;
+        readonly isDataObjectsUploaded: boolean;
+        readonly asDataObjectsUploaded: ITuple<[BTreeSet<u64>, PalletStorageUploadParametersRecord, u128]>;
+        readonly isStorageOperatorMetadataSet: boolean;
+        readonly asStorageOperatorMetadataSet: ITuple<[u64, u64, Bytes]>;
+        readonly isStorageBucketVoucherLimitsSet: boolean;
+        readonly asStorageBucketVoucherLimitsSet: ITuple<[u64, u64, u64]>;
+        readonly isPendingDataObjectsAccepted: boolean;
+        readonly asPendingDataObjectsAccepted: ITuple<[u64, u64, PalletStorageBagIdType, BTreeSet<u64>]>;
+        readonly isStorageBucketInvitationCancelled: boolean;
+        readonly asStorageBucketInvitationCancelled: u64;
+        readonly isStorageBucketOperatorInvited: boolean;
+        readonly asStorageBucketOperatorInvited: ITuple<[u64, u64]>;
+        readonly isStorageBucketOperatorRemoved: boolean;
+        readonly asStorageBucketOperatorRemoved: u64;
+        readonly isUploadingBlockStatusUpdated: boolean;
+        readonly asUploadingBlockStatusUpdated: bool;
+        readonly isDataObjectPerMegabyteFeeUpdated: boolean;
+        readonly asDataObjectPerMegabyteFeeUpdated: u128;
+        readonly isStorageBucketsPerBagLimitUpdated: boolean;
+        readonly asStorageBucketsPerBagLimitUpdated: u32;
+        readonly isStorageBucketsVoucherMaxLimitsUpdated: boolean;
+        readonly asStorageBucketsVoucherMaxLimitsUpdated: ITuple<[u64, u64]>;
+        readonly isDataObjectsMoved: boolean;
+        readonly asDataObjectsMoved: ITuple<[PalletStorageBagIdType, PalletStorageBagIdType, BTreeSet<u64>]>;
+        readonly isDataObjectsDeleted: boolean;
+        readonly asDataObjectsDeleted: ITuple<[AccountId32, PalletStorageBagIdType, BTreeSet<u64>]>;
+        readonly isStorageBucketStatusUpdated: boolean;
+        readonly asStorageBucketStatusUpdated: ITuple<[u64, bool]>;
+        readonly isUpdateBlacklist: boolean;
+        readonly asUpdateBlacklist: ITuple<[BTreeSet<Bytes>, BTreeSet<Bytes>]>;
+        readonly isDynamicBagDeleted: boolean;
+        readonly asDynamicBagDeleted: PalletStorageDynamicBagIdType;
+        readonly isDynamicBagCreated: boolean;
+        readonly asDynamicBagCreated: ITuple<[PalletStorageDynBagCreationParametersRecord, BTreeSet<u64>]>;
+        readonly isVoucherChanged: boolean;
+        readonly asVoucherChanged: ITuple<[u64, PalletStorageVoucher]>;
+        readonly isStorageBucketDeleted: boolean;
+        readonly asStorageBucketDeleted: u64;
+        readonly isNumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: boolean;
+        readonly asNumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: ITuple<[PalletStorageDynamicBagType, u32]>;
+        readonly isDistributionBucketFamilyCreated: boolean;
+        readonly asDistributionBucketFamilyCreated: u64;
+        readonly isDistributionBucketFamilyDeleted: boolean;
+        readonly asDistributionBucketFamilyDeleted: u64;
+        readonly isDistributionBucketCreated: boolean;
+        readonly asDistributionBucketCreated: ITuple<[u64, bool, PalletStorageDistributionBucketIdRecord]>;
+        readonly isDistributionBucketStatusUpdated: boolean;
+        readonly asDistributionBucketStatusUpdated: ITuple<[PalletStorageDistributionBucketIdRecord, bool]>;
+        readonly isDistributionBucketDeleted: boolean;
+        readonly asDistributionBucketDeleted: PalletStorageDistributionBucketIdRecord;
+        readonly isDistributionBucketsUpdatedForBag: boolean;
+        readonly asDistributionBucketsUpdatedForBag: ITuple<[PalletStorageBagIdType, u64, BTreeSet<u64>, BTreeSet<u64>]>;
+        readonly isDistributionBucketsPerBagLimitUpdated: boolean;
+        readonly asDistributionBucketsPerBagLimitUpdated: u32;
+        readonly isDistributionBucketModeUpdated: boolean;
+        readonly asDistributionBucketModeUpdated: ITuple<[PalletStorageDistributionBucketIdRecord, bool]>;
+        readonly isFamiliesInDynamicBagCreationPolicyUpdated: boolean;
+        readonly asFamiliesInDynamicBagCreationPolicyUpdated: ITuple<[PalletStorageDynamicBagType, BTreeMap<u64, u32>]>;
+        readonly isDistributionBucketOperatorInvited: boolean;
+        readonly asDistributionBucketOperatorInvited: ITuple<[PalletStorageDistributionBucketIdRecord, u64]>;
+        readonly isDistributionBucketInvitationCancelled: boolean;
+        readonly asDistributionBucketInvitationCancelled: ITuple<[PalletStorageDistributionBucketIdRecord, u64]>;
+        readonly isDistributionBucketInvitationAccepted: boolean;
+        readonly asDistributionBucketInvitationAccepted: ITuple<[u64, PalletStorageDistributionBucketIdRecord]>;
+        readonly isDistributionBucketMetadataSet: boolean;
+        readonly asDistributionBucketMetadataSet: ITuple<[u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+        readonly isDistributionBucketOperatorRemoved: boolean;
+        readonly asDistributionBucketOperatorRemoved: ITuple<[PalletStorageDistributionBucketIdRecord, u64]>;
+        readonly isDistributionBucketFamilyMetadataSet: boolean;
+        readonly asDistributionBucketFamilyMetadataSet: ITuple<[u64, Bytes]>;
+        readonly isDataObjectStateBloatBondValueUpdated: boolean;
+        readonly asDataObjectStateBloatBondValueUpdated: u128;
+        readonly isDataObjectsUpdated: boolean;
+        readonly asDataObjectsUpdated: ITuple<[PalletStorageUploadParametersRecord, BTreeSet<u64>, BTreeSet<u64>]>;
+        readonly isStorageOperatorRemarked: boolean;
+        readonly asStorageOperatorRemarked: ITuple<[u64, u64, Bytes]>;
+        readonly isDistributionOperatorRemarked: boolean;
+        readonly asDistributionOperatorRemarked: ITuple<[u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+        readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
+    }
+    /** @name PalletStorageUploadParametersRecord (158) */
+    interface PalletStorageUploadParametersRecord extends Struct {
+        readonly bagId: PalletStorageBagIdType;
+        readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
+        readonly stateBloatBondSourceAccountId: AccountId32;
+        readonly expectedDataSizeFee: u128;
+        readonly expectedDataObjectStateBloatBond: u128;
+    }
+    /** @name PalletStorageBagIdType (159) */
+    interface PalletStorageBagIdType extends Enum {
+        readonly isStatic: boolean;
+        readonly asStatic: PalletStorageStaticBagId;
+        readonly isDynamic: boolean;
+        readonly asDynamic: PalletStorageDynamicBagIdType;
+        readonly type: 'Static' | 'Dynamic';
+    }
+    /** @name PalletStorageStaticBagId (160) */
+    interface PalletStorageStaticBagId extends Enum {
+        readonly isCouncil: boolean;
+        readonly isWorkingGroup: boolean;
+        readonly asWorkingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+        readonly type: 'Council' | 'WorkingGroup';
+    }
+    /** @name PalletStorageDynamicBagIdType (161) */
+    interface PalletStorageDynamicBagIdType extends Enum {
+        readonly isMember: boolean;
+        readonly asMember: u64;
+        readonly isChannel: boolean;
+        readonly asChannel: u64;
+        readonly type: 'Member' | 'Channel';
+    }
+    /** @name PalletStorageDynBagCreationParametersRecord (162) */
+    interface PalletStorageDynBagCreationParametersRecord extends Struct {
+        readonly bagId: PalletStorageDynamicBagIdType;
+        readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
+        readonly stateBloatBondSourceAccountId: AccountId32;
+        readonly expectedDataSizeFee: u128;
+        readonly expectedDataObjectStateBloatBond: u128;
+        readonly storageBuckets: BTreeSet<u64>;
+        readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+    }
+    /** @name PalletStorageVoucher (165) */
+    interface PalletStorageVoucher extends Struct {
+        readonly sizeLimit: u64;
+        readonly objectsLimit: u64;
+        readonly sizeUsed: u64;
+        readonly objectsUsed: u64;
+    }
+    /** @name PalletStorageDynamicBagType (166) */
+    interface PalletStorageDynamicBagType extends Enum {
+        readonly isMember: boolean;
+        readonly isChannel: boolean;
+        readonly type: 'Member' | 'Channel';
+    }
+    /** @name PalletProjectTokenEventsRawEvent (170) */
+    interface PalletProjectTokenEventsRawEvent extends Enum {
+        readonly isTokenAmountTransferred: boolean;
+        readonly asTokenAmountTransferred: ITuple<[u64, u64, PalletProjectTokenTransfers, Bytes]>;
+        readonly isTokenAmountTransferredByIssuer: boolean;
+        readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, PalletProjectTokenTransfers, Bytes]>;
+        readonly isPatronageRateDecreasedTo: boolean;
+        readonly asPatronageRateDecreasedTo: ITuple<[u64, Permill]>;
+        readonly isPatronageCreditClaimed: boolean;
+        readonly asPatronageCreditClaimed: ITuple<[u64, u128, u64]>;
+        readonly isRevenueSplitIssued: boolean;
+        readonly asRevenueSplitIssued: ITuple<[u64, u32, u32, u128]>;
+        readonly isRevenueSplitFinalized: boolean;
+        readonly asRevenueSplitFinalized: ITuple<[u64, AccountId32, u128]>;
+        readonly isUserParticipatedInSplit: boolean;
+        readonly asUserParticipatedInSplit: ITuple<[u64, u64, u128, u128, u32]>;
+        readonly isRevenueSplitLeft: boolean;
+        readonly asRevenueSplitLeft: ITuple<[u64, u64, u128]>;
+        readonly isMemberJoinedWhitelist: boolean;
+        readonly asMemberJoinedWhitelist: ITuple<[u64, u64, PalletProjectTokenTransferPolicy]>;
+        readonly isAccountDustedBy: boolean;
+        readonly asAccountDustedBy: ITuple<[u64, u64, AccountId32, PalletProjectTokenTransferPolicy]>;
+        readonly isTokenDeissued: boolean;
+        readonly asTokenDeissued: u64;
+        readonly isTokenIssued: boolean;
+        readonly asTokenIssued: ITuple<[u64, PalletProjectTokenTokenIssuanceParameters]>;
+        readonly isTokenSaleInitialized: boolean;
+        readonly asTokenSaleInitialized: ITuple<[u64, u32, PalletProjectTokenTokenSale, Option<Bytes>]>;
+        readonly isUpcomingTokenSaleUpdated: boolean;
+        readonly asUpcomingTokenSaleUpdated: ITuple<[u64, u32, Option<u32>, Option<u32>]>;
+        readonly isTokensPurchasedOnSale: boolean;
+        readonly asTokensPurchasedOnSale: ITuple<[u64, u32, u128, u64]>;
+        readonly isTokenSaleFinalized: boolean;
+        readonly asTokenSaleFinalized: ITuple<[u64, u32, u128, u128]>;
+        readonly isTransferPolicyChangedToPermissionless: boolean;
+        readonly asTransferPolicyChangedToPermissionless: u64;
+        readonly isTokensBurned: boolean;
+        readonly asTokensBurned: ITuple<[u64, u64, u128]>;
+        readonly isAmmActivated: boolean;
+        readonly asAmmActivated: ITuple<[u64, u64, PalletProjectTokenAmmCurve]>;
+        readonly isTokensBoughtOnAmm: boolean;
+        readonly asTokensBoughtOnAmm: ITuple<[u64, u64, u128, u128]>;
+        readonly isTokensSoldOnAmm: boolean;
+        readonly asTokensSoldOnAmm: ITuple<[u64, u64, u128, u128]>;
+        readonly isAmmDeactivated: boolean;
+        readonly asAmmDeactivated: ITuple<[u64, u64, u128]>;
+        readonly isMaxYearlyPatronageRateUpdated: boolean;
+        readonly asMaxYearlyPatronageRateUpdated: Permill;
+        readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned' | 'AmmActivated' | 'TokensBoughtOnAmm' | 'TokensSoldOnAmm' | 'AmmDeactivated' | 'MaxYearlyPatronageRateUpdated';
+    }
+    /** @name PalletProjectTokenTransferPolicy (171) */
+    interface PalletProjectTokenTransferPolicy extends Enum {
+        readonly isPermissionless: boolean;
+        readonly isPermissioned: boolean;
+        readonly asPermissioned: H256;
+        readonly type: 'Permissionless' | 'Permissioned';
+    }
+    /** @name PalletProjectTokenTokenIssuanceParameters (172) */
+    interface PalletProjectTokenTokenIssuanceParameters extends Struct {
+        readonly initialAllocation: BTreeMap<u64, PalletProjectTokenTokenAllocation>;
+        readonly symbol: H256;
+        readonly transferPolicy: PalletProjectTokenTransferPolicyParams;
+        readonly patronageRate: Permill;
+        readonly revenueSplitRate: Permill;
+    }
+    /** @name PalletProjectTokenTokenAllocation (173) */
+    interface PalletProjectTokenTokenAllocation extends Struct {
+        readonly amount: u128;
+        readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
+    }
+    /** @name PalletProjectTokenVestingScheduleParams (174) */
+    interface PalletProjectTokenVestingScheduleParams extends Struct {
+        readonly linearVestingDuration: u32;
+        readonly blocksBeforeCliff: u32;
+        readonly cliffAmountPercentage: Permill;
+    }
+    /** @name PalletProjectTokenTransferPolicyParams (177) */
+    interface PalletProjectTokenTransferPolicyParams extends Enum {
+        readonly isPermissionless: boolean;
+        readonly isPermissioned: boolean;
+        readonly asPermissioned: PalletProjectTokenWhitelistParams;
+        readonly type: 'Permissionless' | 'Permissioned';
+    }
+    /** @name PalletProjectTokenWhitelistParams (178) */
+    interface PalletProjectTokenWhitelistParams extends Struct {
+        readonly commitment: H256;
+        readonly payload: Option<PalletProjectTokenSingleDataObjectUploadParams>;
+    }
+    /** @name PalletProjectTokenSingleDataObjectUploadParams (179) */
+    interface PalletProjectTokenSingleDataObjectUploadParams extends Struct {
+        readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
+        readonly expectedDataSizeFee: u128;
+        readonly expectedDataObjectStateBloatBond: u128;
+    }
+    /** @name PalletProjectTokenTransfers (185) */
+    interface PalletProjectTokenTransfers extends BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment> {
+    }
+    /** @name PalletProjectTokenValidated (186) */
+    interface PalletProjectTokenValidated extends Enum {
+        readonly isExisting: boolean;
+        readonly asExisting: u64;
+        readonly isNonExisting: boolean;
+        readonly asNonExisting: u64;
+        readonly type: 'Existing' | 'NonExisting';
+    }
+    /** @name PalletProjectTokenValidatedPayment (187) */
+    interface PalletProjectTokenValidatedPayment extends Struct {
+        readonly payment: PalletProjectTokenPaymentWithVesting;
+        readonly vestingCleanupCandidate: Option<PalletProjectTokenVestingSource>;
+    }
+    /** @name PalletProjectTokenPaymentWithVesting (188) */
+    interface PalletProjectTokenPaymentWithVesting extends Struct {
+        readonly amount: u128;
+        readonly vestingSchedule: Option<PalletProjectTokenVestingScheduleParams>;
+    }
+    /** @name PalletProjectTokenVestingSource (190) */
+    interface PalletProjectTokenVestingSource extends Enum {
+        readonly isInitialIssuance: boolean;
+        readonly isSale: boolean;
+        readonly asSale: u32;
+        readonly isIssuerTransfer: boolean;
+        readonly asIssuerTransfer: u64;
+        readonly type: 'InitialIssuance' | 'Sale' | 'IssuerTransfer';
+    }
+    /** @name PalletProjectTokenTokenSale (194) */
+    interface PalletProjectTokenTokenSale extends Struct {
+        readonly unitPrice: u128;
+        readonly quantityLeft: u128;
+        readonly fundsCollected: u128;
+        readonly tokensSource: u64;
+        readonly earningsDestination: Option<AccountId32>;
+        readonly startBlock: u32;
+        readonly duration: u32;
+        readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
+        readonly capPerMember: Option<u128>;
+        readonly autoFinalize: bool;
+    }
+    /** @name PalletProjectTokenAmmCurve (195) */
+    interface PalletProjectTokenAmmCurve extends Struct {
+        readonly slope: u128;
+        readonly intercept: u128;
+        readonly providedSupply: u128;
+    }
+    /** @name PalletProposalsEngineRawEvent (196) */
+    interface PalletProposalsEngineRawEvent extends Enum {
+        readonly isProposalStatusUpdated: boolean;
+        readonly asProposalStatusUpdated: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
+        readonly isProposalDecisionMade: boolean;
+        readonly asProposalDecisionMade: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalDecision]>;
+        readonly isProposalExecuted: boolean;
+        readonly asProposalExecuted: ITuple<[u32, PalletProposalsEngineProposalStatusesExecutionStatus]>;
+        readonly isVoted: boolean;
+        readonly asVoted: ITuple<[u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
+        readonly isProposalCancelled: boolean;
+        readonly asProposalCancelled: ITuple<[u64, u32]>;
+        readonly isProposerRemarked: boolean;
+        readonly asProposerRemarked: ITuple<[u64, u32, Bytes]>;
+        readonly type: 'ProposalStatusUpdated' | 'ProposalDecisionMade' | 'ProposalExecuted' | 'Voted' | 'ProposalCancelled' | 'ProposerRemarked';
+    }
+    /** @name PalletProposalsEngineProposalStatusesProposalStatus (197) */
+    interface PalletProposalsEngineProposalStatusesProposalStatus extends Enum {
+        readonly isActive: boolean;
+        readonly isPendingExecution: boolean;
+        readonly asPendingExecution: u32;
+        readonly isPendingConstitutionality: boolean;
+        readonly type: 'Active' | 'PendingExecution' | 'PendingConstitutionality';
+    }
+    /** @name PalletProposalsEngineProposalStatusesProposalDecision (198) */
+    interface PalletProposalsEngineProposalStatusesProposalDecision extends Enum {
+        readonly isCanceled: boolean;
+        readonly isCanceledByRuntime: boolean;
+        readonly isVetoed: boolean;
+        readonly isRejected: boolean;
+        readonly isSlashed: boolean;
+        readonly isExpired: boolean;
+        readonly isApproved: boolean;
+        readonly asApproved: PalletProposalsEngineProposalStatusesApprovedProposalDecision;
+        readonly type: 'Canceled' | 'CanceledByRuntime' | 'Vetoed' | 'Rejected' | 'Slashed' | 'Expired' | 'Approved';
+    }
+    /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (199) */
+    interface PalletProposalsEngineProposalStatusesApprovedProposalDecision extends Enum {
+        readonly isPendingExecution: boolean;
+        readonly isPendingConstitutionality: boolean;
+        readonly type: 'PendingExecution' | 'PendingConstitutionality';
+    }
+    /** @name PalletProposalsEngineProposalStatusesExecutionStatus (200) */
+    interface PalletProposalsEngineProposalStatusesExecutionStatus extends Enum {
+        readonly isExecuted: boolean;
+        readonly isExecutionFailed: boolean;
+        readonly asExecutionFailed: {
+            readonly error: Bytes;
+        } & Struct;
+        readonly type: 'Executed' | 'ExecutionFailed';
+    }
+    /** @name PalletProposalsEngineVoteKind (201) */
+    interface PalletProposalsEngineVoteKind extends Enum {
+        readonly isApprove: boolean;
+        readonly isReject: boolean;
+        readonly isSlash: boolean;
+        readonly isAbstain: boolean;
+        readonly type: 'Approve' | 'Reject' | 'Slash' | 'Abstain';
+    }
+    /** @name PalletProposalsDiscussionRawEvent (202) */
+    interface PalletProposalsDiscussionRawEvent extends Enum {
+        readonly isThreadCreated: boolean;
+        readonly asThreadCreated: ITuple<[u64, u64]>;
+        readonly isPostCreated: boolean;
+        readonly asPostCreated: ITuple<[u64, u64, u64, Bytes, bool]>;
+        readonly isPostUpdated: boolean;
+        readonly asPostUpdated: ITuple<[u64, u64, u64, Bytes]>;
+        readonly isThreadModeChanged: boolean;
+        readonly asThreadModeChanged: ITuple<[u64, PalletProposalsDiscussionThreadModeBTreeSet, u64]>;
+        readonly isPostDeleted: boolean;
+        readonly asPostDeleted: ITuple<[u64, u64, u64, bool]>;
+        readonly type: 'ThreadCreated' | 'PostCreated' | 'PostUpdated' | 'ThreadModeChanged' | 'PostDeleted';
+    }
+    /** @name PalletProposalsDiscussionThreadModeBTreeSet (203) */
+    interface PalletProposalsDiscussionThreadModeBTreeSet extends Enum {
+        readonly isOpen: boolean;
+        readonly isClosed: boolean;
+        readonly asClosed: BTreeSet<u64>;
+        readonly type: 'Open' | 'Closed';
+    }
+    /** @name PalletProposalsCodexRawEvent (204) */
+    interface PalletProposalsCodexRawEvent extends Enum {
+        readonly isProposalCreated: boolean;
+        readonly asProposalCreated: ITuple<[u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
+        readonly type: 'ProposalCreated';
+    }
+    /** @name PalletProposalsCodexGeneralProposalParams (205) */
+    interface PalletProposalsCodexGeneralProposalParams extends Struct {
+        readonly memberId: u64;
+        readonly title: Bytes;
+        readonly description: Bytes;
+        readonly stakingAccountId: Option<AccountId32>;
+        readonly exactExecutionBlock: Option<u32>;
+    }
+    /** @name PalletProposalsCodexProposalDetails (206) */
+    interface PalletProposalsCodexProposalDetails extends Enum {
+        readonly isSignal: boolean;
+        readonly asSignal: Bytes;
+        readonly isRuntimeUpgrade: boolean;
+        readonly asRuntimeUpgrade: Bytes;
+        readonly isFundingRequest: boolean;
+        readonly asFundingRequest: Vec<PalletCommonFundingRequestParameters>;
+        readonly isSetMaxValidatorCount: boolean;
+        readonly asSetMaxValidatorCount: u32;
+        readonly isCreateWorkingGroupLeadOpening: boolean;
+        readonly asCreateWorkingGroupLeadOpening: PalletProposalsCodexCreateOpeningParameters;
+        readonly isFillWorkingGroupLeadOpening: boolean;
+        readonly asFillWorkingGroupLeadOpening: PalletProposalsCodexFillOpeningParameters;
+        readonly isUpdateWorkingGroupBudget: boolean;
+        readonly asUpdateWorkingGroupBudget: ITuple<[u128, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletCommonBalanceKind]>;
+        readonly isDecreaseWorkingGroupLeadStake: boolean;
+        readonly asDecreaseWorkingGroupLeadStake: ITuple<[u64, u128, PalletCommonWorkingGroupIterableEnumsWorkingGroup]>;
+        readonly isSlashWorkingGroupLead: boolean;
+        readonly asSlashWorkingGroupLead: ITuple<[u64, u128, PalletCommonWorkingGroupIterableEnumsWorkingGroup]>;
+        readonly isSetWorkingGroupLeadReward: boolean;
+        readonly asSetWorkingGroupLeadReward: ITuple<[u64, Option<u128>, PalletCommonWorkingGroupIterableEnumsWorkingGroup]>;
+        readonly isTerminateWorkingGroupLead: boolean;
+        readonly asTerminateWorkingGroupLead: PalletProposalsCodexTerminateRoleParameters;
+        readonly isAmendConstitution: boolean;
+        readonly asAmendConstitution: Bytes;
+        readonly isCancelWorkingGroupLeadOpening: boolean;
+        readonly asCancelWorkingGroupLeadOpening: ITuple<[u64, PalletCommonWorkingGroupIterableEnumsWorkingGroup]>;
+        readonly isSetMembershipPrice: boolean;
+        readonly asSetMembershipPrice: u128;
+        readonly isSetCouncilBudgetIncrement: boolean;
+        readonly asSetCouncilBudgetIncrement: u128;
+        readonly isSetCouncilorReward: boolean;
+        readonly asSetCouncilorReward: u128;
+        readonly isSetInitialInvitationBalance: boolean;
+        readonly asSetInitialInvitationBalance: u128;
+        readonly isSetInitialInvitationCount: boolean;
+        readonly asSetInitialInvitationCount: u32;
+        readonly isSetMembershipLeadInvitationQuota: boolean;
+        readonly asSetMembershipLeadInvitationQuota: u32;
+        readonly isSetReferralCut: boolean;
+        readonly asSetReferralCut: u8;
+        readonly isVetoProposal: boolean;
+        readonly asVetoProposal: u32;
+        readonly isUpdateGlobalNftLimit: boolean;
+        readonly asUpdateGlobalNftLimit: ITuple<[PalletContentNftLimitPeriod, u64]>;
+        readonly isUpdateChannelPayouts: boolean;
+        readonly asUpdateChannelPayouts: PalletContentUpdateChannelPayoutsParametersRecord;
+        readonly isUpdateMaxYearlyPatronageRate: boolean;
+        readonly asUpdateMaxYearlyPatronageRate: Permill;
+        readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts' | 'UpdateMaxYearlyPatronageRate';
+    }
+    /** @name PalletCommonFundingRequestParameters (208) */
+    interface PalletCommonFundingRequestParameters extends Struct {
+        readonly account: AccountId32;
+        readonly amount: u128;
+    }
+    /** @name PalletProposalsCodexCreateOpeningParameters (209) */
+    interface PalletProposalsCodexCreateOpeningParameters extends Struct {
+        readonly description: Bytes;
+        readonly stakePolicy: PalletWorkingGroupStakePolicy;
+        readonly rewardPerBlock: Option<u128>;
+        readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+    }
+    /** @name PalletWorkingGroupStakePolicy (210) */
+    interface PalletWorkingGroupStakePolicy extends Struct {
+        readonly stakeAmount: u128;
+        readonly leavingUnstakingPeriod: u32;
+    }
+    /** @name PalletProposalsCodexFillOpeningParameters (211) */
+    interface PalletProposalsCodexFillOpeningParameters extends Struct {
+        readonly openingId: u64;
+        readonly applicationId: u64;
+        readonly workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+    }
+    /** @name PalletProposalsCodexTerminateRoleParameters (212) */
+    interface PalletProposalsCodexTerminateRoleParameters extends Struct {
+        readonly workerId: u64;
+        readonly slashingAmount: Option<u128>;
+        readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+    }
+    /** @name PalletWorkingGroupRawEventInstance1 (213) */
+    interface PalletWorkingGroupRawEventInstance1 extends Enum {
+        readonly isOpeningAdded: boolean;
+        readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+        readonly isAppliedOnOpening: boolean;
+        readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+        readonly isOpeningFilled: boolean;
+        readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+        readonly isLeaderSet: boolean;
+        readonly asLeaderSet: u64;
+        readonly isWorkerRoleAccountUpdated: boolean;
+        readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isLeaderUnset: boolean;
+        readonly isWorkerExited: boolean;
+        readonly asWorkerExited: u64;
+        readonly isWorkerStartedLeaving: boolean;
+        readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+        readonly isTerminatedWorker: boolean;
+        readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isTerminatedLeader: boolean;
+        readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isStakeSlashed: boolean;
+        readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+        readonly isStakeDecreased: boolean;
+        readonly asStakeDecreased: ITuple<[u64, u128]>;
+        readonly isStakeIncreased: boolean;
+        readonly asStakeIncreased: ITuple<[u64, u128]>;
+        readonly isApplicationWithdrawn: boolean;
+        readonly asApplicationWithdrawn: u64;
+        readonly isOpeningCanceled: boolean;
+        readonly asOpeningCanceled: u64;
+        readonly isBudgetSet: boolean;
+        readonly asBudgetSet: u128;
+        readonly isWorkerRewardAccountUpdated: boolean;
+        readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isWorkerRewardAmountUpdated: boolean;
+        readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+        readonly isStatusTextChanged: boolean;
+        readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+        readonly isBudgetSpending: boolean;
+        readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+        readonly isRewardPaid: boolean;
+        readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+        readonly isNewMissedRewardLevelReached: boolean;
+        readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+        readonly isWorkingGroupBudgetFunded: boolean;
+        readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isLeadRemarked: boolean;
+        readonly asLeadRemarked: Bytes;
+        readonly isWorkerRemarked: boolean;
+        readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+    }
+    /** @name PalletWorkingGroupOpeningType (217) */
+    interface PalletWorkingGroupOpeningType extends Enum {
+        readonly isLeader: boolean;
+        readonly isRegular: boolean;
+        readonly type: 'Leader' | 'Regular';
+    }
+    /** @name PalletWorkingGroupApplyOnOpeningParams (218) */
+    interface PalletWorkingGroupApplyOnOpeningParams extends Struct {
+        readonly memberId: u64;
+        readonly openingId: u64;
+        readonly roleAccountId: AccountId32;
+        readonly rewardAccountId: AccountId32;
+        readonly description: Bytes;
+        readonly stakeParameters: PalletWorkingGroupStakeParameters;
+    }
+    /** @name PalletWorkingGroupStakeParameters (219) */
+    interface PalletWorkingGroupStakeParameters extends Struct {
+        readonly stake: u128;
+        readonly stakingAccountId: AccountId32;
+    }
+    /** @name PalletWorkingGroupInstance1 (220) */
+    type PalletWorkingGroupInstance1 = Null;
+    /** @name PalletWorkingGroupRewardPaymentType (221) */
+    interface PalletWorkingGroupRewardPaymentType extends Enum {
+        readonly isMissedReward: boolean;
+        readonly isRegularReward: boolean;
+        readonly type: 'MissedReward' | 'RegularReward';
+    }
+    /** @name PalletWorkingGroupRawEventInstance2 (222) */
+    interface PalletWorkingGroupRawEventInstance2 extends Enum {
+        readonly isOpeningAdded: boolean;
+        readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+        readonly isAppliedOnOpening: boolean;
+        readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+        readonly isOpeningFilled: boolean;
+        readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+        readonly isLeaderSet: boolean;
+        readonly asLeaderSet: u64;
+        readonly isWorkerRoleAccountUpdated: boolean;
+        readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isLeaderUnset: boolean;
+        readonly isWorkerExited: boolean;
+        readonly asWorkerExited: u64;
+        readonly isWorkerStartedLeaving: boolean;
+        readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+        readonly isTerminatedWorker: boolean;
+        readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isTerminatedLeader: boolean;
+        readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isStakeSlashed: boolean;
+        readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+        readonly isStakeDecreased: boolean;
+        readonly asStakeDecreased: ITuple<[u64, u128]>;
+        readonly isStakeIncreased: boolean;
+        readonly asStakeIncreased: ITuple<[u64, u128]>;
+        readonly isApplicationWithdrawn: boolean;
+        readonly asApplicationWithdrawn: u64;
+        readonly isOpeningCanceled: boolean;
+        readonly asOpeningCanceled: u64;
+        readonly isBudgetSet: boolean;
+        readonly asBudgetSet: u128;
+        readonly isWorkerRewardAccountUpdated: boolean;
+        readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isWorkerRewardAmountUpdated: boolean;
+        readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+        readonly isStatusTextChanged: boolean;
+        readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+        readonly isBudgetSpending: boolean;
+        readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+        readonly isRewardPaid: boolean;
+        readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+        readonly isNewMissedRewardLevelReached: boolean;
+        readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+        readonly isWorkingGroupBudgetFunded: boolean;
+        readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isLeadRemarked: boolean;
+        readonly asLeadRemarked: Bytes;
+        readonly isWorkerRemarked: boolean;
+        readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+    }
+    /** @name PalletWorkingGroupInstance2 (223) */
+    type PalletWorkingGroupInstance2 = Null;
+    /** @name PalletWorkingGroupRawEventInstance3 (224) */
+    interface PalletWorkingGroupRawEventInstance3 extends Enum {
+        readonly isOpeningAdded: boolean;
+        readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+        readonly isAppliedOnOpening: boolean;
+        readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+        readonly isOpeningFilled: boolean;
+        readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+        readonly isLeaderSet: boolean;
+        readonly asLeaderSet: u64;
+        readonly isWorkerRoleAccountUpdated: boolean;
+        readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isLeaderUnset: boolean;
+        readonly isWorkerExited: boolean;
+        readonly asWorkerExited: u64;
+        readonly isWorkerStartedLeaving: boolean;
+        readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+        readonly isTerminatedWorker: boolean;
+        readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isTerminatedLeader: boolean;
+        readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isStakeSlashed: boolean;
+        readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+        readonly isStakeDecreased: boolean;
+        readonly asStakeDecreased: ITuple<[u64, u128]>;
+        readonly isStakeIncreased: boolean;
+        readonly asStakeIncreased: ITuple<[u64, u128]>;
+        readonly isApplicationWithdrawn: boolean;
+        readonly asApplicationWithdrawn: u64;
+        readonly isOpeningCanceled: boolean;
+        readonly asOpeningCanceled: u64;
+        readonly isBudgetSet: boolean;
+        readonly asBudgetSet: u128;
+        readonly isWorkerRewardAccountUpdated: boolean;
+        readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isWorkerRewardAmountUpdated: boolean;
+        readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+        readonly isStatusTextChanged: boolean;
+        readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+        readonly isBudgetSpending: boolean;
+        readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+        readonly isRewardPaid: boolean;
+        readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+        readonly isNewMissedRewardLevelReached: boolean;
+        readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+        readonly isWorkingGroupBudgetFunded: boolean;
+        readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isLeadRemarked: boolean;
+        readonly asLeadRemarked: Bytes;
+        readonly isWorkerRemarked: boolean;
+        readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+    }
+    /** @name PalletWorkingGroupInstance3 (225) */
+    type PalletWorkingGroupInstance3 = Null;
+    /** @name PalletWorkingGroupRawEventInstance4 (226) */
+    interface PalletWorkingGroupRawEventInstance4 extends Enum {
+        readonly isOpeningAdded: boolean;
+        readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+        readonly isAppliedOnOpening: boolean;
+        readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+        readonly isOpeningFilled: boolean;
+        readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+        readonly isLeaderSet: boolean;
+        readonly asLeaderSet: u64;
+        readonly isWorkerRoleAccountUpdated: boolean;
+        readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isLeaderUnset: boolean;
+        readonly isWorkerExited: boolean;
+        readonly asWorkerExited: u64;
+        readonly isWorkerStartedLeaving: boolean;
+        readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+        readonly isTerminatedWorker: boolean;
+        readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isTerminatedLeader: boolean;
+        readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isStakeSlashed: boolean;
+        readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+        readonly isStakeDecreased: boolean;
+        readonly asStakeDecreased: ITuple<[u64, u128]>;
+        readonly isStakeIncreased: boolean;
+        readonly asStakeIncreased: ITuple<[u64, u128]>;
+        readonly isApplicationWithdrawn: boolean;
+        readonly asApplicationWithdrawn: u64;
+        readonly isOpeningCanceled: boolean;
+        readonly asOpeningCanceled: u64;
+        readonly isBudgetSet: boolean;
+        readonly asBudgetSet: u128;
+        readonly isWorkerRewardAccountUpdated: boolean;
+        readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isWorkerRewardAmountUpdated: boolean;
+        readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+        readonly isStatusTextChanged: boolean;
+        readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+        readonly isBudgetSpending: boolean;
+        readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+        readonly isRewardPaid: boolean;
+        readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+        readonly isNewMissedRewardLevelReached: boolean;
+        readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+        readonly isWorkingGroupBudgetFunded: boolean;
+        readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isLeadRemarked: boolean;
+        readonly asLeadRemarked: Bytes;
+        readonly isWorkerRemarked: boolean;
+        readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+    }
+    /** @name PalletWorkingGroupInstance4 (227) */
+    type PalletWorkingGroupInstance4 = Null;
+    /** @name PalletWorkingGroupRawEventInstance5 (228) */
+    interface PalletWorkingGroupRawEventInstance5 extends Enum {
+        readonly isOpeningAdded: boolean;
+        readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+        readonly isAppliedOnOpening: boolean;
+        readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+        readonly isOpeningFilled: boolean;
+        readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+        readonly isLeaderSet: boolean;
+        readonly asLeaderSet: u64;
+        readonly isWorkerRoleAccountUpdated: boolean;
+        readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isLeaderUnset: boolean;
+        readonly isWorkerExited: boolean;
+        readonly asWorkerExited: u64;
+        readonly isWorkerStartedLeaving: boolean;
+        readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+        readonly isTerminatedWorker: boolean;
+        readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isTerminatedLeader: boolean;
+        readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isStakeSlashed: boolean;
+        readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+        readonly isStakeDecreased: boolean;
+        readonly asStakeDecreased: ITuple<[u64, u128]>;
+        readonly isStakeIncreased: boolean;
+        readonly asStakeIncreased: ITuple<[u64, u128]>;
+        readonly isApplicationWithdrawn: boolean;
+        readonly asApplicationWithdrawn: u64;
+        readonly isOpeningCanceled: boolean;
+        readonly asOpeningCanceled: u64;
+        readonly isBudgetSet: boolean;
+        readonly asBudgetSet: u128;
+        readonly isWorkerRewardAccountUpdated: boolean;
+        readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isWorkerRewardAmountUpdated: boolean;
+        readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+        readonly isStatusTextChanged: boolean;
+        readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+        readonly isBudgetSpending: boolean;
+        readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+        readonly isRewardPaid: boolean;
+        readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+        readonly isNewMissedRewardLevelReached: boolean;
+        readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+        readonly isWorkingGroupBudgetFunded: boolean;
+        readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isLeadRemarked: boolean;
+        readonly asLeadRemarked: Bytes;
+        readonly isWorkerRemarked: boolean;
+        readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+    }
+    /** @name PalletWorkingGroupInstance5 (229) */
+    type PalletWorkingGroupInstance5 = Null;
+    /** @name PalletWorkingGroupRawEventInstance6 (230) */
+    interface PalletWorkingGroupRawEventInstance6 extends Enum {
+        readonly isOpeningAdded: boolean;
+        readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+        readonly isAppliedOnOpening: boolean;
+        readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+        readonly isOpeningFilled: boolean;
+        readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+        readonly isLeaderSet: boolean;
+        readonly asLeaderSet: u64;
+        readonly isWorkerRoleAccountUpdated: boolean;
+        readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isLeaderUnset: boolean;
+        readonly isWorkerExited: boolean;
+        readonly asWorkerExited: u64;
+        readonly isWorkerStartedLeaving: boolean;
+        readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+        readonly isTerminatedWorker: boolean;
+        readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isTerminatedLeader: boolean;
+        readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isStakeSlashed: boolean;
+        readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+        readonly isStakeDecreased: boolean;
+        readonly asStakeDecreased: ITuple<[u64, u128]>;
+        readonly isStakeIncreased: boolean;
+        readonly asStakeIncreased: ITuple<[u64, u128]>;
+        readonly isApplicationWithdrawn: boolean;
+        readonly asApplicationWithdrawn: u64;
+        readonly isOpeningCanceled: boolean;
+        readonly asOpeningCanceled: u64;
+        readonly isBudgetSet: boolean;
+        readonly asBudgetSet: u128;
+        readonly isWorkerRewardAccountUpdated: boolean;
+        readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isWorkerRewardAmountUpdated: boolean;
+        readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+        readonly isStatusTextChanged: boolean;
+        readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+        readonly isBudgetSpending: boolean;
+        readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+        readonly isRewardPaid: boolean;
+        readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+        readonly isNewMissedRewardLevelReached: boolean;
+        readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+        readonly isWorkingGroupBudgetFunded: boolean;
+        readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isLeadRemarked: boolean;
+        readonly asLeadRemarked: Bytes;
+        readonly isWorkerRemarked: boolean;
+        readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+    }
+    /** @name PalletWorkingGroupInstance6 (231) */
+    type PalletWorkingGroupInstance6 = Null;
+    /** @name PalletWorkingGroupRawEventInstance7 (232) */
+    interface PalletWorkingGroupRawEventInstance7 extends Enum {
+        readonly isOpeningAdded: boolean;
+        readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+        readonly isAppliedOnOpening: boolean;
+        readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+        readonly isOpeningFilled: boolean;
+        readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+        readonly isLeaderSet: boolean;
+        readonly asLeaderSet: u64;
+        readonly isWorkerRoleAccountUpdated: boolean;
+        readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isLeaderUnset: boolean;
+        readonly isWorkerExited: boolean;
+        readonly asWorkerExited: u64;
+        readonly isWorkerStartedLeaving: boolean;
+        readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+        readonly isTerminatedWorker: boolean;
+        readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isTerminatedLeader: boolean;
+        readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isStakeSlashed: boolean;
+        readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+        readonly isStakeDecreased: boolean;
+        readonly asStakeDecreased: ITuple<[u64, u128]>;
+        readonly isStakeIncreased: boolean;
+        readonly asStakeIncreased: ITuple<[u64, u128]>;
+        readonly isApplicationWithdrawn: boolean;
+        readonly asApplicationWithdrawn: u64;
+        readonly isOpeningCanceled: boolean;
+        readonly asOpeningCanceled: u64;
+        readonly isBudgetSet: boolean;
+        readonly asBudgetSet: u128;
+        readonly isWorkerRewardAccountUpdated: boolean;
+        readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isWorkerRewardAmountUpdated: boolean;
+        readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+        readonly isStatusTextChanged: boolean;
+        readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+        readonly isBudgetSpending: boolean;
+        readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+        readonly isRewardPaid: boolean;
+        readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+        readonly isNewMissedRewardLevelReached: boolean;
+        readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+        readonly isWorkingGroupBudgetFunded: boolean;
+        readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isLeadRemarked: boolean;
+        readonly asLeadRemarked: Bytes;
+        readonly isWorkerRemarked: boolean;
+        readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+    }
+    /** @name PalletWorkingGroupInstance7 (233) */
+    type PalletWorkingGroupInstance7 = Null;
+    /** @name PalletWorkingGroupRawEventInstance8 (234) */
+    interface PalletWorkingGroupRawEventInstance8 extends Enum {
+        readonly isOpeningAdded: boolean;
+        readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+        readonly isAppliedOnOpening: boolean;
+        readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+        readonly isOpeningFilled: boolean;
+        readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+        readonly isLeaderSet: boolean;
+        readonly asLeaderSet: u64;
+        readonly isWorkerRoleAccountUpdated: boolean;
+        readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isLeaderUnset: boolean;
+        readonly isWorkerExited: boolean;
+        readonly asWorkerExited: u64;
+        readonly isWorkerStartedLeaving: boolean;
+        readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+        readonly isTerminatedWorker: boolean;
+        readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isTerminatedLeader: boolean;
+        readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isStakeSlashed: boolean;
+        readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+        readonly isStakeDecreased: boolean;
+        readonly asStakeDecreased: ITuple<[u64, u128]>;
+        readonly isStakeIncreased: boolean;
+        readonly asStakeIncreased: ITuple<[u64, u128]>;
+        readonly isApplicationWithdrawn: boolean;
+        readonly asApplicationWithdrawn: u64;
+        readonly isOpeningCanceled: boolean;
+        readonly asOpeningCanceled: u64;
+        readonly isBudgetSet: boolean;
+        readonly asBudgetSet: u128;
+        readonly isWorkerRewardAccountUpdated: boolean;
+        readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isWorkerRewardAmountUpdated: boolean;
+        readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+        readonly isStatusTextChanged: boolean;
+        readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+        readonly isBudgetSpending: boolean;
+        readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+        readonly isRewardPaid: boolean;
+        readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+        readonly isNewMissedRewardLevelReached: boolean;
+        readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+        readonly isWorkingGroupBudgetFunded: boolean;
+        readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isLeadRemarked: boolean;
+        readonly asLeadRemarked: Bytes;
+        readonly isWorkerRemarked: boolean;
+        readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+    }
+    /** @name PalletWorkingGroupInstance8 (235) */
+    type PalletWorkingGroupInstance8 = Null;
+    /** @name PalletWorkingGroupRawEventInstance9 (236) */
+    interface PalletWorkingGroupRawEventInstance9 extends Enum {
+        readonly isOpeningAdded: boolean;
+        readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+        readonly isAppliedOnOpening: boolean;
+        readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+        readonly isOpeningFilled: boolean;
+        readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+        readonly isLeaderSet: boolean;
+        readonly asLeaderSet: u64;
+        readonly isWorkerRoleAccountUpdated: boolean;
+        readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isLeaderUnset: boolean;
+        readonly isWorkerExited: boolean;
+        readonly asWorkerExited: u64;
+        readonly isWorkerStartedLeaving: boolean;
+        readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+        readonly isTerminatedWorker: boolean;
+        readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isTerminatedLeader: boolean;
+        readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+        readonly isStakeSlashed: boolean;
+        readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+        readonly isStakeDecreased: boolean;
+        readonly asStakeDecreased: ITuple<[u64, u128]>;
+        readonly isStakeIncreased: boolean;
+        readonly asStakeIncreased: ITuple<[u64, u128]>;
+        readonly isApplicationWithdrawn: boolean;
+        readonly asApplicationWithdrawn: u64;
+        readonly isOpeningCanceled: boolean;
+        readonly asOpeningCanceled: u64;
+        readonly isBudgetSet: boolean;
+        readonly asBudgetSet: u128;
+        readonly isWorkerRewardAccountUpdated: boolean;
+        readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+        readonly isWorkerRewardAmountUpdated: boolean;
+        readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+        readonly isStatusTextChanged: boolean;
+        readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+        readonly isBudgetSpending: boolean;
+        readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+        readonly isRewardPaid: boolean;
+        readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+        readonly isNewMissedRewardLevelReached: boolean;
+        readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+        readonly isWorkingGroupBudgetFunded: boolean;
+        readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+        readonly isLeadRemarked: boolean;
+        readonly asLeadRemarked: Bytes;
+        readonly isWorkerRemarked: boolean;
+        readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+        readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+    }
+    /** @name PalletWorkingGroupInstance9 (237) */
+    type PalletWorkingGroupInstance9 = Null;
+    /** @name FrameSystemPhase (238) */
+    interface FrameSystemPhase extends Enum {
+        readonly isApplyExtrinsic: boolean;
+        readonly asApplyExtrinsic: u32;
+        readonly isFinalization: boolean;
+        readonly isInitialization: boolean;
+        readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
+    }
+    /** @name FrameSystemLastRuntimeUpgradeInfo (242) */
+    interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
+        readonly specVersion: Compact<u32>;
+        readonly specName: Text;
+    }
+    /** @name FrameSystemCall (245) */
+    interface FrameSystemCall extends Enum {
+        readonly isFillBlock: boolean;
+        readonly asFillBlock: {
+            readonly ratio: Perbill;
+        } & Struct;
+        readonly isRemark: boolean;
+        readonly asRemark: {
+            readonly remark: Bytes;
+        } & Struct;
+        readonly isSetHeapPages: boolean;
+        readonly asSetHeapPages: {
+            readonly pages: u64;
+        } & Struct;
+        readonly isSetCode: boolean;
+        readonly asSetCode: {
+            readonly code: Bytes;
+        } & Struct;
+        readonly isSetCodeWithoutChecks: boolean;
+        readonly asSetCodeWithoutChecks: {
+            readonly code: Bytes;
+        } & Struct;
+        readonly isSetStorage: boolean;
+        readonly asSetStorage: {
+            readonly items: Vec<ITuple<[Bytes, Bytes]>>;
+        } & Struct;
+        readonly isKillStorage: boolean;
+        readonly asKillStorage: {
+            readonly keys_: Vec<Bytes>;
+        } & Struct;
+        readonly isKillPrefix: boolean;
+        readonly asKillPrefix: {
+            readonly prefix: Bytes;
+            readonly subkeys: u32;
+        } & Struct;
+        readonly isRemarkWithEvent: boolean;
+        readonly asRemarkWithEvent: {
+            readonly remark: Bytes;
+        } & Struct;
+        readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
+    }
+    /** @name FrameSystemLimitsBlockWeights (248) */
+    interface FrameSystemLimitsBlockWeights extends Struct {
+        readonly baseBlock: u64;
+        readonly maxBlock: u64;
+        readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
+    }
+    /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (249) */
+    interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
+        readonly normal: FrameSystemLimitsWeightsPerClass;
+        readonly operational: FrameSystemLimitsWeightsPerClass;
+        readonly mandatory: FrameSystemLimitsWeightsPerClass;
+    }
+    /** @name FrameSystemLimitsWeightsPerClass (250) */
+    interface FrameSystemLimitsWeightsPerClass extends Struct {
+        readonly baseExtrinsic: u64;
+        readonly maxExtrinsic: Option<u64>;
+        readonly maxTotal: Option<u64>;
+        readonly reserved: Option<u64>;
+    }
+    /** @name FrameSystemLimitsBlockLength (251) */
+    interface FrameSystemLimitsBlockLength extends Struct {
+        readonly max: FrameSupportWeightsPerDispatchClassU32;
+    }
+    /** @name FrameSupportWeightsPerDispatchClassU32 (252) */
+    interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
+        readonly normal: u32;
+        readonly operational: u32;
+        readonly mandatory: u32;
+    }
+    /** @name FrameSupportWeightsRuntimeDbWeight (253) */
+    interface FrameSupportWeightsRuntimeDbWeight extends Struct {
+        readonly read: u64;
+        readonly write: u64;
+    }
+    /** @name SpVersionRuntimeVersion (254) */
+    interface SpVersionRuntimeVersion extends Struct {
+        readonly specName: Text;
+        readonly implName: Text;
+        readonly authoringVersion: u32;
+        readonly specVersion: u32;
+        readonly implVersion: u32;
+        readonly apis: Vec<ITuple<[U8aFixed, u32]>>;
+        readonly transactionVersion: u32;
+        readonly stateVersion: u8;
+    }
+    /** @name FrameSystemError (260) */
+    interface FrameSystemError extends Enum {
+        readonly isInvalidSpecName: boolean;
+        readonly isSpecVersionNeedsToIncrease: boolean;
+        readonly isFailedToExtractRuntimeVersion: boolean;
+        readonly isNonDefaultComposite: boolean;
+        readonly isNonZeroRefCount: boolean;
+        readonly isCallFiltered: boolean;
+        readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
+    }
+    /** @name PalletUtilityCall (261) */
+    interface PalletUtilityCall extends Enum {
+        readonly isBatch: boolean;
+        readonly asBatch: {
+            readonly calls: Vec<Call>;
+        } & Struct;
+        readonly isAsDerivative: boolean;
+        readonly asAsDerivative: {
+            readonly index: u16;
+            readonly call: Call;
+        } & Struct;
+        readonly isBatchAll: boolean;
+        readonly asBatchAll: {
+            readonly calls: Vec<Call>;
+        } & Struct;
+        readonly isDispatchAs: boolean;
+        readonly asDispatchAs: {
+            readonly asOrigin: JoystreamNodeRuntimeOriginCaller;
+            readonly call: Call;
+        } & Struct;
+        readonly isForceBatch: boolean;
+        readonly asForceBatch: {
+            readonly calls: Vec<Call>;
+        } & Struct;
+        readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
+    }
+    /** @name PalletBabeCall (264) */
+    interface PalletBabeCall extends Enum {
+        readonly isReportEquivocation: boolean;
+        readonly asReportEquivocation: {
+            readonly equivocationProof: SpConsensusSlotsEquivocationProof;
+            readonly keyOwnerProof: SpSessionMembershipProof;
+        } & Struct;
+        readonly isReportEquivocationUnsigned: boolean;
+        readonly asReportEquivocationUnsigned: {
+            readonly equivocationProof: SpConsensusSlotsEquivocationProof;
+            readonly keyOwnerProof: SpSessionMembershipProof;
+        } & Struct;
+        readonly isPlanConfigChange: boolean;
+        readonly asPlanConfigChange: {
+            readonly config: SpConsensusBabeDigestsNextConfigDescriptor;
+        } & Struct;
+        readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'PlanConfigChange';
+    }
+    /** @name SpConsensusSlotsEquivocationProof (265) */
+    interface SpConsensusSlotsEquivocationProof extends Struct {
+        readonly offender: SpConsensusBabeAppPublic;
+        readonly slot: u64;
+        readonly firstHeader: SpRuntimeHeader;
+        readonly secondHeader: SpRuntimeHeader;
+    }
+    /** @name SpRuntimeHeader (266) */
+    interface SpRuntimeHeader extends Struct {
+        readonly parentHash: H256;
+        readonly number: Compact<u32>;
+        readonly stateRoot: H256;
+        readonly extrinsicsRoot: H256;
+        readonly digest: SpRuntimeDigest;
+    }
+    /** @name SpRuntimeBlakeTwo256 (267) */
+    type SpRuntimeBlakeTwo256 = Null;
+    /** @name SpConsensusBabeAppPublic (268) */
+    interface SpConsensusBabeAppPublic extends SpCoreSr25519Public {
+    }
+    /** @name SpSessionMembershipProof (270) */
+    interface SpSessionMembershipProof extends Struct {
+        readonly session: u32;
+        readonly trieNodes: Vec<Bytes>;
+        readonly validatorCount: u32;
+    }
+    /** @name SpConsensusBabeDigestsNextConfigDescriptor (271) */
+    interface SpConsensusBabeDigestsNextConfigDescriptor extends Enum {
+        readonly isV1: boolean;
+        readonly asV1: {
+            readonly c: ITuple<[u64, u64]>;
+            readonly allowedSlots: SpConsensusBabeAllowedSlots;
+        } & Struct;
+        readonly type: 'V1';
+    }
+    /** @name SpConsensusBabeAllowedSlots (272) */
+    interface SpConsensusBabeAllowedSlots extends Enum {
+        readonly isPrimarySlots: boolean;
+        readonly isPrimaryAndSecondaryPlainSlots: boolean;
+        readonly isPrimaryAndSecondaryVRFSlots: boolean;
+        readonly type: 'PrimarySlots' | 'PrimaryAndSecondaryPlainSlots' | 'PrimaryAndSecondaryVRFSlots';
+    }
+    /** @name PalletTimestampCall (273) */
+    interface PalletTimestampCall extends Enum {
+        readonly isSet: boolean;
+        readonly asSet: {
+            readonly now: Compact<u64>;
+        } & Struct;
+        readonly type: 'Set';
+    }
+    /** @name PalletAuthorshipCall (275) */
+    interface PalletAuthorshipCall extends Enum {
+        readonly isSetUncles: boolean;
+        readonly asSetUncles: {
+            readonly newUncles: Vec<SpRuntimeHeader>;
+        } & Struct;
+        readonly type: 'SetUncles';
+    }
+    /** @name PalletBalancesCall (277) */
+    interface PalletBalancesCall extends Enum {
+        readonly isTransfer: boolean;
+        readonly asTransfer: {
+            readonly dest: AccountId32;
+            readonly value: Compact<u128>;
+        } & Struct;
+        readonly isSetBalance: boolean;
+        readonly asSetBalance: {
+            readonly who: AccountId32;
+            readonly newFree: Compact<u128>;
+            readonly newReserved: Compact<u128>;
+        } & Struct;
+        readonly isForceTransfer: boolean;
+        readonly asForceTransfer: {
+            readonly source: AccountId32;
+            readonly dest: AccountId32;
+            readonly value: Compact<u128>;
+        } & Struct;
+        readonly isTransferKeepAlive: boolean;
+        readonly asTransferKeepAlive: {
+            readonly dest: AccountId32;
+            readonly value: Compact<u128>;
+        } & Struct;
+        readonly isTransferAll: boolean;
+        readonly asTransferAll: {
+            readonly dest: AccountId32;
+            readonly keepAlive: bool;
+        } & Struct;
+        readonly isForceUnreserve: boolean;
+        readonly asForceUnreserve: {
+            readonly who: AccountId32;
+            readonly amount: u128;
+        } & Struct;
+        readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
+    }
+    /** @name PalletElectionProviderMultiPhaseCall (278) */
+    interface PalletElectionProviderMultiPhaseCall extends Enum {
+        readonly isSubmitUnsigned: boolean;
+        readonly asSubmitUnsigned: {
+            readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
+            readonly witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
+        } & Struct;
+        readonly isSetMinimumUntrustedScore: boolean;
+        readonly asSetMinimumUntrustedScore: {
+            readonly maybeNextScore: Option<SpNposElectionsElectionScore>;
+        } & Struct;
+        readonly isSetEmergencyElectionResult: boolean;
+        readonly asSetEmergencyElectionResult: {
+            readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
+        } & Struct;
+        readonly isSubmit: boolean;
+        readonly asSubmit: {
+            readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
+        } & Struct;
+        readonly isGovernanceFallback: boolean;
+        readonly asGovernanceFallback: {
+            readonly maybeMaxVoters: Option<u32>;
+            readonly maybeMaxTargets: Option<u32>;
+        } & Struct;
+        readonly type: 'SubmitUnsigned' | 'SetMinimumUntrustedScore' | 'SetEmergencyElectionResult' | 'Submit' | 'GovernanceFallback';
+    }
+    /** @name PalletElectionProviderMultiPhaseRawSolution (279) */
+    interface PalletElectionProviderMultiPhaseRawSolution extends Struct {
+        readonly solution: JoystreamNodeRuntimeNposSolution16;
+        readonly score: SpNposElectionsElectionScore;
+        readonly round: u32;
+    }
+    /** @name JoystreamNodeRuntimeNposSolution16 (280) */
+    interface JoystreamNodeRuntimeNposSolution16 extends Struct {
+        readonly votes1: Vec<ITuple<[Compact<u32>, Compact<u16>]>>;
+        readonly votes2: Vec<ITuple<[Compact<u32>, ITuple<[Compact<u16>, Compact<PerU16>]>, Compact<u16>]>>;
+        readonly votes3: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes4: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes5: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes6: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes7: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes8: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes9: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes10: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes11: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes12: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes13: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes14: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes15: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+        readonly votes16: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    }
+    /** @name SpNposElectionsElectionScore (331) */
+    interface SpNposElectionsElectionScore extends Struct {
+        readonly minimalStake: u128;
+        readonly sumStake: u128;
+        readonly sumStakeSquared: u128;
+    }
+    /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (332) */
+    interface PalletElectionProviderMultiPhaseSolutionOrSnapshotSize extends Struct {
+        readonly voters: Compact<u32>;
+        readonly targets: Compact<u32>;
+    }
+    /** @name SpNposElectionsSupport (336) */
+    interface SpNposElectionsSupport extends Struct {
+        readonly total: u128;
+        readonly voters: Vec<ITuple<[AccountId32, u128]>>;
+    }
+    /** @name PalletStakingPalletCall (338) */
+    interface PalletStakingPalletCall extends Enum {
+        readonly isBond: boolean;
+        readonly asBond: {
+            readonly controller: AccountId32;
+            readonly value: Compact<u128>;
+            readonly payee: PalletStakingRewardDestination;
+        } & Struct;
+        readonly isBondExtra: boolean;
+        readonly asBondExtra: {
+            readonly maxAdditional: Compact<u128>;
+        } & Struct;
+        readonly isUnbond: boolean;
+        readonly asUnbond: {
+            readonly value: Compact<u128>;
+        } & Struct;
+        readonly isWithdrawUnbonded: boolean;
+        readonly asWithdrawUnbonded: {
+            readonly numSlashingSpans: u32;
+        } & Struct;
+        readonly isValidate: boolean;
+        readonly asValidate: {
+            readonly prefs: PalletStakingValidatorPrefs;
+        } & Struct;
+        readonly isNominate: boolean;
+        readonly asNominate: {
+            readonly targets: Vec<AccountId32>;
+        } & Struct;
+        readonly isChill: boolean;
+        readonly isSetPayee: boolean;
+        readonly asSetPayee: {
+            readonly payee: PalletStakingRewardDestination;
+        } & Struct;
+        readonly isSetController: boolean;
+        readonly asSetController: {
+            readonly controller: AccountId32;
+        } & Struct;
+        readonly isSetValidatorCount: boolean;
+        readonly asSetValidatorCount: {
+            readonly new_: Compact<u32>;
+        } & Struct;
+        readonly isIncreaseValidatorCount: boolean;
+        readonly asIncreaseValidatorCount: {
+            readonly additional: Compact<u32>;
+        } & Struct;
+        readonly isScaleValidatorCount: boolean;
+        readonly asScaleValidatorCount: {
+            readonly factor: Percent;
+        } & Struct;
+        readonly isForceNoEras: boolean;
+        readonly isForceNewEra: boolean;
+        readonly isSetInvulnerables: boolean;
+        readonly asSetInvulnerables: {
+            readonly invulnerables: Vec<AccountId32>;
+        } & Struct;
+        readonly isForceUnstake: boolean;
+        readonly asForceUnstake: {
+            readonly stash: AccountId32;
+            readonly numSlashingSpans: u32;
+        } & Struct;
+        readonly isForceNewEraAlways: boolean;
+        readonly isCancelDeferredSlash: boolean;
+        readonly asCancelDeferredSlash: {
+            readonly era: u32;
+            readonly slashIndices: Vec<u32>;
+        } & Struct;
+        readonly isPayoutStakers: boolean;
+        readonly asPayoutStakers: {
+            readonly validatorStash: AccountId32;
+            readonly era: u32;
+        } & Struct;
+        readonly isRebond: boolean;
+        readonly asRebond: {
+            readonly value: Compact<u128>;
+        } & Struct;
+        readonly isSetHistoryDepth: boolean;
+        readonly asSetHistoryDepth: {
+            readonly newHistoryDepth: Compact<u32>;
+            readonly eraItemsDeleted: Compact<u32>;
+        } & Struct;
+        readonly isReapStash: boolean;
+        readonly asReapStash: {
+            readonly stash: AccountId32;
+            readonly numSlashingSpans: u32;
+        } & Struct;
+        readonly isKick: boolean;
+        readonly asKick: {
+            readonly who: Vec<AccountId32>;
+        } & Struct;
+        readonly isSetStakingConfigs: boolean;
+        readonly asSetStakingConfigs: {
+            readonly minNominatorBond: PalletStakingPalletConfigOpU128;
+            readonly minValidatorBond: PalletStakingPalletConfigOpU128;
+            readonly maxNominatorCount: PalletStakingPalletConfigOpU32;
+            readonly maxValidatorCount: PalletStakingPalletConfigOpU32;
+            readonly chillThreshold: PalletStakingPalletConfigOpPercent;
+            readonly minCommission: PalletStakingPalletConfigOpPerbill;
+        } & Struct;
+        readonly isChillOther: boolean;
+        readonly asChillOther: {
+            readonly controller: AccountId32;
+        } & Struct;
+        readonly isForceApplyMinCommission: boolean;
+        readonly asForceApplyMinCommission: {
+            readonly validatorStash: AccountId32;
+        } & Struct;
+        readonly type: 'Bond' | 'BondExtra' | 'Unbond' | 'WithdrawUnbonded' | 'Validate' | 'Nominate' | 'Chill' | 'SetPayee' | 'SetController' | 'SetValidatorCount' | 'IncreaseValidatorCount' | 'ScaleValidatorCount' | 'ForceNoEras' | 'ForceNewEra' | 'SetInvulnerables' | 'ForceUnstake' | 'ForceNewEraAlways' | 'CancelDeferredSlash' | 'PayoutStakers' | 'Rebond' | 'SetHistoryDepth' | 'ReapStash' | 'Kick' | 'SetStakingConfigs' | 'ChillOther' | 'ForceApplyMinCommission';
+    }
+    /** @name PalletStakingRewardDestination (339) */
+    interface PalletStakingRewardDestination extends Enum {
+        readonly isStaked: boolean;
+        readonly isStash: boolean;
+        readonly isController: boolean;
+        readonly isAccount: boolean;
+        readonly asAccount: AccountId32;
+        readonly isNone: boolean;
+        readonly type: 'Staked' | 'Stash' | 'Controller' | 'Account' | 'None';
+    }
+    /** @name PalletStakingPalletConfigOpU128 (343) */
+    interface PalletStakingPalletConfigOpU128 extends Enum {
+        readonly isNoop: boolean;
+        readonly isSet: boolean;
+        readonly asSet: u128;
+        readonly isRemove: boolean;
+        readonly type: 'Noop' | 'Set' | 'Remove';
+    }
+    /** @name PalletStakingPalletConfigOpU32 (344) */
+    interface PalletStakingPalletConfigOpU32 extends Enum {
+        readonly isNoop: boolean;
+        readonly isSet: boolean;
+        readonly asSet: u32;
+        readonly isRemove: boolean;
+        readonly type: 'Noop' | 'Set' | 'Remove';
+    }
+    /** @name PalletStakingPalletConfigOpPercent (345) */
+    interface PalletStakingPalletConfigOpPercent extends Enum {
+        readonly isNoop: boolean;
+        readonly isSet: boolean;
+        readonly asSet: Percent;
+        readonly isRemove: boolean;
+        readonly type: 'Noop' | 'Set' | 'Remove';
+    }
+    /** @name PalletStakingPalletConfigOpPerbill (346) */
+    interface PalletStakingPalletConfigOpPerbill extends Enum {
+        readonly isNoop: boolean;
+        readonly isSet: boolean;
+        readonly asSet: Perbill;
+        readonly isRemove: boolean;
+        readonly type: 'Noop' | 'Set' | 'Remove';
+    }
+    /** @name PalletSessionCall (347) */
+    interface PalletSessionCall extends Enum {
+        readonly isSetKeys: boolean;
+        readonly asSetKeys: {
+            readonly keys_: JoystreamNodeRuntimeSessionKeys;
+            readonly proof: Bytes;
+        } & Struct;
+        readonly isPurgeKeys: boolean;
+        readonly type: 'SetKeys' | 'PurgeKeys';
+    }
+    /** @name JoystreamNodeRuntimeSessionKeys (348) */
+    interface JoystreamNodeRuntimeSessionKeys extends Struct {
+        readonly grandpa: SpFinalityGrandpaAppPublic;
+        readonly babe: SpConsensusBabeAppPublic;
+        readonly imOnline: PalletImOnlineSr25519AppSr25519Public;
+        readonly authorityDiscovery: SpAuthorityDiscoveryAppPublic;
+    }
+    /** @name SpAuthorityDiscoveryAppPublic (349) */
+    interface SpAuthorityDiscoveryAppPublic extends SpCoreSr25519Public {
+    }
+    /** @name PalletGrandpaCall (350) */
+    interface PalletGrandpaCall extends Enum {
+        readonly isReportEquivocation: boolean;
+        readonly asReportEquivocation: {
+            readonly equivocationProof: SpFinalityGrandpaEquivocationProof;
+            readonly keyOwnerProof: SpSessionMembershipProof;
+        } & Struct;
+        readonly isReportEquivocationUnsigned: boolean;
+        readonly asReportEquivocationUnsigned: {
+            readonly equivocationProof: SpFinalityGrandpaEquivocationProof;
+            readonly keyOwnerProof: SpSessionMembershipProof;
+        } & Struct;
+        readonly isNoteStalled: boolean;
+        readonly asNoteStalled: {
+            readonly delay: u32;
+            readonly bestFinalizedBlockNumber: u32;
+        } & Struct;
+        readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'NoteStalled';
+    }
+    /** @name SpFinalityGrandpaEquivocationProof (351) */
+    interface SpFinalityGrandpaEquivocationProof extends Struct {
+        readonly setId: u64;
+        readonly equivocation: SpFinalityGrandpaEquivocation;
+    }
+    /** @name SpFinalityGrandpaEquivocation (352) */
+    interface SpFinalityGrandpaEquivocation extends Enum {
+        readonly isPrevote: boolean;
+        readonly asPrevote: FinalityGrandpaEquivocationPrevote;
+        readonly isPrecommit: boolean;
+        readonly asPrecommit: FinalityGrandpaEquivocationPrecommit;
+        readonly type: 'Prevote' | 'Precommit';
+    }
+    /** @name FinalityGrandpaEquivocationPrevote (353) */
+    interface FinalityGrandpaEquivocationPrevote extends Struct {
+        readonly roundNumber: u64;
+        readonly identity: SpFinalityGrandpaAppPublic;
+        readonly first: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
+        readonly second: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
+    }
+    /** @name FinalityGrandpaPrevote (354) */
+    interface FinalityGrandpaPrevote extends Struct {
+        readonly targetHash: H256;
+        readonly targetNumber: u32;
+    }
+    /** @name SpFinalityGrandpaAppSignature (355) */
+    interface SpFinalityGrandpaAppSignature extends SpCoreEd25519Signature {
+    }
+    /** @name SpCoreEd25519Signature (356) */
+    interface SpCoreEd25519Signature extends U8aFixed {
+    }
+    /** @name FinalityGrandpaEquivocationPrecommit (359) */
+    interface FinalityGrandpaEquivocationPrecommit extends Struct {
+        readonly roundNumber: u64;
+        readonly identity: SpFinalityGrandpaAppPublic;
+        readonly first: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
+        readonly second: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
+    }
+    /** @name FinalityGrandpaPrecommit (360) */
+    interface FinalityGrandpaPrecommit extends Struct {
+        readonly targetHash: H256;
+        readonly targetNumber: u32;
+    }
+    /** @name PalletImOnlineCall (362) */
+    interface PalletImOnlineCall extends Enum {
+        readonly isHeartbeat: boolean;
+        readonly asHeartbeat: {
+            readonly heartbeat: PalletImOnlineHeartbeat;
+            readonly signature: PalletImOnlineSr25519AppSr25519Signature;
+        } & Struct;
+        readonly type: 'Heartbeat';
+    }
+    /** @name PalletImOnlineHeartbeat (363) */
+    interface PalletImOnlineHeartbeat extends Struct {
+        readonly blockNumber: u32;
+        readonly networkState: SpCoreOffchainOpaqueNetworkState;
+        readonly sessionIndex: u32;
+        readonly authorityIndex: u32;
+        readonly validatorsLen: u32;
+    }
+    /** @name SpCoreOffchainOpaqueNetworkState (364) */
+    interface SpCoreOffchainOpaqueNetworkState extends Struct {
+        readonly peerId: Bytes;
+        readonly externalAddresses: Vec<Bytes>;
+    }
+    /** @name PalletImOnlineSr25519AppSr25519Signature (368) */
+    interface PalletImOnlineSr25519AppSr25519Signature extends SpCoreSr25519Signature {
+    }
+    /** @name SpCoreSr25519Signature (369) */
+    interface SpCoreSr25519Signature extends U8aFixed {
+    }
+    /** @name PalletBagsListCall (370) */
+    interface PalletBagsListCall extends Enum {
+        readonly isRebag: boolean;
+        readonly asRebag: {
+            readonly dislocated: AccountId32;
+        } & Struct;
+        readonly isPutInFrontOf: boolean;
+        readonly asPutInFrontOf: {
+            readonly lighter: AccountId32;
+        } & Struct;
+        readonly type: 'Rebag' | 'PutInFrontOf';
+    }
+    /** @name PalletVestingCall (371) */
+    interface PalletVestingCall extends Enum {
+        readonly isVest: boolean;
+        readonly isVestOther: boolean;
+        readonly asVestOther: {
+            readonly target: AccountId32;
+        } & Struct;
+        readonly isVestedTransfer: boolean;
+        readonly asVestedTransfer: {
+            readonly target: AccountId32;
+            readonly schedule: PalletVestingVestingInfo;
+        } & Struct;
+        readonly isForceVestedTransfer: boolean;
+        readonly asForceVestedTransfer: {
+            readonly source: AccountId32;
+            readonly target: AccountId32;
+            readonly schedule: PalletVestingVestingInfo;
+        } & Struct;
+        readonly isMergeSchedules: boolean;
+        readonly asMergeSchedules: {
+            readonly schedule1Index: u32;
+            readonly schedule2Index: u32;
+        } & Struct;
+        readonly type: 'Vest' | 'VestOther' | 'VestedTransfer' | 'ForceVestedTransfer' | 'MergeSchedules';
+    }
+    /** @name PalletVestingVestingInfo (372) */
+    interface PalletVestingVestingInfo extends Struct {
+        readonly locked: u128;
+        readonly perBlock: u128;
+        readonly startingBlock: u32;
+    }
+    /** @name PalletMultisigCall (373) */
+    interface PalletMultisigCall extends Enum {
+        readonly isAsMultiThreshold1: boolean;
+        readonly asAsMultiThreshold1: {
+            readonly otherSignatories: Vec<AccountId32>;
+            readonly call: Call;
+        } & Struct;
+        readonly isAsMulti: boolean;
+        readonly asAsMulti: {
+            readonly threshold: u16;
+            readonly otherSignatories: Vec<AccountId32>;
+            readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
+            readonly call: WrapperKeepOpaque<Call>;
+            readonly storeCall: bool;
+            readonly maxWeight: u64;
+        } & Struct;
+        readonly isApproveAsMulti: boolean;
+        readonly asApproveAsMulti: {
+            readonly threshold: u16;
+            readonly otherSignatories: Vec<AccountId32>;
+            readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
+            readonly callHash: U8aFixed;
+            readonly maxWeight: u64;
+        } & Struct;
+        readonly isCancelAsMulti: boolean;
+        readonly asCancelAsMulti: {
+            readonly threshold: u16;
+            readonly otherSignatories: Vec<AccountId32>;
+            readonly timepoint: PalletMultisigTimepoint;
+            readonly callHash: U8aFixed;
+        } & Struct;
+        readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
+    }
+    /** @name PalletCouncilCall (376) */
+    interface PalletCouncilCall extends Enum {
+        readonly isAnnounceCandidacy: boolean;
+        readonly asAnnounceCandidacy: {
+            readonly membershipId: u64;
+            readonly stakingAccountId: AccountId32;
+            readonly rewardAccountId: AccountId32;
+            readonly stake: u128;
+        } & Struct;
+        readonly isReleaseCandidacyStake: boolean;
+        readonly asReleaseCandidacyStake: {
+            readonly membershipId: u64;
+        } & Struct;
+        readonly isWithdrawCandidacy: boolean;
+        readonly asWithdrawCandidacy: {
+            readonly membershipId: u64;
+        } & Struct;
+        readonly isSetCandidacyNote: boolean;
+        readonly asSetCandidacyNote: {
+            readonly membershipId: u64;
+            readonly note: Bytes;
+        } & Struct;
+        readonly isSetBudget: boolean;
+        readonly asSetBudget: {
+            readonly balance: u128;
+        } & Struct;
+        readonly isPlanBudgetRefill: boolean;
+        readonly asPlanBudgetRefill: {
+            readonly nextRefill: u32;
+        } & Struct;
+        readonly isSetBudgetIncrement: boolean;
+        readonly asSetBudgetIncrement: {
+            readonly budgetIncrement: u128;
+        } & Struct;
+        readonly isSetCouncilorReward: boolean;
+        readonly asSetCouncilorReward: {
+            readonly councilorReward: u128;
+        } & Struct;
+        readonly isFundingRequest: boolean;
+        readonly asFundingRequest: {
+            readonly fundingRequests: Vec<PalletCommonFundingRequestParameters>;
+        } & Struct;
+        readonly isFundCouncilBudget: boolean;
+        readonly asFundCouncilBudget: {
+            readonly memberId: u64;
+            readonly amount: u128;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isCouncilorRemark: boolean;
+        readonly asCouncilorRemark: {
+            readonly councilorId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isCandidateRemark: boolean;
+        readonly asCandidateRemark: {
+            readonly candidateId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly type: 'AnnounceCandidacy' | 'ReleaseCandidacyStake' | 'WithdrawCandidacy' | 'SetCandidacyNote' | 'SetBudget' | 'PlanBudgetRefill' | 'SetBudgetIncrement' | 'SetCouncilorReward' | 'FundingRequest' | 'FundCouncilBudget' | 'CouncilorRemark' | 'CandidateRemark';
+    }
+    /** @name PalletReferendumCall (377) */
+    interface PalletReferendumCall extends Enum {
+        readonly isVote: boolean;
+        readonly asVote: {
+            readonly commitment: H256;
+            readonly stake: u128;
+        } & Struct;
+        readonly isRevealVote: boolean;
+        readonly asRevealVote: {
+            readonly salt: Bytes;
+            readonly voteOptionId: u64;
+        } & Struct;
+        readonly isReleaseVoteStake: boolean;
+        readonly isOptOutOfVoting: boolean;
+        readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake' | 'OptOutOfVoting';
+    }
+    /** @name PalletMembershipCall (378) */
+    interface PalletMembershipCall extends Enum {
+        readonly isBuyMembership: boolean;
+        readonly asBuyMembership: {
+            readonly params: PalletMembershipBuyMembershipParameters;
+        } & Struct;
+        readonly isUpdateProfile: boolean;
+        readonly asUpdateProfile: {
+            readonly memberId: u64;
+            readonly handle: Option<Bytes>;
+            readonly metadata: Option<Bytes>;
+        } & Struct;
+        readonly isUpdateAccounts: boolean;
+        readonly asUpdateAccounts: {
+            readonly memberId: u64;
+            readonly newRootAccount: Option<AccountId32>;
+            readonly newControllerAccount: Option<AccountId32>;
+        } & Struct;
+        readonly isUpdateProfileVerification: boolean;
+        readonly asUpdateProfileVerification: {
+            readonly workerId: u64;
+            readonly targetMemberId: u64;
+            readonly isVerified: bool;
+        } & Struct;
+        readonly isSetReferralCut: boolean;
+        readonly asSetReferralCut: {
+            readonly percentValue: u8;
+        } & Struct;
+        readonly isTransferInvites: boolean;
+        readonly asTransferInvites: {
+            readonly sourceMemberId: u64;
+            readonly targetMemberId: u64;
+            readonly numberOfInvites: u32;
+        } & Struct;
+        readonly isInviteMember: boolean;
+        readonly asInviteMember: {
+            readonly params: PalletMembershipInviteMembershipParameters;
+        } & Struct;
+        readonly isGiftMembership: boolean;
+        readonly asGiftMembership: {
+            readonly params: PalletMembershipGiftMembershipParameters;
+        } & Struct;
+        readonly isSetMembershipPrice: boolean;
+        readonly asSetMembershipPrice: {
+            readonly newPrice: u128;
+        } & Struct;
+        readonly isSetLeaderInvitationQuota: boolean;
+        readonly asSetLeaderInvitationQuota: {
+            readonly invitationQuota: u32;
+        } & Struct;
+        readonly isSetInitialInvitationBalance: boolean;
+        readonly asSetInitialInvitationBalance: {
+            readonly newInitialBalance: u128;
+        } & Struct;
+        readonly isSetInitialInvitationCount: boolean;
+        readonly asSetInitialInvitationCount: {
+            readonly newInvitationCount: u32;
+        } & Struct;
+        readonly isAddStakingAccountCandidate: boolean;
+        readonly asAddStakingAccountCandidate: {
+            readonly memberId: u64;
+        } & Struct;
+        readonly isRemoveStakingAccount: boolean;
+        readonly asRemoveStakingAccount: {
+            readonly memberId: u64;
+        } & Struct;
+        readonly isConfirmStakingAccount: boolean;
+        readonly asConfirmStakingAccount: {
+            readonly memberId: u64;
+            readonly stakingAccountId: AccountId32;
+        } & Struct;
+        readonly isMemberRemark: boolean;
+        readonly asMemberRemark: {
+            readonly memberId: u64;
+            readonly msg: Bytes;
+            readonly payment: Option<ITuple<[AccountId32, u128]>>;
+        } & Struct;
+        readonly isCreateMember: boolean;
+        readonly asCreateMember: {
+            readonly params: PalletMembershipCreateMemberParameters;
+        } & Struct;
+        readonly type: 'BuyMembership' | 'UpdateProfile' | 'UpdateAccounts' | 'UpdateProfileVerification' | 'SetReferralCut' | 'TransferInvites' | 'InviteMember' | 'GiftMembership' | 'SetMembershipPrice' | 'SetLeaderInvitationQuota' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'AddStakingAccountCandidate' | 'RemoveStakingAccount' | 'ConfirmStakingAccount' | 'MemberRemark' | 'CreateMember';
+    }
+    /** @name PalletForumCall (379) */
+    interface PalletForumCall extends Enum {
+        readonly isUpdateCategoryMembershipOfModerator: boolean;
+        readonly asUpdateCategoryMembershipOfModerator: {
+            readonly moderatorId: u64;
+            readonly categoryId: u64;
+            readonly newValue: bool;
+        } & Struct;
+        readonly isCreateCategory: boolean;
+        readonly asCreateCategory: {
+            readonly parentCategoryId: Option<u64>;
+            readonly title: Bytes;
+            readonly description: Bytes;
+        } & Struct;
+        readonly isUpdateCategoryArchivalStatus: boolean;
+        readonly asUpdateCategoryArchivalStatus: {
+            readonly actor: PalletForumPrivilegedActor;
+            readonly categoryId: u64;
+            readonly newArchivalStatus: bool;
+        } & Struct;
+        readonly isUpdateCategoryTitle: boolean;
+        readonly asUpdateCategoryTitle: {
+            readonly actor: PalletForumPrivilegedActor;
+            readonly categoryId: u64;
+            readonly title: Bytes;
+        } & Struct;
+        readonly isUpdateCategoryDescription: boolean;
+        readonly asUpdateCategoryDescription: {
+            readonly actor: PalletForumPrivilegedActor;
+            readonly categoryId: u64;
+            readonly description: Bytes;
+        } & Struct;
+        readonly isDeleteCategory: boolean;
+        readonly asDeleteCategory: {
+            readonly actor: PalletForumPrivilegedActor;
+            readonly categoryId: u64;
+        } & Struct;
+        readonly isCreateThread: boolean;
+        readonly asCreateThread: {
+            readonly forumUserId: u64;
+            readonly categoryId: u64;
+            readonly metadata: Bytes;
+            readonly text: Bytes;
+        } & Struct;
+        readonly isEditThreadMetadata: boolean;
+        readonly asEditThreadMetadata: {
+            readonly forumUserId: u64;
+            readonly categoryId: u64;
+            readonly threadId: u64;
+            readonly newMetadata: Bytes;
+        } & Struct;
+        readonly isDeleteThread: boolean;
+        readonly asDeleteThread: {
+            readonly forumUserId: u64;
+            readonly categoryId: u64;
+            readonly threadId: u64;
+            readonly hide: bool;
+        } & Struct;
+        readonly isMoveThreadToCategory: boolean;
+        readonly asMoveThreadToCategory: {
+            readonly actor: PalletForumPrivilegedActor;
+            readonly categoryId: u64;
+            readonly threadId: u64;
+            readonly newCategoryId: u64;
+        } & Struct;
+        readonly isModerateThread: boolean;
+        readonly asModerateThread: {
+            readonly actor: PalletForumPrivilegedActor;
+            readonly categoryId: u64;
+            readonly threadId: u64;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isAddPost: boolean;
+        readonly asAddPost: {
+            readonly forumUserId: u64;
+            readonly categoryId: u64;
+            readonly threadId: u64;
+            readonly text: Bytes;
+            readonly editable: bool;
+        } & Struct;
+        readonly isEditPostText: boolean;
+        readonly asEditPostText: {
+            readonly forumUserId: u64;
+            readonly categoryId: u64;
+            readonly threadId: u64;
+            readonly postId: u64;
+            readonly newText: Bytes;
+        } & Struct;
+        readonly isModeratePost: boolean;
+        readonly asModeratePost: {
+            readonly actor: PalletForumPrivilegedActor;
+            readonly categoryId: u64;
+            readonly threadId: u64;
+            readonly postId: u64;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isDeletePosts: boolean;
+        readonly asDeletePosts: {
+            readonly forumUserId: u64;
+            readonly posts: BTreeMap<PalletForumExtendedPostIdObject, bool>;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isSetStickiedThreads: boolean;
+        readonly asSetStickiedThreads: {
+            readonly actor: PalletForumPrivilegedActor;
+            readonly categoryId: u64;
+            readonly stickiedIds: BTreeSet<u64>;
+        } & Struct;
+        readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
+    }
+    /** @name PalletConstitutionCall (380) */
+    interface PalletConstitutionCall extends Enum {
+        readonly isAmendConstitution: boolean;
+        readonly asAmendConstitution: {
+            readonly constitutionText: Bytes;
+        } & Struct;
+        readonly type: 'AmendConstitution';
+    }
+    /** @name PalletBountyCall (381) */
+    interface PalletBountyCall extends Enum {
+        readonly isCreateBounty: boolean;
+        readonly asCreateBounty: {
+            readonly params: PalletBountyBountyParametersBTreeSet;
+            readonly metadata: Bytes;
+        } & Struct;
+        readonly isFundBounty: boolean;
+        readonly asFundBounty: {
+            readonly funder: PalletBountyBountyActor;
+            readonly bountyId: u64;
+            readonly amount: u128;
+        } & Struct;
+        readonly isTerminateBounty: boolean;
+        readonly asTerminateBounty: {
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isSwitchOracle: boolean;
+        readonly asSwitchOracle: {
+            readonly newOracle: PalletBountyBountyActor;
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isWithdrawFunding: boolean;
+        readonly asWithdrawFunding: {
+            readonly funder: PalletBountyBountyActor;
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isAnnounceWorkEntry: boolean;
+        readonly asAnnounceWorkEntry: {
+            readonly memberId: u64;
+            readonly bountyId: u64;
+            readonly stakingAccountId: AccountId32;
+            readonly workDescription: Bytes;
+        } & Struct;
+        readonly isSubmitWork: boolean;
+        readonly asSubmitWork: {
+            readonly memberId: u64;
+            readonly bountyId: u64;
+            readonly entryId: u64;
+            readonly workData: Bytes;
+        } & Struct;
+        readonly isEndWorkingPeriod: boolean;
+        readonly asEndWorkingPeriod: {
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isSubmitOracleJudgment: boolean;
+        readonly asSubmitOracleJudgment: {
+            readonly bountyId: u64;
+            readonly judgment: BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isWithdrawEntrantStake: boolean;
+        readonly asWithdrawEntrantStake: {
+            readonly memberId: u64;
+            readonly bountyId: u64;
+            readonly entryId: u64;
+        } & Struct;
+        readonly isWithdrawOracleReward: boolean;
+        readonly asWithdrawOracleReward: {
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isContributorRemark: boolean;
+        readonly asContributorRemark: {
+            readonly contributor: PalletBountyBountyActor;
+            readonly bountyId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isOracleRemark: boolean;
+        readonly asOracleRemark: {
+            readonly oracle: PalletBountyBountyActor;
+            readonly bountyId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isEntrantRemark: boolean;
+        readonly asEntrantRemark: {
+            readonly entrantId: u64;
+            readonly bountyId: u64;
+            readonly entryId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isCreatorRemark: boolean;
+        readonly asCreatorRemark: {
+            readonly creator: PalletBountyBountyActor;
+            readonly bountyId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly type: 'CreateBounty' | 'FundBounty' | 'TerminateBounty' | 'SwitchOracle' | 'WithdrawFunding' | 'AnnounceWorkEntry' | 'SubmitWork' | 'EndWorkingPeriod' | 'SubmitOracleJudgment' | 'WithdrawEntrantStake' | 'WithdrawOracleReward' | 'ContributorRemark' | 'OracleRemark' | 'EntrantRemark' | 'CreatorRemark';
+    }
+    /** @name PalletContentCall (383) */
+    interface PalletContentCall extends Enum {
+        readonly isCreateCuratorGroup: boolean;
+        readonly asCreateCuratorGroup: {
+            readonly isActive: bool;
+            readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
+        } & Struct;
+        readonly isUpdateCuratorGroupPermissions: boolean;
+        readonly asUpdateCuratorGroupPermissions: {
+            readonly curatorGroupId: u64;
+            readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
+        } & Struct;
+        readonly isSetCuratorGroupStatus: boolean;
+        readonly asSetCuratorGroupStatus: {
+            readonly curatorGroupId: u64;
+            readonly isActive: bool;
+        } & Struct;
+        readonly isAddCuratorToGroup: boolean;
+        readonly asAddCuratorToGroup: {
+            readonly curatorGroupId: u64;
+            readonly curatorId: u64;
+            readonly permissions: BTreeSet<PalletContentIterableEnumsChannelActionPermission>;
+        } & Struct;
+        readonly isRemoveCuratorFromGroup: boolean;
+        readonly asRemoveCuratorFromGroup: {
+            readonly curatorGroupId: u64;
+            readonly curatorId: u64;
+        } & Struct;
+        readonly isCreateChannel: boolean;
+        readonly asCreateChannel: {
+            readonly channelOwner: PalletContentChannelOwner;
+            readonly params: PalletContentChannelCreationParametersRecord;
+        } & Struct;
+        readonly isUpdateChannel: boolean;
+        readonly asUpdateChannel: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly params: PalletContentChannelUpdateParametersRecord;
+        } & Struct;
+        readonly isUpdateChannelPrivilegeLevel: boolean;
+        readonly asUpdateChannelPrivilegeLevel: {
+            readonly channelId: u64;
+            readonly newPrivilegeLevel: u8;
+        } & Struct;
+        readonly isSetChannelPausedFeaturesAsModerator: boolean;
+        readonly asSetChannelPausedFeaturesAsModerator: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly newPausedFeatures: BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isDeleteChannel: boolean;
+        readonly asDeleteChannel: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly channelBagWitness: PalletContentChannelBagWitness;
+            readonly numObjectsToDelete: u64;
+        } & Struct;
+        readonly isDeleteChannelAssetsAsModerator: boolean;
+        readonly asDeleteChannelAssetsAsModerator: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly assetsToRemove: BTreeSet<u64>;
+            readonly storageBucketsNumWitness: u32;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isDeleteChannelAsModerator: boolean;
+        readonly asDeleteChannelAsModerator: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly channelBagWitness: PalletContentChannelBagWitness;
+            readonly numObjectsToDelete: u64;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isSetChannelVisibilityAsModerator: boolean;
+        readonly asSetChannelVisibilityAsModerator: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly isHidden: bool;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isCreateVideo: boolean;
+        readonly asCreateVideo: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly params: PalletContentVideoCreationParametersRecord;
+        } & Struct;
+        readonly isUpdateVideo: boolean;
+        readonly asUpdateVideo: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly params: PalletContentVideoUpdateParametersRecord;
+        } & Struct;
+        readonly isDeleteVideo: boolean;
+        readonly asDeleteVideo: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly numObjectsToDelete: u64;
+            readonly storageBucketsNumWitness: Option<u32>;
+        } & Struct;
+        readonly isDeleteVideoAssetsAsModerator: boolean;
+        readonly asDeleteVideoAssetsAsModerator: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly storageBucketsNumWitness: u32;
+            readonly assetsToRemove: BTreeSet<u64>;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isDeleteVideoAsModerator: boolean;
+        readonly asDeleteVideoAsModerator: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly storageBucketsNumWitness: Option<u32>;
+            readonly numObjectsToDelete: u64;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isSetVideoVisibilityAsModerator: boolean;
+        readonly asSetVideoVisibilityAsModerator: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly isHidden: bool;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isUpdateChannelPayouts: boolean;
+        readonly asUpdateChannelPayouts: {
+            readonly params: PalletContentUpdateChannelPayoutsParametersRecord;
+            readonly uploaderAccount: AccountId32;
+        } & Struct;
+        readonly isClaimChannelReward: boolean;
+        readonly asClaimChannelReward: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly proof: Vec<PalletCommonMerkleTreeProofElementRecord>;
+            readonly item: PalletContentPullPaymentElement;
+        } & Struct;
+        readonly isWithdrawFromChannelBalance: boolean;
+        readonly asWithdrawFromChannelBalance: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly amount: u128;
+        } & Struct;
+        readonly isUpdateChannelStateBloatBond: boolean;
+        readonly asUpdateChannelStateBloatBond: {
+            readonly newChannelStateBloatBond: u128;
+        } & Struct;
+        readonly isUpdateVideoStateBloatBond: boolean;
+        readonly asUpdateVideoStateBloatBond: {
+            readonly newVideoStateBloatBond: u128;
+        } & Struct;
+        readonly isClaimAndWithdrawChannelReward: boolean;
+        readonly asClaimAndWithdrawChannelReward: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly proof: Vec<PalletCommonMerkleTreeProofElementRecord>;
+            readonly item: PalletContentPullPaymentElement;
+        } & Struct;
+        readonly isIssueNft: boolean;
+        readonly asIssueNft: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly params: PalletContentNftTypesNftIssuanceParametersRecord;
+        } & Struct;
+        readonly isDestroyNft: boolean;
+        readonly asDestroyNft: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+        } & Struct;
+        readonly isStartOpenAuction: boolean;
+        readonly asStartOpenAuction: {
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly auctionParams: PalletContentNftTypesOpenAuctionParamsRecord;
+        } & Struct;
+        readonly isStartEnglishAuction: boolean;
+        readonly asStartEnglishAuction: {
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly auctionParams: PalletContentNftTypesEnglishAuctionParamsRecord;
+        } & Struct;
+        readonly isCancelEnglishAuction: boolean;
+        readonly asCancelEnglishAuction: {
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+        } & Struct;
+        readonly isCancelOpenAuction: boolean;
+        readonly asCancelOpenAuction: {
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+        } & Struct;
+        readonly isCancelOffer: boolean;
+        readonly asCancelOffer: {
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+        } & Struct;
+        readonly isCancelBuyNow: boolean;
+        readonly asCancelBuyNow: {
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+        } & Struct;
+        readonly isUpdateBuyNowPrice: boolean;
+        readonly asUpdateBuyNowPrice: {
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly newPrice: u128;
+        } & Struct;
+        readonly isMakeOpenAuctionBid: boolean;
+        readonly asMakeOpenAuctionBid: {
+            readonly participantId: u64;
+            readonly videoId: u64;
+            readonly bidAmount: u128;
+        } & Struct;
+        readonly isMakeEnglishAuctionBid: boolean;
+        readonly asMakeEnglishAuctionBid: {
+            readonly participantId: u64;
+            readonly videoId: u64;
+            readonly bidAmount: u128;
+        } & Struct;
+        readonly isCancelOpenAuctionBid: boolean;
+        readonly asCancelOpenAuctionBid: {
+            readonly participantId: u64;
+            readonly videoId: u64;
+        } & Struct;
+        readonly isSettleEnglishAuction: boolean;
+        readonly asSettleEnglishAuction: {
+            readonly videoId: u64;
+        } & Struct;
+        readonly isPickOpenAuctionWinner: boolean;
+        readonly asPickOpenAuctionWinner: {
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly winnerId: u64;
+            readonly commit: u128;
+        } & Struct;
+        readonly isOfferNft: boolean;
+        readonly asOfferNft: {
+            readonly videoId: u64;
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly to: u64;
+            readonly price: Option<u128>;
+        } & Struct;
+        readonly isSlingNftBack: boolean;
+        readonly asSlingNftBack: {
+            readonly videoId: u64;
+            readonly ownerId: PalletContentPermissionsContentActor;
+        } & Struct;
+        readonly isAcceptIncomingOffer: boolean;
+        readonly asAcceptIncomingOffer: {
+            readonly videoId: u64;
+            readonly witnessPrice: Option<u128>;
+        } & Struct;
+        readonly isSellNft: boolean;
+        readonly asSellNft: {
+            readonly videoId: u64;
+            readonly ownerId: PalletContentPermissionsContentActor;
+            readonly price: u128;
+        } & Struct;
+        readonly isBuyNft: boolean;
+        readonly asBuyNft: {
+            readonly videoId: u64;
+            readonly participantId: u64;
+            readonly witnessPrice: u128;
+        } & Struct;
+        readonly isToggleNftLimits: boolean;
+        readonly asToggleNftLimits: {
+            readonly enabled: bool;
+        } & Struct;
+        readonly isChannelOwnerRemark: boolean;
+        readonly asChannelOwnerRemark: {
+            readonly channelId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isCreatorTokenIssuerRemark: boolean;
+        readonly asCreatorTokenIssuerRemark: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isChannelAgentRemark: boolean;
+        readonly asChannelAgentRemark: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isNftOwnerRemark: boolean;
+        readonly asNftOwnerRemark: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly videoId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isInitializeChannelTransfer: boolean;
+        readonly asInitializeChannelTransfer: {
+            readonly channelId: u64;
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly transferParams: PalletContentInitTransferParameters;
+        } & Struct;
+        readonly isCancelChannelTransfer: boolean;
+        readonly asCancelChannelTransfer: {
+            readonly channelId: u64;
+            readonly actor: PalletContentPermissionsContentActor;
+        } & Struct;
+        readonly isAcceptChannelTransfer: boolean;
+        readonly asAcceptChannelTransfer: {
+            readonly channelId: u64;
+            readonly commitmentParams: PalletContentTransferCommitmentParametersBTreeMap;
+        } & Struct;
+        readonly isUpdateGlobalNftLimit: boolean;
+        readonly asUpdateGlobalNftLimit: {
+            readonly nftLimitPeriod: PalletContentNftLimitPeriod;
+            readonly limit: u64;
+        } & Struct;
+        readonly isUpdateChannelNftLimit: boolean;
+        readonly asUpdateChannelNftLimit: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly nftLimitPeriod: PalletContentNftLimitPeriod;
+            readonly channelId: u64;
+            readonly limit: u64;
+        } & Struct;
+        readonly isIssueCreatorToken: boolean;
+        readonly asIssueCreatorToken: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly params: PalletProjectTokenTokenIssuanceParameters;
+        } & Struct;
+        readonly isInitCreatorTokenSale: boolean;
+        readonly asInitCreatorTokenSale: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly params: PalletProjectTokenTokenSaleParams;
+        } & Struct;
+        readonly isUpdateUpcomingCreatorTokenSale: boolean;
+        readonly asUpdateUpcomingCreatorTokenSale: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly newStartBlock: Option<u32>;
+            readonly newDuration: Option<u32>;
+        } & Struct;
+        readonly isCreatorTokenIssuerTransfer: boolean;
+        readonly asCreatorTokenIssuerTransfer: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly outputs: Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>>;
+            readonly metadata: Bytes;
+        } & Struct;
+        readonly isMakeCreatorTokenPermissionless: boolean;
+        readonly asMakeCreatorTokenPermissionless: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+        } & Struct;
+        readonly isReduceCreatorTokenPatronageRateTo: boolean;
+        readonly asReduceCreatorTokenPatronageRateTo: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly targetRate: Permill;
+        } & Struct;
+        readonly isClaimCreatorTokenPatronageCredit: boolean;
+        readonly asClaimCreatorTokenPatronageCredit: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+        } & Struct;
+        readonly isIssueRevenueSplit: boolean;
+        readonly asIssueRevenueSplit: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly start: Option<u32>;
+            readonly duration: u32;
+        } & Struct;
+        readonly isFinalizeRevenueSplit: boolean;
+        readonly asFinalizeRevenueSplit: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+        } & Struct;
+        readonly isFinalizeCreatorTokenSale: boolean;
+        readonly asFinalizeCreatorTokenSale: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+        } & Struct;
+        readonly isDeissueCreatorToken: boolean;
+        readonly asDeissueCreatorToken: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+        } & Struct;
+        readonly isActivateAmm: boolean;
+        readonly asActivateAmm: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly params: PalletProjectTokenAmmParams;
+        } & Struct;
+        readonly isDeactivateAmm: boolean;
+        readonly asDeactivateAmm: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+        } & Struct;
+        readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'CreatorTokenIssuerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken' | 'ActivateAmm' | 'DeactivateAmm';
+    }
+    /** @name PalletContentChannelBagWitness (384) */
+    interface PalletContentChannelBagWitness extends Struct {
+        readonly storageBucketsNum: u32;
+        readonly distributionBucketsNum: u32;
+    }
+    /** @name PalletCommonMerkleTreeProofElementRecord (386) */
+    interface PalletCommonMerkleTreeProofElementRecord extends Struct {
+        readonly hash_: H256;
+        readonly side: PalletCommonMerkleTreeSide;
+    }
+    /** @name PalletCommonMerkleTreeSide (387) */
+    interface PalletCommonMerkleTreeSide extends Enum {
+        readonly isLeft: boolean;
+        readonly isRight: boolean;
+        readonly type: 'Left' | 'Right';
+    }
+    /** @name PalletContentPullPaymentElement (388) */
+    interface PalletContentPullPaymentElement extends Struct {
+        readonly channelId: u64;
+        readonly cumulativeRewardEarned: u128;
+        readonly reason: H256;
+    }
+    /** @name PalletContentInitTransferParameters (389) */
+    interface PalletContentInitTransferParameters extends Struct {
+        readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+        readonly price: u128;
+        readonly newOwner: PalletContentChannelOwner;
+    }
+    /** @name PalletProjectTokenTokenSaleParams (390) */
+    interface PalletProjectTokenTokenSaleParams extends Struct {
+        readonly unitPrice: u128;
+        readonly upperBoundQuantity: u128;
+        readonly startsAt: Option<u32>;
+        readonly duration: u32;
+        readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
+        readonly capPerMember: Option<u128>;
+        readonly metadata: Option<Bytes>;
+    }
+    /** @name PalletProjectTokenAmmParams (394) */
+    interface PalletProjectTokenAmmParams extends Struct {
+        readonly slope: u128;
+        readonly intercept: u128;
+    }
+    /** @name PalletStorageCall (395) */
+    interface PalletStorageCall extends Enum {
+        readonly isDeleteStorageBucket: boolean;
+        readonly asDeleteStorageBucket: {
+            readonly storageBucketId: u64;
+        } & Struct;
+        readonly isUpdateUploadingBlockedStatus: boolean;
+        readonly asUpdateUploadingBlockedStatus: {
+            readonly newStatus: bool;
+        } & Struct;
+        readonly isUpdateDataSizeFee: boolean;
+        readonly asUpdateDataSizeFee: {
+            readonly newDataSizeFee: u128;
+        } & Struct;
+        readonly isUpdateStorageBucketsPerBagLimit: boolean;
+        readonly asUpdateStorageBucketsPerBagLimit: {
+            readonly newLimit: u32;
+        } & Struct;
+        readonly isUpdateStorageBucketsVoucherMaxLimits: boolean;
+        readonly asUpdateStorageBucketsVoucherMaxLimits: {
+            readonly newObjectsSize: u64;
+            readonly newObjectsNumber: u64;
+        } & Struct;
+        readonly isUpdateDataObjectStateBloatBond: boolean;
+        readonly asUpdateDataObjectStateBloatBond: {
+            readonly stateBloatBond: u128;
+        } & Struct;
+        readonly isUpdateNumberOfStorageBucketsInDynamicBagCreationPolicy: boolean;
+        readonly asUpdateNumberOfStorageBucketsInDynamicBagCreationPolicy: {
+            readonly dynamicBagType: PalletStorageDynamicBagType;
+            readonly numberOfStorageBuckets: u32;
+        } & Struct;
+        readonly isUpdateBlacklist: boolean;
+        readonly asUpdateBlacklist: {
+            readonly removeHashes: BTreeSet<Bytes>;
+            readonly addHashes: BTreeSet<Bytes>;
+        } & Struct;
+        readonly isCreateStorageBucket: boolean;
+        readonly asCreateStorageBucket: {
+            readonly inviteWorker: Option<u64>;
+            readonly acceptingNewBags: bool;
+            readonly sizeLimit: u64;
+            readonly objectsLimit: u64;
+        } & Struct;
+        readonly isUpdateStorageBucketsForBag: boolean;
+        readonly asUpdateStorageBucketsForBag: {
+            readonly bagId: PalletStorageBagIdType;
+            readonly addBuckets: BTreeSet<u64>;
+            readonly removeBuckets: BTreeSet<u64>;
+        } & Struct;
+        readonly isCancelStorageBucketOperatorInvite: boolean;
+        readonly asCancelStorageBucketOperatorInvite: {
+            readonly storageBucketId: u64;
+        } & Struct;
+        readonly isInviteStorageBucketOperator: boolean;
+        readonly asInviteStorageBucketOperator: {
+            readonly storageBucketId: u64;
+            readonly operatorId: u64;
+        } & Struct;
+        readonly isRemoveStorageBucketOperator: boolean;
+        readonly asRemoveStorageBucketOperator: {
+            readonly storageBucketId: u64;
+        } & Struct;
+        readonly isUpdateStorageBucketStatus: boolean;
+        readonly asUpdateStorageBucketStatus: {
+            readonly storageBucketId: u64;
+            readonly acceptingNewBags: bool;
+        } & Struct;
+        readonly isSetStorageBucketVoucherLimits: boolean;
+        readonly asSetStorageBucketVoucherLimits: {
+            readonly storageBucketId: u64;
+            readonly newObjectsSizeLimit: u64;
+            readonly newObjectsNumberLimit: u64;
+        } & Struct;
+        readonly isAcceptStorageBucketInvitation: boolean;
+        readonly asAcceptStorageBucketInvitation: {
+            readonly workerId: u64;
+            readonly storageBucketId: u64;
+            readonly transactorAccountId: AccountId32;
+        } & Struct;
+        readonly isSetStorageOperatorMetadata: boolean;
+        readonly asSetStorageOperatorMetadata: {
+            readonly workerId: u64;
+            readonly storageBucketId: u64;
+            readonly metadata: Bytes;
+        } & Struct;
+        readonly isAcceptPendingDataObjects: boolean;
+        readonly asAcceptPendingDataObjects: {
+            readonly workerId: u64;
+            readonly storageBucketId: u64;
+            readonly bagId: PalletStorageBagIdType;
+            readonly dataObjects: BTreeSet<u64>;
+        } & Struct;
+        readonly isCreateDistributionBucketFamily: boolean;
+        readonly isDeleteDistributionBucketFamily: boolean;
+        readonly asDeleteDistributionBucketFamily: {
+            readonly familyId: u64;
+        } & Struct;
+        readonly isCreateDistributionBucket: boolean;
+        readonly asCreateDistributionBucket: {
+            readonly familyId: u64;
+            readonly acceptingNewBags: bool;
+        } & Struct;
+        readonly isUpdateDistributionBucketStatus: boolean;
+        readonly asUpdateDistributionBucketStatus: {
+            readonly bucketId: PalletStorageDistributionBucketIdRecord;
+            readonly acceptingNewBags: bool;
+        } & Struct;
+        readonly isDeleteDistributionBucket: boolean;
+        readonly asDeleteDistributionBucket: {
+            readonly bucketId: PalletStorageDistributionBucketIdRecord;
+        } & Struct;
+        readonly isUpdateDistributionBucketsForBag: boolean;
+        readonly asUpdateDistributionBucketsForBag: {
+            readonly bagId: PalletStorageBagIdType;
+            readonly familyId: u64;
+            readonly addBucketsIndices: BTreeSet<u64>;
+            readonly removeBucketsIndices: BTreeSet<u64>;
+        } & Struct;
+        readonly isUpdateDistributionBucketsPerBagLimit: boolean;
+        readonly asUpdateDistributionBucketsPerBagLimit: {
+            readonly newLimit: u32;
+        } & Struct;
+        readonly isUpdateDistributionBucketMode: boolean;
+        readonly asUpdateDistributionBucketMode: {
+            readonly bucketId: PalletStorageDistributionBucketIdRecord;
+            readonly distributing: bool;
+        } & Struct;
+        readonly isUpdateFamiliesInDynamicBagCreationPolicy: boolean;
+        readonly asUpdateFamiliesInDynamicBagCreationPolicy: {
+            readonly dynamicBagType: PalletStorageDynamicBagType;
+            readonly families: BTreeMap<u64, u32>;
+        } & Struct;
+        readonly isInviteDistributionBucketOperator: boolean;
+        readonly asInviteDistributionBucketOperator: {
+            readonly bucketId: PalletStorageDistributionBucketIdRecord;
+            readonly operatorWorkerId: u64;
+        } & Struct;
+        readonly isCancelDistributionBucketOperatorInvite: boolean;
+        readonly asCancelDistributionBucketOperatorInvite: {
+            readonly bucketId: PalletStorageDistributionBucketIdRecord;
+            readonly operatorWorkerId: u64;
+        } & Struct;
+        readonly isRemoveDistributionBucketOperator: boolean;
+        readonly asRemoveDistributionBucketOperator: {
+            readonly bucketId: PalletStorageDistributionBucketIdRecord;
+            readonly operatorWorkerId: u64;
+        } & Struct;
+        readonly isSetDistributionBucketFamilyMetadata: boolean;
+        readonly asSetDistributionBucketFamilyMetadata: {
+            readonly familyId: u64;
+            readonly metadata: Bytes;
+        } & Struct;
+        readonly isAcceptDistributionBucketInvitation: boolean;
+        readonly asAcceptDistributionBucketInvitation: {
+            readonly workerId: u64;
+            readonly bucketId: PalletStorageDistributionBucketIdRecord;
+        } & Struct;
+        readonly isSetDistributionOperatorMetadata: boolean;
+        readonly asSetDistributionOperatorMetadata: {
+            readonly workerId: u64;
+            readonly bucketId: PalletStorageDistributionBucketIdRecord;
+            readonly metadata: Bytes;
+        } & Struct;
+        readonly isStorageOperatorRemark: boolean;
+        readonly asStorageOperatorRemark: {
+            readonly workerId: u64;
+            readonly storageBucketId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isDistributionOperatorRemark: boolean;
+        readonly asDistributionOperatorRemark: {
+            readonly workerId: u64;
+            readonly distributionBucketId: PalletStorageDistributionBucketIdRecord;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
+    }
+    /** @name PalletProjectTokenCall (396) */
+    interface PalletProjectTokenCall extends Enum {
+        readonly isTransfer: boolean;
+        readonly asTransfer: {
+            readonly srcMemberId: u64;
+            readonly tokenId: u64;
+            readonly outputs: Vec<ITuple<[u64, u128]>>;
+            readonly metadata: Bytes;
+        } & Struct;
+        readonly isBurn: boolean;
+        readonly asBurn: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+            readonly amount: u128;
+        } & Struct;
+        readonly isDustAccount: boolean;
+        readonly asDustAccount: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+        } & Struct;
+        readonly isJoinWhitelist: boolean;
+        readonly asJoinWhitelist: {
+            readonly memberId: u64;
+            readonly tokenId: u64;
+            readonly proof: PalletProjectTokenMerkleProof;
+        } & Struct;
+        readonly isPurchaseTokensOnSale: boolean;
+        readonly asPurchaseTokensOnSale: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+            readonly amount: u128;
+        } & Struct;
+        readonly isParticipateInSplit: boolean;
+        readonly asParticipateInSplit: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+            readonly amount: u128;
+        } & Struct;
+        readonly isExitRevenueSplit: boolean;
+        readonly asExitRevenueSplit: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+        } & Struct;
+        readonly isBuyOnAmm: boolean;
+        readonly asBuyOnAmm: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+            readonly amount: u128;
+            readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+        } & Struct;
+        readonly isSellOnAmm: boolean;
+        readonly asSellOnAmm: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+            readonly amount: u128;
+            readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+        } & Struct;
+        readonly isUpdateMaxYearlyPatronageRate: boolean;
+        readonly asUpdateMaxYearlyPatronageRate: {
+            readonly rate: Permill;
+        } & Struct;
+        readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit' | 'BuyOnAmm' | 'SellOnAmm' | 'UpdateMaxYearlyPatronageRate';
+    }
+    /** @name PalletProjectTokenMerkleProof (400) */
+    interface PalletProjectTokenMerkleProof extends Vec<ITuple<[H256, PalletProjectTokenMerkleSide]>> {
+    }
+    /** @name PalletProjectTokenMerkleSide (403) */
+    interface PalletProjectTokenMerkleSide extends Enum {
+        readonly isRight: boolean;
+        readonly isLeft: boolean;
+        readonly type: 'Right' | 'Left';
+    }
+    /** @name PalletProposalsEngineCall (406) */
+    interface PalletProposalsEngineCall extends Enum {
+        readonly isVote: boolean;
+        readonly asVote: {
+            readonly voterId: u64;
+            readonly proposalId: u32;
+            readonly vote: PalletProposalsEngineVoteKind;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isCancelProposal: boolean;
+        readonly asCancelProposal: {
+            readonly proposerId: u64;
+            readonly proposalId: u32;
+        } & Struct;
+        readonly isVetoProposal: boolean;
+        readonly asVetoProposal: {
+            readonly proposalId: u32;
+        } & Struct;
+        readonly isProposerRemark: boolean;
+        readonly asProposerRemark: {
+            readonly proposalId: u32;
+            readonly proposerId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly type: 'Vote' | 'CancelProposal' | 'VetoProposal' | 'ProposerRemark';
+    }
+    /** @name PalletProposalsDiscussionCall (407) */
+    interface PalletProposalsDiscussionCall extends Enum {
+        readonly isAddPost: boolean;
+        readonly asAddPost: {
+            readonly postAuthorId: u64;
+            readonly threadId: u64;
+            readonly text: Bytes;
+            readonly editable: bool;
+        } & Struct;
+        readonly isDeletePost: boolean;
+        readonly asDeletePost: {
+            readonly deleterId: u64;
+            readonly postId: u64;
+            readonly threadId: u64;
+            readonly hide: bool;
+        } & Struct;
+        readonly isUpdatePost: boolean;
+        readonly asUpdatePost: {
+            readonly threadId: u64;
+            readonly postId: u64;
+            readonly text: Bytes;
+        } & Struct;
+        readonly isChangeThreadMode: boolean;
+        readonly asChangeThreadMode: {
+            readonly memberId: u64;
+            readonly threadId: u64;
+            readonly mode: PalletProposalsDiscussionThreadModeBTreeSet;
+        } & Struct;
+        readonly type: 'AddPost' | 'DeletePost' | 'UpdatePost' | 'ChangeThreadMode';
+    }
+    /** @name PalletProposalsCodexCall (408) */
+    interface PalletProposalsCodexCall extends Enum {
+        readonly isCreateProposal: boolean;
+        readonly asCreateProposal: {
+            readonly generalProposalParameters: PalletProposalsCodexGeneralProposalParams;
+            readonly proposalDetails: PalletProposalsCodexProposalDetails;
+        } & Struct;
+        readonly type: 'CreateProposal';
+    }
+    /** @name PalletWorkingGroupCall (409) */
+    interface PalletWorkingGroupCall extends Enum {
+        readonly isAddOpening: boolean;
+        readonly asAddOpening: {
+            readonly description: Bytes;
+            readonly openingType: PalletWorkingGroupOpeningType;
+            readonly stakePolicy: PalletWorkingGroupStakePolicy;
+            readonly rewardPerBlock: Option<u128>;
+        } & Struct;
+        readonly isApplyOnOpening: boolean;
+        readonly asApplyOnOpening: {
+            readonly p: PalletWorkingGroupApplyOnOpeningParams;
+        } & Struct;
+        readonly isFillOpening: boolean;
+        readonly asFillOpening: {
+            readonly openingId: u64;
+            readonly successfulApplicationIds: BTreeSet<u64>;
+        } & Struct;
+        readonly isUpdateRoleAccount: boolean;
+        readonly asUpdateRoleAccount: {
+            readonly workerId: u64;
+            readonly newRoleAccountId: AccountId32;
+        } & Struct;
+        readonly isLeaveRole: boolean;
+        readonly asLeaveRole: {
+            readonly workerId: u64;
+            readonly rationale: Option<Bytes>;
+        } & Struct;
+        readonly isTerminateRole: boolean;
+        readonly asTerminateRole: {
+            readonly workerId: u64;
+            readonly penalty: Option<u128>;
+            readonly rationale: Option<Bytes>;
+        } & Struct;
+        readonly isSlashStake: boolean;
+        readonly asSlashStake: {
+            readonly workerId: u64;
+            readonly penalty: u128;
+            readonly rationale: Option<Bytes>;
+        } & Struct;
+        readonly isDecreaseStake: boolean;
+        readonly asDecreaseStake: {
+            readonly workerId: u64;
+            readonly stakeBalanceDelta: u128;
+        } & Struct;
+        readonly isIncreaseStake: boolean;
+        readonly asIncreaseStake: {
+            readonly workerId: u64;
+            readonly stakeBalanceDelta: u128;
+        } & Struct;
+        readonly isWithdrawApplication: boolean;
+        readonly asWithdrawApplication: {
+            readonly applicationId: u64;
+        } & Struct;
+        readonly isCancelOpening: boolean;
+        readonly asCancelOpening: {
+            readonly openingId: u64;
+        } & Struct;
+        readonly isSetBudget: boolean;
+        readonly asSetBudget: {
+            readonly newBudget: u128;
+        } & Struct;
+        readonly isUpdateRewardAccount: boolean;
+        readonly asUpdateRewardAccount: {
+            readonly workerId: u64;
+            readonly newRewardAccountId: AccountId32;
+        } & Struct;
+        readonly isUpdateRewardAmount: boolean;
+        readonly asUpdateRewardAmount: {
+            readonly workerId: u64;
+            readonly rewardPerBlock: Option<u128>;
+        } & Struct;
+        readonly isSetStatusText: boolean;
+        readonly asSetStatusText: {
+            readonly statusText: Option<Bytes>;
+        } & Struct;
+        readonly isSpendFromBudget: boolean;
+        readonly asSpendFromBudget: {
+            readonly accountId: AccountId32;
+            readonly amount: u128;
+            readonly rationale: Option<Bytes>;
+        } & Struct;
+        readonly isFundWorkingGroupBudget: boolean;
+        readonly asFundWorkingGroupBudget: {
+            readonly memberId: u64;
+            readonly amount: u128;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isLeadRemark: boolean;
+        readonly asLeadRemark: {
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isWorkerRemark: boolean;
+        readonly asWorkerRemark: {
+            readonly workerId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly type: 'AddOpening' | 'ApplyOnOpening' | 'FillOpening' | 'UpdateRoleAccount' | 'LeaveRole' | 'TerminateRole' | 'SlashStake' | 'DecreaseStake' | 'IncreaseStake' | 'WithdrawApplication' | 'CancelOpening' | 'SetBudget' | 'UpdateRewardAccount' | 'UpdateRewardAmount' | 'SetStatusText' | 'SpendFromBudget' | 'FundWorkingGroupBudget' | 'LeadRemark' | 'WorkerRemark';
+    }
+    /** @name JoystreamNodeRuntimeOriginCaller (418) */
+    interface JoystreamNodeRuntimeOriginCaller extends Enum {
+        readonly isSystem: boolean;
+        readonly asSystem: FrameSupportDispatchRawOrigin;
+        readonly isVoid: boolean;
+        readonly type: 'System' | 'Void';
+    }
+    /** @name FrameSupportDispatchRawOrigin (419) */
+    interface FrameSupportDispatchRawOrigin extends Enum {
+        readonly isRoot: boolean;
+        readonly isSigned: boolean;
+        readonly asSigned: AccountId32;
+        readonly isNone: boolean;
+        readonly type: 'Root' | 'Signed' | 'None';
+    }
+    /** @name SpCoreVoid (420) */
+    type SpCoreVoid = Null;
+    /** @name PalletUtilityError (421) */
+    interface PalletUtilityError extends Enum {
+        readonly isTooManyCalls: boolean;
+        readonly type: 'TooManyCalls';
+    }
+    /** @name SpConsensusBabeDigestsPreDigest (428) */
+    interface SpConsensusBabeDigestsPreDigest extends Enum {
+        readonly isPrimary: boolean;
+        readonly asPrimary: SpConsensusBabeDigestsPrimaryPreDigest;
+        readonly isSecondaryPlain: boolean;
+        readonly asSecondaryPlain: SpConsensusBabeDigestsSecondaryPlainPreDigest;
+        readonly isSecondaryVRF: boolean;
+        readonly asSecondaryVRF: SpConsensusBabeDigestsSecondaryVRFPreDigest;
+        readonly type: 'Primary' | 'SecondaryPlain' | 'SecondaryVRF';
+    }
+    /** @name SpConsensusBabeDigestsPrimaryPreDigest (429) */
+    interface SpConsensusBabeDigestsPrimaryPreDigest extends Struct {
+        readonly authorityIndex: u32;
+        readonly slot: u64;
+        readonly vrfOutput: U8aFixed;
+        readonly vrfProof: U8aFixed;
+    }
+    /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (430) */
+    interface SpConsensusBabeDigestsSecondaryPlainPreDigest extends Struct {
+        readonly authorityIndex: u32;
+        readonly slot: u64;
+    }
+    /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (431) */
+    interface SpConsensusBabeDigestsSecondaryVRFPreDigest extends Struct {
+        readonly authorityIndex: u32;
+        readonly slot: u64;
+        readonly vrfOutput: U8aFixed;
+        readonly vrfProof: U8aFixed;
+    }
+    /** @name SpConsensusBabeBabeEpochConfiguration (433) */
+    interface SpConsensusBabeBabeEpochConfiguration extends Struct {
+        readonly c: ITuple<[u64, u64]>;
+        readonly allowedSlots: SpConsensusBabeAllowedSlots;
+    }
+    /** @name PalletBabeError (434) */
+    interface PalletBabeError extends Enum {
+        readonly isInvalidEquivocationProof: boolean;
+        readonly isInvalidKeyOwnershipProof: boolean;
+        readonly isDuplicateOffenceReport: boolean;
+        readonly isInvalidConfiguration: boolean;
+        readonly type: 'InvalidEquivocationProof' | 'InvalidKeyOwnershipProof' | 'DuplicateOffenceReport' | 'InvalidConfiguration';
+    }
+    /** @name PalletAuthorshipUncleEntryItem (436) */
+    interface PalletAuthorshipUncleEntryItem extends Enum {
+        readonly isInclusionHeight: boolean;
+        readonly asInclusionHeight: u32;
+        readonly isUncle: boolean;
+        readonly asUncle: ITuple<[H256, Option<AccountId32>]>;
+        readonly type: 'InclusionHeight' | 'Uncle';
+    }
+    /** @name PalletAuthorshipError (437) */
+    interface PalletAuthorshipError extends Enum {
+        readonly isInvalidUncleParent: boolean;
+        readonly isUnclesAlreadySet: boolean;
+        readonly isTooManyUncles: boolean;
+        readonly isGenesisUncle: boolean;
+        readonly isTooHighUncle: boolean;
+        readonly isUncleAlreadyIncluded: boolean;
+        readonly isOldUncle: boolean;
+        readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
+    }
+    /** @name PalletBalancesBalanceLock (439) */
+    interface PalletBalancesBalanceLock extends Struct {
+        readonly id: U8aFixed;
+        readonly amount: u128;
+        readonly reasons: PalletBalancesReasons;
+    }
+    /** @name PalletBalancesReasons (440) */
+    interface PalletBalancesReasons extends Enum {
+        readonly isFee: boolean;
+        readonly isMisc: boolean;
+        readonly isAll: boolean;
+        readonly type: 'Fee' | 'Misc' | 'All';
+    }
+    /** @name PalletBalancesReserveData (443) */
+    interface PalletBalancesReserveData extends Struct {
+        readonly id: U8aFixed;
+        readonly amount: u128;
+    }
+    /** @name PalletBalancesReleases (445) */
+    interface PalletBalancesReleases extends Enum {
+        readonly isV100: boolean;
+        readonly isV200: boolean;
+        readonly type: 'V100' | 'V200';
+    }
+    /** @name PalletBalancesError (446) */
+    interface PalletBalancesError extends Enum {
+        readonly isVestingBalance: boolean;
+        readonly isLiquidityRestrictions: boolean;
+        readonly isInsufficientBalance: boolean;
+        readonly isExistentialDeposit: boolean;
+        readonly isKeepAlive: boolean;
+        readonly isExistingVestingSchedule: boolean;
+        readonly isDeadAccount: boolean;
+        readonly isTooManyReserves: boolean;
+        readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
+    }
+    /** @name PalletTransactionPaymentReleases (448) */
+    interface PalletTransactionPaymentReleases extends Enum {
+        readonly isV1Ancient: boolean;
+        readonly isV2: boolean;
+        readonly type: 'V1Ancient' | 'V2';
+    }
+    /** @name PalletElectionProviderMultiPhasePhase (449) */
+    interface PalletElectionProviderMultiPhasePhase extends Enum {
+        readonly isOff: boolean;
+        readonly isSigned: boolean;
+        readonly isUnsigned: boolean;
+        readonly asUnsigned: ITuple<[bool, u32]>;
+        readonly isEmergency: boolean;
+        readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
+    }
+    /** @name PalletElectionProviderMultiPhaseReadySolution (451) */
+    interface PalletElectionProviderMultiPhaseReadySolution extends Struct {
+        readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
+        readonly score: SpNposElectionsElectionScore;
+        readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
+    }
+    /** @name PalletElectionProviderMultiPhaseRoundSnapshot (452) */
+    interface PalletElectionProviderMultiPhaseRoundSnapshot extends Struct {
+        readonly voters: Vec<ITuple<[AccountId32, u64, Vec<AccountId32>]>>;
+        readonly targets: Vec<AccountId32>;
+    }
+    /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (460) */
+    interface PalletElectionProviderMultiPhaseSignedSignedSubmission extends Struct {
+        readonly who: AccountId32;
+        readonly deposit: u128;
+        readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
+        readonly callFee: u128;
+    }
+    /** @name PalletElectionProviderMultiPhaseError (461) */
+    interface PalletElectionProviderMultiPhaseError extends Enum {
+        readonly isPreDispatchEarlySubmission: boolean;
+        readonly isPreDispatchWrongWinnerCount: boolean;
+        readonly isPreDispatchWeakSubmission: boolean;
+        readonly isSignedQueueFull: boolean;
+        readonly isSignedCannotPayDeposit: boolean;
+        readonly isSignedInvalidWitness: boolean;
+        readonly isSignedTooMuchWeight: boolean;
+        readonly isOcwCallWrongEra: boolean;
+        readonly isMissingSnapshotMetadata: boolean;
+        readonly isInvalidSubmissionIndex: boolean;
+        readonly isCallNotAllowed: boolean;
+        readonly isFallbackFailed: boolean;
+        readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed';
+    }
+    /** @name PalletStakingStakingLedger (462) */
+    interface PalletStakingStakingLedger extends Struct {
+        readonly stash: AccountId32;
+        readonly total: Compact<u128>;
+        readonly active: Compact<u128>;
+        readonly unlocking: Vec<PalletStakingUnlockChunk>;
+        readonly claimedRewards: Vec<u32>;
+    }
+    /** @name PalletStakingUnlockChunk (464) */
+    interface PalletStakingUnlockChunk extends Struct {
+        readonly value: Compact<u128>;
+        readonly era: Compact<u32>;
+    }
+    /** @name PalletStakingNominations (466) */
+    interface PalletStakingNominations extends Struct {
+        readonly targets: Vec<AccountId32>;
+        readonly submittedIn: u32;
+        readonly suppressed: bool;
+    }
+    /** @name PalletStakingActiveEraInfo (467) */
+    interface PalletStakingActiveEraInfo extends Struct {
+        readonly index: u32;
+        readonly start: Option<u64>;
+    }
+    /** @name PalletStakingEraRewardPoints (469) */
+    interface PalletStakingEraRewardPoints extends Struct {
+        readonly total: u32;
+        readonly individual: BTreeMap<AccountId32, u32>;
+    }
+    /** @name PalletStakingForcing (473) */
+    interface PalletStakingForcing extends Enum {
+        readonly isNotForcing: boolean;
+        readonly isForceNew: boolean;
+        readonly isForceNone: boolean;
+        readonly isForceAlways: boolean;
+        readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
+    }
+    /** @name PalletStakingUnappliedSlash (475) */
+    interface PalletStakingUnappliedSlash extends Struct {
+        readonly validator: AccountId32;
+        readonly own: u128;
+        readonly others: Vec<ITuple<[AccountId32, u128]>>;
+        readonly reporters: Vec<AccountId32>;
+        readonly payout: u128;
+    }
+    /** @name PalletStakingSlashingSlashingSpans (477) */
+    interface PalletStakingSlashingSlashingSpans extends Struct {
+        readonly spanIndex: u32;
+        readonly lastStart: u32;
+        readonly lastNonzeroSlash: u32;
+        readonly prior: Vec<u32>;
+    }
+    /** @name PalletStakingSlashingSpanRecord (478) */
+    interface PalletStakingSlashingSpanRecord extends Struct {
+        readonly slashed: u128;
+        readonly paidOut: u128;
+    }
+    /** @name PalletStakingReleases (481) */
+    interface PalletStakingReleases extends Enum {
+        readonly isV100Ancient: boolean;
+        readonly isV200: boolean;
+        readonly isV300: boolean;
+        readonly isV400: boolean;
+        readonly isV500: boolean;
+        readonly isV600: boolean;
+        readonly isV700: boolean;
+        readonly isV800: boolean;
+        readonly isV900: boolean;
+        readonly type: 'V100Ancient' | 'V200' | 'V300' | 'V400' | 'V500' | 'V600' | 'V700' | 'V800' | 'V900';
+    }
+    /** @name PalletStakingPalletError (482) */
+    interface PalletStakingPalletError extends Enum {
+        readonly isNotController: boolean;
+        readonly isNotStash: boolean;
+        readonly isAlreadyBonded: boolean;
+        readonly isAlreadyPaired: boolean;
+        readonly isEmptyTargets: boolean;
+        readonly isDuplicateIndex: boolean;
+        readonly isInvalidSlashIndex: boolean;
+        readonly isInsufficientBond: boolean;
+        readonly isNoMoreChunks: boolean;
+        readonly isNoUnlockChunk: boolean;
+        readonly isFundedTarget: boolean;
+        readonly isInvalidEraToReward: boolean;
+        readonly isInvalidNumberOfNominations: boolean;
+        readonly isNotSortedAndUnique: boolean;
+        readonly isAlreadyClaimed: boolean;
+        readonly isIncorrectHistoryDepth: boolean;
+        readonly isIncorrectSlashingSpans: boolean;
+        readonly isBadState: boolean;
+        readonly isTooManyTargets: boolean;
+        readonly isBadTarget: boolean;
+        readonly isCannotChillOther: boolean;
+        readonly isTooManyNominators: boolean;
+        readonly isTooManyValidators: boolean;
+        readonly isCommissionTooLow: boolean;
+        readonly isBondingRestricted: boolean;
+        readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BondingRestricted';
+    }
+    /** @name SpCoreCryptoKeyTypeId (486) */
+    interface SpCoreCryptoKeyTypeId extends U8aFixed {
+    }
+    /** @name PalletSessionError (487) */
+    interface PalletSessionError extends Enum {
+        readonly isInvalidProof: boolean;
+        readonly isNoAssociatedValidatorId: boolean;
+        readonly isDuplicatedKey: boolean;
+        readonly isNoKeys: boolean;
+        readonly isNoAccount: boolean;
+        readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
+    }
+    /** @name PalletGrandpaStoredState (489) */
+    interface PalletGrandpaStoredState extends Enum {
+        readonly isLive: boolean;
+        readonly isPendingPause: boolean;
+        readonly asPendingPause: {
+            readonly scheduledAt: u32;
+            readonly delay: u32;
+        } & Struct;
+        readonly isPaused: boolean;
+        readonly isPendingResume: boolean;
+        readonly asPendingResume: {
+            readonly scheduledAt: u32;
+            readonly delay: u32;
+        } & Struct;
+        readonly type: 'Live' | 'PendingPause' | 'Paused' | 'PendingResume';
+    }
+    /** @name PalletGrandpaStoredPendingChange (490) */
+    interface PalletGrandpaStoredPendingChange extends Struct {
+        readonly scheduledAt: u32;
+        readonly delay: u32;
+        readonly nextAuthorities: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
+        readonly forced: Option<u32>;
+    }
+    /** @name PalletGrandpaError (492) */
+    interface PalletGrandpaError extends Enum {
+        readonly isPauseFailed: boolean;
+        readonly isResumeFailed: boolean;
+        readonly isChangePending: boolean;
+        readonly isTooSoon: boolean;
+        readonly isInvalidKeyOwnershipProof: boolean;
+        readonly isInvalidEquivocationProof: boolean;
+        readonly isDuplicateOffenceReport: boolean;
+        readonly type: 'PauseFailed' | 'ResumeFailed' | 'ChangePending' | 'TooSoon' | 'InvalidKeyOwnershipProof' | 'InvalidEquivocationProof' | 'DuplicateOffenceReport';
+    }
+    /** @name PalletImOnlineBoundedOpaqueNetworkState (498) */
+    interface PalletImOnlineBoundedOpaqueNetworkState extends Struct {
+        readonly peerId: Bytes;
+        readonly externalAddresses: Vec<Bytes>;
+    }
+    /** @name PalletImOnlineError (502) */
+    interface PalletImOnlineError extends Enum {
+        readonly isInvalidKey: boolean;
+        readonly isDuplicatedHeartbeat: boolean;
+        readonly type: 'InvalidKey' | 'DuplicatedHeartbeat';
+    }
+    /** @name SpStakingOffenceOffenceDetails (503) */
+    interface SpStakingOffenceOffenceDetails extends Struct {
+        readonly offender: ITuple<[AccountId32, PalletStakingExposure]>;
+        readonly reporters: Vec<AccountId32>;
+    }
+    /** @name PalletBagsListListNode (506) */
+    interface PalletBagsListListNode extends Struct {
+        readonly id: AccountId32;
+        readonly prev: Option<AccountId32>;
+        readonly next: Option<AccountId32>;
+        readonly bagUpper: u64;
+        readonly score: u64;
+    }
+    /** @name PalletBagsListListBag (507) */
+    interface PalletBagsListListBag extends Struct {
+        readonly head: Option<AccountId32>;
+        readonly tail: Option<AccountId32>;
+    }
+    /** @name PalletBagsListError (508) */
+    interface PalletBagsListError extends Enum {
+        readonly isList: boolean;
+        readonly asList: PalletBagsListListListError;
+        readonly type: 'List';
+    }
+    /** @name PalletBagsListListListError (509) */
+    interface PalletBagsListListListError extends Enum {
+        readonly isDuplicate: boolean;
+        readonly isNotHeavier: boolean;
+        readonly isNotInSameBag: boolean;
+        readonly isNodeNotFound: boolean;
+        readonly type: 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';
+    }
+    /** @name PalletVestingReleases (512) */
+    interface PalletVestingReleases extends Enum {
+        readonly isV0: boolean;
+        readonly isV1: boolean;
+        readonly type: 'V0' | 'V1';
+    }
+    /** @name PalletVestingError (513) */
+    interface PalletVestingError extends Enum {
+        readonly isNotVesting: boolean;
+        readonly isAtMaxVestingSchedules: boolean;
+        readonly isAmountLow: boolean;
+        readonly isScheduleIndexOutOfBounds: boolean;
+        readonly isInvalidScheduleParams: boolean;
+        readonly type: 'NotVesting' | 'AtMaxVestingSchedules' | 'AmountLow' | 'ScheduleIndexOutOfBounds' | 'InvalidScheduleParams';
+    }
+    /** @name PalletMultisigMultisig (515) */
+    interface PalletMultisigMultisig extends Struct {
+        readonly when: PalletMultisigTimepoint;
+        readonly deposit: u128;
+        readonly depositor: AccountId32;
+        readonly approvals: Vec<AccountId32>;
+    }
+    /** @name PalletMultisigError (517) */
+    interface PalletMultisigError extends Enum {
+        readonly isMinimumThreshold: boolean;
+        readonly isAlreadyApproved: boolean;
+        readonly isNoApprovalsNeeded: boolean;
+        readonly isTooFewSignatories: boolean;
+        readonly isTooManySignatories: boolean;
+        readonly isSignatoriesOutOfOrder: boolean;
+        readonly isSenderInSignatories: boolean;
+        readonly isNotFound: boolean;
+        readonly isNotOwner: boolean;
+        readonly isNoTimepoint: boolean;
+        readonly isWrongTimepoint: boolean;
+        readonly isUnexpectedTimepoint: boolean;
+        readonly isMaxWeightTooLow: boolean;
+        readonly isAlreadyStored: boolean;
+        readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
+    }
+    /** @name PalletCouncilCouncilStageUpdate (518) */
+    interface PalletCouncilCouncilStageUpdate extends Struct {
+        readonly stage: PalletCouncilCouncilStage;
+        readonly changedAt: u32;
+    }
+    /** @name PalletCouncilCouncilStage (519) */
+    interface PalletCouncilCouncilStage extends Enum {
+        readonly isAnnouncing: boolean;
+        readonly asAnnouncing: PalletCouncilCouncilStageAnnouncing;
+        readonly isElection: boolean;
+        readonly asElection: PalletCouncilCouncilStageElection;
+        readonly isIdle: boolean;
+        readonly asIdle: PalletCouncilCouncilStageIdle;
+        readonly type: 'Announcing' | 'Election' | 'Idle';
+    }
+    /** @name PalletCouncilCouncilStageAnnouncing (520) */
+    interface PalletCouncilCouncilStageAnnouncing extends Struct {
+        readonly candidatesCount: u32;
+        readonly endsAt: u32;
+    }
+    /** @name PalletCouncilCouncilStageElection (521) */
+    interface PalletCouncilCouncilStageElection extends Struct {
+        readonly candidatesCount: u32;
+    }
+    /** @name PalletCouncilCouncilStageIdle (522) */
+    interface PalletCouncilCouncilStageIdle extends Struct {
+        readonly endsAt: u32;
+    }
+    /** @name PalletCouncilCouncilMember (524) */
+    interface PalletCouncilCouncilMember extends Struct {
+        readonly stakingAccountId: AccountId32;
+        readonly rewardAccountId: AccountId32;
+        readonly membershipId: u64;
+        readonly stake: u128;
+        readonly lastPaymentBlock: u32;
+        readonly unpaidReward: u128;
+    }
+    /** @name PalletCouncilCandidate (526) */
+    interface PalletCouncilCandidate extends Struct {
+        readonly stakingAccountId: AccountId32;
+        readonly rewardAccountId: AccountId32;
+        readonly cycleId: u64;
+        readonly stake: u128;
+        readonly votePower: u128;
+        readonly noteHash: Option<H256>;
+    }
+    /** @name PalletCouncilError (527) */
+    interface PalletCouncilError extends Enum {
+        readonly isArithmeticError: boolean;
+        readonly isBadOrigin: boolean;
+        readonly isCantCandidateNow: boolean;
+        readonly isCantReleaseStakeNow: boolean;
+        readonly isCandidacyStakeTooLow: boolean;
+        readonly isCantCandidateTwice: boolean;
+        readonly isConflictingStake: boolean;
+        readonly isStakeStillNeeded: boolean;
+        readonly isNoStake: boolean;
+        readonly isInsufficientBalanceForStaking: boolean;
+        readonly isCantVoteForYourself: boolean;
+        readonly isMemberIdNotMatchAccount: boolean;
+        readonly isInvalidAccountToStakeReuse: boolean;
+        readonly isNotCandidatingNow: boolean;
+        readonly isCantWithdrawCandidacyNow: boolean;
+        readonly isNotCouncilor: boolean;
+        readonly isInsufficientFundsForFundingRequest: boolean;
+        readonly isZeroBalanceFundRequest: boolean;
+        readonly isRepeatedFundRequestAccount: boolean;
+        readonly isEmptyFundingRequests: boolean;
+        readonly isInsufficientTokensForFunding: boolean;
+        readonly isZeroTokensFunding: boolean;
+        readonly isCandidateDoesNotExist: boolean;
+        readonly isInsufficientBalanceForTransfer: boolean;
+        readonly type: 'ArithmeticError' | 'BadOrigin' | 'CantCandidateNow' | 'CantReleaseStakeNow' | 'CandidacyStakeTooLow' | 'CantCandidateTwice' | 'ConflictingStake' | 'StakeStillNeeded' | 'NoStake' | 'InsufficientBalanceForStaking' | 'CantVoteForYourself' | 'MemberIdNotMatchAccount' | 'InvalidAccountToStakeReuse' | 'NotCandidatingNow' | 'CantWithdrawCandidacyNow' | 'NotCouncilor' | 'InsufficientFundsForFundingRequest' | 'ZeroBalanceFundRequest' | 'RepeatedFundRequestAccount' | 'EmptyFundingRequests' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'CandidateDoesNotExist' | 'InsufficientBalanceForTransfer';
+    }
+    /** @name PalletReferendumReferendumStage (528) */
+    interface PalletReferendumReferendumStage extends Enum {
+        readonly isInactive: boolean;
+        readonly isVoting: boolean;
+        readonly asVoting: PalletReferendumReferendumStageVoting;
+        readonly isRevealing: boolean;
+        readonly asRevealing: PalletReferendumReferendumStageRevealing;
+        readonly type: 'Inactive' | 'Voting' | 'Revealing';
+    }
+    /** @name PalletReferendumReferendumStageVoting (530) */
+    interface PalletReferendumReferendumStageVoting extends Struct {
+        readonly started: u32;
+        readonly winningTargetCount: u32;
+        readonly currentCycleId: u64;
+        readonly endsAt: u32;
+    }
+    /** @name PalletReferendumReferendumStageRevealing (531) */
+    interface PalletReferendumReferendumStageRevealing extends Struct {
+        readonly started: u32;
+        readonly winningTargetCount: u32;
+        readonly intermediateWinners: Vec<PalletReferendumOptionResult>;
+        readonly currentCycleId: u64;
+        readonly endsAt: u32;
+    }
+    /** @name PalletReferendumCastVote (532) */
+    interface PalletReferendumCastVote extends Struct {
+        readonly commitment: H256;
+        readonly cycleId: u64;
+        readonly stake: u128;
+        readonly voteFor: Option<u64>;
+    }
+    /** @name PalletReferendumError (533) */
+    interface PalletReferendumError extends Enum {
+        readonly isBadOrigin: boolean;
+        readonly isReferendumNotRunning: boolean;
+        readonly isRevealingNotInProgress: boolean;
+        readonly isConflictStakesOnAccount: boolean;
+        readonly isInsufficientBalanceToStake: boolean;
+        readonly isInsufficientStake: boolean;
+        readonly isInvalidReveal: boolean;
+        readonly isInvalidVote: boolean;
+        readonly isVoteNotExisting: boolean;
+        readonly isAlreadyVotedThisCycle: boolean;
+        readonly isUnstakingVoteInSameCycle: boolean;
+        readonly isSaltTooLong: boolean;
+        readonly isUnstakingForbidden: boolean;
+        readonly isAccountAlreadyOptedOutOfVoting: boolean;
+        readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden' | 'AccountAlreadyOptedOutOfVoting';
+    }
+    /** @name PalletMembershipMembershipObject (534) */
+    interface PalletMembershipMembershipObject extends Struct {
+        readonly handleHash: H256;
+        readonly rootAccount: AccountId32;
+        readonly controllerAccount: AccountId32;
+        readonly verified: bool;
+        readonly invites: u32;
+    }
+    /** @name PalletMembershipStakingAccountMemberBinding (535) */
+    interface PalletMembershipStakingAccountMemberBinding extends Struct {
+        readonly memberId: u64;
+        readonly confirmed: bool;
+    }
+    /** @name PalletMembershipError (536) */
+    interface PalletMembershipError extends Enum {
+        readonly isNotEnoughBalanceToBuyMembership: boolean;
+        readonly isControllerAccountRequired: boolean;
+        readonly isRootAccountRequired: boolean;
+        readonly isUnsignedOrigin: boolean;
+        readonly isMemberProfileNotFound: boolean;
+        readonly isHandleAlreadyRegistered: boolean;
+        readonly isHandleMustBeProvidedDuringRegistration: boolean;
+        readonly isReferrerIsNotMember: boolean;
+        readonly isCannotTransferInvitesForNotMember: boolean;
+        readonly isNotEnoughInvites: boolean;
+        readonly isWorkingGroupLeaderNotSet: boolean;
+        readonly isStakingAccountIsAlreadyRegistered: boolean;
+        readonly isStakingAccountDoesntExist: boolean;
+        readonly isStakingAccountAlreadyConfirmed: boolean;
+        readonly isWorkingGroupBudgetIsNotSufficientForInviting: boolean;
+        readonly isConflictingLock: boolean;
+        readonly isCannotExceedReferralCutPercentLimit: boolean;
+        readonly isConflictStakesOnAccount: boolean;
+        readonly isInsufficientBalanceToCoverStake: boolean;
+        readonly isGifLockExceedsCredit: boolean;
+        readonly isInsufficientBalanceToGift: boolean;
+        readonly isInsufficientBalanceToCoverPayment: boolean;
+        readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift' | 'InsufficientBalanceToCoverPayment';
+    }
+    /** @name PalletForumCategory (537) */
+    interface PalletForumCategory extends Struct {
+        readonly titleHash: H256;
+        readonly descriptionHash: H256;
+        readonly archived: bool;
+        readonly numDirectSubcategories: u32;
+        readonly numDirectThreads: u32;
+        readonly numDirectModerators: u32;
+        readonly parentCategoryId: Option<u64>;
+        readonly stickyThreadIds: BTreeSet<u64>;
+    }
+    /** @name PalletForumThread (539) */
+    interface PalletForumThread extends Struct {
+        readonly categoryId: u64;
+        readonly authorId: u64;
+        readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
+        readonly numberOfEditablePosts: u64;
+    }
+    /** @name PalletForumPost (540) */
+    interface PalletForumPost extends Struct {
+        readonly threadId: u64;
+        readonly textHash: H256;
+        readonly authorId: u64;
+        readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
+        readonly lastEdited: u32;
+    }
+    /** @name PalletForumError (541) */
+    interface PalletForumError extends Enum {
+        readonly isArithmeticError: boolean;
+        readonly isOriginNotForumLead: boolean;
+        readonly isForumUserIdNotMatchAccount: boolean;
+        readonly isModeratorIdNotMatchAccount: boolean;
+        readonly isAccountDoesNotMatchThreadAuthor: boolean;
+        readonly isThreadDoesNotExist: boolean;
+        readonly isModeratorModerateOriginCategory: boolean;
+        readonly isModeratorModerateDestinationCategory: boolean;
+        readonly isThreadMoveInvalid: boolean;
+        readonly isThreadNotBeingUpdated: boolean;
+        readonly isInsufficientBalanceForThreadCreation: boolean;
+        readonly isCannotDeleteThreadWithOutstandingPosts: boolean;
+        readonly isPostDoesNotExist: boolean;
+        readonly isAccountDoesNotMatchPostAuthor: boolean;
+        readonly isInsufficientBalanceForPost: boolean;
+        readonly isCategoryNotBeingUpdated: boolean;
+        readonly isAncestorCategoryImmutable: boolean;
+        readonly isMaxValidCategoryDepthExceeded: boolean;
+        readonly isCategoryDoesNotExist: boolean;
+        readonly isCategoryModeratorDoesNotExist: boolean;
+        readonly isCategoryNotEmptyThreads: boolean;
+        readonly isCategoryNotEmptyCategories: boolean;
+        readonly isModeratorCantDeleteCategory: boolean;
+        readonly isModeratorCantUpdateCategory: boolean;
+        readonly isMapSizeLimit: boolean;
+        readonly isPathLengthShouldBeGreaterThanZero: boolean;
+        readonly isMaxNumberOfStickiedThreadsExceeded: boolean;
+        readonly type: 'ArithmeticError' | 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero' | 'MaxNumberOfStickiedThreadsExceeded';
+    }
+    /** @name PalletConstitutionConstitutionInfo (542) */
+    interface PalletConstitutionConstitutionInfo extends Struct {
+        readonly textHash: H256;
+    }
+    /** @name PalletBountyBountyRecord (543) */
+    interface PalletBountyBountyRecord extends Struct {
+        readonly creationParams: PalletBountyBountyParametersBoundedBTreeSet;
+        readonly totalFunding: u128;
+        readonly milestone: PalletBountyBountyMilestone;
+        readonly activeWorkEntryCount: u32;
+        readonly hasUnpaidOracleReward: bool;
+    }
+    /** @name PalletBountyBountyParametersBoundedBTreeSet (545) */
+    interface PalletBountyBountyParametersBoundedBTreeSet extends Struct {
+        readonly oracle: PalletBountyBountyActor;
+        readonly contractType: PalletBountyAssuranceContractTypeBoundedBTreeSet;
+        readonly creator: PalletBountyBountyActor;
+        readonly cherry: u128;
+        readonly oracleReward: u128;
+        readonly entrantStake: u128;
+        readonly fundingType: PalletBountyFundingType;
+    }
+    /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (546) */
+    interface PalletBountyAssuranceContractTypeBoundedBTreeSet extends Enum {
+        readonly isOpen: boolean;
+        readonly isClosed: boolean;
+        readonly asClosed: BTreeSet<u64>;
+        readonly type: 'Open' | 'Closed';
+    }
+    /** @name PalletBountyBountyMilestone (547) */
+    interface PalletBountyBountyMilestone extends Enum {
+        readonly isCreated: boolean;
+        readonly asCreated: {
+            readonly createdAt: u32;
+            readonly hasContributions: bool;
+        } & Struct;
+        readonly isBountyMaxFundingReached: boolean;
+        readonly isWorkSubmitted: boolean;
+        readonly isTerminated: boolean;
+        readonly isJudgmentSubmitted: boolean;
+        readonly asJudgmentSubmitted: {
+            readonly successfulBounty: bool;
+        } & Struct;
+        readonly type: 'Created' | 'BountyMaxFundingReached' | 'WorkSubmitted' | 'Terminated' | 'JudgmentSubmitted';
+    }
+    /** @name PalletBountyContribution (549) */
+    interface PalletBountyContribution extends Struct {
+        readonly amount: u128;
+        readonly funderStateBloatBondAmount: u128;
+    }
+    /** @name PalletBountyEntryRecord (550) */
+    interface PalletBountyEntryRecord extends Struct {
+        readonly memberId: u64;
+        readonly stakingAccountId: AccountId32;
+        readonly submittedAt: u32;
+        readonly workSubmitted: bool;
+    }
+    /** @name PalletBountyError (551) */
+    interface PalletBountyError extends Enum {
+        readonly isArithmeticError: boolean;
+        readonly isMinFundingAmountCannotBeGreaterThanMaxAmount: boolean;
+        readonly isBountyDoesntExist: boolean;
+        readonly isSwitchOracleOriginIsRoot: boolean;
+        readonly isInvalidStageUnexpectedFunding: boolean;
+        readonly isInvalidStageUnexpectedNoFundingContributed: boolean;
+        readonly isInvalidStageUnexpectedCancelled: boolean;
+        readonly isInvalidStageUnexpectedWorkSubmission: boolean;
+        readonly isInvalidStageUnexpectedJudgment: boolean;
+        readonly isInvalidStageUnexpectedSuccessfulBountyWithdrawal: boolean;
+        readonly isInvalidStageUnexpectedFailedBountyWithdrawal: boolean;
+        readonly isInsufficientBalanceForBounty: boolean;
+        readonly isNoBountyContributionFound: boolean;
+        readonly isInsufficientBalanceForStake: boolean;
+        readonly isConflictingStakes: boolean;
+        readonly isWorkEntryDoesntExist: boolean;
+        readonly isCherryLessThenMinimumAllowed: boolean;
+        readonly isCannotSubmitWorkToClosedContractBounty: boolean;
+        readonly isClosedContractMemberListIsEmpty: boolean;
+        readonly isClosedContractMemberListIsTooLarge: boolean;
+        readonly isClosedContractMemberNotFound: boolean;
+        readonly isInvalidOracleMemberId: boolean;
+        readonly isInvalidStakingAccountForMember: boolean;
+        readonly isZeroWinnerReward: boolean;
+        readonly isTotalRewardShouldBeEqualToTotalFunding: boolean;
+        readonly isEntrantStakeIsLessThanMininum: boolean;
+        readonly isFundingAmountCannotBeZero: boolean;
+        readonly isFundingPeriodCannotBeZero: boolean;
+        readonly isWinnerShouldHasWorkSubmission: boolean;
+        readonly isInvalidContributorActorSpecified: boolean;
+        readonly isInvalidOracleActorSpecified: boolean;
+        readonly isInvalidEntrantWorkerSpecified: boolean;
+        readonly isInvalidCreatorActorSpecified: boolean;
+        readonly isWorkEntryDoesntBelongToWorker: boolean;
+        readonly isOracleRewardAlreadyWithdrawn: boolean;
+        readonly type: 'ArithmeticError' | 'MinFundingAmountCannotBeGreaterThanMaxAmount' | 'BountyDoesntExist' | 'SwitchOracleOriginIsRoot' | 'InvalidStageUnexpectedFunding' | 'InvalidStageUnexpectedNoFundingContributed' | 'InvalidStageUnexpectedCancelled' | 'InvalidStageUnexpectedWorkSubmission' | 'InvalidStageUnexpectedJudgment' | 'InvalidStageUnexpectedSuccessfulBountyWithdrawal' | 'InvalidStageUnexpectedFailedBountyWithdrawal' | 'InsufficientBalanceForBounty' | 'NoBountyContributionFound' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'WorkEntryDoesntExist' | 'CherryLessThenMinimumAllowed' | 'CannotSubmitWorkToClosedContractBounty' | 'ClosedContractMemberListIsEmpty' | 'ClosedContractMemberListIsTooLarge' | 'ClosedContractMemberNotFound' | 'InvalidOracleMemberId' | 'InvalidStakingAccountForMember' | 'ZeroWinnerReward' | 'TotalRewardShouldBeEqualToTotalFunding' | 'EntrantStakeIsLessThanMininum' | 'FundingAmountCannotBeZero' | 'FundingPeriodCannotBeZero' | 'WinnerShouldHasWorkSubmission' | 'InvalidContributorActorSpecified' | 'InvalidOracleActorSpecified' | 'InvalidEntrantWorkerSpecified' | 'InvalidCreatorActorSpecified' | 'WorkEntryDoesntBelongToWorker' | 'OracleRewardAlreadyWithdrawn';
+    }
+    /** @name PalletContentVideoRecord (553) */
+    interface PalletContentVideoRecord extends Struct {
+        readonly inChannel: u64;
+        readonly nftStatus: Option<PalletContentNftTypesOwnedNft>;
+        readonly dataObjects: BTreeSet<u64>;
+        readonly videoStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
+    }
+    /** @name PalletContentNftTypesOwnedNft (554) */
+    interface PalletContentNftTypesOwnedNft extends Struct {
+        readonly owner: PalletContentNftTypesNftOwner;
+        readonly transactionalStatus: PalletContentNftTypesTransactionalStatusRecord;
+        readonly creatorRoyalty: Option<Perbill>;
+        readonly openAuctionsNonce: u64;
+    }
+    /** @name PalletContentNftTypesTransactionalStatusRecord (555) */
+    interface PalletContentNftTypesTransactionalStatusRecord extends Enum {
+        readonly isIdle: boolean;
+        readonly isInitiatedOfferToMember: boolean;
+        readonly asInitiatedOfferToMember: ITuple<[u64, Option<u128>]>;
+        readonly isEnglishAuction: boolean;
+        readonly asEnglishAuction: PalletContentNftTypesEnglishAuctionRecord;
+        readonly isOpenAuction: boolean;
+        readonly asOpenAuction: PalletContentNftTypesOpenAuctionRecord;
+        readonly isBuyNow: boolean;
+        readonly asBuyNow: u128;
+        readonly type: 'Idle' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction' | 'BuyNow';
+    }
+    /** @name PalletContentNftTypesEnglishAuctionRecord (556) */
+    interface PalletContentNftTypesEnglishAuctionRecord extends Struct {
+        readonly startingPrice: u128;
+        readonly buyNowPrice: Option<u128>;
+        readonly whitelist: BTreeSet<u64>;
+        readonly end: u32;
+        readonly start: u32;
+        readonly extensionPeriod: u32;
+        readonly minBidStep: u128;
+        readonly topBid: Option<PalletContentNftTypesEnglishAuctionBid>;
+    }
+    /** @name PalletContentNftTypesEnglishAuctionBid (559) */
+    interface PalletContentNftTypesEnglishAuctionBid extends Struct {
+        readonly amount: u128;
+        readonly bidderId: u64;
+    }
+    /** @name PalletContentNftTypesOpenAuctionRecord (560) */
+    interface PalletContentNftTypesOpenAuctionRecord extends Struct {
+        readonly startingPrice: u128;
+        readonly buyNowPrice: Option<u128>;
+        readonly whitelist: BTreeSet<u64>;
+        readonly bidLockDuration: u32;
+        readonly auctionId: u64;
+        readonly start: u32;
+    }
+    /** @name PalletContentNftTypesNftOwner (561) */
+    interface PalletContentNftTypesNftOwner extends Enum {
+        readonly isChannelOwner: boolean;
+        readonly isMember: boolean;
+        readonly asMember: u64;
+        readonly type: 'ChannelOwner' | 'Member';
+    }
+    /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (564) */
+    interface PalletContentPermissionsCuratorGroupCuratorGroupRecord extends Struct {
+        readonly curators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+        readonly active: bool;
+        readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
+    }
+    /** @name PalletContentNftTypesOpenAuctionBidRecord (571) */
+    interface PalletContentNftTypesOpenAuctionBidRecord extends Struct {
+        readonly amount: u128;
+        readonly madeAtBlock: u32;
+        readonly auctionId: u64;
+    }
+    /** @name PalletContentErrorsError (572) */
+    interface PalletContentErrorsError extends Enum {
+        readonly isChannelStateBloatBondChanged: boolean;
+        readonly isVideoStateBloatBondChanged: boolean;
+        readonly isMinCashoutValueTooLow: boolean;
+        readonly isMaxCashoutValueTooHigh: boolean;
+        readonly isMaxNumberOfChannelCollaboratorsExceeded: boolean;
+        readonly isMaxNumberOfChannelAssetsExceeded: boolean;
+        readonly isMaxNumberOfVideoAssetsExceeded: boolean;
+        readonly isMaxNumberOfChannelAgentPermissionsExceeded: boolean;
+        readonly isMaxNumberOfPausedFeaturesPerChannelExceeded: boolean;
+        readonly isInvalidChannelBagWitnessProvided: boolean;
+        readonly isInvalidStorageBucketsNumWitnessProvided: boolean;
+        readonly isMissingStorageBucketsNumWitness: boolean;
+        readonly isChannelOwnerMemberDoesNotExist: boolean;
+        readonly isChannelOwnerCuratorGroupDoesNotExist: boolean;
+        readonly isChannelStateBloatBondBelowExistentialDeposit: boolean;
+        readonly isNumberOfAssetsToRemoveIsZero: boolean;
+        readonly isCuratorIsNotAMemberOfGivenCuratorGroup: boolean;
+        readonly isCuratorIsAlreadyAMemberOfGivenCuratorGroup: boolean;
+        readonly isCuratorGroupDoesNotExist: boolean;
+        readonly isCuratorsPerGroupLimitReached: boolean;
+        readonly isCuratorGroupIsNotActive: boolean;
+        readonly isCuratorIdInvalid: boolean;
+        readonly isLeadAuthFailed: boolean;
+        readonly isMemberAuthFailed: boolean;
+        readonly isCuratorAuthFailed: boolean;
+        readonly isBadOrigin: boolean;
+        readonly isActorNotAuthorized: boolean;
+        readonly isCategoryDoesNotExist: boolean;
+        readonly isChannelDoesNotExist: boolean;
+        readonly isVideoDoesNotExist: boolean;
+        readonly isVideoInSeason: boolean;
+        readonly isActorCannotBeLead: boolean;
+        readonly isActorCannotOwnChannel: boolean;
+        readonly isNftAlreadyOwnedByChannel: boolean;
+        readonly isNftAlreadyExists: boolean;
+        readonly isNftDoesNotExist: boolean;
+        readonly isOverflowOrUnderflowHappened: boolean;
+        readonly isDoesNotOwnNft: boolean;
+        readonly isRoyaltyUpperBoundExceeded: boolean;
+        readonly isRoyaltyLowerBoundExceeded: boolean;
+        readonly isAuctionDurationUpperBoundExceeded: boolean;
+        readonly isAuctionDurationLowerBoundExceeded: boolean;
+        readonly isExtensionPeriodUpperBoundExceeded: boolean;
+        readonly isExtensionPeriodLowerBoundExceeded: boolean;
+        readonly isBidLockDurationUpperBoundExceeded: boolean;
+        readonly isBidLockDurationLowerBoundExceeded: boolean;
+        readonly isStartingPriceUpperBoundExceeded: boolean;
+        readonly isStartingPriceLowerBoundExceeded: boolean;
+        readonly isAuctionBidStepUpperBoundExceeded: boolean;
+        readonly isAuctionBidStepLowerBoundExceeded: boolean;
+        readonly isInsufficientBalance: boolean;
+        readonly isBidStepConstraintViolated: boolean;
+        readonly isInvalidBidAmountSpecified: boolean;
+        readonly isStartingPriceConstraintViolated: boolean;
+        readonly isActionHasBidsAlready: boolean;
+        readonly isNftIsNotIdle: boolean;
+        readonly isPendingOfferDoesNotExist: boolean;
+        readonly isRewardAccountIsNotSet: boolean;
+        readonly isActorIsNotBidder: boolean;
+        readonly isAuctionCannotBeCompleted: boolean;
+        readonly isBidDoesNotExist: boolean;
+        readonly isBidIsForPastAuction: boolean;
+        readonly isStartsAtLowerBoundExceeded: boolean;
+        readonly isStartsAtUpperBoundExceeded: boolean;
+        readonly isAuctionDidNotStart: boolean;
+        readonly isNotInAuctionState: boolean;
+        readonly isMemberIsNotAllowedToParticipate: boolean;
+        readonly isMemberProfileNotFound: boolean;
+        readonly isNftNotInBuyNowState: boolean;
+        readonly isInvalidBuyNowWitnessPriceProvided: boolean;
+        readonly isIsNotOpenAuctionType: boolean;
+        readonly isIsNotEnglishAuctionType: boolean;
+        readonly isBidLockDurationIsNotExpired: boolean;
+        readonly isNftAuctionIsAlreadyExpired: boolean;
+        readonly isBuyNowMustBeGreaterThanStartingPrice: boolean;
+        readonly isTargetMemberDoesNotExist: boolean;
+        readonly isInvalidNftOfferWitnessPriceProvided: boolean;
+        readonly isMaxAuctionWhiteListLengthUpperBoundExceeded: boolean;
+        readonly isWhitelistHasOnlyOneMember: boolean;
+        readonly isWhitelistedMemberDoesNotExist: boolean;
+        readonly isNftNonChannelOwnerDoesNotExist: boolean;
+        readonly isExtensionPeriodIsGreaterThenAuctionDuration: boolean;
+        readonly isNoAssetsSpecified: boolean;
+        readonly isInvalidAssetsProvided: boolean;
+        readonly isChannelContainsVideos: boolean;
+        readonly isChannelContainsAssets: boolean;
+        readonly isInvalidBagSizeSpecified: boolean;
+        readonly isMigrationNotFinished: boolean;
+        readonly isReplyDoesNotExist: boolean;
+        readonly isUnsufficientBalance: boolean;
+        readonly isInsufficientTreasuryBalance: boolean;
+        readonly isInvalidMemberProvided: boolean;
+        readonly isActorNotAMember: boolean;
+        readonly isPaymentProofVerificationFailed: boolean;
+        readonly isCashoutAmountExceedsMaximumAmount: boolean;
+        readonly isCashoutAmountBelowMinimumAmount: boolean;
+        readonly isWithdrawalAmountExceedsChannelAccountWithdrawableBalance: boolean;
+        readonly isWithdrawFromChannelAmountIsZero: boolean;
+        readonly isChannelCashoutsDisabled: boolean;
+        readonly isMinCashoutAllowedExceedsMaxCashoutAllowed: boolean;
+        readonly isCuratorModerationActionNotAllowed: boolean;
+        readonly isMaxCuratorPermissionsPerLevelExceeded: boolean;
+        readonly isCuratorGroupMaxPermissionsByLevelMapSizeExceeded: boolean;
+        readonly isChannelFeaturePaused: boolean;
+        readonly isChannelBagMissing: boolean;
+        readonly isAssetsToRemoveBeyondEntityAssetsSet: boolean;
+        readonly isInvalidVideoDataObjectsCountProvided: boolean;
+        readonly isInvalidChannelTransferStatus: boolean;
+        readonly isInvalidChannelTransferAcceptor: boolean;
+        readonly isInvalidChannelTransferCommitmentParams: boolean;
+        readonly isChannelAgentInsufficientPermissions: boolean;
+        readonly isInvalidChannelOwner: boolean;
+        readonly isZeroReward: boolean;
+        readonly isInsufficientBalanceForTransfer: boolean;
+        readonly isInsufficientBalanceForChannelCreation: boolean;
+        readonly isInsufficientBalanceForVideoCreation: boolean;
+        readonly isInsufficientCouncilBudget: boolean;
+        readonly isGlobalNftDailyLimitExceeded: boolean;
+        readonly isGlobalNftWeeklyLimitExceeded: boolean;
+        readonly isChannelNftDailyLimitExceeded: boolean;
+        readonly isChannelNftWeeklyLimitExceeded: boolean;
+        readonly isCreatorTokenAlreadyIssued: boolean;
+        readonly isCreatorTokenNotIssued: boolean;
+        readonly isMemberIdCouldNotBeDerivedFromActor: boolean;
+        readonly isCannotWithdrawFromChannelWithCreatorTokenIssued: boolean;
+        readonly isPatronageCanOnlyBeClaimedForMemberOwnedChannels: boolean;
+        readonly isChannelTransfersBlockedDuringRevenueSplits: boolean;
+        readonly isChannelTransfersBlockedDuringTokenSales: boolean;
+        readonly isChannelTransfersBlockedDuringActiveAmm: boolean;
+        readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales' | 'ChannelTransfersBlockedDuringActiveAmm';
+    }
+    /** @name PalletStorageBagRecord (573) */
+    interface PalletStorageBagRecord extends Struct {
+        readonly storedBy: BTreeSet<u64>;
+        readonly distributedBy: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+        readonly objectsTotalSize: u64;
+        readonly objectsNumber: u64;
+    }
+    /** @name PalletStorageStorageBucketRecord (576) */
+    interface PalletStorageStorageBucketRecord extends Struct {
+        readonly operatorStatus: PalletStorageStorageBucketOperatorStatus;
+        readonly acceptingNewBags: bool;
+        readonly voucher: PalletStorageVoucher;
+        readonly assignedBags: u64;
+    }
+    /** @name PalletStorageStorageBucketOperatorStatus (577) */
+    interface PalletStorageStorageBucketOperatorStatus extends Enum {
+        readonly isMissing: boolean;
+        readonly isInvitedStorageWorker: boolean;
+        readonly asInvitedStorageWorker: u64;
+        readonly isStorageWorker: boolean;
+        readonly asStorageWorker: ITuple<[u64, AccountId32]>;
+        readonly type: 'Missing' | 'InvitedStorageWorker' | 'StorageWorker';
+    }
+    /** @name PalletStorageDynamicBagCreationPolicy (579) */
+    interface PalletStorageDynamicBagCreationPolicy extends Struct {
+        readonly numberOfStorageBuckets: u32;
+        readonly families: BTreeMap<u64, u32>;
+    }
+    /** @name PalletStorageDataObject (582) */
+    interface PalletStorageDataObject extends Struct {
+        readonly accepted: bool;
+        readonly stateBloatBond: PalletCommonBloatBondRepayableBloatBond;
+        readonly size_: u64;
+        readonly ipfsContentId: Bytes;
+    }
+    /** @name PalletStorageDistributionBucketFamilyRecord (583) */
+    interface PalletStorageDistributionBucketFamilyRecord extends Struct {
+        readonly nextDistributionBucketIndex: u64;
+    }
+    /** @name PalletStorageDistributionBucketRecord (584) */
+    interface PalletStorageDistributionBucketRecord extends Struct {
+        readonly acceptingNewBags: bool;
+        readonly distributing: bool;
+        readonly pendingInvitations: BTreeSet<u64>;
+        readonly operators: BTreeSet<u64>;
+        readonly assignedBags: u64;
+    }
+    /** @name PalletStorageError (587) */
+    interface PalletStorageError extends Enum {
+        readonly isArithmeticError: boolean;
+        readonly isInvalidCidLength: boolean;
+        readonly isNoObjectsOnUpload: boolean;
+        readonly isStorageBucketDoesntExist: boolean;
+        readonly isStorageBucketIsNotBoundToBag: boolean;
+        readonly isStorageBucketIsBoundToBag: boolean;
+        readonly isNoStorageBucketInvitation: boolean;
+        readonly isStorageProviderAlreadySet: boolean;
+        readonly isStorageProviderMustBeSet: boolean;
+        readonly isDifferentStorageProviderInvited: boolean;
+        readonly isInvitedStorageProvider: boolean;
+        readonly isStorageBucketIdCollectionsAreEmpty: boolean;
+        readonly isStorageBucketsNumberViolatesDynamicBagCreationPolicy: boolean;
+        readonly isDistributionBucketsViolatesDynamicBagCreationPolicy: boolean;
+        readonly isEmptyContentId: boolean;
+        readonly isZeroObjectSize: boolean;
+        readonly isInvalidStateBloatBondSourceAccount: boolean;
+        readonly isInvalidStorageProvider: boolean;
+        readonly isInsufficientBalance: boolean;
+        readonly isDataObjectDoesntExist: boolean;
+        readonly isUploadingBlocked: boolean;
+        readonly isDataObjectIdCollectionIsEmpty: boolean;
+        readonly isSourceAndDestinationBagsAreEqual: boolean;
+        readonly isDataObjectBlacklisted: boolean;
+        readonly isBlacklistSizeLimitExceeded: boolean;
+        readonly isVoucherMaxObjectSizeLimitExceeded: boolean;
+        readonly isVoucherMaxObjectNumberLimitExceeded: boolean;
+        readonly isStorageBucketObjectNumberLimitReached: boolean;
+        readonly isStorageBucketObjectSizeLimitReached: boolean;
+        readonly isInsufficientTreasuryBalance: boolean;
+        readonly isCannotDeleteNonEmptyStorageBucket: boolean;
+        readonly isDataObjectIdParamsAreEmpty: boolean;
+        readonly isStorageBucketsPerBagLimitTooLow: boolean;
+        readonly isStorageBucketsPerBagLimitTooHigh: boolean;
+        readonly isStorageBucketPerBagLimitExceeded: boolean;
+        readonly isStorageBucketDoesntAcceptNewBags: boolean;
+        readonly isDynamicBagExists: boolean;
+        readonly isDynamicBagDoesntExist: boolean;
+        readonly isStorageProviderOperatorDoesntExist: boolean;
+        readonly isDataSizeFeeChanged: boolean;
+        readonly isDataObjectStateBloatBondChanged: boolean;
+        readonly isCannotDeleteNonEmptyDynamicBag: boolean;
+        readonly isMaxDistributionBucketFamilyNumberLimitExceeded: boolean;
+        readonly isDistributionBucketFamilyDoesntExist: boolean;
+        readonly isDistributionBucketDoesntExist: boolean;
+        readonly isDistributionBucketIdCollectionsAreEmpty: boolean;
+        readonly isDistributionBucketDoesntAcceptNewBags: boolean;
+        readonly isMaxDistributionBucketNumberPerBagLimitExceeded: boolean;
+        readonly isDistributionBucketIsNotBoundToBag: boolean;
+        readonly isDistributionBucketIsBoundToBag: boolean;
+        readonly isDistributionBucketsPerBagLimitTooLow: boolean;
+        readonly isDistributionBucketsPerBagLimitTooHigh: boolean;
+        readonly isDistributionProviderOperatorDoesntExist: boolean;
+        readonly isDistributionProviderOperatorAlreadyInvited: boolean;
+        readonly isDistributionProviderOperatorSet: boolean;
+        readonly isNoDistributionBucketInvitation: boolean;
+        readonly isMustBeDistributionProviderOperatorForBucket: boolean;
+        readonly isMaxNumberOfPendingInvitationsLimitForDistributionBucketReached: boolean;
+        readonly isMaxNumberOfOperatorsPerDistributionBucketReached: boolean;
+        readonly isDistributionFamilyBoundToBagCreationPolicy: boolean;
+        readonly isMaxDataObjectSizeExceeded: boolean;
+        readonly isInvalidTransactorAccount: boolean;
+        readonly isNumberOfStorageBucketsOutsideOfAllowedContraints: boolean;
+        readonly isNumberOfDistributionBucketsOutsideOfAllowedContraints: boolean;
+        readonly isCallDisabled: boolean;
+        readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'MaxNumberOfOperatorsPerDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints' | 'CallDisabled';
+    }
+    /** @name PalletProjectTokenAccountData (588) */
+    interface PalletProjectTokenAccountData extends Struct {
+        readonly vestingSchedules: BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>;
+        readonly amount: u128;
+        readonly splitStakingStatus: Option<PalletProjectTokenStakingStatus>;
+        readonly bloatBond: PalletCommonBloatBondRepayableBloatBond;
+        readonly nextVestingTransferId: u64;
+        readonly lastSaleTotalPurchasedAmount: Option<ITuple<[u32, u128]>>;
+    }
+    /** @name PalletProjectTokenStakingStatus (589) */
+    interface PalletProjectTokenStakingStatus extends Struct {
+        readonly splitId: u32;
+        readonly amount: u128;
+    }
+    /** @name PalletProjectTokenVestingSchedule (591) */
+    interface PalletProjectTokenVestingSchedule extends Struct {
+        readonly linearVestingStartBlock: u32;
+        readonly linearVestingDuration: u32;
+        readonly cliffAmount: u128;
+        readonly postCliffTotalAmount: u128;
+        readonly burnedAmount: u128;
+    }
+    /** @name PalletProjectTokenTokenData (598) */
+    interface PalletProjectTokenTokenData extends Struct {
+        readonly totalSupply: u128;
+        readonly tokensIssued: u128;
+        readonly nextSaleId: u32;
+        readonly sale: Option<PalletProjectTokenTokenSale>;
+        readonly transferPolicy: PalletProjectTokenTransferPolicy;
+        readonly symbol: H256;
+        readonly patronageInfo: PalletProjectTokenPatronageData;
+        readonly accountsNumber: u64;
+        readonly revenueSplitRate: Permill;
+        readonly revenueSplit: PalletProjectTokenRevenueSplitState;
+        readonly nextRevenueSplitId: u32;
+        readonly ammCurve: Option<PalletProjectTokenAmmCurve>;
+    }
+    /** @name PalletProjectTokenRevenueSplitState (599) */
+    interface PalletProjectTokenRevenueSplitState extends Enum {
+        readonly isInactive: boolean;
+        readonly isActive: boolean;
+        readonly asActive: PalletProjectTokenRevenueSplitInfo;
+        readonly type: 'Inactive' | 'Active';
+    }
+    /** @name PalletProjectTokenRevenueSplitInfo (600) */
+    interface PalletProjectTokenRevenueSplitInfo extends Struct {
+        readonly allocation: u128;
+        readonly timeline: PalletProjectTokenTimeline;
+        readonly dividendsClaimed: u128;
+    }
+    /** @name PalletProjectTokenTimeline (601) */
+    interface PalletProjectTokenTimeline extends Struct {
+        readonly start: u32;
+        readonly duration: u32;
+    }
+    /** @name PalletProjectTokenPatronageData (603) */
+    interface PalletProjectTokenPatronageData extends Struct {
+        readonly rate: Permill;
+        readonly unclaimedPatronageTallyAmount: u128;
+        readonly lastUnclaimedPatronageTallyBlock: u32;
+    }
+    /** @name PalletProjectTokenErrorsError (605) */
+    interface PalletProjectTokenErrorsError extends Enum {
+        readonly isArithmeticError: boolean;
+        readonly isInsufficientTransferrableBalance: boolean;
+        readonly isTokenDoesNotExist: boolean;
+        readonly isAccountInformationDoesNotExist: boolean;
+        readonly isTransferDestinationMemberDoesNotExist: boolean;
+        readonly isMerkleProofVerificationFailure: boolean;
+        readonly isTokenSymbolAlreadyInUse: boolean;
+        readonly isInitialAllocationToNonExistingMember: boolean;
+        readonly isAccountAlreadyExists: boolean;
+        readonly isTooManyTransferOutputs: boolean;
+        readonly isTokenIssuanceNotInIdleState: boolean;
+        readonly isInsufficientJoyBalance: boolean;
+        readonly isJoyTransferSubjectToDusting: boolean;
+        readonly isAttemptToRemoveNonOwnedAccountUnderPermissionedMode: boolean;
+        readonly isAttemptToRemoveNonEmptyAccount: boolean;
+        readonly isCannotJoinWhitelistInPermissionlessMode: boolean;
+        readonly isCannotDeissueTokenWithOutstandingAccounts: boolean;
+        readonly isNoUpcomingSale: boolean;
+        readonly isNoActiveSale: boolean;
+        readonly isInsufficientBalanceForTokenPurchase: boolean;
+        readonly isNotEnoughTokensOnSale: boolean;
+        readonly isSaleStartingBlockInThePast: boolean;
+        readonly isSaleAccessProofRequired: boolean;
+        readonly isSaleAccessProofParticipantIsNotSender: boolean;
+        readonly isSalePurchaseCapExceeded: boolean;
+        readonly isMaxVestingSchedulesPerAccountPerTokenReached: boolean;
+        readonly isPreviousSaleNotFinalized: boolean;
+        readonly isNoTokensToRecover: boolean;
+        readonly isSaleDurationTooShort: boolean;
+        readonly isSaleDurationIsZero: boolean;
+        readonly isSaleUpperBoundQuantityIsZero: boolean;
+        readonly isSaleCapPerMemberIsZero: boolean;
+        readonly isSaleUnitPriceIsZero: boolean;
+        readonly isSalePurchaseAmountIsZero: boolean;
+        readonly isCannotInitSaleIfAmmIsActive: boolean;
+        readonly isRevenueSplitTimeToStartTooShort: boolean;
+        readonly isRevenueSplitDurationTooShort: boolean;
+        readonly isRevenueSplitAlreadyActiveForToken: boolean;
+        readonly isRevenueSplitNotActiveForToken: boolean;
+        readonly isRevenueSplitDidNotEnd: boolean;
+        readonly isRevenueSplitNotOngoing: boolean;
+        readonly isUserAlreadyParticipating: boolean;
+        readonly isInsufficientBalanceForSplitParticipation: boolean;
+        readonly isUserNotParticipantingInAnySplit: boolean;
+        readonly isCannotParticipateInSplitWithZeroAmount: boolean;
+        readonly isCannotIssueSplitWithZeroAllocationAmount: boolean;
+        readonly isCannotModifySupplyWhenRevenueSplitsAreActive: boolean;
+        readonly isRevenueSplitRateIsZero: boolean;
+        readonly isBurnAmountIsZero: boolean;
+        readonly isBurnAmountGreaterThanAccountTokensAmount: boolean;
+        readonly isNotInAmmState: boolean;
+        readonly isInvalidCurveParameters: boolean;
+        readonly isDeadlineExpired: boolean;
+        readonly isSlippageToleranceExceeded: boolean;
+        readonly isInsufficientTokenBalance: boolean;
+        readonly isOutstandingAmmProvidedSupplyTooLarge: boolean;
+        readonly isCurveSlopeParametersTooLow: boolean;
+        readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
+        readonly isYearlyPatronageRateLimitExceeded: boolean;
+        readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'TransferDestinationMemberDoesNotExist' | 'MerkleProofVerificationFailure' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TooManyTransferOutputs' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'CannotInitSaleIfAmmIsActive' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount' | 'NotInAmmState' | 'InvalidCurveParameters' | 'DeadlineExpired' | 'SlippageToleranceExceeded' | 'InsufficientTokenBalance' | 'OutstandingAmmProvidedSupplyTooLarge' | 'CurveSlopeParametersTooLow' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'YearlyPatronageRateLimitExceeded';
+    }
+    /** @name PalletProposalsEngineProposal (606) */
+    interface PalletProposalsEngineProposal extends Struct {
+        readonly parameters: PalletProposalsEngineProposalParameters;
+        readonly proposerId: u64;
+        readonly activatedAt: u32;
+        readonly status: PalletProposalsEngineProposalStatusesProposalStatus;
+        readonly votingResults: PalletProposalsEngineVotingResults;
+        readonly exactExecutionBlock: Option<u32>;
+        readonly nrOfCouncilConfirmations: u32;
+        readonly stakingAccountId: Option<AccountId32>;
+    }
+    /** @name PalletProposalsEngineProposalParameters (607) */
+    interface PalletProposalsEngineProposalParameters extends Struct {
+        readonly votingPeriod: u32;
+        readonly gracePeriod: u32;
+        readonly approvalQuorumPercentage: u32;
+        readonly approvalThresholdPercentage: u32;
+        readonly slashingQuorumPercentage: u32;
+        readonly slashingThresholdPercentage: u32;
+        readonly requiredStake: Option<u128>;
+        readonly constitutionality: u32;
+    }
+    /** @name PalletProposalsEngineVotingResults (608) */
+    interface PalletProposalsEngineVotingResults extends Struct {
+        readonly abstentions: u32;
+        readonly approvals: u32;
+        readonly rejections: u32;
+        readonly slashes: u32;
+    }
+    /** @name PalletProposalsEngineError (611) */
+    interface PalletProposalsEngineError extends Enum {
+        readonly isArithmeticError: boolean;
+        readonly isEmptyTitleProvided: boolean;
+        readonly isEmptyDescriptionProvided: boolean;
+        readonly isTitleIsTooLong: boolean;
+        readonly isDescriptionIsTooLong: boolean;
+        readonly isProposalNotFound: boolean;
+        readonly isProposalFinalized: boolean;
+        readonly isAlreadyVoted: boolean;
+        readonly isNotAuthor: boolean;
+        readonly isMaxActiveProposalNumberExceeded: boolean;
+        readonly isEmptyStake: boolean;
+        readonly isStakeShouldBeEmpty: boolean;
+        readonly isStakeDiffersFromRequired: boolean;
+        readonly isInvalidParameterApprovalThreshold: boolean;
+        readonly isInvalidParameterSlashingThreshold: boolean;
+        readonly isRequireRootOrigin: boolean;
+        readonly isProposalHasVotes: boolean;
+        readonly isZeroExactExecutionBlock: boolean;
+        readonly isInvalidExactExecutionBlock: boolean;
+        readonly isInsufficientBalanceForStake: boolean;
+        readonly isConflictingStakes: boolean;
+        readonly isInvalidStakingAccountForMember: boolean;
+        readonly isMaxDispatchableCallCodeSizeExceeded: boolean;
+        readonly type: 'ArithmeticError' | 'EmptyTitleProvided' | 'EmptyDescriptionProvided' | 'TitleIsTooLong' | 'DescriptionIsTooLong' | 'ProposalNotFound' | 'ProposalFinalized' | 'AlreadyVoted' | 'NotAuthor' | 'MaxActiveProposalNumberExceeded' | 'EmptyStake' | 'StakeShouldBeEmpty' | 'StakeDiffersFromRequired' | 'InvalidParameterApprovalThreshold' | 'InvalidParameterSlashingThreshold' | 'RequireRootOrigin' | 'ProposalHasVotes' | 'ZeroExactExecutionBlock' | 'InvalidExactExecutionBlock' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'InvalidStakingAccountForMember' | 'MaxDispatchableCallCodeSizeExceeded';
+    }
+    /** @name PalletProposalsDiscussionDiscussionThread (612) */
+    interface PalletProposalsDiscussionDiscussionThread extends Struct {
+        readonly activatedAt: u32;
+        readonly authorId: u64;
+        readonly mode: PalletProposalsDiscussionThreadModeBoundedBTreeSet;
+    }
+    /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (614) */
+    interface PalletProposalsDiscussionThreadModeBoundedBTreeSet extends Enum {
+        readonly isOpen: boolean;
+        readonly isClosed: boolean;
+        readonly asClosed: BTreeSet<u64>;
+        readonly type: 'Open' | 'Closed';
+    }
+    /** @name PalletProposalsDiscussionDiscussionPost (615) */
+    interface PalletProposalsDiscussionDiscussionPost extends Struct {
+        readonly authorId: u64;
+        readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
+        readonly lastEdited: u32;
+    }
+    /** @name PalletProposalsDiscussionError (616) */
+    interface PalletProposalsDiscussionError extends Enum {
+        readonly isArithmeticError: boolean;
+        readonly isThreadDoesntExist: boolean;
+        readonly isPostDoesntExist: boolean;
+        readonly isRequireRootOrigin: boolean;
+        readonly isCannotPostOnClosedThread: boolean;
+        readonly isNotAuthorOrCouncilor: boolean;
+        readonly isMaxWhiteListSizeExceeded: boolean;
+        readonly isWhitelistedMemberDoesNotExist: boolean;
+        readonly isInsufficientBalanceForPost: boolean;
+        readonly isCannotDeletePost: boolean;
+        readonly type: 'ArithmeticError' | 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'WhitelistedMemberDoesNotExist' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
+    }
+    /** @name PalletProposalsCodexError (617) */
+    interface PalletProposalsCodexError extends Enum {
+        readonly isSignalProposalIsEmpty: boolean;
+        readonly isRuntimeProposalIsEmpty: boolean;
+        readonly isInvalidFundingRequestProposalBalance: boolean;
+        readonly isInvalidValidatorCount: boolean;
+        readonly isRequireRootOrigin: boolean;
+        readonly isInvalidCouncilElectionParameterCouncilSize: boolean;
+        readonly isInvalidCouncilElectionParameterCandidacyLimit: boolean;
+        readonly isInvalidCouncilElectionParameterMinVotingStake: boolean;
+        readonly isInvalidCouncilElectionParameterNewTermDuration: boolean;
+        readonly isInvalidCouncilElectionParameterMinCouncilStake: boolean;
+        readonly isInvalidCouncilElectionParameterRevealingPeriod: boolean;
+        readonly isInvalidCouncilElectionParameterVotingPeriod: boolean;
+        readonly isInvalidCouncilElectionParameterAnnouncingPeriod: boolean;
+        readonly isInvalidWorkingGroupBudgetCapacity: boolean;
+        readonly isInvalidSetLeadParameterCannotBeCouncilor: boolean;
+        readonly isSlashingStakeIsZero: boolean;
+        readonly isDecreasingStakeIsZero: boolean;
+        readonly isInsufficientFundsForBudgetUpdate: boolean;
+        readonly isInvalidFundingRequestProposalNumberOfAccount: boolean;
+        readonly isInvalidFundingRequestProposalRepeatedAccount: boolean;
+        readonly isInvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout: boolean;
+        readonly isInvalidLeadWorkerId: boolean;
+        readonly isInvalidLeadOpeningId: boolean;
+        readonly isInvalidLeadApplicationId: boolean;
+        readonly isInvalidProposalId: boolean;
+        readonly isArithmeticError: boolean;
+        readonly isMaxYearlyPatronageRateCannotBeZero: boolean;
+        readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId' | 'ArithmeticError' | 'MaxYearlyPatronageRateCannotBeZero';
+    }
+    /** @name PalletWorkingGroupOpening (618) */
+    interface PalletWorkingGroupOpening extends Struct {
+        readonly openingType: PalletWorkingGroupOpeningType;
+        readonly created: u32;
+        readonly descriptionHash: H256;
+        readonly stakePolicy: PalletWorkingGroupStakePolicy;
+        readonly rewardPerBlock: Option<u128>;
+        readonly creationStake: u128;
+    }
+    /** @name PalletWorkingGroupJobApplication (619) */
+    interface PalletWorkingGroupJobApplication extends Struct {
+        readonly roleAccountId: AccountId32;
+        readonly rewardAccountId: AccountId32;
+        readonly stakingAccountId: AccountId32;
+        readonly memberId: u64;
+        readonly descriptionHash: H256;
+        readonly openingId: u64;
+    }
+    /** @name PalletWorkingGroupGroupWorker (620) */
+    interface PalletWorkingGroupGroupWorker extends Struct {
+        readonly memberId: u64;
+        readonly roleAccountId: AccountId32;
+        readonly stakingAccountId: AccountId32;
+        readonly rewardAccountId: AccountId32;
+        readonly startedLeavingAt: Option<u32>;
+        readonly jobUnstakingPeriod: u32;
+        readonly rewardPerBlock: Option<u128>;
+        readonly missedReward: Option<u128>;
+        readonly createdAt: u32;
+    }
+    /** @name PalletWorkingGroupErrorsError (621) */
+    interface PalletWorkingGroupErrorsError extends Enum {
+        readonly isArithmeticError: boolean;
+        readonly isStakeBalanceCannotBeZero: boolean;
+        readonly isOpeningDoesNotExist: boolean;
+        readonly isCannotHireMultipleLeaders: boolean;
+        readonly isWorkerApplicationDoesNotExist: boolean;
+        readonly isMaxActiveWorkerNumberExceeded: boolean;
+        readonly isSuccessfulWorkerApplicationDoesNotExist: boolean;
+        readonly isCannotHireLeaderWhenLeaderExists: boolean;
+        readonly isIsNotLeadAccount: boolean;
+        readonly isCurrentLeadNotSet: boolean;
+        readonly isWorkerDoesNotExist: boolean;
+        readonly isInvalidMemberOrigin: boolean;
+        readonly isSignerIsNotWorkerRoleAccount: boolean;
+        readonly isBelowMinimumStakes: boolean;
+        readonly isInsufficientBalanceToCoverStake: boolean;
+        readonly isApplicationStakeDoesntMatchOpening: boolean;
+        readonly isOriginIsNotApplicant: boolean;
+        readonly isWorkerIsLeaving: boolean;
+        readonly isCannotRewardWithZero: boolean;
+        readonly isInvalidStakingAccountForMember: boolean;
+        readonly isConflictStakesOnAccount: boolean;
+        readonly isWorkerHasNoReward: boolean;
+        readonly isUnstakingPeriodLessThanMinimum: boolean;
+        readonly isCannotSpendZero: boolean;
+        readonly isInsufficientBudgetForSpending: boolean;
+        readonly isNoApplicationsProvided: boolean;
+        readonly isCannotDecreaseStakeDeltaGreaterThanStake: boolean;
+        readonly isApplicationsNotForOpening: boolean;
+        readonly isWorkerStorageValueTooLong: boolean;
+        readonly isInsufficientTokensForFunding: boolean;
+        readonly isZeroTokensFunding: boolean;
+        readonly isInsufficientBalanceForTransfer: boolean;
+        readonly type: 'ArithmeticError' | 'StakeBalanceCannotBeZero' | 'OpeningDoesNotExist' | 'CannotHireMultipleLeaders' | 'WorkerApplicationDoesNotExist' | 'MaxActiveWorkerNumberExceeded' | 'SuccessfulWorkerApplicationDoesNotExist' | 'CannotHireLeaderWhenLeaderExists' | 'IsNotLeadAccount' | 'CurrentLeadNotSet' | 'WorkerDoesNotExist' | 'InvalidMemberOrigin' | 'SignerIsNotWorkerRoleAccount' | 'BelowMinimumStakes' | 'InsufficientBalanceToCoverStake' | 'ApplicationStakeDoesntMatchOpening' | 'OriginIsNotApplicant' | 'WorkerIsLeaving' | 'CannotRewardWithZero' | 'InvalidStakingAccountForMember' | 'ConflictStakesOnAccount' | 'WorkerHasNoReward' | 'UnstakingPeriodLessThanMinimum' | 'CannotSpendZero' | 'InsufficientBudgetForSpending' | 'NoApplicationsProvided' | 'CannotDecreaseStakeDeltaGreaterThanStake' | 'ApplicationsNotForOpening' | 'WorkerStorageValueTooLong' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'InsufficientBalanceForTransfer';
+    }
+    /** @name SpRuntimeMultiSignature (631) */
+    interface SpRuntimeMultiSignature extends Enum {
+        readonly isEd25519: boolean;
+        readonly asEd25519: SpCoreEd25519Signature;
+        readonly isSr25519: boolean;
+        readonly asSr25519: SpCoreSr25519Signature;
+        readonly isEcdsa: boolean;
+        readonly asEcdsa: SpCoreEcdsaSignature;
+        readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
+    }
+    /** @name SpCoreEcdsaSignature (632) */
+    interface SpCoreEcdsaSignature extends U8aFixed {
+    }
+    /** @name FrameSystemExtensionsCheckNonZeroSender (635) */
+    type FrameSystemExtensionsCheckNonZeroSender = Null;
+    /** @name FrameSystemExtensionsCheckSpecVersion (636) */
+    type FrameSystemExtensionsCheckSpecVersion = Null;
+    /** @name FrameSystemExtensionsCheckTxVersion (637) */
+    type FrameSystemExtensionsCheckTxVersion = Null;
+    /** @name FrameSystemExtensionsCheckGenesis (638) */
+    type FrameSystemExtensionsCheckGenesis = Null;
+    /** @name FrameSystemExtensionsCheckNonce (641) */
+    interface FrameSystemExtensionsCheckNonce extends Compact<u32> {
+    }
+    /** @name FrameSystemExtensionsCheckWeight (642) */
+    type FrameSystemExtensionsCheckWeight = Null;
+    /** @name PalletTransactionPaymentChargeTransactionPayment (643) */
+    interface PalletTransactionPaymentChargeTransactionPayment extends Compact<u128> {
+    }
+    /** @name JoystreamNodeRuntimeRuntime (644) */
+    type JoystreamNodeRuntimeRuntime = Null;
+}
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-consts.js b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-consts.js
new file mode 100644
index 0000000..c60e7ef
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-consts.js
@@ -0,0 +1,4 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-errors.js b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-errors.js
new file mode 100644
index 0000000..c60e7ef
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-errors.js
@@ -0,0 +1,4 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-events.js b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-events.js
new file mode 100644
index 0000000..c60e7ef
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-events.js
@@ -0,0 +1,4 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-query.js b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-query.js
new file mode 100644
index 0000000..c60e7ef
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-query.js
@@ -0,0 +1,4 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-rpc.js b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-rpc.js
new file mode 100644
index 0000000..c60e7ef
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-rpc.js
@@ -0,0 +1,4 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-tx.js b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-tx.js
new file mode 100644
index 0000000..c60e7ef
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api-tx.js
@@ -0,0 +1,4 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/augment-api.js b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api.js
new file mode 100644
index 0000000..e18ffa2
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/augment-api.js
@@ -0,0 +1,10 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
+require("./augment-api-consts");
+require("./augment-api-errors");
+require("./augment-api-events");
+require("./augment-api-query");
+require("./augment-api-tx");
+require("./augment-api-rpc");
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/augment-types.js b/node_modules/@joystream/types/types/lib/cjs/augment/augment-types.js
new file mode 100644
index 0000000..c56161d
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/augment-types.js
@@ -0,0 +1,4 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/lookup.js b/node_modules/@joystream/types/types/lib/cjs/augment/lookup.js
new file mode 100644
index 0000000..4846482
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/lookup.js
@@ -0,0 +1,4627 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
+/* eslint-disable sort-keys */
+exports.default = {
+    /**
+     * Lookup3: frame_system::AccountInfo<Index, pallet_balances::AccountData<Balance>>
+     **/
+    FrameSystemAccountInfo: {
+        nonce: 'u32',
+        consumers: 'u32',
+        providers: 'u32',
+        sufficients: 'u32',
+        data: 'PalletBalancesAccountData'
+    },
+    /**
+     * Lookup5: pallet_balances::AccountData<Balance>
+     **/
+    PalletBalancesAccountData: {
+        free: 'u128',
+        reserved: 'u128',
+        miscFrozen: 'u128',
+        feeFrozen: 'u128'
+    },
+    /**
+     * Lookup7: frame_support::weights::PerDispatchClass<T>
+     **/
+    FrameSupportWeightsPerDispatchClassU64: {
+        normal: 'u64',
+        operational: 'u64',
+        mandatory: 'u64'
+    },
+    /**
+     * Lookup11: sp_runtime::generic::digest::Digest
+     **/
+    SpRuntimeDigest: {
+        logs: 'Vec<SpRuntimeDigestDigestItem>'
+    },
+    /**
+     * Lookup13: sp_runtime::generic::digest::DigestItem
+     **/
+    SpRuntimeDigestDigestItem: {
+        _enum: {
+            Other: 'Bytes',
+            __Unused1: 'Null',
+            __Unused2: 'Null',
+            __Unused3: 'Null',
+            Consensus: '([u8;4],Bytes)',
+            Seal: '([u8;4],Bytes)',
+            PreRuntime: '([u8;4],Bytes)',
+            __Unused7: 'Null',
+            RuntimeEnvironmentUpdated: 'Null'
+        }
+    },
+    /**
+     * Lookup16: frame_system::EventRecord<joystream_node_runtime::Event, primitive_types::H256>
+     **/
+    FrameSystemEventRecord: {
+        phase: 'FrameSystemPhase',
+        event: 'Event',
+        topics: 'Vec<H256>'
+    },
+    /**
+     * Lookup18: frame_system::pallet::Event<T>
+     **/
+    FrameSystemEvent: {
+        _enum: {
+            ExtrinsicSuccess: {
+                dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+            },
+            ExtrinsicFailed: {
+                dispatchError: 'SpRuntimeDispatchError',
+                dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+            },
+            CodeUpdated: 'Null',
+            NewAccount: {
+                account: 'AccountId32',
+            },
+            KilledAccount: {
+                account: 'AccountId32',
+            },
+            Remarked: {
+                _alias: {
+                    hash_: 'hash',
+                },
+                sender: 'AccountId32',
+                hash_: 'H256'
+            }
+        }
+    },
+    /**
+     * Lookup19: frame_support::weights::DispatchInfo
+     **/
+    FrameSupportWeightsDispatchInfo: {
+        weight: 'u64',
+        class: 'FrameSupportWeightsDispatchClass',
+        paysFee: 'FrameSupportWeightsPays'
+    },
+    /**
+     * Lookup20: frame_support::weights::DispatchClass
+     **/
+    FrameSupportWeightsDispatchClass: {
+        _enum: ['Normal', 'Operational', 'Mandatory']
+    },
+    /**
+     * Lookup21: frame_support::weights::Pays
+     **/
+    FrameSupportWeightsPays: {
+        _enum: ['Yes', 'No']
+    },
+    /**
+     * Lookup22: sp_runtime::DispatchError
+     **/
+    SpRuntimeDispatchError: {
+        _enum: {
+            Other: 'Null',
+            CannotLookup: 'Null',
+            BadOrigin: 'Null',
+            Module: 'SpRuntimeModuleError',
+            ConsumerRemaining: 'Null',
+            NoProviders: 'Null',
+            TooManyConsumers: 'Null',
+            Token: 'SpRuntimeTokenError',
+            Arithmetic: 'SpRuntimeArithmeticError',
+            Transactional: 'SpRuntimeTransactionalError'
+        }
+    },
+    /**
+     * Lookup23: sp_runtime::ModuleError
+     **/
+    SpRuntimeModuleError: {
+        index: 'u8',
+        error: '[u8;4]'
+    },
+    /**
+     * Lookup24: sp_runtime::TokenError
+     **/
+    SpRuntimeTokenError: {
+        _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', 'Unsupported']
+    },
+    /**
+     * Lookup25: sp_runtime::ArithmeticError
+     **/
+    SpRuntimeArithmeticError: {
+        _enum: ['Underflow', 'Overflow', 'DivisionByZero']
+    },
+    /**
+     * Lookup26: sp_runtime::TransactionalError
+     **/
+    SpRuntimeTransactionalError: {
+        _enum: ['LimitReached', 'NoLayer']
+    },
+    /**
+     * Lookup27: pallet_utility::pallet::Event
+     **/
+    PalletUtilityEvent: {
+        _enum: {
+            BatchInterrupted: {
+                index: 'u32',
+                error: 'SpRuntimeDispatchError',
+            },
+            BatchCompleted: 'Null',
+            BatchCompletedWithErrors: 'Null',
+            ItemCompleted: 'Null',
+            ItemFailed: {
+                error: 'SpRuntimeDispatchError',
+            },
+            DispatchedAs: {
+                result: 'Result<Null, SpRuntimeDispatchError>'
+            }
+        }
+    },
+    /**
+     * Lookup30: pallet_balances::pallet::Event<T, I>
+     **/
+    PalletBalancesEvent: {
+        _enum: {
+            Endowed: {
+                account: 'AccountId32',
+                freeBalance: 'u128',
+            },
+            DustLost: {
+                account: 'AccountId32',
+                amount: 'u128',
+            },
+            Transfer: {
+                from: 'AccountId32',
+                to: 'AccountId32',
+                amount: 'u128',
+            },
+            BalanceSet: {
+                who: 'AccountId32',
+                free: 'u128',
+                reserved: 'u128',
+            },
+            Reserved: {
+                who: 'AccountId32',
+                amount: 'u128',
+            },
+            Unreserved: {
+                who: 'AccountId32',
+                amount: 'u128',
+            },
+            ReserveRepatriated: {
+                from: 'AccountId32',
+                to: 'AccountId32',
+                amount: 'u128',
+                destinationStatus: 'FrameSupportTokensMiscBalanceStatus',
+            },
+            Deposit: {
+                who: 'AccountId32',
+                amount: 'u128',
+            },
+            Withdraw: {
+                who: 'AccountId32',
+                amount: 'u128',
+            },
+            Slashed: {
+                who: 'AccountId32',
+                amount: 'u128'
+            }
+        }
+    },
+    /**
+     * Lookup31: frame_support::traits::tokens::misc::BalanceStatus
+     **/
+    FrameSupportTokensMiscBalanceStatus: {
+        _enum: ['Free', 'Reserved']
+    },
+    /**
+     * Lookup32: pallet_election_provider_multi_phase::pallet::Event<T>
+     **/
+    PalletElectionProviderMultiPhaseEvent: {
+        _enum: {
+            SolutionStored: {
+                electionCompute: 'PalletElectionProviderMultiPhaseElectionCompute',
+                prevEjected: 'bool',
+            },
+            ElectionFinalized: {
+                electionCompute: 'Option<PalletElectionProviderMultiPhaseElectionCompute>',
+            },
+            Rewarded: {
+                account: 'AccountId32',
+                value: 'u128',
+            },
+            Slashed: {
+                account: 'AccountId32',
+                value: 'u128',
+            },
+            SignedPhaseStarted: {
+                round: 'u32',
+            },
+            UnsignedPhaseStarted: {
+                round: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup33: pallet_election_provider_multi_phase::ElectionCompute
+     **/
+    PalletElectionProviderMultiPhaseElectionCompute: {
+        _enum: ['OnChain', 'Signed', 'Unsigned', 'Fallback', 'Emergency']
+    },
+    /**
+     * Lookup36: pallet_staking::pallet::pallet::Event<T>
+     **/
+    PalletStakingPalletEvent: {
+        _enum: {
+            EraPaid: '(u32,u128,u128)',
+            Rewarded: '(AccountId32,u128)',
+            Slashed: '(AccountId32,u128)',
+            OldSlashingReportDiscarded: 'u32',
+            StakersElected: 'Null',
+            Bonded: '(AccountId32,u128)',
+            Unbonded: '(AccountId32,u128)',
+            Withdrawn: '(AccountId32,u128)',
+            Kicked: '(AccountId32,AccountId32)',
+            StakingElectionFailed: 'Null',
+            Chilled: 'AccountId32',
+            PayoutStarted: '(u32,AccountId32)',
+            ValidatorPrefsSet: '(AccountId32,PalletStakingValidatorPrefs)'
+        }
+    },
+    /**
+     * Lookup37: pallet_staking::ValidatorPrefs
+     **/
+    PalletStakingValidatorPrefs: {
+        commission: 'Compact<Perbill>',
+        blocked: 'bool'
+    },
+    /**
+     * Lookup40: pallet_session::pallet::Event
+     **/
+    PalletSessionEvent: {
+        _enum: {
+            NewSession: {
+                sessionIndex: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup41: pallet_grandpa::pallet::Event
+     **/
+    PalletGrandpaEvent: {
+        _enum: {
+            NewAuthorities: {
+                authoritySet: 'Vec<(SpFinalityGrandpaAppPublic,u64)>',
+            },
+            Paused: 'Null',
+            Resumed: 'Null'
+        }
+    },
+    /**
+     * Lookup44: sp_finality_grandpa::app::Public
+     **/
+    SpFinalityGrandpaAppPublic: 'SpCoreEd25519Public',
+    /**
+     * Lookup45: sp_core::ed25519::Public
+     **/
+    SpCoreEd25519Public: '[u8;32]',
+    /**
+     * Lookup46: pallet_im_online::pallet::Event<T>
+     **/
+    PalletImOnlineEvent: {
+        _enum: {
+            HeartbeatReceived: {
+                authorityId: 'PalletImOnlineSr25519AppSr25519Public',
+            },
+            AllGood: 'Null',
+            SomeOffline: {
+                offline: 'Vec<(AccountId32,PalletStakingExposure)>'
+            }
+        }
+    },
+    /**
+     * Lookup47: pallet_im_online::sr25519::app_sr25519::Public
+     **/
+    PalletImOnlineSr25519AppSr25519Public: 'SpCoreSr25519Public',
+    /**
+     * Lookup48: sp_core::sr25519::Public
+     **/
+    SpCoreSr25519Public: '[u8;32]',
+    /**
+     * Lookup51: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStakingExposure: {
+        total: 'Compact<u128>',
+        own: 'Compact<u128>',
+        others: 'Vec<PalletStakingIndividualExposure>'
+    },
+    /**
+     * Lookup54: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStakingIndividualExposure: {
+        who: 'AccountId32',
+        value: 'Compact<u128>'
+    },
+    /**
+     * Lookup55: pallet_offences::pallet::Event
+     **/
+    PalletOffencesEvent: {
+        _enum: {
+            Offence: {
+                kind: '[u8;16]',
+                timeslot: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup57: pallet_bags_list::pallet::Event<T, I>
+     **/
+    PalletBagsListEvent: {
+        _enum: {
+            Rebagged: {
+                who: 'AccountId32',
+                from: 'u64',
+                to: 'u64',
+            },
+            ScoreUpdated: {
+                who: 'AccountId32',
+                newScore: 'u64'
+            }
+        }
+    },
+    /**
+     * Lookup58: pallet_vesting::pallet::Event<T>
+     **/
+    PalletVestingEvent: {
+        _enum: {
+            VestingUpdated: {
+                account: 'AccountId32',
+                unvested: 'u128',
+            },
+            VestingCompleted: {
+                account: 'AccountId32'
+            }
+        }
+    },
+    /**
+     * Lookup59: pallet_multisig::pallet::Event<T>
+     **/
+    PalletMultisigEvent: {
+        _enum: {
+            NewMultisig: {
+                approving: 'AccountId32',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]',
+            },
+            MultisigApproval: {
+                approving: 'AccountId32',
+                timepoint: 'PalletMultisigTimepoint',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]',
+            },
+            MultisigExecuted: {
+                approving: 'AccountId32',
+                timepoint: 'PalletMultisigTimepoint',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]',
+                result: 'Result<Null, SpRuntimeDispatchError>',
+            },
+            MultisigCancelled: {
+                cancelling: 'AccountId32',
+                timepoint: 'PalletMultisigTimepoint',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]'
+            }
+        }
+    },
+    /**
+     * Lookup60: pallet_multisig::Timepoint<BlockNumber>
+     **/
+    PalletMultisigTimepoint: {
+        height: 'u32',
+        index: 'u32'
+    },
+    /**
+     * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     **/
+    PalletCouncilRawEvent: {
+        _enum: {
+            AnnouncingPeriodStarted: 'u32',
+            NotEnoughCandidates: 'u32',
+            VotingPeriodStarted: 'u32',
+            NewCandidate: '(u64,AccountId32,AccountId32,u128)',
+            NewCouncilElected: '(Vec<u64>,u32)',
+            NewCouncilNotElected: 'u32',
+            CandidacyStakeRelease: 'u64',
+            CandidacyWithdraw: 'u64',
+            CandidacyNoteSet: '(u64,Bytes)',
+            RewardPayment: '(u64,AccountId32,u128,u128)',
+            BudgetBalanceSet: 'u128',
+            BudgetRefill: 'u128',
+            BudgetRefillPlanned: 'u32',
+            BudgetIncrementUpdated: 'u128',
+            CouncilorRewardUpdated: 'u128',
+            RequestFunded: '(AccountId32,u128)',
+            CouncilBudgetFunded: '(u64,u128,Bytes)',
+            CouncilorRemarked: '(u64,Bytes)',
+            CandidateRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup63: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     **/
+    PalletReferendumRawEvent: {
+        _enum: {
+            ReferendumStarted: '(u32,u32)',
+            ReferendumStartedForcefully: '(u32,u32)',
+            RevealingStageStarted: 'u32',
+            ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
+            VoteCast: '(AccountId32,H256,u128)',
+            VoteRevealed: '(AccountId32,u64,Bytes)',
+            StakeReleased: 'AccountId32',
+            AccountOptedOutOfVoting: 'AccountId32'
+        }
+    },
+    /**
+     * Lookup64: pallet_referendum::Instance1
+     **/
+    PalletReferendumInstance1: 'Null',
+    /**
+     * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
+     **/
+    PalletReferendumOptionResult: {
+        optionId: 'u64',
+        votePower: 'u128'
+    },
+    /**
+     * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletMembershipRawEvent: {
+        _enum: {
+            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters,u128)',
+            MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
+            MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
+            MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
+            MemberAccountsUpdated: '(u64,Option<AccountId32>,Option<AccountId32>)',
+            MemberVerificationStatusUpdated: '(u64,bool,u64)',
+            ReferralCutUpdated: 'u8',
+            InvitesTransferred: '(u64,u64,u32)',
+            MembershipPriceUpdated: 'u128',
+            InitialInvitationBalanceUpdated: 'u128',
+            LeaderInvitationQuotaUpdated: 'u32',
+            InitialInvitationCountUpdated: 'u32',
+            StakingAccountAdded: '(AccountId32,u64)',
+            StakingAccountRemoved: '(AccountId32,u64)',
+            StakingAccountConfirmed: '(AccountId32,u64)',
+            MemberRemarked: '(u64,Bytes,Option<(AccountId32,u128)>)',
+            MemberCreated: '(u64,PalletMembershipCreateMemberParameters,u32)'
+        }
+    },
+    /**
+     * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     **/
+    PalletMembershipBuyMembershipParameters: {
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        handle: 'Option<Bytes>',
+        metadata: 'Bytes',
+        referrerId: 'Option<u64>'
+    },
+    /**
+     * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     **/
+    PalletMembershipInviteMembershipParameters: {
+        invitingMemberId: 'u64',
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        handle: 'Option<Bytes>',
+        metadata: 'Bytes'
+    },
+    /**
+     * Lookup72: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+     **/
+    PalletMembershipCreateMemberParameters: {
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        handle: 'Bytes',
+        metadata: 'Bytes',
+        isFoundingMember: 'bool'
+    },
+    /**
+     * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletMembershipGiftMembershipParameters: {
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        handle: 'Option<Bytes>',
+        metadata: 'Bytes',
+        creditControllerAccount: 'u128',
+        applyControllerAccountInvitationLock: 'Option<u128>',
+        creditRootAccount: 'u128',
+        applyRootAccountInvitationLock: 'Option<u128>'
+    },
+    /**
+     * Lookup78: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     **/
+    PalletForumRawEvent: {
+        _enum: {
+            CategoryCreated: '(u64,Option<u64>,Bytes,Bytes)',
+            CategoryArchivalStatusUpdated: '(u64,bool,PalletForumPrivilegedActor)',
+            CategoryTitleUpdated: '(u64,H256,PalletForumPrivilegedActor)',
+            CategoryDescriptionUpdated: '(u64,H256,PalletForumPrivilegedActor)',
+            CategoryDeleted: '(u64,PalletForumPrivilegedActor)',
+            ThreadCreated: '(u64,u64,u64,u64,Bytes,Bytes)',
+            ThreadModerated: '(u64,Bytes,PalletForumPrivilegedActor,u64)',
+            ThreadUpdated: '(u64,bool,PalletForumPrivilegedActor,u64)',
+            ThreadMetadataUpdated: '(u64,u64,u64,Bytes)',
+            ThreadDeleted: '(u64,u64,u64,bool)',
+            ThreadMoved: '(u64,u64,PalletForumPrivilegedActor,u64)',
+            PostAdded: '(u64,u64,u64,u64,Bytes,bool)',
+            PostModerated: '(u64,Bytes,PalletForumPrivilegedActor,u64,u64)',
+            PostDeleted: '(Bytes,u64,BTreeMap<PalletForumExtendedPostIdObject, bool>)',
+            PostTextUpdated: '(u64,u64,u64,u64,Bytes)',
+            CategoryStickyThreadUpdate: '(u64,BTreeSet<u64>,PalletForumPrivilegedActor)',
+            CategoryMembershipOfModeratorUpdated: '(u64,u64,bool)'
+        }
+    },
+    /**
+     * Lookup79: pallet_forum::PrivilegedActor<T>
+     **/
+    PalletForumPrivilegedActor: {
+        _enum: {
+            Lead: 'Null',
+            Moderator: 'u64'
+        }
+    },
+    /**
+     * Lookup80: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     **/
+    PalletForumExtendedPostIdObject: {
+        categoryId: 'u64',
+        threadId: 'u64',
+        postId: 'u64'
+    },
+    /**
+     * Lookup85: pallet_constitution::RawEvent<primitive_types::H256>
+     **/
+    PalletConstitutionRawEvent: {
+        _enum: {
+            ConstutionAmended: '(H256,Bytes)'
+        }
+    },
+    /**
+     * Lookup86: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     **/
+    PalletBountyRawEvent: {
+        _enum: {
+            BountyCreated: '(u64,PalletBountyBountyParametersBTreeSet,Bytes)',
+            BountyOracleSwitched: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+            BountyTerminated: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+            BountyFunded: '(u64,PalletBountyBountyActor,u128)',
+            BountyMaxFundingReached: 'u64',
+            BountyFundingWithdrawal: '(u64,PalletBountyBountyActor)',
+            BountyCreatorCherryWithdrawal: '(u64,PalletBountyBountyActor)',
+            BountyCreatorOracleRewardWithdrawal: '(u64,PalletBountyBountyActor)',
+            BountyOracleRewardWithdrawal: '(u64,PalletBountyBountyActor,u128)',
+            BountyRemoved: 'u64',
+            WorkEntryAnnounced: '(u64,u64,u64,AccountId32,Bytes)',
+            WorkSubmitted: '(u64,u64,u64,Bytes)',
+            OracleJudgmentSubmitted: '(u64,PalletBountyBountyActor,BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>,Bytes)',
+            WorkEntrantFundsWithdrawn: '(u64,u64,u64)',
+            BountyContributorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+            BountyOracleRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+            BountyEntrantRemarked: '(u64,u64,u64,Bytes)',
+            BountyCreatorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+            WorkSubmissionPeriodEnded: '(u64,PalletBountyBountyActor)',
+            WorkEntrantStakeUnlocked: '(u64,u64,AccountId32)',
+            WorkEntrantStakeSlashed: '(u64,u64,AccountId32,u128)',
+            FunderStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)',
+            CreatorStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)'
+        }
+    },
+    /**
+     * Lookup87: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+     **/
+    PalletBountyBountyParametersBTreeSet: {
+        oracle: 'PalletBountyBountyActor',
+        contractType: 'PalletBountyAssuranceContractTypeBTreeSet',
+        creator: 'PalletBountyBountyActor',
+        cherry: 'u128',
+        oracleReward: 'u128',
+        entrantStake: 'u128',
+        fundingType: 'PalletBountyFundingType'
+    },
+    /**
+     * Lookup88: pallet_bounty::BountyActor<MemberId>
+     **/
+    PalletBountyBountyActor: {
+        _enum: {
+            Council: 'Null',
+            Member: 'u64'
+        }
+    },
+    /**
+     * Lookup89: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+     **/
+    PalletBountyAssuranceContractTypeBTreeSet: {
+        _enum: {
+            Open: 'Null',
+            Closed: 'BTreeSet<u64>'
+        }
+    },
+    /**
+     * Lookup90: pallet_bounty::FundingType<BlockNumber, Balance>
+     **/
+    PalletBountyFundingType: {
+        _enum: {
+            Perpetual: {
+                target: 'u128',
+            },
+            Limited: {
+                target: 'u128',
+                fundingPeriod: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup92: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     **/
+    PalletBountyOracleWorkEntryJudgment: {
+        _enum: {
+            Winner: {
+                reward: 'u128',
+            },
+            Rejected: {
+                slashingShare: 'Perbill',
+                actionJustification: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup95: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletUtilityRawEvent: {
+        _enum: {
+            Signaled: 'Bytes',
+            RuntimeUpgraded: 'Bytes',
+            UpdatedWorkingGroupBudget: '(PalletCommonWorkingGroupIterableEnumsWorkingGroup,u128,PalletCommonBalanceKind)',
+            TokensBurned: '(AccountId32,u128)'
+        }
+    },
+    /**
+     * Lookup96: pallet_common::working_group::iterable_enums::WorkingGroup
+     **/
+    PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
+        _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'App', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
+    },
+    /**
+     * Lookup97: pallet_common::BalanceKind
+     **/
+    PalletCommonBalanceKind: {
+        _enum: ['Positive', 'Negative']
+    },
+    /**
+     * Lookup98: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     **/
+    PalletContentRawEvent: {
+        _enum: {
+            CuratorGroupCreated: 'u64',
+            CuratorGroupPermissionsUpdated: '(u64,BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>)',
+            CuratorGroupStatusSet: '(u64,bool)',
+            CuratorAdded: '(u64,u64,BTreeSet<PalletContentIterableEnumsChannelActionPermission>)',
+            CuratorRemoved: '(u64,u64)',
+            ChannelCreated: '(u64,PalletContentChannelRecord,PalletContentChannelCreationParametersRecord,AccountId32)',
+            ChannelUpdated: '(PalletContentPermissionsContentActor,u64,PalletContentChannelUpdateParametersRecord,BTreeSet<u64>)',
+            ChannelPrivilegeLevelUpdated: '(u64,u8)',
+            ChannelStateBloatBondValueUpdated: 'u128',
+            VideoStateBloatBondValueUpdated: 'u128',
+            ChannelAssetsRemoved: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,PalletContentChannelRecord)',
+            ChannelDeleted: '(PalletContentPermissionsContentActor,u64)',
+            ChannelDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
+            ChannelVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
+            ChannelPausedFeaturesUpdatedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>,Bytes)',
+            ChannelAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,Bytes)',
+            ChannelFundsWithdrawn: '(PalletContentPermissionsContentActor,u64,u128,PalletContentChannelFundsDestination)',
+            ChannelRewardClaimedAndWithdrawn: '(PalletContentPermissionsContentActor,u64,u128,PalletContentChannelFundsDestination)',
+            VideoCreated: '(PalletContentPermissionsContentActor,u64,u64,PalletContentVideoCreationParametersRecord,BTreeSet<u64>)',
+            VideoUpdated: '(PalletContentPermissionsContentActor,u64,PalletContentVideoUpdateParametersRecord,BTreeSet<u64>)',
+            VideoDeleted: '(PalletContentPermissionsContentActor,u64)',
+            VideoDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
+            VideoVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
+            VideoAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,bool,Bytes)',
+            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>,AccountId32)',
+            ChannelRewardUpdated: '(u128,u128,u64)',
+            EnglishAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesEnglishAuctionParamsRecord)',
+            OpenAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesOpenAuctionParamsRecord,u64)',
+            NftIssued: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesNftIssuanceParametersRecord)',
+            NftDestroyed: '(PalletContentPermissionsContentActor,u64)',
+            AuctionBidMade: '(u64,u64,u128,Option<u64>)',
+            AuctionBidCanceled: '(u64,u64)',
+            AuctionCanceled: '(PalletContentPermissionsContentActor,u64)',
+            EnglishAuctionSettled: '(u64,AccountId32,u64)',
+            BidMadeCompletingAuction: '(u64,u64,Option<u64>)',
+            OpenAuctionBidAccepted: '(PalletContentPermissionsContentActor,u64,u64,u128)',
+            OfferStarted: '(u64,PalletContentPermissionsContentActor,u64,Option<u128>)',
+            OfferAccepted: 'u64',
+            OfferCanceled: '(u64,PalletContentPermissionsContentActor)',
+            NftSellOrderMade: '(u64,PalletContentPermissionsContentActor,u128)',
+            NftBought: '(u64,u64)',
+            BuyNowCanceled: '(u64,PalletContentPermissionsContentActor)',
+            BuyNowPriceUpdated: '(u64,PalletContentPermissionsContentActor,u128)',
+            NftSlingedBackToTheOriginalArtist: '(u64,PalletContentPermissionsContentActor)',
+            ChannelOwnerRemarked: '(u64,Bytes)',
+            ChannelAgentRemarked: '(PalletContentPermissionsContentActor,u64,Bytes)',
+            NftOwnerRemarked: '(PalletContentPermissionsContentActor,u64,Bytes)',
+            InitializedChannelTransfer: '(u64,PalletContentPermissionsContentActor,PalletContentPendingTransfer)',
+            CancelChannelTransfer: '(u64,PalletContentPermissionsContentActor)',
+            ChannelTransferAccepted: '(u64,PalletContentTransferCommitmentParametersBTreeMap)',
+            GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
+            ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
+            ToggledNftLimits: 'bool',
+            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)',
+            CreatorTokenIssuerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup99: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     **/
+    PalletContentPermissionsContentActor: {
+        _enum: {
+            Curator: '(u64,u64)',
+            Member: 'u64',
+            Lead: 'Null'
+        }
+    },
+    /**
+     * Lookup100: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletContentChannelRecord: {
+        owner: 'PalletContentChannelOwner',
+        numVideos: 'u64',
+        collaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        cumulativeRewardClaimed: 'u128',
+        privilegeLevel: 'u8',
+        pausedFeatures: 'BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>',
+        transferStatus: 'PalletContentChannelTransferStatus',
+        dataObjects: 'BTreeSet<u64>',
+        dailyNftLimit: 'PalletContentLimitPerPeriod',
+        weeklyNftLimit: 'PalletContentLimitPerPeriod',
+        dailyNftCounter: 'PalletContentNftCounter',
+        weeklyNftCounter: 'PalletContentNftCounter',
+        creatorTokenId: 'Option<u64>',
+        channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
+    },
+    /**
+     * Lookup104: pallet_content::types::iterable_enums::ChannelActionPermission
+     **/
+    PalletContentIterableEnumsChannelActionPermission: {
+        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken', 'AmmControl', 'CreatorTokenRemarks']
+    },
+    /**
+     * Lookup111: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+     **/
+    PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
+        _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
+    },
+    /**
+     * Lookup114: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletCommonBloatBondRepayableBloatBond: {
+        repaymentRestrictedTo: 'Option<AccountId32>',
+        amount: 'u128'
+    },
+    /**
+     * Lookup115: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     **/
+    PalletContentChannelOwner: {
+        _enum: {
+            Member: 'u64',
+            CuratorGroup: 'u64'
+        }
+    },
+    /**
+     * Lookup116: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     **/
+    PalletContentChannelTransferStatus: {
+        _enum: {
+            NoActiveTransfer: 'Null',
+            PendingTransfer: 'PalletContentPendingTransfer'
+        }
+    },
+    /**
+     * Lookup117: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     **/
+    PalletContentPendingTransfer: {
+        newOwner: 'PalletContentChannelOwner',
+        transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
+    },
+    /**
+     * Lookup118: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+     **/
+    PalletContentTransferCommitmentParametersBoundedBTreeMap: {
+        newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        price: 'u128',
+        transferId: 'u64'
+    },
+    /**
+     * Lookup119: pallet_content::types::LimitPerPeriod<BlockNumber>
+     **/
+    PalletContentLimitPerPeriod: {
+        limit: 'u64',
+        blockNumberPeriod: 'u32'
+    },
+    /**
+     * Lookup120: pallet_content::types::NftCounter<BlockNumber>
+     **/
+    PalletContentNftCounter: {
+        counter: 'u64',
+        lastUpdated: 'u32'
+    },
+    /**
+     * Lookup121: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     **/
+    PalletContentNftTypesEnglishAuctionParamsRecord: {
+        startingPrice: 'u128',
+        buyNowPrice: 'Option<u128>',
+        whitelist: 'BTreeSet<u64>',
+        startsAt: 'Option<u32>',
+        duration: 'u32',
+        extensionPeriod: 'u32',
+        minBidStep: 'u128'
+    },
+    /**
+     * Lookup123: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     **/
+    PalletContentNftTypesOpenAuctionParamsRecord: {
+        startingPrice: 'u128',
+        buyNowPrice: 'Option<u128>',
+        startsAt: 'Option<u32>',
+        whitelist: 'BTreeSet<u64>',
+        bidLockDuration: 'u32'
+    },
+    /**
+     * Lookup124: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     **/
+    PalletContentNftTypesNftIssuanceParametersRecord: {
+        royalty: 'Option<Perbill>',
+        nftMetadata: 'Bytes',
+        nonChannelOwner: 'Option<u64>',
+        initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
+    },
+    /**
+     * Lookup125: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     **/
+    PalletContentNftTypesInitTransactionalStatusRecord: {
+        _enum: {
+            Idle: 'Null',
+            BuyNow: 'u128',
+            InitiatedOfferToMember: '(u64,Option<u128>)',
+            EnglishAuction: 'PalletContentNftTypesEnglishAuctionParamsRecord',
+            OpenAuction: 'PalletContentNftTypesOpenAuctionParamsRecord'
+        }
+    },
+    /**
+     * Lookup127: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     **/
+    PalletContentChannelCreationParametersRecord: {
+        assets: 'Option<PalletContentStorageAssetsRecord>',
+        meta: 'Option<Bytes>',
+        collaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        storageBuckets: 'BTreeSet<u64>',
+        distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>',
+        expectedChannelStateBloatBond: 'u128',
+        expectedDataObjectStateBloatBond: 'u128'
+    },
+    /**
+     * Lookup128: pallet_content::types::StorageAssetsRecord<Balance>
+     **/
+    PalletContentStorageAssetsRecord: {
+        objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+        expectedDataSizeFee: 'u128'
+    },
+    /**
+     * Lookup130: pallet_storage::DataObjectCreationParameters
+     **/
+    PalletStorageDataObjectCreationParameters: {
+        _alias: {
+            size_: 'size'
+        },
+        size_: 'u64',
+        ipfsContentId: 'Bytes'
+    },
+    /**
+     * Lookup131: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     **/
+    PalletStorageDistributionBucketIdRecord: {
+        distributionBucketFamilyId: 'u64',
+        distributionBucketIndex: 'u64'
+    },
+    /**
+     * Lookup138: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     **/
+    PalletContentChannelUpdateParametersRecord: {
+        assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
+        newMeta: 'Option<Bytes>',
+        assetsToRemove: 'BTreeSet<u64>',
+        collaborators: 'Option<BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>>',
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBucketsNumWitness: 'Option<u32>'
+    },
+    /**
+     * Lookup140: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     **/
+    PalletContentVideoCreationParametersRecord: {
+        assets: 'Option<PalletContentStorageAssetsRecord>',
+        meta: 'Option<Bytes>',
+        autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
+        expectedVideoStateBloatBond: 'u128',
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBucketsNumWitness: 'u32'
+    },
+    /**
+     * Lookup142: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     **/
+    PalletContentVideoUpdateParametersRecord: {
+        assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
+        newMeta: 'Option<Bytes>',
+        assetsToRemove: 'BTreeSet<u64>',
+        autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBucketsNumWitness: 'Option<u32>'
+    },
+    /**
+     * Lookup145: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+     **/
+    PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
+        _enum: {
+            HideVideo: 'Null',
+            HideChannel: 'Null',
+            ChangeChannelFeatureStatus: 'PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature',
+            DeleteVideo: 'Null',
+            DeleteChannel: 'Null',
+            DeleteVideoAssets: 'bool',
+            DeleteNonVideoChannelAssets: 'Null',
+            UpdateChannelNftLimits: 'Null'
+        }
+    },
+    /**
+     * Lookup149: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+     **/
+    PalletContentTransferCommitmentParametersBTreeMap: {
+        newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        price: 'u128',
+        transferId: 'u64'
+    },
+    /**
+     * Lookup150: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
+     **/
+    PalletContentUpdateChannelPayoutsParametersRecord: {
+        commitment: 'Option<H256>',
+        payload: 'Option<PalletContentChannelPayoutsPayloadParametersRecord>',
+        minCashoutAllowed: 'Option<u128>',
+        maxCashoutAllowed: 'Option<u128>',
+        channelCashoutsEnabled: 'Option<bool>'
+    },
+    /**
+     * Lookup151: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
+     **/
+    PalletContentChannelPayoutsPayloadParametersRecord: {
+        objectCreationParams: 'PalletStorageDataObjectCreationParameters',
+        expectedDataSizeFee: 'u128',
+        expectedDataObjectStateBloatBond: 'u128'
+    },
+    /**
+     * Lookup155: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     **/
+    PalletContentChannelFundsDestination: {
+        _enum: {
+            AccountId: 'AccountId32',
+            CouncilBudget: 'Null'
+        }
+    },
+    /**
+     * Lookup156: pallet_content::types::NftLimitPeriod
+     **/
+    PalletContentNftLimitPeriod: {
+        _enum: ['Daily', 'Weekly']
+    },
+    /**
+     * Lookup157: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+     **/
+    PalletStorageRawEvent: {
+        _enum: {
+            StorageBucketCreated: '(u64,Option<u64>,bool,u64,u64)',
+            StorageBucketInvitationAccepted: '(u64,u64,AccountId32)',
+            StorageBucketsUpdatedForBag: '(PalletStorageBagIdType,BTreeSet<u64>,BTreeSet<u64>)',
+            DataObjectsUploaded: '(BTreeSet<u64>,PalletStorageUploadParametersRecord,u128)',
+            StorageOperatorMetadataSet: '(u64,u64,Bytes)',
+            StorageBucketVoucherLimitsSet: '(u64,u64,u64)',
+            PendingDataObjectsAccepted: '(u64,u64,PalletStorageBagIdType,BTreeSet<u64>)',
+            StorageBucketInvitationCancelled: 'u64',
+            StorageBucketOperatorInvited: '(u64,u64)',
+            StorageBucketOperatorRemoved: 'u64',
+            UploadingBlockStatusUpdated: 'bool',
+            DataObjectPerMegabyteFeeUpdated: 'u128',
+            StorageBucketsPerBagLimitUpdated: 'u32',
+            StorageBucketsVoucherMaxLimitsUpdated: '(u64,u64)',
+            DataObjectsMoved: '(PalletStorageBagIdType,PalletStorageBagIdType,BTreeSet<u64>)',
+            DataObjectsDeleted: '(AccountId32,PalletStorageBagIdType,BTreeSet<u64>)',
+            StorageBucketStatusUpdated: '(u64,bool)',
+            UpdateBlacklist: '(BTreeSet<Bytes>,BTreeSet<Bytes>)',
+            DynamicBagDeleted: 'PalletStorageDynamicBagIdType',
+            DynamicBagCreated: '(PalletStorageDynBagCreationParametersRecord,BTreeSet<u64>)',
+            VoucherChanged: '(u64,PalletStorageVoucher)',
+            StorageBucketDeleted: 'u64',
+            NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: '(PalletStorageDynamicBagType,u32)',
+            DistributionBucketFamilyCreated: 'u64',
+            DistributionBucketFamilyDeleted: 'u64',
+            DistributionBucketCreated: '(u64,bool,PalletStorageDistributionBucketIdRecord)',
+            DistributionBucketStatusUpdated: '(PalletStorageDistributionBucketIdRecord,bool)',
+            DistributionBucketDeleted: 'PalletStorageDistributionBucketIdRecord',
+            DistributionBucketsUpdatedForBag: '(PalletStorageBagIdType,u64,BTreeSet<u64>,BTreeSet<u64>)',
+            DistributionBucketsPerBagLimitUpdated: 'u32',
+            DistributionBucketModeUpdated: '(PalletStorageDistributionBucketIdRecord,bool)',
+            FamiliesInDynamicBagCreationPolicyUpdated: '(PalletStorageDynamicBagType,BTreeMap<u64, u32>)',
+            DistributionBucketOperatorInvited: '(PalletStorageDistributionBucketIdRecord,u64)',
+            DistributionBucketInvitationCancelled: '(PalletStorageDistributionBucketIdRecord,u64)',
+            DistributionBucketInvitationAccepted: '(u64,PalletStorageDistributionBucketIdRecord)',
+            DistributionBucketMetadataSet: '(u64,PalletStorageDistributionBucketIdRecord,Bytes)',
+            DistributionBucketOperatorRemoved: '(PalletStorageDistributionBucketIdRecord,u64)',
+            DistributionBucketFamilyMetadataSet: '(u64,Bytes)',
+            DataObjectStateBloatBondValueUpdated: 'u128',
+            DataObjectsUpdated: '(PalletStorageUploadParametersRecord,BTreeSet<u64>,BTreeSet<u64>)',
+            StorageOperatorRemarked: '(u64,u64,Bytes)',
+            DistributionOperatorRemarked: '(u64,PalletStorageDistributionBucketIdRecord,Bytes)'
+        }
+    },
+    /**
+     * Lookup158: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStorageUploadParametersRecord: {
+        bagId: 'PalletStorageBagIdType',
+        objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+        stateBloatBondSourceAccountId: 'AccountId32',
+        expectedDataSizeFee: 'u128',
+        expectedDataObjectStateBloatBond: 'u128'
+    },
+    /**
+     * Lookup159: pallet_storage::BagIdType<MemberId, ChannelId>
+     **/
+    PalletStorageBagIdType: {
+        _enum: {
+            Static: 'PalletStorageStaticBagId',
+            Dynamic: 'PalletStorageDynamicBagIdType'
+        }
+    },
+    /**
+     * Lookup160: pallet_storage::StaticBagId
+     **/
+    PalletStorageStaticBagId: {
+        _enum: {
+            Council: 'Null',
+            WorkingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+        }
+    },
+    /**
+     * Lookup161: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     **/
+    PalletStorageDynamicBagIdType: {
+        _enum: {
+            Member: 'u64',
+            Channel: 'u64'
+        }
+    },
+    /**
+     * Lookup162: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     **/
+    PalletStorageDynBagCreationParametersRecord: {
+        bagId: 'PalletStorageDynamicBagIdType',
+        objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+        stateBloatBondSourceAccountId: 'AccountId32',
+        expectedDataSizeFee: 'u128',
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBuckets: 'BTreeSet<u64>',
+        distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
+    },
+    /**
+     * Lookup165: pallet_storage::Voucher
+     **/
+    PalletStorageVoucher: {
+        sizeLimit: 'u64',
+        objectsLimit: 'u64',
+        sizeUsed: 'u64',
+        objectsUsed: 'u64'
+    },
+    /**
+     * Lookup166: pallet_storage::DynamicBagType
+     **/
+    PalletStorageDynamicBagType: {
+        _enum: ['Member', 'Channel']
+    },
+    /**
+     * Lookup170: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
+     **/
+    PalletProjectTokenEventsRawEvent: {
+        _enum: {
+            TokenAmountTransferred: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+            TokenAmountTransferredByIssuer: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+            PatronageRateDecreasedTo: '(u64,Permill)',
+            PatronageCreditClaimed: '(u64,u128,u64)',
+            RevenueSplitIssued: '(u64,u32,u32,u128)',
+            RevenueSplitFinalized: '(u64,AccountId32,u128)',
+            UserParticipatedInSplit: '(u64,u64,u128,u128,u32)',
+            RevenueSplitLeft: '(u64,u64,u128)',
+            MemberJoinedWhitelist: '(u64,u64,PalletProjectTokenTransferPolicy)',
+            AccountDustedBy: '(u64,u64,AccountId32,PalletProjectTokenTransferPolicy)',
+            TokenDeissued: 'u64',
+            TokenIssued: '(u64,PalletProjectTokenTokenIssuanceParameters)',
+            TokenSaleInitialized: '(u64,u32,PalletProjectTokenTokenSale,Option<Bytes>)',
+            UpcomingTokenSaleUpdated: '(u64,u32,Option<u32>,Option<u32>)',
+            TokensPurchasedOnSale: '(u64,u32,u128,u64)',
+            TokenSaleFinalized: '(u64,u32,u128,u128)',
+            TransferPolicyChangedToPermissionless: 'u64',
+            TokensBurned: '(u64,u64,u128)',
+            AmmActivated: '(u64,u64,PalletProjectTokenAmmCurve)',
+            TokensBoughtOnAmm: '(u64,u64,u128,u128)',
+            TokensSoldOnAmm: '(u64,u64,u128,u128)',
+            AmmDeactivated: '(u64,u64,u128)',
+            MaxYearlyPatronageRateUpdated: 'Permill'
+        }
+    },
+    /**
+     * Lookup171: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     **/
+    PalletProjectTokenTransferPolicy: {
+        _enum: {
+            Permissionless: 'Null',
+            Permissioned: 'H256'
+        }
+    },
+    /**
+     * Lookup172: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     **/
+    PalletProjectTokenTokenIssuanceParameters: {
+        initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
+        symbol: 'H256',
+        transferPolicy: 'PalletProjectTokenTransferPolicyParams',
+        patronageRate: 'Permill',
+        revenueSplitRate: 'Permill'
+    },
+    /**
+     * Lookup173: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     **/
+    PalletProjectTokenTokenAllocation: {
+        amount: 'u128',
+        vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
+    },
+    /**
+     * Lookup174: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     **/
+    PalletProjectTokenVestingScheduleParams: {
+        linearVestingDuration: 'u32',
+        blocksBeforeCliff: 'u32',
+        cliffAmountPercentage: 'Permill'
+    },
+    /**
+     * Lookup177: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     **/
+    PalletProjectTokenTransferPolicyParams: {
+        _enum: {
+            Permissionless: 'Null',
+            Permissioned: 'PalletProjectTokenWhitelistParams'
+        }
+    },
+    /**
+     * Lookup178: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     **/
+    PalletProjectTokenWhitelistParams: {
+        commitment: 'H256',
+        payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
+    },
+    /**
+     * Lookup179: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     **/
+    PalletProjectTokenSingleDataObjectUploadParams: {
+        objectCreationParams: 'PalletStorageDataObjectCreationParameters',
+        expectedDataSizeFee: 'u128',
+        expectedDataObjectStateBloatBond: 'u128'
+    },
+    /**
+     * Lookup185: pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>
+     **/
+    PalletProjectTokenTransfers: 'BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>',
+    /**
+     * Lookup186: pallet_project_token::types::Validated<MemberId>
+     **/
+    PalletProjectTokenValidated: {
+        _enum: {
+            Existing: 'u64',
+            NonExisting: 'u64'
+        }
+    },
+    /**
+     * Lookup187: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     **/
+    PalletProjectTokenValidatedPayment: {
+        payment: 'PalletProjectTokenPaymentWithVesting',
+        vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
+    },
+    /**
+     * Lookup188: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     **/
+    PalletProjectTokenPaymentWithVesting: {
+        amount: 'u128',
+        vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
+    },
+    /**
+     * Lookup190: pallet_project_token::types::VestingSource
+     **/
+    PalletProjectTokenVestingSource: {
+        _enum: {
+            InitialIssuance: 'Null',
+            Sale: 'u32',
+            IssuerTransfer: 'u64'
+        }
+    },
+    /**
+     * Lookup194: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     **/
+    PalletProjectTokenTokenSale: {
+        unitPrice: 'u128',
+        quantityLeft: 'u128',
+        fundsCollected: 'u128',
+        tokensSource: 'u64',
+        earningsDestination: 'Option<AccountId32>',
+        startBlock: 'u32',
+        duration: 'u32',
+        vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>',
+        capPerMember: 'Option<u128>',
+        autoFinalize: 'bool'
+    },
+    /**
+     * Lookup195: pallet_project_token::types::AmmCurve<Balance>
+     **/
+    PalletProjectTokenAmmCurve: {
+        slope: 'u128',
+        intercept: 'u128',
+        providedSupply: 'u128'
+    },
+    /**
+     * Lookup196: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     **/
+    PalletProposalsEngineRawEvent: {
+        _enum: {
+            ProposalStatusUpdated: '(u32,PalletProposalsEngineProposalStatusesProposalStatus)',
+            ProposalDecisionMade: '(u32,PalletProposalsEngineProposalStatusesProposalDecision)',
+            ProposalExecuted: '(u32,PalletProposalsEngineProposalStatusesExecutionStatus)',
+            Voted: '(u64,u32,PalletProposalsEngineVoteKind,Bytes)',
+            ProposalCancelled: '(u64,u32)',
+            ProposerRemarked: '(u64,u32,Bytes)'
+        }
+    },
+    /**
+     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     **/
+    PalletProposalsEngineProposalStatusesProposalStatus: {
+        _enum: {
+            Active: 'Null',
+            PendingExecution: 'u32',
+            PendingConstitutionality: 'Null'
+        }
+    },
+    /**
+     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     **/
+    PalletProposalsEngineProposalStatusesProposalDecision: {
+        _enum: {
+            Canceled: 'Null',
+            CanceledByRuntime: 'Null',
+            Vetoed: 'Null',
+            Rejected: 'Null',
+            Slashed: 'Null',
+            Expired: 'Null',
+            Approved: 'PalletProposalsEngineProposalStatusesApprovedProposalDecision'
+        }
+    },
+    /**
+     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     **/
+    PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
+        _enum: ['PendingExecution', 'PendingConstitutionality']
+    },
+    /**
+     * Lookup200: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     **/
+    PalletProposalsEngineProposalStatusesExecutionStatus: {
+        _enum: {
+            Executed: 'Null',
+            ExecutionFailed: {
+                error: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup201: pallet_proposals_engine::types::VoteKind
+     **/
+    PalletProposalsEngineVoteKind: {
+        _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
+    },
+    /**
+     * Lookup202: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     **/
+    PalletProposalsDiscussionRawEvent: {
+        _enum: {
+            ThreadCreated: '(u64,u64)',
+            PostCreated: '(u64,u64,u64,Bytes,bool)',
+            PostUpdated: '(u64,u64,u64,Bytes)',
+            ThreadModeChanged: '(u64,PalletProposalsDiscussionThreadModeBTreeSet,u64)',
+            PostDeleted: '(u64,u64,u64,bool)'
+        }
+    },
+    /**
+     * Lookup203: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+     **/
+    PalletProposalsDiscussionThreadModeBTreeSet: {
+        _enum: {
+            Open: 'Null',
+            Closed: 'BTreeSet<u64>'
+        }
+    },
+    /**
+     * Lookup204: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     **/
+    PalletProposalsCodexRawEvent: {
+        _enum: {
+            ProposalCreated: '(u32,PalletProposalsCodexGeneralProposalParams,PalletProposalsCodexProposalDetails,u64)'
+        }
+    },
+    /**
+     * Lookup205: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     **/
+    PalletProposalsCodexGeneralProposalParams: {
+        memberId: 'u64',
+        title: 'Bytes',
+        description: 'Bytes',
+        stakingAccountId: 'Option<AccountId32>',
+        exactExecutionBlock: 'Option<u32>'
+    },
+    /**
+     * Lookup206: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
+     **/
+    PalletProposalsCodexProposalDetails: {
+        _enum: {
+            Signal: 'Bytes',
+            RuntimeUpgrade: 'Bytes',
+            FundingRequest: 'Vec<PalletCommonFundingRequestParameters>',
+            SetMaxValidatorCount: 'u32',
+            CreateWorkingGroupLeadOpening: 'PalletProposalsCodexCreateOpeningParameters',
+            FillWorkingGroupLeadOpening: 'PalletProposalsCodexFillOpeningParameters',
+            UpdateWorkingGroupBudget: '(u128,PalletCommonWorkingGroupIterableEnumsWorkingGroup,PalletCommonBalanceKind)',
+            DecreaseWorkingGroupLeadStake: '(u64,u128,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+            SlashWorkingGroupLead: '(u64,u128,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+            SetWorkingGroupLeadReward: '(u64,Option<u128>,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+            TerminateWorkingGroupLead: 'PalletProposalsCodexTerminateRoleParameters',
+            AmendConstitution: 'Bytes',
+            CancelWorkingGroupLeadOpening: '(u64,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+            SetMembershipPrice: 'u128',
+            SetCouncilBudgetIncrement: 'u128',
+            SetCouncilorReward: 'u128',
+            SetInitialInvitationBalance: 'u128',
+            SetInitialInvitationCount: 'u32',
+            SetMembershipLeadInvitationQuota: 'u32',
+            SetReferralCut: 'u8',
+            VetoProposal: 'u32',
+            UpdateGlobalNftLimit: '(PalletContentNftLimitPeriod,u64)',
+            UpdateChannelPayouts: 'PalletContentUpdateChannelPayoutsParametersRecord',
+            UpdateMaxYearlyPatronageRate: 'Permill'
+        }
+    },
+    /**
+     * Lookup208: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletCommonFundingRequestParameters: {
+        account: 'AccountId32',
+        amount: 'u128'
+    },
+    /**
+     * Lookup209: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     **/
+    PalletProposalsCodexCreateOpeningParameters: {
+        description: 'Bytes',
+        stakePolicy: 'PalletWorkingGroupStakePolicy',
+        rewardPerBlock: 'Option<u128>',
+        group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+    },
+    /**
+     * Lookup210: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     **/
+    PalletWorkingGroupStakePolicy: {
+        stakeAmount: 'u128',
+        leavingUnstakingPeriod: 'u32'
+    },
+    /**
+     * Lookup211: pallet_proposals_codex::types::FillOpeningParameters
+     **/
+    PalletProposalsCodexFillOpeningParameters: {
+        openingId: 'u64',
+        applicationId: 'u64',
+        workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+    },
+    /**
+     * Lookup212: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     **/
+    PalletProposalsCodexTerminateRoleParameters: {
+        workerId: 'u64',
+        slashingAmount: 'Option<u128>',
+        group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+    },
+    /**
+     * Lookup213: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+     **/
+    PalletWorkingGroupRawEventInstance1: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup217: pallet_working_group::types::OpeningType
+     **/
+    PalletWorkingGroupOpeningType: {
+        _enum: ['Leader', 'Regular']
+    },
+    /**
+     * Lookup218: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletWorkingGroupApplyOnOpeningParams: {
+        memberId: 'u64',
+        openingId: 'u64',
+        roleAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        description: 'Bytes',
+        stakeParameters: 'PalletWorkingGroupStakeParameters'
+    },
+    /**
+     * Lookup219: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletWorkingGroupStakeParameters: {
+        stake: 'u128',
+        stakingAccountId: 'AccountId32'
+    },
+    /**
+     * Lookup220: pallet_working_group::Instance1
+     **/
+    PalletWorkingGroupInstance1: 'Null',
+    /**
+     * Lookup221: pallet_working_group::types::RewardPaymentType
+     **/
+    PalletWorkingGroupRewardPaymentType: {
+        _enum: ['MissedReward', 'RegularReward']
+    },
+    /**
+     * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+     **/
+    PalletWorkingGroupRawEventInstance2: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup223: pallet_working_group::Instance2
+     **/
+    PalletWorkingGroupInstance2: 'Null',
+    /**
+     * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+     **/
+    PalletWorkingGroupRawEventInstance3: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup225: pallet_working_group::Instance3
+     **/
+    PalletWorkingGroupInstance3: 'Null',
+    /**
+     * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+     **/
+    PalletWorkingGroupRawEventInstance4: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup227: pallet_working_group::Instance4
+     **/
+    PalletWorkingGroupInstance4: 'Null',
+    /**
+     * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+     **/
+    PalletWorkingGroupRawEventInstance5: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup229: pallet_working_group::Instance5
+     **/
+    PalletWorkingGroupInstance5: 'Null',
+    /**
+     * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+     **/
+    PalletWorkingGroupRawEventInstance6: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup231: pallet_working_group::Instance6
+     **/
+    PalletWorkingGroupInstance6: 'Null',
+    /**
+     * Lookup232: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+     **/
+    PalletWorkingGroupRawEventInstance7: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup233: pallet_working_group::Instance7
+     **/
+    PalletWorkingGroupInstance7: 'Null',
+    /**
+     * Lookup234: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+     **/
+    PalletWorkingGroupRawEventInstance8: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup235: pallet_working_group::Instance8
+     **/
+    PalletWorkingGroupInstance8: 'Null',
+    /**
+     * Lookup236: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+     **/
+    PalletWorkingGroupRawEventInstance9: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup237: pallet_working_group::Instance9
+     **/
+    PalletWorkingGroupInstance9: 'Null',
+    /**
+     * Lookup238: frame_system::Phase
+     **/
+    FrameSystemPhase: {
+        _enum: {
+            ApplyExtrinsic: 'u32',
+            Finalization: 'Null',
+            Initialization: 'Null'
+        }
+    },
+    /**
+     * Lookup242: frame_system::LastRuntimeUpgradeInfo
+     **/
+    FrameSystemLastRuntimeUpgradeInfo: {
+        specVersion: 'Compact<u32>',
+        specName: 'Text'
+    },
+    /**
+     * Lookup245: frame_system::pallet::Call<T>
+     **/
+    FrameSystemCall: {
+        _enum: {
+            fill_block: {
+                ratio: 'Perbill',
+            },
+            remark: {
+                remark: 'Bytes',
+            },
+            set_heap_pages: {
+                pages: 'u64',
+            },
+            set_code: {
+                code: 'Bytes',
+            },
+            set_code_without_checks: {
+                code: 'Bytes',
+            },
+            set_storage: {
+                items: 'Vec<(Bytes,Bytes)>',
+            },
+            kill_storage: {
+                _alias: {
+                    keys_: 'keys',
+                },
+                keys_: 'Vec<Bytes>',
+            },
+            kill_prefix: {
+                prefix: 'Bytes',
+                subkeys: 'u32',
+            },
+            remark_with_event: {
+                remark: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup248: frame_system::limits::BlockWeights
+     **/
+    FrameSystemLimitsBlockWeights: {
+        baseBlock: 'u64',
+        maxBlock: 'u64',
+        perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
+    },
+    /**
+     * Lookup249: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     **/
+    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
+        normal: 'FrameSystemLimitsWeightsPerClass',
+        operational: 'FrameSystemLimitsWeightsPerClass',
+        mandatory: 'FrameSystemLimitsWeightsPerClass'
+    },
+    /**
+     * Lookup250: frame_system::limits::WeightsPerClass
+     **/
+    FrameSystemLimitsWeightsPerClass: {
+        baseExtrinsic: 'u64',
+        maxExtrinsic: 'Option<u64>',
+        maxTotal: 'Option<u64>',
+        reserved: 'Option<u64>'
+    },
+    /**
+     * Lookup251: frame_system::limits::BlockLength
+     **/
+    FrameSystemLimitsBlockLength: {
+        max: 'FrameSupportWeightsPerDispatchClassU32'
+    },
+    /**
+     * Lookup252: frame_support::weights::PerDispatchClass<T>
+     **/
+    FrameSupportWeightsPerDispatchClassU32: {
+        normal: 'u32',
+        operational: 'u32',
+        mandatory: 'u32'
+    },
+    /**
+     * Lookup253: frame_support::weights::RuntimeDbWeight
+     **/
+    FrameSupportWeightsRuntimeDbWeight: {
+        read: 'u64',
+        write: 'u64'
+    },
+    /**
+     * Lookup254: sp_version::RuntimeVersion
+     **/
+    SpVersionRuntimeVersion: {
+        specName: 'Text',
+        implName: 'Text',
+        authoringVersion: 'u32',
+        specVersion: 'u32',
+        implVersion: 'u32',
+        apis: 'Vec<([u8;8],u32)>',
+        transactionVersion: 'u32',
+        stateVersion: 'u8'
+    },
+    /**
+     * Lookup260: frame_system::pallet::Error<T>
+     **/
+    FrameSystemError: {
+        _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
+    },
+    /**
+     * Lookup261: pallet_utility::pallet::Call<T>
+     **/
+    PalletUtilityCall: {
+        _enum: {
+            batch: {
+                calls: 'Vec<Call>',
+            },
+            as_derivative: {
+                index: 'u16',
+                call: 'Call',
+            },
+            batch_all: {
+                calls: 'Vec<Call>',
+            },
+            dispatch_as: {
+                asOrigin: 'JoystreamNodeRuntimeOriginCaller',
+                call: 'Call',
+            },
+            force_batch: {
+                calls: 'Vec<Call>'
+            }
+        }
+    },
+    /**
+     * Lookup264: pallet_babe::pallet::Call<T>
+     **/
+    PalletBabeCall: {
+        _enum: {
+            report_equivocation: {
+                equivocationProof: 'SpConsensusSlotsEquivocationProof',
+                keyOwnerProof: 'SpSessionMembershipProof',
+            },
+            report_equivocation_unsigned: {
+                equivocationProof: 'SpConsensusSlotsEquivocationProof',
+                keyOwnerProof: 'SpSessionMembershipProof',
+            },
+            plan_config_change: {
+                config: 'SpConsensusBabeDigestsNextConfigDescriptor'
+            }
+        }
+    },
+    /**
+     * Lookup265: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     **/
+    SpConsensusSlotsEquivocationProof: {
+        offender: 'SpConsensusBabeAppPublic',
+        slot: 'u64',
+        firstHeader: 'SpRuntimeHeader',
+        secondHeader: 'SpRuntimeHeader'
+    },
+    /**
+     * Lookup266: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     **/
+    SpRuntimeHeader: {
+        parentHash: 'H256',
+        number: 'Compact<u32>',
+        stateRoot: 'H256',
+        extrinsicsRoot: 'H256',
+        digest: 'SpRuntimeDigest'
+    },
+    /**
+     * Lookup267: sp_runtime::traits::BlakeTwo256
+     **/
+    SpRuntimeBlakeTwo256: 'Null',
+    /**
+     * Lookup268: sp_consensus_babe::app::Public
+     **/
+    SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
+    /**
+     * Lookup270: sp_session::MembershipProof
+     **/
+    SpSessionMembershipProof: {
+        session: 'u32',
+        trieNodes: 'Vec<Bytes>',
+        validatorCount: 'u32'
+    },
+    /**
+     * Lookup271: sp_consensus_babe::digests::NextConfigDescriptor
+     **/
+    SpConsensusBabeDigestsNextConfigDescriptor: {
+        _enum: {
+            __Unused0: 'Null',
+            V1: {
+                c: '(u64,u64)',
+                allowedSlots: 'SpConsensusBabeAllowedSlots'
+            }
+        }
+    },
+    /**
+     * Lookup272: sp_consensus_babe::AllowedSlots
+     **/
+    SpConsensusBabeAllowedSlots: {
+        _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
+    },
+    /**
+     * Lookup273: pallet_timestamp::pallet::Call<T>
+     **/
+    PalletTimestampCall: {
+        _enum: {
+            set: {
+                now: 'Compact<u64>'
+            }
+        }
+    },
+    /**
+     * Lookup275: pallet_authorship::pallet::Call<T>
+     **/
+    PalletAuthorshipCall: {
+        _enum: {
+            set_uncles: {
+                newUncles: 'Vec<SpRuntimeHeader>'
+            }
+        }
+    },
+    /**
+     * Lookup277: pallet_balances::pallet::Call<T, I>
+     **/
+    PalletBalancesCall: {
+        _enum: {
+            transfer: {
+                dest: 'AccountId32',
+                value: 'Compact<u128>',
+            },
+            set_balance: {
+                who: 'AccountId32',
+                newFree: 'Compact<u128>',
+                newReserved: 'Compact<u128>',
+            },
+            force_transfer: {
+                source: 'AccountId32',
+                dest: 'AccountId32',
+                value: 'Compact<u128>',
+            },
+            transfer_keep_alive: {
+                dest: 'AccountId32',
+                value: 'Compact<u128>',
+            },
+            transfer_all: {
+                dest: 'AccountId32',
+                keepAlive: 'bool',
+            },
+            force_unreserve: {
+                who: 'AccountId32',
+                amount: 'u128'
+            }
+        }
+    },
+    /**
+     * Lookup278: pallet_election_provider_multi_phase::pallet::Call<T>
+     **/
+    PalletElectionProviderMultiPhaseCall: {
+        _enum: {
+            submit_unsigned: {
+                rawSolution: 'PalletElectionProviderMultiPhaseRawSolution',
+                witness: 'PalletElectionProviderMultiPhaseSolutionOrSnapshotSize',
+            },
+            set_minimum_untrusted_score: {
+                maybeNextScore: 'Option<SpNposElectionsElectionScore>',
+            },
+            set_emergency_election_result: {
+                supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
+            },
+            submit: {
+                rawSolution: 'PalletElectionProviderMultiPhaseRawSolution',
+            },
+            governance_fallback: {
+                maybeMaxVoters: 'Option<u32>',
+                maybeMaxTargets: 'Option<u32>'
+            }
+        }
+    },
+    /**
+     * Lookup279: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     **/
+    PalletElectionProviderMultiPhaseRawSolution: {
+        solution: 'JoystreamNodeRuntimeNposSolution16',
+        score: 'SpNposElectionsElectionScore',
+        round: 'u32'
+    },
+    /**
+     * Lookup280: joystream_node_runtime::NposSolution16
+     **/
+    JoystreamNodeRuntimeNposSolution16: {
+        votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
+        votes2: 'Vec<(Compact<u32>,(Compact<u16>,Compact<PerU16>),Compact<u16>)>',
+        votes3: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);2],Compact<u16>)>',
+        votes4: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);3],Compact<u16>)>',
+        votes5: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);4],Compact<u16>)>',
+        votes6: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);5],Compact<u16>)>',
+        votes7: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);6],Compact<u16>)>',
+        votes8: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);7],Compact<u16>)>',
+        votes9: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);8],Compact<u16>)>',
+        votes10: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);9],Compact<u16>)>',
+        votes11: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);10],Compact<u16>)>',
+        votes12: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);11],Compact<u16>)>',
+        votes13: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);12],Compact<u16>)>',
+        votes14: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);13],Compact<u16>)>',
+        votes15: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);14],Compact<u16>)>',
+        votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
+    },
+    /**
+     * Lookup331: sp_npos_elections::ElectionScore
+     **/
+    SpNposElectionsElectionScore: {
+        minimalStake: 'u128',
+        sumStake: 'u128',
+        sumStakeSquared: 'u128'
+    },
+    /**
+     * Lookup332: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     **/
+    PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
+        voters: 'Compact<u32>',
+        targets: 'Compact<u32>'
+    },
+    /**
+     * Lookup336: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     **/
+    SpNposElectionsSupport: {
+        total: 'u128',
+        voters: 'Vec<(AccountId32,u128)>'
+    },
+    /**
+     * Lookup338: pallet_staking::pallet::pallet::Call<T>
+     **/
+    PalletStakingPalletCall: {
+        _enum: {
+            bond: {
+                controller: 'AccountId32',
+                value: 'Compact<u128>',
+                payee: 'PalletStakingRewardDestination',
+            },
+            bond_extra: {
+                maxAdditional: 'Compact<u128>',
+            },
+            unbond: {
+                value: 'Compact<u128>',
+            },
+            withdraw_unbonded: {
+                numSlashingSpans: 'u32',
+            },
+            validate: {
+                prefs: 'PalletStakingValidatorPrefs',
+            },
+            nominate: {
+                targets: 'Vec<AccountId32>',
+            },
+            chill: 'Null',
+            set_payee: {
+                payee: 'PalletStakingRewardDestination',
+            },
+            set_controller: {
+                controller: 'AccountId32',
+            },
+            set_validator_count: {
+                _alias: {
+                    new_: 'new',
+                },
+                new_: 'Compact<u32>',
+            },
+            increase_validator_count: {
+                additional: 'Compact<u32>',
+            },
+            scale_validator_count: {
+                factor: 'Percent',
+            },
+            force_no_eras: 'Null',
+            force_new_era: 'Null',
+            set_invulnerables: {
+                invulnerables: 'Vec<AccountId32>',
+            },
+            force_unstake: {
+                stash: 'AccountId32',
+                numSlashingSpans: 'u32',
+            },
+            force_new_era_always: 'Null',
+            cancel_deferred_slash: {
+                era: 'u32',
+                slashIndices: 'Vec<u32>',
+            },
+            payout_stakers: {
+                validatorStash: 'AccountId32',
+                era: 'u32',
+            },
+            rebond: {
+                value: 'Compact<u128>',
+            },
+            set_history_depth: {
+                newHistoryDepth: 'Compact<u32>',
+                eraItemsDeleted: 'Compact<u32>',
+            },
+            reap_stash: {
+                stash: 'AccountId32',
+                numSlashingSpans: 'u32',
+            },
+            kick: {
+                who: 'Vec<AccountId32>',
+            },
+            set_staking_configs: {
+                minNominatorBond: 'PalletStakingPalletConfigOpU128',
+                minValidatorBond: 'PalletStakingPalletConfigOpU128',
+                maxNominatorCount: 'PalletStakingPalletConfigOpU32',
+                maxValidatorCount: 'PalletStakingPalletConfigOpU32',
+                chillThreshold: 'PalletStakingPalletConfigOpPercent',
+                minCommission: 'PalletStakingPalletConfigOpPerbill',
+            },
+            chill_other: {
+                controller: 'AccountId32',
+            },
+            force_apply_min_commission: {
+                validatorStash: 'AccountId32'
+            }
+        }
+    },
+    /**
+     * Lookup339: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+     **/
+    PalletStakingRewardDestination: {
+        _enum: {
+            Staked: 'Null',
+            Stash: 'Null',
+            Controller: 'Null',
+            Account: 'AccountId32',
+            None: 'Null'
+        }
+    },
+    /**
+     * Lookup343: pallet_staking::pallet::pallet::ConfigOp<T>
+     **/
+    PalletStakingPalletConfigOpU128: {
+        _enum: {
+            Noop: 'Null',
+            Set: 'u128',
+            Remove: 'Null'
+        }
+    },
+    /**
+     * Lookup344: pallet_staking::pallet::pallet::ConfigOp<T>
+     **/
+    PalletStakingPalletConfigOpU32: {
+        _enum: {
+            Noop: 'Null',
+            Set: 'u32',
+            Remove: 'Null'
+        }
+    },
+    /**
+     * Lookup345: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+     **/
+    PalletStakingPalletConfigOpPercent: {
+        _enum: {
+            Noop: 'Null',
+            Set: 'Percent',
+            Remove: 'Null'
+        }
+    },
+    /**
+     * Lookup346: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+     **/
+    PalletStakingPalletConfigOpPerbill: {
+        _enum: {
+            Noop: 'Null',
+            Set: 'Perbill',
+            Remove: 'Null'
+        }
+    },
+    /**
+     * Lookup347: pallet_session::pallet::Call<T>
+     **/
+    PalletSessionCall: {
+        _enum: {
+            set_keys: {
+                _alias: {
+                    keys_: 'keys',
+                },
+                keys_: 'JoystreamNodeRuntimeSessionKeys',
+                proof: 'Bytes',
+            },
+            purge_keys: 'Null'
+        }
+    },
+    /**
+     * Lookup348: joystream_node_runtime::SessionKeys
+     **/
+    JoystreamNodeRuntimeSessionKeys: {
+        grandpa: 'SpFinalityGrandpaAppPublic',
+        babe: 'SpConsensusBabeAppPublic',
+        imOnline: 'PalletImOnlineSr25519AppSr25519Public',
+        authorityDiscovery: 'SpAuthorityDiscoveryAppPublic'
+    },
+    /**
+     * Lookup349: sp_authority_discovery::app::Public
+     **/
+    SpAuthorityDiscoveryAppPublic: 'SpCoreSr25519Public',
+    /**
+     * Lookup350: pallet_grandpa::pallet::Call<T>
+     **/
+    PalletGrandpaCall: {
+        _enum: {
+            report_equivocation: {
+                equivocationProof: 'SpFinalityGrandpaEquivocationProof',
+                keyOwnerProof: 'SpSessionMembershipProof',
+            },
+            report_equivocation_unsigned: {
+                equivocationProof: 'SpFinalityGrandpaEquivocationProof',
+                keyOwnerProof: 'SpSessionMembershipProof',
+            },
+            note_stalled: {
+                delay: 'u32',
+                bestFinalizedBlockNumber: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup351: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+     **/
+    SpFinalityGrandpaEquivocationProof: {
+        setId: 'u64',
+        equivocation: 'SpFinalityGrandpaEquivocation'
+    },
+    /**
+     * Lookup352: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+     **/
+    SpFinalityGrandpaEquivocation: {
+        _enum: {
+            Prevote: 'FinalityGrandpaEquivocationPrevote',
+            Precommit: 'FinalityGrandpaEquivocationPrecommit'
+        }
+    },
+    /**
+     * Lookup353: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     **/
+    FinalityGrandpaEquivocationPrevote: {
+        roundNumber: 'u64',
+        identity: 'SpFinalityGrandpaAppPublic',
+        first: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)',
+        second: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)'
+    },
+    /**
+     * Lookup354: finality_grandpa::Prevote<primitive_types::H256, N>
+     **/
+    FinalityGrandpaPrevote: {
+        targetHash: 'H256',
+        targetNumber: 'u32'
+    },
+    /**
+     * Lookup355: sp_finality_grandpa::app::Signature
+     **/
+    SpFinalityGrandpaAppSignature: 'SpCoreEd25519Signature',
+    /**
+     * Lookup356: sp_core::ed25519::Signature
+     **/
+    SpCoreEd25519Signature: '[u8;64]',
+    /**
+     * Lookup359: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     **/
+    FinalityGrandpaEquivocationPrecommit: {
+        roundNumber: 'u64',
+        identity: 'SpFinalityGrandpaAppPublic',
+        first: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)',
+        second: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)'
+    },
+    /**
+     * Lookup360: finality_grandpa::Precommit<primitive_types::H256, N>
+     **/
+    FinalityGrandpaPrecommit: {
+        targetHash: 'H256',
+        targetNumber: 'u32'
+    },
+    /**
+     * Lookup362: pallet_im_online::pallet::Call<T>
+     **/
+    PalletImOnlineCall: {
+        _enum: {
+            heartbeat: {
+                heartbeat: 'PalletImOnlineHeartbeat',
+                signature: 'PalletImOnlineSr25519AppSr25519Signature'
+            }
+        }
+    },
+    /**
+     * Lookup363: pallet_im_online::Heartbeat<BlockNumber>
+     **/
+    PalletImOnlineHeartbeat: {
+        blockNumber: 'u32',
+        networkState: 'SpCoreOffchainOpaqueNetworkState',
+        sessionIndex: 'u32',
+        authorityIndex: 'u32',
+        validatorsLen: 'u32'
+    },
+    /**
+     * Lookup364: sp_core::offchain::OpaqueNetworkState
+     **/
+    SpCoreOffchainOpaqueNetworkState: {
+        peerId: 'Bytes',
+        externalAddresses: 'Vec<Bytes>'
+    },
+    /**
+     * Lookup368: pallet_im_online::sr25519::app_sr25519::Signature
+     **/
+    PalletImOnlineSr25519AppSr25519Signature: 'SpCoreSr25519Signature',
+    /**
+     * Lookup369: sp_core::sr25519::Signature
+     **/
+    SpCoreSr25519Signature: '[u8;64]',
+    /**
+     * Lookup370: pallet_bags_list::pallet::Call<T, I>
+     **/
+    PalletBagsListCall: {
+        _enum: {
+            rebag: {
+                dislocated: 'AccountId32',
+            },
+            put_in_front_of: {
+                lighter: 'AccountId32'
+            }
+        }
+    },
+    /**
+     * Lookup371: pallet_vesting::pallet::Call<T>
+     **/
+    PalletVestingCall: {
+        _enum: {
+            vest: 'Null',
+            vest_other: {
+                target: 'AccountId32',
+            },
+            vested_transfer: {
+                target: 'AccountId32',
+                schedule: 'PalletVestingVestingInfo',
+            },
+            force_vested_transfer: {
+                source: 'AccountId32',
+                target: 'AccountId32',
+                schedule: 'PalletVestingVestingInfo',
+            },
+            merge_schedules: {
+                schedule1Index: 'u32',
+                schedule2Index: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup372: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     **/
+    PalletVestingVestingInfo: {
+        locked: 'u128',
+        perBlock: 'u128',
+        startingBlock: 'u32'
+    },
+    /**
+     * Lookup373: pallet_multisig::pallet::Call<T>
+     **/
+    PalletMultisigCall: {
+        _enum: {
+            as_multi_threshold_1: {
+                otherSignatories: 'Vec<AccountId32>',
+                call: 'Call',
+            },
+            as_multi: {
+                threshold: 'u16',
+                otherSignatories: 'Vec<AccountId32>',
+                maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+                call: 'WrapperKeepOpaque<Call>',
+                storeCall: 'bool',
+                maxWeight: 'u64',
+            },
+            approve_as_multi: {
+                threshold: 'u16',
+                otherSignatories: 'Vec<AccountId32>',
+                maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+                callHash: '[u8;32]',
+                maxWeight: 'u64',
+            },
+            cancel_as_multi: {
+                threshold: 'u16',
+                otherSignatories: 'Vec<AccountId32>',
+                timepoint: 'PalletMultisigTimepoint',
+                callHash: '[u8;32]'
+            }
+        }
+    },
+    /**
+     * Lookup376: pallet_council::Call<T>
+     **/
+    PalletCouncilCall: {
+        _enum: {
+            announce_candidacy: {
+                membershipId: 'u64',
+                stakingAccountId: 'AccountId32',
+                rewardAccountId: 'AccountId32',
+                stake: 'u128',
+            },
+            release_candidacy_stake: {
+                membershipId: 'u64',
+            },
+            withdraw_candidacy: {
+                membershipId: 'u64',
+            },
+            set_candidacy_note: {
+                membershipId: 'u64',
+                note: 'Bytes',
+            },
+            set_budget: {
+                balance: 'u128',
+            },
+            plan_budget_refill: {
+                nextRefill: 'u32',
+            },
+            set_budget_increment: {
+                budgetIncrement: 'u128',
+            },
+            set_councilor_reward: {
+                councilorReward: 'u128',
+            },
+            funding_request: {
+                fundingRequests: 'Vec<PalletCommonFundingRequestParameters>',
+            },
+            fund_council_budget: {
+                memberId: 'u64',
+                amount: 'u128',
+                rationale: 'Bytes',
+            },
+            councilor_remark: {
+                councilorId: 'u64',
+                msg: 'Bytes',
+            },
+            candidate_remark: {
+                candidateId: 'u64',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup377: pallet_referendum::Call<T, I>
+     **/
+    PalletReferendumCall: {
+        _enum: {
+            vote: {
+                commitment: 'H256',
+                stake: 'u128',
+            },
+            reveal_vote: {
+                salt: 'Bytes',
+                voteOptionId: 'u64',
+            },
+            release_vote_stake: 'Null',
+            opt_out_of_voting: 'Null'
+        }
+    },
+    /**
+     * Lookup378: pallet_membership::Call<T>
+     **/
+    PalletMembershipCall: {
+        _enum: {
+            buy_membership: {
+                params: 'PalletMembershipBuyMembershipParameters',
+            },
+            update_profile: {
+                memberId: 'u64',
+                handle: 'Option<Bytes>',
+                metadata: 'Option<Bytes>',
+            },
+            update_accounts: {
+                memberId: 'u64',
+                newRootAccount: 'Option<AccountId32>',
+                newControllerAccount: 'Option<AccountId32>',
+            },
+            update_profile_verification: {
+                workerId: 'u64',
+                targetMemberId: 'u64',
+                isVerified: 'bool',
+            },
+            set_referral_cut: {
+                percentValue: 'u8',
+            },
+            transfer_invites: {
+                sourceMemberId: 'u64',
+                targetMemberId: 'u64',
+                numberOfInvites: 'u32',
+            },
+            invite_member: {
+                params: 'PalletMembershipInviteMembershipParameters',
+            },
+            gift_membership: {
+                params: 'PalletMembershipGiftMembershipParameters',
+            },
+            set_membership_price: {
+                newPrice: 'u128',
+            },
+            set_leader_invitation_quota: {
+                invitationQuota: 'u32',
+            },
+            set_initial_invitation_balance: {
+                newInitialBalance: 'u128',
+            },
+            set_initial_invitation_count: {
+                newInvitationCount: 'u32',
+            },
+            add_staking_account_candidate: {
+                memberId: 'u64',
+            },
+            remove_staking_account: {
+                memberId: 'u64',
+            },
+            confirm_staking_account: {
+                memberId: 'u64',
+                stakingAccountId: 'AccountId32',
+            },
+            member_remark: {
+                memberId: 'u64',
+                msg: 'Bytes',
+                payment: 'Option<(AccountId32,u128)>',
+            },
+            create_member: {
+                params: 'PalletMembershipCreateMemberParameters'
+            }
+        }
+    },
+    /**
+     * Lookup379: pallet_forum::Call<T>
+     **/
+    PalletForumCall: {
+        _enum: {
+            update_category_membership_of_moderator: {
+                moderatorId: 'u64',
+                categoryId: 'u64',
+                newValue: 'bool',
+            },
+            create_category: {
+                parentCategoryId: 'Option<u64>',
+                title: 'Bytes',
+                description: 'Bytes',
+            },
+            update_category_archival_status: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                newArchivalStatus: 'bool',
+            },
+            update_category_title: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                title: 'Bytes',
+            },
+            update_category_description: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                description: 'Bytes',
+            },
+            delete_category: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+            },
+            create_thread: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                metadata: 'Bytes',
+                text: 'Bytes',
+            },
+            edit_thread_metadata: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                threadId: 'u64',
+                newMetadata: 'Bytes',
+            },
+            delete_thread: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                threadId: 'u64',
+                hide: 'bool',
+            },
+            move_thread_to_category: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                threadId: 'u64',
+                newCategoryId: 'u64',
+            },
+            moderate_thread: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                threadId: 'u64',
+                rationale: 'Bytes',
+            },
+            add_post: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                threadId: 'u64',
+                text: 'Bytes',
+                editable: 'bool',
+            },
+            edit_post_text: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                threadId: 'u64',
+                postId: 'u64',
+                newText: 'Bytes',
+            },
+            moderate_post: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                threadId: 'u64',
+                postId: 'u64',
+                rationale: 'Bytes',
+            },
+            delete_posts: {
+                forumUserId: 'u64',
+                posts: 'BTreeMap<PalletForumExtendedPostIdObject, bool>',
+                rationale: 'Bytes',
+            },
+            set_stickied_threads: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                stickiedIds: 'BTreeSet<u64>'
+            }
+        }
+    },
+    /**
+     * Lookup380: pallet_constitution::Call<T>
+     **/
+    PalletConstitutionCall: {
+        _enum: {
+            amend_constitution: {
+                constitutionText: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup381: pallet_bounty::Call<T>
+     **/
+    PalletBountyCall: {
+        _enum: {
+            create_bounty: {
+                params: 'PalletBountyBountyParametersBTreeSet',
+                metadata: 'Bytes',
+            },
+            fund_bounty: {
+                funder: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                amount: 'u128',
+            },
+            terminate_bounty: {
+                bountyId: 'u64',
+            },
+            switch_oracle: {
+                newOracle: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+            },
+            withdraw_funding: {
+                funder: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+            },
+            announce_work_entry: {
+                memberId: 'u64',
+                bountyId: 'u64',
+                stakingAccountId: 'AccountId32',
+                workDescription: 'Bytes',
+            },
+            submit_work: {
+                memberId: 'u64',
+                bountyId: 'u64',
+                entryId: 'u64',
+                workData: 'Bytes',
+            },
+            end_working_period: {
+                bountyId: 'u64',
+            },
+            submit_oracle_judgment: {
+                bountyId: 'u64',
+                judgment: 'BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>',
+                rationale: 'Bytes',
+            },
+            withdraw_entrant_stake: {
+                memberId: 'u64',
+                bountyId: 'u64',
+                entryId: 'u64',
+            },
+            withdraw_oracle_reward: {
+                bountyId: 'u64',
+            },
+            contributor_remark: {
+                contributor: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                msg: 'Bytes',
+            },
+            oracle_remark: {
+                oracle: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                msg: 'Bytes',
+            },
+            entrant_remark: {
+                entrantId: 'u64',
+                bountyId: 'u64',
+                entryId: 'u64',
+                msg: 'Bytes',
+            },
+            creator_remark: {
+                creator: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup383: pallet_content::Call<T>
+     **/
+    PalletContentCall: {
+        _enum: {
+            create_curator_group: {
+                isActive: 'bool',
+                permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>',
+            },
+            update_curator_group_permissions: {
+                curatorGroupId: 'u64',
+                permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>',
+            },
+            set_curator_group_status: {
+                curatorGroupId: 'u64',
+                isActive: 'bool',
+            },
+            add_curator_to_group: {
+                curatorGroupId: 'u64',
+                curatorId: 'u64',
+                permissions: 'BTreeSet<PalletContentIterableEnumsChannelActionPermission>',
+            },
+            remove_curator_from_group: {
+                curatorGroupId: 'u64',
+                curatorId: 'u64',
+            },
+            create_channel: {
+                channelOwner: 'PalletContentChannelOwner',
+                params: 'PalletContentChannelCreationParametersRecord',
+            },
+            update_channel: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletContentChannelUpdateParametersRecord',
+            },
+            update_channel_privilege_level: {
+                channelId: 'u64',
+                newPrivilegeLevel: 'u8',
+            },
+            set_channel_paused_features_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                newPausedFeatures: 'BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>',
+                rationale: 'Bytes',
+            },
+            delete_channel: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                channelBagWitness: 'PalletContentChannelBagWitness',
+                numObjectsToDelete: 'u64',
+            },
+            delete_channel_assets_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                assetsToRemove: 'BTreeSet<u64>',
+                storageBucketsNumWitness: 'u32',
+                rationale: 'Bytes',
+            },
+            delete_channel_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                channelBagWitness: 'PalletContentChannelBagWitness',
+                numObjectsToDelete: 'u64',
+                rationale: 'Bytes',
+            },
+            set_channel_visibility_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                isHidden: 'bool',
+                rationale: 'Bytes',
+            },
+            create_video: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletContentVideoCreationParametersRecord',
+            },
+            update_video: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                params: 'PalletContentVideoUpdateParametersRecord',
+            },
+            delete_video: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                numObjectsToDelete: 'u64',
+                storageBucketsNumWitness: 'Option<u32>',
+            },
+            delete_video_assets_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                storageBucketsNumWitness: 'u32',
+                assetsToRemove: 'BTreeSet<u64>',
+                rationale: 'Bytes',
+            },
+            delete_video_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                storageBucketsNumWitness: 'Option<u32>',
+                numObjectsToDelete: 'u64',
+                rationale: 'Bytes',
+            },
+            set_video_visibility_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                isHidden: 'bool',
+                rationale: 'Bytes',
+            },
+            update_channel_payouts: {
+                params: 'PalletContentUpdateChannelPayoutsParametersRecord',
+                uploaderAccount: 'AccountId32',
+            },
+            claim_channel_reward: {
+                actor: 'PalletContentPermissionsContentActor',
+                proof: 'Vec<PalletCommonMerkleTreeProofElementRecord>',
+                item: 'PalletContentPullPaymentElement',
+            },
+            withdraw_from_channel_balance: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                amount: 'u128',
+            },
+            update_channel_state_bloat_bond: {
+                newChannelStateBloatBond: 'u128',
+            },
+            update_video_state_bloat_bond: {
+                newVideoStateBloatBond: 'u128',
+            },
+            claim_and_withdraw_channel_reward: {
+                actor: 'PalletContentPermissionsContentActor',
+                proof: 'Vec<PalletCommonMerkleTreeProofElementRecord>',
+                item: 'PalletContentPullPaymentElement',
+            },
+            issue_nft: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                params: 'PalletContentNftTypesNftIssuanceParametersRecord',
+            },
+            destroy_nft: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            start_open_auction: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                auctionParams: 'PalletContentNftTypesOpenAuctionParamsRecord',
+            },
+            start_english_auction: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                auctionParams: 'PalletContentNftTypesEnglishAuctionParamsRecord',
+            },
+            cancel_english_auction: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            cancel_open_auction: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            cancel_offer: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            cancel_buy_now: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            update_buy_now_price: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                newPrice: 'u128',
+            },
+            make_open_auction_bid: {
+                participantId: 'u64',
+                videoId: 'u64',
+                bidAmount: 'u128',
+            },
+            make_english_auction_bid: {
+                participantId: 'u64',
+                videoId: 'u64',
+                bidAmount: 'u128',
+            },
+            cancel_open_auction_bid: {
+                participantId: 'u64',
+                videoId: 'u64',
+            },
+            settle_english_auction: {
+                videoId: 'u64',
+            },
+            pick_open_auction_winner: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                winnerId: 'u64',
+                commit: 'u128',
+            },
+            offer_nft: {
+                videoId: 'u64',
+                ownerId: 'PalletContentPermissionsContentActor',
+                to: 'u64',
+                price: 'Option<u128>',
+            },
+            sling_nft_back: {
+                videoId: 'u64',
+                ownerId: 'PalletContentPermissionsContentActor',
+            },
+            accept_incoming_offer: {
+                videoId: 'u64',
+                witnessPrice: 'Option<u128>',
+            },
+            sell_nft: {
+                videoId: 'u64',
+                ownerId: 'PalletContentPermissionsContentActor',
+                price: 'u128',
+            },
+            buy_nft: {
+                videoId: 'u64',
+                participantId: 'u64',
+                witnessPrice: 'u128',
+            },
+            toggle_nft_limits: {
+                enabled: 'bool',
+            },
+            channel_owner_remark: {
+                channelId: 'u64',
+                msg: 'Bytes',
+            },
+            creator_token_issuer_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                msg: 'Bytes',
+            },
+            channel_agent_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                msg: 'Bytes',
+            },
+            nft_owner_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                msg: 'Bytes',
+            },
+            initialize_channel_transfer: {
+                channelId: 'u64',
+                actor: 'PalletContentPermissionsContentActor',
+                transferParams: 'PalletContentInitTransferParameters',
+            },
+            cancel_channel_transfer: {
+                channelId: 'u64',
+                actor: 'PalletContentPermissionsContentActor',
+            },
+            accept_channel_transfer: {
+                channelId: 'u64',
+                commitmentParams: 'PalletContentTransferCommitmentParametersBTreeMap',
+            },
+            update_global_nft_limit: {
+                nftLimitPeriod: 'PalletContentNftLimitPeriod',
+                limit: 'u64',
+            },
+            update_channel_nft_limit: {
+                actor: 'PalletContentPermissionsContentActor',
+                nftLimitPeriod: 'PalletContentNftLimitPeriod',
+                channelId: 'u64',
+                limit: 'u64',
+            },
+            issue_creator_token: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenTokenIssuanceParameters',
+            },
+            init_creator_token_sale: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenTokenSaleParams',
+            },
+            update_upcoming_creator_token_sale: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                newStartBlock: 'Option<u32>',
+                newDuration: 'Option<u32>',
+            },
+            creator_token_issuer_transfer: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                outputs: 'Vec<(u64,PalletProjectTokenPaymentWithVesting)>',
+                metadata: 'Bytes',
+            },
+            make_creator_token_permissionless: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            reduce_creator_token_patronage_rate_to: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                targetRate: 'Permill',
+            },
+            claim_creator_token_patronage_credit: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            issue_revenue_split: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                start: 'Option<u32>',
+                duration: 'u32',
+            },
+            finalize_revenue_split: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            finalize_creator_token_sale: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            deissue_creator_token: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            activate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenAmmParams',
+            },
+            deactivate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64'
+            }
+        }
+    },
+    /**
+     * Lookup384: pallet_content::types::ChannelBagWitness
+     **/
+    PalletContentChannelBagWitness: {
+        storageBucketsNum: 'u32',
+        distributionBucketsNum: 'u32'
+    },
+    /**
+     * Lookup386: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+     **/
+    PalletCommonMerkleTreeProofElementRecord: {
+        _alias: {
+            hash_: 'hash'
+        },
+        hash_: 'H256',
+        side: 'PalletCommonMerkleTreeSide'
+    },
+    /**
+     * Lookup387: pallet_common::merkle_tree::Side
+     **/
+    PalletCommonMerkleTreeSide: {
+        _enum: ['Left', 'Right']
+    },
+    /**
+     * Lookup388: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     **/
+    PalletContentPullPaymentElement: {
+        channelId: 'u64',
+        cumulativeRewardEarned: 'u128',
+        reason: 'H256'
+    },
+    /**
+     * Lookup389: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     **/
+    PalletContentInitTransferParameters: {
+        newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        price: 'u128',
+        newOwner: 'PalletContentChannelOwner'
+    },
+    /**
+     * Lookup390: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     **/
+    PalletProjectTokenTokenSaleParams: {
+        unitPrice: 'u128',
+        upperBoundQuantity: 'u128',
+        startsAt: 'Option<u32>',
+        duration: 'u32',
+        vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>',
+        capPerMember: 'Option<u128>',
+        metadata: 'Option<Bytes>'
+    },
+    /**
+     * Lookup394: pallet_project_token::types::AmmParams<Balance>
+     **/
+    PalletProjectTokenAmmParams: {
+        slope: 'u128',
+        intercept: 'u128'
+    },
+    /**
+     * Lookup395: pallet_storage::Call<T>
+     **/
+    PalletStorageCall: {
+        _enum: {
+            delete_storage_bucket: {
+                storageBucketId: 'u64',
+            },
+            update_uploading_blocked_status: {
+                newStatus: 'bool',
+            },
+            update_data_size_fee: {
+                newDataSizeFee: 'u128',
+            },
+            update_storage_buckets_per_bag_limit: {
+                newLimit: 'u32',
+            },
+            update_storage_buckets_voucher_max_limits: {
+                newObjectsSize: 'u64',
+                newObjectsNumber: 'u64',
+            },
+            update_data_object_state_bloat_bond: {
+                stateBloatBond: 'u128',
+            },
+            update_number_of_storage_buckets_in_dynamic_bag_creation_policy: {
+                dynamicBagType: 'PalletStorageDynamicBagType',
+                numberOfStorageBuckets: 'u32',
+            },
+            update_blacklist: {
+                removeHashes: 'BTreeSet<Bytes>',
+                addHashes: 'BTreeSet<Bytes>',
+            },
+            create_storage_bucket: {
+                inviteWorker: 'Option<u64>',
+                acceptingNewBags: 'bool',
+                sizeLimit: 'u64',
+                objectsLimit: 'u64',
+            },
+            update_storage_buckets_for_bag: {
+                bagId: 'PalletStorageBagIdType',
+                addBuckets: 'BTreeSet<u64>',
+                removeBuckets: 'BTreeSet<u64>',
+            },
+            cancel_storage_bucket_operator_invite: {
+                storageBucketId: 'u64',
+            },
+            invite_storage_bucket_operator: {
+                storageBucketId: 'u64',
+                operatorId: 'u64',
+            },
+            remove_storage_bucket_operator: {
+                storageBucketId: 'u64',
+            },
+            update_storage_bucket_status: {
+                storageBucketId: 'u64',
+                acceptingNewBags: 'bool',
+            },
+            set_storage_bucket_voucher_limits: {
+                storageBucketId: 'u64',
+                newObjectsSizeLimit: 'u64',
+                newObjectsNumberLimit: 'u64',
+            },
+            accept_storage_bucket_invitation: {
+                workerId: 'u64',
+                storageBucketId: 'u64',
+                transactorAccountId: 'AccountId32',
+            },
+            set_storage_operator_metadata: {
+                workerId: 'u64',
+                storageBucketId: 'u64',
+                metadata: 'Bytes',
+            },
+            accept_pending_data_objects: {
+                workerId: 'u64',
+                storageBucketId: 'u64',
+                bagId: 'PalletStorageBagIdType',
+                dataObjects: 'BTreeSet<u64>',
+            },
+            create_distribution_bucket_family: 'Null',
+            delete_distribution_bucket_family: {
+                familyId: 'u64',
+            },
+            create_distribution_bucket: {
+                familyId: 'u64',
+                acceptingNewBags: 'bool',
+            },
+            update_distribution_bucket_status: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                acceptingNewBags: 'bool',
+            },
+            delete_distribution_bucket: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+            },
+            update_distribution_buckets_for_bag: {
+                bagId: 'PalletStorageBagIdType',
+                familyId: 'u64',
+                addBucketsIndices: 'BTreeSet<u64>',
+                removeBucketsIndices: 'BTreeSet<u64>',
+            },
+            update_distribution_buckets_per_bag_limit: {
+                newLimit: 'u32',
+            },
+            update_distribution_bucket_mode: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                distributing: 'bool',
+            },
+            update_families_in_dynamic_bag_creation_policy: {
+                dynamicBagType: 'PalletStorageDynamicBagType',
+                families: 'BTreeMap<u64, u32>',
+            },
+            invite_distribution_bucket_operator: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                operatorWorkerId: 'u64',
+            },
+            cancel_distribution_bucket_operator_invite: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                operatorWorkerId: 'u64',
+            },
+            remove_distribution_bucket_operator: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                operatorWorkerId: 'u64',
+            },
+            set_distribution_bucket_family_metadata: {
+                familyId: 'u64',
+                metadata: 'Bytes',
+            },
+            accept_distribution_bucket_invitation: {
+                workerId: 'u64',
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+            },
+            set_distribution_operator_metadata: {
+                workerId: 'u64',
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                metadata: 'Bytes',
+            },
+            storage_operator_remark: {
+                workerId: 'u64',
+                storageBucketId: 'u64',
+                msg: 'Bytes',
+            },
+            distribution_operator_remark: {
+                workerId: 'u64',
+                distributionBucketId: 'PalletStorageDistributionBucketIdRecord',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup396: pallet_project_token::Call<T>
+     **/
+    PalletProjectTokenCall: {
+        _enum: {
+            transfer: {
+                srcMemberId: 'u64',
+                tokenId: 'u64',
+                outputs: 'Vec<(u64,u128)>',
+                metadata: 'Bytes',
+            },
+            burn: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+            },
+            dust_account: {
+                tokenId: 'u64',
+                memberId: 'u64',
+            },
+            join_whitelist: {
+                memberId: 'u64',
+                tokenId: 'u64',
+                proof: 'PalletProjectTokenMerkleProof',
+            },
+            purchase_tokens_on_sale: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+            },
+            participate_in_split: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+            },
+            exit_revenue_split: {
+                tokenId: 'u64',
+                memberId: 'u64',
+            },
+            buy_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            sell_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            update_max_yearly_patronage_rate: {
+                rate: 'Permill'
+            }
+        }
+    },
+    /**
+     * Lookup400: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     **/
+    PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
+    /**
+     * Lookup403: pallet_project_token::types::MerkleSide
+     **/
+    PalletProjectTokenMerkleSide: {
+        _enum: ['Right', 'Left']
+    },
+    /**
+     * Lookup406: pallet_proposals_engine::Call<T>
+     **/
+    PalletProposalsEngineCall: {
+        _enum: {
+            vote: {
+                voterId: 'u64',
+                proposalId: 'u32',
+                vote: 'PalletProposalsEngineVoteKind',
+                rationale: 'Bytes',
+            },
+            cancel_proposal: {
+                proposerId: 'u64',
+                proposalId: 'u32',
+            },
+            veto_proposal: {
+                proposalId: 'u32',
+            },
+            proposer_remark: {
+                proposalId: 'u32',
+                proposerId: 'u64',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup407: pallet_proposals_discussion::Call<T>
+     **/
+    PalletProposalsDiscussionCall: {
+        _enum: {
+            add_post: {
+                postAuthorId: 'u64',
+                threadId: 'u64',
+                text: 'Bytes',
+                editable: 'bool',
+            },
+            delete_post: {
+                deleterId: 'u64',
+                postId: 'u64',
+                threadId: 'u64',
+                hide: 'bool',
+            },
+            update_post: {
+                threadId: 'u64',
+                postId: 'u64',
+                text: 'Bytes',
+            },
+            change_thread_mode: {
+                memberId: 'u64',
+                threadId: 'u64',
+                mode: 'PalletProposalsDiscussionThreadModeBTreeSet'
+            }
+        }
+    },
+    /**
+     * Lookup408: pallet_proposals_codex::Call<T>
+     **/
+    PalletProposalsCodexCall: {
+        _enum: {
+            create_proposal: {
+                generalProposalParameters: 'PalletProposalsCodexGeneralProposalParams',
+                proposalDetails: 'PalletProposalsCodexProposalDetails'
+            }
+        }
+    },
+    /**
+     * Lookup409: pallet_working_group::Call<T, I>
+     **/
+    PalletWorkingGroupCall: {
+        _enum: {
+            add_opening: {
+                description: 'Bytes',
+                openingType: 'PalletWorkingGroupOpeningType',
+                stakePolicy: 'PalletWorkingGroupStakePolicy',
+                rewardPerBlock: 'Option<u128>',
+            },
+            apply_on_opening: {
+                p: 'PalletWorkingGroupApplyOnOpeningParams',
+            },
+            fill_opening: {
+                openingId: 'u64',
+                successfulApplicationIds: 'BTreeSet<u64>',
+            },
+            update_role_account: {
+                workerId: 'u64',
+                newRoleAccountId: 'AccountId32',
+            },
+            leave_role: {
+                workerId: 'u64',
+                rationale: 'Option<Bytes>',
+            },
+            terminate_role: {
+                workerId: 'u64',
+                penalty: 'Option<u128>',
+                rationale: 'Option<Bytes>',
+            },
+            slash_stake: {
+                workerId: 'u64',
+                penalty: 'u128',
+                rationale: 'Option<Bytes>',
+            },
+            decrease_stake: {
+                workerId: 'u64',
+                stakeBalanceDelta: 'u128',
+            },
+            increase_stake: {
+                workerId: 'u64',
+                stakeBalanceDelta: 'u128',
+            },
+            withdraw_application: {
+                applicationId: 'u64',
+            },
+            cancel_opening: {
+                openingId: 'u64',
+            },
+            set_budget: {
+                newBudget: 'u128',
+            },
+            update_reward_account: {
+                workerId: 'u64',
+                newRewardAccountId: 'AccountId32',
+            },
+            update_reward_amount: {
+                workerId: 'u64',
+                rewardPerBlock: 'Option<u128>',
+            },
+            set_status_text: {
+                statusText: 'Option<Bytes>',
+            },
+            spend_from_budget: {
+                accountId: 'AccountId32',
+                amount: 'u128',
+                rationale: 'Option<Bytes>',
+            },
+            fund_working_group_budget: {
+                memberId: 'u64',
+                amount: 'u128',
+                rationale: 'Bytes',
+            },
+            lead_remark: {
+                msg: 'Bytes',
+            },
+            worker_remark: {
+                workerId: 'u64',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup418: joystream_node_runtime::OriginCaller
+     **/
+    JoystreamNodeRuntimeOriginCaller: {
+        _enum: {
+            system: 'FrameSupportDispatchRawOrigin',
+            Void: 'SpCoreVoid'
+        }
+    },
+    /**
+     * Lookup419: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     **/
+    FrameSupportDispatchRawOrigin: {
+        _enum: {
+            Root: 'Null',
+            Signed: 'AccountId32',
+            None: 'Null'
+        }
+    },
+    /**
+     * Lookup420: sp_core::Void
+     **/
+    SpCoreVoid: 'Null',
+    /**
+     * Lookup421: pallet_utility::pallet::Error<T>
+     **/
+    PalletUtilityError: {
+        _enum: ['TooManyCalls']
+    },
+    /**
+     * Lookup428: sp_consensus_babe::digests::PreDigest
+     **/
+    SpConsensusBabeDigestsPreDigest: {
+        _enum: {
+            __Unused0: 'Null',
+            Primary: 'SpConsensusBabeDigestsPrimaryPreDigest',
+            SecondaryPlain: 'SpConsensusBabeDigestsSecondaryPlainPreDigest',
+            SecondaryVRF: 'SpConsensusBabeDigestsSecondaryVRFPreDigest'
+        }
+    },
+    /**
+     * Lookup429: sp_consensus_babe::digests::PrimaryPreDigest
+     **/
+    SpConsensusBabeDigestsPrimaryPreDigest: {
+        authorityIndex: 'u32',
+        slot: 'u64',
+        vrfOutput: '[u8;32]',
+        vrfProof: '[u8;64]'
+    },
+    /**
+     * Lookup430: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     **/
+    SpConsensusBabeDigestsSecondaryPlainPreDigest: {
+        authorityIndex: 'u32',
+        slot: 'u64'
+    },
+    /**
+     * Lookup431: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     **/
+    SpConsensusBabeDigestsSecondaryVRFPreDigest: {
+        authorityIndex: 'u32',
+        slot: 'u64',
+        vrfOutput: '[u8;32]',
+        vrfProof: '[u8;64]'
+    },
+    /**
+     * Lookup433: sp_consensus_babe::BabeEpochConfiguration
+     **/
+    SpConsensusBabeBabeEpochConfiguration: {
+        c: '(u64,u64)',
+        allowedSlots: 'SpConsensusBabeAllowedSlots'
+    },
+    /**
+     * Lookup434: pallet_babe::pallet::Error<T>
+     **/
+    PalletBabeError: {
+        _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
+    },
+    /**
+     * Lookup436: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+     **/
+    PalletAuthorshipUncleEntryItem: {
+        _enum: {
+            InclusionHeight: 'u32',
+            Uncle: '(H256,Option<AccountId32>)'
+        }
+    },
+    /**
+     * Lookup437: pallet_authorship::pallet::Error<T>
+     **/
+    PalletAuthorshipError: {
+        _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
+    },
+    /**
+     * Lookup439: pallet_balances::BalanceLock<Balance>
+     **/
+    PalletBalancesBalanceLock: {
+        id: '[u8;8]',
+        amount: 'u128',
+        reasons: 'PalletBalancesReasons'
+    },
+    /**
+     * Lookup440: pallet_balances::Reasons
+     **/
+    PalletBalancesReasons: {
+        _enum: ['Fee', 'Misc', 'All']
+    },
+    /**
+     * Lookup443: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     **/
+    PalletBalancesReserveData: {
+        id: '[u8;8]',
+        amount: 'u128'
+    },
+    /**
+     * Lookup445: pallet_balances::Releases
+     **/
+    PalletBalancesReleases: {
+        _enum: ['V1_0_0', 'V2_0_0']
+    },
+    /**
+     * Lookup446: pallet_balances::pallet::Error<T, I>
+     **/
+    PalletBalancesError: {
+        _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
+    },
+    /**
+     * Lookup448: pallet_transaction_payment::Releases
+     **/
+    PalletTransactionPaymentReleases: {
+        _enum: ['V1Ancient', 'V2']
+    },
+    /**
+     * Lookup449: pallet_election_provider_multi_phase::Phase<Bn>
+     **/
+    PalletElectionProviderMultiPhasePhase: {
+        _enum: {
+            Off: 'Null',
+            Signed: 'Null',
+            Unsigned: '(bool,u32)',
+            Emergency: 'Null'
+        }
+    },
+    /**
+     * Lookup451: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     **/
+    PalletElectionProviderMultiPhaseReadySolution: {
+        supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
+        score: 'SpNposElectionsElectionScore',
+        compute: 'PalletElectionProviderMultiPhaseElectionCompute'
+    },
+    /**
+     * Lookup452: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     **/
+    PalletElectionProviderMultiPhaseRoundSnapshot: {
+        voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
+        targets: 'Vec<AccountId32>'
+    },
+    /**
+     * Lookup460: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+     **/
+    PalletElectionProviderMultiPhaseSignedSignedSubmission: {
+        who: 'AccountId32',
+        deposit: 'u128',
+        rawSolution: 'PalletElectionProviderMultiPhaseRawSolution',
+        callFee: 'u128'
+    },
+    /**
+     * Lookup461: pallet_election_provider_multi_phase::pallet::Error<T>
+     **/
+    PalletElectionProviderMultiPhaseError: {
+        _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
+    },
+    /**
+     * Lookup462: pallet_staking::StakingLedger<T>
+     **/
+    PalletStakingStakingLedger: {
+        stash: 'AccountId32',
+        total: 'Compact<u128>',
+        active: 'Compact<u128>',
+        unlocking: 'Vec<PalletStakingUnlockChunk>',
+        claimedRewards: 'Vec<u32>'
+    },
+    /**
+     * Lookup464: pallet_staking::UnlockChunk<Balance>
+     **/
+    PalletStakingUnlockChunk: {
+        value: 'Compact<u128>',
+        era: 'Compact<u32>'
+    },
+    /**
+     * Lookup466: pallet_staking::Nominations<T>
+     **/
+    PalletStakingNominations: {
+        targets: 'Vec<AccountId32>',
+        submittedIn: 'u32',
+        suppressed: 'bool'
+    },
+    /**
+     * Lookup467: pallet_staking::ActiveEraInfo
+     **/
+    PalletStakingActiveEraInfo: {
+        index: 'u32',
+        start: 'Option<u64>'
+    },
+    /**
+     * Lookup469: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     **/
+    PalletStakingEraRewardPoints: {
+        total: 'u32',
+        individual: 'BTreeMap<AccountId32, u32>'
+    },
+    /**
+     * Lookup473: pallet_staking::Forcing
+     **/
+    PalletStakingForcing: {
+        _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
+    },
+    /**
+     * Lookup475: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStakingUnappliedSlash: {
+        validator: 'AccountId32',
+        own: 'u128',
+        others: 'Vec<(AccountId32,u128)>',
+        reporters: 'Vec<AccountId32>',
+        payout: 'u128'
+    },
+    /**
+     * Lookup477: pallet_staking::slashing::SlashingSpans
+     **/
+    PalletStakingSlashingSlashingSpans: {
+        spanIndex: 'u32',
+        lastStart: 'u32',
+        lastNonzeroSlash: 'u32',
+        prior: 'Vec<u32>'
+    },
+    /**
+     * Lookup478: pallet_staking::slashing::SpanRecord<Balance>
+     **/
+    PalletStakingSlashingSpanRecord: {
+        slashed: 'u128',
+        paidOut: 'u128'
+    },
+    /**
+     * Lookup481: pallet_staking::Releases
+     **/
+    PalletStakingReleases: {
+        _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
+    },
+    /**
+     * Lookup482: pallet_staking::pallet::pallet::Error<T>
+     **/
+    PalletStakingPalletError: {
+        _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
+    },
+    /**
+     * Lookup486: sp_core::crypto::KeyTypeId
+     **/
+    SpCoreCryptoKeyTypeId: '[u8;4]',
+    /**
+     * Lookup487: pallet_session::pallet::Error<T>
+     **/
+    PalletSessionError: {
+        _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
+    },
+    /**
+     * Lookup489: pallet_grandpa::StoredState<N>
+     **/
+    PalletGrandpaStoredState: {
+        _enum: {
+            Live: 'Null',
+            PendingPause: {
+                scheduledAt: 'u32',
+                delay: 'u32',
+            },
+            Paused: 'Null',
+            PendingResume: {
+                scheduledAt: 'u32',
+                delay: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
+     **/
+    PalletGrandpaStoredPendingChange: {
+        scheduledAt: 'u32',
+        delay: 'u32',
+        nextAuthorities: 'Vec<(SpFinalityGrandpaAppPublic,u64)>',
+        forced: 'Option<u32>'
+    },
+    /**
+     * Lookup492: pallet_grandpa::pallet::Error<T>
+     **/
+    PalletGrandpaError: {
+        _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
+    },
+    /**
+     * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     **/
+    PalletImOnlineBoundedOpaqueNetworkState: {
+        peerId: 'Bytes',
+        externalAddresses: 'Vec<Bytes>'
+    },
+    /**
+     * Lookup502: pallet_im_online::pallet::Error<T>
+     **/
+    PalletImOnlineError: {
+        _enum: ['InvalidKey', 'DuplicatedHeartbeat']
+    },
+    /**
+     * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     **/
+    SpStakingOffenceOffenceDetails: {
+        offender: '(AccountId32,PalletStakingExposure)',
+        reporters: 'Vec<AccountId32>'
+    },
+    /**
+     * Lookup506: pallet_bags_list::list::Node<T, I>
+     **/
+    PalletBagsListListNode: {
+        id: 'AccountId32',
+        prev: 'Option<AccountId32>',
+        next: 'Option<AccountId32>',
+        bagUpper: 'u64',
+        score: 'u64'
+    },
+    /**
+     * Lookup507: pallet_bags_list::list::Bag<T, I>
+     **/
+    PalletBagsListListBag: {
+        head: 'Option<AccountId32>',
+        tail: 'Option<AccountId32>'
+    },
+    /**
+     * Lookup508: pallet_bags_list::pallet::Error<T, I>
+     **/
+    PalletBagsListError: {
+        _enum: {
+            List: 'PalletBagsListListListError'
+        }
+    },
+    /**
+     * Lookup509: pallet_bags_list::list::ListError
+     **/
+    PalletBagsListListListError: {
+        _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
+    },
+    /**
+     * Lookup512: pallet_vesting::Releases
+     **/
+    PalletVestingReleases: {
+        _enum: ['V0', 'V1']
+    },
+    /**
+     * Lookup513: pallet_vesting::pallet::Error<T>
+     **/
+    PalletVestingError: {
+        _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
+    },
+    /**
+     * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletMultisigMultisig: {
+        when: 'PalletMultisigTimepoint',
+        deposit: 'u128',
+        depositor: 'AccountId32',
+        approvals: 'Vec<AccountId32>'
+    },
+    /**
+     * Lookup517: pallet_multisig::pallet::Error<T>
+     **/
+    PalletMultisigError: {
+        _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
+    },
+    /**
+     * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
+     **/
+    PalletCouncilCouncilStageUpdate: {
+        stage: 'PalletCouncilCouncilStage',
+        changedAt: 'u32'
+    },
+    /**
+     * Lookup519: pallet_council::CouncilStage<BlockNumber>
+     **/
+    PalletCouncilCouncilStage: {
+        _enum: {
+            Announcing: 'PalletCouncilCouncilStageAnnouncing',
+            Election: 'PalletCouncilCouncilStageElection',
+            Idle: 'PalletCouncilCouncilStageIdle'
+        }
+    },
+    /**
+     * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
+     **/
+    PalletCouncilCouncilStageAnnouncing: {
+        candidatesCount: 'u32',
+        endsAt: 'u32'
+    },
+    /**
+     * Lookup521: pallet_council::CouncilStageElection
+     **/
+    PalletCouncilCouncilStageElection: {
+        candidatesCount: 'u32'
+    },
+    /**
+     * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
+     **/
+    PalletCouncilCouncilStageIdle: {
+        endsAt: 'u32'
+    },
+    /**
+     * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     **/
+    PalletCouncilCouncilMember: {
+        stakingAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        membershipId: 'u64',
+        stake: 'u128',
+        lastPaymentBlock: 'u32',
+        unpaidReward: 'u128'
+    },
+    /**
+     * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     **/
+    PalletCouncilCandidate: {
+        stakingAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        cycleId: 'u64',
+        stake: 'u128',
+        votePower: 'u128',
+        noteHash: 'Option<H256>'
+    },
+    /**
+     * Lookup527: pallet_council::Error<T>
+     **/
+    PalletCouncilError: {
+        _enum: ['ArithmeticError', 'BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
+    },
+    /**
+     * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     **/
+    PalletReferendumReferendumStage: {
+        _enum: {
+            Inactive: 'Null',
+            Voting: 'PalletReferendumReferendumStageVoting',
+            Revealing: 'PalletReferendumReferendumStageRevealing'
+        }
+    },
+    /**
+     * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     **/
+    PalletReferendumReferendumStageVoting: {
+        started: 'u32',
+        winningTargetCount: 'u32',
+        currentCycleId: 'u64',
+        endsAt: 'u32'
+    },
+    /**
+     * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     **/
+    PalletReferendumReferendumStageRevealing: {
+        started: 'u32',
+        winningTargetCount: 'u32',
+        intermediateWinners: 'Vec<PalletReferendumOptionResult>',
+        currentCycleId: 'u64',
+        endsAt: 'u32'
+    },
+    /**
+     * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     **/
+    PalletReferendumCastVote: {
+        commitment: 'H256',
+        cycleId: 'u64',
+        stake: 'u128',
+        voteFor: 'Option<u64>'
+    },
+    /**
+     * Lookup533: pallet_referendum::Error<T, I>
+     **/
+    PalletReferendumError: {
+        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden', 'AccountAlreadyOptedOutOfVoting']
+    },
+    /**
+     * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+     **/
+    PalletMembershipMembershipObject: {
+        handleHash: 'H256',
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        verified: 'bool',
+        invites: 'u32'
+    },
+    /**
+     * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
+     **/
+    PalletMembershipStakingAccountMemberBinding: {
+        memberId: 'u64',
+        confirmed: 'bool'
+    },
+    /**
+     * Lookup536: pallet_membership::Error<T>
+     **/
+    PalletMembershipError: {
+        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift', 'InsufficientBalanceToCoverPayment']
+    },
+    /**
+     * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletForumCategory: {
+        titleHash: 'H256',
+        descriptionHash: 'H256',
+        archived: 'bool',
+        numDirectSubcategories: 'u32',
+        numDirectThreads: 'u32',
+        numDirectModerators: 'u32',
+        parentCategoryId: 'Option<u64>',
+        stickyThreadIds: 'BTreeSet<u64>'
+    },
+    /**
+     * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletForumThread: {
+        categoryId: 'u64',
+        authorId: 'u64',
+        cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+        numberOfEditablePosts: 'u64'
+    },
+    /**
+     * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletForumPost: {
+        threadId: 'u64',
+        textHash: 'H256',
+        authorId: 'u64',
+        cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+        lastEdited: 'u32'
+    },
+    /**
+     * Lookup541: pallet_forum::Error<T>
+     **/
+    PalletForumError: {
+        _enum: ['ArithmeticError', 'OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero', 'MaxNumberOfStickiedThreadsExceeded']
+    },
+    /**
+     * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+     **/
+    PalletConstitutionConstitutionInfo: {
+        textHash: 'H256'
+    },
+    /**
+     * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletBountyBountyRecord: {
+        creationParams: 'PalletBountyBountyParametersBoundedBTreeSet',
+        totalFunding: 'u128',
+        milestone: 'PalletBountyBountyMilestone',
+        activeWorkEntryCount: 'u32',
+        hasUnpaidOracleReward: 'bool'
+    },
+    /**
+     * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletBountyBountyParametersBoundedBTreeSet: {
+        oracle: 'PalletBountyBountyActor',
+        contractType: 'PalletBountyAssuranceContractTypeBoundedBTreeSet',
+        creator: 'PalletBountyBountyActor',
+        cherry: 'u128',
+        oracleReward: 'u128',
+        entrantStake: 'u128',
+        fundingType: 'PalletBountyFundingType'
+    },
+    /**
+     * Lookup546: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletBountyAssuranceContractTypeBoundedBTreeSet: {
+        _enum: {
+            Open: 'Null',
+            Closed: 'BTreeSet<u64>'
+        }
+    },
+    /**
+     * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
+     **/
+    PalletBountyBountyMilestone: {
+        _enum: {
+            Created: {
+                createdAt: 'u32',
+                hasContributions: 'bool',
+            },
+            BountyMaxFundingReached: 'Null',
+            WorkSubmitted: 'Null',
+            Terminated: 'Null',
+            JudgmentSubmitted: {
+                successfulBounty: 'bool'
+            }
+        }
+    },
+    /**
+     * Lookup549: pallet_bounty::Contribution<T>
+     **/
+    PalletBountyContribution: {
+        amount: 'u128',
+        funderStateBloatBondAmount: 'u128'
+    },
+    /**
+     * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     **/
+    PalletBountyEntryRecord: {
+        memberId: 'u64',
+        stakingAccountId: 'AccountId32',
+        submittedAt: 'u32',
+        workSubmitted: 'bool'
+    },
+    /**
+     * Lookup551: pallet_bounty::Error<T>
+     **/
+    PalletBountyError: {
+        _enum: ['ArithmeticError', 'MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
+    },
+    /**
+     * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletContentVideoRecord: {
+        inChannel: 'u64',
+        nftStatus: 'Option<PalletContentNftTypesOwnedNft>',
+        dataObjects: 'BTreeSet<u64>',
+        videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
+    },
+    /**
+     * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+     **/
+    PalletContentNftTypesOwnedNft: {
+        owner: 'PalletContentNftTypesNftOwner',
+        transactionalStatus: 'PalletContentNftTypesTransactionalStatusRecord',
+        creatorRoyalty: 'Option<Perbill>',
+        openAuctionsNonce: 'u64'
+    },
+    /**
+     * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+     **/
+    PalletContentNftTypesTransactionalStatusRecord: {
+        _enum: {
+            Idle: 'Null',
+            InitiatedOfferToMember: '(u64,Option<u128>)',
+            EnglishAuction: 'PalletContentNftTypesEnglishAuctionRecord',
+            OpenAuction: 'PalletContentNftTypesOpenAuctionRecord',
+            BuyNow: 'u128'
+        }
+    },
+    /**
+     * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletContentNftTypesEnglishAuctionRecord: {
+        startingPrice: 'u128',
+        buyNowPrice: 'Option<u128>',
+        whitelist: 'BTreeSet<u64>',
+        end: 'u32',
+        start: 'u32',
+        extensionPeriod: 'u32',
+        minBidStep: 'u128',
+        topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
+    },
+    /**
+     * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     **/
+    PalletContentNftTypesEnglishAuctionBid: {
+        amount: 'u128',
+        bidderId: 'u64'
+    },
+    /**
+     * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletContentNftTypesOpenAuctionRecord: {
+        startingPrice: 'u128',
+        buyNowPrice: 'Option<u128>',
+        whitelist: 'BTreeSet<u64>',
+        bidLockDuration: 'u32',
+        auctionId: 'u64',
+        start: 'u32'
+    },
+    /**
+     * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
+     **/
+    PalletContentNftTypesNftOwner: {
+        _enum: {
+            ChannelOwner: 'Null',
+            Member: 'u64'
+        }
+    },
+    /**
+     * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+     **/
+    PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
+        curators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        active: 'bool',
+        permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>'
+    },
+    /**
+     * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     **/
+    PalletContentNftTypesOpenAuctionBidRecord: {
+        amount: 'u128',
+        madeAtBlock: 'u32',
+        auctionId: 'u64'
+    },
+    /**
+     * Lookup572: pallet_content::errors::Error<T>
+     **/
+    PalletContentErrorsError: {
+        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales', 'ChannelTransfersBlockedDuringActiveAmm']
+    },
+    /**
+     * Lookup573: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+     **/
+    PalletStorageBagRecord: {
+        storedBy: 'BTreeSet<u64>',
+        distributedBy: 'BTreeSet<PalletStorageDistributionBucketIdRecord>',
+        objectsTotalSize: 'u64',
+        objectsNumber: 'u64'
+    },
+    /**
+     * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     **/
+    PalletStorageStorageBucketRecord: {
+        operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
+        acceptingNewBags: 'bool',
+        voucher: 'PalletStorageVoucher',
+        assignedBags: 'u64'
+    },
+    /**
+     * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     **/
+    PalletStorageStorageBucketOperatorStatus: {
+        _enum: {
+            Missing: 'Null',
+            InvitedStorageWorker: 'u64',
+            StorageWorker: '(u64,AccountId32)'
+        }
+    },
+    /**
+     * Lookup579: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+     **/
+    PalletStorageDynamicBagCreationPolicy: {
+        numberOfStorageBuckets: 'u32',
+        families: 'BTreeMap<u64, u32>'
+    },
+    /**
+     * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletStorageDataObject: {
+        _alias: {
+            size_: 'size'
+        },
+        accepted: 'bool',
+        stateBloatBond: 'PalletCommonBloatBondRepayableBloatBond',
+        size_: 'u64',
+        ipfsContentId: 'Bytes'
+    },
+    /**
+     * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     **/
+    PalletStorageDistributionBucketFamilyRecord: {
+        nextDistributionBucketIndex: 'u64'
+    },
+    /**
+     * Lookup584: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletStorageDistributionBucketRecord: {
+        acceptingNewBags: 'bool',
+        distributing: 'bool',
+        pendingInvitations: 'BTreeSet<u64>',
+        operators: 'BTreeSet<u64>',
+        assignedBags: 'u64'
+    },
+    /**
+     * Lookup587: pallet_storage::Error<T>
+     **/
+    PalletStorageError: {
+        _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'MaxNumberOfOperatorsPerDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
+    },
+    /**
+     * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+     **/
+    PalletProjectTokenAccountData: {
+        vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
+        amount: 'u128',
+        splitStakingStatus: 'Option<PalletProjectTokenStakingStatus>',
+        bloatBond: 'PalletCommonBloatBondRepayableBloatBond',
+        nextVestingTransferId: 'u64',
+        lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
+    },
+    /**
+     * Lookup589: pallet_project_token::types::StakingStatus<Balance>
+     **/
+    PalletProjectTokenStakingStatus: {
+        splitId: 'u32',
+        amount: 'u128'
+    },
+    /**
+     * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     **/
+    PalletProjectTokenVestingSchedule: {
+        linearVestingStartBlock: 'u32',
+        linearVestingDuration: 'u32',
+        cliffAmount: 'u128',
+        postCliffTotalAmount: 'u128',
+        burnedAmount: 'u128'
+    },
+    /**
+     * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     **/
+    PalletProjectTokenTokenData: {
+        totalSupply: 'u128',
+        tokensIssued: 'u128',
+        nextSaleId: 'u32',
+        sale: 'Option<PalletProjectTokenTokenSale>',
+        transferPolicy: 'PalletProjectTokenTransferPolicy',
+        symbol: 'H256',
+        patronageInfo: 'PalletProjectTokenPatronageData',
+        accountsNumber: 'u64',
+        revenueSplitRate: 'Permill',
+        revenueSplit: 'PalletProjectTokenRevenueSplitState',
+        nextRevenueSplitId: 'u32',
+        ammCurve: 'Option<PalletProjectTokenAmmCurve>'
+    },
+    /**
+     * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     **/
+    PalletProjectTokenRevenueSplitState: {
+        _enum: {
+            Inactive: 'Null',
+            Active: 'PalletProjectTokenRevenueSplitInfo'
+        }
+    },
+    /**
+     * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     **/
+    PalletProjectTokenRevenueSplitInfo: {
+        allocation: 'u128',
+        timeline: 'PalletProjectTokenTimeline',
+        dividendsClaimed: 'u128'
+    },
+    /**
+     * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
+     **/
+    PalletProjectTokenTimeline: {
+        start: 'u32',
+        duration: 'u32'
+    },
+    /**
+     * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     **/
+    PalletProjectTokenPatronageData: {
+        rate: 'Permill',
+        unclaimedPatronageTallyAmount: 'u128',
+        lastUnclaimedPatronageTallyBlock: 'u32'
+    },
+    /**
+     * Lookup605: pallet_project_token::errors::Error<T>
+     **/
+    PalletProjectTokenErrorsError: {
+        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'TransferDestinationMemberDoesNotExist', 'MerkleProofVerificationFailure', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TooManyTransferOutputs', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'CannotInitSaleIfAmmIsActive', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount', 'NotInAmmState', 'InvalidCurveParameters', 'DeadlineExpired', 'SlippageToleranceExceeded', 'InsufficientTokenBalance', 'OutstandingAmmProvidedSupplyTooLarge', 'CurveSlopeParametersTooLow', 'TargetPatronageRateIsHigherThanCurrentRate', 'YearlyPatronageRateLimitExceeded']
+    },
+    /**
+     * Lookup606: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletProposalsEngineProposal: {
+        parameters: 'PalletProposalsEngineProposalParameters',
+        proposerId: 'u64',
+        activatedAt: 'u32',
+        status: 'PalletProposalsEngineProposalStatusesProposalStatus',
+        votingResults: 'PalletProposalsEngineVotingResults',
+        exactExecutionBlock: 'Option<u32>',
+        nrOfCouncilConfirmations: 'u32',
+        stakingAccountId: 'Option<AccountId32>'
+    },
+    /**
+     * Lookup607: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     **/
+    PalletProposalsEngineProposalParameters: {
+        votingPeriod: 'u32',
+        gracePeriod: 'u32',
+        approvalQuorumPercentage: 'u32',
+        approvalThresholdPercentage: 'u32',
+        slashingQuorumPercentage: 'u32',
+        slashingThresholdPercentage: 'u32',
+        requiredStake: 'Option<u128>',
+        constitutionality: 'u32'
+    },
+    /**
+     * Lookup608: pallet_proposals_engine::types::VotingResults
+     **/
+    PalletProposalsEngineVotingResults: {
+        abstentions: 'u32',
+        approvals: 'u32',
+        rejections: 'u32',
+        slashes: 'u32'
+    },
+    /**
+     * Lookup611: pallet_proposals_engine::Error<T>
+     **/
+    PalletProposalsEngineError: {
+        _enum: ['ArithmeticError', 'EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember', 'MaxDispatchableCallCodeSizeExceeded']
+    },
+    /**
+     * Lookup612: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletProposalsDiscussionDiscussionThread: {
+        activatedAt: 'u32',
+        authorId: 'u64',
+        mode: 'PalletProposalsDiscussionThreadModeBoundedBTreeSet'
+    },
+    /**
+     * Lookup614: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
+        _enum: {
+            Open: 'Null',
+            Closed: 'BTreeSet<u64>'
+        }
+    },
+    /**
+     * Lookup615: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletProposalsDiscussionDiscussionPost: {
+        authorId: 'u64',
+        cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+        lastEdited: 'u32'
+    },
+    /**
+     * Lookup616: pallet_proposals_discussion::Error<T>
+     **/
+    PalletProposalsDiscussionError: {
+        _enum: ['ArithmeticError', 'ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
+    },
+    /**
+     * Lookup617: pallet_proposals_codex::Error<T>
+     **/
+    PalletProposalsCodexError: {
+        _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError', 'MaxYearlyPatronageRateCannotBeZero']
+    },
+    /**
+     * Lookup618: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+     **/
+    PalletWorkingGroupOpening: {
+        openingType: 'PalletWorkingGroupOpeningType',
+        created: 'u32',
+        descriptionHash: 'H256',
+        stakePolicy: 'PalletWorkingGroupStakePolicy',
+        rewardPerBlock: 'Option<u128>',
+        creationStake: 'u128'
+    },
+    /**
+     * Lookup619: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+     **/
+    PalletWorkingGroupJobApplication: {
+        roleAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        stakingAccountId: 'AccountId32',
+        memberId: 'u64',
+        descriptionHash: 'H256',
+        openingId: 'u64'
+    },
+    /**
+     * Lookup620: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     **/
+    PalletWorkingGroupGroupWorker: {
+        memberId: 'u64',
+        roleAccountId: 'AccountId32',
+        stakingAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        startedLeavingAt: 'Option<u32>',
+        jobUnstakingPeriod: 'u32',
+        rewardPerBlock: 'Option<u128>',
+        missedReward: 'Option<u128>',
+        createdAt: 'u32'
+    },
+    /**
+     * Lookup621: pallet_working_group::errors::Error<T, I>
+     **/
+    PalletWorkingGroupErrorsError: {
+        _enum: ['ArithmeticError', 'StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
+    },
+    /**
+     * Lookup631: sp_runtime::MultiSignature
+     **/
+    SpRuntimeMultiSignature: {
+        _enum: {
+            Ed25519: 'SpCoreEd25519Signature',
+            Sr25519: 'SpCoreSr25519Signature',
+            Ecdsa: 'SpCoreEcdsaSignature'
+        }
+    },
+    /**
+     * Lookup632: sp_core::ecdsa::Signature
+     **/
+    SpCoreEcdsaSignature: '[u8;65]',
+    /**
+     * Lookup635: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     **/
+    FrameSystemExtensionsCheckNonZeroSender: 'Null',
+    /**
+     * Lookup636: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     **/
+    FrameSystemExtensionsCheckSpecVersion: 'Null',
+    /**
+     * Lookup637: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     **/
+    FrameSystemExtensionsCheckTxVersion: 'Null',
+    /**
+     * Lookup638: frame_system::extensions::check_genesis::CheckGenesis<T>
+     **/
+    FrameSystemExtensionsCheckGenesis: 'Null',
+    /**
+     * Lookup641: frame_system::extensions::check_nonce::CheckNonce<T>
+     **/
+    FrameSystemExtensionsCheckNonce: 'Compact<u32>',
+    /**
+     * Lookup642: frame_system::extensions::check_weight::CheckWeight<T>
+     **/
+    FrameSystemExtensionsCheckWeight: 'Null',
+    /**
+     * Lookup643: pallet_transaction_payment::ChargeTransactionPayment<T>
+     **/
+    PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
+    /**
+     * Lookup644: joystream_node_runtime::Runtime
+     **/
+    JoystreamNodeRuntimeRuntime: 'Null'
+};
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/registry.js b/node_modules/@joystream/types/types/lib/cjs/augment/registry.js
new file mode 100644
index 0000000..c56161d
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/registry.js
@@ -0,0 +1,4 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@joystream/types/types/lib/cjs/augment/types-lookup.js b/node_modules/@joystream/types/types/lib/cjs/augment/types-lookup.js
new file mode 100644
index 0000000..217cf27
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/augment/types-lookup.js
@@ -0,0 +1,3 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
diff --git a/node_modules/@joystream/types/types/lib/cjs/index.js b/node_modules/@joystream/types/types/lib/cjs/index.js
new file mode 100644
index 0000000..898ef24
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/index.js
@@ -0,0 +1,41 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.JOYSTREAM_ADDRESS_PREFIX = exports.entriesByIds = exports.keysOf = exports.createType = exports.registry = void 0;
+require("./augment/types-lookup");
+require("./augment/registry");
+require("./augment/augment-api");
+const types_1 = require("@polkadot/types");
+const lookup_1 = __importDefault(require("./augment/lookup"));
+exports.registry = new types_1.TypeRegistry();
+exports.registry.register(lookup_1.default);
+function createType(typeName, value) {
+    return exports.registry.createType(typeName, value);
+}
+exports.createType = createType;
+function keysOf(typeName) {
+    return exports.registry.createType(typeName).defKeys;
+}
+exports.keysOf = keysOf;
+function entriesByIds(apiMethod) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const entries = (yield apiMethod.entries()).map(([storageKey, value]) => [
+            storageKey.args[0],
+            value,
+        ]);
+        return entries.sort((a, b) => a[0].toNumber() - b[0].toNumber());
+    });
+}
+exports.entriesByIds = entriesByIds;
+exports.JOYSTREAM_ADDRESS_PREFIX = 126;
diff --git a/node_modules/@joystream/types/types/lib/cjs/primitives.js b/node_modules/@joystream/types/types/lib/cjs/primitives.js
new file mode 100644
index 0000000..c8ad2e5
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/cjs/primitives.js
@@ -0,0 +1,2 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/@joystream/types/types/lib/index.d.ts b/node_modules/@joystream/types/types/lib/index.d.ts
new file mode 100644
index 0000000..0f34a70
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/index.d.ts
@@ -0,0 +1,65 @@
+import './augment/types-lookup';
+import './augment/registry';
+import './augment/augment-api';
+import { AnyU8a, Codec, DetectCodec, ITuple, Observable } from '@polkadot/types/types';
+import { Text, UInt, Null, bool, Option, Vec, BTreeSet, BTreeMap, Tuple, Enum, Struct, Bytes, TypeRegistry, Raw } from '@polkadot/types';
+import BN from 'bn.js';
+import { AugmentedQuery } from '@polkadot/api/types';
+export declare type EnumVariant<T> = keyof T extends infer K ? K extends keyof T ? T[K] extends Null | null ? K | {
+    [I in K]: T[I];
+} : {
+    [I in K]: T[I];
+} : never : never;
+declare type EnumAccessors<T extends string> = {
+    [K in `as${T}`]?: unknown;
+};
+declare type DecoratedEnum<T extends string> = Omit<Enum, 'type'> & {
+    type: T;
+} & EnumAccessors<T>;
+declare type CodecOrNull<T> = T extends Codec ? T : Null;
+declare type EnumDefs<E extends DecoratedEnum<T>, T extends string> = {
+    [K in T]: CodecOrNull<E[`as${K}`]>;
+};
+declare type StructDefs<S extends Struct> = Omit<S, keyof Struct>;
+declare type KeyOf<T> = T extends DecoratedEnum<infer S> ? keyof EnumDefs<T, S> : T extends Struct ? keyof StructDefs<T> : unknown[];
+declare type AsRecord<K, V> = K extends string ? Record<K & string, V> : K extends number ? Record<K & number, V> : never;
+/**
+ * Recursively create typesafe interface representing valid input for constructing any Codec type
+ * (inlcuding complex types with a lot of nesting)
+ *
+ * Some examples:
+ *
+ * CreateInterface<Option<u128>> = Option<u128> | u128 | number | BN | null | undefined
+ *
+ * CreateInterface<PalletCommonBalanceKind> =
+ *   PalletCommonBalanceKind |
+ *   'Positive' |
+ *   'Negative' |
+ *   { Positive: null } |
+ *   { Negative: null }
+ *
+ * CreateInterface<PalletContentPermissionsContentActor> =
+ *   PalletContentPermissionsContentActor |
+ *   'Lead' |
+ *   { Lead: null } |
+ *   { Curator: ITuple<[u64, u64]> | [u64 | BN | number, u64 | BN | number] }
+ *   { Member: u64 | BN | number }
+ *
+ * CreateInterface<PalletContentLimitPerPeriod> =
+ *   PalletContentLimitPerPeriod |
+ *   { limit: u64 | BN | number, blockNumberPeriod: u32 | BN | number }
+ */
+export declare type CreateInterface<T> = T | (T extends Option<infer S> ? null | undefined | CreateInterface<S> : T extends DecoratedEnum<infer S> ? EnumVariant<{
+    [K in keyof EnumDefs<T, S>]: CreateInterface<EnumDefs<T, S>[K]>;
+}> : T extends Struct ? {
+    [K in keyof StructDefs<T>]: CreateInterface<StructDefs<T>[K]>;
+} : T extends Text ? string : T extends Bytes | Raw ? AnyU8a : T extends UInt ? number | BN : T extends bool ? boolean : T extends Vec<infer S> ? CreateInterface<S>[] : T extends BTreeSet<infer S> ? CreateInterface<S>[] | Set<CreateInterface<S>> : T extends ITuple<infer S> ? S extends Tuple ? unknown[] : {
+    [K in keyof S]: CreateInterface<T[K]>;
+} : T extends BTreeMap<infer K, infer V> ? Map<CreateInterface<K>, CreateInterface<V>> | AsRecord<CreateInterface<K>, CreateInterface<V>> : T extends Null ? null : unknown);
+export declare const registry: TypeRegistry;
+export declare function createType<TN extends string>(typeName: TN, value: CreateInterface<DetectCodec<Codec, TN>>): Codec extends DetectCodec<Codec, TN> ? unknown : DetectCodec<Codec, TN>;
+export declare function keysOf<T extends Struct | Enum, TN extends string>(typeName: TN): KeyOf<T>[];
+export declare function entriesByIds<IDType extends UInt, ValueType extends Codec>(apiMethod: AugmentedQuery<'promise', (key: IDType) => Observable<ValueType>, [IDType]>): Promise<[IDType, AsCodec<ValueType>][]>;
+export declare type AsCodec<T> = T extends Codec ? T : Codec;
+export declare const JOYSTREAM_ADDRESS_PREFIX = 126;
+export {};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-consts.js b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-consts.js
new file mode 100644
index 0000000..ff6fef0
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-consts.js
@@ -0,0 +1,3 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+export {};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-errors.js b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-errors.js
new file mode 100644
index 0000000..ff6fef0
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-errors.js
@@ -0,0 +1,3 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+export {};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-events.js b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-events.js
new file mode 100644
index 0000000..ff6fef0
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-events.js
@@ -0,0 +1,3 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+export {};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-query.js b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-query.js
new file mode 100644
index 0000000..ff6fef0
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-query.js
@@ -0,0 +1,3 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+export {};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-rpc.js b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-rpc.js
new file mode 100644
index 0000000..ff6fef0
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-rpc.js
@@ -0,0 +1,3 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+export {};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-tx.js b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-tx.js
new file mode 100644
index 0000000..ff6fef0
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api-tx.js
@@ -0,0 +1,3 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+export {};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/augment-api.js b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api.js
new file mode 100644
index 0000000..1109edb
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/augment-api.js
@@ -0,0 +1,8 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+import './augment-api-consts';
+import './augment-api-errors';
+import './augment-api-events';
+import './augment-api-query';
+import './augment-api-tx';
+import './augment-api-rpc';
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/augment-types.js b/node_modules/@joystream/types/types/lib/mjs/augment/augment-types.js
new file mode 100644
index 0000000..e27d37b
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/augment-types.js
@@ -0,0 +1,3 @@
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+export {};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/lookup.js b/node_modules/@joystream/types/types/lib/mjs/augment/lookup.js
new file mode 100644
index 0000000..d49dbc8
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/lookup.js
@@ -0,0 +1,4625 @@
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+/* eslint-disable sort-keys */
+export default {
+    /**
+     * Lookup3: frame_system::AccountInfo<Index, pallet_balances::AccountData<Balance>>
+     **/
+    FrameSystemAccountInfo: {
+        nonce: 'u32',
+        consumers: 'u32',
+        providers: 'u32',
+        sufficients: 'u32',
+        data: 'PalletBalancesAccountData'
+    },
+    /**
+     * Lookup5: pallet_balances::AccountData<Balance>
+     **/
+    PalletBalancesAccountData: {
+        free: 'u128',
+        reserved: 'u128',
+        miscFrozen: 'u128',
+        feeFrozen: 'u128'
+    },
+    /**
+     * Lookup7: frame_support::weights::PerDispatchClass<T>
+     **/
+    FrameSupportWeightsPerDispatchClassU64: {
+        normal: 'u64',
+        operational: 'u64',
+        mandatory: 'u64'
+    },
+    /**
+     * Lookup11: sp_runtime::generic::digest::Digest
+     **/
+    SpRuntimeDigest: {
+        logs: 'Vec<SpRuntimeDigestDigestItem>'
+    },
+    /**
+     * Lookup13: sp_runtime::generic::digest::DigestItem
+     **/
+    SpRuntimeDigestDigestItem: {
+        _enum: {
+            Other: 'Bytes',
+            __Unused1: 'Null',
+            __Unused2: 'Null',
+            __Unused3: 'Null',
+            Consensus: '([u8;4],Bytes)',
+            Seal: '([u8;4],Bytes)',
+            PreRuntime: '([u8;4],Bytes)',
+            __Unused7: 'Null',
+            RuntimeEnvironmentUpdated: 'Null'
+        }
+    },
+    /**
+     * Lookup16: frame_system::EventRecord<joystream_node_runtime::Event, primitive_types::H256>
+     **/
+    FrameSystemEventRecord: {
+        phase: 'FrameSystemPhase',
+        event: 'Event',
+        topics: 'Vec<H256>'
+    },
+    /**
+     * Lookup18: frame_system::pallet::Event<T>
+     **/
+    FrameSystemEvent: {
+        _enum: {
+            ExtrinsicSuccess: {
+                dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+            },
+            ExtrinsicFailed: {
+                dispatchError: 'SpRuntimeDispatchError',
+                dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+            },
+            CodeUpdated: 'Null',
+            NewAccount: {
+                account: 'AccountId32',
+            },
+            KilledAccount: {
+                account: 'AccountId32',
+            },
+            Remarked: {
+                _alias: {
+                    hash_: 'hash',
+                },
+                sender: 'AccountId32',
+                hash_: 'H256'
+            }
+        }
+    },
+    /**
+     * Lookup19: frame_support::weights::DispatchInfo
+     **/
+    FrameSupportWeightsDispatchInfo: {
+        weight: 'u64',
+        class: 'FrameSupportWeightsDispatchClass',
+        paysFee: 'FrameSupportWeightsPays'
+    },
+    /**
+     * Lookup20: frame_support::weights::DispatchClass
+     **/
+    FrameSupportWeightsDispatchClass: {
+        _enum: ['Normal', 'Operational', 'Mandatory']
+    },
+    /**
+     * Lookup21: frame_support::weights::Pays
+     **/
+    FrameSupportWeightsPays: {
+        _enum: ['Yes', 'No']
+    },
+    /**
+     * Lookup22: sp_runtime::DispatchError
+     **/
+    SpRuntimeDispatchError: {
+        _enum: {
+            Other: 'Null',
+            CannotLookup: 'Null',
+            BadOrigin: 'Null',
+            Module: 'SpRuntimeModuleError',
+            ConsumerRemaining: 'Null',
+            NoProviders: 'Null',
+            TooManyConsumers: 'Null',
+            Token: 'SpRuntimeTokenError',
+            Arithmetic: 'SpRuntimeArithmeticError',
+            Transactional: 'SpRuntimeTransactionalError'
+        }
+    },
+    /**
+     * Lookup23: sp_runtime::ModuleError
+     **/
+    SpRuntimeModuleError: {
+        index: 'u8',
+        error: '[u8;4]'
+    },
+    /**
+     * Lookup24: sp_runtime::TokenError
+     **/
+    SpRuntimeTokenError: {
+        _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', 'Unsupported']
+    },
+    /**
+     * Lookup25: sp_runtime::ArithmeticError
+     **/
+    SpRuntimeArithmeticError: {
+        _enum: ['Underflow', 'Overflow', 'DivisionByZero']
+    },
+    /**
+     * Lookup26: sp_runtime::TransactionalError
+     **/
+    SpRuntimeTransactionalError: {
+        _enum: ['LimitReached', 'NoLayer']
+    },
+    /**
+     * Lookup27: pallet_utility::pallet::Event
+     **/
+    PalletUtilityEvent: {
+        _enum: {
+            BatchInterrupted: {
+                index: 'u32',
+                error: 'SpRuntimeDispatchError',
+            },
+            BatchCompleted: 'Null',
+            BatchCompletedWithErrors: 'Null',
+            ItemCompleted: 'Null',
+            ItemFailed: {
+                error: 'SpRuntimeDispatchError',
+            },
+            DispatchedAs: {
+                result: 'Result<Null, SpRuntimeDispatchError>'
+            }
+        }
+    },
+    /**
+     * Lookup30: pallet_balances::pallet::Event<T, I>
+     **/
+    PalletBalancesEvent: {
+        _enum: {
+            Endowed: {
+                account: 'AccountId32',
+                freeBalance: 'u128',
+            },
+            DustLost: {
+                account: 'AccountId32',
+                amount: 'u128',
+            },
+            Transfer: {
+                from: 'AccountId32',
+                to: 'AccountId32',
+                amount: 'u128',
+            },
+            BalanceSet: {
+                who: 'AccountId32',
+                free: 'u128',
+                reserved: 'u128',
+            },
+            Reserved: {
+                who: 'AccountId32',
+                amount: 'u128',
+            },
+            Unreserved: {
+                who: 'AccountId32',
+                amount: 'u128',
+            },
+            ReserveRepatriated: {
+                from: 'AccountId32',
+                to: 'AccountId32',
+                amount: 'u128',
+                destinationStatus: 'FrameSupportTokensMiscBalanceStatus',
+            },
+            Deposit: {
+                who: 'AccountId32',
+                amount: 'u128',
+            },
+            Withdraw: {
+                who: 'AccountId32',
+                amount: 'u128',
+            },
+            Slashed: {
+                who: 'AccountId32',
+                amount: 'u128'
+            }
+        }
+    },
+    /**
+     * Lookup31: frame_support::traits::tokens::misc::BalanceStatus
+     **/
+    FrameSupportTokensMiscBalanceStatus: {
+        _enum: ['Free', 'Reserved']
+    },
+    /**
+     * Lookup32: pallet_election_provider_multi_phase::pallet::Event<T>
+     **/
+    PalletElectionProviderMultiPhaseEvent: {
+        _enum: {
+            SolutionStored: {
+                electionCompute: 'PalletElectionProviderMultiPhaseElectionCompute',
+                prevEjected: 'bool',
+            },
+            ElectionFinalized: {
+                electionCompute: 'Option<PalletElectionProviderMultiPhaseElectionCompute>',
+            },
+            Rewarded: {
+                account: 'AccountId32',
+                value: 'u128',
+            },
+            Slashed: {
+                account: 'AccountId32',
+                value: 'u128',
+            },
+            SignedPhaseStarted: {
+                round: 'u32',
+            },
+            UnsignedPhaseStarted: {
+                round: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup33: pallet_election_provider_multi_phase::ElectionCompute
+     **/
+    PalletElectionProviderMultiPhaseElectionCompute: {
+        _enum: ['OnChain', 'Signed', 'Unsigned', 'Fallback', 'Emergency']
+    },
+    /**
+     * Lookup36: pallet_staking::pallet::pallet::Event<T>
+     **/
+    PalletStakingPalletEvent: {
+        _enum: {
+            EraPaid: '(u32,u128,u128)',
+            Rewarded: '(AccountId32,u128)',
+            Slashed: '(AccountId32,u128)',
+            OldSlashingReportDiscarded: 'u32',
+            StakersElected: 'Null',
+            Bonded: '(AccountId32,u128)',
+            Unbonded: '(AccountId32,u128)',
+            Withdrawn: '(AccountId32,u128)',
+            Kicked: '(AccountId32,AccountId32)',
+            StakingElectionFailed: 'Null',
+            Chilled: 'AccountId32',
+            PayoutStarted: '(u32,AccountId32)',
+            ValidatorPrefsSet: '(AccountId32,PalletStakingValidatorPrefs)'
+        }
+    },
+    /**
+     * Lookup37: pallet_staking::ValidatorPrefs
+     **/
+    PalletStakingValidatorPrefs: {
+        commission: 'Compact<Perbill>',
+        blocked: 'bool'
+    },
+    /**
+     * Lookup40: pallet_session::pallet::Event
+     **/
+    PalletSessionEvent: {
+        _enum: {
+            NewSession: {
+                sessionIndex: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup41: pallet_grandpa::pallet::Event
+     **/
+    PalletGrandpaEvent: {
+        _enum: {
+            NewAuthorities: {
+                authoritySet: 'Vec<(SpFinalityGrandpaAppPublic,u64)>',
+            },
+            Paused: 'Null',
+            Resumed: 'Null'
+        }
+    },
+    /**
+     * Lookup44: sp_finality_grandpa::app::Public
+     **/
+    SpFinalityGrandpaAppPublic: 'SpCoreEd25519Public',
+    /**
+     * Lookup45: sp_core::ed25519::Public
+     **/
+    SpCoreEd25519Public: '[u8;32]',
+    /**
+     * Lookup46: pallet_im_online::pallet::Event<T>
+     **/
+    PalletImOnlineEvent: {
+        _enum: {
+            HeartbeatReceived: {
+                authorityId: 'PalletImOnlineSr25519AppSr25519Public',
+            },
+            AllGood: 'Null',
+            SomeOffline: {
+                offline: 'Vec<(AccountId32,PalletStakingExposure)>'
+            }
+        }
+    },
+    /**
+     * Lookup47: pallet_im_online::sr25519::app_sr25519::Public
+     **/
+    PalletImOnlineSr25519AppSr25519Public: 'SpCoreSr25519Public',
+    /**
+     * Lookup48: sp_core::sr25519::Public
+     **/
+    SpCoreSr25519Public: '[u8;32]',
+    /**
+     * Lookup51: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStakingExposure: {
+        total: 'Compact<u128>',
+        own: 'Compact<u128>',
+        others: 'Vec<PalletStakingIndividualExposure>'
+    },
+    /**
+     * Lookup54: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStakingIndividualExposure: {
+        who: 'AccountId32',
+        value: 'Compact<u128>'
+    },
+    /**
+     * Lookup55: pallet_offences::pallet::Event
+     **/
+    PalletOffencesEvent: {
+        _enum: {
+            Offence: {
+                kind: '[u8;16]',
+                timeslot: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup57: pallet_bags_list::pallet::Event<T, I>
+     **/
+    PalletBagsListEvent: {
+        _enum: {
+            Rebagged: {
+                who: 'AccountId32',
+                from: 'u64',
+                to: 'u64',
+            },
+            ScoreUpdated: {
+                who: 'AccountId32',
+                newScore: 'u64'
+            }
+        }
+    },
+    /**
+     * Lookup58: pallet_vesting::pallet::Event<T>
+     **/
+    PalletVestingEvent: {
+        _enum: {
+            VestingUpdated: {
+                account: 'AccountId32',
+                unvested: 'u128',
+            },
+            VestingCompleted: {
+                account: 'AccountId32'
+            }
+        }
+    },
+    /**
+     * Lookup59: pallet_multisig::pallet::Event<T>
+     **/
+    PalletMultisigEvent: {
+        _enum: {
+            NewMultisig: {
+                approving: 'AccountId32',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]',
+            },
+            MultisigApproval: {
+                approving: 'AccountId32',
+                timepoint: 'PalletMultisigTimepoint',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]',
+            },
+            MultisigExecuted: {
+                approving: 'AccountId32',
+                timepoint: 'PalletMultisigTimepoint',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]',
+                result: 'Result<Null, SpRuntimeDispatchError>',
+            },
+            MultisigCancelled: {
+                cancelling: 'AccountId32',
+                timepoint: 'PalletMultisigTimepoint',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]'
+            }
+        }
+    },
+    /**
+     * Lookup60: pallet_multisig::Timepoint<BlockNumber>
+     **/
+    PalletMultisigTimepoint: {
+        height: 'u32',
+        index: 'u32'
+    },
+    /**
+     * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     **/
+    PalletCouncilRawEvent: {
+        _enum: {
+            AnnouncingPeriodStarted: 'u32',
+            NotEnoughCandidates: 'u32',
+            VotingPeriodStarted: 'u32',
+            NewCandidate: '(u64,AccountId32,AccountId32,u128)',
+            NewCouncilElected: '(Vec<u64>,u32)',
+            NewCouncilNotElected: 'u32',
+            CandidacyStakeRelease: 'u64',
+            CandidacyWithdraw: 'u64',
+            CandidacyNoteSet: '(u64,Bytes)',
+            RewardPayment: '(u64,AccountId32,u128,u128)',
+            BudgetBalanceSet: 'u128',
+            BudgetRefill: 'u128',
+            BudgetRefillPlanned: 'u32',
+            BudgetIncrementUpdated: 'u128',
+            CouncilorRewardUpdated: 'u128',
+            RequestFunded: '(AccountId32,u128)',
+            CouncilBudgetFunded: '(u64,u128,Bytes)',
+            CouncilorRemarked: '(u64,Bytes)',
+            CandidateRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup63: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     **/
+    PalletReferendumRawEvent: {
+        _enum: {
+            ReferendumStarted: '(u32,u32)',
+            ReferendumStartedForcefully: '(u32,u32)',
+            RevealingStageStarted: 'u32',
+            ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
+            VoteCast: '(AccountId32,H256,u128)',
+            VoteRevealed: '(AccountId32,u64,Bytes)',
+            StakeReleased: 'AccountId32',
+            AccountOptedOutOfVoting: 'AccountId32'
+        }
+    },
+    /**
+     * Lookup64: pallet_referendum::Instance1
+     **/
+    PalletReferendumInstance1: 'Null',
+    /**
+     * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
+     **/
+    PalletReferendumOptionResult: {
+        optionId: 'u64',
+        votePower: 'u128'
+    },
+    /**
+     * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletMembershipRawEvent: {
+        _enum: {
+            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters,u128)',
+            MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
+            MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
+            MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
+            MemberAccountsUpdated: '(u64,Option<AccountId32>,Option<AccountId32>)',
+            MemberVerificationStatusUpdated: '(u64,bool,u64)',
+            ReferralCutUpdated: 'u8',
+            InvitesTransferred: '(u64,u64,u32)',
+            MembershipPriceUpdated: 'u128',
+            InitialInvitationBalanceUpdated: 'u128',
+            LeaderInvitationQuotaUpdated: 'u32',
+            InitialInvitationCountUpdated: 'u32',
+            StakingAccountAdded: '(AccountId32,u64)',
+            StakingAccountRemoved: '(AccountId32,u64)',
+            StakingAccountConfirmed: '(AccountId32,u64)',
+            MemberRemarked: '(u64,Bytes,Option<(AccountId32,u128)>)',
+            MemberCreated: '(u64,PalletMembershipCreateMemberParameters,u32)'
+        }
+    },
+    /**
+     * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     **/
+    PalletMembershipBuyMembershipParameters: {
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        handle: 'Option<Bytes>',
+        metadata: 'Bytes',
+        referrerId: 'Option<u64>'
+    },
+    /**
+     * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     **/
+    PalletMembershipInviteMembershipParameters: {
+        invitingMemberId: 'u64',
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        handle: 'Option<Bytes>',
+        metadata: 'Bytes'
+    },
+    /**
+     * Lookup72: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+     **/
+    PalletMembershipCreateMemberParameters: {
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        handle: 'Bytes',
+        metadata: 'Bytes',
+        isFoundingMember: 'bool'
+    },
+    /**
+     * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletMembershipGiftMembershipParameters: {
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        handle: 'Option<Bytes>',
+        metadata: 'Bytes',
+        creditControllerAccount: 'u128',
+        applyControllerAccountInvitationLock: 'Option<u128>',
+        creditRootAccount: 'u128',
+        applyRootAccountInvitationLock: 'Option<u128>'
+    },
+    /**
+     * Lookup78: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     **/
+    PalletForumRawEvent: {
+        _enum: {
+            CategoryCreated: '(u64,Option<u64>,Bytes,Bytes)',
+            CategoryArchivalStatusUpdated: '(u64,bool,PalletForumPrivilegedActor)',
+            CategoryTitleUpdated: '(u64,H256,PalletForumPrivilegedActor)',
+            CategoryDescriptionUpdated: '(u64,H256,PalletForumPrivilegedActor)',
+            CategoryDeleted: '(u64,PalletForumPrivilegedActor)',
+            ThreadCreated: '(u64,u64,u64,u64,Bytes,Bytes)',
+            ThreadModerated: '(u64,Bytes,PalletForumPrivilegedActor,u64)',
+            ThreadUpdated: '(u64,bool,PalletForumPrivilegedActor,u64)',
+            ThreadMetadataUpdated: '(u64,u64,u64,Bytes)',
+            ThreadDeleted: '(u64,u64,u64,bool)',
+            ThreadMoved: '(u64,u64,PalletForumPrivilegedActor,u64)',
+            PostAdded: '(u64,u64,u64,u64,Bytes,bool)',
+            PostModerated: '(u64,Bytes,PalletForumPrivilegedActor,u64,u64)',
+            PostDeleted: '(Bytes,u64,BTreeMap<PalletForumExtendedPostIdObject, bool>)',
+            PostTextUpdated: '(u64,u64,u64,u64,Bytes)',
+            CategoryStickyThreadUpdate: '(u64,BTreeSet<u64>,PalletForumPrivilegedActor)',
+            CategoryMembershipOfModeratorUpdated: '(u64,u64,bool)'
+        }
+    },
+    /**
+     * Lookup79: pallet_forum::PrivilegedActor<T>
+     **/
+    PalletForumPrivilegedActor: {
+        _enum: {
+            Lead: 'Null',
+            Moderator: 'u64'
+        }
+    },
+    /**
+     * Lookup80: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     **/
+    PalletForumExtendedPostIdObject: {
+        categoryId: 'u64',
+        threadId: 'u64',
+        postId: 'u64'
+    },
+    /**
+     * Lookup85: pallet_constitution::RawEvent<primitive_types::H256>
+     **/
+    PalletConstitutionRawEvent: {
+        _enum: {
+            ConstutionAmended: '(H256,Bytes)'
+        }
+    },
+    /**
+     * Lookup86: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     **/
+    PalletBountyRawEvent: {
+        _enum: {
+            BountyCreated: '(u64,PalletBountyBountyParametersBTreeSet,Bytes)',
+            BountyOracleSwitched: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+            BountyTerminated: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+            BountyFunded: '(u64,PalletBountyBountyActor,u128)',
+            BountyMaxFundingReached: 'u64',
+            BountyFundingWithdrawal: '(u64,PalletBountyBountyActor)',
+            BountyCreatorCherryWithdrawal: '(u64,PalletBountyBountyActor)',
+            BountyCreatorOracleRewardWithdrawal: '(u64,PalletBountyBountyActor)',
+            BountyOracleRewardWithdrawal: '(u64,PalletBountyBountyActor,u128)',
+            BountyRemoved: 'u64',
+            WorkEntryAnnounced: '(u64,u64,u64,AccountId32,Bytes)',
+            WorkSubmitted: '(u64,u64,u64,Bytes)',
+            OracleJudgmentSubmitted: '(u64,PalletBountyBountyActor,BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>,Bytes)',
+            WorkEntrantFundsWithdrawn: '(u64,u64,u64)',
+            BountyContributorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+            BountyOracleRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+            BountyEntrantRemarked: '(u64,u64,u64,Bytes)',
+            BountyCreatorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+            WorkSubmissionPeriodEnded: '(u64,PalletBountyBountyActor)',
+            WorkEntrantStakeUnlocked: '(u64,u64,AccountId32)',
+            WorkEntrantStakeSlashed: '(u64,u64,AccountId32,u128)',
+            FunderStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)',
+            CreatorStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)'
+        }
+    },
+    /**
+     * Lookup87: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+     **/
+    PalletBountyBountyParametersBTreeSet: {
+        oracle: 'PalletBountyBountyActor',
+        contractType: 'PalletBountyAssuranceContractTypeBTreeSet',
+        creator: 'PalletBountyBountyActor',
+        cherry: 'u128',
+        oracleReward: 'u128',
+        entrantStake: 'u128',
+        fundingType: 'PalletBountyFundingType'
+    },
+    /**
+     * Lookup88: pallet_bounty::BountyActor<MemberId>
+     **/
+    PalletBountyBountyActor: {
+        _enum: {
+            Council: 'Null',
+            Member: 'u64'
+        }
+    },
+    /**
+     * Lookup89: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+     **/
+    PalletBountyAssuranceContractTypeBTreeSet: {
+        _enum: {
+            Open: 'Null',
+            Closed: 'BTreeSet<u64>'
+        }
+    },
+    /**
+     * Lookup90: pallet_bounty::FundingType<BlockNumber, Balance>
+     **/
+    PalletBountyFundingType: {
+        _enum: {
+            Perpetual: {
+                target: 'u128',
+            },
+            Limited: {
+                target: 'u128',
+                fundingPeriod: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup92: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     **/
+    PalletBountyOracleWorkEntryJudgment: {
+        _enum: {
+            Winner: {
+                reward: 'u128',
+            },
+            Rejected: {
+                slashingShare: 'Perbill',
+                actionJustification: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup95: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletUtilityRawEvent: {
+        _enum: {
+            Signaled: 'Bytes',
+            RuntimeUpgraded: 'Bytes',
+            UpdatedWorkingGroupBudget: '(PalletCommonWorkingGroupIterableEnumsWorkingGroup,u128,PalletCommonBalanceKind)',
+            TokensBurned: '(AccountId32,u128)'
+        }
+    },
+    /**
+     * Lookup96: pallet_common::working_group::iterable_enums::WorkingGroup
+     **/
+    PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
+        _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'App', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
+    },
+    /**
+     * Lookup97: pallet_common::BalanceKind
+     **/
+    PalletCommonBalanceKind: {
+        _enum: ['Positive', 'Negative']
+    },
+    /**
+     * Lookup98: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     **/
+    PalletContentRawEvent: {
+        _enum: {
+            CuratorGroupCreated: 'u64',
+            CuratorGroupPermissionsUpdated: '(u64,BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>)',
+            CuratorGroupStatusSet: '(u64,bool)',
+            CuratorAdded: '(u64,u64,BTreeSet<PalletContentIterableEnumsChannelActionPermission>)',
+            CuratorRemoved: '(u64,u64)',
+            ChannelCreated: '(u64,PalletContentChannelRecord,PalletContentChannelCreationParametersRecord,AccountId32)',
+            ChannelUpdated: '(PalletContentPermissionsContentActor,u64,PalletContentChannelUpdateParametersRecord,BTreeSet<u64>)',
+            ChannelPrivilegeLevelUpdated: '(u64,u8)',
+            ChannelStateBloatBondValueUpdated: 'u128',
+            VideoStateBloatBondValueUpdated: 'u128',
+            ChannelAssetsRemoved: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,PalletContentChannelRecord)',
+            ChannelDeleted: '(PalletContentPermissionsContentActor,u64)',
+            ChannelDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
+            ChannelVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
+            ChannelPausedFeaturesUpdatedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>,Bytes)',
+            ChannelAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,Bytes)',
+            ChannelFundsWithdrawn: '(PalletContentPermissionsContentActor,u64,u128,PalletContentChannelFundsDestination)',
+            ChannelRewardClaimedAndWithdrawn: '(PalletContentPermissionsContentActor,u64,u128,PalletContentChannelFundsDestination)',
+            VideoCreated: '(PalletContentPermissionsContentActor,u64,u64,PalletContentVideoCreationParametersRecord,BTreeSet<u64>)',
+            VideoUpdated: '(PalletContentPermissionsContentActor,u64,PalletContentVideoUpdateParametersRecord,BTreeSet<u64>)',
+            VideoDeleted: '(PalletContentPermissionsContentActor,u64)',
+            VideoDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
+            VideoVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
+            VideoAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,bool,Bytes)',
+            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>,AccountId32)',
+            ChannelRewardUpdated: '(u128,u128,u64)',
+            EnglishAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesEnglishAuctionParamsRecord)',
+            OpenAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesOpenAuctionParamsRecord,u64)',
+            NftIssued: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesNftIssuanceParametersRecord)',
+            NftDestroyed: '(PalletContentPermissionsContentActor,u64)',
+            AuctionBidMade: '(u64,u64,u128,Option<u64>)',
+            AuctionBidCanceled: '(u64,u64)',
+            AuctionCanceled: '(PalletContentPermissionsContentActor,u64)',
+            EnglishAuctionSettled: '(u64,AccountId32,u64)',
+            BidMadeCompletingAuction: '(u64,u64,Option<u64>)',
+            OpenAuctionBidAccepted: '(PalletContentPermissionsContentActor,u64,u64,u128)',
+            OfferStarted: '(u64,PalletContentPermissionsContentActor,u64,Option<u128>)',
+            OfferAccepted: 'u64',
+            OfferCanceled: '(u64,PalletContentPermissionsContentActor)',
+            NftSellOrderMade: '(u64,PalletContentPermissionsContentActor,u128)',
+            NftBought: '(u64,u64)',
+            BuyNowCanceled: '(u64,PalletContentPermissionsContentActor)',
+            BuyNowPriceUpdated: '(u64,PalletContentPermissionsContentActor,u128)',
+            NftSlingedBackToTheOriginalArtist: '(u64,PalletContentPermissionsContentActor)',
+            ChannelOwnerRemarked: '(u64,Bytes)',
+            ChannelAgentRemarked: '(PalletContentPermissionsContentActor,u64,Bytes)',
+            NftOwnerRemarked: '(PalletContentPermissionsContentActor,u64,Bytes)',
+            InitializedChannelTransfer: '(u64,PalletContentPermissionsContentActor,PalletContentPendingTransfer)',
+            CancelChannelTransfer: '(u64,PalletContentPermissionsContentActor)',
+            ChannelTransferAccepted: '(u64,PalletContentTransferCommitmentParametersBTreeMap)',
+            GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
+            ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
+            ToggledNftLimits: 'bool',
+            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)',
+            CreatorTokenIssuerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup99: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     **/
+    PalletContentPermissionsContentActor: {
+        _enum: {
+            Curator: '(u64,u64)',
+            Member: 'u64',
+            Lead: 'Null'
+        }
+    },
+    /**
+     * Lookup100: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletContentChannelRecord: {
+        owner: 'PalletContentChannelOwner',
+        numVideos: 'u64',
+        collaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        cumulativeRewardClaimed: 'u128',
+        privilegeLevel: 'u8',
+        pausedFeatures: 'BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>',
+        transferStatus: 'PalletContentChannelTransferStatus',
+        dataObjects: 'BTreeSet<u64>',
+        dailyNftLimit: 'PalletContentLimitPerPeriod',
+        weeklyNftLimit: 'PalletContentLimitPerPeriod',
+        dailyNftCounter: 'PalletContentNftCounter',
+        weeklyNftCounter: 'PalletContentNftCounter',
+        creatorTokenId: 'Option<u64>',
+        channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
+    },
+    /**
+     * Lookup104: pallet_content::types::iterable_enums::ChannelActionPermission
+     **/
+    PalletContentIterableEnumsChannelActionPermission: {
+        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken', 'AmmControl', 'CreatorTokenRemarks']
+    },
+    /**
+     * Lookup111: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+     **/
+    PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
+        _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
+    },
+    /**
+     * Lookup114: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletCommonBloatBondRepayableBloatBond: {
+        repaymentRestrictedTo: 'Option<AccountId32>',
+        amount: 'u128'
+    },
+    /**
+     * Lookup115: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     **/
+    PalletContentChannelOwner: {
+        _enum: {
+            Member: 'u64',
+            CuratorGroup: 'u64'
+        }
+    },
+    /**
+     * Lookup116: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     **/
+    PalletContentChannelTransferStatus: {
+        _enum: {
+            NoActiveTransfer: 'Null',
+            PendingTransfer: 'PalletContentPendingTransfer'
+        }
+    },
+    /**
+     * Lookup117: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     **/
+    PalletContentPendingTransfer: {
+        newOwner: 'PalletContentChannelOwner',
+        transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
+    },
+    /**
+     * Lookup118: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+     **/
+    PalletContentTransferCommitmentParametersBoundedBTreeMap: {
+        newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        price: 'u128',
+        transferId: 'u64'
+    },
+    /**
+     * Lookup119: pallet_content::types::LimitPerPeriod<BlockNumber>
+     **/
+    PalletContentLimitPerPeriod: {
+        limit: 'u64',
+        blockNumberPeriod: 'u32'
+    },
+    /**
+     * Lookup120: pallet_content::types::NftCounter<BlockNumber>
+     **/
+    PalletContentNftCounter: {
+        counter: 'u64',
+        lastUpdated: 'u32'
+    },
+    /**
+     * Lookup121: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     **/
+    PalletContentNftTypesEnglishAuctionParamsRecord: {
+        startingPrice: 'u128',
+        buyNowPrice: 'Option<u128>',
+        whitelist: 'BTreeSet<u64>',
+        startsAt: 'Option<u32>',
+        duration: 'u32',
+        extensionPeriod: 'u32',
+        minBidStep: 'u128'
+    },
+    /**
+     * Lookup123: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     **/
+    PalletContentNftTypesOpenAuctionParamsRecord: {
+        startingPrice: 'u128',
+        buyNowPrice: 'Option<u128>',
+        startsAt: 'Option<u32>',
+        whitelist: 'BTreeSet<u64>',
+        bidLockDuration: 'u32'
+    },
+    /**
+     * Lookup124: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     **/
+    PalletContentNftTypesNftIssuanceParametersRecord: {
+        royalty: 'Option<Perbill>',
+        nftMetadata: 'Bytes',
+        nonChannelOwner: 'Option<u64>',
+        initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
+    },
+    /**
+     * Lookup125: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     **/
+    PalletContentNftTypesInitTransactionalStatusRecord: {
+        _enum: {
+            Idle: 'Null',
+            BuyNow: 'u128',
+            InitiatedOfferToMember: '(u64,Option<u128>)',
+            EnglishAuction: 'PalletContentNftTypesEnglishAuctionParamsRecord',
+            OpenAuction: 'PalletContentNftTypesOpenAuctionParamsRecord'
+        }
+    },
+    /**
+     * Lookup127: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     **/
+    PalletContentChannelCreationParametersRecord: {
+        assets: 'Option<PalletContentStorageAssetsRecord>',
+        meta: 'Option<Bytes>',
+        collaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        storageBuckets: 'BTreeSet<u64>',
+        distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>',
+        expectedChannelStateBloatBond: 'u128',
+        expectedDataObjectStateBloatBond: 'u128'
+    },
+    /**
+     * Lookup128: pallet_content::types::StorageAssetsRecord<Balance>
+     **/
+    PalletContentStorageAssetsRecord: {
+        objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+        expectedDataSizeFee: 'u128'
+    },
+    /**
+     * Lookup130: pallet_storage::DataObjectCreationParameters
+     **/
+    PalletStorageDataObjectCreationParameters: {
+        _alias: {
+            size_: 'size'
+        },
+        size_: 'u64',
+        ipfsContentId: 'Bytes'
+    },
+    /**
+     * Lookup131: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     **/
+    PalletStorageDistributionBucketIdRecord: {
+        distributionBucketFamilyId: 'u64',
+        distributionBucketIndex: 'u64'
+    },
+    /**
+     * Lookup138: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     **/
+    PalletContentChannelUpdateParametersRecord: {
+        assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
+        newMeta: 'Option<Bytes>',
+        assetsToRemove: 'BTreeSet<u64>',
+        collaborators: 'Option<BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>>',
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBucketsNumWitness: 'Option<u32>'
+    },
+    /**
+     * Lookup140: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     **/
+    PalletContentVideoCreationParametersRecord: {
+        assets: 'Option<PalletContentStorageAssetsRecord>',
+        meta: 'Option<Bytes>',
+        autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
+        expectedVideoStateBloatBond: 'u128',
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBucketsNumWitness: 'u32'
+    },
+    /**
+     * Lookup142: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     **/
+    PalletContentVideoUpdateParametersRecord: {
+        assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
+        newMeta: 'Option<Bytes>',
+        assetsToRemove: 'BTreeSet<u64>',
+        autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBucketsNumWitness: 'Option<u32>'
+    },
+    /**
+     * Lookup145: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+     **/
+    PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
+        _enum: {
+            HideVideo: 'Null',
+            HideChannel: 'Null',
+            ChangeChannelFeatureStatus: 'PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature',
+            DeleteVideo: 'Null',
+            DeleteChannel: 'Null',
+            DeleteVideoAssets: 'bool',
+            DeleteNonVideoChannelAssets: 'Null',
+            UpdateChannelNftLimits: 'Null'
+        }
+    },
+    /**
+     * Lookup149: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+     **/
+    PalletContentTransferCommitmentParametersBTreeMap: {
+        newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        price: 'u128',
+        transferId: 'u64'
+    },
+    /**
+     * Lookup150: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
+     **/
+    PalletContentUpdateChannelPayoutsParametersRecord: {
+        commitment: 'Option<H256>',
+        payload: 'Option<PalletContentChannelPayoutsPayloadParametersRecord>',
+        minCashoutAllowed: 'Option<u128>',
+        maxCashoutAllowed: 'Option<u128>',
+        channelCashoutsEnabled: 'Option<bool>'
+    },
+    /**
+     * Lookup151: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
+     **/
+    PalletContentChannelPayoutsPayloadParametersRecord: {
+        objectCreationParams: 'PalletStorageDataObjectCreationParameters',
+        expectedDataSizeFee: 'u128',
+        expectedDataObjectStateBloatBond: 'u128'
+    },
+    /**
+     * Lookup155: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     **/
+    PalletContentChannelFundsDestination: {
+        _enum: {
+            AccountId: 'AccountId32',
+            CouncilBudget: 'Null'
+        }
+    },
+    /**
+     * Lookup156: pallet_content::types::NftLimitPeriod
+     **/
+    PalletContentNftLimitPeriod: {
+        _enum: ['Daily', 'Weekly']
+    },
+    /**
+     * Lookup157: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+     **/
+    PalletStorageRawEvent: {
+        _enum: {
+            StorageBucketCreated: '(u64,Option<u64>,bool,u64,u64)',
+            StorageBucketInvitationAccepted: '(u64,u64,AccountId32)',
+            StorageBucketsUpdatedForBag: '(PalletStorageBagIdType,BTreeSet<u64>,BTreeSet<u64>)',
+            DataObjectsUploaded: '(BTreeSet<u64>,PalletStorageUploadParametersRecord,u128)',
+            StorageOperatorMetadataSet: '(u64,u64,Bytes)',
+            StorageBucketVoucherLimitsSet: '(u64,u64,u64)',
+            PendingDataObjectsAccepted: '(u64,u64,PalletStorageBagIdType,BTreeSet<u64>)',
+            StorageBucketInvitationCancelled: 'u64',
+            StorageBucketOperatorInvited: '(u64,u64)',
+            StorageBucketOperatorRemoved: 'u64',
+            UploadingBlockStatusUpdated: 'bool',
+            DataObjectPerMegabyteFeeUpdated: 'u128',
+            StorageBucketsPerBagLimitUpdated: 'u32',
+            StorageBucketsVoucherMaxLimitsUpdated: '(u64,u64)',
+            DataObjectsMoved: '(PalletStorageBagIdType,PalletStorageBagIdType,BTreeSet<u64>)',
+            DataObjectsDeleted: '(AccountId32,PalletStorageBagIdType,BTreeSet<u64>)',
+            StorageBucketStatusUpdated: '(u64,bool)',
+            UpdateBlacklist: '(BTreeSet<Bytes>,BTreeSet<Bytes>)',
+            DynamicBagDeleted: 'PalletStorageDynamicBagIdType',
+            DynamicBagCreated: '(PalletStorageDynBagCreationParametersRecord,BTreeSet<u64>)',
+            VoucherChanged: '(u64,PalletStorageVoucher)',
+            StorageBucketDeleted: 'u64',
+            NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: '(PalletStorageDynamicBagType,u32)',
+            DistributionBucketFamilyCreated: 'u64',
+            DistributionBucketFamilyDeleted: 'u64',
+            DistributionBucketCreated: '(u64,bool,PalletStorageDistributionBucketIdRecord)',
+            DistributionBucketStatusUpdated: '(PalletStorageDistributionBucketIdRecord,bool)',
+            DistributionBucketDeleted: 'PalletStorageDistributionBucketIdRecord',
+            DistributionBucketsUpdatedForBag: '(PalletStorageBagIdType,u64,BTreeSet<u64>,BTreeSet<u64>)',
+            DistributionBucketsPerBagLimitUpdated: 'u32',
+            DistributionBucketModeUpdated: '(PalletStorageDistributionBucketIdRecord,bool)',
+            FamiliesInDynamicBagCreationPolicyUpdated: '(PalletStorageDynamicBagType,BTreeMap<u64, u32>)',
+            DistributionBucketOperatorInvited: '(PalletStorageDistributionBucketIdRecord,u64)',
+            DistributionBucketInvitationCancelled: '(PalletStorageDistributionBucketIdRecord,u64)',
+            DistributionBucketInvitationAccepted: '(u64,PalletStorageDistributionBucketIdRecord)',
+            DistributionBucketMetadataSet: '(u64,PalletStorageDistributionBucketIdRecord,Bytes)',
+            DistributionBucketOperatorRemoved: '(PalletStorageDistributionBucketIdRecord,u64)',
+            DistributionBucketFamilyMetadataSet: '(u64,Bytes)',
+            DataObjectStateBloatBondValueUpdated: 'u128',
+            DataObjectsUpdated: '(PalletStorageUploadParametersRecord,BTreeSet<u64>,BTreeSet<u64>)',
+            StorageOperatorRemarked: '(u64,u64,Bytes)',
+            DistributionOperatorRemarked: '(u64,PalletStorageDistributionBucketIdRecord,Bytes)'
+        }
+    },
+    /**
+     * Lookup158: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStorageUploadParametersRecord: {
+        bagId: 'PalletStorageBagIdType',
+        objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+        stateBloatBondSourceAccountId: 'AccountId32',
+        expectedDataSizeFee: 'u128',
+        expectedDataObjectStateBloatBond: 'u128'
+    },
+    /**
+     * Lookup159: pallet_storage::BagIdType<MemberId, ChannelId>
+     **/
+    PalletStorageBagIdType: {
+        _enum: {
+            Static: 'PalletStorageStaticBagId',
+            Dynamic: 'PalletStorageDynamicBagIdType'
+        }
+    },
+    /**
+     * Lookup160: pallet_storage::StaticBagId
+     **/
+    PalletStorageStaticBagId: {
+        _enum: {
+            Council: 'Null',
+            WorkingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+        }
+    },
+    /**
+     * Lookup161: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     **/
+    PalletStorageDynamicBagIdType: {
+        _enum: {
+            Member: 'u64',
+            Channel: 'u64'
+        }
+    },
+    /**
+     * Lookup162: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     **/
+    PalletStorageDynBagCreationParametersRecord: {
+        bagId: 'PalletStorageDynamicBagIdType',
+        objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+        stateBloatBondSourceAccountId: 'AccountId32',
+        expectedDataSizeFee: 'u128',
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBuckets: 'BTreeSet<u64>',
+        distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
+    },
+    /**
+     * Lookup165: pallet_storage::Voucher
+     **/
+    PalletStorageVoucher: {
+        sizeLimit: 'u64',
+        objectsLimit: 'u64',
+        sizeUsed: 'u64',
+        objectsUsed: 'u64'
+    },
+    /**
+     * Lookup166: pallet_storage::DynamicBagType
+     **/
+    PalletStorageDynamicBagType: {
+        _enum: ['Member', 'Channel']
+    },
+    /**
+     * Lookup170: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
+     **/
+    PalletProjectTokenEventsRawEvent: {
+        _enum: {
+            TokenAmountTransferred: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+            TokenAmountTransferredByIssuer: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+            PatronageRateDecreasedTo: '(u64,Permill)',
+            PatronageCreditClaimed: '(u64,u128,u64)',
+            RevenueSplitIssued: '(u64,u32,u32,u128)',
+            RevenueSplitFinalized: '(u64,AccountId32,u128)',
+            UserParticipatedInSplit: '(u64,u64,u128,u128,u32)',
+            RevenueSplitLeft: '(u64,u64,u128)',
+            MemberJoinedWhitelist: '(u64,u64,PalletProjectTokenTransferPolicy)',
+            AccountDustedBy: '(u64,u64,AccountId32,PalletProjectTokenTransferPolicy)',
+            TokenDeissued: 'u64',
+            TokenIssued: '(u64,PalletProjectTokenTokenIssuanceParameters)',
+            TokenSaleInitialized: '(u64,u32,PalletProjectTokenTokenSale,Option<Bytes>)',
+            UpcomingTokenSaleUpdated: '(u64,u32,Option<u32>,Option<u32>)',
+            TokensPurchasedOnSale: '(u64,u32,u128,u64)',
+            TokenSaleFinalized: '(u64,u32,u128,u128)',
+            TransferPolicyChangedToPermissionless: 'u64',
+            TokensBurned: '(u64,u64,u128)',
+            AmmActivated: '(u64,u64,PalletProjectTokenAmmCurve)',
+            TokensBoughtOnAmm: '(u64,u64,u128,u128)',
+            TokensSoldOnAmm: '(u64,u64,u128,u128)',
+            AmmDeactivated: '(u64,u64,u128)',
+            MaxYearlyPatronageRateUpdated: 'Permill'
+        }
+    },
+    /**
+     * Lookup171: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     **/
+    PalletProjectTokenTransferPolicy: {
+        _enum: {
+            Permissionless: 'Null',
+            Permissioned: 'H256'
+        }
+    },
+    /**
+     * Lookup172: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     **/
+    PalletProjectTokenTokenIssuanceParameters: {
+        initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
+        symbol: 'H256',
+        transferPolicy: 'PalletProjectTokenTransferPolicyParams',
+        patronageRate: 'Permill',
+        revenueSplitRate: 'Permill'
+    },
+    /**
+     * Lookup173: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     **/
+    PalletProjectTokenTokenAllocation: {
+        amount: 'u128',
+        vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
+    },
+    /**
+     * Lookup174: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     **/
+    PalletProjectTokenVestingScheduleParams: {
+        linearVestingDuration: 'u32',
+        blocksBeforeCliff: 'u32',
+        cliffAmountPercentage: 'Permill'
+    },
+    /**
+     * Lookup177: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     **/
+    PalletProjectTokenTransferPolicyParams: {
+        _enum: {
+            Permissionless: 'Null',
+            Permissioned: 'PalletProjectTokenWhitelistParams'
+        }
+    },
+    /**
+     * Lookup178: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     **/
+    PalletProjectTokenWhitelistParams: {
+        commitment: 'H256',
+        payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
+    },
+    /**
+     * Lookup179: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     **/
+    PalletProjectTokenSingleDataObjectUploadParams: {
+        objectCreationParams: 'PalletStorageDataObjectCreationParameters',
+        expectedDataSizeFee: 'u128',
+        expectedDataObjectStateBloatBond: 'u128'
+    },
+    /**
+     * Lookup185: pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>
+     **/
+    PalletProjectTokenTransfers: 'BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>',
+    /**
+     * Lookup186: pallet_project_token::types::Validated<MemberId>
+     **/
+    PalletProjectTokenValidated: {
+        _enum: {
+            Existing: 'u64',
+            NonExisting: 'u64'
+        }
+    },
+    /**
+     * Lookup187: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     **/
+    PalletProjectTokenValidatedPayment: {
+        payment: 'PalletProjectTokenPaymentWithVesting',
+        vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
+    },
+    /**
+     * Lookup188: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     **/
+    PalletProjectTokenPaymentWithVesting: {
+        amount: 'u128',
+        vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
+    },
+    /**
+     * Lookup190: pallet_project_token::types::VestingSource
+     **/
+    PalletProjectTokenVestingSource: {
+        _enum: {
+            InitialIssuance: 'Null',
+            Sale: 'u32',
+            IssuerTransfer: 'u64'
+        }
+    },
+    /**
+     * Lookup194: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     **/
+    PalletProjectTokenTokenSale: {
+        unitPrice: 'u128',
+        quantityLeft: 'u128',
+        fundsCollected: 'u128',
+        tokensSource: 'u64',
+        earningsDestination: 'Option<AccountId32>',
+        startBlock: 'u32',
+        duration: 'u32',
+        vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>',
+        capPerMember: 'Option<u128>',
+        autoFinalize: 'bool'
+    },
+    /**
+     * Lookup195: pallet_project_token::types::AmmCurve<Balance>
+     **/
+    PalletProjectTokenAmmCurve: {
+        slope: 'u128',
+        intercept: 'u128',
+        providedSupply: 'u128'
+    },
+    /**
+     * Lookup196: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     **/
+    PalletProposalsEngineRawEvent: {
+        _enum: {
+            ProposalStatusUpdated: '(u32,PalletProposalsEngineProposalStatusesProposalStatus)',
+            ProposalDecisionMade: '(u32,PalletProposalsEngineProposalStatusesProposalDecision)',
+            ProposalExecuted: '(u32,PalletProposalsEngineProposalStatusesExecutionStatus)',
+            Voted: '(u64,u32,PalletProposalsEngineVoteKind,Bytes)',
+            ProposalCancelled: '(u64,u32)',
+            ProposerRemarked: '(u64,u32,Bytes)'
+        }
+    },
+    /**
+     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     **/
+    PalletProposalsEngineProposalStatusesProposalStatus: {
+        _enum: {
+            Active: 'Null',
+            PendingExecution: 'u32',
+            PendingConstitutionality: 'Null'
+        }
+    },
+    /**
+     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     **/
+    PalletProposalsEngineProposalStatusesProposalDecision: {
+        _enum: {
+            Canceled: 'Null',
+            CanceledByRuntime: 'Null',
+            Vetoed: 'Null',
+            Rejected: 'Null',
+            Slashed: 'Null',
+            Expired: 'Null',
+            Approved: 'PalletProposalsEngineProposalStatusesApprovedProposalDecision'
+        }
+    },
+    /**
+     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     **/
+    PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
+        _enum: ['PendingExecution', 'PendingConstitutionality']
+    },
+    /**
+     * Lookup200: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     **/
+    PalletProposalsEngineProposalStatusesExecutionStatus: {
+        _enum: {
+            Executed: 'Null',
+            ExecutionFailed: {
+                error: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup201: pallet_proposals_engine::types::VoteKind
+     **/
+    PalletProposalsEngineVoteKind: {
+        _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
+    },
+    /**
+     * Lookup202: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     **/
+    PalletProposalsDiscussionRawEvent: {
+        _enum: {
+            ThreadCreated: '(u64,u64)',
+            PostCreated: '(u64,u64,u64,Bytes,bool)',
+            PostUpdated: '(u64,u64,u64,Bytes)',
+            ThreadModeChanged: '(u64,PalletProposalsDiscussionThreadModeBTreeSet,u64)',
+            PostDeleted: '(u64,u64,u64,bool)'
+        }
+    },
+    /**
+     * Lookup203: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+     **/
+    PalletProposalsDiscussionThreadModeBTreeSet: {
+        _enum: {
+            Open: 'Null',
+            Closed: 'BTreeSet<u64>'
+        }
+    },
+    /**
+     * Lookup204: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     **/
+    PalletProposalsCodexRawEvent: {
+        _enum: {
+            ProposalCreated: '(u32,PalletProposalsCodexGeneralProposalParams,PalletProposalsCodexProposalDetails,u64)'
+        }
+    },
+    /**
+     * Lookup205: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     **/
+    PalletProposalsCodexGeneralProposalParams: {
+        memberId: 'u64',
+        title: 'Bytes',
+        description: 'Bytes',
+        stakingAccountId: 'Option<AccountId32>',
+        exactExecutionBlock: 'Option<u32>'
+    },
+    /**
+     * Lookup206: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
+     **/
+    PalletProposalsCodexProposalDetails: {
+        _enum: {
+            Signal: 'Bytes',
+            RuntimeUpgrade: 'Bytes',
+            FundingRequest: 'Vec<PalletCommonFundingRequestParameters>',
+            SetMaxValidatorCount: 'u32',
+            CreateWorkingGroupLeadOpening: 'PalletProposalsCodexCreateOpeningParameters',
+            FillWorkingGroupLeadOpening: 'PalletProposalsCodexFillOpeningParameters',
+            UpdateWorkingGroupBudget: '(u128,PalletCommonWorkingGroupIterableEnumsWorkingGroup,PalletCommonBalanceKind)',
+            DecreaseWorkingGroupLeadStake: '(u64,u128,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+            SlashWorkingGroupLead: '(u64,u128,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+            SetWorkingGroupLeadReward: '(u64,Option<u128>,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+            TerminateWorkingGroupLead: 'PalletProposalsCodexTerminateRoleParameters',
+            AmendConstitution: 'Bytes',
+            CancelWorkingGroupLeadOpening: '(u64,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+            SetMembershipPrice: 'u128',
+            SetCouncilBudgetIncrement: 'u128',
+            SetCouncilorReward: 'u128',
+            SetInitialInvitationBalance: 'u128',
+            SetInitialInvitationCount: 'u32',
+            SetMembershipLeadInvitationQuota: 'u32',
+            SetReferralCut: 'u8',
+            VetoProposal: 'u32',
+            UpdateGlobalNftLimit: '(PalletContentNftLimitPeriod,u64)',
+            UpdateChannelPayouts: 'PalletContentUpdateChannelPayoutsParametersRecord',
+            UpdateMaxYearlyPatronageRate: 'Permill'
+        }
+    },
+    /**
+     * Lookup208: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletCommonFundingRequestParameters: {
+        account: 'AccountId32',
+        amount: 'u128'
+    },
+    /**
+     * Lookup209: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     **/
+    PalletProposalsCodexCreateOpeningParameters: {
+        description: 'Bytes',
+        stakePolicy: 'PalletWorkingGroupStakePolicy',
+        rewardPerBlock: 'Option<u128>',
+        group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+    },
+    /**
+     * Lookup210: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     **/
+    PalletWorkingGroupStakePolicy: {
+        stakeAmount: 'u128',
+        leavingUnstakingPeriod: 'u32'
+    },
+    /**
+     * Lookup211: pallet_proposals_codex::types::FillOpeningParameters
+     **/
+    PalletProposalsCodexFillOpeningParameters: {
+        openingId: 'u64',
+        applicationId: 'u64',
+        workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+    },
+    /**
+     * Lookup212: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     **/
+    PalletProposalsCodexTerminateRoleParameters: {
+        workerId: 'u64',
+        slashingAmount: 'Option<u128>',
+        group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+    },
+    /**
+     * Lookup213: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+     **/
+    PalletWorkingGroupRawEventInstance1: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup217: pallet_working_group::types::OpeningType
+     **/
+    PalletWorkingGroupOpeningType: {
+        _enum: ['Leader', 'Regular']
+    },
+    /**
+     * Lookup218: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletWorkingGroupApplyOnOpeningParams: {
+        memberId: 'u64',
+        openingId: 'u64',
+        roleAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        description: 'Bytes',
+        stakeParameters: 'PalletWorkingGroupStakeParameters'
+    },
+    /**
+     * Lookup219: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletWorkingGroupStakeParameters: {
+        stake: 'u128',
+        stakingAccountId: 'AccountId32'
+    },
+    /**
+     * Lookup220: pallet_working_group::Instance1
+     **/
+    PalletWorkingGroupInstance1: 'Null',
+    /**
+     * Lookup221: pallet_working_group::types::RewardPaymentType
+     **/
+    PalletWorkingGroupRewardPaymentType: {
+        _enum: ['MissedReward', 'RegularReward']
+    },
+    /**
+     * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+     **/
+    PalletWorkingGroupRawEventInstance2: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup223: pallet_working_group::Instance2
+     **/
+    PalletWorkingGroupInstance2: 'Null',
+    /**
+     * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+     **/
+    PalletWorkingGroupRawEventInstance3: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup225: pallet_working_group::Instance3
+     **/
+    PalletWorkingGroupInstance3: 'Null',
+    /**
+     * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+     **/
+    PalletWorkingGroupRawEventInstance4: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup227: pallet_working_group::Instance4
+     **/
+    PalletWorkingGroupInstance4: 'Null',
+    /**
+     * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+     **/
+    PalletWorkingGroupRawEventInstance5: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup229: pallet_working_group::Instance5
+     **/
+    PalletWorkingGroupInstance5: 'Null',
+    /**
+     * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+     **/
+    PalletWorkingGroupRawEventInstance6: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup231: pallet_working_group::Instance6
+     **/
+    PalletWorkingGroupInstance6: 'Null',
+    /**
+     * Lookup232: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+     **/
+    PalletWorkingGroupRawEventInstance7: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup233: pallet_working_group::Instance7
+     **/
+    PalletWorkingGroupInstance7: 'Null',
+    /**
+     * Lookup234: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+     **/
+    PalletWorkingGroupRawEventInstance8: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup235: pallet_working_group::Instance8
+     **/
+    PalletWorkingGroupInstance8: 'Null',
+    /**
+     * Lookup236: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+     **/
+    PalletWorkingGroupRawEventInstance9: {
+        _enum: {
+            OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+            AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+            OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+            LeaderSet: 'u64',
+            WorkerRoleAccountUpdated: '(u64,AccountId32)',
+            LeaderUnset: 'Null',
+            WorkerExited: 'u64',
+            WorkerStartedLeaving: '(u64,Option<Bytes>)',
+            TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+            TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+            StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+            StakeDecreased: '(u64,u128)',
+            StakeIncreased: '(u64,u128)',
+            ApplicationWithdrawn: 'u64',
+            OpeningCanceled: 'u64',
+            BudgetSet: 'u128',
+            WorkerRewardAccountUpdated: '(u64,AccountId32)',
+            WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+            StatusTextChanged: '(H256,Option<Bytes>)',
+            BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+            RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+            NewMissedRewardLevelReached: '(u64,Option<u128>)',
+            WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+            LeadRemarked: 'Bytes',
+            WorkerRemarked: '(u64,Bytes)'
+        }
+    },
+    /**
+     * Lookup237: pallet_working_group::Instance9
+     **/
+    PalletWorkingGroupInstance9: 'Null',
+    /**
+     * Lookup238: frame_system::Phase
+     **/
+    FrameSystemPhase: {
+        _enum: {
+            ApplyExtrinsic: 'u32',
+            Finalization: 'Null',
+            Initialization: 'Null'
+        }
+    },
+    /**
+     * Lookup242: frame_system::LastRuntimeUpgradeInfo
+     **/
+    FrameSystemLastRuntimeUpgradeInfo: {
+        specVersion: 'Compact<u32>',
+        specName: 'Text'
+    },
+    /**
+     * Lookup245: frame_system::pallet::Call<T>
+     **/
+    FrameSystemCall: {
+        _enum: {
+            fill_block: {
+                ratio: 'Perbill',
+            },
+            remark: {
+                remark: 'Bytes',
+            },
+            set_heap_pages: {
+                pages: 'u64',
+            },
+            set_code: {
+                code: 'Bytes',
+            },
+            set_code_without_checks: {
+                code: 'Bytes',
+            },
+            set_storage: {
+                items: 'Vec<(Bytes,Bytes)>',
+            },
+            kill_storage: {
+                _alias: {
+                    keys_: 'keys',
+                },
+                keys_: 'Vec<Bytes>',
+            },
+            kill_prefix: {
+                prefix: 'Bytes',
+                subkeys: 'u32',
+            },
+            remark_with_event: {
+                remark: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup248: frame_system::limits::BlockWeights
+     **/
+    FrameSystemLimitsBlockWeights: {
+        baseBlock: 'u64',
+        maxBlock: 'u64',
+        perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
+    },
+    /**
+     * Lookup249: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     **/
+    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
+        normal: 'FrameSystemLimitsWeightsPerClass',
+        operational: 'FrameSystemLimitsWeightsPerClass',
+        mandatory: 'FrameSystemLimitsWeightsPerClass'
+    },
+    /**
+     * Lookup250: frame_system::limits::WeightsPerClass
+     **/
+    FrameSystemLimitsWeightsPerClass: {
+        baseExtrinsic: 'u64',
+        maxExtrinsic: 'Option<u64>',
+        maxTotal: 'Option<u64>',
+        reserved: 'Option<u64>'
+    },
+    /**
+     * Lookup251: frame_system::limits::BlockLength
+     **/
+    FrameSystemLimitsBlockLength: {
+        max: 'FrameSupportWeightsPerDispatchClassU32'
+    },
+    /**
+     * Lookup252: frame_support::weights::PerDispatchClass<T>
+     **/
+    FrameSupportWeightsPerDispatchClassU32: {
+        normal: 'u32',
+        operational: 'u32',
+        mandatory: 'u32'
+    },
+    /**
+     * Lookup253: frame_support::weights::RuntimeDbWeight
+     **/
+    FrameSupportWeightsRuntimeDbWeight: {
+        read: 'u64',
+        write: 'u64'
+    },
+    /**
+     * Lookup254: sp_version::RuntimeVersion
+     **/
+    SpVersionRuntimeVersion: {
+        specName: 'Text',
+        implName: 'Text',
+        authoringVersion: 'u32',
+        specVersion: 'u32',
+        implVersion: 'u32',
+        apis: 'Vec<([u8;8],u32)>',
+        transactionVersion: 'u32',
+        stateVersion: 'u8'
+    },
+    /**
+     * Lookup260: frame_system::pallet::Error<T>
+     **/
+    FrameSystemError: {
+        _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
+    },
+    /**
+     * Lookup261: pallet_utility::pallet::Call<T>
+     **/
+    PalletUtilityCall: {
+        _enum: {
+            batch: {
+                calls: 'Vec<Call>',
+            },
+            as_derivative: {
+                index: 'u16',
+                call: 'Call',
+            },
+            batch_all: {
+                calls: 'Vec<Call>',
+            },
+            dispatch_as: {
+                asOrigin: 'JoystreamNodeRuntimeOriginCaller',
+                call: 'Call',
+            },
+            force_batch: {
+                calls: 'Vec<Call>'
+            }
+        }
+    },
+    /**
+     * Lookup264: pallet_babe::pallet::Call<T>
+     **/
+    PalletBabeCall: {
+        _enum: {
+            report_equivocation: {
+                equivocationProof: 'SpConsensusSlotsEquivocationProof',
+                keyOwnerProof: 'SpSessionMembershipProof',
+            },
+            report_equivocation_unsigned: {
+                equivocationProof: 'SpConsensusSlotsEquivocationProof',
+                keyOwnerProof: 'SpSessionMembershipProof',
+            },
+            plan_config_change: {
+                config: 'SpConsensusBabeDigestsNextConfigDescriptor'
+            }
+        }
+    },
+    /**
+     * Lookup265: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     **/
+    SpConsensusSlotsEquivocationProof: {
+        offender: 'SpConsensusBabeAppPublic',
+        slot: 'u64',
+        firstHeader: 'SpRuntimeHeader',
+        secondHeader: 'SpRuntimeHeader'
+    },
+    /**
+     * Lookup266: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     **/
+    SpRuntimeHeader: {
+        parentHash: 'H256',
+        number: 'Compact<u32>',
+        stateRoot: 'H256',
+        extrinsicsRoot: 'H256',
+        digest: 'SpRuntimeDigest'
+    },
+    /**
+     * Lookup267: sp_runtime::traits::BlakeTwo256
+     **/
+    SpRuntimeBlakeTwo256: 'Null',
+    /**
+     * Lookup268: sp_consensus_babe::app::Public
+     **/
+    SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
+    /**
+     * Lookup270: sp_session::MembershipProof
+     **/
+    SpSessionMembershipProof: {
+        session: 'u32',
+        trieNodes: 'Vec<Bytes>',
+        validatorCount: 'u32'
+    },
+    /**
+     * Lookup271: sp_consensus_babe::digests::NextConfigDescriptor
+     **/
+    SpConsensusBabeDigestsNextConfigDescriptor: {
+        _enum: {
+            __Unused0: 'Null',
+            V1: {
+                c: '(u64,u64)',
+                allowedSlots: 'SpConsensusBabeAllowedSlots'
+            }
+        }
+    },
+    /**
+     * Lookup272: sp_consensus_babe::AllowedSlots
+     **/
+    SpConsensusBabeAllowedSlots: {
+        _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
+    },
+    /**
+     * Lookup273: pallet_timestamp::pallet::Call<T>
+     **/
+    PalletTimestampCall: {
+        _enum: {
+            set: {
+                now: 'Compact<u64>'
+            }
+        }
+    },
+    /**
+     * Lookup275: pallet_authorship::pallet::Call<T>
+     **/
+    PalletAuthorshipCall: {
+        _enum: {
+            set_uncles: {
+                newUncles: 'Vec<SpRuntimeHeader>'
+            }
+        }
+    },
+    /**
+     * Lookup277: pallet_balances::pallet::Call<T, I>
+     **/
+    PalletBalancesCall: {
+        _enum: {
+            transfer: {
+                dest: 'AccountId32',
+                value: 'Compact<u128>',
+            },
+            set_balance: {
+                who: 'AccountId32',
+                newFree: 'Compact<u128>',
+                newReserved: 'Compact<u128>',
+            },
+            force_transfer: {
+                source: 'AccountId32',
+                dest: 'AccountId32',
+                value: 'Compact<u128>',
+            },
+            transfer_keep_alive: {
+                dest: 'AccountId32',
+                value: 'Compact<u128>',
+            },
+            transfer_all: {
+                dest: 'AccountId32',
+                keepAlive: 'bool',
+            },
+            force_unreserve: {
+                who: 'AccountId32',
+                amount: 'u128'
+            }
+        }
+    },
+    /**
+     * Lookup278: pallet_election_provider_multi_phase::pallet::Call<T>
+     **/
+    PalletElectionProviderMultiPhaseCall: {
+        _enum: {
+            submit_unsigned: {
+                rawSolution: 'PalletElectionProviderMultiPhaseRawSolution',
+                witness: 'PalletElectionProviderMultiPhaseSolutionOrSnapshotSize',
+            },
+            set_minimum_untrusted_score: {
+                maybeNextScore: 'Option<SpNposElectionsElectionScore>',
+            },
+            set_emergency_election_result: {
+                supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
+            },
+            submit: {
+                rawSolution: 'PalletElectionProviderMultiPhaseRawSolution',
+            },
+            governance_fallback: {
+                maybeMaxVoters: 'Option<u32>',
+                maybeMaxTargets: 'Option<u32>'
+            }
+        }
+    },
+    /**
+     * Lookup279: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     **/
+    PalletElectionProviderMultiPhaseRawSolution: {
+        solution: 'JoystreamNodeRuntimeNposSolution16',
+        score: 'SpNposElectionsElectionScore',
+        round: 'u32'
+    },
+    /**
+     * Lookup280: joystream_node_runtime::NposSolution16
+     **/
+    JoystreamNodeRuntimeNposSolution16: {
+        votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
+        votes2: 'Vec<(Compact<u32>,(Compact<u16>,Compact<PerU16>),Compact<u16>)>',
+        votes3: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);2],Compact<u16>)>',
+        votes4: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);3],Compact<u16>)>',
+        votes5: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);4],Compact<u16>)>',
+        votes6: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);5],Compact<u16>)>',
+        votes7: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);6],Compact<u16>)>',
+        votes8: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);7],Compact<u16>)>',
+        votes9: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);8],Compact<u16>)>',
+        votes10: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);9],Compact<u16>)>',
+        votes11: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);10],Compact<u16>)>',
+        votes12: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);11],Compact<u16>)>',
+        votes13: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);12],Compact<u16>)>',
+        votes14: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);13],Compact<u16>)>',
+        votes15: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);14],Compact<u16>)>',
+        votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
+    },
+    /**
+     * Lookup331: sp_npos_elections::ElectionScore
+     **/
+    SpNposElectionsElectionScore: {
+        minimalStake: 'u128',
+        sumStake: 'u128',
+        sumStakeSquared: 'u128'
+    },
+    /**
+     * Lookup332: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     **/
+    PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
+        voters: 'Compact<u32>',
+        targets: 'Compact<u32>'
+    },
+    /**
+     * Lookup336: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     **/
+    SpNposElectionsSupport: {
+        total: 'u128',
+        voters: 'Vec<(AccountId32,u128)>'
+    },
+    /**
+     * Lookup338: pallet_staking::pallet::pallet::Call<T>
+     **/
+    PalletStakingPalletCall: {
+        _enum: {
+            bond: {
+                controller: 'AccountId32',
+                value: 'Compact<u128>',
+                payee: 'PalletStakingRewardDestination',
+            },
+            bond_extra: {
+                maxAdditional: 'Compact<u128>',
+            },
+            unbond: {
+                value: 'Compact<u128>',
+            },
+            withdraw_unbonded: {
+                numSlashingSpans: 'u32',
+            },
+            validate: {
+                prefs: 'PalletStakingValidatorPrefs',
+            },
+            nominate: {
+                targets: 'Vec<AccountId32>',
+            },
+            chill: 'Null',
+            set_payee: {
+                payee: 'PalletStakingRewardDestination',
+            },
+            set_controller: {
+                controller: 'AccountId32',
+            },
+            set_validator_count: {
+                _alias: {
+                    new_: 'new',
+                },
+                new_: 'Compact<u32>',
+            },
+            increase_validator_count: {
+                additional: 'Compact<u32>',
+            },
+            scale_validator_count: {
+                factor: 'Percent',
+            },
+            force_no_eras: 'Null',
+            force_new_era: 'Null',
+            set_invulnerables: {
+                invulnerables: 'Vec<AccountId32>',
+            },
+            force_unstake: {
+                stash: 'AccountId32',
+                numSlashingSpans: 'u32',
+            },
+            force_new_era_always: 'Null',
+            cancel_deferred_slash: {
+                era: 'u32',
+                slashIndices: 'Vec<u32>',
+            },
+            payout_stakers: {
+                validatorStash: 'AccountId32',
+                era: 'u32',
+            },
+            rebond: {
+                value: 'Compact<u128>',
+            },
+            set_history_depth: {
+                newHistoryDepth: 'Compact<u32>',
+                eraItemsDeleted: 'Compact<u32>',
+            },
+            reap_stash: {
+                stash: 'AccountId32',
+                numSlashingSpans: 'u32',
+            },
+            kick: {
+                who: 'Vec<AccountId32>',
+            },
+            set_staking_configs: {
+                minNominatorBond: 'PalletStakingPalletConfigOpU128',
+                minValidatorBond: 'PalletStakingPalletConfigOpU128',
+                maxNominatorCount: 'PalletStakingPalletConfigOpU32',
+                maxValidatorCount: 'PalletStakingPalletConfigOpU32',
+                chillThreshold: 'PalletStakingPalletConfigOpPercent',
+                minCommission: 'PalletStakingPalletConfigOpPerbill',
+            },
+            chill_other: {
+                controller: 'AccountId32',
+            },
+            force_apply_min_commission: {
+                validatorStash: 'AccountId32'
+            }
+        }
+    },
+    /**
+     * Lookup339: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+     **/
+    PalletStakingRewardDestination: {
+        _enum: {
+            Staked: 'Null',
+            Stash: 'Null',
+            Controller: 'Null',
+            Account: 'AccountId32',
+            None: 'Null'
+        }
+    },
+    /**
+     * Lookup343: pallet_staking::pallet::pallet::ConfigOp<T>
+     **/
+    PalletStakingPalletConfigOpU128: {
+        _enum: {
+            Noop: 'Null',
+            Set: 'u128',
+            Remove: 'Null'
+        }
+    },
+    /**
+     * Lookup344: pallet_staking::pallet::pallet::ConfigOp<T>
+     **/
+    PalletStakingPalletConfigOpU32: {
+        _enum: {
+            Noop: 'Null',
+            Set: 'u32',
+            Remove: 'Null'
+        }
+    },
+    /**
+     * Lookup345: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+     **/
+    PalletStakingPalletConfigOpPercent: {
+        _enum: {
+            Noop: 'Null',
+            Set: 'Percent',
+            Remove: 'Null'
+        }
+    },
+    /**
+     * Lookup346: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+     **/
+    PalletStakingPalletConfigOpPerbill: {
+        _enum: {
+            Noop: 'Null',
+            Set: 'Perbill',
+            Remove: 'Null'
+        }
+    },
+    /**
+     * Lookup347: pallet_session::pallet::Call<T>
+     **/
+    PalletSessionCall: {
+        _enum: {
+            set_keys: {
+                _alias: {
+                    keys_: 'keys',
+                },
+                keys_: 'JoystreamNodeRuntimeSessionKeys',
+                proof: 'Bytes',
+            },
+            purge_keys: 'Null'
+        }
+    },
+    /**
+     * Lookup348: joystream_node_runtime::SessionKeys
+     **/
+    JoystreamNodeRuntimeSessionKeys: {
+        grandpa: 'SpFinalityGrandpaAppPublic',
+        babe: 'SpConsensusBabeAppPublic',
+        imOnline: 'PalletImOnlineSr25519AppSr25519Public',
+        authorityDiscovery: 'SpAuthorityDiscoveryAppPublic'
+    },
+    /**
+     * Lookup349: sp_authority_discovery::app::Public
+     **/
+    SpAuthorityDiscoveryAppPublic: 'SpCoreSr25519Public',
+    /**
+     * Lookup350: pallet_grandpa::pallet::Call<T>
+     **/
+    PalletGrandpaCall: {
+        _enum: {
+            report_equivocation: {
+                equivocationProof: 'SpFinalityGrandpaEquivocationProof',
+                keyOwnerProof: 'SpSessionMembershipProof',
+            },
+            report_equivocation_unsigned: {
+                equivocationProof: 'SpFinalityGrandpaEquivocationProof',
+                keyOwnerProof: 'SpSessionMembershipProof',
+            },
+            note_stalled: {
+                delay: 'u32',
+                bestFinalizedBlockNumber: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup351: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+     **/
+    SpFinalityGrandpaEquivocationProof: {
+        setId: 'u64',
+        equivocation: 'SpFinalityGrandpaEquivocation'
+    },
+    /**
+     * Lookup352: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+     **/
+    SpFinalityGrandpaEquivocation: {
+        _enum: {
+            Prevote: 'FinalityGrandpaEquivocationPrevote',
+            Precommit: 'FinalityGrandpaEquivocationPrecommit'
+        }
+    },
+    /**
+     * Lookup353: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     **/
+    FinalityGrandpaEquivocationPrevote: {
+        roundNumber: 'u64',
+        identity: 'SpFinalityGrandpaAppPublic',
+        first: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)',
+        second: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)'
+    },
+    /**
+     * Lookup354: finality_grandpa::Prevote<primitive_types::H256, N>
+     **/
+    FinalityGrandpaPrevote: {
+        targetHash: 'H256',
+        targetNumber: 'u32'
+    },
+    /**
+     * Lookup355: sp_finality_grandpa::app::Signature
+     **/
+    SpFinalityGrandpaAppSignature: 'SpCoreEd25519Signature',
+    /**
+     * Lookup356: sp_core::ed25519::Signature
+     **/
+    SpCoreEd25519Signature: '[u8;64]',
+    /**
+     * Lookup359: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     **/
+    FinalityGrandpaEquivocationPrecommit: {
+        roundNumber: 'u64',
+        identity: 'SpFinalityGrandpaAppPublic',
+        first: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)',
+        second: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)'
+    },
+    /**
+     * Lookup360: finality_grandpa::Precommit<primitive_types::H256, N>
+     **/
+    FinalityGrandpaPrecommit: {
+        targetHash: 'H256',
+        targetNumber: 'u32'
+    },
+    /**
+     * Lookup362: pallet_im_online::pallet::Call<T>
+     **/
+    PalletImOnlineCall: {
+        _enum: {
+            heartbeat: {
+                heartbeat: 'PalletImOnlineHeartbeat',
+                signature: 'PalletImOnlineSr25519AppSr25519Signature'
+            }
+        }
+    },
+    /**
+     * Lookup363: pallet_im_online::Heartbeat<BlockNumber>
+     **/
+    PalletImOnlineHeartbeat: {
+        blockNumber: 'u32',
+        networkState: 'SpCoreOffchainOpaqueNetworkState',
+        sessionIndex: 'u32',
+        authorityIndex: 'u32',
+        validatorsLen: 'u32'
+    },
+    /**
+     * Lookup364: sp_core::offchain::OpaqueNetworkState
+     **/
+    SpCoreOffchainOpaqueNetworkState: {
+        peerId: 'Bytes',
+        externalAddresses: 'Vec<Bytes>'
+    },
+    /**
+     * Lookup368: pallet_im_online::sr25519::app_sr25519::Signature
+     **/
+    PalletImOnlineSr25519AppSr25519Signature: 'SpCoreSr25519Signature',
+    /**
+     * Lookup369: sp_core::sr25519::Signature
+     **/
+    SpCoreSr25519Signature: '[u8;64]',
+    /**
+     * Lookup370: pallet_bags_list::pallet::Call<T, I>
+     **/
+    PalletBagsListCall: {
+        _enum: {
+            rebag: {
+                dislocated: 'AccountId32',
+            },
+            put_in_front_of: {
+                lighter: 'AccountId32'
+            }
+        }
+    },
+    /**
+     * Lookup371: pallet_vesting::pallet::Call<T>
+     **/
+    PalletVestingCall: {
+        _enum: {
+            vest: 'Null',
+            vest_other: {
+                target: 'AccountId32',
+            },
+            vested_transfer: {
+                target: 'AccountId32',
+                schedule: 'PalletVestingVestingInfo',
+            },
+            force_vested_transfer: {
+                source: 'AccountId32',
+                target: 'AccountId32',
+                schedule: 'PalletVestingVestingInfo',
+            },
+            merge_schedules: {
+                schedule1Index: 'u32',
+                schedule2Index: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup372: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     **/
+    PalletVestingVestingInfo: {
+        locked: 'u128',
+        perBlock: 'u128',
+        startingBlock: 'u32'
+    },
+    /**
+     * Lookup373: pallet_multisig::pallet::Call<T>
+     **/
+    PalletMultisigCall: {
+        _enum: {
+            as_multi_threshold_1: {
+                otherSignatories: 'Vec<AccountId32>',
+                call: 'Call',
+            },
+            as_multi: {
+                threshold: 'u16',
+                otherSignatories: 'Vec<AccountId32>',
+                maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+                call: 'WrapperKeepOpaque<Call>',
+                storeCall: 'bool',
+                maxWeight: 'u64',
+            },
+            approve_as_multi: {
+                threshold: 'u16',
+                otherSignatories: 'Vec<AccountId32>',
+                maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+                callHash: '[u8;32]',
+                maxWeight: 'u64',
+            },
+            cancel_as_multi: {
+                threshold: 'u16',
+                otherSignatories: 'Vec<AccountId32>',
+                timepoint: 'PalletMultisigTimepoint',
+                callHash: '[u8;32]'
+            }
+        }
+    },
+    /**
+     * Lookup376: pallet_council::Call<T>
+     **/
+    PalletCouncilCall: {
+        _enum: {
+            announce_candidacy: {
+                membershipId: 'u64',
+                stakingAccountId: 'AccountId32',
+                rewardAccountId: 'AccountId32',
+                stake: 'u128',
+            },
+            release_candidacy_stake: {
+                membershipId: 'u64',
+            },
+            withdraw_candidacy: {
+                membershipId: 'u64',
+            },
+            set_candidacy_note: {
+                membershipId: 'u64',
+                note: 'Bytes',
+            },
+            set_budget: {
+                balance: 'u128',
+            },
+            plan_budget_refill: {
+                nextRefill: 'u32',
+            },
+            set_budget_increment: {
+                budgetIncrement: 'u128',
+            },
+            set_councilor_reward: {
+                councilorReward: 'u128',
+            },
+            funding_request: {
+                fundingRequests: 'Vec<PalletCommonFundingRequestParameters>',
+            },
+            fund_council_budget: {
+                memberId: 'u64',
+                amount: 'u128',
+                rationale: 'Bytes',
+            },
+            councilor_remark: {
+                councilorId: 'u64',
+                msg: 'Bytes',
+            },
+            candidate_remark: {
+                candidateId: 'u64',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup377: pallet_referendum::Call<T, I>
+     **/
+    PalletReferendumCall: {
+        _enum: {
+            vote: {
+                commitment: 'H256',
+                stake: 'u128',
+            },
+            reveal_vote: {
+                salt: 'Bytes',
+                voteOptionId: 'u64',
+            },
+            release_vote_stake: 'Null',
+            opt_out_of_voting: 'Null'
+        }
+    },
+    /**
+     * Lookup378: pallet_membership::Call<T>
+     **/
+    PalletMembershipCall: {
+        _enum: {
+            buy_membership: {
+                params: 'PalletMembershipBuyMembershipParameters',
+            },
+            update_profile: {
+                memberId: 'u64',
+                handle: 'Option<Bytes>',
+                metadata: 'Option<Bytes>',
+            },
+            update_accounts: {
+                memberId: 'u64',
+                newRootAccount: 'Option<AccountId32>',
+                newControllerAccount: 'Option<AccountId32>',
+            },
+            update_profile_verification: {
+                workerId: 'u64',
+                targetMemberId: 'u64',
+                isVerified: 'bool',
+            },
+            set_referral_cut: {
+                percentValue: 'u8',
+            },
+            transfer_invites: {
+                sourceMemberId: 'u64',
+                targetMemberId: 'u64',
+                numberOfInvites: 'u32',
+            },
+            invite_member: {
+                params: 'PalletMembershipInviteMembershipParameters',
+            },
+            gift_membership: {
+                params: 'PalletMembershipGiftMembershipParameters',
+            },
+            set_membership_price: {
+                newPrice: 'u128',
+            },
+            set_leader_invitation_quota: {
+                invitationQuota: 'u32',
+            },
+            set_initial_invitation_balance: {
+                newInitialBalance: 'u128',
+            },
+            set_initial_invitation_count: {
+                newInvitationCount: 'u32',
+            },
+            add_staking_account_candidate: {
+                memberId: 'u64',
+            },
+            remove_staking_account: {
+                memberId: 'u64',
+            },
+            confirm_staking_account: {
+                memberId: 'u64',
+                stakingAccountId: 'AccountId32',
+            },
+            member_remark: {
+                memberId: 'u64',
+                msg: 'Bytes',
+                payment: 'Option<(AccountId32,u128)>',
+            },
+            create_member: {
+                params: 'PalletMembershipCreateMemberParameters'
+            }
+        }
+    },
+    /**
+     * Lookup379: pallet_forum::Call<T>
+     **/
+    PalletForumCall: {
+        _enum: {
+            update_category_membership_of_moderator: {
+                moderatorId: 'u64',
+                categoryId: 'u64',
+                newValue: 'bool',
+            },
+            create_category: {
+                parentCategoryId: 'Option<u64>',
+                title: 'Bytes',
+                description: 'Bytes',
+            },
+            update_category_archival_status: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                newArchivalStatus: 'bool',
+            },
+            update_category_title: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                title: 'Bytes',
+            },
+            update_category_description: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                description: 'Bytes',
+            },
+            delete_category: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+            },
+            create_thread: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                metadata: 'Bytes',
+                text: 'Bytes',
+            },
+            edit_thread_metadata: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                threadId: 'u64',
+                newMetadata: 'Bytes',
+            },
+            delete_thread: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                threadId: 'u64',
+                hide: 'bool',
+            },
+            move_thread_to_category: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                threadId: 'u64',
+                newCategoryId: 'u64',
+            },
+            moderate_thread: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                threadId: 'u64',
+                rationale: 'Bytes',
+            },
+            add_post: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                threadId: 'u64',
+                text: 'Bytes',
+                editable: 'bool',
+            },
+            edit_post_text: {
+                forumUserId: 'u64',
+                categoryId: 'u64',
+                threadId: 'u64',
+                postId: 'u64',
+                newText: 'Bytes',
+            },
+            moderate_post: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                threadId: 'u64',
+                postId: 'u64',
+                rationale: 'Bytes',
+            },
+            delete_posts: {
+                forumUserId: 'u64',
+                posts: 'BTreeMap<PalletForumExtendedPostIdObject, bool>',
+                rationale: 'Bytes',
+            },
+            set_stickied_threads: {
+                actor: 'PalletForumPrivilegedActor',
+                categoryId: 'u64',
+                stickiedIds: 'BTreeSet<u64>'
+            }
+        }
+    },
+    /**
+     * Lookup380: pallet_constitution::Call<T>
+     **/
+    PalletConstitutionCall: {
+        _enum: {
+            amend_constitution: {
+                constitutionText: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup381: pallet_bounty::Call<T>
+     **/
+    PalletBountyCall: {
+        _enum: {
+            create_bounty: {
+                params: 'PalletBountyBountyParametersBTreeSet',
+                metadata: 'Bytes',
+            },
+            fund_bounty: {
+                funder: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                amount: 'u128',
+            },
+            terminate_bounty: {
+                bountyId: 'u64',
+            },
+            switch_oracle: {
+                newOracle: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+            },
+            withdraw_funding: {
+                funder: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+            },
+            announce_work_entry: {
+                memberId: 'u64',
+                bountyId: 'u64',
+                stakingAccountId: 'AccountId32',
+                workDescription: 'Bytes',
+            },
+            submit_work: {
+                memberId: 'u64',
+                bountyId: 'u64',
+                entryId: 'u64',
+                workData: 'Bytes',
+            },
+            end_working_period: {
+                bountyId: 'u64',
+            },
+            submit_oracle_judgment: {
+                bountyId: 'u64',
+                judgment: 'BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>',
+                rationale: 'Bytes',
+            },
+            withdraw_entrant_stake: {
+                memberId: 'u64',
+                bountyId: 'u64',
+                entryId: 'u64',
+            },
+            withdraw_oracle_reward: {
+                bountyId: 'u64',
+            },
+            contributor_remark: {
+                contributor: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                msg: 'Bytes',
+            },
+            oracle_remark: {
+                oracle: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                msg: 'Bytes',
+            },
+            entrant_remark: {
+                entrantId: 'u64',
+                bountyId: 'u64',
+                entryId: 'u64',
+                msg: 'Bytes',
+            },
+            creator_remark: {
+                creator: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup383: pallet_content::Call<T>
+     **/
+    PalletContentCall: {
+        _enum: {
+            create_curator_group: {
+                isActive: 'bool',
+                permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>',
+            },
+            update_curator_group_permissions: {
+                curatorGroupId: 'u64',
+                permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>',
+            },
+            set_curator_group_status: {
+                curatorGroupId: 'u64',
+                isActive: 'bool',
+            },
+            add_curator_to_group: {
+                curatorGroupId: 'u64',
+                curatorId: 'u64',
+                permissions: 'BTreeSet<PalletContentIterableEnumsChannelActionPermission>',
+            },
+            remove_curator_from_group: {
+                curatorGroupId: 'u64',
+                curatorId: 'u64',
+            },
+            create_channel: {
+                channelOwner: 'PalletContentChannelOwner',
+                params: 'PalletContentChannelCreationParametersRecord',
+            },
+            update_channel: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletContentChannelUpdateParametersRecord',
+            },
+            update_channel_privilege_level: {
+                channelId: 'u64',
+                newPrivilegeLevel: 'u8',
+            },
+            set_channel_paused_features_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                newPausedFeatures: 'BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>',
+                rationale: 'Bytes',
+            },
+            delete_channel: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                channelBagWitness: 'PalletContentChannelBagWitness',
+                numObjectsToDelete: 'u64',
+            },
+            delete_channel_assets_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                assetsToRemove: 'BTreeSet<u64>',
+                storageBucketsNumWitness: 'u32',
+                rationale: 'Bytes',
+            },
+            delete_channel_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                channelBagWitness: 'PalletContentChannelBagWitness',
+                numObjectsToDelete: 'u64',
+                rationale: 'Bytes',
+            },
+            set_channel_visibility_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                isHidden: 'bool',
+                rationale: 'Bytes',
+            },
+            create_video: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletContentVideoCreationParametersRecord',
+            },
+            update_video: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                params: 'PalletContentVideoUpdateParametersRecord',
+            },
+            delete_video: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                numObjectsToDelete: 'u64',
+                storageBucketsNumWitness: 'Option<u32>',
+            },
+            delete_video_assets_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                storageBucketsNumWitness: 'u32',
+                assetsToRemove: 'BTreeSet<u64>',
+                rationale: 'Bytes',
+            },
+            delete_video_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                storageBucketsNumWitness: 'Option<u32>',
+                numObjectsToDelete: 'u64',
+                rationale: 'Bytes',
+            },
+            set_video_visibility_as_moderator: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                isHidden: 'bool',
+                rationale: 'Bytes',
+            },
+            update_channel_payouts: {
+                params: 'PalletContentUpdateChannelPayoutsParametersRecord',
+                uploaderAccount: 'AccountId32',
+            },
+            claim_channel_reward: {
+                actor: 'PalletContentPermissionsContentActor',
+                proof: 'Vec<PalletCommonMerkleTreeProofElementRecord>',
+                item: 'PalletContentPullPaymentElement',
+            },
+            withdraw_from_channel_balance: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                amount: 'u128',
+            },
+            update_channel_state_bloat_bond: {
+                newChannelStateBloatBond: 'u128',
+            },
+            update_video_state_bloat_bond: {
+                newVideoStateBloatBond: 'u128',
+            },
+            claim_and_withdraw_channel_reward: {
+                actor: 'PalletContentPermissionsContentActor',
+                proof: 'Vec<PalletCommonMerkleTreeProofElementRecord>',
+                item: 'PalletContentPullPaymentElement',
+            },
+            issue_nft: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                params: 'PalletContentNftTypesNftIssuanceParametersRecord',
+            },
+            destroy_nft: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            start_open_auction: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                auctionParams: 'PalletContentNftTypesOpenAuctionParamsRecord',
+            },
+            start_english_auction: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                auctionParams: 'PalletContentNftTypesEnglishAuctionParamsRecord',
+            },
+            cancel_english_auction: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            cancel_open_auction: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            cancel_offer: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            cancel_buy_now: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+            },
+            update_buy_now_price: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                newPrice: 'u128',
+            },
+            make_open_auction_bid: {
+                participantId: 'u64',
+                videoId: 'u64',
+                bidAmount: 'u128',
+            },
+            make_english_auction_bid: {
+                participantId: 'u64',
+                videoId: 'u64',
+                bidAmount: 'u128',
+            },
+            cancel_open_auction_bid: {
+                participantId: 'u64',
+                videoId: 'u64',
+            },
+            settle_english_auction: {
+                videoId: 'u64',
+            },
+            pick_open_auction_winner: {
+                ownerId: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                winnerId: 'u64',
+                commit: 'u128',
+            },
+            offer_nft: {
+                videoId: 'u64',
+                ownerId: 'PalletContentPermissionsContentActor',
+                to: 'u64',
+                price: 'Option<u128>',
+            },
+            sling_nft_back: {
+                videoId: 'u64',
+                ownerId: 'PalletContentPermissionsContentActor',
+            },
+            accept_incoming_offer: {
+                videoId: 'u64',
+                witnessPrice: 'Option<u128>',
+            },
+            sell_nft: {
+                videoId: 'u64',
+                ownerId: 'PalletContentPermissionsContentActor',
+                price: 'u128',
+            },
+            buy_nft: {
+                videoId: 'u64',
+                participantId: 'u64',
+                witnessPrice: 'u128',
+            },
+            toggle_nft_limits: {
+                enabled: 'bool',
+            },
+            channel_owner_remark: {
+                channelId: 'u64',
+                msg: 'Bytes',
+            },
+            creator_token_issuer_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                msg: 'Bytes',
+            },
+            channel_agent_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                msg: 'Bytes',
+            },
+            nft_owner_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                videoId: 'u64',
+                msg: 'Bytes',
+            },
+            initialize_channel_transfer: {
+                channelId: 'u64',
+                actor: 'PalletContentPermissionsContentActor',
+                transferParams: 'PalletContentInitTransferParameters',
+            },
+            cancel_channel_transfer: {
+                channelId: 'u64',
+                actor: 'PalletContentPermissionsContentActor',
+            },
+            accept_channel_transfer: {
+                channelId: 'u64',
+                commitmentParams: 'PalletContentTransferCommitmentParametersBTreeMap',
+            },
+            update_global_nft_limit: {
+                nftLimitPeriod: 'PalletContentNftLimitPeriod',
+                limit: 'u64',
+            },
+            update_channel_nft_limit: {
+                actor: 'PalletContentPermissionsContentActor',
+                nftLimitPeriod: 'PalletContentNftLimitPeriod',
+                channelId: 'u64',
+                limit: 'u64',
+            },
+            issue_creator_token: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenTokenIssuanceParameters',
+            },
+            init_creator_token_sale: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenTokenSaleParams',
+            },
+            update_upcoming_creator_token_sale: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                newStartBlock: 'Option<u32>',
+                newDuration: 'Option<u32>',
+            },
+            creator_token_issuer_transfer: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                outputs: 'Vec<(u64,PalletProjectTokenPaymentWithVesting)>',
+                metadata: 'Bytes',
+            },
+            make_creator_token_permissionless: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            reduce_creator_token_patronage_rate_to: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                targetRate: 'Permill',
+            },
+            claim_creator_token_patronage_credit: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            issue_revenue_split: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                start: 'Option<u32>',
+                duration: 'u32',
+            },
+            finalize_revenue_split: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            finalize_creator_token_sale: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            deissue_creator_token: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            activate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenAmmParams',
+            },
+            deactivate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64'
+            }
+        }
+    },
+    /**
+     * Lookup384: pallet_content::types::ChannelBagWitness
+     **/
+    PalletContentChannelBagWitness: {
+        storageBucketsNum: 'u32',
+        distributionBucketsNum: 'u32'
+    },
+    /**
+     * Lookup386: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+     **/
+    PalletCommonMerkleTreeProofElementRecord: {
+        _alias: {
+            hash_: 'hash'
+        },
+        hash_: 'H256',
+        side: 'PalletCommonMerkleTreeSide'
+    },
+    /**
+     * Lookup387: pallet_common::merkle_tree::Side
+     **/
+    PalletCommonMerkleTreeSide: {
+        _enum: ['Left', 'Right']
+    },
+    /**
+     * Lookup388: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     **/
+    PalletContentPullPaymentElement: {
+        channelId: 'u64',
+        cumulativeRewardEarned: 'u128',
+        reason: 'H256'
+    },
+    /**
+     * Lookup389: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     **/
+    PalletContentInitTransferParameters: {
+        newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        price: 'u128',
+        newOwner: 'PalletContentChannelOwner'
+    },
+    /**
+     * Lookup390: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     **/
+    PalletProjectTokenTokenSaleParams: {
+        unitPrice: 'u128',
+        upperBoundQuantity: 'u128',
+        startsAt: 'Option<u32>',
+        duration: 'u32',
+        vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>',
+        capPerMember: 'Option<u128>',
+        metadata: 'Option<Bytes>'
+    },
+    /**
+     * Lookup394: pallet_project_token::types::AmmParams<Balance>
+     **/
+    PalletProjectTokenAmmParams: {
+        slope: 'u128',
+        intercept: 'u128'
+    },
+    /**
+     * Lookup395: pallet_storage::Call<T>
+     **/
+    PalletStorageCall: {
+        _enum: {
+            delete_storage_bucket: {
+                storageBucketId: 'u64',
+            },
+            update_uploading_blocked_status: {
+                newStatus: 'bool',
+            },
+            update_data_size_fee: {
+                newDataSizeFee: 'u128',
+            },
+            update_storage_buckets_per_bag_limit: {
+                newLimit: 'u32',
+            },
+            update_storage_buckets_voucher_max_limits: {
+                newObjectsSize: 'u64',
+                newObjectsNumber: 'u64',
+            },
+            update_data_object_state_bloat_bond: {
+                stateBloatBond: 'u128',
+            },
+            update_number_of_storage_buckets_in_dynamic_bag_creation_policy: {
+                dynamicBagType: 'PalletStorageDynamicBagType',
+                numberOfStorageBuckets: 'u32',
+            },
+            update_blacklist: {
+                removeHashes: 'BTreeSet<Bytes>',
+                addHashes: 'BTreeSet<Bytes>',
+            },
+            create_storage_bucket: {
+                inviteWorker: 'Option<u64>',
+                acceptingNewBags: 'bool',
+                sizeLimit: 'u64',
+                objectsLimit: 'u64',
+            },
+            update_storage_buckets_for_bag: {
+                bagId: 'PalletStorageBagIdType',
+                addBuckets: 'BTreeSet<u64>',
+                removeBuckets: 'BTreeSet<u64>',
+            },
+            cancel_storage_bucket_operator_invite: {
+                storageBucketId: 'u64',
+            },
+            invite_storage_bucket_operator: {
+                storageBucketId: 'u64',
+                operatorId: 'u64',
+            },
+            remove_storage_bucket_operator: {
+                storageBucketId: 'u64',
+            },
+            update_storage_bucket_status: {
+                storageBucketId: 'u64',
+                acceptingNewBags: 'bool',
+            },
+            set_storage_bucket_voucher_limits: {
+                storageBucketId: 'u64',
+                newObjectsSizeLimit: 'u64',
+                newObjectsNumberLimit: 'u64',
+            },
+            accept_storage_bucket_invitation: {
+                workerId: 'u64',
+                storageBucketId: 'u64',
+                transactorAccountId: 'AccountId32',
+            },
+            set_storage_operator_metadata: {
+                workerId: 'u64',
+                storageBucketId: 'u64',
+                metadata: 'Bytes',
+            },
+            accept_pending_data_objects: {
+                workerId: 'u64',
+                storageBucketId: 'u64',
+                bagId: 'PalletStorageBagIdType',
+                dataObjects: 'BTreeSet<u64>',
+            },
+            create_distribution_bucket_family: 'Null',
+            delete_distribution_bucket_family: {
+                familyId: 'u64',
+            },
+            create_distribution_bucket: {
+                familyId: 'u64',
+                acceptingNewBags: 'bool',
+            },
+            update_distribution_bucket_status: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                acceptingNewBags: 'bool',
+            },
+            delete_distribution_bucket: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+            },
+            update_distribution_buckets_for_bag: {
+                bagId: 'PalletStorageBagIdType',
+                familyId: 'u64',
+                addBucketsIndices: 'BTreeSet<u64>',
+                removeBucketsIndices: 'BTreeSet<u64>',
+            },
+            update_distribution_buckets_per_bag_limit: {
+                newLimit: 'u32',
+            },
+            update_distribution_bucket_mode: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                distributing: 'bool',
+            },
+            update_families_in_dynamic_bag_creation_policy: {
+                dynamicBagType: 'PalletStorageDynamicBagType',
+                families: 'BTreeMap<u64, u32>',
+            },
+            invite_distribution_bucket_operator: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                operatorWorkerId: 'u64',
+            },
+            cancel_distribution_bucket_operator_invite: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                operatorWorkerId: 'u64',
+            },
+            remove_distribution_bucket_operator: {
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                operatorWorkerId: 'u64',
+            },
+            set_distribution_bucket_family_metadata: {
+                familyId: 'u64',
+                metadata: 'Bytes',
+            },
+            accept_distribution_bucket_invitation: {
+                workerId: 'u64',
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+            },
+            set_distribution_operator_metadata: {
+                workerId: 'u64',
+                bucketId: 'PalletStorageDistributionBucketIdRecord',
+                metadata: 'Bytes',
+            },
+            storage_operator_remark: {
+                workerId: 'u64',
+                storageBucketId: 'u64',
+                msg: 'Bytes',
+            },
+            distribution_operator_remark: {
+                workerId: 'u64',
+                distributionBucketId: 'PalletStorageDistributionBucketIdRecord',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup396: pallet_project_token::Call<T>
+     **/
+    PalletProjectTokenCall: {
+        _enum: {
+            transfer: {
+                srcMemberId: 'u64',
+                tokenId: 'u64',
+                outputs: 'Vec<(u64,u128)>',
+                metadata: 'Bytes',
+            },
+            burn: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+            },
+            dust_account: {
+                tokenId: 'u64',
+                memberId: 'u64',
+            },
+            join_whitelist: {
+                memberId: 'u64',
+                tokenId: 'u64',
+                proof: 'PalletProjectTokenMerkleProof',
+            },
+            purchase_tokens_on_sale: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+            },
+            participate_in_split: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+            },
+            exit_revenue_split: {
+                tokenId: 'u64',
+                memberId: 'u64',
+            },
+            buy_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            sell_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            update_max_yearly_patronage_rate: {
+                rate: 'Permill'
+            }
+        }
+    },
+    /**
+     * Lookup400: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     **/
+    PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
+    /**
+     * Lookup403: pallet_project_token::types::MerkleSide
+     **/
+    PalletProjectTokenMerkleSide: {
+        _enum: ['Right', 'Left']
+    },
+    /**
+     * Lookup406: pallet_proposals_engine::Call<T>
+     **/
+    PalletProposalsEngineCall: {
+        _enum: {
+            vote: {
+                voterId: 'u64',
+                proposalId: 'u32',
+                vote: 'PalletProposalsEngineVoteKind',
+                rationale: 'Bytes',
+            },
+            cancel_proposal: {
+                proposerId: 'u64',
+                proposalId: 'u32',
+            },
+            veto_proposal: {
+                proposalId: 'u32',
+            },
+            proposer_remark: {
+                proposalId: 'u32',
+                proposerId: 'u64',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup407: pallet_proposals_discussion::Call<T>
+     **/
+    PalletProposalsDiscussionCall: {
+        _enum: {
+            add_post: {
+                postAuthorId: 'u64',
+                threadId: 'u64',
+                text: 'Bytes',
+                editable: 'bool',
+            },
+            delete_post: {
+                deleterId: 'u64',
+                postId: 'u64',
+                threadId: 'u64',
+                hide: 'bool',
+            },
+            update_post: {
+                threadId: 'u64',
+                postId: 'u64',
+                text: 'Bytes',
+            },
+            change_thread_mode: {
+                memberId: 'u64',
+                threadId: 'u64',
+                mode: 'PalletProposalsDiscussionThreadModeBTreeSet'
+            }
+        }
+    },
+    /**
+     * Lookup408: pallet_proposals_codex::Call<T>
+     **/
+    PalletProposalsCodexCall: {
+        _enum: {
+            create_proposal: {
+                generalProposalParameters: 'PalletProposalsCodexGeneralProposalParams',
+                proposalDetails: 'PalletProposalsCodexProposalDetails'
+            }
+        }
+    },
+    /**
+     * Lookup409: pallet_working_group::Call<T, I>
+     **/
+    PalletWorkingGroupCall: {
+        _enum: {
+            add_opening: {
+                description: 'Bytes',
+                openingType: 'PalletWorkingGroupOpeningType',
+                stakePolicy: 'PalletWorkingGroupStakePolicy',
+                rewardPerBlock: 'Option<u128>',
+            },
+            apply_on_opening: {
+                p: 'PalletWorkingGroupApplyOnOpeningParams',
+            },
+            fill_opening: {
+                openingId: 'u64',
+                successfulApplicationIds: 'BTreeSet<u64>',
+            },
+            update_role_account: {
+                workerId: 'u64',
+                newRoleAccountId: 'AccountId32',
+            },
+            leave_role: {
+                workerId: 'u64',
+                rationale: 'Option<Bytes>',
+            },
+            terminate_role: {
+                workerId: 'u64',
+                penalty: 'Option<u128>',
+                rationale: 'Option<Bytes>',
+            },
+            slash_stake: {
+                workerId: 'u64',
+                penalty: 'u128',
+                rationale: 'Option<Bytes>',
+            },
+            decrease_stake: {
+                workerId: 'u64',
+                stakeBalanceDelta: 'u128',
+            },
+            increase_stake: {
+                workerId: 'u64',
+                stakeBalanceDelta: 'u128',
+            },
+            withdraw_application: {
+                applicationId: 'u64',
+            },
+            cancel_opening: {
+                openingId: 'u64',
+            },
+            set_budget: {
+                newBudget: 'u128',
+            },
+            update_reward_account: {
+                workerId: 'u64',
+                newRewardAccountId: 'AccountId32',
+            },
+            update_reward_amount: {
+                workerId: 'u64',
+                rewardPerBlock: 'Option<u128>',
+            },
+            set_status_text: {
+                statusText: 'Option<Bytes>',
+            },
+            spend_from_budget: {
+                accountId: 'AccountId32',
+                amount: 'u128',
+                rationale: 'Option<Bytes>',
+            },
+            fund_working_group_budget: {
+                memberId: 'u64',
+                amount: 'u128',
+                rationale: 'Bytes',
+            },
+            lead_remark: {
+                msg: 'Bytes',
+            },
+            worker_remark: {
+                workerId: 'u64',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup418: joystream_node_runtime::OriginCaller
+     **/
+    JoystreamNodeRuntimeOriginCaller: {
+        _enum: {
+            system: 'FrameSupportDispatchRawOrigin',
+            Void: 'SpCoreVoid'
+        }
+    },
+    /**
+     * Lookup419: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     **/
+    FrameSupportDispatchRawOrigin: {
+        _enum: {
+            Root: 'Null',
+            Signed: 'AccountId32',
+            None: 'Null'
+        }
+    },
+    /**
+     * Lookup420: sp_core::Void
+     **/
+    SpCoreVoid: 'Null',
+    /**
+     * Lookup421: pallet_utility::pallet::Error<T>
+     **/
+    PalletUtilityError: {
+        _enum: ['TooManyCalls']
+    },
+    /**
+     * Lookup428: sp_consensus_babe::digests::PreDigest
+     **/
+    SpConsensusBabeDigestsPreDigest: {
+        _enum: {
+            __Unused0: 'Null',
+            Primary: 'SpConsensusBabeDigestsPrimaryPreDigest',
+            SecondaryPlain: 'SpConsensusBabeDigestsSecondaryPlainPreDigest',
+            SecondaryVRF: 'SpConsensusBabeDigestsSecondaryVRFPreDigest'
+        }
+    },
+    /**
+     * Lookup429: sp_consensus_babe::digests::PrimaryPreDigest
+     **/
+    SpConsensusBabeDigestsPrimaryPreDigest: {
+        authorityIndex: 'u32',
+        slot: 'u64',
+        vrfOutput: '[u8;32]',
+        vrfProof: '[u8;64]'
+    },
+    /**
+     * Lookup430: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     **/
+    SpConsensusBabeDigestsSecondaryPlainPreDigest: {
+        authorityIndex: 'u32',
+        slot: 'u64'
+    },
+    /**
+     * Lookup431: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     **/
+    SpConsensusBabeDigestsSecondaryVRFPreDigest: {
+        authorityIndex: 'u32',
+        slot: 'u64',
+        vrfOutput: '[u8;32]',
+        vrfProof: '[u8;64]'
+    },
+    /**
+     * Lookup433: sp_consensus_babe::BabeEpochConfiguration
+     **/
+    SpConsensusBabeBabeEpochConfiguration: {
+        c: '(u64,u64)',
+        allowedSlots: 'SpConsensusBabeAllowedSlots'
+    },
+    /**
+     * Lookup434: pallet_babe::pallet::Error<T>
+     **/
+    PalletBabeError: {
+        _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
+    },
+    /**
+     * Lookup436: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+     **/
+    PalletAuthorshipUncleEntryItem: {
+        _enum: {
+            InclusionHeight: 'u32',
+            Uncle: '(H256,Option<AccountId32>)'
+        }
+    },
+    /**
+     * Lookup437: pallet_authorship::pallet::Error<T>
+     **/
+    PalletAuthorshipError: {
+        _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
+    },
+    /**
+     * Lookup439: pallet_balances::BalanceLock<Balance>
+     **/
+    PalletBalancesBalanceLock: {
+        id: '[u8;8]',
+        amount: 'u128',
+        reasons: 'PalletBalancesReasons'
+    },
+    /**
+     * Lookup440: pallet_balances::Reasons
+     **/
+    PalletBalancesReasons: {
+        _enum: ['Fee', 'Misc', 'All']
+    },
+    /**
+     * Lookup443: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     **/
+    PalletBalancesReserveData: {
+        id: '[u8;8]',
+        amount: 'u128'
+    },
+    /**
+     * Lookup445: pallet_balances::Releases
+     **/
+    PalletBalancesReleases: {
+        _enum: ['V1_0_0', 'V2_0_0']
+    },
+    /**
+     * Lookup446: pallet_balances::pallet::Error<T, I>
+     **/
+    PalletBalancesError: {
+        _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
+    },
+    /**
+     * Lookup448: pallet_transaction_payment::Releases
+     **/
+    PalletTransactionPaymentReleases: {
+        _enum: ['V1Ancient', 'V2']
+    },
+    /**
+     * Lookup449: pallet_election_provider_multi_phase::Phase<Bn>
+     **/
+    PalletElectionProviderMultiPhasePhase: {
+        _enum: {
+            Off: 'Null',
+            Signed: 'Null',
+            Unsigned: '(bool,u32)',
+            Emergency: 'Null'
+        }
+    },
+    /**
+     * Lookup451: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     **/
+    PalletElectionProviderMultiPhaseReadySolution: {
+        supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
+        score: 'SpNposElectionsElectionScore',
+        compute: 'PalletElectionProviderMultiPhaseElectionCompute'
+    },
+    /**
+     * Lookup452: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     **/
+    PalletElectionProviderMultiPhaseRoundSnapshot: {
+        voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
+        targets: 'Vec<AccountId32>'
+    },
+    /**
+     * Lookup460: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+     **/
+    PalletElectionProviderMultiPhaseSignedSignedSubmission: {
+        who: 'AccountId32',
+        deposit: 'u128',
+        rawSolution: 'PalletElectionProviderMultiPhaseRawSolution',
+        callFee: 'u128'
+    },
+    /**
+     * Lookup461: pallet_election_provider_multi_phase::pallet::Error<T>
+     **/
+    PalletElectionProviderMultiPhaseError: {
+        _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
+    },
+    /**
+     * Lookup462: pallet_staking::StakingLedger<T>
+     **/
+    PalletStakingStakingLedger: {
+        stash: 'AccountId32',
+        total: 'Compact<u128>',
+        active: 'Compact<u128>',
+        unlocking: 'Vec<PalletStakingUnlockChunk>',
+        claimedRewards: 'Vec<u32>'
+    },
+    /**
+     * Lookup464: pallet_staking::UnlockChunk<Balance>
+     **/
+    PalletStakingUnlockChunk: {
+        value: 'Compact<u128>',
+        era: 'Compact<u32>'
+    },
+    /**
+     * Lookup466: pallet_staking::Nominations<T>
+     **/
+    PalletStakingNominations: {
+        targets: 'Vec<AccountId32>',
+        submittedIn: 'u32',
+        suppressed: 'bool'
+    },
+    /**
+     * Lookup467: pallet_staking::ActiveEraInfo
+     **/
+    PalletStakingActiveEraInfo: {
+        index: 'u32',
+        start: 'Option<u64>'
+    },
+    /**
+     * Lookup469: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     **/
+    PalletStakingEraRewardPoints: {
+        total: 'u32',
+        individual: 'BTreeMap<AccountId32, u32>'
+    },
+    /**
+     * Lookup473: pallet_staking::Forcing
+     **/
+    PalletStakingForcing: {
+        _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
+    },
+    /**
+     * Lookup475: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletStakingUnappliedSlash: {
+        validator: 'AccountId32',
+        own: 'u128',
+        others: 'Vec<(AccountId32,u128)>',
+        reporters: 'Vec<AccountId32>',
+        payout: 'u128'
+    },
+    /**
+     * Lookup477: pallet_staking::slashing::SlashingSpans
+     **/
+    PalletStakingSlashingSlashingSpans: {
+        spanIndex: 'u32',
+        lastStart: 'u32',
+        lastNonzeroSlash: 'u32',
+        prior: 'Vec<u32>'
+    },
+    /**
+     * Lookup478: pallet_staking::slashing::SpanRecord<Balance>
+     **/
+    PalletStakingSlashingSpanRecord: {
+        slashed: 'u128',
+        paidOut: 'u128'
+    },
+    /**
+     * Lookup481: pallet_staking::Releases
+     **/
+    PalletStakingReleases: {
+        _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
+    },
+    /**
+     * Lookup482: pallet_staking::pallet::pallet::Error<T>
+     **/
+    PalletStakingPalletError: {
+        _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
+    },
+    /**
+     * Lookup486: sp_core::crypto::KeyTypeId
+     **/
+    SpCoreCryptoKeyTypeId: '[u8;4]',
+    /**
+     * Lookup487: pallet_session::pallet::Error<T>
+     **/
+    PalletSessionError: {
+        _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
+    },
+    /**
+     * Lookup489: pallet_grandpa::StoredState<N>
+     **/
+    PalletGrandpaStoredState: {
+        _enum: {
+            Live: 'Null',
+            PendingPause: {
+                scheduledAt: 'u32',
+                delay: 'u32',
+            },
+            Paused: 'Null',
+            PendingResume: {
+                scheduledAt: 'u32',
+                delay: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
+     **/
+    PalletGrandpaStoredPendingChange: {
+        scheduledAt: 'u32',
+        delay: 'u32',
+        nextAuthorities: 'Vec<(SpFinalityGrandpaAppPublic,u64)>',
+        forced: 'Option<u32>'
+    },
+    /**
+     * Lookup492: pallet_grandpa::pallet::Error<T>
+     **/
+    PalletGrandpaError: {
+        _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
+    },
+    /**
+     * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     **/
+    PalletImOnlineBoundedOpaqueNetworkState: {
+        peerId: 'Bytes',
+        externalAddresses: 'Vec<Bytes>'
+    },
+    /**
+     * Lookup502: pallet_im_online::pallet::Error<T>
+     **/
+    PalletImOnlineError: {
+        _enum: ['InvalidKey', 'DuplicatedHeartbeat']
+    },
+    /**
+     * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     **/
+    SpStakingOffenceOffenceDetails: {
+        offender: '(AccountId32,PalletStakingExposure)',
+        reporters: 'Vec<AccountId32>'
+    },
+    /**
+     * Lookup506: pallet_bags_list::list::Node<T, I>
+     **/
+    PalletBagsListListNode: {
+        id: 'AccountId32',
+        prev: 'Option<AccountId32>',
+        next: 'Option<AccountId32>',
+        bagUpper: 'u64',
+        score: 'u64'
+    },
+    /**
+     * Lookup507: pallet_bags_list::list::Bag<T, I>
+     **/
+    PalletBagsListListBag: {
+        head: 'Option<AccountId32>',
+        tail: 'Option<AccountId32>'
+    },
+    /**
+     * Lookup508: pallet_bags_list::pallet::Error<T, I>
+     **/
+    PalletBagsListError: {
+        _enum: {
+            List: 'PalletBagsListListListError'
+        }
+    },
+    /**
+     * Lookup509: pallet_bags_list::list::ListError
+     **/
+    PalletBagsListListListError: {
+        _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
+    },
+    /**
+     * Lookup512: pallet_vesting::Releases
+     **/
+    PalletVestingReleases: {
+        _enum: ['V0', 'V1']
+    },
+    /**
+     * Lookup513: pallet_vesting::pallet::Error<T>
+     **/
+    PalletVestingError: {
+        _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
+    },
+    /**
+     * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletMultisigMultisig: {
+        when: 'PalletMultisigTimepoint',
+        deposit: 'u128',
+        depositor: 'AccountId32',
+        approvals: 'Vec<AccountId32>'
+    },
+    /**
+     * Lookup517: pallet_multisig::pallet::Error<T>
+     **/
+    PalletMultisigError: {
+        _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
+    },
+    /**
+     * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
+     **/
+    PalletCouncilCouncilStageUpdate: {
+        stage: 'PalletCouncilCouncilStage',
+        changedAt: 'u32'
+    },
+    /**
+     * Lookup519: pallet_council::CouncilStage<BlockNumber>
+     **/
+    PalletCouncilCouncilStage: {
+        _enum: {
+            Announcing: 'PalletCouncilCouncilStageAnnouncing',
+            Election: 'PalletCouncilCouncilStageElection',
+            Idle: 'PalletCouncilCouncilStageIdle'
+        }
+    },
+    /**
+     * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
+     **/
+    PalletCouncilCouncilStageAnnouncing: {
+        candidatesCount: 'u32',
+        endsAt: 'u32'
+    },
+    /**
+     * Lookup521: pallet_council::CouncilStageElection
+     **/
+    PalletCouncilCouncilStageElection: {
+        candidatesCount: 'u32'
+    },
+    /**
+     * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
+     **/
+    PalletCouncilCouncilStageIdle: {
+        endsAt: 'u32'
+    },
+    /**
+     * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     **/
+    PalletCouncilCouncilMember: {
+        stakingAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        membershipId: 'u64',
+        stake: 'u128',
+        lastPaymentBlock: 'u32',
+        unpaidReward: 'u128'
+    },
+    /**
+     * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     **/
+    PalletCouncilCandidate: {
+        stakingAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        cycleId: 'u64',
+        stake: 'u128',
+        votePower: 'u128',
+        noteHash: 'Option<H256>'
+    },
+    /**
+     * Lookup527: pallet_council::Error<T>
+     **/
+    PalletCouncilError: {
+        _enum: ['ArithmeticError', 'BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
+    },
+    /**
+     * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     **/
+    PalletReferendumReferendumStage: {
+        _enum: {
+            Inactive: 'Null',
+            Voting: 'PalletReferendumReferendumStageVoting',
+            Revealing: 'PalletReferendumReferendumStageRevealing'
+        }
+    },
+    /**
+     * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     **/
+    PalletReferendumReferendumStageVoting: {
+        started: 'u32',
+        winningTargetCount: 'u32',
+        currentCycleId: 'u64',
+        endsAt: 'u32'
+    },
+    /**
+     * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     **/
+    PalletReferendumReferendumStageRevealing: {
+        started: 'u32',
+        winningTargetCount: 'u32',
+        intermediateWinners: 'Vec<PalletReferendumOptionResult>',
+        currentCycleId: 'u64',
+        endsAt: 'u32'
+    },
+    /**
+     * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     **/
+    PalletReferendumCastVote: {
+        commitment: 'H256',
+        cycleId: 'u64',
+        stake: 'u128',
+        voteFor: 'Option<u64>'
+    },
+    /**
+     * Lookup533: pallet_referendum::Error<T, I>
+     **/
+    PalletReferendumError: {
+        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden', 'AccountAlreadyOptedOutOfVoting']
+    },
+    /**
+     * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+     **/
+    PalletMembershipMembershipObject: {
+        handleHash: 'H256',
+        rootAccount: 'AccountId32',
+        controllerAccount: 'AccountId32',
+        verified: 'bool',
+        invites: 'u32'
+    },
+    /**
+     * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
+     **/
+    PalletMembershipStakingAccountMemberBinding: {
+        memberId: 'u64',
+        confirmed: 'bool'
+    },
+    /**
+     * Lookup536: pallet_membership::Error<T>
+     **/
+    PalletMembershipError: {
+        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift', 'InsufficientBalanceToCoverPayment']
+    },
+    /**
+     * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletForumCategory: {
+        titleHash: 'H256',
+        descriptionHash: 'H256',
+        archived: 'bool',
+        numDirectSubcategories: 'u32',
+        numDirectThreads: 'u32',
+        numDirectModerators: 'u32',
+        parentCategoryId: 'Option<u64>',
+        stickyThreadIds: 'BTreeSet<u64>'
+    },
+    /**
+     * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletForumThread: {
+        categoryId: 'u64',
+        authorId: 'u64',
+        cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+        numberOfEditablePosts: 'u64'
+    },
+    /**
+     * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletForumPost: {
+        threadId: 'u64',
+        textHash: 'H256',
+        authorId: 'u64',
+        cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+        lastEdited: 'u32'
+    },
+    /**
+     * Lookup541: pallet_forum::Error<T>
+     **/
+    PalletForumError: {
+        _enum: ['ArithmeticError', 'OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero', 'MaxNumberOfStickiedThreadsExceeded']
+    },
+    /**
+     * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+     **/
+    PalletConstitutionConstitutionInfo: {
+        textHash: 'H256'
+    },
+    /**
+     * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletBountyBountyRecord: {
+        creationParams: 'PalletBountyBountyParametersBoundedBTreeSet',
+        totalFunding: 'u128',
+        milestone: 'PalletBountyBountyMilestone',
+        activeWorkEntryCount: 'u32',
+        hasUnpaidOracleReward: 'bool'
+    },
+    /**
+     * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletBountyBountyParametersBoundedBTreeSet: {
+        oracle: 'PalletBountyBountyActor',
+        contractType: 'PalletBountyAssuranceContractTypeBoundedBTreeSet',
+        creator: 'PalletBountyBountyActor',
+        cherry: 'u128',
+        oracleReward: 'u128',
+        entrantStake: 'u128',
+        fundingType: 'PalletBountyFundingType'
+    },
+    /**
+     * Lookup546: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletBountyAssuranceContractTypeBoundedBTreeSet: {
+        _enum: {
+            Open: 'Null',
+            Closed: 'BTreeSet<u64>'
+        }
+    },
+    /**
+     * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
+     **/
+    PalletBountyBountyMilestone: {
+        _enum: {
+            Created: {
+                createdAt: 'u32',
+                hasContributions: 'bool',
+            },
+            BountyMaxFundingReached: 'Null',
+            WorkSubmitted: 'Null',
+            Terminated: 'Null',
+            JudgmentSubmitted: {
+                successfulBounty: 'bool'
+            }
+        }
+    },
+    /**
+     * Lookup549: pallet_bounty::Contribution<T>
+     **/
+    PalletBountyContribution: {
+        amount: 'u128',
+        funderStateBloatBondAmount: 'u128'
+    },
+    /**
+     * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     **/
+    PalletBountyEntryRecord: {
+        memberId: 'u64',
+        stakingAccountId: 'AccountId32',
+        submittedAt: 'u32',
+        workSubmitted: 'bool'
+    },
+    /**
+     * Lookup551: pallet_bounty::Error<T>
+     **/
+    PalletBountyError: {
+        _enum: ['ArithmeticError', 'MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
+    },
+    /**
+     * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletContentVideoRecord: {
+        inChannel: 'u64',
+        nftStatus: 'Option<PalletContentNftTypesOwnedNft>',
+        dataObjects: 'BTreeSet<u64>',
+        videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
+    },
+    /**
+     * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+     **/
+    PalletContentNftTypesOwnedNft: {
+        owner: 'PalletContentNftTypesNftOwner',
+        transactionalStatus: 'PalletContentNftTypesTransactionalStatusRecord',
+        creatorRoyalty: 'Option<Perbill>',
+        openAuctionsNonce: 'u64'
+    },
+    /**
+     * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+     **/
+    PalletContentNftTypesTransactionalStatusRecord: {
+        _enum: {
+            Idle: 'Null',
+            InitiatedOfferToMember: '(u64,Option<u128>)',
+            EnglishAuction: 'PalletContentNftTypesEnglishAuctionRecord',
+            OpenAuction: 'PalletContentNftTypesOpenAuctionRecord',
+            BuyNow: 'u128'
+        }
+    },
+    /**
+     * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletContentNftTypesEnglishAuctionRecord: {
+        startingPrice: 'u128',
+        buyNowPrice: 'Option<u128>',
+        whitelist: 'BTreeSet<u64>',
+        end: 'u32',
+        start: 'u32',
+        extensionPeriod: 'u32',
+        minBidStep: 'u128',
+        topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
+    },
+    /**
+     * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     **/
+    PalletContentNftTypesEnglishAuctionBid: {
+        amount: 'u128',
+        bidderId: 'u64'
+    },
+    /**
+     * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletContentNftTypesOpenAuctionRecord: {
+        startingPrice: 'u128',
+        buyNowPrice: 'Option<u128>',
+        whitelist: 'BTreeSet<u64>',
+        bidLockDuration: 'u32',
+        auctionId: 'u64',
+        start: 'u32'
+    },
+    /**
+     * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
+     **/
+    PalletContentNftTypesNftOwner: {
+        _enum: {
+            ChannelOwner: 'Null',
+            Member: 'u64'
+        }
+    },
+    /**
+     * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+     **/
+    PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
+        curators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+        active: 'bool',
+        permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>'
+    },
+    /**
+     * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     **/
+    PalletContentNftTypesOpenAuctionBidRecord: {
+        amount: 'u128',
+        madeAtBlock: 'u32',
+        auctionId: 'u64'
+    },
+    /**
+     * Lookup572: pallet_content::errors::Error<T>
+     **/
+    PalletContentErrorsError: {
+        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales', 'ChannelTransfersBlockedDuringActiveAmm']
+    },
+    /**
+     * Lookup573: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+     **/
+    PalletStorageBagRecord: {
+        storedBy: 'BTreeSet<u64>',
+        distributedBy: 'BTreeSet<PalletStorageDistributionBucketIdRecord>',
+        objectsTotalSize: 'u64',
+        objectsNumber: 'u64'
+    },
+    /**
+     * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     **/
+    PalletStorageStorageBucketRecord: {
+        operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
+        acceptingNewBags: 'bool',
+        voucher: 'PalletStorageVoucher',
+        assignedBags: 'u64'
+    },
+    /**
+     * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     **/
+    PalletStorageStorageBucketOperatorStatus: {
+        _enum: {
+            Missing: 'Null',
+            InvitedStorageWorker: 'u64',
+            StorageWorker: '(u64,AccountId32)'
+        }
+    },
+    /**
+     * Lookup579: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+     **/
+    PalletStorageDynamicBagCreationPolicy: {
+        numberOfStorageBuckets: 'u32',
+        families: 'BTreeMap<u64, u32>'
+    },
+    /**
+     * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletStorageDataObject: {
+        _alias: {
+            size_: 'size'
+        },
+        accepted: 'bool',
+        stateBloatBond: 'PalletCommonBloatBondRepayableBloatBond',
+        size_: 'u64',
+        ipfsContentId: 'Bytes'
+    },
+    /**
+     * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     **/
+    PalletStorageDistributionBucketFamilyRecord: {
+        nextDistributionBucketIndex: 'u64'
+    },
+    /**
+     * Lookup584: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletStorageDistributionBucketRecord: {
+        acceptingNewBags: 'bool',
+        distributing: 'bool',
+        pendingInvitations: 'BTreeSet<u64>',
+        operators: 'BTreeSet<u64>',
+        assignedBags: 'u64'
+    },
+    /**
+     * Lookup587: pallet_storage::Error<T>
+     **/
+    PalletStorageError: {
+        _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'MaxNumberOfOperatorsPerDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
+    },
+    /**
+     * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+     **/
+    PalletProjectTokenAccountData: {
+        vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
+        amount: 'u128',
+        splitStakingStatus: 'Option<PalletProjectTokenStakingStatus>',
+        bloatBond: 'PalletCommonBloatBondRepayableBloatBond',
+        nextVestingTransferId: 'u64',
+        lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
+    },
+    /**
+     * Lookup589: pallet_project_token::types::StakingStatus<Balance>
+     **/
+    PalletProjectTokenStakingStatus: {
+        splitId: 'u32',
+        amount: 'u128'
+    },
+    /**
+     * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     **/
+    PalletProjectTokenVestingSchedule: {
+        linearVestingStartBlock: 'u32',
+        linearVestingDuration: 'u32',
+        cliffAmount: 'u128',
+        postCliffTotalAmount: 'u128',
+        burnedAmount: 'u128'
+    },
+    /**
+     * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     **/
+    PalletProjectTokenTokenData: {
+        totalSupply: 'u128',
+        tokensIssued: 'u128',
+        nextSaleId: 'u32',
+        sale: 'Option<PalletProjectTokenTokenSale>',
+        transferPolicy: 'PalletProjectTokenTransferPolicy',
+        symbol: 'H256',
+        patronageInfo: 'PalletProjectTokenPatronageData',
+        accountsNumber: 'u64',
+        revenueSplitRate: 'Permill',
+        revenueSplit: 'PalletProjectTokenRevenueSplitState',
+        nextRevenueSplitId: 'u32',
+        ammCurve: 'Option<PalletProjectTokenAmmCurve>'
+    },
+    /**
+     * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     **/
+    PalletProjectTokenRevenueSplitState: {
+        _enum: {
+            Inactive: 'Null',
+            Active: 'PalletProjectTokenRevenueSplitInfo'
+        }
+    },
+    /**
+     * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     **/
+    PalletProjectTokenRevenueSplitInfo: {
+        allocation: 'u128',
+        timeline: 'PalletProjectTokenTimeline',
+        dividendsClaimed: 'u128'
+    },
+    /**
+     * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
+     **/
+    PalletProjectTokenTimeline: {
+        start: 'u32',
+        duration: 'u32'
+    },
+    /**
+     * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     **/
+    PalletProjectTokenPatronageData: {
+        rate: 'Permill',
+        unclaimedPatronageTallyAmount: 'u128',
+        lastUnclaimedPatronageTallyBlock: 'u32'
+    },
+    /**
+     * Lookup605: pallet_project_token::errors::Error<T>
+     **/
+    PalletProjectTokenErrorsError: {
+        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'TransferDestinationMemberDoesNotExist', 'MerkleProofVerificationFailure', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TooManyTransferOutputs', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'CannotInitSaleIfAmmIsActive', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount', 'NotInAmmState', 'InvalidCurveParameters', 'DeadlineExpired', 'SlippageToleranceExceeded', 'InsufficientTokenBalance', 'OutstandingAmmProvidedSupplyTooLarge', 'CurveSlopeParametersTooLow', 'TargetPatronageRateIsHigherThanCurrentRate', 'YearlyPatronageRateLimitExceeded']
+    },
+    /**
+     * Lookup606: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletProposalsEngineProposal: {
+        parameters: 'PalletProposalsEngineProposalParameters',
+        proposerId: 'u64',
+        activatedAt: 'u32',
+        status: 'PalletProposalsEngineProposalStatusesProposalStatus',
+        votingResults: 'PalletProposalsEngineVotingResults',
+        exactExecutionBlock: 'Option<u32>',
+        nrOfCouncilConfirmations: 'u32',
+        stakingAccountId: 'Option<AccountId32>'
+    },
+    /**
+     * Lookup607: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     **/
+    PalletProposalsEngineProposalParameters: {
+        votingPeriod: 'u32',
+        gracePeriod: 'u32',
+        approvalQuorumPercentage: 'u32',
+        approvalThresholdPercentage: 'u32',
+        slashingQuorumPercentage: 'u32',
+        slashingThresholdPercentage: 'u32',
+        requiredStake: 'Option<u128>',
+        constitutionality: 'u32'
+    },
+    /**
+     * Lookup608: pallet_proposals_engine::types::VotingResults
+     **/
+    PalletProposalsEngineVotingResults: {
+        abstentions: 'u32',
+        approvals: 'u32',
+        rejections: 'u32',
+        slashes: 'u32'
+    },
+    /**
+     * Lookup611: pallet_proposals_engine::Error<T>
+     **/
+    PalletProposalsEngineError: {
+        _enum: ['ArithmeticError', 'EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember', 'MaxDispatchableCallCodeSizeExceeded']
+    },
+    /**
+     * Lookup612: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletProposalsDiscussionDiscussionThread: {
+        activatedAt: 'u32',
+        authorId: 'u64',
+        mode: 'PalletProposalsDiscussionThreadModeBoundedBTreeSet'
+    },
+    /**
+     * Lookup614: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     **/
+    PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
+        _enum: {
+            Open: 'Null',
+            Closed: 'BTreeSet<u64>'
+        }
+    },
+    /**
+     * Lookup615: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     **/
+    PalletProposalsDiscussionDiscussionPost: {
+        authorId: 'u64',
+        cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+        lastEdited: 'u32'
+    },
+    /**
+     * Lookup616: pallet_proposals_discussion::Error<T>
+     **/
+    PalletProposalsDiscussionError: {
+        _enum: ['ArithmeticError', 'ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
+    },
+    /**
+     * Lookup617: pallet_proposals_codex::Error<T>
+     **/
+    PalletProposalsCodexError: {
+        _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError', 'MaxYearlyPatronageRateCannotBeZero']
+    },
+    /**
+     * Lookup618: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+     **/
+    PalletWorkingGroupOpening: {
+        openingType: 'PalletWorkingGroupOpeningType',
+        created: 'u32',
+        descriptionHash: 'H256',
+        stakePolicy: 'PalletWorkingGroupStakePolicy',
+        rewardPerBlock: 'Option<u128>',
+        creationStake: 'u128'
+    },
+    /**
+     * Lookup619: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+     **/
+    PalletWorkingGroupJobApplication: {
+        roleAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        stakingAccountId: 'AccountId32',
+        memberId: 'u64',
+        descriptionHash: 'H256',
+        openingId: 'u64'
+    },
+    /**
+     * Lookup620: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     **/
+    PalletWorkingGroupGroupWorker: {
+        memberId: 'u64',
+        roleAccountId: 'AccountId32',
+        stakingAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        startedLeavingAt: 'Option<u32>',
+        jobUnstakingPeriod: 'u32',
+        rewardPerBlock: 'Option<u128>',
+        missedReward: 'Option<u128>',
+        createdAt: 'u32'
+    },
+    /**
+     * Lookup621: pallet_working_group::errors::Error<T, I>
+     **/
+    PalletWorkingGroupErrorsError: {
+        _enum: ['ArithmeticError', 'StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
+    },
+    /**
+     * Lookup631: sp_runtime::MultiSignature
+     **/
+    SpRuntimeMultiSignature: {
+        _enum: {
+            Ed25519: 'SpCoreEd25519Signature',
+            Sr25519: 'SpCoreSr25519Signature',
+            Ecdsa: 'SpCoreEcdsaSignature'
+        }
+    },
+    /**
+     * Lookup632: sp_core::ecdsa::Signature
+     **/
+    SpCoreEcdsaSignature: '[u8;65]',
+    /**
+     * Lookup635: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     **/
+    FrameSystemExtensionsCheckNonZeroSender: 'Null',
+    /**
+     * Lookup636: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     **/
+    FrameSystemExtensionsCheckSpecVersion: 'Null',
+    /**
+     * Lookup637: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     **/
+    FrameSystemExtensionsCheckTxVersion: 'Null',
+    /**
+     * Lookup638: frame_system::extensions::check_genesis::CheckGenesis<T>
+     **/
+    FrameSystemExtensionsCheckGenesis: 'Null',
+    /**
+     * Lookup641: frame_system::extensions::check_nonce::CheckNonce<T>
+     **/
+    FrameSystemExtensionsCheckNonce: 'Compact<u32>',
+    /**
+     * Lookup642: frame_system::extensions::check_weight::CheckWeight<T>
+     **/
+    FrameSystemExtensionsCheckWeight: 'Null',
+    /**
+     * Lookup643: pallet_transaction_payment::ChargeTransactionPayment<T>
+     **/
+    PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
+    /**
+     * Lookup644: joystream_node_runtime::Runtime
+     **/
+    JoystreamNodeRuntimeRuntime: 'Null'
+};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/registry.js b/node_modules/@joystream/types/types/lib/mjs/augment/registry.js
new file mode 100644
index 0000000..e27d37b
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/registry.js
@@ -0,0 +1,3 @@
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+export {};
diff --git a/node_modules/@joystream/types/types/lib/mjs/augment/types-lookup.js b/node_modules/@joystream/types/types/lib/mjs/augment/types-lookup.js
new file mode 100644
index 0000000..217cf27
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/augment/types-lookup.js
@@ -0,0 +1,3 @@
+"use strict";
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
diff --git a/node_modules/@joystream/types/types/lib/mjs/index.js b/node_modules/@joystream/types/types/lib/mjs/index.js
new file mode 100644
index 0000000..15487b2
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/index.js
@@ -0,0 +1,21 @@
+import './augment/types-lookup';
+import './augment/registry';
+import './augment/augment-api';
+import { TypeRegistry, } from '@polkadot/types';
+import defs from './augment/lookup';
+export const registry = new TypeRegistry();
+registry.register(defs);
+export function createType(typeName, value) {
+    return registry.createType(typeName, value);
+}
+export function keysOf(typeName) {
+    return registry.createType(typeName).defKeys;
+}
+export async function entriesByIds(apiMethod) {
+    const entries = (await apiMethod.entries()).map(([storageKey, value]) => [
+        storageKey.args[0],
+        value,
+    ]);
+    return entries.sort((a, b) => a[0].toNumber() - b[0].toNumber());
+}
+export const JOYSTREAM_ADDRESS_PREFIX = 126;
diff --git a/node_modules/@joystream/types/types/lib/mjs/primitives.js b/node_modules/@joystream/types/types/lib/mjs/primitives.js
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/mjs/primitives.js
@@ -0,0 +1 @@
+export {};
diff --git a/node_modules/@joystream/types/types/lib/primitives.d.ts b/node_modules/@joystream/types/types/lib/primitives.d.ts
new file mode 100644
index 0000000..36e1fef
--- /dev/null
+++ b/node_modules/@joystream/types/types/lib/primitives.d.ts
@@ -0,0 +1,27 @@
+import { u8, u32, u64 } from '@polkadot/types';
+export declare type ForumCategoryId = u64;
+export declare type ForumThreadId = u64;
+export declare type ForumPostId = u64;
+export declare type ProposalId = u32;
+export declare type ProposalDiscussionThreadId = u64;
+export declare type ProposalDiscussionPostId = u64;
+export declare type DataObjectTypeId = u64;
+export declare type DataObjectId = u64;
+export declare type StorageBucketId = u64;
+export declare type DistributionBucketFamilyId = u64;
+export declare type DistributionBucketOperatorId = u64;
+export declare type DistributionBucketIndex = u64;
+export declare type MemberId = u64;
+export declare type ChannelId = u64;
+export declare type VideoId = u64;
+export declare type OpenAuctionId = u64;
+export declare type CuratorId = u64;
+export declare type CuratorGroupId = u64;
+export declare type CreatorTokenId = u64;
+export declare type CreatorTokenSaleId = u32;
+export declare type CreatorTokenRevenueSplitId = u32;
+export declare type ChannelPrivilegeLevel = u8;
+export declare type WorkerId = u64;
+export declare type ActorId = u64;
+export declare type OpeningId = u64;
+export declare type ApplicationId = u64;
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/madge b/node_modules/@joystream/types/types/node_modules/.bin/madge
new file mode 100755
index 0000000..27e7293
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/madge
@@ -0,0 +1,271 @@
+#!/usr/bin/env node
+'use strict';
+
+const path = require('path');
+const process = require('process');
+const program = require('commander');
+const rc = require('rc')('madge');
+const version = require('../package.json').version;
+const ora = require('ora');
+const chalk = require('chalk');
+const startTime = Date.now();
+
+program
+	.version(version)
+	.usage('[options] <src...>')
+	.option('-b, --basedir <path>', 'base directory for resolving paths')
+	.option('-s, --summary', 'show dependency count summary')
+	.option('-c, --circular', 'show circular dependencies')
+	.option('-d, --depends <name>', 'show module dependents')
+	.option('-x, --exclude <regexp>', 'exclude modules using RegExp')
+	.option('-j, --json', 'output as JSON')
+	.option('-i, --image <file>', 'write graph to file as an image')
+	.option('-l, --layout <name>', 'layout engine to use for graph (dot/neato/fdp/sfdp/twopi/circo)')
+	.option('--orphans', 'show modules that no one is depending on')
+	.option('--leaves', 'show modules that have no dependencies')
+	.option('--dot', 'show graph using the DOT language')
+	.option('--extensions <list>', 'comma separated string of valid file extensions')
+	.option('--require-config <file>', 'path to RequireJS config')
+	.option('--webpack-config <file>', 'path to webpack config')
+	.option('--ts-config <file>', 'path to typescript config')
+	.option('--include-npm', 'include shallow NPM modules', false)
+	.option('--no-color', 'disable color in output and image', false)
+	.option('--no-spinner', 'disable progress spinner', false)
+	.option('--stdin', 'read predefined tree from STDIN', false)
+	.option('--warning', 'show warnings about skipped files', false)
+	.option('--debug', 'turn on debug output', false)
+	.parse(process.argv);
+
+if (!program.args.length && !program.stdin) {
+	console.log(program.helpInformation());
+	process.exit(1);
+}
+
+if (program.debug) {
+	process.env.DEBUG = '*';
+}
+
+if (!program.color) {
+	process.env.DEBUG_COLORS = false;
+}
+
+const log = require('../lib/log');
+const output = require('../lib/output');
+const madge = require('../lib/api');
+
+let packageConfig = {};
+try {
+	packageConfig = require(path.join(process.cwd(), 'package.json')).madge;
+} catch (e) { }
+const config = Object.assign(rc, packageConfig);
+
+program.options.forEach((opt) => {
+	const name = opt.name();
+
+	if (program[name]) {
+		config[name] = program[name];
+	}
+});
+
+const spinner = ora({
+	text: 'Finding files',
+	color: 'white',
+	interval: 100000,
+	isEnabled: program.spinner
+});
+
+let exitCode = 0;
+
+delete config._;
+delete config.config;
+delete config.configs;
+
+if (rc.config) {
+	log('using runtime config %s', rc.config);
+}
+
+if (program.basedir) {
+	config.baseDir = program.basedir;
+}
+
+if (program.exclude) {
+	config.excludeRegExp = [program.exclude];
+}
+
+if (program.extensions) {
+	config.fileExtensions = program.extensions.split(',').map((s) => s.trim());
+}
+
+if (program.requireConfig) {
+	config.requireConfig = program.requireConfig;
+}
+
+if (program.webpackConfig) {
+	config.webpackConfig = program.webpackConfig;
+}
+
+if (program.tsConfig) {
+	config.tsConfig = program.tsConfig;
+}
+
+if (config.tsConfig) {
+	const ts = require('typescript');
+	const tsParsedConfig = ts.readJsonConfigFile(config.tsConfig, ts.sys.readFile);
+	const obj = ts.parseJsonSourceFileConfigFileContent(tsParsedConfig, ts.sys, path.dirname(config.tsConfig));
+	config.tsConfig = obj.raw;
+}
+
+if (program.includeNpm) {
+	config.includeNpm = program.includeNpm;
+}
+
+if (!program.color) {
+	config.backgroundColor = '#ffffff';
+	config.nodeColor = '#000000';
+	config.noDependencyColor = '#000000';
+	config.cyclicNodeColor = '#000000';
+	config.edgeColor = '#757575';
+}
+
+function dependencyFilter() {
+	let prevFile;
+
+	return (dependencyFilePath, traversedFilePath, baseDir) => {
+		if (prevFile !== traversedFilePath) {
+			const relPath = path.relative(baseDir, traversedFilePath);
+			const dir = path.dirname(relPath) + '/';
+			const file = path.basename(relPath);
+
+			if (program.spinner) {
+				spinner.text = chalk.grey(dir) + chalk.cyan(file);
+				spinner.render();
+			}
+			prevFile = traversedFilePath;
+		}
+	};
+}
+
+new Promise((resolve, reject) => {
+	if (program.stdin) {
+		let buffer = '';
+
+		process.stdin
+			.resume()
+			.setEncoding('utf8')
+			.on('data', (chunk) => {
+				buffer += chunk;
+			})
+			.on('end', () => {
+				try {
+					resolve(JSON.parse(buffer));
+				} catch (e) {
+					reject(e);
+				}
+			});
+	} else {
+		resolve(program.args);
+	}
+})
+	.then((src) => {
+		if (!program.json && !program.dot) {
+			spinner.start();
+			config.dependencyFilter = dependencyFilter();
+		}
+
+		return madge(src, config);
+	})
+	.then((res) => {
+		if (!program.json && !program.dot) {
+			spinner.stop();
+			output.getResultSummary(res, startTime);
+		}
+
+		const result = createOutputFromOptions(program, res);
+		if (result !== undefined) {
+			return result;
+		}
+
+		output.list(res.obj(), {
+			json: program.json
+		});
+
+		return res;
+	})
+	.then((res) => {
+		if (program.warning && !program.json) {
+			output.warnings(res);
+		}
+
+		if (!program.json && !program.dot) {
+			console.log('');
+		}
+
+		process.exit(exitCode);
+	})
+	.catch((err) => {
+		spinner.stop();
+		console.log('\n%s %s\n', chalk.red('✖'), err.stack);
+		process.exit(1);
+	});
+
+function createOutputFromOptions(program, res) {
+	if (program.summary) {
+		output.summary(res.obj(), {
+			json: program.json
+		});
+
+		return res;
+	}
+
+	if (program.depends) {
+		output.modules(res.depends(program.depends), {
+			json: program.json
+		});
+
+		return res;
+	}
+
+	if (program.orphans) {
+		output.modules(res.orphans(), {
+			json: program.json
+		});
+
+		return res;
+	}
+
+	if (program.leaves) {
+		output.modules(res.leaves(), {
+			json: program.json
+		});
+
+		return res;
+	}
+
+	if (program.image) {
+		return res.image(program.image, program.circular).then((imagePath) => {
+			spinner.succeed(`${chalk.bold('Image created at')} ${chalk.cyan.bold(imagePath)}`);
+			return res;
+		});
+	}
+
+	if (program.dot) {
+		return res.dot(program.circular).then((output) => {
+			process.stdout.write(output);
+			return res;
+		});
+	}
+
+	if (program.circular) {
+		const circular = res.circular();
+
+		output.circular(spinner, res, circular, {
+			json: program.json
+		});
+
+		if (circular.length) {
+			exitCode = 1;
+		}
+
+		return res;
+	}
+}
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-chain-info b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-chain-info
new file mode 100755
index 0000000..b3c71af
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-chain-info
@@ -0,0 +1,5 @@
+#!/usr/bin/env node
+// Copyright 2017-2022 @polkadot/typegen authors & contributors
+// SPDX-License-Identifier: Apache-2.0
+
+require('./execWithSrc.cjs')('extractChain');
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-from-chain b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-from-chain
new file mode 100755
index 0000000..40ac16e
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-from-chain
@@ -0,0 +1,5 @@
+#!/usr/bin/env node
+// Copyright 2017-2022 @polkadot/typegen authors & contributors
+// SPDX-License-Identifier: Apache-2.0
+
+require('./execWithSrc.cjs')('fromChain');
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-from-defs b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-from-defs
new file mode 100755
index 0000000..9b4d91c
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-from-defs
@@ -0,0 +1,5 @@
+#!/usr/bin/env node
+// Copyright 2017-2022 @polkadot/typegen authors & contributors
+// SPDX-License-Identifier: Apache-2.0
+
+require('./execWithSrc.cjs')('fromDefs');
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-internal-interfaces b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-internal-interfaces
new file mode 100755
index 0000000..9edd424
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-internal-interfaces
@@ -0,0 +1,5 @@
+#!/usr/bin/env node
+// Copyright 2017-2022 @polkadot/typegen authors & contributors
+// SPDX-License-Identifier: Apache-2.0
+
+require('./execWithSrc.cjs')('interfacesTs');
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-internal-metadata b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-internal-metadata
new file mode 100755
index 0000000..c7a187c
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/polkadot-types-internal-metadata
@@ -0,0 +1,5 @@
+#!/usr/bin/env node
+// Copyright 2017-2022 @polkadot/typegen authors & contributors
+// SPDX-License-Identifier: Apache-2.0
+
+require('./execWithSrc.cjs')('metadataMd');
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/ts-node b/node_modules/@joystream/types/types/node_modules/.bin/ts-node
new file mode 100755
index 0000000..0e6fe23
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/ts-node
@@ -0,0 +1,581 @@
+#!/usr/bin/env node
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.bootstrap = exports.main = void 0;
+const path_1 = require("path");
+const util_1 = require("util");
+const Module = require("module");
+let arg;
+const util_2 = require("./util");
+const repl_1 = require("./repl");
+const index_1 = require("./index");
+const node_internal_modules_cjs_helpers_1 = require("../dist-raw/node-internal-modules-cjs-helpers");
+const spawn_child_1 = require("./child/spawn-child");
+const configuration_1 = require("./configuration");
+/**
+ * Main `bin` functionality.
+ *
+ * This file is split into a chain of functions (phases), each one adding to a shared state object.
+ * This is done so that the next function can either be invoked in-process or, if necessary, invoked in a child process.
+ *
+ * The functions are intentionally given uncreative names and left in the same order as the original code, to make a
+ * smaller git diff.
+ */
+function main(argv = process.argv.slice(2), entrypointArgs = {}) {
+    const args = parseArgv(argv, entrypointArgs);
+    const state = {
+        shouldUseChildProcess: false,
+        isInChildProcess: false,
+        isCli: true,
+        tsNodeScript: __filename,
+        parseArgvResult: args,
+    };
+    return bootstrap(state);
+}
+exports.main = main;
+/** @internal */
+function bootstrap(state) {
+    if (!state.phase2Result) {
+        state.phase2Result = phase2(state);
+        if (state.shouldUseChildProcess && !state.isInChildProcess) {
+            // Note: When transitioning into the child-process after `phase2`,
+            // the updated working directory needs to be preserved.
+            return (0, spawn_child_1.callInChild)(state);
+        }
+    }
+    if (!state.phase3Result) {
+        state.phase3Result = phase3(state);
+        if (state.shouldUseChildProcess && !state.isInChildProcess) {
+            // Note: When transitioning into the child-process after `phase2`,
+            // the updated working directory needs to be preserved.
+            return (0, spawn_child_1.callInChild)(state);
+        }
+    }
+    return phase4(state);
+}
+exports.bootstrap = bootstrap;
+function parseArgv(argv, entrypointArgs) {
+    arg !== null && arg !== void 0 ? arg : (arg = require('arg'));
+    // HACK: technically, this function is not marked @internal so it's possible
+    // that libraries in the wild are doing `require('ts-node/dist/bin').main({'--transpile-only': true})`
+    // We can mark this function @internal in next major release.
+    // For now, rewrite args to avoid a breaking change.
+    entrypointArgs = { ...entrypointArgs };
+    for (const key of Object.keys(entrypointArgs)) {
+        entrypointArgs[key.replace(/([a-z])-([a-z])/g, (_$0, $1, $2) => `${$1}${$2.toUpperCase()}`)] = entrypointArgs[key];
+    }
+    const args = {
+        ...entrypointArgs,
+        ...arg({
+            // Node.js-like options.
+            '--eval': String,
+            '--interactive': Boolean,
+            '--print': Boolean,
+            '--require': [String],
+            // CLI options.
+            '--help': Boolean,
+            '--cwdMode': Boolean,
+            '--scriptMode': Boolean,
+            '--version': arg.COUNT,
+            '--showConfig': Boolean,
+            '--esm': Boolean,
+            // Project options.
+            '--cwd': String,
+            '--files': Boolean,
+            '--compiler': String,
+            '--compilerOptions': util_2.parse,
+            '--project': String,
+            '--ignoreDiagnostics': [String],
+            '--ignore': [String],
+            '--transpileOnly': Boolean,
+            '--transpiler': String,
+            '--swc': Boolean,
+            '--typeCheck': Boolean,
+            '--compilerHost': Boolean,
+            '--pretty': Boolean,
+            '--skipProject': Boolean,
+            '--skipIgnore': Boolean,
+            '--preferTsExts': Boolean,
+            '--logError': Boolean,
+            '--emit': Boolean,
+            '--scope': Boolean,
+            '--scopeDir': String,
+            '--noExperimentalReplAwait': Boolean,
+            '--experimentalSpecifierResolution': String,
+            // Aliases.
+            '-e': '--eval',
+            '-i': '--interactive',
+            '-p': '--print',
+            '-r': '--require',
+            '-h': '--help',
+            '-s': '--script-mode',
+            '-v': '--version',
+            '-T': '--transpileOnly',
+            '-H': '--compilerHost',
+            '-I': '--ignore',
+            '-P': '--project',
+            '-C': '--compiler',
+            '-D': '--ignoreDiagnostics',
+            '-O': '--compilerOptions',
+            '--dir': '--cwd',
+            // Support both tsc-style camelCase and node-style hypen-case for *all* flags
+            '--cwd-mode': '--cwdMode',
+            '--script-mode': '--scriptMode',
+            '--show-config': '--showConfig',
+            '--compiler-options': '--compilerOptions',
+            '--ignore-diagnostics': '--ignoreDiagnostics',
+            '--transpile-only': '--transpileOnly',
+            '--type-check': '--typeCheck',
+            '--compiler-host': '--compilerHost',
+            '--skip-project': '--skipProject',
+            '--skip-ignore': '--skipIgnore',
+            '--prefer-ts-exts': '--preferTsExts',
+            '--log-error': '--logError',
+            '--scope-dir': '--scopeDir',
+            '--no-experimental-repl-await': '--noExperimentalReplAwait',
+            '--experimental-specifier-resolution': '--experimentalSpecifierResolution',
+        }, {
+            argv,
+            stopAtPositional: true,
+        }),
+    };
+    // Only setting defaults for CLI-specific flags
+    // Anything passed to `register()` can be `undefined`; `create()` will apply
+    // defaults.
+    const { '--cwd': cwdArg, '--help': help = false, '--scriptMode': scriptMode, '--cwdMode': cwdMode, '--version': version = 0, '--showConfig': showConfig, '--require': argsRequire = [], '--eval': code = undefined, '--print': print = false, '--interactive': interactive = false, '--files': files, '--compiler': compiler, '--compilerOptions': compilerOptions, '--project': project, '--ignoreDiagnostics': ignoreDiagnostics, '--ignore': ignore, '--transpileOnly': transpileOnly, '--typeCheck': typeCheck, '--transpiler': transpiler, '--swc': swc, '--compilerHost': compilerHost, '--pretty': pretty, '--skipProject': skipProject, '--skipIgnore': skipIgnore, '--preferTsExts': preferTsExts, '--logError': logError, '--emit': emit, '--scope': scope = undefined, '--scopeDir': scopeDir = undefined, '--noExperimentalReplAwait': noExperimentalReplAwait, '--experimentalSpecifierResolution': experimentalSpecifierResolution, '--esm': esm, _: restArgs, } = args;
+    return {
+        // Note: argv and restArgs may be overwritten by child process
+        argv: process.argv,
+        restArgs,
+        cwdArg,
+        help,
+        scriptMode,
+        cwdMode,
+        version,
+        showConfig,
+        argsRequire,
+        code,
+        print,
+        interactive,
+        files,
+        compiler,
+        compilerOptions,
+        project,
+        ignoreDiagnostics,
+        ignore,
+        transpileOnly,
+        typeCheck,
+        transpiler,
+        swc,
+        compilerHost,
+        pretty,
+        skipProject,
+        skipIgnore,
+        preferTsExts,
+        logError,
+        emit,
+        scope,
+        scopeDir,
+        noExperimentalReplAwait,
+        experimentalSpecifierResolution,
+        esm,
+    };
+}
+function phase2(payload) {
+    const { help, version, cwdArg, esm } = payload.parseArgvResult;
+    if (help) {
+        console.log(`
+Usage: ts-node [options] [ -e script | script.ts ] [arguments]
+
+Options:
+
+  -e, --eval [code]               Evaluate code
+  -p, --print                     Print result of \`--eval\`
+  -r, --require [path]            Require a node module before execution
+  -i, --interactive               Opens the REPL even if stdin does not appear to be a terminal
+
+  --esm                           Bootstrap with the ESM loader, enabling full ESM support
+  --swc                           Use the faster swc transpiler
+
+  -h, --help                      Print CLI usage
+  -v, --version                   Print module version information.  -vvv to print additional information
+  --showConfig                    Print resolved configuration and exit
+
+  -T, --transpileOnly             Use TypeScript's faster \`transpileModule\` or a third-party transpiler
+  -H, --compilerHost              Use TypeScript's compiler host API
+  -I, --ignore [pattern]          Override the path patterns to skip compilation
+  -P, --project [path]            Path to TypeScript JSON project file
+  -C, --compiler [name]           Specify a custom TypeScript compiler
+  --transpiler [name]             Specify a third-party, non-typechecking transpiler
+  -D, --ignoreDiagnostics [code]  Ignore TypeScript warnings by diagnostic code
+  -O, --compilerOptions [opts]    JSON object to merge with compiler options
+
+  --cwd                           Behave as if invoked within this working directory.
+  --files                         Load \`files\`, \`include\` and \`exclude\` from \`tsconfig.json\` on startup
+  --pretty                        Use pretty diagnostic formatter (usually enabled by default)
+  --cwdMode                       Use current directory instead of <script.ts> for config resolution
+  --skipProject                   Skip reading \`tsconfig.json\`
+  --skipIgnore                    Skip \`--ignore\` checks
+  --emit                          Emit output files into \`.ts-node\` directory
+  --scope                         Scope compiler to files within \`scopeDir\`.  Anything outside this directory is ignored.
+  --scopeDir                      Directory for \`--scope\`
+  --preferTsExts                  Prefer importing TypeScript files over JavaScript files
+  --logError                      Logs TypeScript errors to stderr instead of throwing exceptions
+  --noExperimentalReplAwait       Disable top-level await in REPL.  Equivalent to node's --no-experimental-repl-await
+  --experimentalSpecifierResolution [node|explicit]
+                                  Equivalent to node's --experimental-specifier-resolution
+`);
+        process.exit(0);
+    }
+    // Output project information.
+    if (version === 1) {
+        console.log(`v${index_1.VERSION}`);
+        process.exit(0);
+    }
+    const cwd = cwdArg ? (0, path_1.resolve)(cwdArg) : process.cwd();
+    // If ESM is explicitly enabled through the flag, stage3 should be run in a child process
+    // with the ESM loaders configured.
+    if (esm)
+        payload.shouldUseChildProcess = true;
+    return {
+        cwd,
+    };
+}
+function phase3(payload) {
+    const { emit, files, pretty, transpileOnly, transpiler, noExperimentalReplAwait, typeCheck, swc, compilerHost, ignore, preferTsExts, logError, scriptMode, cwdMode, project, skipProject, skipIgnore, compiler, ignoreDiagnostics, compilerOptions, argsRequire, scope, scopeDir, esm, experimentalSpecifierResolution, } = payload.parseArgvResult;
+    const { cwd } = payload.phase2Result;
+    // NOTE: When we transition to a child process for ESM, the entry-point script determined
+    // here might not be the one used later in `phase4`. This can happen when we execute the
+    // original entry-point but then the process forks itself using e.g. `child_process.fork`.
+    // We will always use the original TS project in forked processes anyway, so it is
+    // expected and acceptable to retrieve the entry-point information here in `phase2`.
+    // See: https://github.com/TypeStrong/ts-node/issues/1812.
+    const { entryPointPath } = getEntryPointInfo(payload);
+    const preloadedConfig = (0, configuration_1.findAndReadConfig)({
+        cwd,
+        emit,
+        files,
+        pretty,
+        transpileOnly: (transpileOnly !== null && transpileOnly !== void 0 ? transpileOnly : transpiler != null) ? true : undefined,
+        experimentalReplAwait: noExperimentalReplAwait ? false : undefined,
+        typeCheck,
+        transpiler,
+        swc,
+        compilerHost,
+        ignore,
+        logError,
+        projectSearchDir: getProjectSearchDir(cwd, scriptMode, cwdMode, entryPointPath),
+        project,
+        skipProject,
+        skipIgnore,
+        compiler,
+        ignoreDiagnostics,
+        compilerOptions,
+        require: argsRequire,
+        scope,
+        scopeDir,
+        preferTsExts,
+        esm,
+        experimentalSpecifierResolution: experimentalSpecifierResolution,
+    });
+    // If ESM is enabled through the parsed tsconfig, stage4 should be run in a child
+    // process with the ESM loaders configured.
+    if (preloadedConfig.options.esm)
+        payload.shouldUseChildProcess = true;
+    return { preloadedConfig };
+}
+/**
+ * Determines the entry-point information from the argv and phase2 result. This
+ * method will be invoked in two places:
+ *
+ *   1. In phase 3 to be able to find a project from the potential entry-point script.
+ *   2. In phase 4 to determine the actual entry-point script.
+ *
+ * Note that we need to explicitly re-resolve the entry-point information in the final
+ * stage because the previous stage information could be modified when the bootstrap
+ * invocation transitioned into a child process for ESM.
+ *
+ * Stages before (phase 4) can and will be cached by the child process through the Brotli
+ * configuration and entry-point information is only reliable in the final phase. More
+ * details can be found in here: https://github.com/TypeStrong/ts-node/issues/1812.
+ */
+function getEntryPointInfo(state) {
+    const { code, interactive, restArgs } = state.parseArgvResult;
+    const { cwd } = state.phase2Result;
+    const { isCli } = state;
+    // Figure out which we are executing: piped stdin, --eval, REPL, and/or entrypoint
+    // This is complicated because node's behavior is complicated
+    // `node -e code -i ./script.js` ignores -e
+    const executeEval = code != null && !(interactive && restArgs.length);
+    const executeEntrypoint = !executeEval && restArgs.length > 0;
+    const executeRepl = !executeEntrypoint &&
+        (interactive || (process.stdin.isTTY && !executeEval));
+    const executeStdin = !executeEval && !executeRepl && !executeEntrypoint;
+    /**
+     * Unresolved. May point to a symlink, not realpath. May be missing file extension
+     * NOTE: resolution relative to cwd option (not `process.cwd()`) is legacy backwards-compat; should be changed in next major: https://github.com/TypeStrong/ts-node/issues/1834
+     */
+    const entryPointPath = executeEntrypoint
+        ? isCli
+            ? (0, path_1.resolve)(cwd, restArgs[0])
+            : (0, path_1.resolve)(restArgs[0])
+        : undefined;
+    return {
+        executeEval,
+        executeEntrypoint,
+        executeRepl,
+        executeStdin,
+        entryPointPath,
+    };
+}
+function phase4(payload) {
+    var _a, _b, _c, _d, _e, _f, _g;
+    const { isInChildProcess, tsNodeScript } = payload;
+    const { version, showConfig, restArgs, code, print, argv } = payload.parseArgvResult;
+    const { cwd } = payload.phase2Result;
+    const { preloadedConfig } = payload.phase3Result;
+    const { entryPointPath, executeEntrypoint, executeEval, executeRepl, executeStdin, } = getEntryPointInfo(payload);
+    let evalStuff;
+    let replStuff;
+    let stdinStuff;
+    let evalAwarePartialHost = undefined;
+    if (executeEval) {
+        const state = new repl_1.EvalState((0, path_1.join)(cwd, repl_1.EVAL_FILENAME));
+        evalStuff = {
+            state,
+            repl: (0, repl_1.createRepl)({
+                state,
+                composeWithEvalAwarePartialHost: evalAwarePartialHost,
+                ignoreDiagnosticsThatAreAnnoyingInInteractiveRepl: false,
+            }),
+        };
+        ({ evalAwarePartialHost } = evalStuff.repl);
+        // Create a local module instance based on `cwd`.
+        const module = (evalStuff.module = new Module(repl_1.EVAL_NAME));
+        module.filename = evalStuff.state.path;
+        module.paths = Module._nodeModulePaths(cwd);
+    }
+    if (executeStdin) {
+        const state = new repl_1.EvalState((0, path_1.join)(cwd, repl_1.STDIN_FILENAME));
+        stdinStuff = {
+            state,
+            repl: (0, repl_1.createRepl)({
+                state,
+                composeWithEvalAwarePartialHost: evalAwarePartialHost,
+                ignoreDiagnosticsThatAreAnnoyingInInteractiveRepl: false,
+            }),
+        };
+        ({ evalAwarePartialHost } = stdinStuff.repl);
+        // Create a local module instance based on `cwd`.
+        const module = (stdinStuff.module = new Module(repl_1.STDIN_NAME));
+        module.filename = stdinStuff.state.path;
+        module.paths = Module._nodeModulePaths(cwd);
+    }
+    if (executeRepl) {
+        const state = new repl_1.EvalState((0, path_1.join)(cwd, repl_1.REPL_FILENAME));
+        replStuff = {
+            state,
+            repl: (0, repl_1.createRepl)({
+                state,
+                composeWithEvalAwarePartialHost: evalAwarePartialHost,
+            }),
+        };
+        ({ evalAwarePartialHost } = replStuff.repl);
+    }
+    // Register the TypeScript compiler instance.
+    const service = (0, index_1.createFromPreloadedConfig)({
+        // Since this struct may have been marshalled across thread or process boundaries, we must restore
+        // un-marshall-able values.
+        ...preloadedConfig,
+        options: {
+            ...preloadedConfig.options,
+            readFile: (_a = evalAwarePartialHost === null || evalAwarePartialHost === void 0 ? void 0 : evalAwarePartialHost.readFile) !== null && _a !== void 0 ? _a : undefined,
+            fileExists: (_b = evalAwarePartialHost === null || evalAwarePartialHost === void 0 ? void 0 : evalAwarePartialHost.fileExists) !== null && _b !== void 0 ? _b : undefined,
+            tsTrace: index_1.DEFAULTS.tsTrace,
+        },
+    });
+    (0, index_1.register)(service);
+    if (isInChildProcess)
+        require('./child/child-loader').lateBindHooks((0, index_1.createEsmHooks)(service));
+    // Bind REPL service to ts-node compiler service (chicken-and-egg problem)
+    replStuff === null || replStuff === void 0 ? void 0 : replStuff.repl.setService(service);
+    evalStuff === null || evalStuff === void 0 ? void 0 : evalStuff.repl.setService(service);
+    stdinStuff === null || stdinStuff === void 0 ? void 0 : stdinStuff.repl.setService(service);
+    // Output project information.
+    if (version === 2) {
+        console.log(`ts-node v${index_1.VERSION}`);
+        console.log(`node ${process.version}`);
+        console.log(`compiler v${service.ts.version}`);
+        process.exit(0);
+    }
+    if (version >= 3) {
+        console.log(`ts-node v${index_1.VERSION} ${(0, path_1.dirname)(__dirname)}`);
+        console.log(`node ${process.version}`);
+        console.log(`compiler v${service.ts.version} ${(_c = service.compilerPath) !== null && _c !== void 0 ? _c : ''}`);
+        process.exit(0);
+    }
+    if (showConfig) {
+        const ts = service.ts;
+        if (typeof ts.convertToTSConfig !== 'function') {
+            console.error('Error: --showConfig requires a typescript versions >=3.2 that support --showConfig');
+            process.exit(1);
+        }
+        let moduleTypes = undefined;
+        if (service.options.moduleTypes) {
+            // Assumption: this codepath requires CLI invocation, so moduleTypes must have come from a tsconfig, not API.
+            const showRelativeTo = (0, path_1.dirname)(service.configFilePath);
+            moduleTypes = {};
+            for (const [key, value] of Object.entries(service.options.moduleTypes)) {
+                moduleTypes[(0, path_1.relative)(showRelativeTo, (0, path_1.resolve)((_d = service.options.optionBasePaths) === null || _d === void 0 ? void 0 : _d.moduleTypes, key))] = value;
+            }
+        }
+        const json = {
+            ['ts-node']: {
+                ...service.options,
+                require: ((_e = service.options.require) === null || _e === void 0 ? void 0 : _e.length)
+                    ? service.options.require
+                    : undefined,
+                moduleTypes,
+                optionBasePaths: undefined,
+                compilerOptions: undefined,
+                project: (_f = service.configFilePath) !== null && _f !== void 0 ? _f : service.options.project,
+            },
+            ...ts.convertToTSConfig(service.config, (_g = service.configFilePath) !== null && _g !== void 0 ? _g : (0, path_1.join)(cwd, 'ts-node-implicit-tsconfig.json'), service.ts.sys),
+        };
+        console.log(
+        // Assumes that all configuration options which can possibly be specified via the CLI are JSON-compatible.
+        // If, in the future, we must log functions, for example readFile and fileExists, then we can implement a JSON
+        // replacer function.
+        JSON.stringify(json, null, 2));
+        process.exit(0);
+    }
+    // Prepend `ts-node` arguments to CLI for child processes.
+    process.execArgv.push(tsNodeScript, ...argv.slice(2, argv.length - restArgs.length));
+    // TODO this comes from BootstrapState
+    process.argv = [process.argv[1]]
+        .concat(executeEntrypoint ? [entryPointPath] : [])
+        .concat(restArgs.slice(executeEntrypoint ? 1 : 0));
+    // Execute the main contents (either eval, script or piped).
+    if (executeEntrypoint) {
+        if (payload.isInChildProcess &&
+            (0, util_2.versionGteLt)(process.versions.node, '18.6.0')) {
+            // HACK workaround node regression
+            require('../dist-raw/runmain-hack.js').run(entryPointPath);
+        }
+        else {
+            Module.runMain();
+        }
+    }
+    else {
+        // Note: eval and repl may both run, but never with stdin.
+        // If stdin runs, eval and repl will not.
+        if (executeEval) {
+            (0, node_internal_modules_cjs_helpers_1.addBuiltinLibsToObject)(global);
+            evalAndExitOnTsError(evalStuff.repl, evalStuff.module, code, print, 'eval');
+        }
+        if (executeRepl) {
+            replStuff.repl.start();
+        }
+        if (executeStdin) {
+            let buffer = code || '';
+            process.stdin.on('data', (chunk) => (buffer += chunk));
+            process.stdin.on('end', () => {
+                evalAndExitOnTsError(stdinStuff.repl, stdinStuff.module, buffer, 
+                // `echo 123 | node -p` still prints 123
+                print, 'stdin');
+            });
+        }
+    }
+}
+/**
+ * Get project search path from args.
+ */
+function getProjectSearchDir(cwd, scriptMode, cwdMode, scriptPath) {
+    // Validate `--script-mode` / `--cwd-mode` / `--cwd` usage is correct.
+    if (scriptMode && cwdMode) {
+        throw new TypeError('--cwd-mode cannot be combined with --script-mode');
+    }
+    if (scriptMode && !scriptPath) {
+        throw new TypeError('--script-mode must be used with a script name, e.g. `ts-node --script-mode <script.ts>`');
+    }
+    const doScriptMode = scriptMode === true ? true : cwdMode === true ? false : !!scriptPath;
+    if (doScriptMode) {
+        // Use node's own resolution behavior to ensure we follow symlinks.
+        // scriptPath may omit file extension or point to a directory with or without package.json.
+        // This happens before we are registered, so we tell node's resolver to consider ts, tsx, and jsx files.
+        // In extremely rare cases, is is technically possible to resolve the wrong directory,
+        // because we do not yet know preferTsExts, jsx, nor allowJs.
+        // See also, justification why this will not happen in real-world situations:
+        // https://github.com/TypeStrong/ts-node/pull/1009#issuecomment-613017081
+        const exts = ['.js', '.jsx', '.ts', '.tsx'];
+        const extsTemporarilyInstalled = [];
+        for (const ext of exts) {
+            if (!(0, util_2.hasOwnProperty)(require.extensions, ext)) {
+                extsTemporarilyInstalled.push(ext);
+                require.extensions[ext] = function () { };
+            }
+        }
+        try {
+            return (0, path_1.dirname)(requireResolveNonCached(scriptPath));
+        }
+        finally {
+            for (const ext of extsTemporarilyInstalled) {
+                delete require.extensions[ext];
+            }
+        }
+    }
+    return cwd;
+}
+const guaranteedNonexistentDirectoryPrefix = (0, path_1.resolve)(__dirname, 'doesnotexist');
+let guaranteedNonexistentDirectorySuffix = 0;
+/**
+ * require.resolve an absolute path, tricking node into *not* caching the results.
+ * Necessary so that we do not pollute require.resolve cache prior to installing require.extensions
+ *
+ * Is a terrible hack, because node does not expose the necessary cache invalidation APIs
+ * https://stackoverflow.com/questions/59865584/how-to-invalidate-cached-require-resolve-results
+ */
+function requireResolveNonCached(absoluteModuleSpecifier) {
+    // node <= 12.1.x fallback: The trick below triggers a node bug on old versions.
+    // On these old versions, pollute the require cache instead. This is a deliberate
+    // ts-node limitation that will *rarely* manifest, and will not matter once node 12
+    // is end-of-life'd on 2022-04-30
+    const isSupportedNodeVersion = (0, util_2.versionGteLt)(process.versions.node, '12.2.0');
+    if (!isSupportedNodeVersion)
+        return require.resolve(absoluteModuleSpecifier);
+    const { dir, base } = (0, path_1.parse)(absoluteModuleSpecifier);
+    const relativeModuleSpecifier = `./${base}`;
+    const req = (0, util_2.createRequire)((0, path_1.join)(dir, 'imaginaryUncacheableRequireResolveScript'));
+    return req.resolve(relativeModuleSpecifier, {
+        paths: [
+            `${guaranteedNonexistentDirectoryPrefix}${guaranteedNonexistentDirectorySuffix++}`,
+            ...(req.resolve.paths(relativeModuleSpecifier) || []),
+        ],
+    });
+}
+/**
+ * Evaluate an [eval] or [stdin] script
+ */
+function evalAndExitOnTsError(replService, module, code, isPrinted, filenameAndDirname) {
+    let result;
+    (0, repl_1.setupContext)(global, module, filenameAndDirname);
+    try {
+        result = replService.evalCode(code);
+    }
+    catch (error) {
+        if (error instanceof index_1.TSError) {
+            console.error(error);
+            process.exit(1);
+        }
+        throw error;
+    }
+    if (isPrinted) {
+        console.log(typeof result === 'string'
+            ? result
+            : (0, util_1.inspect)(result, { colors: process.stdout.isTTY }));
+    }
+}
+if (require.main === module) {
+    main();
+}
+//# sourceMappingURL=bin.js.map
\ No newline at end of file
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/ts-node-cwd b/node_modules/@joystream/types/types/node_modules/.bin/ts-node-cwd
new file mode 100755
index 0000000..dc241b6
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/ts-node-cwd
@@ -0,0 +1,6 @@
+#!/usr/bin/env node
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const bin_1 = require("./bin");
+(0, bin_1.main)(undefined, { '--cwdMode': true });
+//# sourceMappingURL=bin-cwd.js.map
\ No newline at end of file
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/ts-node-esm b/node_modules/@joystream/types/types/node_modules/.bin/ts-node-esm
new file mode 100755
index 0000000..3c7a778
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/ts-node-esm
@@ -0,0 +1,6 @@
+#!/usr/bin/env node
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const bin_1 = require("./bin");
+(0, bin_1.main)(undefined, { '--esm': true });
+//# sourceMappingURL=bin-esm.js.map
\ No newline at end of file
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/ts-node-script b/node_modules/@joystream/types/types/node_modules/.bin/ts-node-script
new file mode 100755
index 0000000..3a9c821
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/ts-node-script
@@ -0,0 +1,6 @@
+#!/usr/bin/env node
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const bin_1 = require("./bin");
+(0, bin_1.main)(undefined, { '--scriptMode': true });
+//# sourceMappingURL=bin-script.js.map
\ No newline at end of file
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/ts-node-transpile-only b/node_modules/@joystream/types/types/node_modules/.bin/ts-node-transpile-only
new file mode 100755
index 0000000..7bcdc38
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/ts-node-transpile-only
@@ -0,0 +1,6 @@
+#!/usr/bin/env node
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const bin_1 = require("./bin");
+(0, bin_1.main)(undefined, { '--transpileOnly': true });
+//# sourceMappingURL=bin-transpile.js.map
\ No newline at end of file
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/ts-script b/node_modules/@joystream/types/types/node_modules/.bin/ts-script
new file mode 100755
index 0000000..94029dc
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/ts-script
@@ -0,0 +1,7 @@
+#!/usr/bin/env node
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const bin_1 = require("./bin");
+console.warn('ts-script has been deprecated and will be removed in the next major release.', 'Please use ts-node-script instead');
+(0, bin_1.main)(undefined, { '--scriptMode': true });
+//# sourceMappingURL=bin-script-deprecated.js.map
\ No newline at end of file
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/tsc b/node_modules/@joystream/types/types/node_modules/.bin/tsc
new file mode 100755
index 0000000..19c62bf
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/tsc
@@ -0,0 +1,2 @@
+#!/usr/bin/env node
+require('../lib/tsc.js')
diff --git a/node_modules/@joystream/types/types/node_modules/.bin/tsserver b/node_modules/@joystream/types/types/node_modules/.bin/tsserver
new file mode 100755
index 0000000..7143b6a
--- /dev/null
+++ b/node_modules/@joystream/types/types/node_modules/.bin/tsserver
@@ -0,0 +1,2 @@
+#!/usr/bin/env node
+require('../lib/tsserver.js')
diff --git a/node_modules/@joystream/types/types/package.json b/node_modules/@joystream/types/types/package.json
new file mode 100644
index 0000000..2bd22fb
--- /dev/null
+++ b/node_modules/@joystream/types/types/package.json
@@ -0,0 +1,80 @@
+{
+  "name": "@joystream/types",
+  "version": "2.1.0",
+  "description": "Types for Joystream Substrate Runtime - Carthage release",
+  "main": "lib/cjs/index.js",
+  "types": "lib/index.d.ts",
+  "exports": {
+    ".": {
+      "import": "./lib/mjs/index.js",
+      "require": "./lib/cjs/index.js"
+    }
+  },
+  "typesVersions": {
+    "*": {
+      ".": [
+        "lib/index.d.ts"
+      ],
+      "primitives": [
+        "lib/primitives.d.ts"
+      ]
+    }
+  },
+  "scripts": {
+    "prepublishOnly": "yarn clean && yarn build",
+    "prepack": "yarn clean && yarn build",
+    "compile": "tsc --project tsconfig.esm.json && tsc --project tsconfig.cjs.json",
+    "clean": "git clean -xdf -e node_modules",
+    "build": "yarn generate:all && yarn compile",
+    "lint": "eslint ./ --ext .ts",
+    "format": "prettier ./ --write",
+    "checks": "yarn build && madge --circular ./ && prettier ./ --check && yarn lint",
+    "generate:interfaces": "yarn ts-node node_modules/.bin/polkadot-types-from-defs --package . --input ./src/augment --endpoint ../chain-metadata.json && rm ./src/augment/index.ts ./src/augment/types.ts",
+    "generate:meta": "yarn ts-node node_modules/.bin/polkadot-types-from-chain --package . --endpoint ../chain-metadata.json --output ./src/augment --strict",
+    "generate:all": "yarn generate:interfaces && yarn generate:meta"
+  },
+  "author": "Joystream contributors",
+  "maintainers": [],
+  "dependencies": {
+    "@polkadot/api": "8.9.1",
+    "@polkadot/types": "8.9.1",
+    "@polkadot/keyring": "9.5.1",
+    "@types/lodash": "^4.14.157",
+    "@types/vfile": "^4.0.0",
+    "ajv": "^6.11.0",
+    "lodash": "^4.17.15",
+    "moment": "^2.24.0"
+  },
+  "devDependencies": {
+    "@polkadot/typegen": "8.9.1",
+    "ts-node": "^10.2.1",
+    "typescript": "^4.4.3",
+    "madge": "^3.9.2"
+  },
+  "engines": {
+    "node": ">=14.0.0",
+    "yarn": "^1.22.0"
+  },
+  "publishConfig": {
+    "access": "public",
+    "registry": "https://registry.npmjs.org"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/Joystream/joystream.git"
+  },
+  "keywords": [
+    "substrate",
+    "joystream",
+    "runtime"
+  ],
+  "license": "GPL-3.0-only",
+  "bugs": {
+    "url": "https://github.com/Joystream/joystream/issues"
+  },
+  "homepage": "https://github.com/Joystream/joystream",
+  "volta": {
+    "node": "14.16.1",
+    "yarn": "1.22.15"
+  }
+}
diff --git a/node_modules/@joystream/types/types/src/augment/augment-api-consts.ts b/node_modules/@joystream/types/types/src/augment/augment-api-consts.ts
new file mode 100644
index 0000000..ce72ab2
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/augment-api-consts.ts
@@ -0,0 +1,916 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+
+import type { ApiTypes } from '@polkadot/api-base/types';
+import type { U8aFixed, Vec, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { Perbill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportWeightsRuntimeDbWeight, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, PalletContentLimitPerPeriod, PalletProposalsEngineProposalParameters, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+
+declare module '@polkadot/api-base/types/consts' {
+  export interface AugmentedConsts<ApiType extends ApiTypes> {
+    appWorkingGroup: {
+      /**
+       * Stake needed to create an opening.
+       **/
+      leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Max simultaneous active worker number.
+       **/
+      maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake required for applying into an opening.
+       **/
+      minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Defines min unstaking period in the group.
+       **/
+      minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Defines the period every worker gets paid in blocks.
+       **/
+      rewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    authorship: {
+      /**
+       * The number of blocks back we should accept uncles.
+       * This means that we will deal with uncle-parents that are
+       * `UncleGenerations + 1` before `now`.
+       **/
+      uncleGenerations: u32 & AugmentedConst<ApiType>;
+    };
+    babe: {
+      /**
+       * The amount of time, in slots, that each epoch should last.
+       * NOTE: Currently it is not possible to change the epoch duration after
+       * the chain has started. Attempting to do so will brick block production.
+       **/
+      epochDuration: u64 & AugmentedConst<ApiType>;
+      /**
+       * The expected average block time at which BABE should be creating
+       * blocks. Since BABE is probabilistic it is not trivial to figure out
+       * what the expected average block time should be based on the slot
+       * duration and the security parameter `c` (where `1 - c` represents
+       * the probability of a slot being empty).
+       **/
+      expectedBlockTime: u64 & AugmentedConst<ApiType>;
+      /**
+       * Max number of authorities allowed
+       **/
+      maxAuthorities: u32 & AugmentedConst<ApiType>;
+    };
+    bagsList: {
+      /**
+       * The list of thresholds separating the various bags.
+       * 
+       * Ids are separated into unsorted bags according to their score. This specifies the
+       * thresholds separating the bags. An id's bag is the largest bag for which the id's score
+       * is less than or equal to its upper threshold.
+       * 
+       * When ids are iterated, higher bags are iterated completely before lower bags. This means
+       * that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower
+       * score, but peer ids within a particular bag are sorted in insertion order.
+       * 
+       * # Expressing the constant
+       * 
+       * This constant must be sorted in strictly increasing order. Duplicate items are not
+       * permitted.
+       * 
+       * There is an implied upper limit of `Score::MAX`; that value does not need to be
+       * specified within the bag. For any two threshold lists, if one ends with
+       * `Score::MAX`, the other one does not, and they are otherwise equal, the two
+       * lists will behave identically.
+       * 
+       * # Calculation
+       * 
+       * It is recommended to generate the set of thresholds in a geometric series, such that
+       * there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *
+       * constant_ratio).max(threshold[k] + 1)` for all `k`.
+       * 
+       * The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.
+       * 
+       * # Examples
+       * 
+       * - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and
+       * iteration is strictly in insertion order.
+       * - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to
+       * the procedure given above, then the constant ratio is equal to 2.
+       * - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to
+       * the procedure given above, then the constant ratio is approximately equal to 1.248.
+       * - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall
+       * into bag 0, an id with score 2 will fall into bag 1, etc.
+       * 
+       * # Migration
+       * 
+       * In the event that this list ever changes, a copy of the old bags list must be retained.
+       * With that `List::migrate` can be called, which will perform the appropriate migration.
+       **/
+      bagThresholds: Vec<u64> & AugmentedConst<ApiType>;
+    };
+    balances: {
+      /**
+       * The minimum amount required to keep an account open.
+       **/
+      existentialDeposit: u128 & AugmentedConst<ApiType>;
+      /**
+       * The maximum number of locks that should exist on an account.
+       * Not strictly enforced, but used for weight estimation.
+       **/
+      maxLocks: u32 & AugmentedConst<ApiType>;
+      /**
+       * The maximum number of named reserves that can exist on an account.
+       **/
+      maxReserves: u32 & AugmentedConst<ApiType>;
+    };
+    bounty: {
+      /**
+       * Exports const - max work entry number for a closed assurance type contract bounty.
+       **/
+      closedContractSizeLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - creator state bloat bond amount for a bounty.
+       **/
+      creatorStateBloatBondAmount: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - funder state bloat bond amount for a bounty.
+       **/
+      funderStateBloatBondAmount: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - min work entrant stake for a bounty.
+       **/
+      minWorkEntrantStake: u128 & AugmentedConst<ApiType>;
+    };
+    content: {
+      /**
+       * Exports const - default channel daily NFT limit.
+       **/
+      defaultChannelDailyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+      /**
+       * Exports const - default channel weekly NFT limit.
+       **/
+      defaultChannelWeeklyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+      /**
+       * Exports const - default global daily NFT limit.
+       **/
+      defaultGlobalDailyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+      /**
+       * Exports const - default global weekly NFT limit.
+       **/
+      defaultGlobalWeeklyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+      /**
+       * Export const - max cashout allowed limits
+       **/
+      maximumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - max number of keys per curator_group.permissions_by_level map instance
+       **/
+      maxKeysPerCuratorGroupPermissionsByLevelMap: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - max nft auction whitelist length
+       **/
+      maxNftAuctionWhitelistLength: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - max number of curators per group
+       **/
+      maxNumberOfCuratorsPerGroup: u32 & AugmentedConst<ApiType>;
+      /**
+       * Export const - min cashout allowed limits
+       **/
+      minimumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
+    };
+    contentWorkingGroup: {
+      /**
+       * Stake needed to create an opening.
+       **/
+      leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Max simultaneous active worker number.
+       **/
+      maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake required for applying into an opening.
+       **/
+      minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Defines min unstaking period in the group.
+       **/
+      minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Defines the period every worker gets paid in blocks.
+       **/
+      rewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    council: {
+      /**
+       * Duration of annoncing period
+       **/
+      announcingPeriodDuration: u32 & AugmentedConst<ApiType>;
+      /**
+       * Interval between automatic budget refills.
+       **/
+      budgetRefillPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - candidacy lock id.
+       **/
+      candidacyLockId: U8aFixed & AugmentedConst<ApiType>;
+      /**
+       * Exports const - councilor lock id.
+       **/
+      councilorLockId: U8aFixed & AugmentedConst<ApiType>;
+      /**
+       * Council member count
+       **/
+      councilSize: u32 & AugmentedConst<ApiType>;
+      /**
+       * Interval for automatic reward payments.
+       **/
+      electedMemberRewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Duration of idle period
+       **/
+      idlePeriodDuration: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake candidate has to lock
+       **/
+      minCandidateStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Minimum number of extra candidates needed for the valid election.
+       * Number of total candidates is equal to council size plus extra candidates.
+       **/
+      minNumberOfExtraCandidates: u32 & AugmentedConst<ApiType>;
+    };
+    distributionWorkingGroup: {
+      /**
+       * Stake needed to create an opening.
+       **/
+      leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Max simultaneous active worker number.
+       **/
+      maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake required for applying into an opening.
+       **/
+      minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Defines min unstaking period in the group.
+       **/
+      minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Defines the period every worker gets paid in blocks.
+       **/
+      rewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    electionProviderMultiPhase: {
+      /**
+       * The minimum amount of improvement to the solution score that defines a solution as
+       * "better" in the Signed phase.
+       **/
+      betterSignedThreshold: Perbill & AugmentedConst<ApiType>;
+      /**
+       * The minimum amount of improvement to the solution score that defines a solution as
+       * "better" in the Unsigned phase.
+       **/
+      betterUnsignedThreshold: Perbill & AugmentedConst<ApiType>;
+      /**
+       * The maximum number of electable targets to put in the snapshot.
+       **/
+      maxElectableTargets: u16 & AugmentedConst<ApiType>;
+      /**
+       * The maximum number of electing voters to put in the snapshot. At the moment, snapshots
+       * are only over a single block, but once multi-block elections are introduced they will
+       * take place over multiple blocks.
+       **/
+      maxElectingVoters: u32 & AugmentedConst<ApiType>;
+      /**
+       * The priority of the unsigned transaction submitted in the unsigned-phase
+       **/
+      minerTxPriority: u64 & AugmentedConst<ApiType>;
+      /**
+       * The repeat threshold of the offchain worker.
+       * 
+       * For example, if it is 5, that means that at least 5 blocks will elapse between attempts
+       * to submit the worker's solution.
+       **/
+      offchainRepeat: u32 & AugmentedConst<ApiType>;
+      /**
+       * Base deposit for a signed solution.
+       **/
+      signedDepositBase: u128 & AugmentedConst<ApiType>;
+      /**
+       * Per-byte deposit for a signed solution.
+       **/
+      signedDepositByte: u128 & AugmentedConst<ApiType>;
+      /**
+       * Per-weight deposit for a signed solution.
+       **/
+      signedDepositWeight: u128 & AugmentedConst<ApiType>;
+      /**
+       * The maximum amount of unchecked solutions to refund the call fee for.
+       **/
+      signedMaxRefunds: u32 & AugmentedConst<ApiType>;
+      /**
+       * Maximum number of signed submissions that can be queued.
+       * 
+       * It is best to avoid adjusting this during an election, as it impacts downstream data
+       * structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you
+       * update this value during an election, you _must_ ensure that
+       * `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,
+       * attempts to submit new solutions may cause a runtime panic.
+       **/
+      signedMaxSubmissions: u32 & AugmentedConst<ApiType>;
+      /**
+       * Maximum weight of a signed solution.
+       * 
+       * If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of
+       * this pallet), then [`MinerConfig::solution_weight`] is used to compare against
+       * this value.
+       **/
+      signedMaxWeight: u64 & AugmentedConst<ApiType>;
+      /**
+       * Duration of the signed phase.
+       **/
+      signedPhase: u32 & AugmentedConst<ApiType>;
+      /**
+       * Base reward for a signed solution
+       **/
+      signedRewardBase: u128 & AugmentedConst<ApiType>;
+      /**
+       * Duration of the unsigned phase.
+       **/
+      unsignedPhase: u32 & AugmentedConst<ApiType>;
+    };
+    forum: {
+      /**
+       * MaxDirectSubcategoriesInCategory
+       **/
+      maxDirectSubcategoriesInCategory: u64 & AugmentedConst<ApiType>;
+      /**
+       * MaxTotalCategories
+       **/
+      maxTotalCategories: u64 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Deposit needed to create a post
+       **/
+      postDeposit: u128 & AugmentedConst<ApiType>;
+      /**
+       * Deposit needed to create a thread
+       **/
+      threadDeposit: u128 & AugmentedConst<ApiType>;
+    };
+    forumWorkingGroup: {
+      /**
+       * Stake needed to create an opening.
+       **/
+      leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Max simultaneous active worker number.
+       **/
+      maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake required for applying into an opening.
+       **/
+      minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Defines min unstaking period in the group.
+       **/
+      minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Defines the period every worker gets paid in blocks.
+       **/
+      rewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    grandpa: {
+      /**
+       * Max Authorities in use
+       **/
+      maxAuthorities: u32 & AugmentedConst<ApiType>;
+    };
+    imOnline: {
+      /**
+       * A configuration for base priority of unsigned transactions.
+       * 
+       * This is exposed so that it can be tuned for particular runtime, when
+       * multiple pallets send unsigned transactions.
+       **/
+      unsignedPriority: u64 & AugmentedConst<ApiType>;
+    };
+    members: {
+      /**
+       * Exports const - Stake needed to candidate as staking account.
+       **/
+      candidateStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - default balance for the invited member.
+       **/
+      defaultInitialInvitationBalance: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - default membership fee.
+       **/
+      defaultMembershipPrice: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - invited member lock id.
+       **/
+      invitedMemberLockId: U8aFixed & AugmentedConst<ApiType>;
+      /**
+       * Exports const - maximum percent value of the membership fee for the referral cut.
+       **/
+      referralCutMaximumPercent: u8 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - staking candidate lock id.
+       **/
+      stakingCandidateLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    membershipWorkingGroup: {
+      /**
+       * Stake needed to create an opening.
+       **/
+      leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Max simultaneous active worker number.
+       **/
+      maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake required for applying into an opening.
+       **/
+      minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Defines min unstaking period in the group.
+       **/
+      minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Defines the period every worker gets paid in blocks.
+       **/
+      rewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    multisig: {
+      /**
+       * The base amount of currency needed to reserve for creating a multisig execution or to
+       * store a dispatch call for later.
+       * 
+       * This is held for an additional storage item whose value size is
+       * `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is
+       * `32 + sizeof(AccountId)` bytes.
+       **/
+      depositBase: u128 & AugmentedConst<ApiType>;
+      /**
+       * The amount of currency needed per unit threshold when creating a multisig execution.
+       * 
+       * This is held for adding 32 bytes more into a pre-existing storage value.
+       **/
+      depositFactor: u128 & AugmentedConst<ApiType>;
+      /**
+       * The maximum amount of signatories allowed in the multisig.
+       **/
+      maxSignatories: u16 & AugmentedConst<ApiType>;
+    };
+    operationsWorkingGroupAlpha: {
+      /**
+       * Stake needed to create an opening.
+       **/
+      leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Max simultaneous active worker number.
+       **/
+      maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake required for applying into an opening.
+       **/
+      minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Defines min unstaking period in the group.
+       **/
+      minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Defines the period every worker gets paid in blocks.
+       **/
+      rewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    operationsWorkingGroupBeta: {
+      /**
+       * Stake needed to create an opening.
+       **/
+      leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Max simultaneous active worker number.
+       **/
+      maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake required for applying into an opening.
+       **/
+      minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Defines min unstaking period in the group.
+       **/
+      minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Defines the period every worker gets paid in blocks.
+       **/
+      rewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    operationsWorkingGroupGamma: {
+      /**
+       * Stake needed to create an opening.
+       **/
+      leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Max simultaneous active worker number.
+       **/
+      maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake required for applying into an opening.
+       **/
+      minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Defines min unstaking period in the group.
+       **/
+      minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Defines the period every worker gets paid in blocks.
+       **/
+      rewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    proposalsCodex: {
+      /**
+       * Exports 'Amend Constitution' proposal parameters.
+       **/
+      amendConstitutionProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Cancel Working Group Lead Opening' proposal parameters.
+       **/
+      cancelWorkingGroupLeadOpeningProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Create Working Group Lead Opening' proposal parameters.
+       **/
+      createWorkingGroupLeadOpeningProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Decrease Working Group Lead Stake' proposal parameters.
+       **/
+      decreaseWorkingGroupLeadStakeProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Fill Working Group Lead Opening' proposal parameters.
+       **/
+      fillWorkingGroupOpeningProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Max number of accounts per funding request proposal
+       **/
+      fundingRequestProposalMaxAccounts: u32 & AugmentedConst<ApiType>;
+      /**
+       * Maximum total amount in funding request proposal
+       **/
+      fundingRequestProposalMaxTotalAmount: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Funding Request' proposal parameters.
+       **/
+      fundingRequestProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Runtime Upgrade' proposal parameters.
+       **/
+      runtimeUpgradeProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports `Set Council Budget Increment` proposal parameters.
+       **/
+      setCouncilBudgetIncrementProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports `Set Councilor Reward Proposal Parameters` proposal parameters.
+       **/
+      setCouncilorRewardProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports `Set Initial Invitation Balance` proposal parameters.
+       **/
+      setInitialInvitationBalanceProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      setInvitationCountProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Max allowed number of validators in set max validator count proposal
+       **/
+      setMaxValidatorCountProposalMaxValidators: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Set Max Validator Count' proposal parameters.
+       **/
+      setMaxValidatorCountProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      setMembershipLeadInvitationQuotaProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Set Membership Price' proposal parameters.
+       **/
+      setMembershipPriceProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      setReferralCutProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Set Working Group Lead Reward' proposal parameters.
+       **/
+      setWorkingGroupLeadRewardProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Signal' proposal parameters.
+       **/
+      signalProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Slash Working Group Lead' proposal parameters.
+       **/
+      slashWorkingGroupLeadProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Terminate Working Group Lead' proposal parameters.
+       **/
+      terminateWorkingGroupLeadProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      updateChannelPayoutsProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      updateGlobalNftLimitProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Max yearly patronage rate update proposal
+       **/
+      updateMaxYearlyPatronageRate: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Exports 'Update Working Group Budget' proposal parameters.
+       **/
+      updateWorkingGroupBudgetProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      vetoProposalProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+    };
+    proposalsDiscussion: {
+      /**
+       * Exports const - author list size limit for the Closed discussion.
+       **/
+      maxWhiteListSize: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - fee for creating a post
+       **/
+      postDeposit: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - maximum number of blocks before a post can be erased by anyone
+       **/
+      postLifeTime: u32 & AugmentedConst<ApiType>;
+    };
+    proposalsEngine: {
+      /**
+       * Exports const - the fee is applied when cancel the proposal. A fee would be slashed (burned).
+       **/
+      cancellationFee: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const -  max allowed proposal description length.
+       **/
+      descriptionMaxLength: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const -  max simultaneous active proposals number.
+       **/
+      maxActiveProposalLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const -  the fee is applied when the proposal gets rejected. A fee would
+       * be slashed (burned).
+       **/
+      rejectionFee: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+      /**
+       * Exports const -  max allowed proposal title length.
+       **/
+      titleMaxLength: u32 & AugmentedConst<ApiType>;
+    };
+    referendum: {
+      /**
+       * Maximum length of vote commitment salt. Use length that ensures uniqueness for hashing
+       * e.g. std::u64::MAX.
+       **/
+      maxSaltLength: u64 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake needed for voting
+       **/
+      minimumStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Duration of revealing stage (number of blocks)
+       **/
+      revealStageDuration: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+      /**
+       * Duration of voting stage (number of blocks)
+       **/
+      voteStageDuration: u32 & AugmentedConst<ApiType>;
+    };
+    staking: {
+      /**
+       * Number of eras that staked funds must remain bonded for.
+       **/
+      bondingDuration: u32 & AugmentedConst<ApiType>;
+      /**
+       * Maximum number of nominations per nominator.
+       **/
+      maxNominations: u32 & AugmentedConst<ApiType>;
+      /**
+       * The maximum number of nominators rewarded for each validator.
+       * 
+       * For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can
+       * claim their reward. This used to limit the i/o cost for the nominator payout.
+       **/
+      maxNominatorRewardedPerValidator: u32 & AugmentedConst<ApiType>;
+      /**
+       * The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively
+       * determines how many unique eras a staker may be unbonding in.
+       **/
+      maxUnlockingChunks: u32 & AugmentedConst<ApiType>;
+      /**
+       * Number of sessions per era.
+       **/
+      sessionsPerEra: u32 & AugmentedConst<ApiType>;
+      /**
+       * Number of eras that slashes are deferred by, after computation.
+       * 
+       * This should be less than the bonding duration. Set to 0 if slashes
+       * should be applied immediately, without opportunity for intervention.
+       **/
+      slashDeferDuration: u32 & AugmentedConst<ApiType>;
+    };
+    storage: {
+      /**
+       * Exports const - maximum size of the "hash blacklist" collection.
+       **/
+      blacklistSizeLimit: u64 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - the default dynamic bag creation policy for channels (storage bucket
+       * number).
+       **/
+      defaultChannelDynamicBagNumberOfStorageBuckets: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - the default dynamic bag creation policy for members (storage bucket
+       * number).
+       **/
+      defaultMemberDynamicBagNumberOfStorageBuckets: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - max data object size in bytes.
+       **/
+      maxDataObjectSize: u64 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - max allowed distribution bucket family number.
+       **/
+      maxDistributionBucketFamilyNumber: u64 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - maximum number of distribution buckets per bag.
+       **/
+      maxDistributionBucketsPerBag: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - max number of operators per distribution bucket.
+       **/
+      maxNumberOfOperatorsPerDistributionBucket: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - max number of pending invitations per distribution bucket.
+       **/
+      maxNumberOfPendingInvitationsPerDistributionBucket: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - maximum number of storage buckets per bag.
+       **/
+      maxStorageBucketsPerBag: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - minimum number of distribution buckets per bag.
+       **/
+      minDistributionBucketsPerBag: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - minimum number of storage buckets per bag.
+       **/
+      minStorageBucketsPerBag: u32 & AugmentedConst<ApiType>;
+    };
+    storageWorkingGroup: {
+      /**
+       * Stake needed to create an opening.
+       **/
+      leaderOpeningStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const
+       * Max simultaneous active worker number.
+       **/
+      maxWorkerNumberLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Minimum stake required for applying into an opening.
+       **/
+      minimumApplicationStake: u128 & AugmentedConst<ApiType>;
+      /**
+       * Defines min unstaking period in the group.
+       **/
+      minUnstakingPeriodLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Defines the period every worker gets paid in blocks.
+       **/
+      rewardPeriod: u32 & AugmentedConst<ApiType>;
+      /**
+       * Staking handler lock id.
+       **/
+      stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
+    };
+    system: {
+      /**
+       * Maximum number of block number to block hash mappings to keep (oldest pruned first).
+       **/
+      blockHashCount: u32 & AugmentedConst<ApiType>;
+      /**
+       * The maximum length of a block (in bytes).
+       **/
+      blockLength: FrameSystemLimitsBlockLength & AugmentedConst<ApiType>;
+      /**
+       * Block & extrinsics weights: base values and limits.
+       **/
+      blockWeights: FrameSystemLimitsBlockWeights & AugmentedConst<ApiType>;
+      /**
+       * The weight of runtime database operations the runtime can invoke.
+       **/
+      dbWeight: FrameSupportWeightsRuntimeDbWeight & AugmentedConst<ApiType>;
+      /**
+       * The designated SS85 prefix of this chain.
+       * 
+       * This replaces the "ss58Format" property declared in the chain spec. Reason is
+       * that the runtime should know about the prefix in order to make use of it as
+       * an identifier of the chain.
+       **/
+      ss58Prefix: u16 & AugmentedConst<ApiType>;
+      /**
+       * Get the chain's current version.
+       **/
+      version: SpVersionRuntimeVersion & AugmentedConst<ApiType>;
+    };
+    timestamp: {
+      /**
+       * The minimum period between blocks. Beware that this is different to the *expected*
+       * period that the block production apparatus provides. Your chosen consensus system will
+       * generally work with this to determine a sensible block time. e.g. For Aura, it will be
+       * double this period on default settings.
+       **/
+      minimumPeriod: u64 & AugmentedConst<ApiType>;
+    };
+    transactionPayment: {
+      /**
+       * A fee mulitplier for `Operational` extrinsics to compute "virtual tip" to boost their
+       * `priority`
+       * 
+       * This value is multipled by the `final_fee` to obtain a "virtual tip" that is later
+       * added to a tip component in regular `priority` calculations.
+       * It means that a `Normal` transaction can front-run a similarly-sized `Operational`
+       * extrinsic (with no tip), by including a tip value greater than the virtual tip.
+       * 
+       * ```rust,ignore
+       * // For `Normal`
+       * let priority = priority_calc(tip);
+       * 
+       * // For `Operational`
+       * let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;
+       * let priority = priority_calc(tip + virtual_tip);
+       * ```
+       * 
+       * Note that since we use `final_fee` the multiplier applies also to the regular `tip`
+       * sent with the transaction. So, not only does the transaction get a priority bump based
+       * on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`
+       * transactions.
+       **/
+      operationalFeeMultiplier: u8 & AugmentedConst<ApiType>;
+    };
+    utility: {
+      /**
+       * The limit on the number of batched calls.
+       **/
+      batchedCallsLimit: u32 & AugmentedConst<ApiType>;
+    };
+    vesting: {
+      maxVestingSchedules: u32 & AugmentedConst<ApiType>;
+      /**
+       * The minimum amount transferred to call `vested_transfer`.
+       **/
+      minVestedTransfer: u128 & AugmentedConst<ApiType>;
+    };
+  } // AugmentedConsts
+} // declare module
diff --git a/node_modules/@joystream/types/types/src/augment/augment-api-errors.ts b/node_modules/@joystream/types/types/src/augment/augment-api-errors.ts
new file mode 100644
index 0000000..f5734c7
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/augment-api-errors.ts
@@ -0,0 +1,3384 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+
+import type { ApiTypes } from '@polkadot/api-base/types';
+
+declare module '@polkadot/api-base/types/errors' {
+  export interface AugmentedErrors<ApiType extends ApiTypes> {
+    appWorkingGroup: {
+      /**
+       * Trying to fill opening with an application for other opening
+       **/
+      ApplicationsNotForOpening: AugmentedError<ApiType>;
+      /**
+       * Application stake is less than required opening stake.
+       **/
+      ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Staking less than the lower bound.
+       **/
+      BelowMinimumStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot decrease stake - stake delta greater than initial stake.
+       **/
+      CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+      /**
+       * There is leader already, cannot hire another one.
+       **/
+      CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening with multiple applications.
+       **/
+      CannotHireMultipleLeaders: AugmentedError<ApiType>;
+      /**
+       * Reward could not be zero.
+       **/
+      CannotRewardWithZero: AugmentedError<ApiType>;
+      /**
+       * Invalid spending amount.
+       **/
+      CannotSpendZero: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Current lead is not set.
+       **/
+      CurrentLeadNotSet: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * It's not enough budget for this spending.
+       **/
+      InsufficientBudgetForSpending: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid origin for a member.
+       **/
+      InvalidMemberOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Not a lead account.
+       **/
+      IsNotLeadAccount: AugmentedError<ApiType>;
+      /**
+       * Working group size limit exceeded.
+       **/
+      MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening - no applications provided.
+       **/
+      NoApplicationsProvided: AugmentedError<ApiType>;
+      /**
+       * Opening does not exist.
+       **/
+      OpeningDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is not applicant.
+       **/
+      OriginIsNotApplicant: AugmentedError<ApiType>;
+      /**
+       * Signer is not worker role account.
+       **/
+      SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+      /**
+       * Provided stake balance cannot be zero.
+       **/
+      StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Successful worker application does not exist.
+       **/
+      SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Specified unstaking period is less then minimum set for the group.
+       **/
+      UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+      /**
+       * Worker application does not exist.
+       **/
+      WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker does not exist.
+       **/
+      WorkerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker has no recurring reward.
+       **/
+      WorkerHasNoReward: AugmentedError<ApiType>;
+      /**
+       * Invalid operation - worker is leaving.
+       **/
+      WorkerIsLeaving: AugmentedError<ApiType>;
+      /**
+       * Worker storage text is too long.
+       **/
+      WorkerStorageValueTooLong: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    authorship: {
+      /**
+       * The uncle is genesis.
+       **/
+      GenesisUncle: AugmentedError<ApiType>;
+      /**
+       * The uncle parent not in the chain.
+       **/
+      InvalidUncleParent: AugmentedError<ApiType>;
+      /**
+       * The uncle isn't recent enough to be included.
+       **/
+      OldUncle: AugmentedError<ApiType>;
+      /**
+       * The uncle is too high in chain.
+       **/
+      TooHighUncle: AugmentedError<ApiType>;
+      /**
+       * Too many uncles.
+       **/
+      TooManyUncles: AugmentedError<ApiType>;
+      /**
+       * The uncle is already included.
+       **/
+      UncleAlreadyIncluded: AugmentedError<ApiType>;
+      /**
+       * Uncles already set in the block.
+       **/
+      UnclesAlreadySet: AugmentedError<ApiType>;
+    };
+    babe: {
+      /**
+       * A given equivocation report is valid but already previously reported.
+       **/
+      DuplicateOffenceReport: AugmentedError<ApiType>;
+      /**
+       * Submitted configuration is invalid.
+       **/
+      InvalidConfiguration: AugmentedError<ApiType>;
+      /**
+       * An equivocation proof provided as part of an equivocation report is invalid.
+       **/
+      InvalidEquivocationProof: AugmentedError<ApiType>;
+      /**
+       * A key ownership proof provided as part of an equivocation report is invalid.
+       **/
+      InvalidKeyOwnershipProof: AugmentedError<ApiType>;
+    };
+    bagsList: {
+      /**
+       * A error in the list interface implementation.
+       **/
+      List: AugmentedError<ApiType>;
+    };
+    balances: {
+      /**
+       * Beneficiary account must pre-exist
+       **/
+      DeadAccount: AugmentedError<ApiType>;
+      /**
+       * Value too low to create account due to existential deposit
+       **/
+      ExistentialDeposit: AugmentedError<ApiType>;
+      /**
+       * A vesting schedule already exists for this account
+       **/
+      ExistingVestingSchedule: AugmentedError<ApiType>;
+      /**
+       * Balance too low to send value
+       **/
+      InsufficientBalance: AugmentedError<ApiType>;
+      /**
+       * Transfer/payment would kill account
+       **/
+      KeepAlive: AugmentedError<ApiType>;
+      /**
+       * Account liquidity restrictions prevent withdrawal
+       **/
+      LiquidityRestrictions: AugmentedError<ApiType>;
+      /**
+       * Number of named reserves exceed MaxReserves
+       **/
+      TooManyReserves: AugmentedError<ApiType>;
+      /**
+       * Vesting balance too high to send value
+       **/
+      VestingBalance: AugmentedError<ApiType>;
+    };
+    bounty: {
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Bounty doesnt exist.
+       **/
+      BountyDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Incompatible assurance contract type for a member: cannot submit work to the 'closed
+       * assurance' bounty contract.
+       **/
+      CannotSubmitWorkToClosedContractBounty: AugmentedError<ApiType>;
+      /**
+       * Cherry less than minimum allowed.
+       **/
+      CherryLessThenMinimumAllowed: AugmentedError<ApiType>;
+      /**
+       * Cannot create a 'closed assurance contract' bounty with empty member list.
+       **/
+      ClosedContractMemberListIsEmpty: AugmentedError<ApiType>;
+      /**
+       * Cannot create a 'closed assurance contract' bounty with member list larger
+       * than allowed max work entry limit.
+       **/
+      ClosedContractMemberListIsTooLarge: AugmentedError<ApiType>;
+      /**
+       * 'closed assurance contract' bounty member list can only include existing members
+       **/
+      ClosedContractMemberNotFound: AugmentedError<ApiType>;
+      /**
+       * The conflicting stake discovered. Cannot stake.
+       **/
+      ConflictingStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot create a bounty with an entrant stake is less than required minimum.
+       **/
+      EntrantStakeIsLessThanMininum: AugmentedError<ApiType>;
+      /**
+       * Cannot create a bounty with zero funding amount parameter.
+       **/
+      FundingAmountCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Cannot create a bounty with zero funding period parameter.
+       **/
+      FundingPeriodCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance for a bounty cherry.
+       **/
+      InsufficientBalanceForBounty: AugmentedError<ApiType>;
+      /**
+       * There is not enough balance for a stake.
+       **/
+      InsufficientBalanceForStake: AugmentedError<ApiType>;
+      /**
+       * Bounty contributor not found
+       **/
+      InvalidContributorActorSpecified: AugmentedError<ApiType>;
+      /**
+       * Invalid Creator Actor for Bounty specified
+       **/
+      InvalidCreatorActorSpecified: AugmentedError<ApiType>;
+      /**
+       * Member specified is not an entrant worker
+       **/
+      InvalidEntrantWorkerSpecified: AugmentedError<ApiType>;
+      /**
+       * Bounty oracle not found
+       **/
+      InvalidOracleActorSpecified: AugmentedError<ApiType>;
+      /**
+       * Provided oracle member id does not belong to an existing member
+       **/
+      InvalidOracleMemberId: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: Cancelled.
+       **/
+      InvalidStageUnexpectedCancelled: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: FailedBountyWithdrawal.
+       **/
+      InvalidStageUnexpectedFailedBountyWithdrawal: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: Funding.
+       **/
+      InvalidStageUnexpectedFunding: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: Judgment.
+       **/
+      InvalidStageUnexpectedJudgment: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: NoFundingContributed.
+       **/
+      InvalidStageUnexpectedNoFundingContributed: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: SuccessfulBountyWithdrawal.
+       **/
+      InvalidStageUnexpectedSuccessfulBountyWithdrawal: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: WorkSubmission.
+       **/
+      InvalidStageUnexpectedWorkSubmission: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Min funding amount cannot be greater than max amount.
+       **/
+      MinFundingAmountCannotBeGreaterThanMaxAmount: AugmentedError<ApiType>;
+      /**
+       * Cannot found bounty contribution.
+       **/
+      NoBountyContributionFound: AugmentedError<ApiType>;
+      /**
+       * Oracle have already been withdrawn
+       **/
+      OracleRewardAlreadyWithdrawn: AugmentedError<ApiType>;
+      /**
+       * Origin is root, so switching oracle is not allowed in this extrinsic. (call switch_oracle_as_root)
+       **/
+      SwitchOracleOriginIsRoot: AugmentedError<ApiType>;
+      /**
+       * The total reward for winners should be equal to total bounty funding.
+       **/
+      TotalRewardShouldBeEqualToTotalFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid judgment - all winners should have work submissions.
+       **/
+      WinnerShouldHasWorkSubmission: AugmentedError<ApiType>;
+      /**
+       * Worker tried to access a work entry that doesn't belong to him
+       **/
+      WorkEntryDoesntBelongToWorker: AugmentedError<ApiType>;
+      /**
+       * Work entry doesnt exist.
+       **/
+      WorkEntryDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Cannot set zero reward for winners.
+       **/
+      ZeroWinnerReward: AugmentedError<ApiType>;
+    };
+    content: {
+      /**
+       * Already active auction cannot be cancelled
+       **/
+      ActionHasBidsAlready: AugmentedError<ApiType>;
+      /**
+       * Actor cannot authorize as lead for given extrinsic
+       **/
+      ActorCannotBeLead: AugmentedError<ApiType>;
+      /**
+       * Actor cannot Own channel
+       **/
+      ActorCannotOwnChannel: AugmentedError<ApiType>;
+      /**
+       * Actor is not a last bidder
+       **/
+      ActorIsNotBidder: AugmentedError<ApiType>;
+      /**
+       * Actor is not A Member
+       **/
+      ActorNotAMember: AugmentedError<ApiType>;
+      /**
+       * Operation cannot be perfomed with this Actor
+       **/
+      ActorNotAuthorized: AugmentedError<ApiType>;
+      /**
+       * List of assets to remove provided for update_channel / update_video contains assets that don't belong to the specified entity
+       **/
+      AssetsToRemoveBeyondEntityAssetsSet: AugmentedError<ApiType>;
+      /**
+       * Auction bid step lower bound exceeded
+       **/
+      AuctionBidStepLowerBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Auction bid step upper bound exceeded
+       **/
+      AuctionBidStepUpperBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Auction cannot be completed
+       **/
+      AuctionCannotBeCompleted: AugmentedError<ApiType>;
+      /**
+       * Auction did not started
+       **/
+      AuctionDidNotStart: AugmentedError<ApiType>;
+      /**
+       * Auction duration lower bound exceeded
+       **/
+      AuctionDurationLowerBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Auction duration upper bound exceeded
+       **/
+      AuctionDurationUpperBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Expected root or signed origin
+       **/
+      BadOrigin: AugmentedError<ApiType>;
+      /**
+       * Auction does not have bids
+       **/
+      BidDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Selected Bid is for past open auction
+       **/
+      BidIsForPastAuction: AugmentedError<ApiType>;
+      /**
+       * Bid lock duration is not expired
+       **/
+      BidLockDurationIsNotExpired: AugmentedError<ApiType>;
+      /**
+       * Bid lock duration lower bound exceeded
+       **/
+      BidLockDurationLowerBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Bid lock duration upper bound exceeded
+       **/
+      BidLockDurationUpperBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Minimal auction bid step constraint violated.
+       **/
+      BidStepConstraintViolated: AugmentedError<ApiType>;
+      /**
+       * Auction buy now is less then starting price
+       **/
+      BuyNowMustBeGreaterThanStartingPrice: AugmentedError<ApiType>;
+      /**
+       * Cannot directly withdraw funds from a channel account when the channel has
+       * a creator token issued
+       **/
+      CannotWithdrawFromChannelWithCreatorTokenIssued: AugmentedError<ApiType>;
+      /**
+       * Channel cashout amount is too low to be claimed
+       **/
+      CashoutAmountBelowMinimumAmount: AugmentedError<ApiType>;
+      /**
+       * Channel cashout amount is too high to be claimed
+       **/
+      CashoutAmountExceedsMaximumAmount: AugmentedError<ApiType>;
+      /**
+       * A Channel or Video Category does not exist.
+       **/
+      CategoryDoesNotExist: AugmentedError<ApiType>;
+      ChannelAgentInsufficientPermissions: AugmentedError<ApiType>;
+      /**
+       * Unexpected runtime state: missing channel bag during delete_channel attempt
+       **/
+      ChannelBagMissing: AugmentedError<ApiType>;
+      /**
+       * Channel cashouts are currently disabled
+       **/
+      ChannelCashoutsDisabled: AugmentedError<ApiType>;
+      /**
+       * Channel Contains Assets
+       **/
+      ChannelContainsAssets: AugmentedError<ApiType>;
+      /**
+       * Channel Contains Video
+       **/
+      ChannelContainsVideos: AugmentedError<ApiType>;
+      /**
+       * Channel does not exist
+       **/
+      ChannelDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Operation cannot be executed, because this channel feature has been paused by a curator
+       **/
+      ChannelFeaturePaused: AugmentedError<ApiType>;
+      ChannelNftDailyLimitExceeded: AugmentedError<ApiType>;
+      ChannelNftWeeklyLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Provided channel owner (curator group) does not exist
+       **/
+      ChannelOwnerCuratorGroupDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Provided channel owner (member) does not exist
+       **/
+      ChannelOwnerMemberDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Channel state bloat bond cannot be lower than existential deposit,
+       * because it must secure the channel module account against dusting
+       **/
+      ChannelStateBloatBondBelowExistentialDeposit: AugmentedError<ApiType>;
+      /**
+       * Invalid extrinsic call: Channel state bloat bond changed.
+       **/
+      ChannelStateBloatBondChanged: AugmentedError<ApiType>;
+      /**
+       * Channel Transfers are blocked during active AMM
+       **/
+      ChannelTransfersBlockedDuringActiveAmm: AugmentedError<ApiType>;
+      /**
+       * Channel Transfers are blocked during revenue splits
+       **/
+      ChannelTransfersBlockedDuringRevenueSplits: AugmentedError<ApiType>;
+      /**
+       * Channel Transfers are blocked during token sales
+       **/
+      ChannelTransfersBlockedDuringTokenSales: AugmentedError<ApiType>;
+      /**
+       * Creator token was already issued for this channel
+       **/
+      CreatorTokenAlreadyIssued: AugmentedError<ApiType>;
+      /**
+       * Creator token wasn't issued for this channel
+       **/
+      CreatorTokenNotIssued: AugmentedError<ApiType>;
+      /**
+       * Curator authentication failed
+       **/
+      CuratorAuthFailed: AugmentedError<ApiType>;
+      /**
+       * Given curator group does not exist
+       **/
+      CuratorGroupDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Curator group is not active
+       **/
+      CuratorGroupIsNotActive: AugmentedError<ApiType>;
+      /**
+       * Curator group's permissions by level map exceeded the maximum allowed size
+       **/
+      CuratorGroupMaxPermissionsByLevelMapSizeExceeded: AugmentedError<ApiType>;
+      /**
+       * Curator id is not a worker id in content working group
+       **/
+      CuratorIdInvalid: AugmentedError<ApiType>;
+      /**
+       * Curator under provided curator id is already a member of curaror group under given id
+       **/
+      CuratorIsAlreadyAMemberOfGivenCuratorGroup: AugmentedError<ApiType>;
+      /**
+       * Curator under provided curator id is not a member of curaror group under given id
+       **/
+      CuratorIsNotAMemberOfGivenCuratorGroup: AugmentedError<ApiType>;
+      /**
+       * Curator does not have permissions to perform given moderation action
+       **/
+      CuratorModerationActionNotAllowed: AugmentedError<ApiType>;
+      /**
+       * Max number of curators per group limit reached
+       **/
+      CuratorsPerGroupLimitReached: AugmentedError<ApiType>;
+      /**
+       * Given origin does not own nft
+       **/
+      DoesNotOwnNft: AugmentedError<ApiType>;
+      /**
+       * Extension period is greater then auction duration
+       **/
+      ExtensionPeriodIsGreaterThenAuctionDuration: AugmentedError<ApiType>;
+      /**
+       * Auction extension period lower bound exceeded
+       **/
+      ExtensionPeriodLowerBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Auction extension period upper bound exceeded
+       **/
+      ExtensionPeriodUpperBoundExceeded: AugmentedError<ApiType>;
+      GlobalNftDailyLimitExceeded: AugmentedError<ApiType>;
+      GlobalNftWeeklyLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance
+       **/
+      InsufficientBalance: AugmentedError<ApiType>;
+      /**
+       * Cannot create the channel: channel creator has insufficient balance
+       * (budget for channel state bloat bond + channel data objs state bloat bonds + data objs storage fees + existential deposit)
+       **/
+      InsufficientBalanceForChannelCreation: AugmentedError<ApiType>;
+      /**
+       * Cannot transfer the channel: channel owner has insufficient balance (budget for WGs)
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Cannot create the video: video creator has insufficient balance
+       * (budget for video state bloat bond + video data objs state bloat bonds + data objs storage fees + existential deposit)
+       **/
+      InsufficientBalanceForVideoCreation: AugmentedError<ApiType>;
+      InsufficientCouncilBudget: AugmentedError<ApiType>;
+      /**
+       * Insufficient treasury balance
+       **/
+      InsufficientTreasuryBalance: AugmentedError<ApiType>;
+      /**
+       * Channel assets feasibility
+       **/
+      InvalidAssetsProvided: AugmentedError<ApiType>;
+      /**
+       * Bag Size specified is not valid
+       **/
+      InvalidBagSizeSpecified: AugmentedError<ApiType>;
+      /**
+       * Commit verification for bid amount
+       **/
+      InvalidBidAmountSpecified: AugmentedError<ApiType>;
+      /**
+       * `witness_price` provided to `buy_now` extrinsic does not match the current sell price
+       **/
+      InvalidBuyNowWitnessPriceProvided: AugmentedError<ApiType>;
+      /**
+       * Channel bag witness parameters don't match the current runtime state
+       **/
+      InvalidChannelBagWitnessProvided: AugmentedError<ApiType>;
+      /**
+       * Incorrect channel owner for an operation.
+       **/
+      InvalidChannelOwner: AugmentedError<ApiType>;
+      /**
+       * Incorrect actor tries to accept the channel transfer.
+       **/
+      InvalidChannelTransferAcceptor: AugmentedError<ApiType>;
+      /**
+       * Cannot accept the channel transfer: provided commitment parameters doesn't match with
+       * channel pending transfer parameters.
+       **/
+      InvalidChannelTransferCommitmentParams: AugmentedError<ApiType>;
+      /**
+       * Invalid channel transfer status for operations.
+       **/
+      InvalidChannelTransferStatus: AugmentedError<ApiType>;
+      /**
+       * Invalid member id  specified
+       **/
+      InvalidMemberProvided: AugmentedError<ApiType>;
+      /**
+       * Current nft offer price does not match the provided `witness_price`
+       **/
+      InvalidNftOfferWitnessPriceProvided: AugmentedError<ApiType>;
+      /**
+       * Storage buckets number witness parameter does not match the current runtime state
+       **/
+      InvalidStorageBucketsNumWitnessProvided: AugmentedError<ApiType>;
+      /**
+       * Invalid number of objects to delete provided for delete_video
+       **/
+      InvalidVideoDataObjectsCountProvided: AugmentedError<ApiType>;
+      /**
+       * Auction type is not `English`
+       **/
+      IsNotEnglishAuctionType: AugmentedError<ApiType>;
+      /**
+       * Auction type is not `Open`
+       **/
+      IsNotOpenAuctionType: AugmentedError<ApiType>;
+      /**
+       * Lead authentication failed
+       **/
+      LeadAuthFailed: AugmentedError<ApiType>;
+      /**
+       * Max auction whitelist length upper bound exceeded
+       **/
+      MaxAuctionWhiteListLengthUpperBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Attempt to set minimum cashout allowed above the limit
+       **/
+      MaxCashoutValueTooHigh: AugmentedError<ApiType>;
+      /**
+       * Maximum number of curator permissions per given channel privilege level exceeded
+       **/
+      MaxCuratorPermissionsPerLevelExceeded: AugmentedError<ApiType>;
+      /**
+       * Maximum number of channel agent permissions for channel agent exceeded
+       **/
+      MaxNumberOfChannelAgentPermissionsExceeded: AugmentedError<ApiType>;
+      /**
+       * Number of channel assets exceeds MaxNumberOfAssetsPerChannel
+       **/
+      MaxNumberOfChannelAssetsExceeded: AugmentedError<ApiType>;
+      /**
+       * Number of channel collaborators exceeds MaxNumberOfCollaboratorsPerChannel
+       **/
+      MaxNumberOfChannelCollaboratorsExceeded: AugmentedError<ApiType>;
+      /**
+       * Maximum number of paused features per channel exceeded
+       **/
+      MaxNumberOfPausedFeaturesPerChannelExceeded: AugmentedError<ApiType>;
+      /**
+       * Number of video assets exceeds MaxMaxNumberOfAssetsPerVideo
+       **/
+      MaxNumberOfVideoAssetsExceeded: AugmentedError<ApiType>;
+      /**
+       * Member authentication failed
+       **/
+      MemberAuthFailed: AugmentedError<ApiType>;
+      /**
+       * Member id could not be derived from the provided ContentActor context
+       **/
+      MemberIdCouldNotBeDerivedFromActor: AugmentedError<ApiType>;
+      /**
+       * Member is not allowed to participate in auction
+       **/
+      MemberIsNotAllowedToParticipate: AugmentedError<ApiType>;
+      /**
+       * Member profile not found
+       **/
+      MemberProfileNotFound: AugmentedError<ApiType>;
+      /**
+       * Migration not done yet
+       **/
+      MigrationNotFinished: AugmentedError<ApiType>;
+      /**
+       * New values for min_cashout_allowed/max_cashout_allowed are invalid
+       * min_cashout_allowed cannot exceed max_cashout_allowed
+       **/
+      MinCashoutAllowedExceedsMaxCashoutAllowed: AugmentedError<ApiType>;
+      /**
+       * Attempt to set minimum cashout allowed below the limit
+       **/
+      MinCashoutValueTooLow: AugmentedError<ApiType>;
+      /**
+       * Storage buckets number witness parameter must be provided when channel/video assets
+       * are being updated.
+       **/
+      MissingStorageBucketsNumWitness: AugmentedError<ApiType>;
+      /**
+       * Nft for given video id already exists
+       **/
+      NftAlreadyExists: AugmentedError<ApiType>;
+      /**
+       * Attempt to sling back a channel owned nft
+       **/
+      NftAlreadyOwnedByChannel: AugmentedError<ApiType>;
+      /**
+       * Nft auction is already expired
+       **/
+      NftAuctionIsAlreadyExpired: AugmentedError<ApiType>;
+      /**
+       * Nft for given video id does not exist
+       **/
+      NftDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Can not create auction for Nft, if auction have been already started or nft is locked for the transfer
+       **/
+      NftIsNotIdle: AugmentedError<ApiType>;
+      /**
+       * Non-channel owner specified during nft issuance does not exist
+       **/
+      NftNonChannelOwnerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Given video nft is not in buy now state
+       **/
+      NftNotInBuyNowState: AugmentedError<ApiType>;
+      /**
+       * No assets to be removed have been specified
+       **/
+      NoAssetsSpecified: AugmentedError<ApiType>;
+      /**
+       * Nft is not in auction state
+       **/
+      NotInAuctionState: AugmentedError<ApiType>;
+      /**
+       * Delete channel and assets and delete video assets must have a number of assets to remove greater than zero
+       **/
+      NumberOfAssetsToRemoveIsZero: AugmentedError<ApiType>;
+      /**
+       * Overflow or underflow error happened
+       **/
+      OverflowOrUnderflowHappened: AugmentedError<ApiType>;
+      /**
+       * Patronage can only be claimed if channel is owned by a member
+       **/
+      PatronageCanOnlyBeClaimedForMemberOwnedChannels: AugmentedError<ApiType>;
+      /**
+       * Payment Proof verification failed
+       **/
+      PaymentProofVerificationFailed: AugmentedError<ApiType>;
+      /**
+       * No pending offers for given Nft
+       **/
+      PendingOfferDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Partecipant is not a member
+       **/
+      ReplyDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Creator royalty requires reward account to be set.
+       **/
+      RewardAccountIsNotSet: AugmentedError<ApiType>;
+      /**
+       * Royalty Lower Bound Exceeded
+       **/
+      RoyaltyLowerBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Royalty Upper Bound Exceeded
+       **/
+      RoyaltyUpperBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Auction starting price constraint violated.
+       **/
+      StartingPriceConstraintViolated: AugmentedError<ApiType>;
+      /**
+       * Starting price lower bound exceeded
+       **/
+      StartingPriceLowerBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Starting price upper bound exceeded
+       **/
+      StartingPriceUpperBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Auction starts at lower bound exceeded
+       **/
+      StartsAtLowerBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Auction starts at upper bound exceeded
+       **/
+      StartsAtUpperBoundExceeded: AugmentedError<ApiType>;
+      /**
+       * Nft offer target member does not exist
+       **/
+      TargetMemberDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance
+       **/
+      UnsufficientBalance: AugmentedError<ApiType>;
+      /**
+       * Video does not exist
+       **/
+      VideoDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Vfdeo in season can`t be removed (because order is important)
+       **/
+      VideoInSeason: AugmentedError<ApiType>;
+      /**
+       * Invalid extrinsic call: video state bloat bond changed.
+       **/
+      VideoStateBloatBondChanged: AugmentedError<ApiType>;
+      /**
+       * At least one of the whitelisted members does not exist
+       **/
+      WhitelistedMemberDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Auction whitelist has only one member
+       **/
+      WhitelistHasOnlyOneMember: AugmentedError<ApiType>;
+      /**
+       * An attempt to withdraw funds from channel account failed, because the specified amount
+       * exceeds the withdrawable amount (channel account balance minus channel bloat bond)
+       **/
+      WithdrawalAmountExceedsChannelAccountWithdrawableBalance: AugmentedError<ApiType>;
+      /**
+       * An attempt to withdraw funds from channel account failed, because the specified amount
+       * is zero
+       **/
+      WithdrawFromChannelAmountIsZero: AugmentedError<ApiType>;
+      /**
+       * Cannot claim zero reward.
+       **/
+      ZeroReward: AugmentedError<ApiType>;
+    };
+    contentWorkingGroup: {
+      /**
+       * Trying to fill opening with an application for other opening
+       **/
+      ApplicationsNotForOpening: AugmentedError<ApiType>;
+      /**
+       * Application stake is less than required opening stake.
+       **/
+      ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Staking less than the lower bound.
+       **/
+      BelowMinimumStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot decrease stake - stake delta greater than initial stake.
+       **/
+      CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+      /**
+       * There is leader already, cannot hire another one.
+       **/
+      CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening with multiple applications.
+       **/
+      CannotHireMultipleLeaders: AugmentedError<ApiType>;
+      /**
+       * Reward could not be zero.
+       **/
+      CannotRewardWithZero: AugmentedError<ApiType>;
+      /**
+       * Invalid spending amount.
+       **/
+      CannotSpendZero: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Current lead is not set.
+       **/
+      CurrentLeadNotSet: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * It's not enough budget for this spending.
+       **/
+      InsufficientBudgetForSpending: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid origin for a member.
+       **/
+      InvalidMemberOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Not a lead account.
+       **/
+      IsNotLeadAccount: AugmentedError<ApiType>;
+      /**
+       * Working group size limit exceeded.
+       **/
+      MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening - no applications provided.
+       **/
+      NoApplicationsProvided: AugmentedError<ApiType>;
+      /**
+       * Opening does not exist.
+       **/
+      OpeningDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is not applicant.
+       **/
+      OriginIsNotApplicant: AugmentedError<ApiType>;
+      /**
+       * Signer is not worker role account.
+       **/
+      SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+      /**
+       * Provided stake balance cannot be zero.
+       **/
+      StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Successful worker application does not exist.
+       **/
+      SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Specified unstaking period is less then minimum set for the group.
+       **/
+      UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+      /**
+       * Worker application does not exist.
+       **/
+      WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker does not exist.
+       **/
+      WorkerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker has no recurring reward.
+       **/
+      WorkerHasNoReward: AugmentedError<ApiType>;
+      /**
+       * Invalid operation - worker is leaving.
+       **/
+      WorkerIsLeaving: AugmentedError<ApiType>;
+      /**
+       * Worker storage text is too long.
+       **/
+      WorkerStorageValueTooLong: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    council: {
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Origin is invalid.
+       **/
+      BadOrigin: AugmentedError<ApiType>;
+      /**
+       * Candidate haven't provided sufficient stake.
+       **/
+      CandidacyStakeTooLow: AugmentedError<ApiType>;
+      /**
+       * Candidate id not found
+       **/
+      CandidateDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * User tried to announce candidacy outside of the candidacy announcement period.
+       **/
+      CantCandidateNow: AugmentedError<ApiType>;
+      /**
+       * User tried to announce candidacy twice in the same elections.
+       **/
+      CantCandidateTwice: AugmentedError<ApiType>;
+      /**
+       * User tried to release stake outside of the revealing period.
+       **/
+      CantReleaseStakeNow: AugmentedError<ApiType>;
+      /**
+       * Candidate can't vote for himself.
+       **/
+      CantVoteForYourself: AugmentedError<ApiType>;
+      /**
+       * Can't withdraw candidacy outside of the candidacy announcement period.
+       **/
+      CantWithdrawCandidacyNow: AugmentedError<ApiType>;
+      /**
+       * User tried to announce candidacy with an account that has the conflicting type of stake
+       * with candidacy stake and has not enough balance for staking for both purposes.
+       **/
+      ConflictingStake: AugmentedError<ApiType>;
+      /**
+       * Funding requests without recieving accounts
+       **/
+      EmptyFundingRequests: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance for candidacy staking.
+       **/
+      InsufficientBalanceForStaking: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficent funds in council for executing 'Funding Request'
+       **/
+      InsufficientFundsForFundingRequest: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * The combination of membership id and account id is invalid for unstaking an existing
+       * candidacy stake.
+       **/
+      InvalidAccountToStakeReuse: AugmentedError<ApiType>;
+      /**
+       * Invalid membership.
+       **/
+      MemberIdNotMatchAccount: AugmentedError<ApiType>;
+      /**
+       * User tried to release stake when no stake exists.
+       **/
+      NoStake: AugmentedError<ApiType>;
+      /**
+       * User tried to withdraw candidacy when not candidating.
+       **/
+      NotCandidatingNow: AugmentedError<ApiType>;
+      /**
+       * The member is not a councilor.
+       **/
+      NotCouncilor: AugmentedError<ApiType>;
+      /**
+       * The same account is recieving funds from the same request twice
+       **/
+      RepeatedFundRequestAccount: AugmentedError<ApiType>;
+      /**
+       * Council member and candidates can't withdraw stake yet.
+       **/
+      StakeStillNeeded: AugmentedError<ApiType>;
+      /**
+       * Fund request no balance
+       **/
+      ZeroBalanceFundRequest: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    distributionWorkingGroup: {
+      /**
+       * Trying to fill opening with an application for other opening
+       **/
+      ApplicationsNotForOpening: AugmentedError<ApiType>;
+      /**
+       * Application stake is less than required opening stake.
+       **/
+      ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Staking less than the lower bound.
+       **/
+      BelowMinimumStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot decrease stake - stake delta greater than initial stake.
+       **/
+      CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+      /**
+       * There is leader already, cannot hire another one.
+       **/
+      CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening with multiple applications.
+       **/
+      CannotHireMultipleLeaders: AugmentedError<ApiType>;
+      /**
+       * Reward could not be zero.
+       **/
+      CannotRewardWithZero: AugmentedError<ApiType>;
+      /**
+       * Invalid spending amount.
+       **/
+      CannotSpendZero: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Current lead is not set.
+       **/
+      CurrentLeadNotSet: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * It's not enough budget for this spending.
+       **/
+      InsufficientBudgetForSpending: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid origin for a member.
+       **/
+      InvalidMemberOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Not a lead account.
+       **/
+      IsNotLeadAccount: AugmentedError<ApiType>;
+      /**
+       * Working group size limit exceeded.
+       **/
+      MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening - no applications provided.
+       **/
+      NoApplicationsProvided: AugmentedError<ApiType>;
+      /**
+       * Opening does not exist.
+       **/
+      OpeningDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is not applicant.
+       **/
+      OriginIsNotApplicant: AugmentedError<ApiType>;
+      /**
+       * Signer is not worker role account.
+       **/
+      SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+      /**
+       * Provided stake balance cannot be zero.
+       **/
+      StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Successful worker application does not exist.
+       **/
+      SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Specified unstaking period is less then minimum set for the group.
+       **/
+      UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+      /**
+       * Worker application does not exist.
+       **/
+      WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker does not exist.
+       **/
+      WorkerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker has no recurring reward.
+       **/
+      WorkerHasNoReward: AugmentedError<ApiType>;
+      /**
+       * Invalid operation - worker is leaving.
+       **/
+      WorkerIsLeaving: AugmentedError<ApiType>;
+      /**
+       * Worker storage text is too long.
+       **/
+      WorkerStorageValueTooLong: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    electionProviderMultiPhase: {
+      /**
+       * The call is not allowed at this point.
+       **/
+      CallNotAllowed: AugmentedError<ApiType>;
+      /**
+       * The fallback failed
+       **/
+      FallbackFailed: AugmentedError<ApiType>;
+      /**
+       * `Self::insert_submission` returned an invalid index.
+       **/
+      InvalidSubmissionIndex: AugmentedError<ApiType>;
+      /**
+       * Snapshot metadata should exist but didn't.
+       **/
+      MissingSnapshotMetadata: AugmentedError<ApiType>;
+      /**
+       * OCW submitted solution for wrong round
+       **/
+      OcwCallWrongEra: AugmentedError<ApiType>;
+      /**
+       * Submission was too early.
+       **/
+      PreDispatchEarlySubmission: AugmentedError<ApiType>;
+      /**
+       * Submission was too weak, score-wise.
+       **/
+      PreDispatchWeakSubmission: AugmentedError<ApiType>;
+      /**
+       * Wrong number of winners presented.
+       **/
+      PreDispatchWrongWinnerCount: AugmentedError<ApiType>;
+      /**
+       * The origin failed to pay the deposit.
+       **/
+      SignedCannotPayDeposit: AugmentedError<ApiType>;
+      /**
+       * Witness data to dispatchable is invalid.
+       **/
+      SignedInvalidWitness: AugmentedError<ApiType>;
+      /**
+       * The queue was full, and the solution was not better than any of the existing ones.
+       **/
+      SignedQueueFull: AugmentedError<ApiType>;
+      /**
+       * The signed submission consumes too much weight
+       **/
+      SignedTooMuchWeight: AugmentedError<ApiType>;
+    };
+    forum: {
+      /**
+       * Account does not match post author.
+       **/
+      AccountDoesNotMatchPostAuthor: AugmentedError<ApiType>;
+      /**
+       * Thread not authored by the given user.
+       **/
+      AccountDoesNotMatchThreadAuthor: AugmentedError<ApiType>;
+      /**
+       * Ancestor category immutable, i.e. deleted or archived
+       **/
+      AncestorCategoryImmutable: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * A thread with outstanding posts cannot be removed
+       **/
+      CannotDeleteThreadWithOutstandingPosts: AugmentedError<ApiType>;
+      /**
+       * Category does not exist.
+       **/
+      CategoryDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Provided moderator is not given category moderator
+       **/
+      CategoryModeratorDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Category not being updated.
+       **/
+      CategoryNotBeingUpdated: AugmentedError<ApiType>;
+      /**
+       * Category still contains some subcategories.
+       **/
+      CategoryNotEmptyCategories: AugmentedError<ApiType>;
+      /**
+       * Category still contains some threads.
+       **/
+      CategoryNotEmptyThreads: AugmentedError<ApiType>;
+      /**
+       * Forum user id not match its account.
+       **/
+      ForumUserIdNotMatchAccount: AugmentedError<ApiType>;
+      /**
+       * Not enough balance to post
+       **/
+      InsufficientBalanceForPost: AugmentedError<ApiType>;
+      /**
+       * Not enough balance to create thread
+       **/
+      InsufficientBalanceForThreadCreation: AugmentedError<ApiType>;
+      /**
+       * Maximum size of storage map exceeded
+       **/
+      MapSizeLimit: AugmentedError<ApiType>;
+      /**
+       * Maximum number of stickied threads per category exceeded
+       **/
+      MaxNumberOfStickiedThreadsExceeded: AugmentedError<ApiType>;
+      /**
+       * Maximum valid category depth exceeded.
+       **/
+      MaxValidCategoryDepthExceeded: AugmentedError<ApiType>;
+      /**
+       * No permissions to delete category.
+       **/
+      ModeratorCantDeleteCategory: AugmentedError<ApiType>;
+      /**
+       * No permissions to update category.
+       **/
+      ModeratorCantUpdateCategory: AugmentedError<ApiType>;
+      /**
+       * Moderator id not match its account.
+       **/
+      ModeratorIdNotMatchAccount: AugmentedError<ApiType>;
+      /**
+       * Moderator can't moderate destination category.
+       **/
+      ModeratorModerateDestinationCategory: AugmentedError<ApiType>;
+      /**
+       * Moderator can't moderate category containing thread.
+       **/
+      ModeratorModerateOriginCategory: AugmentedError<ApiType>;
+      /**
+       * Origin doesn't correspond to any lead account
+       **/
+      OriginNotForumLead: AugmentedError<ApiType>;
+      /**
+       * Category path len should be greater than zero
+       **/
+      PathLengthShouldBeGreaterThanZero: AugmentedError<ApiType>;
+      /**
+       * Post does not exist.
+       **/
+      PostDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Thread does not exist
+       **/
+      ThreadDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is the same as the destination.
+       **/
+      ThreadMoveInvalid: AugmentedError<ApiType>;
+      /**
+       * Thread not being updated.
+       **/
+      ThreadNotBeingUpdated: AugmentedError<ApiType>;
+    };
+    forumWorkingGroup: {
+      /**
+       * Trying to fill opening with an application for other opening
+       **/
+      ApplicationsNotForOpening: AugmentedError<ApiType>;
+      /**
+       * Application stake is less than required opening stake.
+       **/
+      ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Staking less than the lower bound.
+       **/
+      BelowMinimumStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot decrease stake - stake delta greater than initial stake.
+       **/
+      CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+      /**
+       * There is leader already, cannot hire another one.
+       **/
+      CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening with multiple applications.
+       **/
+      CannotHireMultipleLeaders: AugmentedError<ApiType>;
+      /**
+       * Reward could not be zero.
+       **/
+      CannotRewardWithZero: AugmentedError<ApiType>;
+      /**
+       * Invalid spending amount.
+       **/
+      CannotSpendZero: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Current lead is not set.
+       **/
+      CurrentLeadNotSet: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * It's not enough budget for this spending.
+       **/
+      InsufficientBudgetForSpending: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid origin for a member.
+       **/
+      InvalidMemberOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Not a lead account.
+       **/
+      IsNotLeadAccount: AugmentedError<ApiType>;
+      /**
+       * Working group size limit exceeded.
+       **/
+      MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening - no applications provided.
+       **/
+      NoApplicationsProvided: AugmentedError<ApiType>;
+      /**
+       * Opening does not exist.
+       **/
+      OpeningDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is not applicant.
+       **/
+      OriginIsNotApplicant: AugmentedError<ApiType>;
+      /**
+       * Signer is not worker role account.
+       **/
+      SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+      /**
+       * Provided stake balance cannot be zero.
+       **/
+      StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Successful worker application does not exist.
+       **/
+      SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Specified unstaking period is less then minimum set for the group.
+       **/
+      UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+      /**
+       * Worker application does not exist.
+       **/
+      WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker does not exist.
+       **/
+      WorkerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker has no recurring reward.
+       **/
+      WorkerHasNoReward: AugmentedError<ApiType>;
+      /**
+       * Invalid operation - worker is leaving.
+       **/
+      WorkerIsLeaving: AugmentedError<ApiType>;
+      /**
+       * Worker storage text is too long.
+       **/
+      WorkerStorageValueTooLong: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    grandpa: {
+      /**
+       * Attempt to signal GRANDPA change with one already pending.
+       **/
+      ChangePending: AugmentedError<ApiType>;
+      /**
+       * A given equivocation report is valid but already previously reported.
+       **/
+      DuplicateOffenceReport: AugmentedError<ApiType>;
+      /**
+       * An equivocation proof provided as part of an equivocation report is invalid.
+       **/
+      InvalidEquivocationProof: AugmentedError<ApiType>;
+      /**
+       * A key ownership proof provided as part of an equivocation report is invalid.
+       **/
+      InvalidKeyOwnershipProof: AugmentedError<ApiType>;
+      /**
+       * Attempt to signal GRANDPA pause when the authority set isn't live
+       * (either paused or already pending pause).
+       **/
+      PauseFailed: AugmentedError<ApiType>;
+      /**
+       * Attempt to signal GRANDPA resume when the authority set isn't paused
+       * (either live or already pending resume).
+       **/
+      ResumeFailed: AugmentedError<ApiType>;
+      /**
+       * Cannot signal forced change so soon after last.
+       **/
+      TooSoon: AugmentedError<ApiType>;
+    };
+    imOnline: {
+      /**
+       * Duplicated heartbeat.
+       **/
+      DuplicatedHeartbeat: AugmentedError<ApiType>;
+      /**
+       * Non existent public key.
+       **/
+      InvalidKey: AugmentedError<ApiType>;
+    };
+    joystreamUtility: {
+      /**
+       * Insufficient funds for 'Update Working Group Budget' proposal execution
+       **/
+      InsufficientFundsForBudgetUpdate: AugmentedError<ApiType>;
+      /**
+       * Insufficient funds for burning
+       **/
+      InsufficientFundsForBurn: AugmentedError<ApiType>;
+      /**
+       * Trying to burn zero tokens
+       **/
+      ZeroTokensBurn: AugmentedError<ApiType>;
+    };
+    members: {
+      /**
+       * Cannot set a referral cut percent value. The limit was exceeded.
+       **/
+      CannotExceedReferralCutPercentLimit: AugmentedError<ApiType>;
+      /**
+       * Should be a member to receive invites.
+       **/
+      CannotTransferInvitesForNotMember: AugmentedError<ApiType>;
+      /**
+       * Cannot invite a member. The controller account has an existing conflicting lock.
+       **/
+      ConflictingLock: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Controller account required.
+       **/
+      ControllerAccountRequired: AugmentedError<ApiType>;
+      /**
+       * Locked amount is greater than credit amount
+       **/
+      GifLockExceedsCredit: AugmentedError<ApiType>;
+      /**
+       * Handle already registered.
+       **/
+      HandleAlreadyRegistered: AugmentedError<ApiType>;
+      /**
+       * Handle must be provided during registration.
+       **/
+      HandleMustBeProvidedDuringRegistration: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover payment.
+       **/
+      InsufficientBalanceToCoverPayment: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * Gifter doesn't have sufficient balance to credit
+       **/
+      InsufficientBalanceToGift: AugmentedError<ApiType>;
+      /**
+       * Member profile not found (invalid member id).
+       **/
+      MemberProfileNotFound: AugmentedError<ApiType>;
+      /**
+       * Not enough balance to buy membership.
+       **/
+      NotEnoughBalanceToBuyMembership: AugmentedError<ApiType>;
+      /**
+       * Not enough invites to perform an operation.
+       **/
+      NotEnoughInvites: AugmentedError<ApiType>;
+      /**
+       * Cannot find a membership for a provided referrer id.
+       **/
+      ReferrerIsNotMember: AugmentedError<ApiType>;
+      /**
+       * Root account required.
+       **/
+      RootAccountRequired: AugmentedError<ApiType>;
+      /**
+       * Staking account has already been confirmed.
+       **/
+      StakingAccountAlreadyConfirmed: AugmentedError<ApiType>;
+      /**
+       * Staking account for membership doesn't exist.
+       **/
+      StakingAccountDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Staking account is registered for some member.
+       **/
+      StakingAccountIsAlreadyRegistered: AugmentedError<ApiType>;
+      /**
+       * Unsigned origin.
+       **/
+      UnsignedOrigin: AugmentedError<ApiType>;
+      /**
+       * Cannot invite a member. Working group balance is not sufficient to set the default
+       * balance.
+       **/
+      WorkingGroupBudgetIsNotSufficientForInviting: AugmentedError<ApiType>;
+      /**
+       * Membership working group leader is not set.
+       **/
+      WorkingGroupLeaderNotSet: AugmentedError<ApiType>;
+    };
+    membershipWorkingGroup: {
+      /**
+       * Trying to fill opening with an application for other opening
+       **/
+      ApplicationsNotForOpening: AugmentedError<ApiType>;
+      /**
+       * Application stake is less than required opening stake.
+       **/
+      ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Staking less than the lower bound.
+       **/
+      BelowMinimumStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot decrease stake - stake delta greater than initial stake.
+       **/
+      CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+      /**
+       * There is leader already, cannot hire another one.
+       **/
+      CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening with multiple applications.
+       **/
+      CannotHireMultipleLeaders: AugmentedError<ApiType>;
+      /**
+       * Reward could not be zero.
+       **/
+      CannotRewardWithZero: AugmentedError<ApiType>;
+      /**
+       * Invalid spending amount.
+       **/
+      CannotSpendZero: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Current lead is not set.
+       **/
+      CurrentLeadNotSet: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * It's not enough budget for this spending.
+       **/
+      InsufficientBudgetForSpending: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid origin for a member.
+       **/
+      InvalidMemberOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Not a lead account.
+       **/
+      IsNotLeadAccount: AugmentedError<ApiType>;
+      /**
+       * Working group size limit exceeded.
+       **/
+      MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening - no applications provided.
+       **/
+      NoApplicationsProvided: AugmentedError<ApiType>;
+      /**
+       * Opening does not exist.
+       **/
+      OpeningDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is not applicant.
+       **/
+      OriginIsNotApplicant: AugmentedError<ApiType>;
+      /**
+       * Signer is not worker role account.
+       **/
+      SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+      /**
+       * Provided stake balance cannot be zero.
+       **/
+      StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Successful worker application does not exist.
+       **/
+      SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Specified unstaking period is less then minimum set for the group.
+       **/
+      UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+      /**
+       * Worker application does not exist.
+       **/
+      WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker does not exist.
+       **/
+      WorkerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker has no recurring reward.
+       **/
+      WorkerHasNoReward: AugmentedError<ApiType>;
+      /**
+       * Invalid operation - worker is leaving.
+       **/
+      WorkerIsLeaving: AugmentedError<ApiType>;
+      /**
+       * Worker storage text is too long.
+       **/
+      WorkerStorageValueTooLong: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    multisig: {
+      /**
+       * Call is already approved by this signatory.
+       **/
+      AlreadyApproved: AugmentedError<ApiType>;
+      /**
+       * The data to be stored is already stored.
+       **/
+      AlreadyStored: AugmentedError<ApiType>;
+      /**
+       * The maximum weight information provided was too low.
+       **/
+      MaxWeightTooLow: AugmentedError<ApiType>;
+      /**
+       * Threshold must be 2 or greater.
+       **/
+      MinimumThreshold: AugmentedError<ApiType>;
+      /**
+       * Call doesn't need any (more) approvals.
+       **/
+      NoApprovalsNeeded: AugmentedError<ApiType>;
+      /**
+       * Multisig operation not found when attempting to cancel.
+       **/
+      NotFound: AugmentedError<ApiType>;
+      /**
+       * No timepoint was given, yet the multisig operation is already underway.
+       **/
+      NoTimepoint: AugmentedError<ApiType>;
+      /**
+       * Only the account that originally created the multisig is able to cancel it.
+       **/
+      NotOwner: AugmentedError<ApiType>;
+      /**
+       * The sender was contained in the other signatories; it shouldn't be.
+       **/
+      SenderInSignatories: AugmentedError<ApiType>;
+      /**
+       * The signatories were provided out of order; they should be ordered.
+       **/
+      SignatoriesOutOfOrder: AugmentedError<ApiType>;
+      /**
+       * There are too few signatories in the list.
+       **/
+      TooFewSignatories: AugmentedError<ApiType>;
+      /**
+       * There are too many signatories in the list.
+       **/
+      TooManySignatories: AugmentedError<ApiType>;
+      /**
+       * A timepoint was given, yet no multisig operation is underway.
+       **/
+      UnexpectedTimepoint: AugmentedError<ApiType>;
+      /**
+       * A different timepoint was given to the multisig operation that is underway.
+       **/
+      WrongTimepoint: AugmentedError<ApiType>;
+    };
+    operationsWorkingGroupAlpha: {
+      /**
+       * Trying to fill opening with an application for other opening
+       **/
+      ApplicationsNotForOpening: AugmentedError<ApiType>;
+      /**
+       * Application stake is less than required opening stake.
+       **/
+      ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Staking less than the lower bound.
+       **/
+      BelowMinimumStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot decrease stake - stake delta greater than initial stake.
+       **/
+      CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+      /**
+       * There is leader already, cannot hire another one.
+       **/
+      CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening with multiple applications.
+       **/
+      CannotHireMultipleLeaders: AugmentedError<ApiType>;
+      /**
+       * Reward could not be zero.
+       **/
+      CannotRewardWithZero: AugmentedError<ApiType>;
+      /**
+       * Invalid spending amount.
+       **/
+      CannotSpendZero: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Current lead is not set.
+       **/
+      CurrentLeadNotSet: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * It's not enough budget for this spending.
+       **/
+      InsufficientBudgetForSpending: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid origin for a member.
+       **/
+      InvalidMemberOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Not a lead account.
+       **/
+      IsNotLeadAccount: AugmentedError<ApiType>;
+      /**
+       * Working group size limit exceeded.
+       **/
+      MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening - no applications provided.
+       **/
+      NoApplicationsProvided: AugmentedError<ApiType>;
+      /**
+       * Opening does not exist.
+       **/
+      OpeningDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is not applicant.
+       **/
+      OriginIsNotApplicant: AugmentedError<ApiType>;
+      /**
+       * Signer is not worker role account.
+       **/
+      SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+      /**
+       * Provided stake balance cannot be zero.
+       **/
+      StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Successful worker application does not exist.
+       **/
+      SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Specified unstaking period is less then minimum set for the group.
+       **/
+      UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+      /**
+       * Worker application does not exist.
+       **/
+      WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker does not exist.
+       **/
+      WorkerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker has no recurring reward.
+       **/
+      WorkerHasNoReward: AugmentedError<ApiType>;
+      /**
+       * Invalid operation - worker is leaving.
+       **/
+      WorkerIsLeaving: AugmentedError<ApiType>;
+      /**
+       * Worker storage text is too long.
+       **/
+      WorkerStorageValueTooLong: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    operationsWorkingGroupBeta: {
+      /**
+       * Trying to fill opening with an application for other opening
+       **/
+      ApplicationsNotForOpening: AugmentedError<ApiType>;
+      /**
+       * Application stake is less than required opening stake.
+       **/
+      ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Staking less than the lower bound.
+       **/
+      BelowMinimumStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot decrease stake - stake delta greater than initial stake.
+       **/
+      CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+      /**
+       * There is leader already, cannot hire another one.
+       **/
+      CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening with multiple applications.
+       **/
+      CannotHireMultipleLeaders: AugmentedError<ApiType>;
+      /**
+       * Reward could not be zero.
+       **/
+      CannotRewardWithZero: AugmentedError<ApiType>;
+      /**
+       * Invalid spending amount.
+       **/
+      CannotSpendZero: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Current lead is not set.
+       **/
+      CurrentLeadNotSet: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * It's not enough budget for this spending.
+       **/
+      InsufficientBudgetForSpending: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid origin for a member.
+       **/
+      InvalidMemberOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Not a lead account.
+       **/
+      IsNotLeadAccount: AugmentedError<ApiType>;
+      /**
+       * Working group size limit exceeded.
+       **/
+      MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening - no applications provided.
+       **/
+      NoApplicationsProvided: AugmentedError<ApiType>;
+      /**
+       * Opening does not exist.
+       **/
+      OpeningDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is not applicant.
+       **/
+      OriginIsNotApplicant: AugmentedError<ApiType>;
+      /**
+       * Signer is not worker role account.
+       **/
+      SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+      /**
+       * Provided stake balance cannot be zero.
+       **/
+      StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Successful worker application does not exist.
+       **/
+      SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Specified unstaking period is less then minimum set for the group.
+       **/
+      UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+      /**
+       * Worker application does not exist.
+       **/
+      WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker does not exist.
+       **/
+      WorkerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker has no recurring reward.
+       **/
+      WorkerHasNoReward: AugmentedError<ApiType>;
+      /**
+       * Invalid operation - worker is leaving.
+       **/
+      WorkerIsLeaving: AugmentedError<ApiType>;
+      /**
+       * Worker storage text is too long.
+       **/
+      WorkerStorageValueTooLong: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    operationsWorkingGroupGamma: {
+      /**
+       * Trying to fill opening with an application for other opening
+       **/
+      ApplicationsNotForOpening: AugmentedError<ApiType>;
+      /**
+       * Application stake is less than required opening stake.
+       **/
+      ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Staking less than the lower bound.
+       **/
+      BelowMinimumStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot decrease stake - stake delta greater than initial stake.
+       **/
+      CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+      /**
+       * There is leader already, cannot hire another one.
+       **/
+      CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening with multiple applications.
+       **/
+      CannotHireMultipleLeaders: AugmentedError<ApiType>;
+      /**
+       * Reward could not be zero.
+       **/
+      CannotRewardWithZero: AugmentedError<ApiType>;
+      /**
+       * Invalid spending amount.
+       **/
+      CannotSpendZero: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Current lead is not set.
+       **/
+      CurrentLeadNotSet: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * It's not enough budget for this spending.
+       **/
+      InsufficientBudgetForSpending: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid origin for a member.
+       **/
+      InvalidMemberOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Not a lead account.
+       **/
+      IsNotLeadAccount: AugmentedError<ApiType>;
+      /**
+       * Working group size limit exceeded.
+       **/
+      MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening - no applications provided.
+       **/
+      NoApplicationsProvided: AugmentedError<ApiType>;
+      /**
+       * Opening does not exist.
+       **/
+      OpeningDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is not applicant.
+       **/
+      OriginIsNotApplicant: AugmentedError<ApiType>;
+      /**
+       * Signer is not worker role account.
+       **/
+      SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+      /**
+       * Provided stake balance cannot be zero.
+       **/
+      StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Successful worker application does not exist.
+       **/
+      SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Specified unstaking period is less then minimum set for the group.
+       **/
+      UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+      /**
+       * Worker application does not exist.
+       **/
+      WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker does not exist.
+       **/
+      WorkerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker has no recurring reward.
+       **/
+      WorkerHasNoReward: AugmentedError<ApiType>;
+      /**
+       * Invalid operation - worker is leaving.
+       **/
+      WorkerIsLeaving: AugmentedError<ApiType>;
+      /**
+       * Worker storage text is too long.
+       **/
+      WorkerStorageValueTooLong: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    projectToken: {
+      /**
+       * Account Already exists
+       **/
+      AccountAlreadyExists: AugmentedError<ApiType>;
+      /**
+       * Requested account data does not exist
+       **/
+      AccountInformationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Attempt to remove an account with some outstanding tokens
+       **/
+      AttemptToRemoveNonEmptyAccount: AugmentedError<ApiType>;
+      /**
+       * Attempt to remove non owned account under permissioned mode
+       **/
+      AttemptToRemoveNonOwnedAccountUnderPermissionedMode: AugmentedError<ApiType>;
+      /**
+       * Amount of tokens to burn exceeds total amount of tokens owned by the account
+       **/
+      BurnAmountGreaterThanAccountTokensAmount: AugmentedError<ApiType>;
+      /**
+       * Provided amount to burn is == 0
+       **/
+      BurnAmountIsZero: AugmentedError<ApiType>;
+      /**
+       * Cannot Deissue Token with outstanding accounts
+       **/
+      CannotDeissueTokenWithOutstandingAccounts: AugmentedError<ApiType>;
+      /**
+       * No Sale if Amm is active
+       **/
+      CannotInitSaleIfAmmIsActive: AugmentedError<ApiType>;
+      /**
+       * Attempt to issue in a split with zero allocation amount
+       **/
+      CannotIssueSplitWithZeroAllocationAmount: AugmentedError<ApiType>;
+      /**
+       * Cannot join whitelist in permissionless mode
+       **/
+      CannotJoinWhitelistInPermissionlessMode: AugmentedError<ApiType>;
+      /**
+       * Attempt to modify supply when revenue split is active
+       **/
+      CannotModifySupplyWhenRevenueSplitsAreActive: AugmentedError<ApiType>;
+      /**
+       * Attempt to participate in a split with zero token to stake
+       **/
+      CannotParticipateInSplitWithZeroAmount: AugmentedError<ApiType>;
+      /**
+       * Curve slope parameters below minimum allowed
+       **/
+      CurveSlopeParametersTooLow: AugmentedError<ApiType>;
+      /**
+       * Deadline constraint not satisfied
+       **/
+      DeadlineExpired: AugmentedError<ApiType>;
+      /**
+       * At least one of the members provided as part of InitialAllocation does not exist
+       **/
+      InitialAllocationToNonExistingMember: AugmentedError<ApiType>;
+      /**
+       * User does not posses enough balance to participate in the revenue split
+       **/
+      InsufficientBalanceForSplitParticipation: AugmentedError<ApiType>;
+      /**
+       * Account's JOY balance is insufficient to make the token purchase
+       **/
+      InsufficientBalanceForTokenPurchase: AugmentedError<ApiType>;
+      /**
+       * Insufficient JOY Balance to cover the transaction costs
+       **/
+      InsufficientJoyBalance: AugmentedError<ApiType>;
+      /**
+       * Creator token balance is insufficient
+       **/
+      InsufficientTokenBalance: AugmentedError<ApiType>;
+      /**
+       * Account's transferrable balance is insufficient to perform the transfer or initialize token sale
+       **/
+      InsufficientTransferrableBalance: AugmentedError<ApiType>;
+      /**
+       * Invalid bonding curve construction parameters
+       **/
+      InvalidCurveParameters: AugmentedError<ApiType>;
+      /**
+       * The amount of JOY to be transferred is not enough to keep the destination account alive
+       **/
+      JoyTransferSubjectToDusting: AugmentedError<ApiType>;
+      /**
+       * Cannot add another vesting schedule to an account.
+       * Maximum number of vesting schedules for this account-token pair was reached.
+       **/
+      MaxVestingSchedulesPerAccountPerTokenReached: AugmentedError<ApiType>;
+      /**
+       * Merkle proof verification failed
+       **/
+      MerkleProofVerificationFailure: AugmentedError<ApiType>;
+      /**
+       * The token has no active sale at the moment
+       **/
+      NoActiveSale: AugmentedError<ApiType>;
+      /**
+       * Amount of tokens to purchase on sale exceeds the quantity of tokens still available on the sale
+       **/
+      NotEnoughTokensOnSale: AugmentedError<ApiType>;
+      /**
+       * ------ AMM ---------------------------------------------------------
+       * not in AMM state
+       **/
+      NotInAmmState: AugmentedError<ApiType>;
+      /**
+       * There are no remaining tokes to recover from the previous token sale.
+       **/
+      NoTokensToRecover: AugmentedError<ApiType>;
+      /**
+       * The token has no upcoming sale
+       **/
+      NoUpcomingSale: AugmentedError<ApiType>;
+      /**
+       * Oustanding AMM-provided supply constitutes too large percentage of the token's total supply
+       **/
+      OutstandingAmmProvidedSupplyTooLarge: AugmentedError<ApiType>;
+      /**
+       * Previous sale was still not finalized, finalize it first.
+       **/
+      PreviousSaleNotFinalized: AugmentedError<ApiType>;
+      /**
+       * Attempt to activate split with one ongoing
+       **/
+      RevenueSplitAlreadyActiveForToken: AugmentedError<ApiType>;
+      /**
+       * Revenue Split has not ended yet
+       **/
+      RevenueSplitDidNotEnd: AugmentedError<ApiType>;
+      /**
+       * Revenue Split duration is too short
+       **/
+      RevenueSplitDurationTooShort: AugmentedError<ApiType>;
+      /**
+       * Attempt to make revenue split operations with token not in active split state
+       **/
+      RevenueSplitNotActiveForToken: AugmentedError<ApiType>;
+      /**
+       * Revenue Split for token active, but not ongoing
+       **/
+      RevenueSplitNotOngoing: AugmentedError<ApiType>;
+      /**
+       * Revenue split rate cannot be 0
+       **/
+      RevenueSplitRateIsZero: AugmentedError<ApiType>;
+      /**
+       * Specified revenue split starting block is in the past
+       **/
+      RevenueSplitTimeToStartTooShort: AugmentedError<ApiType>;
+      /**
+       * Participant in sale access proof provided during `purchase_tokens_on_sale`
+       * does not match the sender account
+       **/
+      SaleAccessProofParticipantIsNotSender: AugmentedError<ApiType>;
+      /**
+       * Only whitelisted participants are allowed to access the sale, therefore access proof is required
+       **/
+      SaleAccessProofRequired: AugmentedError<ApiType>;
+      /**
+       * Purchase cap per member cannot be zero
+       **/
+      SaleCapPerMemberIsZero: AugmentedError<ApiType>;
+      /**
+       * Sale duration cannot be zero
+       **/
+      SaleDurationIsZero: AugmentedError<ApiType>;
+      /**
+       * Specified sale duration is shorter than MinSaleDuration
+       **/
+      SaleDurationTooShort: AugmentedError<ApiType>;
+      /**
+       * Amount of tokens to purchase on sale cannot be zero
+       **/
+      SalePurchaseAmountIsZero: AugmentedError<ApiType>;
+      /**
+       * Sale participant's cap (either cap_per_member or whitelisted participant's specific cap)
+       * was exceeded with the purchase
+       **/
+      SalePurchaseCapExceeded: AugmentedError<ApiType>;
+      /**
+       * Specified sale starting block is in the past
+       **/
+      SaleStartingBlockInThePast: AugmentedError<ApiType>;
+      /**
+       * Token's unit price cannot be zero
+       **/
+      SaleUnitPriceIsZero: AugmentedError<ApiType>;
+      /**
+       * Upper bound quantity cannot be zero
+       **/
+      SaleUpperBoundQuantityIsZero: AugmentedError<ApiType>;
+      /**
+       * Slippage tolerance constraint tolerance not satisfied
+       **/
+      SlippageToleranceExceeded: AugmentedError<ApiType>;
+      /**
+       * -------- Patronage --------------------------------------------------
+       * Target Rate is higher than current patronage rate
+       **/
+      TargetPatronageRateIsHigherThanCurrentRate: AugmentedError<ApiType>;
+      /**
+       * Requested token does not exist
+       **/
+      TokenDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Token's current offering state is not Idle
+       **/
+      TokenIssuanceNotInIdleState: AugmentedError<ApiType>;
+      /**
+       * Symbol already in use
+       **/
+      TokenSymbolAlreadyInUse: AugmentedError<ApiType>;
+      /**
+       * Transfer destination member id invalid
+       **/
+      TooManyTransferOutputs: AugmentedError<ApiType>;
+      /**
+       * At least one of the transfer destinations is not an existing member id
+       **/
+      TransferDestinationMemberDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * User already participating in the revenue split
+       **/
+      UserAlreadyParticipating: AugmentedError<ApiType>;
+      /**
+       * User is not participating in any split
+       **/
+      UserNotParticipantingInAnySplit: AugmentedError<ApiType>;
+      /**
+       * Provided value for patronage is too big (yearly format)
+       **/
+      YearlyPatronageRateLimitExceeded: AugmentedError<ApiType>;
+    };
+    proposalsCodex: {
+      /**
+       * Arithmeic Error
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Invalid 'decrease stake proposal' parameter - cannot decrease by zero balance.
+       **/
+      DecreasingStakeIsZero: AugmentedError<ApiType>;
+      /**
+       * Insufficient funds for 'Update Working Group Budget' proposal execution
+       **/
+      InsufficientFundsForBudgetUpdate: AugmentedError<ApiType>;
+      /**
+       * The specified min channel cashout is greater than the specified max channel cashout in `Update Channel Payouts` proposal.
+       **/
+      InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout: AugmentedError<ApiType>;
+      /**
+       * Invalid council election parameter - announcing_period
+       **/
+      InvalidCouncilElectionParameterAnnouncingPeriod: AugmentedError<ApiType>;
+      /**
+       * Invalid council election parameter - candidacy-limit
+       **/
+      InvalidCouncilElectionParameterCandidacyLimit: AugmentedError<ApiType>;
+      /**
+       * Invalid council election parameter - council_size
+       **/
+      InvalidCouncilElectionParameterCouncilSize: AugmentedError<ApiType>;
+      /**
+       * Invalid council election parameter - min_council_stake
+       **/
+      InvalidCouncilElectionParameterMinCouncilStake: AugmentedError<ApiType>;
+      /**
+       * Invalid council election parameter - min-voting_stake
+       **/
+      InvalidCouncilElectionParameterMinVotingStake: AugmentedError<ApiType>;
+      /**
+       * Invalid council election parameter - new_term_duration
+       **/
+      InvalidCouncilElectionParameterNewTermDuration: AugmentedError<ApiType>;
+      /**
+       * Invalid council election parameter - revealing_period
+       **/
+      InvalidCouncilElectionParameterRevealingPeriod: AugmentedError<ApiType>;
+      /**
+       * Invalid council election parameter - voting_period
+       **/
+      InvalidCouncilElectionParameterVotingPeriod: AugmentedError<ApiType>;
+      /**
+       * Invalid balance value for the spending proposal
+       **/
+      InvalidFundingRequestProposalBalance: AugmentedError<ApiType>;
+      /**
+       * Invalid number of accounts recieving funding request for 'Funding Request' proposal.
+       **/
+      InvalidFundingRequestProposalNumberOfAccount: AugmentedError<ApiType>;
+      /**
+       * Repeated account in 'Funding Request' proposal.
+       **/
+      InvalidFundingRequestProposalRepeatedAccount: AugmentedError<ApiType>;
+      /**
+       * Provided lead application id is not valid
+       **/
+      InvalidLeadApplicationId: AugmentedError<ApiType>;
+      /**
+       * Provided lead opening id is not valid
+       **/
+      InvalidLeadOpeningId: AugmentedError<ApiType>;
+      /**
+       * Provided lead worker id is not valid
+       **/
+      InvalidLeadWorkerId: AugmentedError<ApiType>;
+      /**
+       * Provided proposal id is not valid
+       **/
+      InvalidProposalId: AugmentedError<ApiType>;
+      /**
+       * Invalid 'set lead proposal' parameter - proposed lead cannot be a councilor
+       **/
+      InvalidSetLeadParameterCannotBeCouncilor: AugmentedError<ApiType>;
+      /**
+       * Invalid validator count for the 'set validator count' proposal
+       **/
+      InvalidValidatorCount: AugmentedError<ApiType>;
+      /**
+       * Invalid working group budget capacity parameter
+       **/
+      InvalidWorkingGroupBudgetCapacity: AugmentedError<ApiType>;
+      /**
+       * Max yearly patronage rate cannot be zero
+       **/
+      MaxYearlyPatronageRateCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Require root origin in extrinsics
+       **/
+      RequireRootOrigin: AugmentedError<ApiType>;
+      /**
+       * Provided WASM code for the runtime upgrade proposal is empty
+       **/
+      RuntimeProposalIsEmpty: AugmentedError<ApiType>;
+      /**
+       * Provided text for text proposal is empty
+       **/
+      SignalProposalIsEmpty: AugmentedError<ApiType>;
+      /**
+       * Invalid 'slash stake proposal' parameter - cannot slash by zero balance.
+       **/
+      SlashingStakeIsZero: AugmentedError<ApiType>;
+    };
+    proposalsDiscussion: {
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Account can't delete post at the moment
+       **/
+      CannotDeletePost: AugmentedError<ApiType>;
+      /**
+       * The thread has Closed mode. And post author doesn't belong to council or allowed members.
+       **/
+      CannotPostOnClosedThread: AugmentedError<ApiType>;
+      /**
+       * Account has insufficient balance to create a post
+       **/
+      InsufficientBalanceForPost: AugmentedError<ApiType>;
+      /**
+       * Max allowed authors list limit exceeded.
+       **/
+      MaxWhiteListSizeExceeded: AugmentedError<ApiType>;
+      /**
+       * Should be thread author or councilor.
+       **/
+      NotAuthorOrCouncilor: AugmentedError<ApiType>;
+      /**
+       * Post doesn't exist
+       **/
+      PostDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Require root origin in extrinsics
+       **/
+      RequireRootOrigin: AugmentedError<ApiType>;
+      /**
+       * Thread doesn't exist
+       **/
+      ThreadDoesntExist: AugmentedError<ApiType>;
+      /**
+       * At least one of the member ids provided as part of closed thread whitelist belongs
+       * to a non-existing member.
+       **/
+      WhitelistedMemberDoesNotExist: AugmentedError<ApiType>;
+    };
+    proposalsEngine: {
+      /**
+       * The proposal have been already voted on
+       **/
+      AlreadyVoted: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * The conflicting stake discovered. Cannot stake.
+       **/
+      ConflictingStakes: AugmentedError<ApiType>;
+      /**
+       * Description is too long
+       **/
+      DescriptionIsTooLong: AugmentedError<ApiType>;
+      /**
+       * Proposal cannot have an empty body
+       **/
+      EmptyDescriptionProvided: AugmentedError<ApiType>;
+      /**
+       * Stake cannot be empty with this proposal
+       **/
+      EmptyStake: AugmentedError<ApiType>;
+      /**
+       * Proposal cannot have an empty title"
+       **/
+      EmptyTitleProvided: AugmentedError<ApiType>;
+      /**
+       * There is not enough balance for a stake.
+       **/
+      InsufficientBalanceForStake: AugmentedError<ApiType>;
+      /**
+       * Exact execution block cannot be less than current_block.
+       **/
+      InvalidExactExecutionBlock: AugmentedError<ApiType>;
+      /**
+       * Approval threshold cannot be zero
+       **/
+      InvalidParameterApprovalThreshold: AugmentedError<ApiType>;
+      /**
+       * Slashing threshold cannot be zero
+       **/
+      InvalidParameterSlashingThreshold: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Max active proposals number exceeded
+       **/
+      MaxActiveProposalNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * The size of encoded dispatchable call to be executed by the proposal is too big
+       **/
+      MaxDispatchableCallCodeSizeExceeded: AugmentedError<ApiType>;
+      /**
+       * Not an author
+       **/
+      NotAuthor: AugmentedError<ApiType>;
+      /**
+       * Proposal is finalized already
+       **/
+      ProposalFinalized: AugmentedError<ApiType>;
+      /**
+       * Disallow to cancel the proposal if there are any votes on it.
+       **/
+      ProposalHasVotes: AugmentedError<ApiType>;
+      /**
+       * The proposal does not exist
+       **/
+      ProposalNotFound: AugmentedError<ApiType>;
+      /**
+       * Require root origin in extrinsics
+       **/
+      RequireRootOrigin: AugmentedError<ApiType>;
+      /**
+       * Stake differs from the proposal requirements
+       **/
+      StakeDiffersFromRequired: AugmentedError<ApiType>;
+      /**
+       * Stake should be empty for this proposal
+       **/
+      StakeShouldBeEmpty: AugmentedError<ApiType>;
+      /**
+       * Title is too long
+       **/
+      TitleIsTooLong: AugmentedError<ApiType>;
+      /**
+       * Exact execution block cannot be zero.
+       **/
+      ZeroExactExecutionBlock: AugmentedError<ApiType>;
+    };
+    referendum: {
+      /**
+       * A vote cannot be cast from an account that already opted out of voting.
+       **/
+      AccountAlreadyOptedOutOfVoting: AugmentedError<ApiType>;
+      /**
+       * Trying to vote multiple time in the same cycle
+       **/
+      AlreadyVotedThisCycle: AugmentedError<ApiType>;
+      /**
+       * Origin is invalid
+       **/
+      BadOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Account Insufficient Free Balance (now)
+       **/
+      InsufficientBalanceToStake: AugmentedError<ApiType>;
+      /**
+       * Insufficient stake provided to cast a vote
+       **/
+      InsufficientStake: AugmentedError<ApiType>;
+      /**
+       * Salt and referendum option provided don't correspond to the commitment
+       **/
+      InvalidReveal: AugmentedError<ApiType>;
+      /**
+       * Vote for not existing option was revealed
+       **/
+      InvalidVote: AugmentedError<ApiType>;
+      /**
+       * Referendum is not running when expected to
+       **/
+      ReferendumNotRunning: AugmentedError<ApiType>;
+      /**
+       * Revealing stage is not in progress right now
+       **/
+      RevealingNotInProgress: AugmentedError<ApiType>;
+      /**
+       * Salt is too long
+       **/
+      SaltTooLong: AugmentedError<ApiType>;
+      /**
+       * Unstaking has been forbidden for the user (at least for now)
+       **/
+      UnstakingForbidden: AugmentedError<ApiType>;
+      /**
+       * Invalid time to release the locked stake
+       **/
+      UnstakingVoteInSameCycle: AugmentedError<ApiType>;
+      /**
+       * Trying to reveal vote that was not cast
+       **/
+      VoteNotExisting: AugmentedError<ApiType>;
+    };
+    session: {
+      /**
+       * Registered duplicate key.
+       **/
+      DuplicatedKey: AugmentedError<ApiType>;
+      /**
+       * Invalid ownership proof.
+       **/
+      InvalidProof: AugmentedError<ApiType>;
+      /**
+       * Key setting account is not live, so it's impossible to associate keys.
+       **/
+      NoAccount: AugmentedError<ApiType>;
+      /**
+       * No associated validator ID for account.
+       **/
+      NoAssociatedValidatorId: AugmentedError<ApiType>;
+      /**
+       * No keys are associated with this account.
+       **/
+      NoKeys: AugmentedError<ApiType>;
+    };
+    staking: {
+      /**
+       * Stash is already bonded.
+       **/
+      AlreadyBonded: AugmentedError<ApiType>;
+      /**
+       * Rewards for this era have already been claimed for this validator.
+       **/
+      AlreadyClaimed: AugmentedError<ApiType>;
+      /**
+       * Controller is already paired.
+       **/
+      AlreadyPaired: AugmentedError<ApiType>;
+      /**
+       * Internal state has become somehow corrupted and the operation cannot continue.
+       **/
+      BadState: AugmentedError<ApiType>;
+      /**
+       * A nomination target was supplied that was blocked or otherwise not a validator.
+       **/
+      BadTarget: AugmentedError<ApiType>;
+      /**
+       * External restriction prevents bonding with given account
+       **/
+      BondingRestricted: AugmentedError<ApiType>;
+      /**
+       * The user has enough bond and thus cannot be chilled forcefully by an external person.
+       **/
+      CannotChillOther: AugmentedError<ApiType>;
+      /**
+       * Commission is too low. Must be at least `MinCommission`.
+       **/
+      CommissionTooLow: AugmentedError<ApiType>;
+      /**
+       * Duplicate index.
+       **/
+      DuplicateIndex: AugmentedError<ApiType>;
+      /**
+       * Targets cannot be empty.
+       **/
+      EmptyTargets: AugmentedError<ApiType>;
+      /**
+       * Attempting to target a stash that still has funds.
+       **/
+      FundedTarget: AugmentedError<ApiType>;
+      /**
+       * Incorrect previous history depth input provided.
+       **/
+      IncorrectHistoryDepth: AugmentedError<ApiType>;
+      /**
+       * Incorrect number of slashing spans provided.
+       **/
+      IncorrectSlashingSpans: AugmentedError<ApiType>;
+      /**
+       * Cannot have a validator or nominator role, with value less than the minimum defined by
+       * governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the
+       * intention, `chill` first to remove one's role as validator/nominator.
+       **/
+      InsufficientBond: AugmentedError<ApiType>;
+      /**
+       * Invalid era to reward.
+       **/
+      InvalidEraToReward: AugmentedError<ApiType>;
+      /**
+       * Invalid number of nominations.
+       **/
+      InvalidNumberOfNominations: AugmentedError<ApiType>;
+      /**
+       * Slash record index out of bounds.
+       **/
+      InvalidSlashIndex: AugmentedError<ApiType>;
+      /**
+       * Can not schedule more unlock chunks.
+       **/
+      NoMoreChunks: AugmentedError<ApiType>;
+      /**
+       * Not a controller account.
+       **/
+      NotController: AugmentedError<ApiType>;
+      /**
+       * Items are not sorted and unique.
+       **/
+      NotSortedAndUnique: AugmentedError<ApiType>;
+      /**
+       * Not a stash account.
+       **/
+      NotStash: AugmentedError<ApiType>;
+      /**
+       * Can not rebond without unlocking chunks.
+       **/
+      NoUnlockChunk: AugmentedError<ApiType>;
+      /**
+       * There are too many nominators in the system. Governance needs to adjust the staking
+       * settings to keep things safe for the runtime.
+       **/
+      TooManyNominators: AugmentedError<ApiType>;
+      /**
+       * Too many nomination targets supplied.
+       **/
+      TooManyTargets: AugmentedError<ApiType>;
+      /**
+       * There are too many validators in the system. Governance needs to adjust the staking
+       * settings to keep things safe for the runtime.
+       **/
+      TooManyValidators: AugmentedError<ApiType>;
+    };
+    storage: {
+      /**
+       * Generic Arithmetic Error due to internal accounting operation
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Blacklist size limit exceeded.
+       **/
+      BlacklistSizeLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Call Disabled
+       **/
+      CallDisabled: AugmentedError<ApiType>;
+      /**
+       * Cannot delete non empty dynamic bag.
+       **/
+      CannotDeleteNonEmptyDynamicBag: AugmentedError<ApiType>;
+      /**
+       * Cannot delete a non-empty storage bucket.
+       **/
+      CannotDeleteNonEmptyStorageBucket: AugmentedError<ApiType>;
+      /**
+       * Data object hash is part of the blacklist.
+       **/
+      DataObjectBlacklisted: AugmentedError<ApiType>;
+      /**
+       * Data object doesn't exist.
+       **/
+      DataObjectDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Data object id collection is empty.
+       **/
+      DataObjectIdCollectionIsEmpty: AugmentedError<ApiType>;
+      /**
+       * The `data_object_ids` extrinsic parameter collection is empty.
+       **/
+      DataObjectIdParamsAreEmpty: AugmentedError<ApiType>;
+      /**
+       * Invalid extrinsic call: data object state bloat bond changed.
+       **/
+      DataObjectStateBloatBondChanged: AugmentedError<ApiType>;
+      /**
+       * Invalid extrinsic call: data size fee changed.
+       **/
+      DataSizeFeeChanged: AugmentedError<ApiType>;
+      /**
+       * Invalid operation with invites: another storage provider was invited.
+       **/
+      DifferentStorageProviderInvited: AugmentedError<ApiType>;
+      /**
+       * Distribution bucket doesn't accept new bags.
+       **/
+      DistributionBucketDoesntAcceptNewBags: AugmentedError<ApiType>;
+      /**
+       * Distribution bucket doesn't exist.
+       **/
+      DistributionBucketDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Distribution bucket family doesn't exist.
+       **/
+      DistributionBucketFamilyDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Distribution bucket id collections are empty.
+       **/
+      DistributionBucketIdCollectionsAreEmpty: AugmentedError<ApiType>;
+      /**
+       * Distribution bucket is bound to a bag.
+       **/
+      DistributionBucketIsBoundToBag: AugmentedError<ApiType>;
+      /**
+       * Distribution bucket is not bound to a bag.
+       **/
+      DistributionBucketIsNotBoundToBag: AugmentedError<ApiType>;
+      /**
+       * The new `DistributionBucketsPerBagLimit` number is too high.
+       **/
+      DistributionBucketsPerBagLimitTooHigh: AugmentedError<ApiType>;
+      /**
+       * The new `DistributionBucketsPerBagLimit` number is too low.
+       **/
+      DistributionBucketsPerBagLimitTooLow: AugmentedError<ApiType>;
+      /**
+       * Distribution bucket id collection provided contradicts the existing dynamic bag
+       * creation policy.
+       **/
+      DistributionBucketsViolatesDynamicBagCreationPolicy: AugmentedError<ApiType>;
+      /**
+       * Distribution family bound to a bag creation policy.
+       **/
+      DistributionFamilyBoundToBagCreationPolicy: AugmentedError<ApiType>;
+      /**
+       * Distribution provider operator already invited.
+       **/
+      DistributionProviderOperatorAlreadyInvited: AugmentedError<ApiType>;
+      /**
+       * Distribution provider operator doesn't exist.
+       **/
+      DistributionProviderOperatorDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Distribution provider operator already set.
+       **/
+      DistributionProviderOperatorSet: AugmentedError<ApiType>;
+      /**
+       * Dynamic bag doesn't exist.
+       **/
+      DynamicBagDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Cannot create the dynamic bag: dynamic bag exists.
+       **/
+      DynamicBagExists: AugmentedError<ApiType>;
+      /**
+       * Upload data error: empty content ID provided.
+       **/
+      EmptyContentId: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance for an operation.
+       **/
+      InsufficientBalance: AugmentedError<ApiType>;
+      /**
+       * Insufficient module treasury balance for an operation.
+       **/
+      InsufficientTreasuryBalance: AugmentedError<ApiType>;
+      /**
+       * Invalid CID length (must be 46 bytes)
+       **/
+      InvalidCidLength: AugmentedError<ApiType>;
+      /**
+       * Upload data error: invalid state bloat bond source account.
+       **/
+      InvalidStateBloatBondSourceAccount: AugmentedError<ApiType>;
+      /**
+       * Invalid storage provider for bucket.
+       **/
+      InvalidStorageProvider: AugmentedError<ApiType>;
+      /**
+       * Invalid transactor account ID for this bucket.
+       **/
+      InvalidTransactorAccount: AugmentedError<ApiType>;
+      /**
+       * Invalid operation with invites: storage provider was already invited.
+       **/
+      InvitedStorageProvider: AugmentedError<ApiType>;
+      /**
+       * Max data object size exceeded.
+       **/
+      MaxDataObjectSizeExceeded: AugmentedError<ApiType>;
+      /**
+       * Max distribution bucket family number limit exceeded.
+       **/
+      MaxDistributionBucketFamilyNumberLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Max distribution bucket number per bag limit exceeded.
+       **/
+      MaxDistributionBucketNumberPerBagLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Max number of operators for a distribution bucket reached.
+       **/
+      MaxNumberOfOperatorsPerDistributionBucketReached: AugmentedError<ApiType>;
+      /**
+       * Max number of pending invitations limit for a distribution bucket reached.
+       **/
+      MaxNumberOfPendingInvitationsLimitForDistributionBucketReached: AugmentedError<ApiType>;
+      /**
+       * Invalid operations: must be a distribution provider operator for a bucket.
+       **/
+      MustBeDistributionProviderOperatorForBucket: AugmentedError<ApiType>;
+      /**
+       * No distribution bucket invitation.
+       **/
+      NoDistributionBucketInvitation: AugmentedError<ApiType>;
+      /**
+       * Empty "data object creation" collection.
+       **/
+      NoObjectsOnUpload: AugmentedError<ApiType>;
+      /**
+       * Invalid operation with invites: there is no storage bucket invitation.
+       **/
+      NoStorageBucketInvitation: AugmentedError<ApiType>;
+      /**
+       * Not allowed 'number of distribution buckets'
+       **/
+      NumberOfDistributionBucketsOutsideOfAllowedContraints: AugmentedError<ApiType>;
+      /**
+       * Not allowed 'number of storage buckets'
+       **/
+      NumberOfStorageBucketsOutsideOfAllowedContraints: AugmentedError<ApiType>;
+      /**
+       * Cannot move objects within the same bag.
+       **/
+      SourceAndDestinationBagsAreEqual: AugmentedError<ApiType>;
+      /**
+       * The storage bucket doesn't accept new bags.
+       **/
+      StorageBucketDoesntAcceptNewBags: AugmentedError<ApiType>;
+      /**
+       * The requested storage bucket doesn't exist.
+       **/
+      StorageBucketDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Storage bucket id collections are empty.
+       **/
+      StorageBucketIdCollectionsAreEmpty: AugmentedError<ApiType>;
+      /**
+       * The requested storage bucket is already bound to a bag.
+       **/
+      StorageBucketIsBoundToBag: AugmentedError<ApiType>;
+      /**
+       * The requested storage bucket is not bound to a bag.
+       **/
+      StorageBucketIsNotBoundToBag: AugmentedError<ApiType>;
+      /**
+       * Object number limit for the storage bucket reached.
+       **/
+      StorageBucketObjectNumberLimitReached: AugmentedError<ApiType>;
+      /**
+       * Objects total size limit for the storage bucket reached.
+       **/
+      StorageBucketObjectSizeLimitReached: AugmentedError<ApiType>;
+      /**
+       * `StorageBucketsPerBagLimit` was exceeded for a bag.
+       **/
+      StorageBucketPerBagLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Storage bucket id collection provided contradicts the existing dynamic bag
+       * creation policy.
+       **/
+      StorageBucketsNumberViolatesDynamicBagCreationPolicy: AugmentedError<ApiType>;
+      /**
+       * The new `StorageBucketsPerBagLimit` number is too high.
+       **/
+      StorageBucketsPerBagLimitTooHigh: AugmentedError<ApiType>;
+      /**
+       * The new `StorageBucketsPerBagLimit` number is too low.
+       **/
+      StorageBucketsPerBagLimitTooLow: AugmentedError<ApiType>;
+      /**
+       * Invalid operation with invites: storage provider was already set.
+       **/
+      StorageProviderAlreadySet: AugmentedError<ApiType>;
+      /**
+       * Storage provider must be set.
+       **/
+      StorageProviderMustBeSet: AugmentedError<ApiType>;
+      /**
+       * Storage provider operator doesn't exist.
+       **/
+      StorageProviderOperatorDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Uploading of the new object is blocked.
+       **/
+      UploadingBlocked: AugmentedError<ApiType>;
+      /**
+       * Max object number limit exceeded for voucher.
+       **/
+      VoucherMaxObjectNumberLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Max object size limit exceeded for voucher.
+       **/
+      VoucherMaxObjectSizeLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Upload data error: zero object size.
+       **/
+      ZeroObjectSize: AugmentedError<ApiType>;
+    };
+    storageWorkingGroup: {
+      /**
+       * Trying to fill opening with an application for other opening
+       **/
+      ApplicationsNotForOpening: AugmentedError<ApiType>;
+      /**
+       * Application stake is less than required opening stake.
+       **/
+      ApplicationStakeDoesntMatchOpening: AugmentedError<ApiType>;
+      /**
+       * Unexpected arithmetic error (overflow / underflow)
+       **/
+      ArithmeticError: AugmentedError<ApiType>;
+      /**
+       * Staking less than the lower bound.
+       **/
+      BelowMinimumStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot decrease stake - stake delta greater than initial stake.
+       **/
+      CannotDecreaseStakeDeltaGreaterThanStake: AugmentedError<ApiType>;
+      /**
+       * There is leader already, cannot hire another one.
+       **/
+      CannotHireLeaderWhenLeaderExists: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening with multiple applications.
+       **/
+      CannotHireMultipleLeaders: AugmentedError<ApiType>;
+      /**
+       * Reward could not be zero.
+       **/
+      CannotRewardWithZero: AugmentedError<ApiType>;
+      /**
+       * Invalid spending amount.
+       **/
+      CannotSpendZero: AugmentedError<ApiType>;
+      /**
+       * Staking account contains conflicting stakes.
+       **/
+      ConflictStakesOnAccount: AugmentedError<ApiType>;
+      /**
+       * Current lead is not set.
+       **/
+      CurrentLeadNotSet: AugmentedError<ApiType>;
+      /**
+       * Cannot withdraw: insufficient budget balance.
+       **/
+      InsufficientBalanceForTransfer: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover stake.
+       **/
+      InsufficientBalanceToCoverStake: AugmentedError<ApiType>;
+      /**
+       * It's not enough budget for this spending.
+       **/
+      InsufficientBudgetForSpending: AugmentedError<ApiType>;
+      /**
+       * Insufficient tokens for funding (on member controller account)
+       **/
+      InsufficientTokensForFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid origin for a member.
+       **/
+      InvalidMemberOrigin: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Not a lead account.
+       **/
+      IsNotLeadAccount: AugmentedError<ApiType>;
+      /**
+       * Working group size limit exceeded.
+       **/
+      MaxActiveWorkerNumberExceeded: AugmentedError<ApiType>;
+      /**
+       * Cannot fill opening - no applications provided.
+       **/
+      NoApplicationsProvided: AugmentedError<ApiType>;
+      /**
+       * Opening does not exist.
+       **/
+      OpeningDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Origin is not applicant.
+       **/
+      OriginIsNotApplicant: AugmentedError<ApiType>;
+      /**
+       * Signer is not worker role account.
+       **/
+      SignerIsNotWorkerRoleAccount: AugmentedError<ApiType>;
+      /**
+       * Provided stake balance cannot be zero.
+       **/
+      StakeBalanceCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Successful worker application does not exist.
+       **/
+      SuccessfulWorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Specified unstaking period is less then minimum set for the group.
+       **/
+      UnstakingPeriodLessThanMinimum: AugmentedError<ApiType>;
+      /**
+       * Worker application does not exist.
+       **/
+      WorkerApplicationDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker does not exist.
+       **/
+      WorkerDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Worker has no recurring reward.
+       **/
+      WorkerHasNoReward: AugmentedError<ApiType>;
+      /**
+       * Invalid operation - worker is leaving.
+       **/
+      WorkerIsLeaving: AugmentedError<ApiType>;
+      /**
+       * Worker storage text is too long.
+       **/
+      WorkerStorageValueTooLong: AugmentedError<ApiType>;
+      /**
+       * Trying to fund with zero tokens
+       **/
+      ZeroTokensFunding: AugmentedError<ApiType>;
+    };
+    system: {
+      /**
+       * The origin filter prevent the call to be dispatched.
+       **/
+      CallFiltered: AugmentedError<ApiType>;
+      /**
+       * Failed to extract the runtime version from the new runtime.
+       * 
+       * Either calling `Core_version` or decoding `RuntimeVersion` failed.
+       **/
+      FailedToExtractRuntimeVersion: AugmentedError<ApiType>;
+      /**
+       * The name of specification does not match between the current runtime
+       * and the new runtime.
+       **/
+      InvalidSpecName: AugmentedError<ApiType>;
+      /**
+       * Suicide called when the account has non-default composite data.
+       **/
+      NonDefaultComposite: AugmentedError<ApiType>;
+      /**
+       * There is a non-zero reference count preventing the account from being purged.
+       **/
+      NonZeroRefCount: AugmentedError<ApiType>;
+      /**
+       * The specification version is not allowed to decrease between the current runtime
+       * and the new runtime.
+       **/
+      SpecVersionNeedsToIncrease: AugmentedError<ApiType>;
+    };
+    utility: {
+      /**
+       * Too many calls batched.
+       **/
+      TooManyCalls: AugmentedError<ApiType>;
+    };
+    vesting: {
+      /**
+       * Amount being transferred is too low to create a vesting schedule.
+       **/
+      AmountLow: AugmentedError<ApiType>;
+      /**
+       * The account already has `MaxVestingSchedules` count of schedules and thus
+       * cannot add another one. Consider merging existing schedules in order to add another.
+       **/
+      AtMaxVestingSchedules: AugmentedError<ApiType>;
+      /**
+       * Failed to create a new schedule because some parameter was invalid.
+       **/
+      InvalidScheduleParams: AugmentedError<ApiType>;
+      /**
+       * The account given is not vesting.
+       **/
+      NotVesting: AugmentedError<ApiType>;
+      /**
+       * An index was out of bounds of the vesting schedules.
+       **/
+      ScheduleIndexOutOfBounds: AugmentedError<ApiType>;
+    };
+  } // AugmentedErrors
+} // declare module
diff --git a/node_modules/@joystream/types/types/src/augment/augment-api-events.ts b/node_modules/@joystream/types/types/src/augment/augment-api-events.ts
new file mode 100644
index 0000000..8228b40
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/augment-api-events.ts
@@ -0,0 +1,2985 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+
+import type { ApiTypes } from '@polkadot/api-base/types';
+import type { BTreeMap, BTreeSet, Bytes, Null, Option, Result, U8aFixed, Vec, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
+import type { ITuple } from '@polkadot/types-codec/types';
+import type { AccountId32, H256, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmCurve, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenTransfers, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
+
+declare module '@polkadot/api-base/types/events' {
+  export interface AugmentedEvents<ApiType extends ApiTypes> {
+    appWorkingGroup: {
+      /**
+       * Emits on withdrawing the application for the regular worker/lead opening.
+       * Params:
+       * - Job application id
+       **/
+      ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on adding the application for the worker opening.
+       * Params:
+       * - Opening parameteres
+       * - Application id
+       **/
+      AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+      /**
+       * Emits on setting the budget for the working group.
+       * Params:
+       * - new budget
+       **/
+      BudgetSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on budget from the working group being spent
+       * Params:
+       * - Receiver Account Id.
+       * - Balance spent.
+       * - Rationale.
+       **/
+      BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Emits on setting the group leader.
+       * Params:
+       * - Group worker id.
+       **/
+      LeaderSet: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on un-setting the leader.
+       **/
+      LeaderUnset: AugmentedEvent<ApiType, []>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - message
+       **/
+      LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * Emits on reaching new missed reward.
+       * Params:
+       * - Worker ID.
+       * - Missed reward (optional). None means 'no missed reward'.
+       **/
+      NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on adding new job opening.
+       * Params:
+       * - Opening id
+       * - Description
+       * - Opening Type(Lead or Worker)
+       * - Stake Policy for the opening
+       * - Reward per block
+       **/
+      OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Emits on canceling the job opening.
+       * Params:
+       * - Opening id
+       **/
+      OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on filling the job opening.
+       * Params:
+       * - Worker opening id
+       * - Worker application id to the worker id dictionary
+       * - Applicationd ids used to fill the opening
+       **/
+      OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on paying the reward.
+       * Params:
+       * - Id of the worker.
+       * - Receiver Account Id.
+       * - Reward
+       * - Payment type (missed reward or regular one)
+       **/
+      RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+      /**
+       * Emits on decreasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on increasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on slashing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - actual slashed balance.
+       * - Requested slashed balance.
+       * - Rationale.
+       **/
+      StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+      /**
+       * Emits on updating the status text of the working group.
+       * Params:
+       * - status text hash
+       * - status text
+       **/
+      StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+      /**
+       * Emits on terminating the leader.
+       * Params:
+       * - leader worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on terminating the worker.
+       * Params:
+       * - worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on exiting the worker.
+       * Params:
+       * - worker id.
+       * - Rationale.
+       **/
+      WorkerExited: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - worker
+       * - message
+       **/
+      WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on updating the reward account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward account id of the worker.
+       **/
+      WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits on updating the reward amount of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward per block
+       **/
+      WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on updating the role account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Role account id of the worker.
+       **/
+      WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits when worker started leaving their role.
+       * Params:
+       * - Worker id.
+       * - Rationale.
+       **/
+      WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+      /**
+       * Fund the working group budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+    };
+    bagsList: {
+      /**
+       * Moved an account from one bag to another.
+       **/
+      Rebagged: AugmentedEvent<ApiType, [who: AccountId32, from: u64, to: u64], { who: AccountId32, from: u64, to: u64 }>;
+      /**
+       * Updated the score of some account to the given amount.
+       **/
+      ScoreUpdated: AugmentedEvent<ApiType, [who: AccountId32, newScore: u64], { who: AccountId32, newScore: u64 }>;
+    };
+    balances: {
+      /**
+       * A balance was set by root.
+       **/
+      BalanceSet: AugmentedEvent<ApiType, [who: AccountId32, free: u128, reserved: u128], { who: AccountId32, free: u128, reserved: u128 }>;
+      /**
+       * Some amount was deposited (e.g. for transaction fees).
+       **/
+      Deposit: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], { who: AccountId32, amount: u128 }>;
+      /**
+       * An account was removed whose balance was non-zero but below ExistentialDeposit,
+       * resulting in an outright loss.
+       **/
+      DustLost: AugmentedEvent<ApiType, [account: AccountId32, amount: u128], { account: AccountId32, amount: u128 }>;
+      /**
+       * An account was created with some free balance.
+       **/
+      Endowed: AugmentedEvent<ApiType, [account: AccountId32, freeBalance: u128], { account: AccountId32, freeBalance: u128 }>;
+      /**
+       * Some balance was reserved (moved from free to reserved).
+       **/
+      Reserved: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], { who: AccountId32, amount: u128 }>;
+      /**
+       * Some balance was moved from the reserve of the first account to the second account.
+       * Final argument indicates the destination balance type.
+       **/
+      ReserveRepatriated: AugmentedEvent<ApiType, [from: AccountId32, to: AccountId32, amount: u128, destinationStatus: FrameSupportTokensMiscBalanceStatus], { from: AccountId32, to: AccountId32, amount: u128, destinationStatus: FrameSupportTokensMiscBalanceStatus }>;
+      /**
+       * Some amount was removed from the account (e.g. for misbehavior).
+       **/
+      Slashed: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], { who: AccountId32, amount: u128 }>;
+      /**
+       * Transfer succeeded.
+       **/
+      Transfer: AugmentedEvent<ApiType, [from: AccountId32, to: AccountId32, amount: u128], { from: AccountId32, to: AccountId32, amount: u128 }>;
+      /**
+       * Some balance was unreserved (moved from reserved to free).
+       **/
+      Unreserved: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], { who: AccountId32, amount: u128 }>;
+      /**
+       * Some amount was withdrawn from the account (e.g. for transaction fees).
+       **/
+      Withdraw: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], { who: AccountId32, amount: u128 }>;
+    };
+    bounty: {
+      /**
+       * Bounty contributor made a message remark
+       * Params:
+       * - contributor
+       * - bounty id
+       * - message
+       **/
+      BountyContributorRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * A bounty was created.
+       * Params:
+       * - bounty ID
+       * - creation parameters
+       * - bounty metadata
+       **/
+      BountyCreated: AugmentedEvent<ApiType, [u64, PalletBountyBountyParametersBTreeSet, Bytes]>;
+      /**
+       * A bounty creator has withdrawn the cherry (member or council).
+       * Params:
+       * - bounty ID
+       * - bounty creator
+       **/
+      BountyCreatorCherryWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+      /**
+       * A bounty creator has withdrawn the oracle reward (member or council).
+       * Params:
+       * - bounty ID
+       * - bounty creator
+       **/
+      BountyCreatorOracleRewardWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+      /**
+       * Bounty creator made a message remark
+       * Params:
+       * - creator
+       * - bounty id
+       * - message
+       **/
+      BountyCreatorRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * Bounty entrant made a message remark
+       * Params:
+       * - entrant_id
+       * - bounty id
+       * - entry id
+       * - message
+       **/
+      BountyEntrantRemarked: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+      /**
+       * A bounty was funded by a member or a council.
+       * Params:
+       * - bounty ID
+       * - bounty funder
+       * - funding amount
+       **/
+      BountyFunded: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+      /**
+       * A member or a council has withdrawn the funding.
+       * Params:
+       * - bounty ID
+       * - bounty funder
+       **/
+      BountyFundingWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+      /**
+       * A bounty has reached its target funding amount.
+       * Params:
+       * - bounty ID
+       **/
+      BountyMaxFundingReached: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Bounty oracle made a message remark
+       * Params:
+       * - oracle
+       * - bounty id
+       * - message
+       **/
+      BountyOracleRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * A Oracle has withdrawn the oracle reward (member or council).
+       * Params:
+       * - bounty ID
+       * - bounty creator
+       * - Oracle Reward
+       **/
+      BountyOracleRewardWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+      /**
+       * Bounty Oracle Switched by current oracle or council.
+       * Params:
+       * - bounty ID
+       * - switcher
+       * - current_oracle,
+       * - new oracle
+       **/
+      BountyOracleSwitched: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+      /**
+       * A bounty was removed.
+       * Params:
+       * - bounty ID
+       **/
+      BountyRemoved: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * A bounty was terminated by council.
+       * Params:
+       * - bounty ID
+       * - bounty terminator
+       * - bounty creator
+       * - bounty oracle
+       **/
+      BountyTerminated: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+      /**
+       * A member or a council creator has withdrawn the creator state bloat bond.
+       * Params:
+       * - bounty ID
+       * - bounty creator
+       * - Creator State bloat bond amount
+       **/
+      CreatorStateBloatBondWithdrawn: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+      /**
+       * A member or a council funder has withdrawn the funder state bloat bond.
+       * Params:
+       * - bounty ID
+       * - bounty funder
+       * - funder State bloat bond amount
+       **/
+      FunderStateBloatBondWithdrawn: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+      /**
+       * Submit oracle judgment.
+       * Params:
+       * - bounty ID
+       * - oracle
+       * - judgment data
+       * - rationale
+       **/
+      OracleJudgmentSubmitted: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+      /**
+       * Work entry was slashed.
+       * Params:
+       * - bounty ID
+       * - entry ID
+       * - entrant member ID
+       **/
+      WorkEntrantFundsWithdrawn: AugmentedEvent<ApiType, [u64, u64, u64]>;
+      /**
+       * Work entry stake slashed.
+       * Params:
+       * - bounty ID
+       * - entry ID
+       * - stake account
+       * - slashed amount
+       **/
+      WorkEntrantStakeSlashed: AugmentedEvent<ApiType, [u64, u64, AccountId32, u128]>;
+      /**
+       * Work entry stake unlocked.
+       * Params:
+       * - bounty ID
+       * - entry ID
+       * - stake account
+       **/
+      WorkEntrantStakeUnlocked: AugmentedEvent<ApiType, [u64, u64, AccountId32]>;
+      /**
+       * Work entry was announced.
+       * Params:
+       * - bounty ID
+       * - created entry ID
+       * - entrant member ID
+       * - staking account ID
+       * - work description
+       **/
+      WorkEntryAnnounced: AugmentedEvent<ApiType, [u64, u64, u64, AccountId32, Bytes]>;
+      /**
+       * Work entry was slashed.
+       * Params:
+       * - bounty ID
+       * - oracle (caller)
+       **/
+      WorkSubmissionPeriodEnded: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+      /**
+       * Submit work.
+       * Params:
+       * - bounty ID
+       * - created entry ID
+       * - entrant member ID
+       * - work data (description, URL, BLOB, etc.)
+       **/
+      WorkSubmitted: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+    };
+    constitution: {
+      /**
+       * Emits on constitution amendment.
+       * Parameters:
+       * - constitution text hash
+       * - constitution text
+       **/
+      ConstutionAmended: AugmentedEvent<ApiType, [H256, Bytes]>;
+    };
+    content: {
+      AuctionBidCanceled: AugmentedEvent<ApiType, [u64, u64]>;
+      AuctionBidMade: AugmentedEvent<ApiType, [u64, u64, u128, Option<u64>]>;
+      AuctionCanceled: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64]>;
+      BidMadeCompletingAuction: AugmentedEvent<ApiType, [u64, u64, Option<u64>]>;
+      BuyNowCanceled: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor]>;
+      BuyNowPriceUpdated: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor, u128]>;
+      CancelChannelTransfer: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor]>;
+      ChannelAgentRemarked: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, Bytes]>;
+      ChannelAssetsDeletedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, Bytes]>;
+      ChannelAssetsRemoved: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, PalletContentChannelRecord]>;
+      ChannelCreated: AugmentedEvent<ApiType, [u64, PalletContentChannelRecord, PalletContentChannelCreationParametersRecord, AccountId32]>;
+      ChannelDeleted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64]>;
+      ChannelDeletedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, Bytes]>;
+      ChannelFundsWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
+      ChannelNftLimitUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, PalletContentNftLimitPeriod, u64, u64]>;
+      /**
+       * Metaprotocols related event
+       **/
+      ChannelOwnerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      ChannelPausedFeaturesUpdatedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
+      ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
+      ChannelPrivilegeLevelUpdated: AugmentedEvent<ApiType, [u64, u8]>;
+      ChannelRewardClaimedAndWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
+      ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u128, u64]>;
+      ChannelStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
+      ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
+      ChannelUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
+      ChannelVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+      CreatorTokenIssued: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64]>;
+      CreatorTokenIssuerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      CuratorAdded: AugmentedEvent<ApiType, [u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
+      CuratorGroupCreated: AugmentedEvent<ApiType, [u64]>;
+      CuratorGroupPermissionsUpdated: AugmentedEvent<ApiType, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
+      CuratorGroupStatusSet: AugmentedEvent<ApiType, [u64, bool]>;
+      CuratorRemoved: AugmentedEvent<ApiType, [u64, u64]>;
+      EnglishAuctionSettled: AugmentedEvent<ApiType, [u64, AccountId32, u64]>;
+      EnglishAuctionStarted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
+      GlobalNftLimitUpdated: AugmentedEvent<ApiType, [PalletContentNftLimitPeriod, u64]>;
+      InitializedChannelTransfer: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor, PalletContentPendingTransfer]>;
+      NftBought: AugmentedEvent<ApiType, [u64, u64]>;
+      NftDestroyed: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64]>;
+      NftIssued: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesNftIssuanceParametersRecord]>;
+      NftOwnerRemarked: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, Bytes]>;
+      NftSellOrderMade: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor, u128]>;
+      NftSlingedBackToTheOriginalArtist: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor]>;
+      OfferAccepted: AugmentedEvent<ApiType, [u64]>;
+      OfferCanceled: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor]>;
+      OfferStarted: AugmentedEvent<ApiType, [u64, PalletContentPermissionsContentActor, u64, Option<u128>]>;
+      OpenAuctionBidAccepted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64, u128]>;
+      OpenAuctionStarted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesOpenAuctionParamsRecord, u64]>;
+      ToggledNftLimits: AugmentedEvent<ApiType, [bool]>;
+      VideoAssetsDeletedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, bool, Bytes]>;
+      VideoCreated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64, PalletContentVideoCreationParametersRecord, BTreeSet<u64>]>;
+      VideoDeleted: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64]>;
+      VideoDeletedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, Bytes]>;
+      VideoStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
+      VideoUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentVideoUpdateParametersRecord, BTreeSet<u64>]>;
+      VideoVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+    };
+    contentWorkingGroup: {
+      /**
+       * Emits on withdrawing the application for the regular worker/lead opening.
+       * Params:
+       * - Job application id
+       **/
+      ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on adding the application for the worker opening.
+       * Params:
+       * - Opening parameteres
+       * - Application id
+       **/
+      AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+      /**
+       * Emits on setting the budget for the working group.
+       * Params:
+       * - new budget
+       **/
+      BudgetSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on budget from the working group being spent
+       * Params:
+       * - Receiver Account Id.
+       * - Balance spent.
+       * - Rationale.
+       **/
+      BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Emits on setting the group leader.
+       * Params:
+       * - Group worker id.
+       **/
+      LeaderSet: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on un-setting the leader.
+       **/
+      LeaderUnset: AugmentedEvent<ApiType, []>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - message
+       **/
+      LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * Emits on reaching new missed reward.
+       * Params:
+       * - Worker ID.
+       * - Missed reward (optional). None means 'no missed reward'.
+       **/
+      NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on adding new job opening.
+       * Params:
+       * - Opening id
+       * - Description
+       * - Opening Type(Lead or Worker)
+       * - Stake Policy for the opening
+       * - Reward per block
+       **/
+      OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Emits on canceling the job opening.
+       * Params:
+       * - Opening id
+       **/
+      OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on filling the job opening.
+       * Params:
+       * - Worker opening id
+       * - Worker application id to the worker id dictionary
+       * - Applicationd ids used to fill the opening
+       **/
+      OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on paying the reward.
+       * Params:
+       * - Id of the worker.
+       * - Receiver Account Id.
+       * - Reward
+       * - Payment type (missed reward or regular one)
+       **/
+      RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+      /**
+       * Emits on decreasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on increasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on slashing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - actual slashed balance.
+       * - Requested slashed balance.
+       * - Rationale.
+       **/
+      StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+      /**
+       * Emits on updating the status text of the working group.
+       * Params:
+       * - status text hash
+       * - status text
+       **/
+      StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+      /**
+       * Emits on terminating the leader.
+       * Params:
+       * - leader worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on terminating the worker.
+       * Params:
+       * - worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on exiting the worker.
+       * Params:
+       * - worker id.
+       * - Rationale.
+       **/
+      WorkerExited: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - worker
+       * - message
+       **/
+      WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on updating the reward account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward account id of the worker.
+       **/
+      WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits on updating the reward amount of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward per block
+       **/
+      WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on updating the role account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Role account id of the worker.
+       **/
+      WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits when worker started leaving their role.
+       * Params:
+       * - Worker id.
+       * - Rationale.
+       **/
+      WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+      /**
+       * Fund the working group budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+    };
+    council: {
+      /**
+       * New council was elected
+       **/
+      AnnouncingPeriodStarted: AugmentedEvent<ApiType, [u32]>;
+      /**
+       * Budget balance was changed by the root.
+       **/
+      BudgetBalanceSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Budget increment has been updated.
+       **/
+      BudgetIncrementUpdated: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Budget balance was increased by automatic refill.
+       **/
+      BudgetRefill: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * The next budget refill was planned.
+       **/
+      BudgetRefillPlanned: AugmentedEvent<ApiType, [u32]>;
+      /**
+       * The candidate has set a new note for their candidacy
+       **/
+      CandidacyNoteSet: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Candidacy stake that was no longer needed was released
+       **/
+      CandidacyStakeRelease: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Candidate has withdrawn his candidacy
+       **/
+      CandidacyWithdraw: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Candidate remark message
+       **/
+      CandidateRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Fund the council budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      CouncilBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+      /**
+       * Councilor remark message
+       **/
+      CouncilorRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Councilor reward has been updated.
+       **/
+      CouncilorRewardUpdated: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * New candidate announced
+       **/
+      NewCandidate: AugmentedEvent<ApiType, [u64, AccountId32, AccountId32, u128]>;
+      /**
+       * New council was elected and appointed
+       **/
+      NewCouncilElected: AugmentedEvent<ApiType, [Vec<u64>, u32]>;
+      /**
+       * New council was not elected
+       **/
+      NewCouncilNotElected: AugmentedEvent<ApiType, [u32]>;
+      /**
+       * Announcing period can't finish because of insufficient candidtate count
+       **/
+      NotEnoughCandidates: AugmentedEvent<ApiType, [u32]>;
+      /**
+       * Request has been funded
+       **/
+      RequestFunded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      /**
+       * The whole reward was paid to the council member.
+       **/
+      RewardPayment: AugmentedEvent<ApiType, [u64, AccountId32, u128, u128]>;
+      /**
+       * Candidates are announced and voting starts
+       **/
+      VotingPeriodStarted: AugmentedEvent<ApiType, [u32]>;
+    };
+    distributionWorkingGroup: {
+      /**
+       * Emits on withdrawing the application for the regular worker/lead opening.
+       * Params:
+       * - Job application id
+       **/
+      ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on adding the application for the worker opening.
+       * Params:
+       * - Opening parameteres
+       * - Application id
+       **/
+      AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+      /**
+       * Emits on setting the budget for the working group.
+       * Params:
+       * - new budget
+       **/
+      BudgetSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on budget from the working group being spent
+       * Params:
+       * - Receiver Account Id.
+       * - Balance spent.
+       * - Rationale.
+       **/
+      BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Emits on setting the group leader.
+       * Params:
+       * - Group worker id.
+       **/
+      LeaderSet: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on un-setting the leader.
+       **/
+      LeaderUnset: AugmentedEvent<ApiType, []>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - message
+       **/
+      LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * Emits on reaching new missed reward.
+       * Params:
+       * - Worker ID.
+       * - Missed reward (optional). None means 'no missed reward'.
+       **/
+      NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on adding new job opening.
+       * Params:
+       * - Opening id
+       * - Description
+       * - Opening Type(Lead or Worker)
+       * - Stake Policy for the opening
+       * - Reward per block
+       **/
+      OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Emits on canceling the job opening.
+       * Params:
+       * - Opening id
+       **/
+      OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on filling the job opening.
+       * Params:
+       * - Worker opening id
+       * - Worker application id to the worker id dictionary
+       * - Applicationd ids used to fill the opening
+       **/
+      OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on paying the reward.
+       * Params:
+       * - Id of the worker.
+       * - Receiver Account Id.
+       * - Reward
+       * - Payment type (missed reward or regular one)
+       **/
+      RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+      /**
+       * Emits on decreasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on increasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on slashing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - actual slashed balance.
+       * - Requested slashed balance.
+       * - Rationale.
+       **/
+      StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+      /**
+       * Emits on updating the status text of the working group.
+       * Params:
+       * - status text hash
+       * - status text
+       **/
+      StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+      /**
+       * Emits on terminating the leader.
+       * Params:
+       * - leader worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on terminating the worker.
+       * Params:
+       * - worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on exiting the worker.
+       * Params:
+       * - worker id.
+       * - Rationale.
+       **/
+      WorkerExited: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - worker
+       * - message
+       **/
+      WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on updating the reward account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward account id of the worker.
+       **/
+      WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits on updating the reward amount of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward per block
+       **/
+      WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on updating the role account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Role account id of the worker.
+       **/
+      WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits when worker started leaving their role.
+       * Params:
+       * - Worker id.
+       * - Rationale.
+       **/
+      WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+      /**
+       * Fund the working group budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+    };
+    electionProviderMultiPhase: {
+      /**
+       * The election has been finalized, with `Some` of the given computation, or else if the
+       * election failed, `None`.
+       **/
+      ElectionFinalized: AugmentedEvent<ApiType, [electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>], { electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute> }>;
+      /**
+       * An account has been rewarded for their signed submission being finalized.
+       **/
+      Rewarded: AugmentedEvent<ApiType, [account: AccountId32, value: u128], { account: AccountId32, value: u128 }>;
+      /**
+       * The signed phase of the given round has started.
+       **/
+      SignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], { round: u32 }>;
+      /**
+       * An account has been slashed for submitting an invalid signed submission.
+       **/
+      Slashed: AugmentedEvent<ApiType, [account: AccountId32, value: u128], { account: AccountId32, value: u128 }>;
+      /**
+       * A solution was stored with the given compute.
+       * 
+       * If the solution is signed, this means that it hasn't yet been processed. If the
+       * solution is unsigned, this means that it has also been processed.
+       * 
+       * The `bool` is `true` when a previous solution was ejected to make room for this one.
+       **/
+      SolutionStored: AugmentedEvent<ApiType, [electionCompute: PalletElectionProviderMultiPhaseElectionCompute, prevEjected: bool], { electionCompute: PalletElectionProviderMultiPhaseElectionCompute, prevEjected: bool }>;
+      /**
+       * The unsigned phase of the given round has started.
+       **/
+      UnsignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], { round: u32 }>;
+    };
+    forum: {
+      /**
+       * An arhical status of category with given id was updated.
+       * The second argument reflects the new archival status of the category.
+       **/
+      CategoryArchivalStatusUpdated: AugmentedEvent<ApiType, [u64, bool, PalletForumPrivilegedActor]>;
+      /**
+       * A category was introduced
+       **/
+      CategoryCreated: AugmentedEvent<ApiType, [u64, Option<u64>, Bytes, Bytes]>;
+      /**
+       * A category was deleted
+       **/
+      CategoryDeleted: AugmentedEvent<ApiType, [u64, PalletForumPrivilegedActor]>;
+      /**
+       * A discription of category with given id was updated.
+       * The second argument reflects the new description hash of the category.
+       **/
+      CategoryDescriptionUpdated: AugmentedEvent<ApiType, [u64, H256, PalletForumPrivilegedActor]>;
+      /**
+       * An moderator ability to moderate a category and its subcategories updated
+       **/
+      CategoryMembershipOfModeratorUpdated: AugmentedEvent<ApiType, [u64, u64, bool]>;
+      /**
+       * Sticky thread updated for category
+       **/
+      CategoryStickyThreadUpdate: AugmentedEvent<ApiType, [u64, BTreeSet<u64>, PalletForumPrivilegedActor]>;
+      /**
+       * A title of category with given id was updated.
+       * The second argument reflects the new title hash of the category.
+       **/
+      CategoryTitleUpdated: AugmentedEvent<ApiType, [u64, H256, PalletForumPrivilegedActor]>;
+      /**
+       * Post with given id was created.
+       **/
+      PostAdded: AugmentedEvent<ApiType, [u64, u64, u64, u64, Bytes, bool]>;
+      /**
+       * Post with givne id was deleted.
+       **/
+      PostDeleted: AugmentedEvent<ApiType, [Bytes, u64, BTreeMap<PalletForumExtendedPostIdObject, bool>]>;
+      /**
+       * Post with givne id was moderated.
+       **/
+      PostModerated: AugmentedEvent<ApiType, [u64, Bytes, PalletForumPrivilegedActor, u64, u64]>;
+      /**
+       * Post with given id had its text updated.
+       * The second argument reflects the number of total edits when the text update occurs.
+       **/
+      PostTextUpdated: AugmentedEvent<ApiType, [u64, u64, u64, u64, Bytes]>;
+      /**
+       * A thread with given id was created.
+       * A third argument reflects the initial post id of the thread.
+       **/
+      ThreadCreated: AugmentedEvent<ApiType, [u64, u64, u64, u64, Bytes, Bytes]>;
+      /**
+       * A thread was deleted.
+       **/
+      ThreadDeleted: AugmentedEvent<ApiType, [u64, u64, u64, bool]>;
+      /**
+       * A thread metadata given id was updated.
+       **/
+      ThreadMetadataUpdated: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+      /**
+       * A thread with given id was moderated.
+       **/
+      ThreadModerated: AugmentedEvent<ApiType, [u64, Bytes, PalletForumPrivilegedActor, u64]>;
+      /**
+       * A thread was moved to new category
+       **/
+      ThreadMoved: AugmentedEvent<ApiType, [u64, u64, PalletForumPrivilegedActor, u64]>;
+      /**
+       * A thread with given id was updated.
+       * The second argument reflects the new archival status of the thread.
+       **/
+      ThreadUpdated: AugmentedEvent<ApiType, [u64, bool, PalletForumPrivilegedActor, u64]>;
+    };
+    forumWorkingGroup: {
+      /**
+       * Emits on withdrawing the application for the regular worker/lead opening.
+       * Params:
+       * - Job application id
+       **/
+      ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on adding the application for the worker opening.
+       * Params:
+       * - Opening parameteres
+       * - Application id
+       **/
+      AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+      /**
+       * Emits on setting the budget for the working group.
+       * Params:
+       * - new budget
+       **/
+      BudgetSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on budget from the working group being spent
+       * Params:
+       * - Receiver Account Id.
+       * - Balance spent.
+       * - Rationale.
+       **/
+      BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Emits on setting the group leader.
+       * Params:
+       * - Group worker id.
+       **/
+      LeaderSet: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on un-setting the leader.
+       **/
+      LeaderUnset: AugmentedEvent<ApiType, []>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - message
+       **/
+      LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * Emits on reaching new missed reward.
+       * Params:
+       * - Worker ID.
+       * - Missed reward (optional). None means 'no missed reward'.
+       **/
+      NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on adding new job opening.
+       * Params:
+       * - Opening id
+       * - Description
+       * - Opening Type(Lead or Worker)
+       * - Stake Policy for the opening
+       * - Reward per block
+       **/
+      OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Emits on canceling the job opening.
+       * Params:
+       * - Opening id
+       **/
+      OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on filling the job opening.
+       * Params:
+       * - Worker opening id
+       * - Worker application id to the worker id dictionary
+       * - Applicationd ids used to fill the opening
+       **/
+      OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on paying the reward.
+       * Params:
+       * - Id of the worker.
+       * - Receiver Account Id.
+       * - Reward
+       * - Payment type (missed reward or regular one)
+       **/
+      RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+      /**
+       * Emits on decreasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on increasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on slashing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - actual slashed balance.
+       * - Requested slashed balance.
+       * - Rationale.
+       **/
+      StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+      /**
+       * Emits on updating the status text of the working group.
+       * Params:
+       * - status text hash
+       * - status text
+       **/
+      StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+      /**
+       * Emits on terminating the leader.
+       * Params:
+       * - leader worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on terminating the worker.
+       * Params:
+       * - worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on exiting the worker.
+       * Params:
+       * - worker id.
+       * - Rationale.
+       **/
+      WorkerExited: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - worker
+       * - message
+       **/
+      WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on updating the reward account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward account id of the worker.
+       **/
+      WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits on updating the reward amount of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward per block
+       **/
+      WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on updating the role account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Role account id of the worker.
+       **/
+      WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits when worker started leaving their role.
+       * Params:
+       * - Worker id.
+       * - Rationale.
+       **/
+      WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+      /**
+       * Fund the working group budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+    };
+    grandpa: {
+      /**
+       * New authority set has been applied.
+       **/
+      NewAuthorities: AugmentedEvent<ApiType, [authoritySet: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>], { authoritySet: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>> }>;
+      /**
+       * Current authority set has been paused.
+       **/
+      Paused: AugmentedEvent<ApiType, []>;
+      /**
+       * Current authority set has been resumed.
+       **/
+      Resumed: AugmentedEvent<ApiType, []>;
+    };
+    imOnline: {
+      /**
+       * At the end of the session, no offence was committed.
+       **/
+      AllGood: AugmentedEvent<ApiType, []>;
+      /**
+       * A new heartbeat was received from `AuthorityId`.
+       **/
+      HeartbeatReceived: AugmentedEvent<ApiType, [authorityId: PalletImOnlineSr25519AppSr25519Public], { authorityId: PalletImOnlineSr25519AppSr25519Public }>;
+      /**
+       * At the end of the session, at least one validator was found to be offline.
+       **/
+      SomeOffline: AugmentedEvent<ApiType, [offline: Vec<ITuple<[AccountId32, PalletStakingExposure]>>], { offline: Vec<ITuple<[AccountId32, PalletStakingExposure]>> }>;
+    };
+    joystreamUtility: {
+      /**
+       * A runtime upgrade was executed
+       * Params:
+       * - New code encoded in bytes
+       **/
+      RuntimeUpgraded: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * A signal proposal was executed
+       * Params:
+       * - Signal given when creating the corresponding proposal
+       **/
+      Signaled: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * An account burned tokens
+       * Params:
+       * - Account Id of the burning tokens
+       * - Balance burned from that account
+       **/
+      TokensBurned: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      /**
+       * An `Update Working Group Budget` proposal was executed
+       * Params:
+       * - Working group which budget is being updated
+       * - Amount of balance being moved
+       * - Enum variant with positive indicating funds moved torwards working group and negative
+       * and negative funds moving from the working group
+       **/
+      UpdatedWorkingGroupBudget: AugmentedEvent<ApiType, [PalletCommonWorkingGroupIterableEnumsWorkingGroup, u128, PalletCommonBalanceKind]>;
+    };
+    members: {
+      InitialInvitationBalanceUpdated: AugmentedEvent<ApiType, [u128]>;
+      InitialInvitationCountUpdated: AugmentedEvent<ApiType, [u32]>;
+      InvitesTransferred: AugmentedEvent<ApiType, [u64, u64, u32]>;
+      LeaderInvitationQuotaUpdated: AugmentedEvent<ApiType, [u32]>;
+      MemberAccountsUpdated: AugmentedEvent<ApiType, [u64, Option<AccountId32>, Option<AccountId32>]>;
+      MemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateMemberParameters, u32]>;
+      MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters, u128]>;
+      MemberProfileUpdated: AugmentedEvent<ApiType, [u64, Option<Bytes>, Option<Bytes>]>;
+      MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
+      MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters, u32]>;
+      MembershipGifted: AugmentedEvent<ApiType, [u64, PalletMembershipGiftMembershipParameters]>;
+      MembershipPriceUpdated: AugmentedEvent<ApiType, [u128]>;
+      MemberVerificationStatusUpdated: AugmentedEvent<ApiType, [u64, bool, u64]>;
+      ReferralCutUpdated: AugmentedEvent<ApiType, [u8]>;
+      StakingAccountAdded: AugmentedEvent<ApiType, [AccountId32, u64]>;
+      StakingAccountConfirmed: AugmentedEvent<ApiType, [AccountId32, u64]>;
+      StakingAccountRemoved: AugmentedEvent<ApiType, [AccountId32, u64]>;
+    };
+    membershipWorkingGroup: {
+      /**
+       * Emits on withdrawing the application for the regular worker/lead opening.
+       * Params:
+       * - Job application id
+       **/
+      ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on adding the application for the worker opening.
+       * Params:
+       * - Opening parameteres
+       * - Application id
+       **/
+      AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+      /**
+       * Emits on setting the budget for the working group.
+       * Params:
+       * - new budget
+       **/
+      BudgetSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on budget from the working group being spent
+       * Params:
+       * - Receiver Account Id.
+       * - Balance spent.
+       * - Rationale.
+       **/
+      BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Emits on setting the group leader.
+       * Params:
+       * - Group worker id.
+       **/
+      LeaderSet: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on un-setting the leader.
+       **/
+      LeaderUnset: AugmentedEvent<ApiType, []>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - message
+       **/
+      LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * Emits on reaching new missed reward.
+       * Params:
+       * - Worker ID.
+       * - Missed reward (optional). None means 'no missed reward'.
+       **/
+      NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on adding new job opening.
+       * Params:
+       * - Opening id
+       * - Description
+       * - Opening Type(Lead or Worker)
+       * - Stake Policy for the opening
+       * - Reward per block
+       **/
+      OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Emits on canceling the job opening.
+       * Params:
+       * - Opening id
+       **/
+      OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on filling the job opening.
+       * Params:
+       * - Worker opening id
+       * - Worker application id to the worker id dictionary
+       * - Applicationd ids used to fill the opening
+       **/
+      OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on paying the reward.
+       * Params:
+       * - Id of the worker.
+       * - Receiver Account Id.
+       * - Reward
+       * - Payment type (missed reward or regular one)
+       **/
+      RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+      /**
+       * Emits on decreasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on increasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on slashing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - actual slashed balance.
+       * - Requested slashed balance.
+       * - Rationale.
+       **/
+      StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+      /**
+       * Emits on updating the status text of the working group.
+       * Params:
+       * - status text hash
+       * - status text
+       **/
+      StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+      /**
+       * Emits on terminating the leader.
+       * Params:
+       * - leader worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on terminating the worker.
+       * Params:
+       * - worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on exiting the worker.
+       * Params:
+       * - worker id.
+       * - Rationale.
+       **/
+      WorkerExited: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - worker
+       * - message
+       **/
+      WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on updating the reward account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward account id of the worker.
+       **/
+      WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits on updating the reward amount of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward per block
+       **/
+      WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on updating the role account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Role account id of the worker.
+       **/
+      WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits when worker started leaving their role.
+       * Params:
+       * - Worker id.
+       * - Rationale.
+       **/
+      WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+      /**
+       * Fund the working group budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+    };
+    multisig: {
+      /**
+       * A multisig operation has been approved by someone.
+       **/
+      MultisigApproval: AugmentedEvent<ApiType, [approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed], { approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed }>;
+      /**
+       * A multisig operation has been cancelled.
+       **/
+      MultisigCancelled: AugmentedEvent<ApiType, [cancelling: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed], { cancelling: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed }>;
+      /**
+       * A multisig operation has been executed.
+       **/
+      MultisigExecuted: AugmentedEvent<ApiType, [approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed, result: Result<Null, SpRuntimeDispatchError>], { approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed, result: Result<Null, SpRuntimeDispatchError> }>;
+      /**
+       * A new multisig operation has begun.
+       **/
+      NewMultisig: AugmentedEvent<ApiType, [approving: AccountId32, multisig: AccountId32, callHash: U8aFixed], { approving: AccountId32, multisig: AccountId32, callHash: U8aFixed }>;
+    };
+    offences: {
+      /**
+       * There is an offence reported of the given `kind` happened at the `session_index` and
+       * (kind-specific) time slot. This event is not deposited for duplicate slashes.
+       * \[kind, timeslot\].
+       **/
+      Offence: AugmentedEvent<ApiType, [kind: U8aFixed, timeslot: Bytes], { kind: U8aFixed, timeslot: Bytes }>;
+    };
+    operationsWorkingGroupAlpha: {
+      /**
+       * Emits on withdrawing the application for the regular worker/lead opening.
+       * Params:
+       * - Job application id
+       **/
+      ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on adding the application for the worker opening.
+       * Params:
+       * - Opening parameteres
+       * - Application id
+       **/
+      AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+      /**
+       * Emits on setting the budget for the working group.
+       * Params:
+       * - new budget
+       **/
+      BudgetSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on budget from the working group being spent
+       * Params:
+       * - Receiver Account Id.
+       * - Balance spent.
+       * - Rationale.
+       **/
+      BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Emits on setting the group leader.
+       * Params:
+       * - Group worker id.
+       **/
+      LeaderSet: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on un-setting the leader.
+       **/
+      LeaderUnset: AugmentedEvent<ApiType, []>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - message
+       **/
+      LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * Emits on reaching new missed reward.
+       * Params:
+       * - Worker ID.
+       * - Missed reward (optional). None means 'no missed reward'.
+       **/
+      NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on adding new job opening.
+       * Params:
+       * - Opening id
+       * - Description
+       * - Opening Type(Lead or Worker)
+       * - Stake Policy for the opening
+       * - Reward per block
+       **/
+      OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Emits on canceling the job opening.
+       * Params:
+       * - Opening id
+       **/
+      OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on filling the job opening.
+       * Params:
+       * - Worker opening id
+       * - Worker application id to the worker id dictionary
+       * - Applicationd ids used to fill the opening
+       **/
+      OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on paying the reward.
+       * Params:
+       * - Id of the worker.
+       * - Receiver Account Id.
+       * - Reward
+       * - Payment type (missed reward or regular one)
+       **/
+      RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+      /**
+       * Emits on decreasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on increasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on slashing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - actual slashed balance.
+       * - Requested slashed balance.
+       * - Rationale.
+       **/
+      StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+      /**
+       * Emits on updating the status text of the working group.
+       * Params:
+       * - status text hash
+       * - status text
+       **/
+      StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+      /**
+       * Emits on terminating the leader.
+       * Params:
+       * - leader worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on terminating the worker.
+       * Params:
+       * - worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on exiting the worker.
+       * Params:
+       * - worker id.
+       * - Rationale.
+       **/
+      WorkerExited: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - worker
+       * - message
+       **/
+      WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on updating the reward account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward account id of the worker.
+       **/
+      WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits on updating the reward amount of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward per block
+       **/
+      WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on updating the role account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Role account id of the worker.
+       **/
+      WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits when worker started leaving their role.
+       * Params:
+       * - Worker id.
+       * - Rationale.
+       **/
+      WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+      /**
+       * Fund the working group budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+    };
+    operationsWorkingGroupBeta: {
+      /**
+       * Emits on withdrawing the application for the regular worker/lead opening.
+       * Params:
+       * - Job application id
+       **/
+      ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on adding the application for the worker opening.
+       * Params:
+       * - Opening parameteres
+       * - Application id
+       **/
+      AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+      /**
+       * Emits on setting the budget for the working group.
+       * Params:
+       * - new budget
+       **/
+      BudgetSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on budget from the working group being spent
+       * Params:
+       * - Receiver Account Id.
+       * - Balance spent.
+       * - Rationale.
+       **/
+      BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Emits on setting the group leader.
+       * Params:
+       * - Group worker id.
+       **/
+      LeaderSet: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on un-setting the leader.
+       **/
+      LeaderUnset: AugmentedEvent<ApiType, []>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - message
+       **/
+      LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * Emits on reaching new missed reward.
+       * Params:
+       * - Worker ID.
+       * - Missed reward (optional). None means 'no missed reward'.
+       **/
+      NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on adding new job opening.
+       * Params:
+       * - Opening id
+       * - Description
+       * - Opening Type(Lead or Worker)
+       * - Stake Policy for the opening
+       * - Reward per block
+       **/
+      OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Emits on canceling the job opening.
+       * Params:
+       * - Opening id
+       **/
+      OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on filling the job opening.
+       * Params:
+       * - Worker opening id
+       * - Worker application id to the worker id dictionary
+       * - Applicationd ids used to fill the opening
+       **/
+      OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on paying the reward.
+       * Params:
+       * - Id of the worker.
+       * - Receiver Account Id.
+       * - Reward
+       * - Payment type (missed reward or regular one)
+       **/
+      RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+      /**
+       * Emits on decreasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on increasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on slashing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - actual slashed balance.
+       * - Requested slashed balance.
+       * - Rationale.
+       **/
+      StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+      /**
+       * Emits on updating the status text of the working group.
+       * Params:
+       * - status text hash
+       * - status text
+       **/
+      StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+      /**
+       * Emits on terminating the leader.
+       * Params:
+       * - leader worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on terminating the worker.
+       * Params:
+       * - worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on exiting the worker.
+       * Params:
+       * - worker id.
+       * - Rationale.
+       **/
+      WorkerExited: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - worker
+       * - message
+       **/
+      WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on updating the reward account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward account id of the worker.
+       **/
+      WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits on updating the reward amount of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward per block
+       **/
+      WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on updating the role account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Role account id of the worker.
+       **/
+      WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits when worker started leaving their role.
+       * Params:
+       * - Worker id.
+       * - Rationale.
+       **/
+      WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+      /**
+       * Fund the working group budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+    };
+    operationsWorkingGroupGamma: {
+      /**
+       * Emits on withdrawing the application for the regular worker/lead opening.
+       * Params:
+       * - Job application id
+       **/
+      ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on adding the application for the worker opening.
+       * Params:
+       * - Opening parameteres
+       * - Application id
+       **/
+      AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+      /**
+       * Emits on setting the budget for the working group.
+       * Params:
+       * - new budget
+       **/
+      BudgetSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on budget from the working group being spent
+       * Params:
+       * - Receiver Account Id.
+       * - Balance spent.
+       * - Rationale.
+       **/
+      BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Emits on setting the group leader.
+       * Params:
+       * - Group worker id.
+       **/
+      LeaderSet: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on un-setting the leader.
+       **/
+      LeaderUnset: AugmentedEvent<ApiType, []>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - message
+       **/
+      LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * Emits on reaching new missed reward.
+       * Params:
+       * - Worker ID.
+       * - Missed reward (optional). None means 'no missed reward'.
+       **/
+      NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on adding new job opening.
+       * Params:
+       * - Opening id
+       * - Description
+       * - Opening Type(Lead or Worker)
+       * - Stake Policy for the opening
+       * - Reward per block
+       **/
+      OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Emits on canceling the job opening.
+       * Params:
+       * - Opening id
+       **/
+      OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on filling the job opening.
+       * Params:
+       * - Worker opening id
+       * - Worker application id to the worker id dictionary
+       * - Applicationd ids used to fill the opening
+       **/
+      OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on paying the reward.
+       * Params:
+       * - Id of the worker.
+       * - Receiver Account Id.
+       * - Reward
+       * - Payment type (missed reward or regular one)
+       **/
+      RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+      /**
+       * Emits on decreasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on increasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on slashing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - actual slashed balance.
+       * - Requested slashed balance.
+       * - Rationale.
+       **/
+      StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+      /**
+       * Emits on updating the status text of the working group.
+       * Params:
+       * - status text hash
+       * - status text
+       **/
+      StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+      /**
+       * Emits on terminating the leader.
+       * Params:
+       * - leader worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on terminating the worker.
+       * Params:
+       * - worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on exiting the worker.
+       * Params:
+       * - worker id.
+       * - Rationale.
+       **/
+      WorkerExited: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - worker
+       * - message
+       **/
+      WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on updating the reward account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward account id of the worker.
+       **/
+      WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits on updating the reward amount of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward per block
+       **/
+      WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on updating the role account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Role account id of the worker.
+       **/
+      WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits when worker started leaving their role.
+       * Params:
+       * - Worker id.
+       * - Rationale.
+       **/
+      WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+      /**
+       * Fund the working group budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+    };
+    projectToken: {
+      /**
+       * Account Dusted
+       * Params:
+       * - token identifier
+       * - id of the dusted account owner member
+       * - account that called the extrinsic
+       * - ongoing policy
+       **/
+      AccountDustedBy: AugmentedEvent<ApiType, [u64, u64, AccountId32, PalletProjectTokenTransferPolicy]>;
+      /**
+       * AMM activated
+       * Params:
+       * - token id
+       * - member id
+       * - params for the bonding curve
+       **/
+      AmmActivated: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenAmmCurve]>;
+      /**
+       * AMM deactivated
+       * Params:
+       * - token id
+       * - member id
+       * - amm treasury amount burned upon deactivation
+       **/
+      AmmDeactivated: AugmentedEvent<ApiType, [u64, u64, u128]>;
+      /**
+       * Max patronage yearly rate updated
+       * Params:
+       * - new rate
+       **/
+      MaxYearlyPatronageRateUpdated: AugmentedEvent<ApiType, [Permill]>;
+      /**
+       * Member joined whitelist
+       * Params:
+       * - token identifier
+       * - member id
+       * - ongoing transfer policy
+       **/
+      MemberJoinedWhitelist: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransferPolicy]>;
+      /**
+       * Patronage credit claimed by creator
+       * Params:
+       * - token identifier
+       * - credit amount
+       * - member id
+       **/
+      PatronageCreditClaimed: AugmentedEvent<ApiType, [u64, u128, u64]>;
+      /**
+       * Patronage rate decreased
+       * Params:
+       * - token identifier
+       * - new patronage rate
+       **/
+      PatronageRateDecreasedTo: AugmentedEvent<ApiType, [u64, Permill]>;
+      /**
+       * Revenue Split finalized
+       * Params:
+       * - token identifier
+       * - recovery account for the leftover funds
+       * - leftover funds
+       **/
+      RevenueSplitFinalized: AugmentedEvent<ApiType, [u64, AccountId32, u128]>;
+      /**
+       * Revenue Split issued
+       * Params:
+       * - token identifier
+       * - starting block for the split
+       * - duration of the split
+       * - JOY allocated for the split
+       **/
+      RevenueSplitIssued: AugmentedEvent<ApiType, [u64, u32, u32, u128]>;
+      /**
+       * User left revenue split
+       * Params:
+       * - token identifier
+       * - ex-participant's member id
+       * - amount unstaked
+       **/
+      RevenueSplitLeft: AugmentedEvent<ApiType, [u64, u64, u128]>;
+      /**
+       * Token amount is transferred from src to dst
+       * Params:
+       * - token identifier
+       * - source member id
+       * - map containing validated outputs (amount indexed by (member_id + account existance))
+       * - transfer's metadata
+       **/
+      TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransfers, Bytes]>;
+      /**
+       * Token amount transferred by issuer
+       * Params:
+       * - token identifier
+       * - source (issuer) member id
+       * - map containing validated outputs
+       * (amount, opt. vesting schedule, opt. vesting cleanup key) data indexed by
+       * (account_id + account existance)
+       * - transfer's metadata
+       **/
+      TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenTransfers, Bytes]>;
+      /**
+       * Token Deissued
+       * Params:
+       * - token id
+       **/
+      TokenDeissued: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Token Issued
+       * Params:
+       * - token id
+       * - token issuance parameters
+       **/
+      TokenIssued: AugmentedEvent<ApiType, [u64, PalletProjectTokenTokenIssuanceParameters]>;
+      /**
+       * Token Sale Finalized
+       * Params:
+       * - token id
+       * - token sale id
+       * - amount of unsold tokens recovered
+       * - amount of JOY collected
+       **/
+      TokenSaleFinalized: AugmentedEvent<ApiType, [u64, u32, u128, u128]>;
+      /**
+       * Toke Sale was Initialized
+       * Params:
+       * - token id
+       * - token sale id
+       * - token sale data
+       * - token sale metadata
+       **/
+      TokenSaleInitialized: AugmentedEvent<ApiType, [u64, u32, PalletProjectTokenTokenSale, Option<Bytes>]>;
+      /**
+       * Tokens Bought on AMM
+       * Params:
+       * - token id
+       * - member id
+       * - amount of CRT minted
+       * - amount of JOY deposited into curve treasury
+       **/
+      TokensBoughtOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
+      /**
+       * Tokens Burned
+       * Params:
+       * - token id
+       * - member id
+       * - number of tokens burned
+       **/
+      TokensBurned: AugmentedEvent<ApiType, [u64, u64, u128]>;
+      /**
+       * Tokens Purchased On Sale
+       * Params:
+       * - token id
+       * - token sale id
+       * - amount of tokens purchased
+       * - buyer's member id
+       **/
+      TokensPurchasedOnSale: AugmentedEvent<ApiType, [u64, u32, u128, u64]>;
+      /**
+       * Tokens Sold on AMM
+       * Params:
+       * - token id
+       * - member id
+       * - amount of CRT burned
+       * - amount of JOY withdrawn from curve treasury
+       **/
+      TokensSoldOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
+      /**
+       * Transfer Policy Changed To Permissionless
+       * Params:
+       * - token id
+       **/
+      TransferPolicyChangedToPermissionless: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Upcoming Token Sale was Updated
+       * Params:
+       * - token id
+       * - token sale id
+       * - new sale start block
+       * - new sale duration
+       **/
+      UpcomingTokenSaleUpdated: AugmentedEvent<ApiType, [u64, u32, Option<u32>, Option<u32>]>;
+      /**
+       * User partipated in a revenue split
+       * Params:
+       * - token identifier
+       * - participant's member id
+       * - user allocated staked balance
+       * - dividend amount (JOY) granted
+       * - revenue split identifier
+       **/
+      UserParticipatedInSplit: AugmentedEvent<ApiType, [u64, u64, u128, u128, u32]>;
+    };
+    proposalsCodex: {
+      /**
+       * A proposal was created
+       * Params:
+       * - Id of a newly created proposal after it was saved in storage.
+       * - General proposal parameter. Parameters shared by all proposals
+       * - Proposal Details. Parameter of proposal with a variant for each kind of proposal
+       * - Id of a newly created proposal thread
+       **/
+      ProposalCreated: AugmentedEvent<ApiType, [u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
+    };
+    proposalsDiscussion: {
+      /**
+       * Emits on post creation.
+       **/
+      PostCreated: AugmentedEvent<ApiType, [u64, u64, u64, Bytes, bool]>;
+      /**
+       * Emits on post deleted
+       **/
+      PostDeleted: AugmentedEvent<ApiType, [u64, u64, u64, bool]>;
+      /**
+       * Emits on post update.
+       **/
+      PostUpdated: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+      /**
+       * Emits on thread creation.
+       **/
+      ThreadCreated: AugmentedEvent<ApiType, [u64, u64]>;
+      /**
+       * Emits on thread mode change.
+       **/
+      ThreadModeChanged: AugmentedEvent<ApiType, [u64, PalletProposalsDiscussionThreadModeBTreeSet, u64]>;
+    };
+    proposalsEngine: {
+      /**
+       * Emits on a proposal being cancelled
+       * Params:
+       * - Member Id of the proposer
+       * - Id of the proposal
+       **/
+      ProposalCancelled: AugmentedEvent<ApiType, [u64, u32]>;
+      /**
+       * Emits on getting a proposal status decision.
+       * Params:
+       * - Id of a proposal.
+       * - Proposal decision
+       **/
+      ProposalDecisionMade: AugmentedEvent<ApiType, [u32, PalletProposalsEngineProposalStatusesProposalDecision]>;
+      /**
+       * Emits on proposal execution.
+       * Params:
+       * - Id of a updated proposal.
+       * - Proposal execution status.
+       **/
+      ProposalExecuted: AugmentedEvent<ApiType, [u32, PalletProposalsEngineProposalStatusesExecutionStatus]>;
+      /**
+       * Emits on proposal creation.
+       * Params:
+       * - Id of a proposal.
+       * - New proposal status.
+       **/
+      ProposalStatusUpdated: AugmentedEvent<ApiType, [u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
+      /**
+       * Emits on proposer making a remark
+       * - proposer id
+       * - proposal id
+       * - message
+       **/
+      ProposerRemarked: AugmentedEvent<ApiType, [u64, u32, Bytes]>;
+      /**
+       * Emits on voting for the proposal
+       * Params:
+       * - Voter - member id of a voter.
+       * - Id of a proposal.
+       * - Kind of vote.
+       * - Rationale.
+       **/
+      Voted: AugmentedEvent<ApiType, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
+    };
+    referendum: {
+      /**
+       * Account permanently opted out of voting in referendum.
+       **/
+      AccountOptedOutOfVoting: AugmentedEvent<ApiType, [AccountId32]>;
+      /**
+       * Referendum ended and winning option was selected
+       **/
+      ReferendumFinished: AugmentedEvent<ApiType, [Vec<PalletReferendumOptionResult>]>;
+      /**
+       * Referendum started
+       **/
+      ReferendumStarted: AugmentedEvent<ApiType, [u32, u32]>;
+      /**
+       * Referendum started
+       **/
+      ReferendumStartedForcefully: AugmentedEvent<ApiType, [u32, u32]>;
+      /**
+       * Revealing phase has begun
+       **/
+      RevealingStageStarted: AugmentedEvent<ApiType, [u32]>;
+      /**
+       * User released his stake
+       **/
+      StakeReleased: AugmentedEvent<ApiType, [AccountId32]>;
+      /**
+       * User cast a vote in referendum
+       **/
+      VoteCast: AugmentedEvent<ApiType, [AccountId32, H256, u128]>;
+      /**
+       * User revealed his vote
+       **/
+      VoteRevealed: AugmentedEvent<ApiType, [AccountId32, u64, Bytes]>;
+    };
+    session: {
+      /**
+       * New session has happened. Note that the argument is the session index, not the
+       * block number as the type might suggest.
+       **/
+      NewSession: AugmentedEvent<ApiType, [sessionIndex: u32], { sessionIndex: u32 }>;
+    };
+    staking: {
+      /**
+       * An account has bonded this amount. \[stash, amount\]
+       * 
+       * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
+       * it will not be emitted for staking rewards when they are added to stake.
+       **/
+      Bonded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      /**
+       * An account has stopped participating as either a validator or nominator.
+       * \[stash\]
+       **/
+      Chilled: AugmentedEvent<ApiType, [AccountId32]>;
+      /**
+       * The era payout has been set; the first balance is the validator-payout; the second is
+       * the remainder from the maximum amount of reward.
+       * \[era_index, validator_payout, remainder\]
+       **/
+      EraPaid: AugmentedEvent<ApiType, [u32, u128, u128]>;
+      /**
+       * A nominator has been kicked from a validator. \[nominator, stash\]
+       **/
+      Kicked: AugmentedEvent<ApiType, [AccountId32, AccountId32]>;
+      /**
+       * An old slashing report from a prior era was discarded because it could
+       * not be processed. \[session_index\]
+       **/
+      OldSlashingReportDiscarded: AugmentedEvent<ApiType, [u32]>;
+      /**
+       * The stakers' rewards are getting paid. \[era_index, validator_stash\]
+       **/
+      PayoutStarted: AugmentedEvent<ApiType, [u32, AccountId32]>;
+      /**
+       * The nominator has been rewarded by this amount. \[stash, amount\]
+       **/
+      Rewarded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      /**
+       * One validator (and its nominators) has been slashed by the given amount.
+       * \[validator, amount\]
+       **/
+      Slashed: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      /**
+       * A new set of stakers was elected.
+       **/
+      StakersElected: AugmentedEvent<ApiType, []>;
+      /**
+       * The election failed. No new era is planned.
+       **/
+      StakingElectionFailed: AugmentedEvent<ApiType, []>;
+      /**
+       * An account has unbonded this amount. \[stash, amount\]
+       **/
+      Unbonded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      /**
+       * A validator has set their preferences.
+       **/
+      ValidatorPrefsSet: AugmentedEvent<ApiType, [AccountId32, PalletStakingValidatorPrefs]>;
+      /**
+       * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
+       * from the unlocking queue. \[stash, amount\]
+       **/
+      Withdrawn: AugmentedEvent<ApiType, [AccountId32, u128]>;
+    };
+    storage: {
+      /**
+       * Emits on changing the size-based pricing of new objects uploaded.
+       * Params
+       * - new data size fee
+       **/
+      DataObjectPerMegabyteFeeUpdated: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on data objects deletion from bags.
+       * Params
+       * - account ID for the state bloat bond
+       * - bag ID
+       * - data object IDs
+       **/
+      DataObjectsDeleted: AugmentedEvent<ApiType, [AccountId32, PalletStorageBagIdType, BTreeSet<u64>]>;
+      /**
+       * Emits on moving data objects between bags.
+       * Params
+       * - source bag ID
+       * - destination bag ID
+       * - data object IDs
+       **/
+      DataObjectsMoved: AugmentedEvent<ApiType, [PalletStorageBagIdType, PalletStorageBagIdType, BTreeSet<u64>]>;
+      /**
+       * Emits on updating the data object state bloat bond.
+       * Params
+       * - state bloat bond value
+       **/
+      DataObjectStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on storage assets being uploaded and deleted at the same time
+       * Params
+       * - UploadParameters
+       * - Ids of the uploaded objects
+       * - Ids of the removed objects
+       **/
+      DataObjectsUpdated: AugmentedEvent<ApiType, [PalletStorageUploadParametersRecord, BTreeSet<u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on uploading data objects.
+       * Params
+       * - data objects IDs
+       * - initial uploading parameters
+       * - state bloat bond for objects
+       **/
+      DataObjectsUploaded: AugmentedEvent<ApiType, [BTreeSet<u64>, PalletStorageUploadParametersRecord, u128]>;
+      /**
+       * Emits on creating distribution bucket.
+       * Params
+       * - distribution bucket family ID
+       * - accepting new bags
+       * - distribution bucket ID
+       **/
+      DistributionBucketCreated: AugmentedEvent<ApiType, [u64, bool, PalletStorageDistributionBucketIdRecord]>;
+      /**
+       * Emits on deleting distribution bucket.
+       * Params
+       * - distribution bucket ID
+       **/
+      DistributionBucketDeleted: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord]>;
+      /**
+       * Emits on creating distribution bucket family.
+       * Params
+       * - distribution family bucket ID
+       **/
+      DistributionBucketFamilyCreated: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on deleting distribution bucket family.
+       * Params
+       * - distribution family bucket ID
+       **/
+      DistributionBucketFamilyDeleted: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on setting the metadata by a distribution bucket family.
+       * Params
+       * - distribution bucket family ID
+       * - metadata
+       **/
+      DistributionBucketFamilyMetadataSet: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on accepting a distribution bucket invitation for the operator.
+       * Params
+       * - worker ID
+       * - distribution bucket ID
+       **/
+      DistributionBucketInvitationAccepted: AugmentedEvent<ApiType, [u64, PalletStorageDistributionBucketIdRecord]>;
+      /**
+       * Emits on canceling a distribution bucket invitation for the operator.
+       * Params
+       * - distribution bucket ID
+       * - operator worker ID
+       **/
+      DistributionBucketInvitationCancelled: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, u64]>;
+      /**
+       * Emits on setting the metadata by a distribution bucket operator.
+       * Params
+       * - worker ID
+       * - distribution bucket ID
+       * - metadata
+       **/
+      DistributionBucketMetadataSet: AugmentedEvent<ApiType, [u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+      /**
+       * Emits on storage bucket mode update (distributing flag).
+       * Params
+       * - distribution bucket ID
+       * - distributing
+       **/
+      DistributionBucketModeUpdated: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, bool]>;
+      /**
+       * Emits on creating a distribution bucket invitation for the operator.
+       * Params
+       * - distribution bucket ID
+       * - worker ID
+       **/
+      DistributionBucketOperatorInvited: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, u64]>;
+      /**
+       * Emits on the distribution bucket operator removal.
+       * Params
+       * - distribution bucket ID
+       * - distribution bucket operator ID
+       **/
+      DistributionBucketOperatorRemoved: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, u64]>;
+      /**
+       * Emits on changing the "Distribution buckets per bag" number limit.
+       * Params
+       * - new limit
+       **/
+      DistributionBucketsPerBagLimitUpdated: AugmentedEvent<ApiType, [u32]>;
+      /**
+       * Emits on storage bucket status update (accepting new bags).
+       * Params
+       * - distribution bucket ID
+       * - new status (accepting new bags)
+       **/
+      DistributionBucketStatusUpdated: AugmentedEvent<ApiType, [PalletStorageDistributionBucketIdRecord, bool]>;
+      /**
+       * Emits on updating distribution buckets for bag.
+       * Params
+       * - bag ID
+       * - storage buckets to add ID collection
+       * - storage buckets to remove ID collection
+       **/
+      DistributionBucketsUpdatedForBag: AugmentedEvent<ApiType, [PalletStorageBagIdType, u64, BTreeSet<u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on Distribution Operator making a remark
+       * Params
+       * - operator's worker id
+       * - distribution bucket id
+       * - remark message
+       **/
+      DistributionOperatorRemarked: AugmentedEvent<ApiType, [u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+      /**
+       * Emits on creating a dynamic bag.
+       * Params
+       * - dynamic bag creation parameters
+       * - uploaded data objects ids
+       **/
+      DynamicBagCreated: AugmentedEvent<ApiType, [PalletStorageDynBagCreationParametersRecord, BTreeSet<u64>]>;
+      /**
+       * Emits on deleting a dynamic bag.
+       * Params
+       * - dynamic bag ID
+       **/
+      DynamicBagDeleted: AugmentedEvent<ApiType, [PalletStorageDynamicBagIdType]>;
+      /**
+       * Emits on dynamic bag creation policy update (distribution bucket families).
+       * Params
+       * - dynamic bag type
+       * - families and bucket numbers
+       **/
+      FamiliesInDynamicBagCreationPolicyUpdated: AugmentedEvent<ApiType, [PalletStorageDynamicBagType, BTreeMap<u64, u32>]>;
+      /**
+       * Emits on updating the number of storage buckets in dynamic bag creation policy.
+       * Params
+       * - dynamic bag type
+       * - new number of storage buckets
+       **/
+      NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: AugmentedEvent<ApiType, [PalletStorageDynamicBagType, u32]>;
+      /**
+       * Emits on accepting pending data objects.
+       * Params
+       * - storage bucket ID
+       * - worker ID (storage provider ID)
+       * - bag ID
+       * - pending data objects
+       **/
+      PendingDataObjectsAccepted: AugmentedEvent<ApiType, [u64, u64, PalletStorageBagIdType, BTreeSet<u64>]>;
+      /**
+       * Emits on creating the storage bucket.
+       * Params
+       * - storage bucket ID
+       * - invited worker
+       * - flag "accepting_new_bags"
+       * - size limit for voucher,
+       * - objects limit for voucher,
+       **/
+      StorageBucketCreated: AugmentedEvent<ApiType, [u64, Option<u64>, bool, u64, u64]>;
+      /**
+       * Emits on storage bucket deleting.
+       * Params
+       * - storage bucket ID
+       **/
+      StorageBucketDeleted: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on accepting the storage bucket invitation.
+       * Params
+       * - storage bucket ID
+       * - invited worker ID
+       * - transactor account ID
+       **/
+      StorageBucketInvitationAccepted: AugmentedEvent<ApiType, [u64, u64, AccountId32]>;
+      /**
+       * Emits on cancelling the storage bucket invitation.
+       * Params
+       * - storage bucket ID
+       **/
+      StorageBucketInvitationCancelled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on the storage bucket operator invitation.
+       * Params
+       * - storage bucket ID
+       * - operator worker ID (storage provider ID)
+       **/
+      StorageBucketOperatorInvited: AugmentedEvent<ApiType, [u64, u64]>;
+      /**
+       * Emits on the storage bucket operator removal.
+       * Params
+       * - storage bucket ID
+       **/
+      StorageBucketOperatorRemoved: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on changing the "Storage buckets per bag" number limit.
+       * Params
+       * - new limit
+       **/
+      StorageBucketsPerBagLimitUpdated: AugmentedEvent<ApiType, [u32]>;
+      /**
+       * Emits on storage bucket status update.
+       * Params
+       * - storage bucket ID
+       * - new status
+       **/
+      StorageBucketStatusUpdated: AugmentedEvent<ApiType, [u64, bool]>;
+      /**
+       * Emits on updating storage buckets for bag.
+       * Params
+       * - bag ID
+       * - storage buckets to add ID collection
+       * - storage buckets to remove ID collection
+       **/
+      StorageBucketsUpdatedForBag: AugmentedEvent<ApiType, [PalletStorageBagIdType, BTreeSet<u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on changing the "Storage buckets voucher max limits".
+       * Params
+       * - new objects size limit
+       * - new objects number limit
+       **/
+      StorageBucketsVoucherMaxLimitsUpdated: AugmentedEvent<ApiType, [u64, u64]>;
+      /**
+       * Emits on setting the storage bucket voucher limits.
+       * Params
+       * - storage bucket ID
+       * - new total objects size limit
+       * - new total objects number limit
+       **/
+      StorageBucketVoucherLimitsSet: AugmentedEvent<ApiType, [u64, u64, u64]>;
+      /**
+       * Emits on setting the storage operator metadata.
+       * Params
+       * - storage bucket ID
+       * - invited worker ID
+       * - metadata
+       **/
+      StorageOperatorMetadataSet: AugmentedEvent<ApiType, [u64, u64, Bytes]>;
+      /**
+       * Emits on Storage Operator making a remark
+       * Params
+       * - operator's worker id
+       * - storage bucket id
+       * - remark message
+       **/
+      StorageOperatorRemarked: AugmentedEvent<ApiType, [u64, u64, Bytes]>;
+      /**
+       * Emits on updating the blacklist with data hashes.
+       * Params
+       * - hashes to remove from the blacklist
+       * - hashes to add to the blacklist
+       **/
+      UpdateBlacklist: AugmentedEvent<ApiType, [BTreeSet<Bytes>, BTreeSet<Bytes>]>;
+      /**
+       * Emits on changing the size-based pricing of new objects uploaded.
+       * Params
+       * - new status
+       **/
+      UploadingBlockStatusUpdated: AugmentedEvent<ApiType, [bool]>;
+      /**
+       * Emits on changing the voucher for a storage bucket.
+       * Params
+       * - storage bucket ID
+       * - new voucher
+       **/
+      VoucherChanged: AugmentedEvent<ApiType, [u64, PalletStorageVoucher]>;
+    };
+    storageWorkingGroup: {
+      /**
+       * Emits on withdrawing the application for the regular worker/lead opening.
+       * Params:
+       * - Job application id
+       **/
+      ApplicationWithdrawn: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on adding the application for the worker opening.
+       * Params:
+       * - Opening parameteres
+       * - Application id
+       **/
+      AppliedOnOpening: AugmentedEvent<ApiType, [PalletWorkingGroupApplyOnOpeningParams, u64]>;
+      /**
+       * Emits on setting the budget for the working group.
+       * Params:
+       * - new budget
+       **/
+      BudgetSet: AugmentedEvent<ApiType, [u128]>;
+      /**
+       * Emits on budget from the working group being spent
+       * Params:
+       * - Receiver Account Id.
+       * - Balance spent.
+       * - Rationale.
+       **/
+      BudgetSpending: AugmentedEvent<ApiType, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Emits on setting the group leader.
+       * Params:
+       * - Group worker id.
+       **/
+      LeaderSet: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on un-setting the leader.
+       **/
+      LeaderUnset: AugmentedEvent<ApiType, []>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - message
+       **/
+      LeadRemarked: AugmentedEvent<ApiType, [Bytes]>;
+      /**
+       * Emits on reaching new missed reward.
+       * Params:
+       * - Worker ID.
+       * - Missed reward (optional). None means 'no missed reward'.
+       **/
+      NewMissedRewardLevelReached: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on adding new job opening.
+       * Params:
+       * - Opening id
+       * - Description
+       * - Opening Type(Lead or Worker)
+       * - Stake Policy for the opening
+       * - Reward per block
+       **/
+      OpeningAdded: AugmentedEvent<ApiType, [u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Emits on canceling the job opening.
+       * Params:
+       * - Opening id
+       **/
+      OpeningCanceled: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on filling the job opening.
+       * Params:
+       * - Worker opening id
+       * - Worker application id to the worker id dictionary
+       * - Applicationd ids used to fill the opening
+       **/
+      OpeningFilled: AugmentedEvent<ApiType, [u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+      /**
+       * Emits on paying the reward.
+       * Params:
+       * - Id of the worker.
+       * - Receiver Account Id.
+       * - Reward
+       * - Payment type (missed reward or regular one)
+       **/
+      RewardPaid: AugmentedEvent<ApiType, [u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+      /**
+       * Emits on decreasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeDecreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on increasing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - stake delta amount
+       **/
+      StakeIncreased: AugmentedEvent<ApiType, [u64, u128]>;
+      /**
+       * Emits on slashing the regular worker/lead stake.
+       * Params:
+       * - regular worker/lead id.
+       * - actual slashed balance.
+       * - Requested slashed balance.
+       * - Rationale.
+       **/
+      StakeSlashed: AugmentedEvent<ApiType, [u64, u128, u128, Option<Bytes>]>;
+      /**
+       * Emits on updating the status text of the working group.
+       * Params:
+       * - status text hash
+       * - status text
+       **/
+      StatusTextChanged: AugmentedEvent<ApiType, [H256, Option<Bytes>]>;
+      /**
+       * Emits on terminating the leader.
+       * Params:
+       * - leader worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedLeader: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on terminating the worker.
+       * Params:
+       * - worker id.
+       * - Penalty.
+       * - Rationale.
+       **/
+      TerminatedWorker: AugmentedEvent<ApiType, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Emits on exiting the worker.
+       * Params:
+       * - worker id.
+       * - Rationale.
+       **/
+      WorkerExited: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Emits on Lead making a remark message
+       * Params:
+       * - worker
+       * - message
+       **/
+      WorkerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      /**
+       * Emits on updating the reward account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward account id of the worker.
+       **/
+      WorkerRewardAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits on updating the reward amount of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Reward per block
+       **/
+      WorkerRewardAmountUpdated: AugmentedEvent<ApiType, [u64, Option<u128>]>;
+      /**
+       * Emits on updating the role account of the worker.
+       * Params:
+       * - Id of the worker.
+       * - Role account id of the worker.
+       **/
+      WorkerRoleAccountUpdated: AugmentedEvent<ApiType, [u64, AccountId32]>;
+      /**
+       * Emits when worker started leaving their role.
+       * Params:
+       * - Worker id.
+       * - Rationale.
+       **/
+      WorkerStartedLeaving: AugmentedEvent<ApiType, [u64, Option<Bytes>]>;
+      /**
+       * Fund the working group budget.
+       * Params:
+       * - Member ID
+       * - Amount of balance
+       * - Rationale
+       **/
+      WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
+    };
+    system: {
+      /**
+       * `:code` was updated.
+       **/
+      CodeUpdated: AugmentedEvent<ApiType, []>;
+      /**
+       * An extrinsic failed.
+       **/
+      ExtrinsicFailed: AugmentedEvent<ApiType, [dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportWeightsDispatchInfo], { dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportWeightsDispatchInfo }>;
+      /**
+       * An extrinsic completed successfully.
+       **/
+      ExtrinsicSuccess: AugmentedEvent<ApiType, [dispatchInfo: FrameSupportWeightsDispatchInfo], { dispatchInfo: FrameSupportWeightsDispatchInfo }>;
+      /**
+       * An account was reaped.
+       **/
+      KilledAccount: AugmentedEvent<ApiType, [account: AccountId32], { account: AccountId32 }>;
+      /**
+       * A new account was created.
+       **/
+      NewAccount: AugmentedEvent<ApiType, [account: AccountId32], { account: AccountId32 }>;
+      /**
+       * On on-chain remark happened.
+       **/
+      Remarked: AugmentedEvent<ApiType, [sender: AccountId32, hash_: H256], { sender: AccountId32, hash_: H256 }>;
+    };
+    utility: {
+      /**
+       * Batch of dispatches completed fully with no error.
+       **/
+      BatchCompleted: AugmentedEvent<ApiType, []>;
+      /**
+       * Batch of dispatches completed but has errors.
+       **/
+      BatchCompletedWithErrors: AugmentedEvent<ApiType, []>;
+      /**
+       * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
+       * well as the error.
+       **/
+      BatchInterrupted: AugmentedEvent<ApiType, [index: u32, error: SpRuntimeDispatchError], { index: u32, error: SpRuntimeDispatchError }>;
+      /**
+       * A call was dispatched.
+       **/
+      DispatchedAs: AugmentedEvent<ApiType, [result: Result<Null, SpRuntimeDispatchError>], { result: Result<Null, SpRuntimeDispatchError> }>;
+      /**
+       * A single item within a Batch of dispatches has completed with no error.
+       **/
+      ItemCompleted: AugmentedEvent<ApiType, []>;
+      /**
+       * A single item within a Batch of dispatches has completed with error.
+       **/
+      ItemFailed: AugmentedEvent<ApiType, [error: SpRuntimeDispatchError], { error: SpRuntimeDispatchError }>;
+    };
+    vesting: {
+      /**
+       * An \[account\] has become fully vested.
+       **/
+      VestingCompleted: AugmentedEvent<ApiType, [account: AccountId32], { account: AccountId32 }>;
+      /**
+       * The amount vested has been updated. This could indicate a change in funds available.
+       * The balance given is the amount which is left unvested (and thus locked).
+       **/
+      VestingUpdated: AugmentedEvent<ApiType, [account: AccountId32, unvested: u128], { account: AccountId32, unvested: u128 }>;
+    };
+  } // AugmentedEvents
+} // declare module
diff --git a/node_modules/@joystream/types/types/src/augment/augment-api-query.ts b/node_modules/@joystream/types/types/src/augment/augment-api-query.ts
new file mode 100644
index 0000000..462ee53
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/augment-api-query.ts
@@ -0,0 +1,1583 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+
+import type { ApiTypes } from '@polkadot/api-base/types';
+import type { BTreeMap, Bytes, Null, Option, U8aFixed, Vec, WrapperKeepOpaque, WrapperOpaque, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
+import type { AnyNumber, ITuple } from '@polkadot/types-codec/types';
+import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportWeightsPerDispatchClassU64, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipUncleEntryItem, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyBountyActor, PalletBountyBountyRecord, PalletBountyContribution, PalletBountyEntryRecord, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletMultisigMultisig, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
+import type { Observable } from '@polkadot/types/types';
+
+declare module '@polkadot/api-base/types/storage' {
+  export interface AugmentedQueries<ApiType extends ApiTypes> {
+    appWorkingGroup: {
+      /**
+       * Count of active workers.
+       **/
+      activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Maps identifier to worker application on opening.
+       **/
+      applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+      /**
+       * Budget for the working group.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Current group lead.
+       **/
+      currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+      /**
+       * Next identifier value for new worker application.
+       **/
+      nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier value for new job opening.
+       **/
+      nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier for a new worker.
+       **/
+      nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Maps identifier to job opening.
+       **/
+      openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+      /**
+       * Status text hash.
+       **/
+      statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * Maps identifier to corresponding worker.
+       **/
+      workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+    };
+    authorityDiscovery: {
+      /**
+       * Keys of the current authority set.
+       **/
+      keys: AugmentedQuery<ApiType, () => Observable<Vec<SpAuthorityDiscoveryAppPublic>>, []>;
+      /**
+       * Keys of the next authority set.
+       **/
+      nextKeys: AugmentedQuery<ApiType, () => Observable<Vec<SpAuthorityDiscoveryAppPublic>>, []>;
+    };
+    authorship: {
+      /**
+       * Author of current block.
+       **/
+      author: AugmentedQuery<ApiType, () => Observable<Option<AccountId32>>, []>;
+      /**
+       * Whether uncles were already set in this block.
+       **/
+      didSetUncles: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+      /**
+       * Uncles
+       **/
+      uncles: AugmentedQuery<ApiType, () => Observable<Vec<PalletAuthorshipUncleEntryItem>>, []>;
+    };
+    babe: {
+      /**
+       * Current epoch authorities.
+       **/
+      authorities: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[SpConsensusBabeAppPublic, u64]>>>, []>;
+      /**
+       * This field should always be populated during block processing unless
+       * secondary plain slots are enabled (which don't contain a VRF output).
+       * 
+       * It is set in `on_finalize`, before it will contain the value from the last block.
+       **/
+      authorVrfRandomness: AugmentedQuery<ApiType, () => Observable<Option<U8aFixed>>, []>;
+      /**
+       * Current slot number.
+       **/
+      currentSlot: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * The configuration for the current epoch. Should never be `None` as it is initialized in
+       * genesis.
+       **/
+      epochConfig: AugmentedQuery<ApiType, () => Observable<Option<SpConsensusBabeBabeEpochConfiguration>>, []>;
+      /**
+       * Current epoch index.
+       **/
+      epochIndex: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * The block numbers when the last and current epoch have started, respectively `N-1` and
+       * `N`.
+       * NOTE: We track this is in order to annotate the block number when a given pool of
+       * entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in
+       * slots, which may be skipped, the block numbers may not line up with the slot numbers.
+       **/
+      epochStart: AugmentedQuery<ApiType, () => Observable<ITuple<[u32, u32]>>, []>;
+      /**
+       * The slot at which the first epoch actually started. This is 0
+       * until the first block of the chain.
+       **/
+      genesisSlot: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Temporary value (cleared at block finalization) which is `Some`
+       * if per-block initialization has already been called for current block.
+       **/
+      initialized: AugmentedQuery<ApiType, () => Observable<Option<Option<SpConsensusBabeDigestsPreDigest>>>, []>;
+      /**
+       * How late the current block is compared to its parent.
+       * 
+       * This entry is populated as part of block execution and is cleaned up
+       * on block finalization. Querying this storage entry outside of block
+       * execution context should always yield zero.
+       **/
+      lateness: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Next epoch authorities.
+       **/
+      nextAuthorities: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[SpConsensusBabeAppPublic, u64]>>>, []>;
+      /**
+       * The configuration for the next epoch, `None` if the config will not change
+       * (you can fallback to `EpochConfig` instead in that case).
+       **/
+      nextEpochConfig: AugmentedQuery<ApiType, () => Observable<Option<SpConsensusBabeBabeEpochConfiguration>>, []>;
+      /**
+       * Next epoch randomness.
+       **/
+      nextRandomness: AugmentedQuery<ApiType, () => Observable<U8aFixed>, []>;
+      /**
+       * Pending epoch configuration change that will be applied when the next epoch is enacted.
+       **/
+      pendingEpochConfigChange: AugmentedQuery<ApiType, () => Observable<Option<SpConsensusBabeDigestsNextConfigDescriptor>>, []>;
+      /**
+       * The epoch randomness for the *current* epoch.
+       * 
+       * # Security
+       * 
+       * This MUST NOT be used for gambling, as it can be influenced by a
+       * malicious validator in the short term. It MAY be used in many
+       * cryptographic protocols, however, so long as one remembers that this
+       * (like everything else on-chain) it is public. For example, it can be
+       * used where a number is needed that cannot have been chosen by an
+       * adversary, for purposes such as public-coin zero-knowledge proofs.
+       **/
+      randomness: AugmentedQuery<ApiType, () => Observable<U8aFixed>, []>;
+      /**
+       * Randomness under construction.
+       * 
+       * We make a trade-off between storage accesses and list length.
+       * We store the under-construction randomness in segments of up to
+       * `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
+       * 
+       * Once a segment reaches this length, we begin the next one.
+       * We reset all segments and return to `0` at the beginning of every
+       * epoch.
+       **/
+      segmentIndex: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
+       **/
+      underConstruction: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Vec<U8aFixed>>, [u32]>;
+    };
+    bagsList: {
+      /**
+       * Counter for the related counted storage map
+       **/
+      counterForListNodes: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * A bag stored in storage.
+       * 
+       * Stores a `Bag` struct, which stores head and tail pointers to itself.
+       **/
+      listBags: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletBagsListListBag>>, [u64]>;
+      /**
+       * A single node, within some bag.
+       * 
+       * Nodes store links forward and back within their respective bags.
+       **/
+      listNodes: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletBagsListListNode>>, [AccountId32]>;
+    };
+    balances: {
+      /**
+       * The Balances pallet example of storing the balance of an account.
+       * 
+       * # Example
+       * 
+       * ```nocompile
+       * impl pallet_balances::Config for Runtime {
+       * type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
+       * }
+       * ```
+       * 
+       * You can also store the balance of an account in the `System` pallet.
+       * 
+       * # Example
+       * 
+       * ```nocompile
+       * impl pallet_balances::Config for Runtime {
+       * type AccountStore = System
+       * }
+       * ```
+       * 
+       * But this comes with tradeoffs, storing account balances in the system pallet stores
+       * `frame_system` data alongside the account data contrary to storing account balances in the
+       * `Balances` pallet, which uses a `StorageMap` to store balances data only.
+       * NOTE: This is only used in the case that this pallet is used to store balances.
+       **/
+      account: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletBalancesAccountData>, [AccountId32]>;
+      /**
+       * Any liquidity locks on some account balances.
+       * NOTE: Should only be accessed when setting, changing and freeing a lock.
+       **/
+      locks: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Vec<PalletBalancesBalanceLock>>, [AccountId32]>;
+      /**
+       * Named reserves on some account balances.
+       **/
+      reserves: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Vec<PalletBalancesReserveData>>, [AccountId32]>;
+      /**
+       * Storage version of the pallet.
+       * 
+       * This is set to v2.0.0 for new networks.
+       **/
+      storageVersion: AugmentedQuery<ApiType, () => Observable<PalletBalancesReleases>, []>;
+      /**
+       * The total units issued in the system.
+       **/
+      totalIssuance: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+    };
+    bounty: {
+      /**
+       * Bounty storage.
+       **/
+      bounties: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletBountyBountyRecord>, [u64]>;
+      /**
+       * Double map for bounty funding. It stores a member or council funding for bounties.
+       **/
+      bountyContributions: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array) => Observable<PalletBountyContribution>, [u64, PalletBountyBountyActor]>;
+      /**
+       * Count of all bounties that have been created.
+       **/
+      bountyCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Work entry storage map.
+       **/
+      entries: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletBountyEntryRecord>>, [u64, u64]>;
+      /**
+       * Count of all work entries that have been created.
+       **/
+      entryCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+    };
+    constitution: {
+      constitution: AugmentedQuery<ApiType, () => Observable<PalletConstitutionConstitutionInfo>, []>;
+    };
+    content: {
+      /**
+       * Max delta between current block and starts at
+       **/
+      auctionStartsAtMaxDelta: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      channelById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletContentChannelRecord>, [u64]>;
+      channelCashoutsEnabled: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+      /**
+       * The state bloat bond for the channel (helps preventing the state bloat).
+       **/
+      channelStateBloatBondValue: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      commitment: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      curatorGroupById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletContentPermissionsCuratorGroupCuratorGroupRecord>, [u64]>;
+      /**
+       * Global daily NFT counter.
+       **/
+      globalDailyNftCounter: AugmentedQuery<ApiType, () => Observable<PalletContentNftCounter>, []>;
+      /**
+       * Global daily NFT limit.
+       **/
+      globalDailyNftLimit: AugmentedQuery<ApiType, () => Observable<PalletContentLimitPerPeriod>, []>;
+      /**
+       * Global weekly NFT counter.
+       **/
+      globalWeeklyNftCounter: AugmentedQuery<ApiType, () => Observable<PalletContentNftCounter>, []>;
+      /**
+       * Global weekly NFT limit.
+       **/
+      globalWeeklyNftLimit: AugmentedQuery<ApiType, () => Observable<PalletContentLimitPerPeriod>, []>;
+      /**
+       * Max auction duration
+       **/
+      maxAuctionDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Max auction extension period
+       **/
+      maxAuctionExtensionPeriod: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Max bid lock duration
+       **/
+      maxBidLockDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Max auction bid step
+       **/
+      maxBidStep: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      maxCashoutAllowed: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Max creator royalty percentage
+       **/
+      maxCreatorRoyalty: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+      /**
+       * Max auction staring price
+       **/
+      maxStartingPrice: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Min auction duration
+       **/
+      minAuctionDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Min auction extension period
+       **/
+      minAuctionExtensionPeriod: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Min bid lock duration
+       **/
+      minBidLockDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Min auction bid step
+       **/
+      minBidStep: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      minCashoutAllowed: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Min creator royalty percentage
+       **/
+      minCreatorRoyalty: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+      /**
+       * Min auction staring price
+       **/
+      minStartingPrice: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      nextChannelId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      nextCuratorGroupId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      nextTransferId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      nextVideoId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * NFT limits enabled or not
+       * Can be updated in flight by the Council
+       **/
+      nftLimitsEnabled: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+      /**
+       * Bids for open auctions
+       **/
+      openAuctionBidByVideoAndMember: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletContentNftTypesOpenAuctionBidRecord>, [u64, u64]>;
+      /**
+       * Platform fee percentage
+       **/
+      platfromFeePercentage: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+      videoById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletContentVideoRecord>, [u64]>;
+      /**
+       * The state bloat bond for the video (helps preventing the state bloat).
+       **/
+      videoStateBloatBondValue: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+    };
+    contentWorkingGroup: {
+      /**
+       * Count of active workers.
+       **/
+      activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Maps identifier to worker application on opening.
+       **/
+      applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+      /**
+       * Budget for the working group.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Current group lead.
+       **/
+      currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+      /**
+       * Next identifier value for new worker application.
+       **/
+      nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier value for new job opening.
+       **/
+      nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier for a new worker.
+       **/
+      nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Maps identifier to job opening.
+       **/
+      openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+      /**
+       * Status text hash.
+       **/
+      statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * Maps identifier to corresponding worker.
+       **/
+      workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+    };
+    council: {
+      /**
+       * Index of the current candidacy period. It is incremented everytime announcement period
+       * starts.
+       **/
+      announcementPeriodNr: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Budget for the council's elected members rewards.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Amount of balance to be refilled every budget period
+       **/
+      budgetIncrement: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Map of all candidates that ever candidated and haven't unstake yet.
+       **/
+      candidates: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletCouncilCandidate>>, [u64]>;
+      /**
+       * Current council members
+       **/
+      councilMembers: AugmentedQuery<ApiType, () => Observable<Vec<PalletCouncilCouncilMember>>, []>;
+      /**
+       * Councilor reward per block
+       **/
+      councilorReward: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * The next block in which the budget will be increased.
+       **/
+      nextBudgetRefill: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * The next block in which the elected council member rewards will be payed.
+       **/
+      nextRewardPayments: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Current council voting stage
+       **/
+      stage: AugmentedQuery<ApiType, () => Observable<PalletCouncilCouncilStageUpdate>, []>;
+    };
+    distributionWorkingGroup: {
+      /**
+       * Count of active workers.
+       **/
+      activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Maps identifier to worker application on opening.
+       **/
+      applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+      /**
+       * Budget for the working group.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Current group lead.
+       **/
+      currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+      /**
+       * Next identifier value for new worker application.
+       **/
+      nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier value for new job opening.
+       **/
+      nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier for a new worker.
+       **/
+      nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Maps identifier to job opening.
+       **/
+      openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+      /**
+       * Status text hash.
+       **/
+      statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * Maps identifier to corresponding worker.
+       **/
+      workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+    };
+    electionProviderMultiPhase: {
+      /**
+       * Current phase.
+       **/
+      currentPhase: AugmentedQuery<ApiType, () => Observable<PalletElectionProviderMultiPhasePhase>, []>;
+      /**
+       * Desired number of targets to elect for this round.
+       * 
+       * Only exists when [`Snapshot`] is present.
+       **/
+      desiredTargets: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+      /**
+       * The minimum score that each 'untrusted' solution must attain in order to be considered
+       * feasible.
+       * 
+       * Can be set via `set_minimum_untrusted_score`.
+       **/
+      minimumUntrustedScore: AugmentedQuery<ApiType, () => Observable<Option<SpNposElectionsElectionScore>>, []>;
+      /**
+       * Current best solution, signed or unsigned, queued to be returned upon `elect`.
+       **/
+      queuedSolution: AugmentedQuery<ApiType, () => Observable<Option<PalletElectionProviderMultiPhaseReadySolution>>, []>;
+      /**
+       * Internal counter for the number of rounds.
+       * 
+       * This is useful for de-duplication of transactions submitted to the pool, and general
+       * diagnostics of the pallet.
+       * 
+       * This is merely incremented once per every time that an upstream `elect` is called.
+       **/
+      round: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * A sorted, bounded set of `(score, index)`, where each `index` points to a value in
+       * `SignedSubmissions`.
+       * 
+       * We never need to process more than a single signed submission at a time. Signed submissions
+       * can be quite large, so we're willing to pay the cost of multiple database accesses to access
+       * them one at a time instead of reading and decoding all of them at once.
+       **/
+      signedSubmissionIndices: AugmentedQuery<ApiType, () => Observable<BTreeMap<SpNposElectionsElectionScore, u32>>, []>;
+      /**
+       * The next index to be assigned to an incoming signed submission.
+       * 
+       * Every accepted submission is assigned a unique index; that index is bound to that particular
+       * submission for the duration of the election. On election finalization, the next index is
+       * reset to 0.
+       * 
+       * We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its
+       * capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,
+       * because iteration is slow. Instead, we store the value here.
+       **/
+      signedSubmissionNextIndex: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Unchecked, signed solutions.
+       * 
+       * Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
+       * allowing us to keep only a single one in memory at a time.
+       * 
+       * Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
+       * affect; we shouldn't need a cryptographically secure hasher.
+       **/
+      signedSubmissionsMap: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Option<PalletElectionProviderMultiPhaseSignedSignedSubmission>>, [u32]>;
+      /**
+       * Snapshot data of the round.
+       * 
+       * This is created at the beginning of the signed phase and cleared upon calling `elect`.
+       **/
+      snapshot: AugmentedQuery<ApiType, () => Observable<Option<PalletElectionProviderMultiPhaseRoundSnapshot>>, []>;
+      /**
+       * The metadata of the [`RoundSnapshot`]
+       * 
+       * Only exists when [`Snapshot`] is present.
+       **/
+      snapshotMetadata: AugmentedQuery<ApiType, () => Observable<Option<PalletElectionProviderMultiPhaseSolutionOrSnapshotSize>>, []>;
+    };
+    forum: {
+      /**
+       * Map category identifier to corresponding category.
+       **/
+      categoryById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletForumCategory>, [u64]>;
+      /**
+       * Moderator set for each Category
+       **/
+      categoryByModerator: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<Null>, [u64, u64]>;
+      /**
+       * Counter for all existing categories.
+       **/
+      categoryCounter: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Category identifier value to be used for the next Category created.
+       **/
+      nextCategoryId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Post identifier value to be used for for next post created.
+       **/
+      nextPostId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Thread identifier value to be used for next Thread in threadById.
+       **/
+      nextThreadId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Map post identifier to corresponding post.
+       **/
+      postById: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletForumPost>, [u64, u64]>;
+      /**
+       * Map thread identifier to corresponding thread.
+       **/
+      threadById: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletForumThread>, [u64, u64]>;
+    };
+    forumWorkingGroup: {
+      /**
+       * Count of active workers.
+       **/
+      activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Maps identifier to worker application on opening.
+       **/
+      applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+      /**
+       * Budget for the working group.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Current group lead.
+       **/
+      currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+      /**
+       * Next identifier value for new worker application.
+       **/
+      nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier value for new job opening.
+       **/
+      nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier for a new worker.
+       **/
+      nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Maps identifier to job opening.
+       **/
+      openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+      /**
+       * Status text hash.
+       **/
+      statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * Maps identifier to corresponding worker.
+       **/
+      workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+    };
+    grandpa: {
+      /**
+       * The number of changes (both in terms of keys and underlying economic responsibilities)
+       * in the "set" of Grandpa validators from genesis.
+       **/
+      currentSetId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * next block number where we can force a change.
+       **/
+      nextForced: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+      /**
+       * Pending change: (signaled at, scheduled change).
+       **/
+      pendingChange: AugmentedQuery<ApiType, () => Observable<Option<PalletGrandpaStoredPendingChange>>, []>;
+      /**
+       * A mapping from grandpa set ID to the index of the *most recent* session for which its
+       * members were responsible.
+       * 
+       * TWOX-NOTE: `SetId` is not under user control.
+       **/
+      setIdSession: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<u32>>, [u64]>;
+      /**
+       * `true` if we are currently stalled.
+       **/
+      stalled: AugmentedQuery<ApiType, () => Observable<Option<ITuple<[u32, u32]>>>, []>;
+      /**
+       * State of the current authority set.
+       **/
+      state: AugmentedQuery<ApiType, () => Observable<PalletGrandpaStoredState>, []>;
+    };
+    historical: {
+      /**
+       * Mapping from historical session indices to session-data root hash and validator count.
+       **/
+      historicalSessions: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Option<ITuple<[H256, u32]>>>, [u32]>;
+      /**
+       * The range of historical sessions we store. [first, last)
+       **/
+      storedRange: AugmentedQuery<ApiType, () => Observable<Option<ITuple<[u32, u32]>>>, []>;
+    };
+    imOnline: {
+      /**
+       * For each session index, we keep a mapping of `ValidatorId<T>` to the
+       * number of blocks authored by the given authority.
+       **/
+      authoredBlocks: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<u32>, [u32, AccountId32]>;
+      /**
+       * The block number after which it's ok to send heartbeats in the current
+       * session.
+       * 
+       * At the beginning of each session we set this to a value that should fall
+       * roughly in the middle of the session duration. The idea is to first wait for
+       * the validators to produce a block in the current session, so that the
+       * heartbeat later on will not be necessary.
+       * 
+       * This value will only be used as a fallback if we fail to get a proper session
+       * progress estimate from `NextSessionRotation`, as those estimates should be
+       * more accurate then the value we calculate for `HeartbeatAfter`.
+       **/
+      heartbeatAfter: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * The current set of keys that may issue a heartbeat.
+       **/
+      keys: AugmentedQuery<ApiType, () => Observable<Vec<PalletImOnlineSr25519AppSr25519Public>>, []>;
+      /**
+       * For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to
+       * `WrapperOpaque<BoundedOpaqueNetworkState>`.
+       **/
+      receivedHeartbeats: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: u32 | AnyNumber | Uint8Array) => Observable<Option<WrapperOpaque<PalletImOnlineBoundedOpaqueNetworkState>>>, [u32, u32]>;
+    };
+    joystreamUtility: {
+    };
+    members: {
+      /**
+       * Initial invitation balance for the invited member.
+       **/
+      initialInvitationBalance: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Initial invitation count for the newly bought membership.
+       **/
+      initialInvitationCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Registered unique handles hash and their mapping to their owner.
+       **/
+      memberIdByHandleHash: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<u64>, [H256]>;
+      /**
+       * Mapping of member's id to their membership profile.
+       **/
+      membershipById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletMembershipMembershipObject>>, [u64]>;
+      /**
+       * Current membership price.
+       **/
+      membershipPrice: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * MemberId to assign to next member that is added to the registry, and is also the
+       * total number of members created. MemberIds start at Zero.
+       **/
+      nextMemberId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Referral cut percent of the membership fee to receive on buying the membership.
+       **/
+      referralCut: AugmentedQuery<ApiType, () => Observable<u8>, []>;
+      /**
+       * Double of a staking account id and member id to the confirmation status.
+       **/
+      stakingAccountIdMemberStatus: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletMembershipStakingAccountMemberBinding>, [AccountId32]>;
+    };
+    membershipWorkingGroup: {
+      /**
+       * Count of active workers.
+       **/
+      activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Maps identifier to worker application on opening.
+       **/
+      applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+      /**
+       * Budget for the working group.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Current group lead.
+       **/
+      currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+      /**
+       * Next identifier value for new worker application.
+       **/
+      nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier value for new job opening.
+       **/
+      nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier for a new worker.
+       **/
+      nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Maps identifier to job opening.
+       **/
+      openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+      /**
+       * Status text hash.
+       **/
+      statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * Maps identifier to corresponding worker.
+       **/
+      workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+    };
+    multisig: {
+      calls: AugmentedQuery<ApiType, (arg: U8aFixed | string | Uint8Array) => Observable<Option<ITuple<[WrapperKeepOpaque<Call>, AccountId32, u128]>>>, [U8aFixed]>;
+      /**
+       * The set of open multisig operations.
+       **/
+      multisigs: AugmentedQuery<ApiType, (arg1: AccountId32 | string | Uint8Array, arg2: U8aFixed | string | Uint8Array) => Observable<Option<PalletMultisigMultisig>>, [AccountId32, U8aFixed]>;
+    };
+    offences: {
+      /**
+       * A vector of reports of the same kind that happened at the same time slot.
+       **/
+      concurrentReportsIndex: AugmentedQuery<ApiType, (arg1: U8aFixed | string | Uint8Array, arg2: Bytes | string | Uint8Array) => Observable<Vec<H256>>, [U8aFixed, Bytes]>;
+      /**
+       * The primary structure that holds all offence records keyed by report identifiers.
+       **/
+      reports: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<Option<SpStakingOffenceOffenceDetails>>, [H256]>;
+      /**
+       * Enumerates all reports of a kind along with the time they happened.
+       * 
+       * All reports are sorted by the time of offence.
+       * 
+       * Note that the actual type of this mapping is `Vec<u8>`, this is because values of
+       * different types are not supported at the moment so we are doing the manual serialization.
+       **/
+      reportsByKindIndex: AugmentedQuery<ApiType, (arg: U8aFixed | string | Uint8Array) => Observable<Bytes>, [U8aFixed]>;
+    };
+    operationsWorkingGroupAlpha: {
+      /**
+       * Count of active workers.
+       **/
+      activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Maps identifier to worker application on opening.
+       **/
+      applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+      /**
+       * Budget for the working group.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Current group lead.
+       **/
+      currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+      /**
+       * Next identifier value for new worker application.
+       **/
+      nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier value for new job opening.
+       **/
+      nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier for a new worker.
+       **/
+      nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Maps identifier to job opening.
+       **/
+      openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+      /**
+       * Status text hash.
+       **/
+      statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * Maps identifier to corresponding worker.
+       **/
+      workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+    };
+    operationsWorkingGroupBeta: {
+      /**
+       * Count of active workers.
+       **/
+      activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Maps identifier to worker application on opening.
+       **/
+      applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+      /**
+       * Budget for the working group.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Current group lead.
+       **/
+      currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+      /**
+       * Next identifier value for new worker application.
+       **/
+      nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier value for new job opening.
+       **/
+      nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier for a new worker.
+       **/
+      nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Maps identifier to job opening.
+       **/
+      openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+      /**
+       * Status text hash.
+       **/
+      statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * Maps identifier to corresponding worker.
+       **/
+      workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+    };
+    operationsWorkingGroupGamma: {
+      /**
+       * Count of active workers.
+       **/
+      activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Maps identifier to worker application on opening.
+       **/
+      applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+      /**
+       * Budget for the working group.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Current group lead.
+       **/
+      currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+      /**
+       * Next identifier value for new worker application.
+       **/
+      nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier value for new job opening.
+       **/
+      nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier for a new worker.
+       **/
+      nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Maps identifier to job opening.
+       **/
+      openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+      /**
+       * Status text hash.
+       **/
+      statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * Maps identifier to corresponding worker.
+       **/
+      workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+    };
+    projectToken: {
+      /**
+       * Double map TokenId x MemberId => AccountData for managing account data
+       **/
+      accountInfoByTokenAndMember: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProjectTokenAccountData>, [u64, u64]>;
+      /**
+       * AMM buy transaction fee percentage
+       **/
+      ammBuyTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * Percentage threshold for deactivating the amm functionality
+       **/
+      ammDeactivationThreshold: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * AMM sell transaction fee percentage
+       **/
+      ammSellTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * Bloat Bond value used during account creation
+       **/
+      bloatBond: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Max patronage rate allowed
+       **/
+      maxYearlyPatronageRate: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * Minimum slope parameters allowed for AMM curve
+       **/
+      minAmmSlopeParameter: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Minimum revenue split duration constraint
+       **/
+      minRevenueSplitDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Minimum revenue split time to start constraint
+       **/
+      minRevenueSplitTimeToStart: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Minimum duration of a token sale
+       **/
+      minSaleDuration: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Token Id nonce
+       **/
+      nextTokenId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Platform fee (percentage) charged on top of each sale purchase (in JOY) and burned
+       **/
+      salePlatformFee: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * Set for the tokens symbols
+       **/
+      symbolsUsed: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<Null>, [H256]>;
+      /**
+       * map TokenId => TokenData to retrieve token information
+       **/
+      tokenInfoById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletProjectTokenTokenData>, [u64]>;
+    };
+    proposalsCodex: {
+      /**
+       * Map proposal id to its discussion thread id
+       **/
+      threadIdByProposalId: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<u64>, [u32]>;
+    };
+    proposalsDiscussion: {
+      /**
+       * Count of all posts that have been created.
+       **/
+      postCount: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Map thread id and post id to corresponding post.
+       **/
+      postThreadIdByPostId: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProposalsDiscussionDiscussionPost>, [u64, u64]>;
+      /**
+       * Map thread identifier to corresponding thread.
+       **/
+      threadById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletProposalsDiscussionDiscussionThread>, [u64]>;
+      /**
+       * Count of all threads that have been created.
+       **/
+      threadCount: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+    };
+    proposalsEngine: {
+      /**
+       * Count of active proposals.
+       **/
+      activeProposalCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Map proposal executable code by proposal id.
+       **/
+      dispatchableCallCode: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Bytes>, [u32]>;
+      /**
+       * Count of all proposals that have been created.
+       **/
+      proposalCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Map proposal by its id.
+       **/
+      proposals: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<PalletProposalsEngineProposal>, [u32]>;
+      /**
+       * Double map for preventing duplicate votes. Should be cleaned after usage.
+       **/
+      voteExistsByProposalByVoter: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProposalsEngineVoteKind>, [u32, u64]>;
+    };
+    randomnessCollectiveFlip: {
+      /**
+       * Series of block headers from the last 81 blocks that acts as random seed material. This
+       * is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of
+       * the oldest hash.
+       **/
+      randomMaterial: AugmentedQuery<ApiType, () => Observable<Vec<H256>>, []>;
+    };
+    referendum: {
+      /**
+       * Accounts that permanently opted out of voting in referendum.
+       **/
+      accountsOptedOut: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Null>, [AccountId32]>;
+      /**
+       * Current referendum stage.
+       **/
+      stage: AugmentedQuery<ApiType, () => Observable<PalletReferendumReferendumStage>, []>;
+      /**
+       * Votes cast in the referendum. A new record is added to this map when a user casts a
+       * sealed vote.
+       * It is modified when a user reveals the vote's commitment proof.
+       * A record is finally removed when the user unstakes, which can happen during a voting
+       * stage or after the current cycle ends.
+       * A stake for a vote can be reused in future referendum cycles.
+       **/
+      votes: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletReferendumCastVote>, [AccountId32]>;
+    };
+    session: {
+      /**
+       * Current index of the session.
+       **/
+      currentIndex: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Indices of disabled validators.
+       * 
+       * The vec is always kept sorted so that we can find whether a given validator is
+       * disabled using binary search. It gets cleared when `on_session_ending` returns
+       * a new set of identities.
+       **/
+      disabledValidators: AugmentedQuery<ApiType, () => Observable<Vec<u32>>, []>;
+      /**
+       * The owner of a key. The key is the `KeyTypeId` + the encoded key.
+       **/
+      keyOwner: AugmentedQuery<ApiType, (arg: ITuple<[SpCoreCryptoKeyTypeId, Bytes]> | [SpCoreCryptoKeyTypeId | string | Uint8Array, Bytes | string | Uint8Array]) => Observable<Option<AccountId32>>, [ITuple<[SpCoreCryptoKeyTypeId, Bytes]>]>;
+      /**
+       * The next session keys for a validator.
+       **/
+      nextKeys: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<JoystreamNodeRuntimeSessionKeys>>, [AccountId32]>;
+      /**
+       * True if the underlying economic identities or weighting behind the validators
+       * has changed in the queued validator set.
+       **/
+      queuedChanged: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+      /**
+       * The queued keys for the next session. When the next session begins, these keys
+       * will be used to determine the validator's session keys.
+       **/
+      queuedKeys: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[AccountId32, JoystreamNodeRuntimeSessionKeys]>>>, []>;
+      /**
+       * The current set of validators.
+       **/
+      validators: AugmentedQuery<ApiType, () => Observable<Vec<AccountId32>>, []>;
+    };
+    staking: {
+      /**
+       * The active era information, it holds index and start.
+       * 
+       * The active era is the era being currently rewarded. Validator set of this era must be
+       * equal to [`SessionInterface::validators`].
+       **/
+      activeEra: AugmentedQuery<ApiType, () => Observable<Option<PalletStakingActiveEraInfo>>, []>;
+      /**
+       * Map from all locked "stash" accounts to the controller account.
+       **/
+      bonded: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<AccountId32>>, [AccountId32]>;
+      /**
+       * A mapping from still-bonded eras to the first session index of that era.
+       * 
+       * Must contains information for eras for the range:
+       * `[active_era - bounding_duration; active_era]`
+       **/
+      bondedEras: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[u32, u32]>>>, []>;
+      /**
+       * The amount of currency given to reporters of a slash event which was
+       * canceled by extraordinary circumstances (e.g. governance).
+       **/
+      canceledSlashPayout: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * The threshold for when users can start calling `chill_other` for other validators /
+       * nominators. The threshold is compared to the actual number of validators / nominators
+       * (`CountFor*`) in the system compared to the configured max (`Max*Count`).
+       **/
+      chillThreshold: AugmentedQuery<ApiType, () => Observable<Option<Percent>>, []>;
+      /**
+       * Counter for the related counted storage map
+       **/
+      counterForNominators: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Counter for the related counted storage map
+       **/
+      counterForValidators: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * The current era index.
+       * 
+       * This is the latest planned era, depending on how the Session pallet queues the validator
+       * set, it might be active or not.
+       **/
+      currentEra: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+      /**
+       * The last planned session scheduled by the session pallet.
+       * 
+       * This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
+       **/
+      currentPlannedSession: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * The earliest era for which we have a pending, unapplied slash.
+       **/
+      earliestUnappliedSlash: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+      /**
+       * Rewards for the last `HISTORY_DEPTH` eras.
+       * If reward hasn't been set or has been removed then 0 reward is returned.
+       **/
+      erasRewardPoints: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<PalletStakingEraRewardPoints>, [u32]>;
+      /**
+       * Exposure of validator at era.
+       * 
+       * This is keyed first by the era index to allow bulk deletion and then the stash account.
+       * 
+       * Is it removed after `HISTORY_DEPTH` eras.
+       * If stakers hasn't been set or has been removed then empty exposure is returned.
+       **/
+      erasStakers: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<PalletStakingExposure>, [u32, AccountId32]>;
+      /**
+       * Clipped Exposure of validator at era.
+       * 
+       * This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
+       * `T::MaxNominatorRewardedPerValidator` biggest stakers.
+       * (Note: the field `total` and `own` of the exposure remains unchanged).
+       * This is used to limit the i/o cost for the nominator payout.
+       * 
+       * This is keyed fist by the era index to allow bulk deletion and then the stash account.
+       * 
+       * Is it removed after `HISTORY_DEPTH` eras.
+       * If stakers hasn't been set or has been removed then empty exposure is returned.
+       **/
+      erasStakersClipped: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<PalletStakingExposure>, [u32, AccountId32]>;
+      /**
+       * The session index at which the era start for the last `HISTORY_DEPTH` eras.
+       * 
+       * Note: This tracks the starting session (i.e. session index when era start being active)
+       * for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
+       **/
+      erasStartSessionIndex: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Option<u32>>, [u32]>;
+      /**
+       * The total amount staked for the last `HISTORY_DEPTH` eras.
+       * If total hasn't been set or has been removed then 0 stake is returned.
+       **/
+      erasTotalStake: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<u128>, [u32]>;
+      /**
+       * Similar to `ErasStakers`, this holds the preferences of validators.
+       * 
+       * This is keyed first by the era index to allow bulk deletion and then the stash account.
+       * 
+       * Is it removed after `HISTORY_DEPTH` eras.
+       **/
+      erasValidatorPrefs: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<PalletStakingValidatorPrefs>, [u32, AccountId32]>;
+      /**
+       * The total validator era payout for the last `HISTORY_DEPTH` eras.
+       * 
+       * Eras that haven't finished yet or has been removed doesn't have reward.
+       **/
+      erasValidatorReward: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Option<u128>>, [u32]>;
+      /**
+       * Mode of era forcing.
+       **/
+      forceEra: AugmentedQuery<ApiType, () => Observable<PalletStakingForcing>, []>;
+      /**
+       * Number of eras to keep in history.
+       * 
+       * Information is kept for eras in `[current_era - history_depth; current_era]`.
+       * 
+       * Must be more than the number of eras delayed by session otherwise. I.e. active era must
+       * always be in history. I.e. `active_era > current_era - history_depth` must be
+       * guaranteed.
+       **/
+      historyDepth: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Any validators that may never be slashed or forcibly kicked. It's a Vec since they're
+       * easy to initialize and the performance hit is minimal (we expect no more than four
+       * invulnerables) and restricted to testnets.
+       **/
+      invulnerables: AugmentedQuery<ApiType, () => Observable<Vec<AccountId32>>, []>;
+      /**
+       * Map from all (unlocked) "controller" accounts to the info regarding the staking.
+       **/
+      ledger: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletStakingStakingLedger>>, [AccountId32]>;
+      /**
+       * The maximum nominator count before we stop allowing new validators to join.
+       * 
+       * When this value is not set, no limits are enforced.
+       **/
+      maxNominatorsCount: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+      /**
+       * The maximum validator count before we stop allowing new validators to join.
+       * 
+       * When this value is not set, no limits are enforced.
+       **/
+      maxValidatorsCount: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+      /**
+       * The minimum amount of commission that validators can set.
+       * 
+       * If set to `0`, no limit exists.
+       **/
+      minCommission: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+      /**
+       * Minimum number of staking participants before emergency conditions are imposed.
+       **/
+      minimumValidatorCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * The minimum active bond to become and maintain the role of a nominator.
+       **/
+      minNominatorBond: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * The minimum active bond to become and maintain the role of a validator.
+       **/
+      minValidatorBond: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * The map from nominator stash key to their nomination preferences, namely the validators that
+       * they wish to support.
+       * 
+       * Note that the keys of this storage map might become non-decodable in case the
+       * [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators
+       * are still existent in storage, their key is correct and retrievable (i.e. `contains_key`
+       * indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable
+       * nominators will effectively not-exist, until they re-submit their preferences such that it
+       * is within the bounds of the newly set `Config::MaxNominations`.
+       * 
+       * This implies that `::iter_keys().count()` and `::iter().count()` might return different
+       * values for this map. Moreover, the main `::count()` is aligned with the former, namely the
+       * number of keys that exist.
+       * 
+       * Lastly, if any of the nominators become non-decodable, they can be chilled immediately via
+       * [`Call::chill_other`] dispatchable by anyone.
+       **/
+      nominators: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletStakingNominations>>, [AccountId32]>;
+      /**
+       * All slashing events on nominators, mapped by era to the highest slash value of the era.
+       **/
+      nominatorSlashInEra: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<Option<u128>>, [u32, AccountId32]>;
+      /**
+       * Indices of validators that have offended in the active era and whether they are currently
+       * disabled.
+       * 
+       * This value should be a superset of disabled validators since not all offences lead to the
+       * validator being disabled (if there was no slash). This is needed to track the percentage of
+       * validators that have offended in the current era, ensuring a new era is forced if
+       * `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find
+       * whether a given validator has previously offended using binary search. It gets cleared when
+       * the era ends.
+       **/
+      offendingValidators: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[u32, bool]>>>, []>;
+      /**
+       * Where the reward payment should be made. Keyed by stash.
+       **/
+      payee: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletStakingRewardDestination>, [AccountId32]>;
+      /**
+       * Slashing spans for stash accounts.
+       **/
+      slashingSpans: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletStakingSlashingSlashingSpans>>, [AccountId32]>;
+      /**
+       * The percentage of the slash that is distributed to reporters.
+       * 
+       * The rest of the slashed value is handled by the `Slash`.
+       **/
+      slashRewardFraction: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+      /**
+       * Records information about the maximum slash of a stash within a slashing span,
+       * as well as how much reward has been paid out.
+       **/
+      spanSlash: AugmentedQuery<ApiType, (arg: ITuple<[AccountId32, u32]> | [AccountId32 | string | Uint8Array, u32 | AnyNumber | Uint8Array]) => Observable<PalletStakingSlashingSpanRecord>, [ITuple<[AccountId32, u32]>]>;
+      /**
+       * True if network has been upgraded to this version.
+       * Storage version of the pallet.
+       * 
+       * This is set to v7.0.0 for new networks.
+       **/
+      storageVersion: AugmentedQuery<ApiType, () => Observable<PalletStakingReleases>, []>;
+      /**
+       * All unapplied slashes that are queued for later.
+       **/
+      unappliedSlashes: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Vec<PalletStakingUnappliedSlash>>, [u32]>;
+      /**
+       * The ideal number of staking participants.
+       **/
+      validatorCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * The map from (wannabe) validator stash key to the preferences of that validator.
+       **/
+      validators: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletStakingValidatorPrefs>, [AccountId32]>;
+      /**
+       * All slashing events on validators, mapped by era to the highest slash proportion
+       * and slash value of the era.
+       **/
+      validatorSlashInEra: AugmentedQuery<ApiType, (arg1: u32 | AnyNumber | Uint8Array, arg2: AccountId32 | string | Uint8Array) => Observable<Option<ITuple<[Perbill, u128]>>>, [u32, AccountId32]>;
+    };
+    storage: {
+      /**
+       * Bags storage map.
+       **/
+      bags: AugmentedQuery<ApiType, (arg: PalletStorageBagIdType | { Static: any } | { Dynamic: any } | string | Uint8Array) => Observable<PalletStorageBagRecord>, [PalletStorageBagIdType]>;
+      /**
+       * Blacklisted data object hashes.
+       **/
+      blacklist: AugmentedQuery<ApiType, (arg: Bytes | string | Uint8Array) => Observable<Null>, [Bytes]>;
+      /**
+       * Blacklist collection counter.
+       **/
+      currentBlacklistSize: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Size based pricing of new objects uploaded.
+       **/
+      dataObjectPerMegabyteFee: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * 'Data objects for bags' storage double map.
+       **/
+      dataObjectsById: AugmentedQuery<ApiType, (arg1: PalletStorageBagIdType | { Static: any } | { Dynamic: any } | string | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletStorageDataObject>, [PalletStorageBagIdType, u64]>;
+      /**
+       * The state bloat bond for the data objects (helps preventing the state bloat).
+       **/
+      dataObjectStateBloatBondValue: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * 'Distribution bucket' storage double map.
+       **/
+      distributionBucketByFamilyIdById: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletStorageDistributionBucketRecord>, [u64, u64]>;
+      /**
+       * Distribution bucket families.
+       **/
+      distributionBucketFamilyById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletStorageDistributionBucketFamilyRecord>, [u64]>;
+      /**
+       * Total number of distribution bucket families in the system.
+       **/
+      distributionBucketFamilyNumber: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * "Distribution buckets per bag" number limit.
+       **/
+      distributionBucketsPerBagLimit: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * DynamicBagCreationPolicy by bag type storage map.
+       **/
+      dynamicBagCreationPolicies: AugmentedQuery<ApiType, (arg: PalletStorageDynamicBagType | 'Member' | 'Channel' | number | Uint8Array) => Observable<PalletStorageDynamicBagCreationPolicy>, [PalletStorageDynamicBagType]>;
+      /**
+       * Data object id counter. Starts at zero.
+       **/
+      nextDataObjectId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Distribution bucket family id counter. Starts at zero.
+       **/
+      nextDistributionBucketFamilyId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Storage bucket id counter. Starts at zero.
+       **/
+      nextStorageBucketId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Storage buckets.
+       **/
+      storageBucketById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletStorageStorageBucketRecord>>, [u64]>;
+      /**
+       * "Storage buckets per bag" number limit.
+       **/
+      storageBucketsPerBagLimit: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Defines whether all new uploads blocked
+       **/
+      uploadingBlocked: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+      /**
+       * "Max objects number for a storage  bucket voucher" number limit.
+       **/
+      voucherMaxObjectsNumberLimit: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * "Max objects size for a storage bucket voucher" number limit.
+       **/
+      voucherMaxObjectsSizeLimit: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+    };
+    storageWorkingGroup: {
+      /**
+       * Count of active workers.
+       **/
+      activeWorkerCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Maps identifier to worker application on opening.
+       **/
+      applicationById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupJobApplication>>, [u64]>;
+      /**
+       * Budget for the working group.
+       **/
+      budget: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      /**
+       * Current group lead.
+       **/
+      currentLead: AugmentedQuery<ApiType, () => Observable<Option<u64>>, []>;
+      /**
+       * Next identifier value for new worker application.
+       **/
+      nextApplicationId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier value for new job opening.
+       **/
+      nextOpeningId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Next identifier for a new worker.
+       **/
+      nextWorkerId: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+      /**
+       * Maps identifier to job opening.
+       **/
+      openingById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletWorkingGroupOpening>, [u64]>;
+      /**
+       * Status text hash.
+       **/
+      statusTextHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * Maps identifier to corresponding worker.
+       **/
+      workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
+    };
+    system: {
+      /**
+       * The full account information for a particular account ID.
+       **/
+      account: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<FrameSystemAccountInfo>, [AccountId32]>;
+      /**
+       * Total length (in bytes) for all extrinsics put together, for the current block.
+       **/
+      allExtrinsicsLen: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+      /**
+       * Map of block numbers to block hashes.
+       **/
+      blockHash: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<H256>, [u32]>;
+      /**
+       * The current weight for the block.
+       **/
+      blockWeight: AugmentedQuery<ApiType, () => Observable<FrameSupportWeightsPerDispatchClassU64>, []>;
+      /**
+       * Digest of the current block, also part of the block header.
+       **/
+      digest: AugmentedQuery<ApiType, () => Observable<SpRuntimeDigest>, []>;
+      /**
+       * The number of events in the `Events<T>` list.
+       **/
+      eventCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Events deposited for the current block.
+       * 
+       * NOTE: The item is unbound and should therefore never be read on chain.
+       * It could otherwise inflate the PoV size of a block.
+       * 
+       * Events have a large in-memory size. Box the events to not go out-of-memory
+       * just in case someone still reads them from within the runtime.
+       **/
+      events: AugmentedQuery<ApiType, () => Observable<Vec<FrameSystemEventRecord>>, []>;
+      /**
+       * Mapping between a topic (represented by T::Hash) and a vector of indexes
+       * of events in the `<Events<T>>` list.
+       * 
+       * All topic vectors have deterministic storage locations depending on the topic. This
+       * allows light-clients to leverage the changes trie storage tracking mechanism and
+       * in case of changes fetch the list of events of interest.
+       * 
+       * The value has the type `(T::BlockNumber, EventIndex)` because if we used only just
+       * the `EventIndex` then in case if the topic has the same contents on the next block
+       * no notification will be triggered thus the event might be lost.
+       **/
+      eventTopics: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<Vec<ITuple<[u32, u32]>>>, [H256]>;
+      /**
+       * The execution phase of the block.
+       **/
+      executionPhase: AugmentedQuery<ApiType, () => Observable<Option<FrameSystemPhase>>, []>;
+      /**
+       * Total extrinsics count for the current block.
+       **/
+      extrinsicCount: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
+      /**
+       * Extrinsics data for the current block (maps an extrinsic's index to its data).
+       **/
+      extrinsicData: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Bytes>, [u32]>;
+      /**
+       * Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.
+       **/
+      lastRuntimeUpgrade: AugmentedQuery<ApiType, () => Observable<Option<FrameSystemLastRuntimeUpgradeInfo>>, []>;
+      /**
+       * The current block number being processed. Set by `execute_block`.
+       **/
+      number: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Hash of the previous block.
+       **/
+      parentHash: AugmentedQuery<ApiType, () => Observable<H256>, []>;
+      /**
+       * True if we have upgraded so that AccountInfo contains three types of `RefCount`. False
+       * (default) if not.
+       **/
+      upgradedToTripleRefCount: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+      /**
+       * True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.
+       **/
+      upgradedToU32RefCount: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+    };
+    timestamp: {
+      /**
+       * Did the timestamp get updated in this block?
+       **/
+      didUpdate: AugmentedQuery<ApiType, () => Observable<bool>, []>;
+      /**
+       * Current time for the current block.
+       **/
+      now: AugmentedQuery<ApiType, () => Observable<u64>, []>;
+    };
+    transactionPayment: {
+      nextFeeMultiplier: AugmentedQuery<ApiType, () => Observable<u128>, []>;
+      storageVersion: AugmentedQuery<ApiType, () => Observable<PalletTransactionPaymentReleases>, []>;
+    };
+    vesting: {
+      /**
+       * Storage version of the pallet.
+       * 
+       * New networks start with latest version, as determined by the genesis build.
+       **/
+      storageVersion: AugmentedQuery<ApiType, () => Observable<PalletVestingReleases>, []>;
+      /**
+       * Information regarding the vesting of a given account.
+       **/
+      vesting: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<Vec<PalletVestingVestingInfo>>>, [AccountId32]>;
+    };
+  } // AugmentedQueries
+} // declare module
diff --git a/node_modules/@joystream/types/types/src/augment/augment-api-rpc.ts b/node_modules/@joystream/types/types/src/augment/augment-api-rpc.ts
new file mode 100644
index 0000000..9c59cca
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/augment-api-rpc.ts
@@ -0,0 +1,586 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+
+import type { AugmentedRpc } from '@polkadot/rpc-core/types';
+import type { Metadata, StorageKey } from '@polkadot/types';
+import type { Bytes, HashMap, Json, Null, Option, Text, U256, U64, Vec, bool, u32, u64 } from '@polkadot/types-codec';
+import type { AnyNumber, Codec } from '@polkadot/types-codec/types';
+import type { ExtrinsicOrHash, ExtrinsicStatus } from '@polkadot/types/interfaces/author';
+import type { EpochAuthorship } from '@polkadot/types/interfaces/babe';
+import type { BeefySignedCommitment } from '@polkadot/types/interfaces/beefy';
+import type { BlockHash } from '@polkadot/types/interfaces/chain';
+import type { PrefixedStorageKey } from '@polkadot/types/interfaces/childstate';
+import type { AuthorityId } from '@polkadot/types/interfaces/consensus';
+import type { CodeUploadRequest, CodeUploadResult, ContractCallRequest, ContractExecResult, ContractInstantiateResult, InstantiateRequest } from '@polkadot/types/interfaces/contracts';
+import type { BlockStats } from '@polkadot/types/interfaces/dev';
+import type { CreatedBlock } from '@polkadot/types/interfaces/engine';
+import type { EthAccount, EthCallRequest, EthFilter, EthFilterChanges, EthLog, EthReceipt, EthRichBlock, EthSubKind, EthSubParams, EthSyncStatus, EthTransaction, EthTransactionRequest, EthWork } from '@polkadot/types/interfaces/eth';
+import type { Extrinsic } from '@polkadot/types/interfaces/extrinsics';
+import type { EncodedFinalityProofs, JustificationNotification, ReportedRoundStates } from '@polkadot/types/interfaces/grandpa';
+import type { MmrLeafBatchProof, MmrLeafProof } from '@polkadot/types/interfaces/mmr';
+import type { StorageKind } from '@polkadot/types/interfaces/offchain';
+import type { FeeDetails, RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment';
+import type { RpcMethods } from '@polkadot/types/interfaces/rpc';
+import type { AccountId, BlockNumber, H160, H256, H64, Hash, Header, Index, Justification, KeyValue, SignedBlock, StorageData } from '@polkadot/types/interfaces/runtime';
+import type { MigrationStatusResult, ReadProof, RuntimeVersion, TraceBlockResponse } from '@polkadot/types/interfaces/state';
+import type { ApplyExtrinsicResult, ChainProperties, ChainType, Health, NetworkState, NodeRole, PeerInfo, SyncState } from '@polkadot/types/interfaces/system';
+import type { IExtrinsic, Observable } from '@polkadot/types/types';
+
+declare module '@polkadot/rpc-core/types/jsonrpc' {
+  export interface RpcInterface {
+    author: {
+      /**
+       * Returns true if the keystore has private keys for the given public key and key type.
+       **/
+      hasKey: AugmentedRpc<(publicKey: Bytes | string | Uint8Array, keyType: Text | string) => Observable<bool>>;
+      /**
+       * Returns true if the keystore has private keys for the given session public keys.
+       **/
+      hasSessionKeys: AugmentedRpc<(sessionKeys: Bytes | string | Uint8Array) => Observable<bool>>;
+      /**
+       * Insert a key into the keystore.
+       **/
+      insertKey: AugmentedRpc<(keyType: Text | string, suri: Text | string, publicKey: Bytes | string | Uint8Array) => Observable<Bytes>>;
+      /**
+       * Returns all pending extrinsics, potentially grouped by sender
+       **/
+      pendingExtrinsics: AugmentedRpc<() => Observable<Vec<Extrinsic>>>;
+      /**
+       * Remove given extrinsic from the pool and temporarily ban it to prevent reimporting
+       **/
+      removeExtrinsic: AugmentedRpc<(bytesOrHash: Vec<ExtrinsicOrHash> | (ExtrinsicOrHash | { Hash: any } | { Extrinsic: any } | string | Uint8Array)[]) => Observable<Vec<Hash>>>;
+      /**
+       * Generate new session keys and returns the corresponding public keys
+       **/
+      rotateKeys: AugmentedRpc<() => Observable<Bytes>>;
+      /**
+       * Submit and subscribe to watch an extrinsic until unsubscribed
+       **/
+      submitAndWatchExtrinsic: AugmentedRpc<(extrinsic: IExtrinsic) => Observable<ExtrinsicStatus>>;
+      /**
+       * Submit a fully formatted extrinsic for block inclusion
+       **/
+      submitExtrinsic: AugmentedRpc<(extrinsic: IExtrinsic) => Observable<Hash>>;
+    };
+    babe: {
+      /**
+       * Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore
+       **/
+      epochAuthorship: AugmentedRpc<() => Observable<HashMap<AuthorityId, EpochAuthorship>>>;
+    };
+    beefy: {
+      /**
+       * Returns hash of the latest BEEFY finalized block as seen by this client.
+       **/
+      getFinalizedHead: AugmentedRpc<() => Observable<H256>>;
+      /**
+       * Returns the block most recently finalized by BEEFY, alongside side its justification.
+       **/
+      subscribeJustifications: AugmentedRpc<() => Observable<BeefySignedCommitment>>;
+    };
+    chain: {
+      /**
+       * Get header and body of a relay chain block
+       **/
+      getBlock: AugmentedRpc<(hash?: BlockHash | string | Uint8Array) => Observable<SignedBlock>>;
+      /**
+       * Get the block hash for a specific block
+       **/
+      getBlockHash: AugmentedRpc<(blockNumber?: BlockNumber | AnyNumber | Uint8Array) => Observable<BlockHash>>;
+      /**
+       * Get hash of the last finalized block in the canon chain
+       **/
+      getFinalizedHead: AugmentedRpc<() => Observable<BlockHash>>;
+      /**
+       * Retrieves the header for a specific block
+       **/
+      getHeader: AugmentedRpc<(hash?: BlockHash | string | Uint8Array) => Observable<Header>>;
+      /**
+       * Retrieves the newest header via subscription
+       **/
+      subscribeAllHeads: AugmentedRpc<() => Observable<Header>>;
+      /**
+       * Retrieves the best finalized header via subscription
+       **/
+      subscribeFinalizedHeads: AugmentedRpc<() => Observable<Header>>;
+      /**
+       * Retrieves the best header via subscription
+       **/
+      subscribeNewHeads: AugmentedRpc<() => Observable<Header>>;
+    };
+    childstate: {
+      /**
+       * Returns the keys with prefix from a child storage, leave empty to get all the keys
+       **/
+      getKeys: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, prefix: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+      /**
+       * Returns the keys with prefix from a child storage with pagination support
+       **/
+      getKeysPaged: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, prefix: StorageKey | string | Uint8Array | any, count: u32 | AnyNumber | Uint8Array, startKey?: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+      /**
+       * Returns a child storage entry at a specific block state
+       **/
+      getStorage: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Option<StorageData>>>;
+      /**
+       * Returns child storage entries for multiple keys at a specific block state
+       **/
+      getStorageEntries: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], at?: Hash | string | Uint8Array) => Observable<Vec<Option<StorageData>>>>;
+      /**
+       * Returns the hash of a child storage entry at a block state
+       **/
+      getStorageHash: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Option<Hash>>>;
+      /**
+       * Returns the size of a child storage entry at a block state
+       **/
+      getStorageSize: AugmentedRpc<(childKey: PrefixedStorageKey | string | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: Hash | string | Uint8Array) => Observable<Option<u64>>>;
+    };
+    contracts: {
+      /**
+       * Executes a call to a contract
+       **/
+      call: AugmentedRpc<(callRequest: ContractCallRequest | { origin?: any; dest?: any; value?: any; gasLimit?: any; storageDepositLimit?: any; inputData?: any } | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<ContractExecResult>>;
+      /**
+       * Returns the value under a specified storage key in a contract
+       **/
+      getStorage: AugmentedRpc<(address: AccountId | string | Uint8Array, key: H256 | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<Option<Bytes>>>;
+      /**
+       * Instantiate a new contract
+       **/
+      instantiate: AugmentedRpc<(request: InstantiateRequest | { origin?: any; value?: any; gasLimit?: any; storageDepositLimit?: any; code?: any; data?: any; salt?: any } | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<ContractInstantiateResult>>;
+      /**
+       * Returns the projected time a given contract will be able to sustain paying its rent
+       **/
+      rentProjection: AugmentedRpc<(address: AccountId | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<Option<BlockNumber>>>;
+      /**
+       * Upload new code without instantiating a contract from it
+       **/
+      uploadCode: AugmentedRpc<(uploadRequest: CodeUploadRequest | { origin?: any; code?: any; storageDepositLimit?: any } | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<CodeUploadResult>>;
+    };
+    dev: {
+      /**
+       * Reexecute the specified `block_hash` and gather statistics while doing so
+       **/
+      getBlockStats: AugmentedRpc<(at: Hash | string | Uint8Array) => Observable<Option<BlockStats>>>;
+    };
+    engine: {
+      /**
+       * Instructs the manual-seal authorship task to create a new block
+       **/
+      createBlock: AugmentedRpc<(createEmpty: bool | boolean | Uint8Array, finalize: bool | boolean | Uint8Array, parentHash?: BlockHash | string | Uint8Array) => Observable<CreatedBlock>>;
+      /**
+       * Instructs the manual-seal authorship task to finalize a block
+       **/
+      finalizeBlock: AugmentedRpc<(hash: BlockHash | string | Uint8Array, justification?: Justification) => Observable<bool>>;
+    };
+    eth: {
+      /**
+       * Returns accounts list.
+       **/
+      accounts: AugmentedRpc<() => Observable<Vec<H160>>>;
+      /**
+       * Returns the blockNumber
+       **/
+      blockNumber: AugmentedRpc<() => Observable<U256>>;
+      /**
+       * Call contract, returning the output data.
+       **/
+      call: AugmentedRpc<(request: EthCallRequest | { from?: any; to?: any; gasPrice?: any; gas?: any; value?: any; data?: any; nonce?: any } | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<Bytes>>;
+      /**
+       * Returns the chain ID used for transaction signing at the current best block. None is returned if not available.
+       **/
+      chainId: AugmentedRpc<() => Observable<U64>>;
+      /**
+       * Returns block author.
+       **/
+      coinbase: AugmentedRpc<() => Observable<H160>>;
+      /**
+       * Estimate gas needed for execution of given contract.
+       **/
+      estimateGas: AugmentedRpc<(request: EthCallRequest | { from?: any; to?: any; gasPrice?: any; gas?: any; value?: any; data?: any; nonce?: any } | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+      /**
+       * Returns current gas price.
+       **/
+      gasPrice: AugmentedRpc<() => Observable<U256>>;
+      /**
+       * Returns balance of the given account.
+       **/
+      getBalance: AugmentedRpc<(address: H160 | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+      /**
+       * Returns block with given hash.
+       **/
+      getBlockByHash: AugmentedRpc<(hash: H256 | string | Uint8Array, full: bool | boolean | Uint8Array) => Observable<Option<EthRichBlock>>>;
+      /**
+       * Returns block with given number.
+       **/
+      getBlockByNumber: AugmentedRpc<(block: BlockNumber | AnyNumber | Uint8Array, full: bool | boolean | Uint8Array) => Observable<Option<EthRichBlock>>>;
+      /**
+       * Returns the number of transactions in a block with given hash.
+       **/
+      getBlockTransactionCountByHash: AugmentedRpc<(hash: H256 | string | Uint8Array) => Observable<U256>>;
+      /**
+       * Returns the number of transactions in a block with given block number.
+       **/
+      getBlockTransactionCountByNumber: AugmentedRpc<(block: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+      /**
+       * Returns the code at given address at given time (block number).
+       **/
+      getCode: AugmentedRpc<(address: H160 | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<Bytes>>;
+      /**
+       * Returns filter changes since last poll.
+       **/
+      getFilterChanges: AugmentedRpc<(index: U256 | AnyNumber | Uint8Array) => Observable<EthFilterChanges>>;
+      /**
+       * Returns all logs matching given filter (in a range 'from' - 'to').
+       **/
+      getFilterLogs: AugmentedRpc<(index: U256 | AnyNumber | Uint8Array) => Observable<Vec<EthLog>>>;
+      /**
+       * Returns logs matching given filter object.
+       **/
+      getLogs: AugmentedRpc<(filter: EthFilter | { fromBlock?: any; toBlock?: any; blockHash?: any; address?: any; topics?: any } | string | Uint8Array) => Observable<Vec<EthLog>>>;
+      /**
+       * Returns proof for account and storage.
+       **/
+      getProof: AugmentedRpc<(address: H160 | string | Uint8Array, storageKeys: Vec<H256> | (H256 | string | Uint8Array)[], number: BlockNumber | AnyNumber | Uint8Array) => Observable<EthAccount>>;
+      /**
+       * Returns content of the storage at given address.
+       **/
+      getStorageAt: AugmentedRpc<(address: H160 | string | Uint8Array, index: U256 | AnyNumber | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<H256>>;
+      /**
+       * Returns transaction at given block hash and index.
+       **/
+      getTransactionByBlockHashAndIndex: AugmentedRpc<(hash: H256 | string | Uint8Array, index: U256 | AnyNumber | Uint8Array) => Observable<EthTransaction>>;
+      /**
+       * Returns transaction by given block number and index.
+       **/
+      getTransactionByBlockNumberAndIndex: AugmentedRpc<(number: BlockNumber | AnyNumber | Uint8Array, index: U256 | AnyNumber | Uint8Array) => Observable<EthTransaction>>;
+      /**
+       * Get transaction by its hash.
+       **/
+      getTransactionByHash: AugmentedRpc<(hash: H256 | string | Uint8Array) => Observable<EthTransaction>>;
+      /**
+       * Returns the number of transactions sent from given address at given time (block number).
+       **/
+      getTransactionCount: AugmentedRpc<(hash: H256 | string | Uint8Array, number?: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+      /**
+       * Returns transaction receipt by transaction hash.
+       **/
+      getTransactionReceipt: AugmentedRpc<(hash: H256 | string | Uint8Array) => Observable<EthReceipt>>;
+      /**
+       * Returns an uncles at given block and index.
+       **/
+      getUncleByBlockHashAndIndex: AugmentedRpc<(hash: H256 | string | Uint8Array, index: U256 | AnyNumber | Uint8Array) => Observable<EthRichBlock>>;
+      /**
+       * Returns an uncles at given block and index.
+       **/
+      getUncleByBlockNumberAndIndex: AugmentedRpc<(number: BlockNumber | AnyNumber | Uint8Array, index: U256 | AnyNumber | Uint8Array) => Observable<EthRichBlock>>;
+      /**
+       * Returns the number of uncles in a block with given hash.
+       **/
+      getUncleCountByBlockHash: AugmentedRpc<(hash: H256 | string | Uint8Array) => Observable<U256>>;
+      /**
+       * Returns the number of uncles in a block with given block number.
+       **/
+      getUncleCountByBlockNumber: AugmentedRpc<(number: BlockNumber | AnyNumber | Uint8Array) => Observable<U256>>;
+      /**
+       * Returns the hash of the current block, the seedHash, and the boundary condition to be met.
+       **/
+      getWork: AugmentedRpc<() => Observable<EthWork>>;
+      /**
+       * Returns the number of hashes per second that the node is mining with.
+       **/
+      hashrate: AugmentedRpc<() => Observable<U256>>;
+      /**
+       * Returns true if client is actively mining new blocks.
+       **/
+      mining: AugmentedRpc<() => Observable<bool>>;
+      /**
+       * Returns id of new block filter.
+       **/
+      newBlockFilter: AugmentedRpc<() => Observable<U256>>;
+      /**
+       * Returns id of new filter.
+       **/
+      newFilter: AugmentedRpc<(filter: EthFilter | { fromBlock?: any; toBlock?: any; blockHash?: any; address?: any; topics?: any } | string | Uint8Array) => Observable<U256>>;
+      /**
+       * Returns id of new block filter.
+       **/
+      newPendingTransactionFilter: AugmentedRpc<() => Observable<U256>>;
+      /**
+       * Returns protocol version encoded as a string (quotes are necessary).
+       **/
+      protocolVersion: AugmentedRpc<() => Observable<u64>>;
+      /**
+       * Sends signed transaction, returning its hash.
+       **/
+      sendRawTransaction: AugmentedRpc<(bytes: Bytes | string | Uint8Array) => Observable<H256>>;
+      /**
+       * Sends transaction; will block waiting for signer to return the transaction hash
+       **/
+      sendTransaction: AugmentedRpc<(tx: EthTransactionRequest | { from?: any; to?: any; gasPrice?: any; gas?: any; value?: any; data?: any; nonce?: any } | string | Uint8Array) => Observable<H256>>;
+      /**
+       * Used for submitting mining hashrate.
+       **/
+      submitHashrate: AugmentedRpc<(index: U256 | AnyNumber | Uint8Array, hash: H256 | string | Uint8Array) => Observable<bool>>;
+      /**
+       * Used for submitting a proof-of-work solution.
+       **/
+      submitWork: AugmentedRpc<(nonce: H64 | string | Uint8Array, headerHash: H256 | string | Uint8Array, mixDigest: H256 | string | Uint8Array) => Observable<bool>>;
+      /**
+       * Subscribe to Eth subscription.
+       **/
+      subscribe: AugmentedRpc<(kind: EthSubKind | 'newHeads' | 'logs' | 'newPendingTransactions' | 'syncing' | number | Uint8Array, params?: EthSubParams | { None: any } | { Logs: any } | string | Uint8Array) => Observable<Null>>;
+      /**
+       * Returns an object with data about the sync status or false.
+       **/
+      syncing: AugmentedRpc<() => Observable<EthSyncStatus>>;
+      /**
+       * Uninstalls filter.
+       **/
+      uninstallFilter: AugmentedRpc<(index: U256 | AnyNumber | Uint8Array) => Observable<bool>>;
+    };
+    grandpa: {
+      /**
+       * Prove finality for the given block number, returning the Justification for the last block in the set.
+       **/
+      proveFinality: AugmentedRpc<(blockNumber: BlockNumber | AnyNumber | Uint8Array) => Observable<Option<EncodedFinalityProofs>>>;
+      /**
+       * Returns the state of the current best round state as well as the ongoing background rounds
+       **/
+      roundState: AugmentedRpc<() => Observable<ReportedRoundStates>>;
+      /**
+       * Subscribes to grandpa justifications
+       **/
+      subscribeJustifications: AugmentedRpc<() => Observable<JustificationNotification>>;
+    };
+    mmr: {
+      /**
+       * Generate MMR proof for the given leaf indices.
+       **/
+      generateBatchProof: AugmentedRpc<(leafIndices: Vec<u64> | (u64 | AnyNumber | Uint8Array)[], at?: BlockHash | string | Uint8Array) => Observable<MmrLeafProof>>;
+      /**
+       * Generate MMR proof for given leaf index.
+       **/
+      generateProof: AugmentedRpc<(leafIndex: u64 | AnyNumber | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<MmrLeafBatchProof>>;
+    };
+    net: {
+      /**
+       * Returns true if client is actively listening for network connections. Otherwise false.
+       **/
+      listening: AugmentedRpc<() => Observable<bool>>;
+      /**
+       * Returns number of peers connected to node.
+       **/
+      peerCount: AugmentedRpc<() => Observable<Text>>;
+      /**
+       * Returns protocol version.
+       **/
+      version: AugmentedRpc<() => Observable<Text>>;
+    };
+    offchain: {
+      /**
+       * Get offchain local storage under given key and prefix
+       **/
+      localStorageGet: AugmentedRpc<(kind: StorageKind | 'PERSISTENT' | 'LOCAL' | number | Uint8Array, key: Bytes | string | Uint8Array) => Observable<Option<Bytes>>>;
+      /**
+       * Set offchain local storage under given key and prefix
+       **/
+      localStorageSet: AugmentedRpc<(kind: StorageKind | 'PERSISTENT' | 'LOCAL' | number | Uint8Array, key: Bytes | string | Uint8Array, value: Bytes | string | Uint8Array) => Observable<Null>>;
+    };
+    payment: {
+      /**
+       * Query the detailed fee of a given encoded extrinsic
+       **/
+      queryFeeDetails: AugmentedRpc<(extrinsic: Bytes | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<FeeDetails>>;
+      /**
+       * Retrieves the fee information for an encoded extrinsic
+       **/
+      queryInfo: AugmentedRpc<(extrinsic: Bytes | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<RuntimeDispatchInfo>>;
+    };
+    rpc: {
+      /**
+       * Retrieves the list of RPC methods that are exposed by the node
+       **/
+      methods: AugmentedRpc<() => Observable<RpcMethods>>;
+    };
+    state: {
+      /**
+       * Perform a call to a builtin on the chain
+       **/
+      call: AugmentedRpc<(method: Text | string, data: Bytes | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<Bytes>>;
+      /**
+       * Retrieves the keys with prefix of a specific child storage
+       **/
+      getChildKeys: AugmentedRpc<(childStorageKey: StorageKey | string | Uint8Array | any, childDefinition: StorageKey | string | Uint8Array | any, childType: u32 | AnyNumber | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+      /**
+       * Returns proof of storage for child key entries at a specific block state.
+       **/
+      getChildReadProof: AugmentedRpc<(childStorageKey: PrefixedStorageKey | string | Uint8Array, keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], at?: BlockHash | string | Uint8Array) => Observable<ReadProof>>;
+      /**
+       * Retrieves the child storage for a key
+       **/
+      getChildStorage: AugmentedRpc<(childStorageKey: StorageKey | string | Uint8Array | any, childDefinition: StorageKey | string | Uint8Array | any, childType: u32 | AnyNumber | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<StorageData>>;
+      /**
+       * Retrieves the child storage hash
+       **/
+      getChildStorageHash: AugmentedRpc<(childStorageKey: StorageKey | string | Uint8Array | any, childDefinition: StorageKey | string | Uint8Array | any, childType: u32 | AnyNumber | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Hash>>;
+      /**
+       * Retrieves the child storage size
+       **/
+      getChildStorageSize: AugmentedRpc<(childStorageKey: StorageKey | string | Uint8Array | any, childDefinition: StorageKey | string | Uint8Array | any, childType: u32 | AnyNumber | Uint8Array, key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<u64>>;
+      /**
+       * Retrieves the keys with a certain prefix
+       **/
+      getKeys: AugmentedRpc<(key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+      /**
+       * Returns the keys with prefix with pagination support.
+       **/
+      getKeysPaged: AugmentedRpc<(key: StorageKey | string | Uint8Array | any, count: u32 | AnyNumber | Uint8Array, startKey?: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Vec<StorageKey>>>;
+      /**
+       * Returns the runtime metadata
+       **/
+      getMetadata: AugmentedRpc<(at?: BlockHash | string | Uint8Array) => Observable<Metadata>>;
+      /**
+       * Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)
+       **/
+      getPairs: AugmentedRpc<(prefix: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Vec<KeyValue>>>;
+      /**
+       * Returns proof of storage entries at a specific block state
+       **/
+      getReadProof: AugmentedRpc<(keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], at?: BlockHash | string | Uint8Array) => Observable<ReadProof>>;
+      /**
+       * Get the runtime version
+       **/
+      getRuntimeVersion: AugmentedRpc<(at?: BlockHash | string | Uint8Array) => Observable<RuntimeVersion>>;
+      /**
+       * Retrieves the storage for a key
+       **/
+      getStorage: AugmentedRpc<<T = Codec>(key: StorageKey | string | Uint8Array | any, block?: Hash | Uint8Array | string) => Observable<T>>;
+      /**
+       * Retrieves the storage hash
+       **/
+      getStorageHash: AugmentedRpc<(key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<Hash>>;
+      /**
+       * Retrieves the storage size
+       **/
+      getStorageSize: AugmentedRpc<(key: StorageKey | string | Uint8Array | any, at?: BlockHash | string | Uint8Array) => Observable<u64>>;
+      /**
+       * Query historical storage entries (by key) starting from a start block
+       **/
+      queryStorage: AugmentedRpc<<T = Codec[]>(keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], fromBlock?: Hash | Uint8Array | string, toBlock?: Hash | Uint8Array | string) => Observable<[Hash, T][]>>;
+      /**
+       * Query storage entries (by key) starting at block hash given as the second parameter
+       **/
+      queryStorageAt: AugmentedRpc<<T = Codec[]>(keys: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[], at?: Hash | Uint8Array | string) => Observable<T>>;
+      /**
+       * Retrieves the runtime version via subscription
+       **/
+      subscribeRuntimeVersion: AugmentedRpc<() => Observable<RuntimeVersion>>;
+      /**
+       * Subscribes to storage changes for the provided keys
+       **/
+      subscribeStorage: AugmentedRpc<<T = Codec[]>(keys?: Vec<StorageKey> | (StorageKey | string | Uint8Array | any)[]) => Observable<T>>;
+      /**
+       * Provides a way to trace the re-execution of a single block
+       **/
+      traceBlock: AugmentedRpc<(block: Hash | string | Uint8Array, targets: Option<Text> | null | object | string | Uint8Array, storageKeys: Option<Text> | null | object | string | Uint8Array, methods: Option<Text> | null | object | string | Uint8Array) => Observable<TraceBlockResponse>>;
+      /**
+       * Check current migration state
+       **/
+      trieMigrationStatus: AugmentedRpc<(at?: BlockHash | string | Uint8Array) => Observable<MigrationStatusResult>>;
+    };
+    syncstate: {
+      /**
+       * Returns the json-serialized chainspec running the node, with a sync state.
+       **/
+      genSyncSpec: AugmentedRpc<(raw: bool | boolean | Uint8Array) => Observable<Json>>;
+    };
+    system: {
+      /**
+       * Retrieves the next accountIndex as available on the node
+       **/
+      accountNextIndex: AugmentedRpc<(accountId: AccountId | string | Uint8Array) => Observable<Index>>;
+      /**
+       * Adds the supplied directives to the current log filter
+       **/
+      addLogFilter: AugmentedRpc<(directives: Text | string) => Observable<Null>>;
+      /**
+       * Adds a reserved peer
+       **/
+      addReservedPeer: AugmentedRpc<(peer: Text | string) => Observable<Text>>;
+      /**
+       * Retrieves the chain
+       **/
+      chain: AugmentedRpc<() => Observable<Text>>;
+      /**
+       * Retrieves the chain type
+       **/
+      chainType: AugmentedRpc<() => Observable<ChainType>>;
+      /**
+       * Dry run an extrinsic at a given block
+       **/
+      dryRun: AugmentedRpc<(extrinsic: Bytes | string | Uint8Array, at?: BlockHash | string | Uint8Array) => Observable<ApplyExtrinsicResult>>;
+      /**
+       * Return health status of the node
+       **/
+      health: AugmentedRpc<() => Observable<Health>>;
+      /**
+       * The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example
+       **/
+      localListenAddresses: AugmentedRpc<() => Observable<Vec<Text>>>;
+      /**
+       * Returns the base58-encoded PeerId of the node
+       **/
+      localPeerId: AugmentedRpc<() => Observable<Text>>;
+      /**
+       * Retrieves the node name
+       **/
+      name: AugmentedRpc<() => Observable<Text>>;
+      /**
+       * Returns current state of the network
+       **/
+      networkState: AugmentedRpc<() => Observable<NetworkState>>;
+      /**
+       * Returns the roles the node is running as
+       **/
+      nodeRoles: AugmentedRpc<() => Observable<Vec<NodeRole>>>;
+      /**
+       * Returns the currently connected peers
+       **/
+      peers: AugmentedRpc<() => Observable<Vec<PeerInfo>>>;
+      /**
+       * Get a custom set of properties as a JSON object, defined in the chain spec
+       **/
+      properties: AugmentedRpc<() => Observable<ChainProperties>>;
+      /**
+       * Remove a reserved peer
+       **/
+      removeReservedPeer: AugmentedRpc<(peerId: Text | string) => Observable<Text>>;
+      /**
+       * Returns the list of reserved peers
+       **/
+      reservedPeers: AugmentedRpc<() => Observable<Vec<Text>>>;
+      /**
+       * Resets the log filter to Substrate defaults
+       **/
+      resetLogFilter: AugmentedRpc<() => Observable<Null>>;
+      /**
+       * Returns the state of the syncing of the node
+       **/
+      syncState: AugmentedRpc<() => Observable<SyncState>>;
+      /**
+       * Retrieves the version of the node
+       **/
+      version: AugmentedRpc<() => Observable<Text>>;
+    };
+    web3: {
+      /**
+       * Returns current client version.
+       **/
+      clientVersion: AugmentedRpc<() => Observable<Text>>;
+      /**
+       * Returns sha3 of the given data
+       **/
+      sha3: AugmentedRpc<(data: Bytes | string | Uint8Array) => Observable<H256>>;
+    };
+  } // RpcInterface
+} // declare module
diff --git a/node_modules/@joystream/types/types/src/augment/augment-api-tx.ts b/node_modules/@joystream/types/types/src/augment/augment-api-tx.ts
new file mode 100644
index 0000000..186547f
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/augment-api-tx.ts
@@ -0,0 +1,5814 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+
+import type { ApiTypes } from '@polkadot/api-base/types';
+import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { AnyNumber, IMethod, ITuple } from '@polkadot/types-codec/types';
+import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmParams, PalletProjectTokenMerkleProof, PalletProjectTokenPaymentWithVesting, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
+
+declare module '@polkadot/api-base/types/submittable' {
+  export interface AugmentedSubmittables<ApiType extends ApiTypes> {
+    appWorkingGroup: {
+      /**
+       * Add a job opening for a regular worker/lead role.
+       * Require signed leader origin or the root (to add opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | { stakeAmount?: any; leavingUnstakingPeriod?: any } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Apply on a worker opening.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `p.description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | { memberId?: any; openingId?: any; roleAccountId?: any; rewardAccountId?: any; description?: any; stakeParameters?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+      /**
+       * Cancel an opening for the regular worker/lead position.
+       * Require signed leader origin or the root (to cancel opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Decreases the regular worker/lead stake and returns the remainder to the
+       * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+       * Accepts the stake amount to decrease.
+       * Requires signed leader origin or the root (to decrease the leader stake).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Fill opening for the regular/lead position.
+       * Require signed leader origin or the root (to fill opening for the leader position).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `successful_application_ids`
+       * - DB:
+       * - O(A)
+       * # </weight>
+       **/
+      fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+      /**
+       * Fund working group budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Increases the regular worker/lead stake, demands a worker origin.
+       * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Lead remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Leave the role by the active worker.
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+      /**
+       * Sets a new budget for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets a new status text for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+       * 
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+      /**
+       * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+       * If slashing balance greater than the existing stake - stake is slashed to zero.
+       * Requires signed leader origin or the root (to slash the leader stake).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size of `penality.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+      /**
+       * Transfers specified amount to any account.
+       * Requires leader origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Terminate the active worker by the lead.
+       * Requires signed leader origin or the root (to terminate the leader role).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size `penalty.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Update the reward account associated with a set reward relationship for the active worker.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Update the reward per block for the active worker.
+       * Require signed leader origin or the root (to update leader's reward amount).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Update the associated role account of the active regular worker/lead.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Withdraw the worker application. Can be done by the worker only.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Worker remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+    };
+    authorship: {
+      /**
+       * Provide a set of uncles.
+       **/
+      setUncles: AugmentedSubmittable<(newUncles: Vec<SpRuntimeHeader> | (SpRuntimeHeader | { parentHash?: any; number?: any; stateRoot?: any; extrinsicsRoot?: any; digest?: any } | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<SpRuntimeHeader>]>;
+    };
+    babe: {
+      /**
+       * Plan an epoch config change. The epoch config change is recorded and will be enacted on
+       * the next call to `enact_epoch_change`. The config will be activated one epoch after.
+       * Multiple calls to this method will replace any existing planned config change that had
+       * not been enacted yet.
+       **/
+      planConfigChange: AugmentedSubmittable<(config: SpConsensusBabeDigestsNextConfigDescriptor | { V1: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpConsensusBabeDigestsNextConfigDescriptor]>;
+      /**
+       * Report authority equivocation/misbehavior. This method will verify
+       * the equivocation proof and validate the given key ownership proof
+       * against the extracted offender. If both are valid, the offence will
+       * be reported.
+       **/
+      reportEquivocation: AugmentedSubmittable<(equivocationProof: SpConsensusSlotsEquivocationProof | { offender?: any; slot?: any; firstHeader?: any; secondHeader?: any } | string | Uint8Array, keyOwnerProof: SpSessionMembershipProof | { session?: any; trieNodes?: any; validatorCount?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpConsensusSlotsEquivocationProof, SpSessionMembershipProof]>;
+      /**
+       * Report authority equivocation/misbehavior. This method will verify
+       * the equivocation proof and validate the given key ownership proof
+       * against the extracted offender. If both are valid, the offence will
+       * be reported.
+       * This extrinsic must be called unsigned and it is expected that only
+       * block authors will call it (validated in `ValidateUnsigned`), as such
+       * if the block author is defined it will be defined as the equivocation
+       * reporter.
+       **/
+      reportEquivocationUnsigned: AugmentedSubmittable<(equivocationProof: SpConsensusSlotsEquivocationProof | { offender?: any; slot?: any; firstHeader?: any; secondHeader?: any } | string | Uint8Array, keyOwnerProof: SpSessionMembershipProof | { session?: any; trieNodes?: any; validatorCount?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpConsensusSlotsEquivocationProof, SpSessionMembershipProof]>;
+    };
+    bagsList: {
+      /**
+       * Move the caller's Id directly in front of `lighter`.
+       * 
+       * The dispatch origin for this call must be _Signed_ and can only be called by the Id of
+       * the account going in front of `lighter`.
+       * 
+       * Only works if
+       * - both nodes are within the same bag,
+       * - and `origin` has a greater `Score` than `lighter`.
+       **/
+      putInFrontOf: AugmentedSubmittable<(lighter: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+      /**
+       * Declare that some `dislocated` account has, through rewards or penalties, sufficiently
+       * changed its score that it should properly fall into a different bag than its current
+       * one.
+       * 
+       * Anyone can call this function about any potentially dislocated account.
+       * 
+       * Will always update the stored score of `dislocated` to the correct score, based on
+       * `ScoreProvider`.
+       * 
+       * If `dislocated` does not exists, it returns an error.
+       **/
+      rebag: AugmentedSubmittable<(dislocated: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+    };
+    balances: {
+      /**
+       * Exactly as `transfer`, except the origin must be root and the source account may be
+       * specified.
+       * # <weight>
+       * - Same as transfer, but additional read and write because the source account is not
+       * assumed to be in the overlay.
+       * # </weight>
+       **/
+      forceTransfer: AugmentedSubmittable<(source: AccountId32 | string | Uint8Array, dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, AccountId32, Compact<u128>]>;
+      /**
+       * Unreserve some balance from a user by force.
+       * 
+       * Can only be called by ROOT.
+       **/
+      forceUnreserve: AugmentedSubmittable<(who: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128]>;
+      /**
+       * Set the balances of a given account.
+       * 
+       * This will alter `FreeBalance` and `ReservedBalance` in storage. it will
+       * also alter the total issuance of the system (`TotalIssuance`) appropriately.
+       * If the new free or reserved balance is below the existential deposit,
+       * it will reset the account nonce (`frame_system::AccountNonce`).
+       * 
+       * The dispatch origin for this call is `root`.
+       **/
+      setBalance: AugmentedSubmittable<(who: AccountId32 | string | Uint8Array, newFree: Compact<u128> | AnyNumber | Uint8Array, newReserved: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>, Compact<u128>]>;
+      /**
+       * Transfer some liquid free balance to another account.
+       * 
+       * `transfer` will set the `FreeBalance` of the sender and receiver.
+       * If the sender's account is below the existential deposit as a result
+       * of the transfer, the account will be reaped.
+       * 
+       * The dispatch origin for this call must be `Signed` by the transactor.
+       * 
+       * # <weight>
+       * - Dependent on arguments but not critical, given proper implementations for input config
+       * types. See related functions below.
+       * - It contains a limited number of reads and writes internally and no complex
+       * computation.
+       * 
+       * Related functions:
+       * 
+       * - `ensure_can_withdraw` is always called internally but has a bounded complexity.
+       * - Transferring balances to accounts that did not exist before will cause
+       * `T::OnNewAccount::on_new_account` to be called.
+       * - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.
+       * - `transfer_keep_alive` works the same way as `transfer`, but has an additional check
+       * that the transfer will not kill the origin account.
+       * ---------------------------------
+       * - Origin account is already in memory, so no DB operations for them.
+       * # </weight>
+       **/
+      transfer: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>]>;
+      /**
+       * Transfer the entire transferable balance from the caller account.
+       * 
+       * NOTE: This function only attempts to transfer _transferable_ balances. This means that
+       * any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
+       * transferred by this function. To ensure that this function results in a killed account,
+       * you might need to prepare the account by removing any reference counters, storage
+       * deposits, etc...
+       * 
+       * The dispatch origin of this call must be Signed.
+       * 
+       * - `dest`: The recipient of the transfer.
+       * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
+       * of the funds the account has, causing the sender account to be killed (false), or
+       * transfer everything except at least the existential deposit, which will guarantee to
+       * keep the sender account alive (true). # <weight>
+       * - O(1). Just like transfer, but reading the user's transferable balance first.
+       * #</weight>
+       **/
+      transferAll: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, keepAlive: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, bool]>;
+      /**
+       * Same as the [`transfer`] call, but with a check that the transfer will not kill the
+       * origin account.
+       * 
+       * 99% of the time you want [`transfer`] instead.
+       * 
+       * [`transfer`]: struct.Pallet.html#method.transfer
+       **/
+      transferKeepAlive: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>]>;
+    };
+    bounty: {
+      /**
+       * Announce work entry for a successful bounty.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (W + M)` where:
+       * - `W` is the work_description size in kilobytes.
+       * - `M` is closed contract member list length.
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      announceWorkEntry: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, stakingAccountId: AccountId32 | string | Uint8Array, workDescription: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, AccountId32, Bytes]>;
+      /**
+       * Bounty Contributor made a remark
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is msg size in kilobytes
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      contributorRemark: AugmentedSubmittable<(contributor: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * Creates a bounty. Metadata stored in the transaction log but discarded after that.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is the _metadata size in kilobytes.
+       * - `M` is closed contract member list length.
+       * - DB:
+       * - O(M) (O(1) on open contract)
+       * # </weight>
+       **/
+      createBounty: AugmentedSubmittable<(params: PalletBountyBountyParametersBTreeSet | { oracle?: any; contractType?: any; creator?: any; cherry?: any; oracleReward?: any; entrantStake?: any; fundingType?: any } | string | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyParametersBTreeSet, Bytes]>;
+      /**
+       * Bounty Oracle made a remark
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is msg size in kilobytes
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      creatorRemark: AugmentedSubmittable<(creator: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * end bounty working period.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      endWorkingPeriod: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Bounty Entrant Worker made a remark
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is msg size in kilobytes
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      entrantRemark: AugmentedSubmittable<(entrantId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+      /**
+       * Provides bounty funding.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundBounty: AugmentedSubmittable<(funder: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, u128]>;
+      /**
+       * Bounty Oracle made a remark
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is msg size in kilobytes
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      oracleRemark: AugmentedSubmittable<(oracle: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * Submits an oracle judgment for a bounty, slashing the entries rejected
+       * by an arbitrary percentage and rewarding the winners by an arbitrary amount
+       * (not surpassing the total fund amount)
+       * # <weight>
+       * 
+       * ## weight
+       * `O (J + K + W + R)`
+       * - `J` is rationale size in kilobytes,
+       * - `K` is the sum of all action_justification sizes (in kilobytes) inside OracleJudgment,
+       * - `W` is number of winner judgment entries,
+       * - `R` is number of rejected judgment entries,
+       * - db:
+       * - `O(W + R)`
+       * # </weight>
+       **/
+      submitOracleJudgment: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array, judgment: BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+      /**
+       * Submit work for a bounty.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is the work_data size in kilobytes,
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      submitWork: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array, workData: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+      /**
+       * Oracle switches himself to a new one
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       * 
+       **/
+      switchOracle: AugmentedSubmittable<(newOracle: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64]>;
+      /**
+       * Terminates a bounty in funding, funding expired,
+       * worksubmission, judging period.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateBounty: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Unlocks the stake related to a work entry
+       * After the oracle makes the judgment or the council terminates the bounty by calling terminate_bounty(...),
+       * each worker whose entry has not been judged, can unlock the totality of their stake.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawEntrantStake: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64]>;
+      /**
+       * Withdraw bounty funding by a member or a council.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawFunding: AugmentedSubmittable<(funder: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64]>;
+      /**
+       * Withraws the oracle reward to oracle
+       * If bounty is successfully, Failed or Cancelled oracle must call this
+       * extrinsic to withdraw the oracle reward,
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawOracleReward: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+    };
+    constitution: {
+      /**
+       * Sets the current constitution hash. Requires root origin.
+       * # <weight>
+       * - Complexity: `O(C)` where C is the length of the constitution text.
+       * - Db reads: 0
+       * - Db writes: 1 (constant value)
+       * # </weight>
+       **/
+      amendConstitution: AugmentedSubmittable<(constitutionText: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+    };
+    content: {
+      /**
+       * Accepts channel transfer.
+       * `commitment_params` is required to prevent changing the transfer conditions.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `commitment_params.new_collaborators` map
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      acceptChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, commitmentParams: PalletContentTransferCommitmentParametersBTreeMap | { newCollaborators?: any; price?: any; transferId?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
+      /**
+       * Accept incoming Nft offer
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      acceptIncomingOffer: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, witnessPrice: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Activate Amm functionality for token
+       **/
+      activateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenAmmParams | { slope?: any; intercept?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenAmmParams]>;
+      /**
+       * Add curator to curator group under given `curator_group_id`
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addCuratorToGroup: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, curatorId: u64 | AnyNumber | Uint8Array, permissions: BTreeSet<PalletContentIterableEnumsChannelActionPermission>) => SubmittableExtrinsic<ApiType>, [u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
+      /**
+       * Buy Nft
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      buyNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, participantId: u64 | AnyNumber | Uint8Array, witnessPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * Cancel Nft sell order
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * </weight>
+       **/
+      cancelBuyNow: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * cancel channel transfer
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor]>;
+      /**
+       * Cancel video nft english auction
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      cancelEnglishAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * Cancel Nft offer
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      cancelOffer: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * Cancel video nft open auction
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      cancelOpenAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * Cancel open auction bid
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      cancelOpenAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+      /**
+       * Channel collaborator remark
+       * <weight>
+       * 
+       * ## Weight
+       * `O (B)`
+       * - DB:
+       * - O(1)
+       * where:
+       * - B is the byte lenght of `msg`
+       * # </weight>
+       **/
+      channelAgentRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
+      /**
+       * Channel owner remark
+       * <weight>
+       * 
+       * ## Weight
+       * `O (B)`
+       * - DB:
+       * - O(1)
+       * where:
+       * - B is the kilobyte lenght of `msg`
+       * # </weight>
+       **/
+      channelOwnerRemark: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+      /**
+       * Claim and withdraw reward in JOY from channel account
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (H)` where:
+       * - `H` is the lenght of the provided merkle `proof`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      claimAndWithdrawChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, proof: Vec<PalletCommonMerkleTreeProofElementRecord> | (PalletCommonMerkleTreeProofElementRecord | { hash_?: any; side?: any } | string | Uint8Array)[], item: PalletContentPullPaymentElement | { channelId?: any; cumulativeRewardEarned?: any; reason?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonMerkleTreeProofElementRecord>, PalletContentPullPaymentElement]>;
+      /**
+       * Claim reward in JOY from channel account
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (H)` where:
+       * - `H` is the lenght of the provided merkle `proof`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      claimChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, proof: Vec<PalletCommonMerkleTreeProofElementRecord> | (PalletCommonMerkleTreeProofElementRecord | { hash_?: any; side?: any } | string | Uint8Array)[], item: PalletContentPullPaymentElement | { channelId?: any; cumulativeRewardEarned?: any; reason?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonMerkleTreeProofElementRecord>, PalletContentPullPaymentElement]>;
+      /**
+       * Claim channel's creator token patronage credit
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      claimCreatorTokenPatronageCredit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C + D + E)` where:
+       * - `A` is the number of entries in `params.collaborators`
+       * - `B` is the number of items in `params.storage_buckets`
+       * - `C` is the number of items in `params.distribution_buckets`
+       * - `D` is the number of items in `params.assets.object_creation_list`
+       * - `E` is the size of  `params.meta` in kilobytes
+       * - DB:
+       * - `O(A + B + C + D)` - from the the generated weights
+       * # </weight>
+       **/
+      createChannel: AugmentedSubmittable<(channelOwner: PalletContentChannelOwner | { Member: any } | { CuratorGroup: any } | string | Uint8Array, params: PalletContentChannelCreationParametersRecord | { assets?: any; meta?: any; collaborators?: any; storageBuckets?: any; distributionBuckets?: any; expectedChannelStateBloatBond?: any; expectedDataObjectStateBloatBond?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentChannelOwner, PalletContentChannelCreationParametersRecord]>;
+      /**
+       * Add new curator group to runtime storage
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `permissions_by_level` map
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      createCuratorGroup: AugmentedSubmittable<(isActive: bool | boolean | Uint8Array, permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>) => SubmittableExtrinsic<ApiType>, [bool, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C + D)` where:
+       * - `A` is the number of items in `params.assets.object_creation_list`
+       * - `B` is `params.storage_buckets_num_witness`
+       * - `C` is the length of open auction / english auction whitelist (if provided)
+       * - `D` is the size of `params.meta` in kilobytes (if provided)
+       * - DB:
+       * - `O(A + B + C)` - from the the generated weights
+       * # </weight>
+       **/
+      createVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoCreationParametersRecord | { assets?: any; meta?: any; autoIssueNft?: any; expectedVideoStateBloatBond?: any; expectedDataObjectStateBloatBond?: any; storageBucketsNumWitness?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoCreationParametersRecord]>;
+      creatorTokenIssuerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
+      /**
+       * Perform transfer of tokens as creator token issuer
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B)` where:
+       * - `A` is the number of entries in `outputs`
+       * - `B` is the size of the `metadata` in kilobytes
+       * - DB:
+       * - `O(A)` - from the the generated weights
+       * # </weight>
+       **/
+      creatorTokenIssuerTransfer: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>> | ([u64 | AnyNumber | Uint8Array, PalletProjectTokenPaymentWithVesting | { amount?: any; vestingSchedule?: any } | string | Uint8Array])[], metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>>, Bytes]>;
+      /**
+       * Deactivate Amm functionality for token
+       **/
+      deactivateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * Deissue channel's creator token
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      deissueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C)` where:
+       * - `A` is `num_objects_to_delete`
+       * - `B` is `channel_bag_witness.storage_buckets_num`
+       * - `C` is `channel_bag_witness.distribution_buckets_num`
+       * - DB:
+       * - `O(A + B + C)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | { storageBucketsNum?: any; distributionBucketsNum?: any } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64]>;
+      deleteChannelAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | { storageBucketsNum?: any; distributionBucketsNum?: any } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64, Bytes]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C)` where:
+       * - `A` is the length of `assets_to_remove`
+       * - `B` is the value of `storage_buckets_num_witness`
+       * - `C` is the size of `rationale` in kilobytes
+       * - DB:
+       * - `O(A + B)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteChannelAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, storageBucketsNumWitness: u32 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, u32, Bytes]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B)` where:
+       * - `A` is num_objects_to_delete
+       * - `B` is `params.storage_buckets_num_witness` (if provided)
+       * - DB:
+       * - `O(A + B)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Option<u32>]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C)` where:
+       * - `A` is the value of `num_objects_to_delete`
+       * - `B` is the value of `storage_buckets_num_witness`
+       * - `C` is the size of `rationale` in kilobytes
+       * - DB:
+       * - `O(A + B)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteVideoAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u64, Bytes]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C)` where:
+       * - `A` is the length of `assets_to_remove`
+       * - `B` is the value of `storage_buckets_num_witness`
+       * - `C` is the size of `rationale` in kilobytes
+       * - DB:
+       * - `O(A + B)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteVideoAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: u32 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u32, BTreeSet<u64>, Bytes]>;
+      /**
+       * Destroy NFT
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      destroyNft: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * Finalize an ended creator token sale
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      finalizeCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * Finalize an ended revenue split
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      finalizeRevenueSplit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * Initialize creator token sale
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the size of `params.metadata` in kilobytes (or 0 if not provided)
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      initCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenTokenSaleParams | { unitPrice?: any; upperBoundQuantity?: any; startsAt?: any; duration?: any; vestingScheduleParams?: any; capPerMember?: any; metadata?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenSaleParams]>;
+      /**
+       * Start a channel transfer with specified characteristics
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `transfer_params.new_collaborators` map
+       * - DB:
+       * - O(A) - from the the generated weights
+       * # </weight>
+       **/
+      initializeChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, transferParams: PalletContentInitTransferParameters | { newCollaborators?: any; price?: any; newOwner?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, PalletContentInitTransferParameters]>;
+      /**
+       * Issue creator token
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `params.initial_allocation` map
+       * - DB:
+       * - `O(A)` - from the the generated weights
+       * # </weight>
+       **/
+      issueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenTokenIssuanceParameters | { initialAllocation?: any; symbol?: any; transferPolicy?: any; patronageRate?: any; revenueSplitRate?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenIssuanceParameters]>;
+      /**
+       * Issue NFT
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + B)`
+       * - DB:
+       * - O(W)
+       * where:
+       * - W : member whitelist length in case nft initial status is auction
+       * - B : size of metadata parameter in kilobytes
+       * # </weight>
+       **/
+      issueNft: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, params: PalletContentNftTypesNftIssuanceParametersRecord | { royalty?: any; nftMetadata?: any; nonChannelOwner?: any; initTransactionalStatus?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesNftIssuanceParametersRecord]>;
+      /**
+       * Issue revenue split for a channel
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      issueRevenueSplit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, start: Option<u32> | null | object | string | Uint8Array, duration: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u32]>;
+      /**
+       * Make channel's creator token permissionless
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      makeCreatorTokenPermissionless: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * Make english auction bid
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      makeEnglishAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, bidAmount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * Make auction bid
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      makeOpenAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, bidAmount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * NFT owner remark
+       * <weight>
+       * 
+       * ## Weight
+       * `O (B)`
+       * - DB:
+       * - O(1)
+       * where:
+       * - B is the byte lenght of `msg`
+       * # </weight>
+       **/
+      nftOwnerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
+      /**
+       * Offer Nft
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      offerNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, to: u64 | AnyNumber | Uint8Array, price: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, u64, Option<u128>]>;
+      /**
+       * Accept open auction bid
+       * Should only be called by auctioneer
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      pickOpenAuctionWinner: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, winnerId: u64 | AnyNumber | Uint8Array, commit: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, u128]>;
+      /**
+       * Reduce channel's creator token patronage rate to given value
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      reduceCreatorTokenPatronageRateTo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, targetRate: Permill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Permill]>;
+      /**
+       * Remove curator from a given curator group
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      removeCuratorFromGroup: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, curatorId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+      /**
+       * Sell Nft
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      sellNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, price: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, u128]>;
+      /**
+       * Extrinsic for pausing/re-enabling channel features
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setChannelPausedFeaturesAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, newPausedFeatures: BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
+      /**
+       * Extrinsic for setting channel visibility status (hidden/visible) by moderator
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setChannelVisibilityAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, isHidden: bool | boolean | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+      /**
+       * Set `is_active` status for curator group under given `curator_group_id`
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setCuratorGroupStatus: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, isActive: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, bool]>;
+      /**
+       * Claim won english auction
+       * Can be called by anyone
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      settleEnglishAuction: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Extrinsic for video visibility status (hidden/visible) setting by moderator
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setVideoVisibilityAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, isHidden: bool | boolean | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+      /**
+       * Return Nft back to the original artist at no cost
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      slingNftBack: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor]>;
+      /**
+       * Start video nft english auction
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - W : whitelist member list length
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      startEnglishAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, auctionParams: PalletContentNftTypesEnglishAuctionParamsRecord | { startingPrice?: any; buyNowPrice?: any; whitelist?: any; startsAt?: any; duration?: any; extensionPeriod?: any; minBidStep?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
+      /**
+       * Start video nft open auction
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - W : member whitelist length
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      startOpenAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, auctionParams: PalletContentNftTypesOpenAuctionParamsRecord | { startingPrice?: any; buyNowPrice?: any; startsAt?: any; whitelist?: any; bidLockDuration?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesOpenAuctionParamsRecord]>;
+      /**
+       * Only Council can toggle nft issuance limits constraints
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      toggleNftLimits: AugmentedSubmittable<(enabled: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [bool]>;
+      /**
+       * Update Buy now nft price
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      updateBuyNowPrice: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, newPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u128]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C + D + E)` where:
+       * - `A` is the number of entries in `params.collaborators`
+       * - `B` is the number of items in `params.assets_to_upload.object_creation_list` (if provided)
+       * - `C` is the number of items in `params.assets_to_remove`
+       * - `D` is the size of `params.new_meta` in kilobytes
+       * - `E` is `params.storage_buckets_num_witness` (if provided)
+       * - DB:
+       * - `O(A + B + C + E)` - from the the generated weights
+       * # </weight>
+       **/
+      updateChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentChannelUpdateParametersRecord | { assetsToUpload?: any; newMeta?: any; assetsToRemove?: any; collaborators?: any; expectedDataObjectStateBloatBond?: any; storageBucketsNumWitness?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord]>;
+      /**
+       * Updates channel's NFT limit.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      updateChannelNftLimit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, nftLimitPeriod: PalletContentNftLimitPeriod | 'Daily' | 'Weekly' | number | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, limit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, PalletContentNftLimitPeriod, u64, u64]>;
+      /**
+       * Update channel payouts
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` where:
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      updateChannelPayouts: AugmentedSubmittable<(params: PalletContentUpdateChannelPayoutsParametersRecord | { commitment?: any; payload?: any; minCashoutAllowed?: any; maxCashoutAllowed?: any; channelCashoutsEnabled?: any } | string | Uint8Array, uploaderAccount: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord, AccountId32]>;
+      /**
+       * Extrinsic for updating channel privilege level (requires lead access)
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateChannelPrivilegeLevel: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, newPrivilegeLevel: u8 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u8]>;
+      /**
+       * Updates channel state bloat bond value.
+       * Only lead can upload this value
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      updateChannelStateBloatBond: AugmentedSubmittable<(newChannelStateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Update existing curator group's permissions
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `permissions_by_level` map
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateCuratorGroupPermissions: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
+      /**
+       * Updates global NFT limit
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      updateGlobalNftLimit: AugmentedSubmittable<(nftLimitPeriod: PalletContentNftLimitPeriod | 'Daily' | 'Weekly' | number | Uint8Array, limit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentNftLimitPeriod, u64]>;
+      /**
+       * Update upcoming creator token sale
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateUpcomingCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, newStartBlock: Option<u32> | null | object | string | Uint8Array, newDuration: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, Option<u32>]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C + D + E)` where:
+       * - `A` is params.assets_to_upload.object_creation_list.len() (if provided)
+       * - `B` is params.assets_to_remove.len()
+       * - `C` is `params.storage_buckets_num_witness` (if provided)
+       * - `D` is the length of open auction / english auction whitelist (if provided)
+       * - `E` is the size of `params.new_meta` in kilobytes (if provided)
+       * - DB:
+       * - `O(A + B + C + D)` - from the the generated weights
+       * # </weight>
+       **/
+      updateVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoUpdateParametersRecord | { assetsToUpload?: any; newMeta?: any; assetsToRemove?: any; autoIssueNft?: any; expectedDataObjectStateBloatBond?: any; storageBucketsNumWitness?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoUpdateParametersRecord]>;
+      /**
+       * Updates video state bloat bond value.
+       * Only lead can upload this value
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      updateVideoStateBloatBond: AugmentedSubmittable<(newVideoStateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Withdraw JOY from channel account
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      withdrawFromChannelBalance: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u128]>;
+    };
+    contentWorkingGroup: {
+      /**
+       * Add a job opening for a regular worker/lead role.
+       * Require signed leader origin or the root (to add opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | { stakeAmount?: any; leavingUnstakingPeriod?: any } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Apply on a worker opening.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `p.description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | { memberId?: any; openingId?: any; roleAccountId?: any; rewardAccountId?: any; description?: any; stakeParameters?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+      /**
+       * Cancel an opening for the regular worker/lead position.
+       * Require signed leader origin or the root (to cancel opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Decreases the regular worker/lead stake and returns the remainder to the
+       * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+       * Accepts the stake amount to decrease.
+       * Requires signed leader origin or the root (to decrease the leader stake).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Fill opening for the regular/lead position.
+       * Require signed leader origin or the root (to fill opening for the leader position).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `successful_application_ids`
+       * - DB:
+       * - O(A)
+       * # </weight>
+       **/
+      fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+      /**
+       * Fund working group budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Increases the regular worker/lead stake, demands a worker origin.
+       * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Lead remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Leave the role by the active worker.
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+      /**
+       * Sets a new budget for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets a new status text for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+       * 
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+      /**
+       * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+       * If slashing balance greater than the existing stake - stake is slashed to zero.
+       * Requires signed leader origin or the root (to slash the leader stake).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size of `penality.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+      /**
+       * Transfers specified amount to any account.
+       * Requires leader origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Terminate the active worker by the lead.
+       * Requires signed leader origin or the root (to terminate the leader role).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size `penalty.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Update the reward account associated with a set reward relationship for the active worker.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Update the reward per block for the active worker.
+       * Require signed leader origin or the root (to update leader's reward amount).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Update the associated role account of the active regular worker/lead.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Withdraw the worker application. Can be done by the worker only.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Worker remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+    };
+    council: {
+      /**
+       * Subscribe candidate
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      announceCandidacy: AugmentedSubmittable<(membershipId: u64 | AnyNumber | Uint8Array, stakingAccountId: AccountId32 | string | Uint8Array, rewardAccountId: AccountId32 | string | Uint8Array, stake: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32, AccountId32, u128]>;
+      /**
+       * Candidate makes a remark message
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      candidateRemark: AugmentedSubmittable<(candidateId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+      /**
+       * Councilor makes a remark message
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      councilorRemark: AugmentedSubmittable<(councilorId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+      /**
+       * Fund the council budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundCouncilBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Transfers funds from council budget to account
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (F)` where:
+       * `F` is the length of `funding_requests`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundingRequest: AugmentedSubmittable<(fundingRequests: Vec<PalletCommonFundingRequestParameters> | (PalletCommonFundingRequestParameters | { account?: any; amount?: any } | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<PalletCommonFundingRequestParameters>]>;
+      /**
+       * Plan the next budget refill.
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      planBudgetRefill: AugmentedSubmittable<(nextRefill: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+      /**
+       * Release candidacy stake that is no longer needed.
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      releaseCandidacyStake: AugmentedSubmittable<(membershipId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Sets the budget balance.
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(balance: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets the budget refill amount
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudgetIncrement: AugmentedSubmittable<(budgetIncrement: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Set short description for the user's candidacy. Can be called anytime during user's candidacy.
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)` where:
+       * `N` is the size of `note` in kilobytes
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setCandidacyNote: AugmentedSubmittable<(membershipId: u64 | AnyNumber | Uint8Array, note: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+      /**
+       * Sets the councilor reward per block
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setCouncilorReward: AugmentedSubmittable<(councilorReward: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Withdraw candidacy and release candidacy stake.
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawCandidacy: AugmentedSubmittable<(membershipId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+    };
+    distributionWorkingGroup: {
+      /**
+       * Add a job opening for a regular worker/lead role.
+       * Require signed leader origin or the root (to add opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | { stakeAmount?: any; leavingUnstakingPeriod?: any } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Apply on a worker opening.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `p.description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | { memberId?: any; openingId?: any; roleAccountId?: any; rewardAccountId?: any; description?: any; stakeParameters?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+      /**
+       * Cancel an opening for the regular worker/lead position.
+       * Require signed leader origin or the root (to cancel opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Decreases the regular worker/lead stake and returns the remainder to the
+       * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+       * Accepts the stake amount to decrease.
+       * Requires signed leader origin or the root (to decrease the leader stake).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Fill opening for the regular/lead position.
+       * Require signed leader origin or the root (to fill opening for the leader position).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `successful_application_ids`
+       * - DB:
+       * - O(A)
+       * # </weight>
+       **/
+      fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+      /**
+       * Fund working group budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Increases the regular worker/lead stake, demands a worker origin.
+       * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Lead remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Leave the role by the active worker.
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+      /**
+       * Sets a new budget for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets a new status text for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+       * 
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+      /**
+       * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+       * If slashing balance greater than the existing stake - stake is slashed to zero.
+       * Requires signed leader origin or the root (to slash the leader stake).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size of `penality.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+      /**
+       * Transfers specified amount to any account.
+       * Requires leader origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Terminate the active worker by the lead.
+       * Requires signed leader origin or the root (to terminate the leader role).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size `penalty.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Update the reward account associated with a set reward relationship for the active worker.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Update the reward per block for the active worker.
+       * Require signed leader origin or the root (to update leader's reward amount).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Update the associated role account of the active regular worker/lead.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Withdraw the worker application. Can be done by the worker only.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Worker remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+    };
+    electionProviderMultiPhase: {
+      /**
+       * Trigger the governance fallback.
+       * 
+       * This can only be called when [`Phase::Emergency`] is enabled, as an alternative to
+       * calling [`Call::set_emergency_election_result`].
+       **/
+      governanceFallback: AugmentedSubmittable<(maybeMaxVoters: Option<u32> | null | object | string | Uint8Array, maybeMaxTargets: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<u32>, Option<u32>]>;
+      /**
+       * Set a solution in the queue, to be handed out to the client of this pallet in the next
+       * call to `ElectionProvider::elect`.
+       * 
+       * This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.
+       * 
+       * The solution is not checked for any feasibility and is assumed to be trustworthy, as any
+       * feasibility check itself can in principle cause the election process to fail (due to
+       * memory/weight constrains).
+       **/
+      setEmergencyElectionResult: AugmentedSubmittable<(supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>> | ([AccountId32 | string | Uint8Array, SpNposElectionsSupport | { total?: any; voters?: any } | string | Uint8Array])[]) => SubmittableExtrinsic<ApiType>, [Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>]>;
+      /**
+       * Set a new value for `MinimumUntrustedScore`.
+       * 
+       * Dispatch origin must be aligned with `T::ForceOrigin`.
+       * 
+       * This check can be turned off by setting the value to `None`.
+       **/
+      setMinimumUntrustedScore: AugmentedSubmittable<(maybeNextScore: Option<SpNposElectionsElectionScore> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<SpNposElectionsElectionScore>]>;
+      /**
+       * Submit a solution for the signed phase.
+       * 
+       * The dispatch origin fo this call must be __signed__.
+       * 
+       * The solution is potentially queued, based on the claimed score and processed at the end
+       * of the signed phase.
+       * 
+       * A deposit is reserved and recorded for the solution. Based on the outcome, the solution
+       * might be rewarded, slashed, or get all or a part of the deposit back.
+       **/
+      submit: AugmentedSubmittable<(rawSolution: PalletElectionProviderMultiPhaseRawSolution | { solution?: any; score?: any; round?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletElectionProviderMultiPhaseRawSolution]>;
+      /**
+       * Submit a solution for the unsigned phase.
+       * 
+       * The dispatch origin fo this call must be __none__.
+       * 
+       * This submission is checked on the fly. Moreover, this unsigned solution is only
+       * validated when submitted to the pool from the **local** node. Effectively, this means
+       * that only active validators can submit this transaction when authoring a block (similar
+       * to an inherent).
+       * 
+       * To prevent any incorrect solution (and thus wasted time/weight), this transaction will
+       * panic if the solution submitted by the validator is invalid in any way, effectively
+       * putting their authoring reward at risk.
+       * 
+       * No deposit or reward is associated with this submission.
+       **/
+      submitUnsigned: AugmentedSubmittable<(rawSolution: PalletElectionProviderMultiPhaseRawSolution | { solution?: any; score?: any; round?: any } | string | Uint8Array, witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize | { voters?: any; targets?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize]>;
+    };
+    forum: {
+      /**
+       * Add post
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V)` where:
+       * - `W` is the category depth,
+       * - `V` is the size of the text in kilobytes
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      addPost: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, text: Bytes | string | Uint8Array, editable: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes, bool]>;
+      /**
+       * Add a new category.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V + X)` where:
+       * - `W` is the category depth
+       * - `V` is the size of the category title in kilobytes.
+       * - `X` is the size of the category description in kilobytes.
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      createCategory: AugmentedSubmittable<(parentCategoryId: Option<u64> | null | object | string | Uint8Array, title: Bytes | string | Uint8Array, description: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<u64>, Bytes, Bytes]>;
+      /**
+       * Create new thread in category
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V + X)` where:
+       * - `W` is the category depth
+       * - `V` is the size of the thread title in kilobytes.
+       * - `X` is the size of the thread text in kilobytes.
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      createThread: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array, text: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes, Bytes]>;
+      /**
+       * Delete category
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is the category depth
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      deleteCategory: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | { Lead: any } | { Moderator: any } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64]>;
+      /**
+       * Delete post from storage.
+       * You need to provide a vector of posts to delete in the form
+       * (T::CategoryId, T::ThreadId, T::PostId, bool)
+       * where the last bool is whether you want to hide it apart from deleting it
+       * 
+       * ## Weight
+       * `O (W + V + P)` where:
+       * - `W` is the category depth,
+       * - `V` is the size of the rationale in kilobytes
+       * - `P` is the number of posts to delete
+       * - DB:
+       * - O(W + P)
+       * # </weight>
+       **/
+      deletePosts: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, posts: BTreeMap<PalletForumExtendedPostIdObject, bool>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<PalletForumExtendedPostIdObject, bool>, Bytes]>;
+      /**
+       * Delete thread
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is the category depth
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      deleteThread: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, hide: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, bool]>;
+      /**
+       * Edit post text
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V)` where:
+       * - `W` is the category depth,
+       * - `V` is the size of the new text in kilobytes
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      editPostText: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, newText: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, u64, Bytes]>;
+      /**
+       * Edit thread metadata
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V)` where:
+       * - `W` is the category depth
+       * - `V` is the size of the thread metadata in kilobytes.
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      editThreadMetadata: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, newMetadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+      /**
+       * Moderate post
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V)` where:
+       * - `W` is the category depth,
+       * - `V` is the size of the rationale in kilobytes
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      moderatePost: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | { Lead: any } | { Moderator: any } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, u64, u64, Bytes]>;
+      /**
+       * Moderate thread
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V + X)` where:
+       * - `W` is the category depth,
+       * - `V` is the number of thread posts,
+       * - `X` is the size of the rationale in kilobytes
+       * - DB:
+       * - O(W + V)
+       * # </weight>
+       **/
+      moderateThread: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | { Lead: any } | { Moderator: any } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, u64, Bytes]>;
+      /**
+       * Move thread to another category
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is the category depth
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      moveThreadToCategory: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | { Lead: any } | { Moderator: any } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, newCategoryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, u64, u64]>;
+      /**
+       * Set stickied threads for category
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V)` where:
+       * - `W` is the category depth,
+       * - `V` is the length of the stickied_ids
+       * - DB:
+       * - O(W + V)
+       * # </weight>
+       **/
+      setStickiedThreads: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | { Lead: any } | { Moderator: any } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, stickiedIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, BTreeSet<u64>]>;
+      /**
+       * Update archival status
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is the category depth
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      updateCategoryArchivalStatus: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | { Lead: any } | { Moderator: any } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, newArchivalStatus: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, bool]>;
+      /**
+       * Update category description
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is the category depth
+       * - `V` is the size of the category description in kilobytes.
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      updateCategoryDescription: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | { Lead: any } | { Moderator: any } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, description: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, Bytes]>;
+      /**
+       * Enable a moderator can moderate a category and its sub categories.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateCategoryMembershipOfModerator: AugmentedSubmittable<(moderatorId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, newValue: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, bool]>;
+      /**
+       * Update category title
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V)` where:
+       * - `W` is the category depth
+       * - `V` is the size of the category title in kilobytes.
+       * - DB:
+       * - O(W)
+       * # </weight>
+       **/
+      updateCategoryTitle: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | { Lead: any } | { Moderator: any } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, title: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, Bytes]>;
+    };
+    forumWorkingGroup: {
+      /**
+       * Add a job opening for a regular worker/lead role.
+       * Require signed leader origin or the root (to add opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | { stakeAmount?: any; leavingUnstakingPeriod?: any } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Apply on a worker opening.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `p.description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | { memberId?: any; openingId?: any; roleAccountId?: any; rewardAccountId?: any; description?: any; stakeParameters?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+      /**
+       * Cancel an opening for the regular worker/lead position.
+       * Require signed leader origin or the root (to cancel opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Decreases the regular worker/lead stake and returns the remainder to the
+       * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+       * Accepts the stake amount to decrease.
+       * Requires signed leader origin or the root (to decrease the leader stake).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Fill opening for the regular/lead position.
+       * Require signed leader origin or the root (to fill opening for the leader position).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `successful_application_ids`
+       * - DB:
+       * - O(A)
+       * # </weight>
+       **/
+      fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+      /**
+       * Fund working group budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Increases the regular worker/lead stake, demands a worker origin.
+       * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Lead remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Leave the role by the active worker.
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+      /**
+       * Sets a new budget for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets a new status text for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+       * 
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+      /**
+       * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+       * If slashing balance greater than the existing stake - stake is slashed to zero.
+       * Requires signed leader origin or the root (to slash the leader stake).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size of `penality.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+      /**
+       * Transfers specified amount to any account.
+       * Requires leader origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Terminate the active worker by the lead.
+       * Requires signed leader origin or the root (to terminate the leader role).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size `penalty.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Update the reward account associated with a set reward relationship for the active worker.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Update the reward per block for the active worker.
+       * Require signed leader origin or the root (to update leader's reward amount).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Update the associated role account of the active regular worker/lead.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Withdraw the worker application. Can be done by the worker only.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Worker remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+    };
+    grandpa: {
+      /**
+       * Note that the current authority set of the GRANDPA finality gadget has
+       * stalled. This will trigger a forced authority set change at the beginning
+       * of the next session, to be enacted `delay` blocks after that. The delay
+       * should be high enough to safely assume that the block signalling the
+       * forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters
+       * will start the new authority set using the given finalized block as base.
+       * Only callable by root.
+       **/
+      noteStalled: AugmentedSubmittable<(delay: u32 | AnyNumber | Uint8Array, bestFinalizedBlockNumber: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32, u32]>;
+      /**
+       * Report voter equivocation/misbehavior. This method will verify the
+       * equivocation proof and validate the given key ownership proof
+       * against the extracted offender. If both are valid, the offence
+       * will be reported.
+       **/
+      reportEquivocation: AugmentedSubmittable<(equivocationProof: SpFinalityGrandpaEquivocationProof | { setId?: any; equivocation?: any } | string | Uint8Array, keyOwnerProof: SpSessionMembershipProof | { session?: any; trieNodes?: any; validatorCount?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpFinalityGrandpaEquivocationProof, SpSessionMembershipProof]>;
+      /**
+       * Report voter equivocation/misbehavior. This method will verify the
+       * equivocation proof and validate the given key ownership proof
+       * against the extracted offender. If both are valid, the offence
+       * will be reported.
+       * 
+       * This extrinsic must be called unsigned and it is expected that only
+       * block authors will call it (validated in `ValidateUnsigned`), as such
+       * if the block author is defined it will be defined as the equivocation
+       * reporter.
+       **/
+      reportEquivocationUnsigned: AugmentedSubmittable<(equivocationProof: SpFinalityGrandpaEquivocationProof | { setId?: any; equivocation?: any } | string | Uint8Array, keyOwnerProof: SpSessionMembershipProof | { session?: any; trieNodes?: any; validatorCount?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [SpFinalityGrandpaEquivocationProof, SpSessionMembershipProof]>;
+    };
+    imOnline: {
+      /**
+       * # <weight>
+       * - Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is
+       * length of `heartbeat.network_state.external_address`
+       * - `O(K)`: decoding of length `K`
+       * - `O(E)`: decoding/encoding of length `E`
+       * - DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,
+       * `ReceivedHeartbeats`
+       * - DbWrites: `ReceivedHeartbeats`
+       * # </weight>
+       **/
+      heartbeat: AugmentedSubmittable<(heartbeat: PalletImOnlineHeartbeat | { blockNumber?: any; networkState?: any; sessionIndex?: any; authorityIndex?: any; validatorsLen?: any } | string | Uint8Array, signature: PalletImOnlineSr25519AppSr25519Signature | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature]>;
+    };
+    joystreamUtility: {
+      /**
+       * Burns token for caller account
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      burnAccountTokens: AugmentedSubmittable<(amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Runtime upgrade proposal extrinsic.
+       * Should be used as callable object to pass to the `engine` module.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (C)` where:
+       * - `C` is the length of `wasm`
+       * However, we treat this as a full block as `frame_system::Module::set_code` does
+       * # </weight>
+       * #[weight = (T::BlockWeights::get().get(DispatchClass::Operational).base_extrinsic, DispatchClass::Operational)]
+       **/
+      executeRuntimeUpgradeProposal: AugmentedSubmittable<(wasm: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Signal proposal extrinsic. Should be used as callable object to pass to the `engine` module.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the signal in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      executeSignalProposal: AugmentedSubmittable<(signal: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Update working group budget
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateWorkingGroupBudget: AugmentedSubmittable<(workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup | 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'App' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership' | number | Uint8Array, amount: u128 | AnyNumber | Uint8Array, balanceKind: PalletCommonBalanceKind | 'Positive' | 'Negative' | number | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletCommonWorkingGroupIterableEnumsWorkingGroup, u128, PalletCommonBalanceKind]>;
+    };
+    members: {
+      /**
+       * Add staking account candidate for a member.
+       * The membership must be confirmed before usage.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addStakingAccountCandidate: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Non-members can buy membership.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + M)` where:
+       * - `W` is the handle size in kilobytes
+       * - `M` is the metadata size in kilobytes
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      buyMembership: AugmentedSubmittable<(params: PalletMembershipBuyMembershipParameters | { rootAccount?: any; controllerAccount?: any; handle?: any; metadata?: any; referrerId?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletMembershipBuyMembershipParameters]>;
+      /**
+       * Confirm staking account candidate for a member.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      confirmStakingAccount: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, stakingAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Create a member profile as root.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (I + J)` where:
+       * - `I` is the handle size in kilobytes
+       * - `J` is the metadata size in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      createMember: AugmentedSubmittable<(params: PalletMembershipCreateMemberParameters | { rootAccount?: any; controllerAccount?: any; handle?: any; metadata?: any; isFoundingMember?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletMembershipCreateMemberParameters]>;
+      /**
+       * Gift a membership using own funds. Gifter does not need to be a member.
+       * Can optinally apply a lock on a portion of the funds transferred to root and controller
+       * accounts. Gifter also pays the membership fee.
+       **/
+      giftMembership: AugmentedSubmittable<(params: PalletMembershipGiftMembershipParameters | { rootAccount?: any; controllerAccount?: any; handle?: any; metadata?: any; creditControllerAccount?: any; applyControllerAccountInvitationLock?: any; creditRootAccount?: any; applyRootAccountInvitationLock?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletMembershipGiftMembershipParameters]>;
+      /**
+       * Invite a new member.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + M)` where:
+       * - `W` is the handle size in kilobytes
+       * - `M` is the metadata size in kilobytes
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      inviteMember: AugmentedSubmittable<(params: PalletMembershipInviteMembershipParameters | { invitingMemberId?: any; rootAccount?: any; controllerAccount?: any; handle?: any; metadata?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletMembershipInviteMembershipParameters]>;
+      /**
+       * Member makes a remark
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array, payment: Option<ITuple<[AccountId32, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
+      /**
+       * Remove staking account for a member.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      removeStakingAccount: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Updates initial invitation balance for a invited member. Requires root origin.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setInitialInvitationBalance: AugmentedSubmittable<(newInitialBalance: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Updates initial invitation count for a member. Requires root origin.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setInitialInvitationCount: AugmentedSubmittable<(newInvitationCount: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+      /**
+       * Updates leader invitation quota. Requires root origin.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setLeaderInvitationQuota: AugmentedSubmittable<(invitationQuota: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+      /**
+       * Updates membership price. Requires root origin.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setMembershipPrice: AugmentedSubmittable<(newPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Updates membership referral cut percent value. Requires root origin.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setReferralCut: AugmentedSubmittable<(percentValue: u8 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u8]>;
+      /**
+       * Transfers invites from one member to another.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      transferInvites: AugmentedSubmittable<(sourceMemberId: u64 | AnyNumber | Uint8Array, targetMemberId: u64 | AnyNumber | Uint8Array, numberOfInvites: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u32]>;
+      /**
+       * Updates member root or controller accounts. No effect if both new accounts are empty.
+       * 
+       * <weight>
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateAccounts: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, newRootAccount: Option<AccountId32> | null | object | string | Uint8Array, newControllerAccount: Option<AccountId32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<AccountId32>, Option<AccountId32>]>;
+      /**
+       * Update member's all or some of name, handle, avatar and about text.
+       * No effect if no changed fields.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + M)` where:
+       * - `W` is the handle size in kilobytes
+       * - `M` is the metadata size in kilobytes
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      updateProfile: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, handle: Option<Bytes> | null | object | string | Uint8Array, metadata: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>, Option<Bytes>]>;
+      /**
+       * Updates member profile verification status. Requires working group member origin.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateProfileVerification: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, targetMemberId: u64 | AnyNumber | Uint8Array, isVerified: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, bool]>;
+    };
+    membershipWorkingGroup: {
+      /**
+       * Add a job opening for a regular worker/lead role.
+       * Require signed leader origin or the root (to add opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | { stakeAmount?: any; leavingUnstakingPeriod?: any } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Apply on a worker opening.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `p.description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | { memberId?: any; openingId?: any; roleAccountId?: any; rewardAccountId?: any; description?: any; stakeParameters?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+      /**
+       * Cancel an opening for the regular worker/lead position.
+       * Require signed leader origin or the root (to cancel opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Decreases the regular worker/lead stake and returns the remainder to the
+       * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+       * Accepts the stake amount to decrease.
+       * Requires signed leader origin or the root (to decrease the leader stake).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Fill opening for the regular/lead position.
+       * Require signed leader origin or the root (to fill opening for the leader position).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `successful_application_ids`
+       * - DB:
+       * - O(A)
+       * # </weight>
+       **/
+      fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+      /**
+       * Fund working group budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Increases the regular worker/lead stake, demands a worker origin.
+       * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Lead remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Leave the role by the active worker.
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+      /**
+       * Sets a new budget for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets a new status text for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+       * 
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+      /**
+       * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+       * If slashing balance greater than the existing stake - stake is slashed to zero.
+       * Requires signed leader origin or the root (to slash the leader stake).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size of `penality.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+      /**
+       * Transfers specified amount to any account.
+       * Requires leader origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Terminate the active worker by the lead.
+       * Requires signed leader origin or the root (to terminate the leader role).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size `penalty.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Update the reward account associated with a set reward relationship for the active worker.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Update the reward per block for the active worker.
+       * Require signed leader origin or the root (to update leader's reward amount).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Update the associated role account of the active regular worker/lead.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Withdraw the worker application. Can be done by the worker only.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Worker remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+    };
+    multisig: {
+      /**
+       * Register approval for a dispatch to be made from a deterministic composite account if
+       * approved by a total of `threshold - 1` of `other_signatories`.
+       * 
+       * Payment: `DepositBase` will be reserved if this is the first approval, plus
+       * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
+       * is cancelled.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `threshold`: The total number of approvals for this dispatch before it is executed.
+       * - `other_signatories`: The accounts (other than the sender) who can approve this
+       * dispatch. May not be empty.
+       * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
+       * not the first approval, then it must be `Some`, with the timepoint (block number and
+       * transaction index) of the first approval transaction.
+       * - `call_hash`: The hash of the call to be executed.
+       * 
+       * NOTE: If this is the final approval, you will want to use `as_multi` instead.
+       * 
+       * # <weight>
+       * - `O(S)`.
+       * - Up to one balance-reserve or unreserve operation.
+       * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+       * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+       * - One encode & hash, both of complexity `O(S)`.
+       * - Up to one binary search and insert (`O(logS + S)`).
+       * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
+       * - One event.
+       * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
+       * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
+       * ----------------------------------
+       * - DB Weight:
+       * - Read: Multisig Storage, [Caller Account]
+       * - Write: Multisig Storage, [Caller Account]
+       * # </weight>
+       **/
+      approveAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, callHash: U8aFixed | string | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, U8aFixed, u64]>;
+      /**
+       * Register approval for a dispatch to be made from a deterministic composite account if
+       * approved by a total of `threshold - 1` of `other_signatories`.
+       * 
+       * If there are enough, then dispatch the call.
+       * 
+       * Payment: `DepositBase` will be reserved if this is the first approval, plus
+       * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
+       * is cancelled.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `threshold`: The total number of approvals for this dispatch before it is executed.
+       * - `other_signatories`: The accounts (other than the sender) who can approve this
+       * dispatch. May not be empty.
+       * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
+       * not the first approval, then it must be `Some`, with the timepoint (block number and
+       * transaction index) of the first approval transaction.
+       * - `call`: The call to be executed.
+       * 
+       * NOTE: Unless this is the final approval, you will generally want to use
+       * `approve_as_multi` instead, since it only requires a hash of the call.
+       * 
+       * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
+       * on success, result is `Ok` and the result from the interior call, if it was executed,
+       * may be found in the deposited `MultisigExecuted` event.
+       * 
+       * # <weight>
+       * - `O(S + Z + Call)`.
+       * - Up to one balance-reserve or unreserve operation.
+       * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+       * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+       * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
+       * - One encode & hash, both of complexity `O(S)`.
+       * - Up to one binary search and insert (`O(logS + S)`).
+       * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
+       * - One event.
+       * - The weight of the `call`.
+       * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
+       * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
+       * -------------------------------
+       * - DB Weight:
+       * - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)
+       * - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)
+       * - Plus Call Weight
+       * # </weight>
+       **/
+      asMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, call: WrapperKeepOpaque<Call> | object | string | Uint8Array, storeCall: bool | boolean | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, WrapperKeepOpaque<Call>, bool, u64]>;
+      /**
+       * Immediately dispatch a multi-signature call using a single approval from the caller.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `other_signatories`: The accounts (other than the sender) who are part of the
+       * multi-signature, but do not participate in the approval process.
+       * - `call`: The call to be executed.
+       * 
+       * Result is equivalent to the dispatched result.
+       * 
+       * # <weight>
+       * O(Z + C) where Z is the length of the call and C its execution weight.
+       * -------------------------------
+       * - DB Weight: None
+       * - Plus Call Weight
+       * # </weight>
+       **/
+      asMultiThreshold1: AugmentedSubmittable<(otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>, Call]>;
+      /**
+       * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
+       * for this operation will be unreserved on success.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `threshold`: The total number of approvals for this dispatch before it is executed.
+       * - `other_signatories`: The accounts (other than the sender) who can approve this
+       * dispatch. May not be empty.
+       * - `timepoint`: The timepoint (block number and transaction index) of the first approval
+       * transaction for this dispatch.
+       * - `call_hash`: The hash of the call to be executed.
+       * 
+       * # <weight>
+       * - `O(S)`.
+       * - Up to one balance-reserve or unreserve operation.
+       * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+       * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+       * - One encode & hash, both of complexity `O(S)`.
+       * - One event.
+       * - I/O: 1 read `O(S)`, one remove.
+       * - Storage: removes one item.
+       * ----------------------------------
+       * - DB Weight:
+       * - Read: Multisig Storage, [Caller Account], Refund Account, Calls
+       * - Write: Multisig Storage, [Caller Account], Refund Account, Calls
+       * # </weight>
+       **/
+      cancelAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], timepoint: PalletMultisigTimepoint | { height?: any; index?: any } | string | Uint8Array, callHash: U8aFixed | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, PalletMultisigTimepoint, U8aFixed]>;
+    };
+    operationsWorkingGroupAlpha: {
+      /**
+       * Add a job opening for a regular worker/lead role.
+       * Require signed leader origin or the root (to add opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | { stakeAmount?: any; leavingUnstakingPeriod?: any } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Apply on a worker opening.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `p.description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | { memberId?: any; openingId?: any; roleAccountId?: any; rewardAccountId?: any; description?: any; stakeParameters?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+      /**
+       * Cancel an opening for the regular worker/lead position.
+       * Require signed leader origin or the root (to cancel opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Decreases the regular worker/lead stake and returns the remainder to the
+       * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+       * Accepts the stake amount to decrease.
+       * Requires signed leader origin or the root (to decrease the leader stake).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Fill opening for the regular/lead position.
+       * Require signed leader origin or the root (to fill opening for the leader position).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `successful_application_ids`
+       * - DB:
+       * - O(A)
+       * # </weight>
+       **/
+      fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+      /**
+       * Fund working group budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Increases the regular worker/lead stake, demands a worker origin.
+       * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Lead remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Leave the role by the active worker.
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+      /**
+       * Sets a new budget for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets a new status text for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+       * 
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+      /**
+       * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+       * If slashing balance greater than the existing stake - stake is slashed to zero.
+       * Requires signed leader origin or the root (to slash the leader stake).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size of `penality.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+      /**
+       * Transfers specified amount to any account.
+       * Requires leader origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Terminate the active worker by the lead.
+       * Requires signed leader origin or the root (to terminate the leader role).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size `penalty.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Update the reward account associated with a set reward relationship for the active worker.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Update the reward per block for the active worker.
+       * Require signed leader origin or the root (to update leader's reward amount).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Update the associated role account of the active regular worker/lead.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Withdraw the worker application. Can be done by the worker only.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Worker remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+    };
+    operationsWorkingGroupBeta: {
+      /**
+       * Add a job opening for a regular worker/lead role.
+       * Require signed leader origin or the root (to add opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | { stakeAmount?: any; leavingUnstakingPeriod?: any } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Apply on a worker opening.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `p.description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | { memberId?: any; openingId?: any; roleAccountId?: any; rewardAccountId?: any; description?: any; stakeParameters?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+      /**
+       * Cancel an opening for the regular worker/lead position.
+       * Require signed leader origin or the root (to cancel opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Decreases the regular worker/lead stake and returns the remainder to the
+       * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+       * Accepts the stake amount to decrease.
+       * Requires signed leader origin or the root (to decrease the leader stake).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Fill opening for the regular/lead position.
+       * Require signed leader origin or the root (to fill opening for the leader position).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `successful_application_ids`
+       * - DB:
+       * - O(A)
+       * # </weight>
+       **/
+      fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+      /**
+       * Fund working group budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Increases the regular worker/lead stake, demands a worker origin.
+       * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Lead remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Leave the role by the active worker.
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+      /**
+       * Sets a new budget for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets a new status text for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+       * 
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+      /**
+       * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+       * If slashing balance greater than the existing stake - stake is slashed to zero.
+       * Requires signed leader origin or the root (to slash the leader stake).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size of `penality.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+      /**
+       * Transfers specified amount to any account.
+       * Requires leader origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Terminate the active worker by the lead.
+       * Requires signed leader origin or the root (to terminate the leader role).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size `penalty.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Update the reward account associated with a set reward relationship for the active worker.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Update the reward per block for the active worker.
+       * Require signed leader origin or the root (to update leader's reward amount).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Update the associated role account of the active regular worker/lead.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Withdraw the worker application. Can be done by the worker only.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Worker remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+    };
+    operationsWorkingGroupGamma: {
+      /**
+       * Add a job opening for a regular worker/lead role.
+       * Require signed leader origin or the root (to add opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | { stakeAmount?: any; leavingUnstakingPeriod?: any } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Apply on a worker opening.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `p.description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | { memberId?: any; openingId?: any; roleAccountId?: any; rewardAccountId?: any; description?: any; stakeParameters?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+      /**
+       * Cancel an opening for the regular worker/lead position.
+       * Require signed leader origin or the root (to cancel opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Decreases the regular worker/lead stake and returns the remainder to the
+       * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+       * Accepts the stake amount to decrease.
+       * Requires signed leader origin or the root (to decrease the leader stake).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Fill opening for the regular/lead position.
+       * Require signed leader origin or the root (to fill opening for the leader position).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `successful_application_ids`
+       * - DB:
+       * - O(A)
+       * # </weight>
+       **/
+      fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+      /**
+       * Fund working group budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Increases the regular worker/lead stake, demands a worker origin.
+       * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Lead remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Leave the role by the active worker.
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+      /**
+       * Sets a new budget for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets a new status text for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+       * 
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+      /**
+       * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+       * If slashing balance greater than the existing stake - stake is slashed to zero.
+       * Requires signed leader origin or the root (to slash the leader stake).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size of `penality.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+      /**
+       * Transfers specified amount to any account.
+       * Requires leader origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Terminate the active worker by the lead.
+       * Requires signed leader origin or the root (to terminate the leader role).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size `penalty.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Update the reward account associated with a set reward relationship for the active worker.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Update the reward per block for the active worker.
+       * Require signed leader origin or the root (to update leader's reward amount).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Update the associated role account of the active regular worker/lead.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Withdraw the worker application. Can be done by the worker only.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Worker remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+    };
+    projectToken: {
+      /**
+       * Burn tokens from specified account
+       * 
+       * Preconditions:
+       * - `amount` is > 0
+       * - origin signer is a controller account of `member_id` member
+       * - token by `token_id` exists
+       * - an account exists for `token_id` x `member_id`
+       * - account's tokens amount is >= `amount`
+       * - token supply can be modified (there is no active revenue split)
+       * 
+       * Postconditions:
+       * - starting with `unprocessed` beeing equal to `amount`, account's vesting schedules
+       * are iterated over and:
+       * - updated with `burned_amount += uprocessed` if vesting schedule's unvested amount is
+       * greater than `uprocessed`
+       * - removed otherwise
+       * (after each iteration `unprocessed` is reduced by the amount of unvested tokens
+       * burned during that iteration)
+       * - if the account has any `split_staking_status`, the `split_staking_status.amount`
+       * is reduced by `min(amount, split_staking_status.amount)`
+       * - `account.amount` is reduced by `amount`
+       * - token supply is reduced by `amount`
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - `O(1)` - doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      burn: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * Mint desired `token_id` amount into user account via JOY exchnage
+       * Preconditions
+       * - origin, member_id pair must be a valid authentication pair
+       * - token_id must exist
+       * - user usable JOY balance must be enough for buying (+ existential deposit)
+       * - slippage tolerance constraints respected if provided
+       * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+       * 
+       * Postconditions
+       * - `amount` CRT minted into account (which is created if necessary with existential deposit transferred to it)
+       * - respective JOY amount transferred from user balance to amm treasury account
+       * - event deposited
+       **/
+      buyOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
+      /**
+       * Allow any user to remove an account
+       * 
+       * Preconditions:
+       * - token by `token_id` must exist
+       * - an account must exist for `token_id` x `member_id`
+       * - if Permissioned token: `origin` signer must be `member_id` member's
+       * controller account
+       * - `token_id` x `member_id` account must be an empty account
+       * (`account_data.amount` == 0)
+       * Postconditions:
+       * - Account information for `token_id` x `member_id` removed from storage
+       * - bloat bond refunded to `member_id` controller account
+       * (or `bloat_bond.repayment_restricted_to` account)
+       * 
+       * <weight>
+       * 
+       * `O (1)`
+       * - DB:
+       * - `O(1)` - doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      dustAccount: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+      /**
+       * Split-participating user leaves revenue split
+       * Preconditions
+       * - `token` must exist for `token_id`
+       * - `origin` signer must be `member_id` member controller account
+       * - `account` must exist for `(token_id, member_id)`
+       * - `account.staking status.is_some()'
+       * - if `(account.staking_status.split_id == token.next_revenue_split_id - 1`
+       * AND `token.revenue_split` is active) THEN split staking period  must be ended
+       * 
+       * Postconditions
+       * - `account.staking_status` set to None
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - `O(1)` - doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      exitRevenueSplit: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+      /**
+       * Join whitelist for permissioned case: used to add accounts for token
+       * Preconditions:
+       * - 'token_id' must be valid
+       * - `origin` signer must be a controller account of `member_id`
+       * - account for `member_id` must not already exist
+       * - transfer policy is `Permissioned` and merkle proof must be valid
+       * 
+       * Postconditions:
+       * - account for `member_id` created and added to pallet storage
+       * - `bloat_bond` transferred from sender to treasury account
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (H)` where:
+       * - `H` is the length of `proof.0`
+       * - DB:
+       * - `O(1)` - doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      joinWhitelist: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, proof: PalletProjectTokenMerkleProof) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProjectTokenMerkleProof]>;
+      /**
+       * Participate in the *latest* token revenue split (if ongoing)
+       * Preconditions:
+       * - `token` must exist for `token_id`
+       * - `origin` signer must be `member_id` member controller account
+       * - `amount` must be > 0
+       * - `account` must exist  for `(token_id, member_id)`
+       * - `token.split_status` must be active AND THEN current_block in
+       * [split.start, split.start + split_duration)
+       * - `account.staking_status.is_none()` OR `account.staking_status.split_id` refers to a past split
+       * - `account.amount` >= `amount`
+       * - let `dividend = split_allocation * account.staked_amount / token.supply``
+       * then `treasury` must be able to transfer `dividend` amount of JOY.
+       * (This condition technically, should always be satisfied)
+       * 
+       * Postconditions
+       * - `dividend` amount of JOYs transferred from `treasury_account` to `sender`
+       * - `token` revenue split dividends payed tracking variable increased by `dividend`
+       * - `account.staking_status` set to Some(..) with `amount` and `token.latest_split`
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - `O(1)` - doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      participateInSplit: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * Purchase tokens on active token sale.
+       * 
+       * Preconditions:
+       * - token by `token_id` must exist
+       * - token by `token_id` must be in OfferingState::Sale
+       * - `amount` cannot exceed number of tokens remaining on sale
+       * - `origin` signer must be controller account of `member_id` member
+       * - sender's available JOY balance must be:
+       * - >= `joy_existential_deposit + amount * sale.unit_price`
+       * if AccountData already exist
+       * - >= `joy_existential_deposit + amount * sale.unit_price + bloat_bond`
+       * if AccountData does not exist
+       * - let `fee_amount` be `sale_platform_fee.mul_floor(amount * sale.unit_price)`
+       * - if `sale.earnings_destination.is_some()` and `sale.earnings_destination` account has
+       * zero balance:
+       * - the amount to be transferred from `sender` to `sale.earnings_destination`,
+       * which is equal to `amount * sale.unit_price - fee_amount`, must be greater than
+       * `joy_existential_deposit`
+       * - total number of tokens already purchased by the member on the current sale
+       * PLUS `amount` must not exceed sale's purchase cap per member
+       * - if Permissioned token:
+       * - AccountInfoByTokenAndMember(token_id, &member_id) must exist
+       * - if `sale.vesting_schedule.is_some()`:
+       * - number of sender account's ongoing vesting schedules
+       * must be < MaxVestingSchedulesPerAccountPerToken
+       * 
+       * Postconditions:
+       * - if `sale.earnings_destination.is_some()`:
+       * - `amount * sale.unit_price - fee_amount` JOY tokens are transfered from `sender`
+       * to `sale.earnings_destination`
+       * - `fee_amount` JOY is slashed from `sender` balance
+       * - if `sale.earnings_destination.is_none()`:
+       * - `amount * sale.unit_price` JOY is slashed from `sender` balance
+       * - if new token account created: `bloat_bond` transferred from `sender` to treasury
+       * - if `sale.vesting_schedule.is_some()`:
+       * - if buyer has no `vesting_schedule` related to the current sale:
+       * - a new vesting schedule (`sale.get_vesting_schedule(purchase_amount)`) is added to
+       * buyer's `vesing_schedules`
+       * - some finished vesting schedule is removed from buyer's account_data in case the
+       * number of buyer's vesting_schedules was == MaxVestingSchedulesPerAccountPerToken
+       * - if buyer already has a `vesting_schedule` related to the current sale:
+       * - current vesting schedule's `cliff_amount` is increased by
+       * `sale.get_vesting_schedule(purchase_amount).cliff_amount`
+       * - current vesting schedule's `post_cliff_total_amount` is increased by
+       * `sale.get_vesting_schedule(purchase_amount).post_cliff_total_amount`
+       * - if `sale.vesting_schedule.is_none()`:
+       * - buyer's account token amount increased by `amount`
+       * - if `token_data.sale.quantity_left - amount == 0` and `sale.auto_finalize` is `true`
+       * `token_data.sale` is set to None, otherwise `token_data.sale.quantity_left` is
+       * decreased by `amount` and `token_data.sale.funds_collected` in increased by
+       * `amount * sale.unit_price`
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - `O(1)` - doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      purchaseTokensOnSale: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * Burn desired `token_id` amount from user account and get JOY from treasury account
+       * Preconditions
+       * - origin, member_id pair must be a valid authentication pair
+       * - token_id must exist
+       * - token_id, member_id must be valid account coordinates
+       * - user usable CRT balance must be at least `amount`
+       * - slippage tolerance constraints respected if provided
+       * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+       * - amm treasury account must have sufficient JOYs for the operation
+       * 
+       * Postconditions
+       * - `amount` burned from user account
+       * - total supply decreased by amount
+       * - respective JOY amount transferred from amm treasury account to user account
+       * - event deposited
+       **/
+      sellOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
+      /**
+       * Allow to transfer from `src_member_id` account to the various `outputs` beneficiaries
+       * in the specified amounts.
+       * 
+       * Preconditions:
+       * - origin signer must be `src_member_id` controller account
+       * - token by `token_id` must exists
+       * - account of `src_member_id` must exist for `token_id`
+       * - sender must have enough JOYs to cover the total bloat bond required in case of
+       * destination(s) not existing.
+       * - source account must have enough token funds to cover all the transfer(s)
+       * - `outputs` must designate existing destination(s) for "Permissioned" transfers.
+       * Postconditions:
+       * - source account's tokens amount is decreased by `amount`.
+       * - total bloat bond transferred from sender's JOY balance into the treasury account
+       * in case destination(s) have been added to storage
+       * - `outputs.beneficiary` tokens amount increased by `amount`
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (T + M)` where:
+       * - `T` is the length of `outputs`
+       * - `M` is the size of `metadata` in kilobytes
+       * - DB:
+       * - `O(T)` - from the the generated weights
+       * # </weight>
+       **/
+      transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: Vec<ITuple<[u64, u128]>> | ([u64 | AnyNumber | Uint8Array, u128 | AnyNumber | Uint8Array])[], metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Vec<ITuple<[u64, u128]>>, Bytes]>;
+      updateMaxYearlyPatronageRate: AugmentedSubmittable<(rate: Permill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Permill]>;
+    };
+    proposalsCodex: {
+      /**
+       * Create a proposal, the type of proposal depends on the `proposal_details` variant
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (T + D + I)` where:
+       * - `T` is the title size in kilobytes
+       * - `D` is the description size in kilobytes
+       * - `I` is the size of any parameter in `proposal_details`
+       * (in kilobytes if it's metadata)
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      createProposal: AugmentedSubmittable<(generalProposalParameters: PalletProposalsCodexGeneralProposalParams | { memberId?: any; title?: any; description?: any; stakingAccountId?: any; exactExecutionBlock?: any } | string | Uint8Array, proposalDetails: PalletProposalsCodexProposalDetails | { Signal: any } | { RuntimeUpgrade: any } | { FundingRequest: any } | { SetMaxValidatorCount: any } | { CreateWorkingGroupLeadOpening: any } | { FillWorkingGroupLeadOpening: any } | { UpdateWorkingGroupBudget: any } | { DecreaseWorkingGroupLeadStake: any } | { SlashWorkingGroupLead: any } | { SetWorkingGroupLeadReward: any } | { TerminateWorkingGroupLead: any } | { AmendConstitution: any } | { CancelWorkingGroupLeadOpening: any } | { SetMembershipPrice: any } | { SetCouncilBudgetIncrement: any } | { SetCouncilorReward: any } | { SetInitialInvitationBalance: any } | { SetInitialInvitationCount: any } | { SetMembershipLeadInvitationQuota: any } | { SetReferralCut: any } | { VetoProposal: any } | { UpdateGlobalNftLimit: any } | { UpdateChannelPayouts: any } | { UpdateMaxYearlyPatronageRate: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails]>;
+    };
+    proposalsDiscussion: {
+      /**
+       * Adds a post with author origin check.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (L)` where:
+       * - `L` is the size of `text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addPost: AugmentedSubmittable<(postAuthorId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, text: Bytes | string | Uint8Array, editable: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes, bool]>;
+      /**
+       * Changes thread permission mode.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` if ThreadMode is close or O(1) otherwise where:
+       * - `W` is the number of whitelisted members in `mode`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      changeThreadMode: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, mode: PalletProposalsDiscussionThreadModeBTreeSet | { Open: any } | { Closed: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProposalsDiscussionThreadModeBTreeSet]>;
+      /**
+       * Remove post from storage, with the last parameter indicating whether to also hide it
+       * in the UI.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      deletePost: AugmentedSubmittable<(deleterId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, hide: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, bool]>;
+      /**
+       * Updates a post with author origin check. Update attempts number is limited.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (L)` where:
+       * - `L` is the size of `text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updatePost: AugmentedSubmittable<(threadId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, text: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
+    };
+    proposalsEngine: {
+      /**
+       * Cancel a proposal by its original proposer.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (L)` where:
+       * - `L` is the total number of locks in `Balances`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelProposal: AugmentedSubmittable<(proposerId: u64 | AnyNumber | Uint8Array, proposalId: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u32]>;
+      /**
+       * Proposer Remark
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      proposerRemark: AugmentedSubmittable<(proposalId: u32 | AnyNumber | Uint8Array, proposerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32, u64, Bytes]>;
+      /**
+       * Veto a proposal. Must be root.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      vetoProposal: AugmentedSubmittable<(proposalId: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+      /**
+       * Vote extrinsic. Conditions:  origin must allow votes.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or paraemters
+       * # </weight>
+       **/
+      vote: AugmentedSubmittable<(voterId: u64 | AnyNumber | Uint8Array, proposalId: u32 | AnyNumber | Uint8Array, vote: PalletProposalsEngineVoteKind | 'Approve' | 'Reject' | 'Slash' | 'Abstain' | number | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
+    };
+    referendum: {
+      /**
+       * Permanently opt out of voting from a given account.
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      optOutOfVoting: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+      /**
+       * Release a locked stake.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      releaseVoteStake: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+      /**
+       * Reveal a sealed vote in the referendum.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is the number of `intermediate_winners` stored in the current
+       * `Stage::<T, I>::get()`
+       * - DB:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      revealVote: AugmentedSubmittable<(salt: Bytes | string | Uint8Array, voteOptionId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, u64]>;
+      /**
+       * Cast a sealed vote in the referendum.
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      vote: AugmentedSubmittable<(commitment: H256 | string | Uint8Array, stake: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [H256, u128]>;
+    };
+    session: {
+      /**
+       * Removes any session key(s) of the function caller.
+       * 
+       * This doesn't take effect until the next session.
+       * 
+       * The dispatch origin of this function must be Signed and the account must be either be
+       * convertible to a validator ID using the chain's typical addressing system (this usually
+       * means being a controller account) or directly convertible into a validator ID (which
+       * usually means being a stash account).
+       * 
+       * # <weight>
+       * - Complexity: `O(1)` in number of key types. Actual cost depends on the number of length
+       * of `T::Keys::key_ids()` which is fixed.
+       * - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`
+       * - DbWrites: `NextKeys`, `origin account`
+       * - DbWrites per key id: `KeyOwner`
+       * # </weight>
+       **/
+      purgeKeys: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+      /**
+       * Sets the session key(s) of the function caller to `keys`.
+       * Allows an account to set its session key prior to becoming a validator.
+       * This doesn't take effect until the next session.
+       * 
+       * The dispatch origin of this function must be signed.
+       * 
+       * # <weight>
+       * - Complexity: `O(1)`. Actual cost depends on the number of length of
+       * `T::Keys::key_ids()` which is fixed.
+       * - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`
+       * - DbWrites: `origin account`, `NextKeys`
+       * - DbReads per key id: `KeyOwner`
+       * - DbWrites per key id: `KeyOwner`
+       * # </weight>
+       **/
+      setKeys: AugmentedSubmittable<(keys: JoystreamNodeRuntimeSessionKeys | { grandpa?: any; babe?: any; imOnline?: any; authorityDiscovery?: any } | string | Uint8Array, proof: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [JoystreamNodeRuntimeSessionKeys, Bytes]>;
+    };
+    staking: {
+      /**
+       * Take the origin account as a stash and lock up `value` of its balance. `controller` will
+       * be the account that controls it.
+       * 
+       * `value` must be more than the `minimum_balance` specified by `T::Currency`.
+       * 
+       * The dispatch origin for this call must be _Signed_ by the stash account.
+       * 
+       * Emits `Bonded`.
+       * # <weight>
+       * - Independent of the arguments. Moderate complexity.
+       * - O(1).
+       * - Three extra DB entries.
+       * 
+       * NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned
+       * unless the `origin` falls below _existential deposit_ and gets removed as dust.
+       * ------------------
+       * # </weight>
+       **/
+      bond: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array, payee: PalletStakingRewardDestination | { Staked: any } | { Stash: any } | { Controller: any } | { Account: any } | { None: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>, PalletStakingRewardDestination]>;
+      /**
+       * Add some extra amount that have appeared in the stash `free_balance` into the balance up
+       * for staking.
+       * 
+       * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
+       * 
+       * Use this if there are additional funds in your stash account that you wish to bond.
+       * Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose
+       * any limitation on the amount that can be added.
+       * 
+       * Emits `Bonded`.
+       * 
+       * # <weight>
+       * - Independent of the arguments. Insignificant complexity.
+       * - O(1).
+       * # </weight>
+       **/
+      bondExtra: AugmentedSubmittable<(maxAdditional: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
+      /**
+       * Cancel enactment of a deferred slash.
+       * 
+       * Can be called by the `T::SlashCancelOrigin`.
+       * 
+       * Parameters: era and indices of the slashes for that era to kill.
+       **/
+      cancelDeferredSlash: AugmentedSubmittable<(era: u32 | AnyNumber | Uint8Array, slashIndices: Vec<u32> | (u32 | AnyNumber | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [u32, Vec<u32>]>;
+      /**
+       * Declare no desire to either validate or nominate.
+       * 
+       * Effects will be felt at the beginning of the next era.
+       * 
+       * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+       * 
+       * # <weight>
+       * - Independent of the arguments. Insignificant complexity.
+       * - Contains one read.
+       * - Writes are limited to the `origin` account key.
+       * # </weight>
+       **/
+      chill: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+      /**
+       * Declare a `controller` to stop participating as either a validator or nominator.
+       * 
+       * Effects will be felt at the beginning of the next era.
+       * 
+       * The dispatch origin for this call must be _Signed_, but can be called by anyone.
+       * 
+       * If the caller is the same as the controller being targeted, then no further checks are
+       * enforced, and this function behaves just like `chill`.
+       * 
+       * If the caller is different than the controller being targeted, the following conditions
+       * must be met:
+       * 
+       * * `controller` must belong to a nominator who has become non-decodable,
+       * 
+       * Or:
+       * 
+       * * A `ChillThreshold` must be set and checked which defines how close to the max
+       * nominators or validators we must reach before users can start chilling one-another.
+       * * A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine
+       * how close we are to the threshold.
+       * * A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines
+       * if this is a person that should be chilled because they have not met the threshold
+       * bond required.
+       * 
+       * This can be helpful if bond requirements are updated, and we need to remove old users
+       * who do not satisfy these requirements.
+       **/
+      chillOther: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+      /**
+       * Force a validator to have at least the minimum commission. This will not affect a
+       * validator who already has a commission greater than or equal to the minimum. Any account
+       * can call this.
+       **/
+      forceApplyMinCommission: AugmentedSubmittable<(validatorStash: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+      /**
+       * Force there to be a new era at the end of the next session. After this, it will be
+       * reset to normal (non-forced) behaviour.
+       * 
+       * The dispatch origin must be Root.
+       * 
+       * # Warning
+       * 
+       * The election process starts multiple blocks before the end of the era.
+       * If this is called just before a new era is triggered, the election process may not
+       * have enough blocks to get a result.
+       * 
+       * # <weight>
+       * - No arguments.
+       * - Weight: O(1)
+       * - Write ForceEra
+       * # </weight>
+       **/
+      forceNewEra: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+      /**
+       * Force there to be a new era at the end of sessions indefinitely.
+       * 
+       * The dispatch origin must be Root.
+       * 
+       * # Warning
+       * 
+       * The election process starts multiple blocks before the end of the era.
+       * If this is called just before a new era is triggered, the election process may not
+       * have enough blocks to get a result.
+       **/
+      forceNewEraAlways: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+      /**
+       * Force there to be no new eras indefinitely.
+       * 
+       * The dispatch origin must be Root.
+       * 
+       * # Warning
+       * 
+       * The election process starts multiple blocks before the end of the era.
+       * Thus the election process may be ongoing when this is called. In this case the
+       * election will continue until the next era is triggered.
+       * 
+       * # <weight>
+       * - No arguments.
+       * - Weight: O(1)
+       * - Write: ForceEra
+       * # </weight>
+       **/
+      forceNoEras: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+      /**
+       * Force a current staker to become completely unstaked, immediately.
+       * 
+       * The dispatch origin must be Root.
+       **/
+      forceUnstake: AugmentedSubmittable<(stash: AccountId32 | string | Uint8Array, numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
+      /**
+       * Increments the ideal number of validators.
+       * 
+       * The dispatch origin must be Root.
+       * 
+       * # <weight>
+       * Same as [`Self::set_validator_count`].
+       * # </weight>
+       **/
+      increaseValidatorCount: AugmentedSubmittable<(additional: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>]>;
+      /**
+       * Remove the given nominations from the calling validator.
+       * 
+       * Effects will be felt at the beginning of the next era.
+       * 
+       * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+       * 
+       * - `who`: A list of nominator stash accounts who are nominating this validator which
+       * should no longer be nominating this validator.
+       * 
+       * Note: Making this call only makes sense if you first set the validator preferences to
+       * block any further nominations.
+       **/
+      kick: AugmentedSubmittable<(who: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
+      /**
+       * Declare the desire to nominate `targets` for the origin controller.
+       * 
+       * Effects will be felt at the beginning of the next era.
+       * 
+       * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+       * 
+       * # <weight>
+       * - The transaction's complexity is proportional to the size of `targets` (N)
+       * which is capped at CompactAssignments::LIMIT (T::MaxNominations).
+       * - Both the reads and writes follow a similar pattern.
+       * # </weight>
+       **/
+      nominate: AugmentedSubmittable<(targets: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
+      /**
+       * Pay out all the stakers behind a single validator for a single era.
+       * 
+       * - `validator_stash` is the stash account of the validator. Their nominators, up to
+       * `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.
+       * - `era` may be any era between `[current_era - history_depth; current_era]`.
+       * 
+       * The origin of this call must be _Signed_. Any account can call this function, even if
+       * it is not one of the stakers.
+       * 
+       * # <weight>
+       * - Time complexity: at most O(MaxNominatorRewardedPerValidator).
+       * - Contains a limited number of reads and writes.
+       * -----------
+       * N is the Number of payouts for the validator (including the validator)
+       * Weight:
+       * - Reward Destination Staked: O(N)
+       * - Reward Destination Controller (Creating): O(N)
+       * 
+       * NOTE: weights are assuming that payouts are made to alive stash account (Staked).
+       * Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.
+       * # </weight>
+       **/
+      payoutStakers: AugmentedSubmittable<(validatorStash: AccountId32 | string | Uint8Array, era: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
+      /**
+       * Remove all data structures concerning a staker/stash once it is at a state where it can
+       * be considered `dust` in the staking system. The requirements are:
+       * 
+       * 1. the `total_balance` of the stash is below existential deposit.
+       * 2. or, the `ledger.total` of the stash is below existential deposit.
+       * 
+       * The former can happen in cases like a slash; the latter when a fully unbonded account
+       * is still receiving staking rewards in `RewardDestination::Staked`.
+       * 
+       * It can be called by anyone, as long as `stash` meets the above requirements.
+       * 
+       * Refunds the transaction fees upon successful execution.
+       **/
+      reapStash: AugmentedSubmittable<(stash: AccountId32 | string | Uint8Array, numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
+      /**
+       * Rebond a portion of the stash scheduled to be unlocked.
+       * 
+       * The dispatch origin must be signed by the controller.
+       * 
+       * # <weight>
+       * - Time complexity: O(L), where L is unlocking chunks
+       * - Bounded by `MaxUnlockingChunks`.
+       * - Storage changes: Can't increase storage, only decrease it.
+       * # </weight>
+       **/
+      rebond: AugmentedSubmittable<(value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
+      /**
+       * Scale up the ideal number of validators by a factor.
+       * 
+       * The dispatch origin must be Root.
+       * 
+       * # <weight>
+       * Same as [`Self::set_validator_count`].
+       * # </weight>
+       **/
+      scaleValidatorCount: AugmentedSubmittable<(factor: Percent | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Percent]>;
+      /**
+       * (Re-)set the controller of a stash.
+       * 
+       * Effects will be felt instantly (as soon as this function is completed successfully).
+       * 
+       * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
+       * 
+       * # <weight>
+       * - Independent of the arguments. Insignificant complexity.
+       * - Contains a limited number of reads.
+       * - Writes are limited to the `origin` account key.
+       * ----------
+       * Weight: O(1)
+       * DB Weight:
+       * - Read: Bonded, Ledger New Controller, Ledger Old Controller
+       * - Write: Bonded, Ledger New Controller, Ledger Old Controller
+       * # </weight>
+       **/
+      setController: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+      /**
+       * Set `HistoryDepth` value. This function will delete any history information
+       * when `HistoryDepth` is reduced.
+       * 
+       * Parameters:
+       * - `new_history_depth`: The new history depth you would like to set.
+       * - `era_items_deleted`: The number of items that will be deleted by this dispatch. This
+       * should report all the storage items that will be deleted by clearing old era history.
+       * Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an
+       * accurate number.
+       * 
+       * Origin must be root.
+       * 
+       * # <weight>
+       * - E: Number of history depths removed, i.e. 10 -> 7 = 3
+       * - Weight: O(E)
+       * - DB Weight:
+       * - Reads: Current Era, History Depth
+       * - Writes: History Depth
+       * - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs
+       * - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,
+       * ErasStartSessionIndex
+       * # </weight>
+       **/
+      setHistoryDepth: AugmentedSubmittable<(newHistoryDepth: Compact<u32> | AnyNumber | Uint8Array, eraItemsDeleted: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>, Compact<u32>]>;
+      /**
+       * Set the validators who cannot be slashed (if any).
+       * 
+       * The dispatch origin must be Root.
+       **/
+      setInvulnerables: AugmentedSubmittable<(invulnerables: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
+      /**
+       * (Re-)set the payment target for a controller.
+       * 
+       * Effects will be felt instantly (as soon as this function is completed successfully).
+       * 
+       * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+       * 
+       * # <weight>
+       * - Independent of the arguments. Insignificant complexity.
+       * - Contains a limited number of reads.
+       * - Writes are limited to the `origin` account key.
+       * ---------
+       * - Weight: O(1)
+       * - DB Weight:
+       * - Read: Ledger
+       * - Write: Payee
+       * # </weight>
+       **/
+      setPayee: AugmentedSubmittable<(payee: PalletStakingRewardDestination | { Staked: any } | { Stash: any } | { Controller: any } | { Account: any } | { None: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStakingRewardDestination]>;
+      /**
+       * Update the various staking configurations .
+       * 
+       * * `min_nominator_bond`: The minimum active bond needed to be a nominator.
+       * * `min_validator_bond`: The minimum active bond needed to be a validator.
+       * * `max_nominator_count`: The max number of users who can be a nominator at once. When
+       * set to `None`, no limit is enforced.
+       * * `max_validator_count`: The max number of users who can be a validator at once. When
+       * set to `None`, no limit is enforced.
+       * * `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which
+       * should be filled in order for the `chill_other` transaction to work.
+       * * `min_commission`: The minimum amount of commission that each validators must maintain.
+       * This is checked only upon calling `validate`. Existing validators are not affected.
+       * 
+       * Origin must be Root to call this function.
+       * 
+       * NOTE: Existing nominators and validators will not be affected by this update.
+       * to kick people under the new limits, `chill_other` should be called.
+       **/
+      setStakingConfigs: AugmentedSubmittable<(minNominatorBond: PalletStakingPalletConfigOpU128 | { Noop: any } | { Set: any } | { Remove: any } | string | Uint8Array, minValidatorBond: PalletStakingPalletConfigOpU128 | { Noop: any } | { Set: any } | { Remove: any } | string | Uint8Array, maxNominatorCount: PalletStakingPalletConfigOpU32 | { Noop: any } | { Set: any } | { Remove: any } | string | Uint8Array, maxValidatorCount: PalletStakingPalletConfigOpU32 | { Noop: any } | { Set: any } | { Remove: any } | string | Uint8Array, chillThreshold: PalletStakingPalletConfigOpPercent | { Noop: any } | { Set: any } | { Remove: any } | string | Uint8Array, minCommission: PalletStakingPalletConfigOpPerbill | { Noop: any } | { Set: any } | { Remove: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletConfigOpU32, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpPerbill]>;
+      /**
+       * Sets the ideal number of validators.
+       * 
+       * The dispatch origin must be Root.
+       * 
+       * # <weight>
+       * Weight: O(1)
+       * Write: Validator Count
+       * # </weight>
+       **/
+      setValidatorCount: AugmentedSubmittable<(updated: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>]>;
+      /**
+       * Schedule a portion of the stash to be unlocked ready for transfer out after the bond
+       * period ends. If this leaves an amount actively bonded less than
+       * T::Currency::minimum_balance(), then it is increased to the full amount.
+       * 
+       * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+       * 
+       * Once the unlock period is done, you can call `withdraw_unbonded` to actually move
+       * the funds out of management ready for transfer.
+       * 
+       * No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)
+       * can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need
+       * to be called first to remove some of the chunks (if possible).
+       * 
+       * If a user encounters the `InsufficientBond` error when calling this extrinsic,
+       * they should call `chill` first in order to free up their bonded funds.
+       * 
+       * Emits `Unbonded`.
+       * 
+       * See also [`Call::withdraw_unbonded`].
+       **/
+      unbond: AugmentedSubmittable<(value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
+      /**
+       * Declare the desire to validate for the origin controller.
+       * 
+       * Effects will be felt at the beginning of the next era.
+       * 
+       * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
+       **/
+      validate: AugmentedSubmittable<(prefs: PalletStakingValidatorPrefs | { commission?: any; blocked?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStakingValidatorPrefs]>;
+      /**
+       * Remove any unlocked chunks from the `unlocking` queue from our management.
+       * 
+       * This essentially frees up that balance to be used by the stash account to do
+       * whatever it wants.
+       * 
+       * The dispatch origin for this call must be _Signed_ by the controller.
+       * 
+       * Emits `Withdrawn`.
+       * 
+       * See also [`Call::unbond`].
+       * 
+       * # <weight>
+       * Complexity O(S) where S is the number of slashing spans to remove
+       * NOTE: Weight annotation is the kill scenario, we refund otherwise.
+       * # </weight>
+       **/
+      withdrawUnbonded: AugmentedSubmittable<(numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+    };
+    storage: {
+      /**
+       * Accept pending invite.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      acceptDistributionBucketInvitation: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, bucketId: PalletStorageDistributionBucketIdRecord | { distributionBucketFamilyId?: any; distributionBucketIndex?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletStorageDistributionBucketIdRecord]>;
+      /**
+       * A storage provider signals that the data object was successfully uploaded to its storage.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W )` where:
+       * - `W` is the number of items in `data_objects`
+       * - DB:
+       * - `O(W)` - from the the generated weights
+       * # </weight>
+       **/
+      acceptPendingDataObjects: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, bagId: PalletStorageBagIdType | { Static: any } | { Dynamic: any } | string | Uint8Array, dataObjects: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletStorageBagIdType, BTreeSet<u64>]>;
+      /**
+       * Accept the storage bucket invitation. An invitation must match the worker_id parameter.
+       * It accepts an additional account ID (transactor) for accepting data objects to prevent
+       * transaction nonce collisions.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      acceptStorageBucketInvitation: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, transactorAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, AccountId32]>;
+      /**
+       * Cancel pending invite. Must be pending.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelDistributionBucketOperatorInvite: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | { distributionBucketFamilyId?: any; distributionBucketIndex?: any } | string | Uint8Array, operatorWorkerId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, u64]>;
+      /**
+       * Cancel pending storage bucket invite. An invitation must be pending.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelStorageBucketOperatorInvite: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Create a distribution bucket.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      createDistributionBucket: AugmentedSubmittable<(familyId: u64 | AnyNumber | Uint8Array, acceptingNewBags: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, bool]>;
+      /**
+       * Create a distribution bucket family.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      createDistributionBucketFamily: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+      /**
+       * Create storage bucket.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      createStorageBucket: AugmentedSubmittable<(inviteWorker: Option<u64> | null | object | string | Uint8Array, acceptingNewBags: bool | boolean | Uint8Array, sizeLimit: u64 | AnyNumber | Uint8Array, objectsLimit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<u64>, bool, u64, u64]>;
+      /**
+       * Delete distribution bucket. Must be empty.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      deleteDistributionBucket: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | { distributionBucketFamilyId?: any; distributionBucketIndex?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord]>;
+      /**
+       * Deletes a distribution bucket family.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      deleteDistributionBucketFamily: AugmentedSubmittable<(familyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Delete storage bucket. Must be empty. Storage operator must be missing.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      deleteStorageBucket: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Create a dynamic bag. Development mode.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is size of `message` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      distributionOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, distributionBucketId: PalletStorageDistributionBucketIdRecord | { distributionBucketFamilyId?: any; distributionBucketIndex?: any } | string | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+      /**
+       * Invite an operator. Must be missing.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      inviteDistributionBucketOperator: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | { distributionBucketFamilyId?: any; distributionBucketIndex?: any } | string | Uint8Array, operatorWorkerId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, u64]>;
+      /**
+       * Invite storage bucket operator. Must be missing.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      inviteStorageBucketOperator: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array, operatorId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+      /**
+       * Removes distribution bucket operator.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      removeDistributionBucketOperator: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | { distributionBucketFamilyId?: any; distributionBucketIndex?: any } | string | Uint8Array, operatorWorkerId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, u64]>;
+      /**
+       * Removes storage bucket operator.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      removeStorageBucketOperator: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Set distribution bucket family metadata.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is size of `metadata` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setDistributionBucketFamilyMetadata: AugmentedSubmittable<(familyId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+      /**
+       * Set distribution operator metadata for the distribution bucket.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is size of `metadata` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setDistributionOperatorMetadata: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, bucketId: PalletStorageDistributionBucketIdRecord | { distributionBucketFamilyId?: any; distributionBucketIndex?: any } | string | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+      /**
+       * Sets storage bucket voucher limits.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStorageBucketVoucherLimits: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array, newObjectsSizeLimit: u64 | AnyNumber | Uint8Array, newObjectsNumberLimit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64]>;
+      /**
+       * Sets storage operator metadata (eg.: storage node URL).
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is size of `metadata` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStorageOperatorMetadata: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
+      /**
+       * Deposit a StorageOperatorRemarked event
+       * containing a generic message.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is size of `message` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      storageOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
+      /**
+       * Add and remove hashes to the current blacklist.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V)` where:
+       * - `W` is the number of items in `remove_hashes`
+       * - `V` is the number of items in `add_hashes`
+       * - DB:
+       * - `O(W)` - from the the generated weights
+       * # </weight>
+       **/
+      updateBlacklist: AugmentedSubmittable<(removeHashes: BTreeSet<Bytes>, addHashes: BTreeSet<Bytes>) => SubmittableExtrinsic<ApiType>, [BTreeSet<Bytes>, BTreeSet<Bytes>]>;
+      /**
+       * Updates data object state bloat bond value.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateDataObjectStateBloatBond: AugmentedSubmittable<(stateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Updates size-based pricing of new objects uploaded.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateDataSizeFee: AugmentedSubmittable<(newDataSizeFee: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Updates 'distributing' flag for the distributing flag.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateDistributionBucketMode: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | { distributionBucketFamilyId?: any; distributionBucketIndex?: any } | string | Uint8Array, distributing: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, bool]>;
+      /**
+       * Updates distribution buckets for a bag.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V)` where:
+       * - `W` is the number of items in `add_buckets_indices`
+       * - `V` is the number of items in `remove_buckets_indices`
+       * - DB:
+       * - `O(V + W)` - from the the generated weights
+       * # </weight>
+       **/
+      updateDistributionBucketsForBag: AugmentedSubmittable<(bagId: PalletStorageBagIdType | { Static: any } | { Dynamic: any } | string | Uint8Array, familyId: u64 | AnyNumber | Uint8Array, addBucketsIndices: BTreeSet<u64>, removeBucketsIndices: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [PalletStorageBagIdType, u64, BTreeSet<u64>, BTreeSet<u64>]>;
+      /**
+       * Updates "Distribution buckets per bag" number limit.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateDistributionBucketsPerBagLimit: AugmentedSubmittable<(newLimit: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+      /**
+       * Updates a distribution bucket 'accepts new bags' flag.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateDistributionBucketStatus: AugmentedSubmittable<(bucketId: PalletStorageDistributionBucketIdRecord | { distributionBucketFamilyId?: any; distributionBucketIndex?: any } | string | Uint8Array, acceptingNewBags: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDistributionBucketIdRecord, bool]>;
+      /**
+       * Update number of distributed buckets used in given dynamic bag creation policy.
+       * Updates distribution buckets for a bag.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is the number of items in `families`
+       * - DB:
+       * - `O(W)` - from the the generated weights
+       * # </weight>
+       **/
+      updateFamiliesInDynamicBagCreationPolicy: AugmentedSubmittable<(dynamicBagType: PalletStorageDynamicBagType | 'Member' | 'Channel' | number | Uint8Array, families: BTreeMap<u64, u32>) => SubmittableExtrinsic<ApiType>, [PalletStorageDynamicBagType, BTreeMap<u64, u32>]>;
+      /**
+       * Update number of storage buckets used in given dynamic bag creation policy.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateNumberOfStorageBucketsInDynamicBagCreationPolicy: AugmentedSubmittable<(dynamicBagType: PalletStorageDynamicBagType | 'Member' | 'Channel' | number | Uint8Array, numberOfStorageBuckets: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDynamicBagType, u32]>;
+      /**
+       * Updates storage buckets for a bag.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + V)` where:
+       * - `W` is the number of items in `add_buckets`
+       * - `V` is the number of items in `remove_buckets`
+       * - DB:
+       * - `O(V + W)` - from the the generated weights
+       * # </weight>
+       **/
+      updateStorageBucketsForBag: AugmentedSubmittable<(bagId: PalletStorageBagIdType | { Static: any } | { Dynamic: any } | string | Uint8Array, addBuckets: BTreeSet<u64>, removeBuckets: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [PalletStorageBagIdType, BTreeSet<u64>, BTreeSet<u64>]>;
+      /**
+       * Updates "Storage buckets per bag" number limit.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateStorageBucketsPerBagLimit: AugmentedSubmittable<(newLimit: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
+      /**
+       * Update whether new bags are being accepted for storage.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateStorageBucketStatus: AugmentedSubmittable<(storageBucketId: u64 | AnyNumber | Uint8Array, acceptingNewBags: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, bool]>;
+      /**
+       * Updates "Storage buckets voucher max limits".
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateStorageBucketsVoucherMaxLimits: AugmentedSubmittable<(newObjectsSize: u64 | AnyNumber | Uint8Array, newObjectsNumber: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
+      /**
+       * Updates global uploading flag.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateUploadingBlockedStatus: AugmentedSubmittable<(newStatus: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [bool]>;
+    };
+    storageWorkingGroup: {
+      /**
+       * Add a job opening for a regular worker/lead role.
+       * Require signed leader origin or the root (to add opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      addOpening: AugmentedSubmittable<(description: Bytes | string | Uint8Array, openingType: PalletWorkingGroupOpeningType | 'Leader' | 'Regular' | number | Uint8Array, stakePolicy: PalletWorkingGroupStakePolicy | { stakeAmount?: any; leavingUnstakingPeriod?: any } | string | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+      /**
+       * Apply on a worker opening.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (D)` where:
+       * - `D` is the size of `p.description` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      applyOnOpening: AugmentedSubmittable<(p: PalletWorkingGroupApplyOnOpeningParams | { memberId?: any; openingId?: any; roleAccountId?: any; rewardAccountId?: any; description?: any; stakeParameters?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletWorkingGroupApplyOnOpeningParams]>;
+      /**
+       * Cancel an opening for the regular worker/lead position.
+       * Require signed leader origin or the root (to cancel opening for the leader position).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      cancelOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Decreases the regular worker/lead stake and returns the remainder to the
+       * worker staking_account_id. Can be decreased to zero, no actions on zero stake.
+       * Accepts the stake amount to decrease.
+       * Requires signed leader origin or the root (to decrease the leader stake).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      decreaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Fill opening for the regular/lead position.
+       * Require signed leader origin or the root (to fill opening for the leader position).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `successful_application_ids`
+       * - DB:
+       * - O(A)
+       * # </weight>
+       **/
+      fillOpening: AugmentedSubmittable<(openingId: u64 | AnyNumber | Uint8Array, successfulApplicationIds: BTreeSet<u64>) => SubmittableExtrinsic<ApiType>, [u64, BTreeSet<u64>]>;
+      /**
+       * Fund working group budget by a member.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` Doesn't depend on the state or parameters
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundWorkingGroupBudget: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Bytes]>;
+      /**
+       * Increases the regular worker/lead stake, demands a worker origin.
+       * Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      increaseStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, stakeBalanceDelta: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128]>;
+      /**
+       * Lead remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leadRemark: AugmentedSubmittable<(msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Leave the role by the active worker.
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (R)` where:
+       * - `R` is the size of `rationale` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      leaveRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<Bytes>]>;
+      /**
+       * Sets a new budget for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setBudget: AugmentedSubmittable<(newBudget: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Sets a new status text for the working group.
+       * Requires root origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (S)` where:
+       * - `S` is the size of the contents of `status_text` in kilobytes when it is not none
+       * 
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      setStatusText: AugmentedSubmittable<(statusText: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Option<Bytes>]>;
+      /**
+       * Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.
+       * If slashing balance greater than the existing stake - stake is slashed to zero.
+       * Requires signed leader origin or the root (to slash the leader stake).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size of `penality.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      slashStake: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u128, Option<Bytes>]>;
+      /**
+       * Transfers specified amount to any account.
+       * Requires leader origin.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      spendFromBudget: AugmentedSubmittable<(accountId: AccountId32 | string | Uint8Array, amount: u128 | AnyNumber | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u128, Option<Bytes>]>;
+      /**
+       * Terminate the active worker by the lead.
+       * Requires signed leader origin or the root (to terminate the leader role).
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (P)` where:
+       * - `P` is the size `penalty.slashing_text` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateRole: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, penalty: Option<u128> | null | object | string | Uint8Array, rationale: Option<Bytes> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>, Option<Bytes>]>;
+      /**
+       * Update the reward account associated with a set reward relationship for the active worker.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRewardAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Update the reward per block for the active worker.
+       * Require signed leader origin or the root (to update leader's reward amount).
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRewardAmount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, rewardPerBlock: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Update the associated role account of the active regular worker/lead.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      updateRoleAccount: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, newRoleAccountId: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, AccountId32]>;
+      /**
+       * Withdraw the worker application. Can be done by the worker only.
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawApplication: AugmentedSubmittable<(applicationId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Worker remark message
+       * 
+       * # <weight>
+       * 
+       * ## Weight
+       * `O (M)` where:
+       * - `M` is the size of `msg` in kilobytes
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+    };
+    system: {
+      /**
+       * A dispatch that will fill the block weight up to the given ratio.
+       **/
+      fillBlock: AugmentedSubmittable<(ratio: Perbill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Perbill]>;
+      /**
+       * Kill all storage items with a key that starts with the given prefix.
+       * 
+       * **NOTE:** We rely on the Root origin to provide us the number of subkeys under
+       * the prefix we are removing to accurately calculate the weight of this function.
+       **/
+      killPrefix: AugmentedSubmittable<(prefix: Bytes | string | Uint8Array, subkeys: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes, u32]>;
+      /**
+       * Kill some items from storage.
+       **/
+      killStorage: AugmentedSubmittable<(keys: Vec<Bytes> | (Bytes | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Bytes>]>;
+      /**
+       * Make some on-chain remark.
+       * 
+       * # <weight>
+       * - `O(1)`
+       * # </weight>
+       **/
+      remark: AugmentedSubmittable<(remark: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Make some on-chain remark and emit event.
+       **/
+      remarkWithEvent: AugmentedSubmittable<(remark: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Set the new runtime code.
+       * 
+       * # <weight>
+       * - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`
+       * - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is
+       * expensive).
+       * - 1 storage write (codec `O(C)`).
+       * - 1 digest item.
+       * - 1 event.
+       * The weight of this function is dependent on the runtime, but generally this is very
+       * expensive. We will treat this as a full block.
+       * # </weight>
+       **/
+      setCode: AugmentedSubmittable<(code: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Set the new runtime code without doing any checks of the given `code`.
+       * 
+       * # <weight>
+       * - `O(C)` where `C` length of `code`
+       * - 1 storage write (codec `O(C)`).
+       * - 1 digest item.
+       * - 1 event.
+       * The weight of this function is dependent on the runtime. We will treat this as a full
+       * block. # </weight>
+       **/
+      setCodeWithoutChecks: AugmentedSubmittable<(code: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
+      /**
+       * Set the number of pages in the WebAssembly environment's heap.
+       **/
+      setHeapPages: AugmentedSubmittable<(pages: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Set some items of storage.
+       **/
+      setStorage: AugmentedSubmittable<(items: Vec<ITuple<[Bytes, Bytes]>> | ([Bytes | string | Uint8Array, Bytes | string | Uint8Array])[]) => SubmittableExtrinsic<ApiType>, [Vec<ITuple<[Bytes, Bytes]>>]>;
+    };
+    timestamp: {
+      /**
+       * Set the current time.
+       * 
+       * This call should be invoked exactly once per block. It will panic at the finalization
+       * phase, if this call hasn't been invoked by that time.
+       * 
+       * The timestamp should be greater than the previous one by the amount specified by
+       * `MinimumPeriod`.
+       * 
+       * The dispatch origin for this call must be `Inherent`.
+       * 
+       * # <weight>
+       * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
+       * - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in
+       * `on_finalize`)
+       * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
+       * # </weight>
+       **/
+      set: AugmentedSubmittable<(now: Compact<u64> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u64>]>;
+    };
+    utility: {
+      /**
+       * Send a call through an indexed pseudonym of the sender.
+       * 
+       * Filter from origin are passed along. The call will be dispatched with an origin which
+       * use the same filter as the origin of this call.
+       * 
+       * NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
+       * because you expect `proxy` to have been used prior in the call stack and you do not want
+       * the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
+       * in the Multisig pallet instead.
+       * 
+       * NOTE: Prior to version *12, this was called `as_limited_sub`.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       **/
+      asDerivative: AugmentedSubmittable<(index: u16 | AnyNumber | Uint8Array, call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Call]>;
+      /**
+       * Send a batch of dispatch calls.
+       * 
+       * May be called from any origin.
+       * 
+       * - `calls`: The calls to be dispatched from the same origin. The number of call must not
+       * exceed the constant: `batched_calls_limit` (available in constant metadata).
+       * 
+       * If origin is root then call are dispatch without checking origin filter. (This includes
+       * bypassing `frame_system::Config::BaseCallFilter`).
+       * 
+       * # <weight>
+       * - Complexity: O(C) where C is the number of calls to be batched.
+       * # </weight>
+       * 
+       * This will return `Ok` in all circumstances. To determine the success of the batch, an
+       * event is deposited. If a call failed and the batch was interrupted, then the
+       * `BatchInterrupted` event is deposited, along with the number of successful calls made
+       * and the error of the failed call. If all were successful, then the `BatchCompleted`
+       * event is deposited.
+       **/
+      batch: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
+      /**
+       * Send a batch of dispatch calls and atomically execute them.
+       * The whole transaction will rollback and fail if any of the calls failed.
+       * 
+       * May be called from any origin.
+       * 
+       * - `calls`: The calls to be dispatched from the same origin. The number of call must not
+       * exceed the constant: `batched_calls_limit` (available in constant metadata).
+       * 
+       * If origin is root then call are dispatch without checking origin filter. (This includes
+       * bypassing `frame_system::Config::BaseCallFilter`).
+       * 
+       * # <weight>
+       * - Complexity: O(C) where C is the number of calls to be batched.
+       * # </weight>
+       **/
+      batchAll: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
+      /**
+       * Dispatches a function call with a provided origin.
+       * 
+       * The dispatch origin for this call must be _Root_.
+       * 
+       * # <weight>
+       * - O(1).
+       * - Limited storage reads.
+       * - One DB write (event).
+       * - Weight of derivative `call` execution + T::WeightInfo::dispatch_as().
+       * # </weight>
+       **/
+      dispatchAs: AugmentedSubmittable<(asOrigin: JoystreamNodeRuntimeOriginCaller | { system: any } | { Void: any } | string | Uint8Array, call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [JoystreamNodeRuntimeOriginCaller, Call]>;
+      /**
+       * Send a batch of dispatch calls.
+       * Unlike `batch`, it allows errors and won't interrupt.
+       * 
+       * May be called from any origin.
+       * 
+       * - `calls`: The calls to be dispatched from the same origin. The number of call must not
+       * exceed the constant: `batched_calls_limit` (available in constant metadata).
+       * 
+       * If origin is root then call are dispatch without checking origin filter. (This includes
+       * bypassing `frame_system::Config::BaseCallFilter`).
+       * 
+       * # <weight>
+       * - Complexity: O(C) where C is the number of calls to be batched.
+       * # </weight>
+       **/
+      forceBatch: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
+    };
+    vesting: {
+      /**
+       * Force a vested transfer.
+       * 
+       * The dispatch origin for this call must be _Root_.
+       * 
+       * - `source`: The account whose funds should be transferred.
+       * - `target`: The account that should be transferred the vested funds.
+       * - `schedule`: The vesting schedule attached to the transfer.
+       * 
+       * Emits `VestingCreated`.
+       * 
+       * NOTE: This will unlock all schedules through the current block.
+       * 
+       * # <weight>
+       * - `O(1)`.
+       * - DbWeight: 4 Reads, 4 Writes
+       * - Reads: Vesting Storage, Balances Locks, Target Account, Source Account
+       * - Writes: Vesting Storage, Balances Locks, Target Account, Source Account
+       * # </weight>
+       **/
+      forceVestedTransfer: AugmentedSubmittable<(source: AccountId32 | string | Uint8Array, target: AccountId32 | string | Uint8Array, schedule: PalletVestingVestingInfo | { locked?: any; perBlock?: any; startingBlock?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, AccountId32, PalletVestingVestingInfo]>;
+      /**
+       * Merge two vesting schedules together, creating a new vesting schedule that unlocks over
+       * the highest possible start and end blocks. If both schedules have already started the
+       * current block will be used as the schedule start; with the caveat that if one schedule
+       * is finished by the current block, the other will be treated as the new merged schedule,
+       * unmodified.
+       * 
+       * NOTE: If `schedule1_index == schedule2_index` this is a no-op.
+       * NOTE: This will unlock all schedules through the current block prior to merging.
+       * NOTE: If both schedules have ended by the current block, no new schedule will be created
+       * and both will be removed.
+       * 
+       * Merged schedule attributes:
+       * - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
+       * current_block)`.
+       * - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
+       * - `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `schedule1_index`: index of the first schedule to merge.
+       * - `schedule2_index`: index of the second schedule to merge.
+       **/
+      mergeSchedules: AugmentedSubmittable<(schedule1Index: u32 | AnyNumber | Uint8Array, schedule2Index: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32, u32]>;
+      /**
+       * Unlock any vested funds of the sender account.
+       * 
+       * The dispatch origin for this call must be _Signed_ and the sender must have funds still
+       * locked under this pallet.
+       * 
+       * Emits either `VestingCompleted` or `VestingUpdated`.
+       * 
+       * # <weight>
+       * - `O(1)`.
+       * - DbWeight: 2 Reads, 2 Writes
+       * - Reads: Vesting Storage, Balances Locks, [Sender Account]
+       * - Writes: Vesting Storage, Balances Locks, [Sender Account]
+       * # </weight>
+       **/
+      vest: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
+      /**
+       * Create a vested transfer.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `target`: The account receiving the vested funds.
+       * - `schedule`: The vesting schedule attached to the transfer.
+       * 
+       * Emits `VestingCreated`.
+       * 
+       * NOTE: This will unlock all schedules through the current block.
+       * 
+       * # <weight>
+       * - `O(1)`.
+       * - DbWeight: 3 Reads, 3 Writes
+       * - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]
+       * - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]
+       * # </weight>
+       **/
+      vestedTransfer: AugmentedSubmittable<(target: AccountId32 | string | Uint8Array, schedule: PalletVestingVestingInfo | { locked?: any; perBlock?: any; startingBlock?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, PalletVestingVestingInfo]>;
+      /**
+       * Unlock any vested funds of a `target` account.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `target`: The account whose vested funds should be unlocked. Must have funds still
+       * locked under this pallet.
+       * 
+       * Emits either `VestingCompleted` or `VestingUpdated`.
+       * 
+       * # <weight>
+       * - `O(1)`.
+       * - DbWeight: 3 Reads, 3 Writes
+       * - Reads: Vesting Storage, Balances Locks, Target Account
+       * - Writes: Vesting Storage, Balances Locks, Target Account
+       * # </weight>
+       **/
+      vestOther: AugmentedSubmittable<(target: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
+    };
+  } // AugmentedSubmittables
+} // declare module
diff --git a/node_modules/@joystream/types/types/src/augment/augment-api.ts b/node_modules/@joystream/types/types/src/augment/augment-api.ts
new file mode 100644
index 0000000..921d2f8
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/augment-api.ts
@@ -0,0 +1,9 @@
+// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
+/* eslint-disable */
+
+import './augment-api-consts';
+import './augment-api-errors';
+import './augment-api-events';
+import './augment-api-query';
+import './augment-api-tx';
+import './augment-api-rpc';
diff --git a/node_modules/@joystream/types/types/src/augment/augment-types.ts b/node_modules/@joystream/types/types/src/augment/augment-types.ts
new file mode 100644
index 0000000..e1592ae
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/augment-types.ts
@@ -0,0 +1,1116 @@
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+
+import type { Data, StorageKey } from '@polkadot/types';
+import type { BitVec, Bool, Bytes, I128, I16, I256, I32, I64, I8, Json, Null, OptionBool, Raw, Text, Type, U128, U16, U256, U32, U64, U8, USize, bool, i128, i16, i256, i32, i64, i8, u128, u16, u256, u32, u64, u8, usize } from '@polkadot/types-codec';
+import type { AssetApproval, AssetApprovalKey, AssetBalance, AssetDestroyWitness, AssetDetails, AssetMetadata, TAssetBalance, TAssetDepositBalance } from '@polkadot/types/interfaces/assets';
+import type { BlockAttestations, IncludedBlocks, MoreAttestations } from '@polkadot/types/interfaces/attestations';
+import type { RawAuraPreDigest } from '@polkadot/types/interfaces/aura';
+import type { ExtrinsicOrHash, ExtrinsicStatus } from '@polkadot/types/interfaces/author';
+import type { UncleEntryItem } from '@polkadot/types/interfaces/authorship';
+import type { AllowedSlots, BabeAuthorityWeight, BabeBlockWeight, BabeEpochConfiguration, BabeEquivocationProof, BabeWeight, EpochAuthorship, MaybeRandomness, MaybeVrf, NextConfigDescriptor, NextConfigDescriptorV1, Randomness, RawBabePreDigest, RawBabePreDigestCompat, RawBabePreDigestPrimary, RawBabePreDigestPrimaryTo159, RawBabePreDigestSecondaryPlain, RawBabePreDigestSecondaryTo159, RawBabePreDigestSecondaryVRF, RawBabePreDigestTo159, SlotNumber, VrfData, VrfOutput, VrfProof } from '@polkadot/types/interfaces/babe';
+import type { AccountData, BalanceLock, BalanceLockTo212, BalanceStatus, Reasons, ReserveData, ReserveIdentifier, VestingSchedule, WithdrawReasons } from '@polkadot/types/interfaces/balances';
+import type { BeefyCommitment, BeefyId, BeefyNextAuthoritySet, BeefyPayload, BeefySignedCommitment, MmrRootHash, ValidatorSetId } from '@polkadot/types/interfaces/beefy';
+import type { BridgeMessageId, BridgedBlockHash, BridgedBlockNumber, BridgedHeader, CallOrigin, ChainId, DeliveredMessages, DispatchFeePayment, InboundLaneData, InboundRelayer, InitializationData, LaneId, MessageData, MessageKey, MessageNonce, MessagesDeliveryProofOf, MessagesProofOf, OperatingMode, OutboundLaneData, OutboundMessageFee, OutboundPayload, Parameter, RelayerId, UnrewardedRelayer, UnrewardedRelayersState } from '@polkadot/types/interfaces/bridges';
+import type { BlockHash } from '@polkadot/types/interfaces/chain';
+import type { PrefixedStorageKey } from '@polkadot/types/interfaces/childstate';
+import type { StatementKind } from '@polkadot/types/interfaces/claims';
+import type { CollectiveOrigin, MemberCount, ProposalIndex, Votes, VotesTo230 } from '@polkadot/types/interfaces/collective';
+import type { AuthorityId, RawVRFOutput } from '@polkadot/types/interfaces/consensus';
+import type { AliveContractInfo, CodeHash, CodeSource, CodeUploadRequest, CodeUploadResult, CodeUploadResultValue, ContractCallFlags, ContractCallRequest, ContractExecResult, ContractExecResultOk, ContractExecResultResult, ContractExecResultSuccessTo255, ContractExecResultSuccessTo260, ContractExecResultTo255, ContractExecResultTo260, ContractExecResultTo267, ContractInfo, ContractInstantiateResult, ContractInstantiateResultTo267, ContractInstantiateResultTo299, ContractReturnFlags, ContractStorageKey, DeletedContract, ExecReturnValue, Gas, HostFnWeights, HostFnWeightsTo264, InstantiateRequest, InstantiateRequestV1, InstantiateRequestV2, InstantiateReturnValue, InstantiateReturnValueOk, InstantiateReturnValueTo267, InstructionWeights, Limits, LimitsTo264, PrefabWasmModule, RentProjection, Schedule, ScheduleTo212, ScheduleTo258, ScheduleTo264, SeedOf, StorageDeposit, TombstoneContractInfo, TrieId } from '@polkadot/types/interfaces/contracts';
+import type { ContractConstructorSpecLatest, ContractConstructorSpecV0, ContractConstructorSpecV1, ContractConstructorSpecV2, ContractConstructorSpecV3, ContractContractSpecV0, ContractContractSpecV1, ContractContractSpecV2, ContractContractSpecV3, ContractCryptoHasher, ContractDiscriminant, ContractDisplayName, ContractEventParamSpecLatest, ContractEventParamSpecV0, ContractEventParamSpecV2, ContractEventSpecLatest, ContractEventSpecV0, ContractEventSpecV1, ContractEventSpecV2, ContractLayoutArray, ContractLayoutCell, ContractLayoutEnum, ContractLayoutHash, ContractLayoutHashingStrategy, ContractLayoutKey, ContractLayoutStruct, ContractLayoutStructField, ContractMessageParamSpecLatest, ContractMessageParamSpecV0, ContractMessageParamSpecV2, ContractMessageSpecLatest, ContractMessageSpecV0, ContractMessageSpecV1, ContractMessageSpecV2, ContractMetadata, ContractMetadataLatest, ContractMetadataV0, ContractMetadataV1, ContractMetadataV2, ContractMetadataV3, ContractProject, ContractProjectContract, ContractProjectInfo, ContractProjectSource, ContractProjectV0, ContractSelector, ContractStorageLayout, ContractTypeSpec } from '@polkadot/types/interfaces/contractsAbi';
+import type { FundIndex, FundInfo, LastContribution, TrieIndex } from '@polkadot/types/interfaces/crowdloan';
+import type { ConfigData, MessageId, OverweightIndex, PageCounter, PageIndexData } from '@polkadot/types/interfaces/cumulus';
+import type { AccountVote, AccountVoteSplit, AccountVoteStandard, Conviction, Delegations, PreimageStatus, PreimageStatusAvailable, PriorLock, PropIndex, Proposal, ProxyState, ReferendumIndex, ReferendumInfo, ReferendumInfoFinished, ReferendumInfoTo239, ReferendumStatus, Tally, Voting, VotingDelegating, VotingDirect, VotingDirectVote } from '@polkadot/types/interfaces/democracy';
+import type { BlockStats } from '@polkadot/types/interfaces/dev';
+import type { ApprovalFlag, DefunctVoter, Renouncing, SetIndex, Vote, VoteIndex, VoteThreshold, VoterInfo } from '@polkadot/types/interfaces/elections';
+import type { CreatedBlock, ImportedAux } from '@polkadot/types/interfaces/engine';
+import type { BlockV0, BlockV1, BlockV2, EIP1559Transaction, EIP2930Transaction, EthAccessList, EthAccessListItem, EthAccount, EthAddress, EthBlock, EthBloom, EthCallRequest, EthFilter, EthFilterAddress, EthFilterChanges, EthFilterTopic, EthFilterTopicEntry, EthFilterTopicInner, EthHeader, EthLog, EthReceipt, EthRichBlock, EthRichHeader, EthStorageProof, EthSubKind, EthSubParams, EthSubResult, EthSyncInfo, EthSyncStatus, EthTransaction, EthTransactionAction, EthTransactionCondition, EthTransactionRequest, EthTransactionSignature, EthTransactionStatus, EthWork, EthereumAccountId, EthereumAddress, EthereumLookupSource, EthereumSignature, LegacyTransaction, TransactionV0, TransactionV1, TransactionV2 } from '@polkadot/types/interfaces/eth';
+import type { EvmAccount, EvmLog, EvmVicinity, ExitError, ExitFatal, ExitReason, ExitRevert, ExitSucceed } from '@polkadot/types/interfaces/evm';
+import type { AnySignature, EcdsaSignature, Ed25519Signature, Era, Extrinsic, ExtrinsicEra, ExtrinsicPayload, ExtrinsicPayloadUnknown, ExtrinsicPayloadV4, ExtrinsicSignature, ExtrinsicSignatureV4, ExtrinsicUnknown, ExtrinsicV4, ImmortalEra, MortalEra, MultiSignature, Signature, SignerPayload, Sr25519Signature } from '@polkadot/types/interfaces/extrinsics';
+import type { AssetOptions, Owner, PermissionLatest, PermissionVersions, PermissionsV1 } from '@polkadot/types/interfaces/genericAsset';
+import type { ActiveGilt, ActiveGiltsTotal, ActiveIndex, GiltBid } from '@polkadot/types/interfaces/gilt';
+import type { AuthorityIndex, AuthorityList, AuthoritySet, AuthoritySetChange, AuthoritySetChanges, AuthorityWeight, DelayKind, DelayKindBest, EncodedFinalityProofs, ForkTreePendingChange, ForkTreePendingChangeNode, GrandpaCommit, GrandpaEquivocation, GrandpaEquivocationProof, GrandpaEquivocationValue, GrandpaJustification, GrandpaPrecommit, GrandpaPrevote, GrandpaSignedPrecommit, JustificationNotification, KeyOwnerProof, NextAuthority, PendingChange, PendingPause, PendingResume, Precommits, Prevotes, ReportedRoundStates, RoundState, SetId, StoredPendingChange, StoredState } from '@polkadot/types/interfaces/grandpa';
+import type { IdentityFields, IdentityInfo, IdentityInfoAdditional, IdentityInfoTo198, IdentityJudgement, RegistrarIndex, RegistrarInfo, Registration, RegistrationJudgement, RegistrationTo198 } from '@polkadot/types/interfaces/identity';
+import type { AuthIndex, AuthoritySignature, Heartbeat, HeartbeatTo244, OpaqueMultiaddr, OpaqueNetworkState, OpaquePeerId } from '@polkadot/types/interfaces/imOnline';
+import type { CallIndex, LotteryConfig } from '@polkadot/types/interfaces/lottery';
+import type { ErrorMetadataLatest, ErrorMetadataV10, ErrorMetadataV11, ErrorMetadataV12, ErrorMetadataV13, ErrorMetadataV14, ErrorMetadataV9, EventMetadataLatest, EventMetadataV10, EventMetadataV11, EventMetadataV12, EventMetadataV13, EventMetadataV14, EventMetadataV9, ExtrinsicMetadataLatest, ExtrinsicMetadataV11, ExtrinsicMetadataV12, ExtrinsicMetadataV13, ExtrinsicMetadataV14, FunctionArgumentMetadataLatest, FunctionArgumentMetadataV10, FunctionArgumentMetadataV11, FunctionArgumentMetadataV12, FunctionArgumentMetadataV13, FunctionArgumentMetadataV14, FunctionArgumentMetadataV9, FunctionMetadataLatest, FunctionMetadataV10, FunctionMetadataV11, FunctionMetadataV12, FunctionMetadataV13, FunctionMetadataV14, FunctionMetadataV9, MetadataAll, MetadataLatest, MetadataV10, MetadataV11, MetadataV12, MetadataV13, MetadataV14, MetadataV9, ModuleConstantMetadataV10, ModuleConstantMetadataV11, ModuleConstantMetadataV12, ModuleConstantMetadataV13, ModuleConstantMetadataV9, ModuleMetadataV10, ModuleMetadataV11, ModuleMetadataV12, ModuleMetadataV13, ModuleMetadataV9, PalletCallMetadataLatest, PalletCallMetadataV14, PalletConstantMetadataLatest, PalletConstantMetadataV14, PalletErrorMetadataLatest, PalletErrorMetadataV14, PalletEventMetadataLatest, PalletEventMetadataV14, PalletMetadataLatest, PalletMetadataV14, PalletStorageMetadataLatest, PalletStorageMetadataV14, PortableType, PortableTypeV14, SignedExtensionMetadataLatest, SignedExtensionMetadataV14, StorageEntryMetadataLatest, StorageEntryMetadataV10, StorageEntryMetadataV11, StorageEntryMetadataV12, StorageEntryMetadataV13, StorageEntryMetadataV14, StorageEntryMetadataV9, StorageEntryModifierLatest, StorageEntryModifierV10, StorageEntryModifierV11, StorageEntryModifierV12, StorageEntryModifierV13, StorageEntryModifierV14, StorageEntryModifierV9, StorageEntryTypeLatest, StorageEntryTypeV10, StorageEntryTypeV11, StorageEntryTypeV12, StorageEntryTypeV13, StorageEntryTypeV14, StorageEntryTypeV9, StorageHasher, StorageHasherV10, StorageHasherV11, StorageHasherV12, StorageHasherV13, StorageHasherV14, StorageHasherV9, StorageMetadataV10, StorageMetadataV11, StorageMetadataV12, StorageMetadataV13, StorageMetadataV9 } from '@polkadot/types/interfaces/metadata';
+import type { MmrLeafBatchProof, MmrLeafProof } from '@polkadot/types/interfaces/mmr';
+import type { StorageKind } from '@polkadot/types/interfaces/offchain';
+import type { DeferredOffenceOf, Kind, OffenceDetails, Offender, OpaqueTimeSlot, ReportIdOf, Reporter } from '@polkadot/types/interfaces/offences';
+import type { AbridgedCandidateReceipt, AbridgedHostConfiguration, AbridgedHrmpChannel, AssignmentId, AssignmentKind, AttestedCandidate, AuctionIndex, AuthorityDiscoveryId, AvailabilityBitfield, AvailabilityBitfieldRecord, BackedCandidate, Bidder, BufferedSessionChange, CandidateCommitments, CandidateDescriptor, CandidateHash, CandidateInfo, CandidatePendingAvailability, CandidateReceipt, CollatorId, CollatorSignature, CommittedCandidateReceipt, CoreAssignment, CoreIndex, CoreOccupied, DisputeLocation, DisputeResult, DisputeState, DisputeStatement, DisputeStatementSet, DoubleVoteReport, DownwardMessage, ExplicitDisputeStatement, GlobalValidationData, GlobalValidationSchedule, GroupIndex, HeadData, HostConfiguration, HrmpChannel, HrmpChannelId, HrmpOpenChannelRequest, InboundDownwardMessage, InboundHrmpMessage, InboundHrmpMessages, IncomingParachain, IncomingParachainDeploy, IncomingParachainFixed, InvalidDisputeStatementKind, LeasePeriod, LeasePeriodOf, LocalValidationData, MessageIngestionType, MessageQueueChain, MessagingStateSnapshot, MessagingStateSnapshotEgressEntry, MultiDisputeStatementSet, NewBidder, OutboundHrmpMessage, ParaGenesisArgs, ParaId, ParaInfo, ParaLifecycle, ParaPastCodeMeta, ParaScheduling, ParaValidatorIndex, ParachainDispatchOrigin, ParachainInherentData, ParachainProposal, ParachainsInherentData, ParathreadClaim, ParathreadClaimQueue, ParathreadEntry, PersistedValidationData, QueuedParathread, RegisteredParachainInfo, RelayBlockNumber, RelayChainBlockNumber, RelayChainHash, RelayHash, Remark, ReplacementTimes, Retriable, Scheduling, ServiceQuality, SessionInfo, SessionInfoValidatorGroup, SignedAvailabilityBitfield, SignedAvailabilityBitfields, SigningContext, SlotRange, SlotRange10, Statement, SubId, SystemInherentData, TransientValidationData, UpgradeGoAhead, UpgradeRestriction, UpwardMessage, ValidDisputeStatementKind, ValidationCode, ValidationCodeHash, ValidationData, ValidationDataType, ValidationFunctionParams, ValidatorSignature, ValidityAttestation, VecInboundHrmpMessage, WinnersData, WinnersData10, WinnersDataTuple, WinnersDataTuple10, WinningData, WinningData10, WinningDataEntry } from '@polkadot/types/interfaces/parachains';
+import type { FeeDetails, InclusionFee, RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment';
+import type { Approvals } from '@polkadot/types/interfaces/poll';
+import type { ProxyAnnouncement, ProxyDefinition, ProxyType } from '@polkadot/types/interfaces/proxy';
+import type { AccountStatus, AccountValidity } from '@polkadot/types/interfaces/purchase';
+import type { ActiveRecovery, RecoveryConfig } from '@polkadot/types/interfaces/recovery';
+import type { RpcMethods } from '@polkadot/types/interfaces/rpc';
+import type { AccountId, AccountId20, AccountId32, AccountIdOf, AccountIndex, Address, AssetId, Balance, BalanceOf, Block, BlockNumber, BlockNumberFor, BlockNumberOf, Call, CallHash, CallHashOf, ChangesTrieConfiguration, ChangesTrieSignal, CodecHash, Consensus, ConsensusEngineId, CrateVersion, Digest, DigestItem, EncodedJustification, ExtrinsicsWeight, Fixed128, Fixed64, FixedI128, FixedI64, FixedU128, FixedU64, H1024, H128, H160, H2048, H256, H32, H512, H64, Hash, Header, HeaderPartial, I32F32, Index, IndicesLookupSource, Justification, Justifications, KeyTypeId, KeyValue, LockIdentifier, LookupSource, LookupTarget, ModuleId, Moment, MultiAddress, MultiSigner, OpaqueCall, Origin, OriginCaller, PalletId, PalletVersion, PalletsOrigin, Pays, PerU16, Perbill, Percent, Permill, Perquintill, Phantom, PhantomData, PreRuntime, Releases, RuntimeDbWeight, Seal, SealV0, SignedBlock, SignedBlockWithJustification, SignedBlockWithJustifications, Slot, StorageData, StorageProof, TransactionInfo, TransactionPriority, TransactionStorageProof, U32F32, ValidatorId, ValidatorIdOf, Weight, WeightMultiplier } from '@polkadot/types/interfaces/runtime';
+import type { Si0Field, Si0LookupTypeId, Si0Path, Si0Type, Si0TypeDef, Si0TypeDefArray, Si0TypeDefBitSequence, Si0TypeDefCompact, Si0TypeDefComposite, Si0TypeDefPhantom, Si0TypeDefPrimitive, Si0TypeDefSequence, Si0TypeDefTuple, Si0TypeDefVariant, Si0TypeParameter, Si0Variant, Si1Field, Si1LookupTypeId, Si1Path, Si1Type, Si1TypeDef, Si1TypeDefArray, Si1TypeDefBitSequence, Si1TypeDefCompact, Si1TypeDefComposite, Si1TypeDefPrimitive, Si1TypeDefSequence, Si1TypeDefTuple, Si1TypeDefVariant, Si1TypeParameter, Si1Variant, SiField, SiLookupTypeId, SiPath, SiType, SiTypeDef, SiTypeDefArray, SiTypeDefBitSequence, SiTypeDefCompact, SiTypeDefComposite, SiTypeDefPrimitive, SiTypeDefSequence, SiTypeDefTuple, SiTypeDefVariant, SiTypeParameter, SiVariant } from '@polkadot/types/interfaces/scaleInfo';
+import type { Period, Priority, SchedulePeriod, SchedulePriority, Scheduled, ScheduledTo254, TaskAddress } from '@polkadot/types/interfaces/scheduler';
+import type { BeefyKey, FullIdentification, IdentificationTuple, Keys, MembershipProof, SessionIndex, SessionKeys1, SessionKeys10, SessionKeys10B, SessionKeys2, SessionKeys3, SessionKeys4, SessionKeys5, SessionKeys6, SessionKeys6B, SessionKeys7, SessionKeys7B, SessionKeys8, SessionKeys8B, SessionKeys9, SessionKeys9B, ValidatorCount } from '@polkadot/types/interfaces/session';
+import type { Bid, BidKind, SocietyJudgement, SocietyVote, StrikeCount, VouchingStatus } from '@polkadot/types/interfaces/society';
+import type { ActiveEraInfo, CompactAssignments, CompactAssignmentsTo257, CompactAssignmentsTo265, CompactAssignmentsWith16, CompactAssignmentsWith24, CompactScore, CompactScoreCompact, ElectionCompute, ElectionPhase, ElectionResult, ElectionScore, ElectionSize, ElectionStatus, EraIndex, EraPoints, EraRewardPoints, EraRewards, Exposure, ExtendedBalance, Forcing, IndividualExposure, KeyType, MomentOf, Nominations, NominatorIndex, NominatorIndexCompact, OffchainAccuracy, OffchainAccuracyCompact, PhragmenScore, Points, RawSolution, RawSolutionTo265, RawSolutionWith16, RawSolutionWith24, ReadySolution, RewardDestination, RewardPoint, RoundSnapshot, SeatHolder, SignedSubmission, SignedSubmissionOf, SignedSubmissionTo276, SlashJournalEntry, SlashingSpans, SlashingSpansTo204, SolutionOrSnapshotSize, SolutionSupport, SolutionSupports, SpanIndex, SpanRecord, StakingLedger, StakingLedgerTo223, StakingLedgerTo240, SubmissionIndicesOf, Supports, UnappliedSlash, UnappliedSlashOther, UnlockChunk, ValidatorIndex, ValidatorIndexCompact, ValidatorPrefs, ValidatorPrefsTo145, ValidatorPrefsTo196, ValidatorPrefsWithBlocked, ValidatorPrefsWithCommission, VoteWeight, Voter } from '@polkadot/types/interfaces/staking';
+import type { ApiId, BlockTrace, BlockTraceEvent, BlockTraceEventData, BlockTraceSpan, KeyValueOption, MigrationStatusResult, ReadProof, RuntimeVersion, RuntimeVersionApi, RuntimeVersionPartial, SpecVersion, StorageChangeSet, TraceBlockResponse, TraceError } from '@polkadot/types/interfaces/state';
+import type { WeightToFeeCoefficient } from '@polkadot/types/interfaces/support';
+import type { AccountInfo, AccountInfoWithDualRefCount, AccountInfoWithProviders, AccountInfoWithRefCount, AccountInfoWithRefCountU8, AccountInfoWithTripleRefCount, ApplyExtrinsicResult, ArithmeticError, BlockLength, BlockWeights, ChainProperties, ChainType, ConsumedWeight, DigestOf, DispatchClass, DispatchError, DispatchErrorModule, DispatchErrorModuleU8, DispatchErrorModuleU8a, DispatchErrorTo198, DispatchInfo, DispatchInfoTo190, DispatchInfoTo244, DispatchOutcome, DispatchResult, DispatchResultOf, DispatchResultTo198, Event, EventId, EventIndex, EventRecord, Health, InvalidTransaction, Key, LastRuntimeUpgradeInfo, NetworkState, NetworkStatePeerset, NetworkStatePeersetInfo, NodeRole, NotConnectedPeer, Peer, PeerEndpoint, PeerEndpointAddr, PeerInfo, PeerPing, PerDispatchClassU32, PerDispatchClassWeight, PerDispatchClassWeightsPerClass, Phase, RawOrigin, RefCount, RefCountTo259, SyncState, SystemOrigin, TokenError, TransactionValidityError, TransactionalError, UnknownTransaction, WeightPerClass } from '@polkadot/types/interfaces/system';
+import type { Bounty, BountyIndex, BountyStatus, BountyStatusActive, BountyStatusCuratorProposed, BountyStatusPendingPayout, OpenTip, OpenTipFinderTo225, OpenTipTip, OpenTipTo225, TreasuryProposal } from '@polkadot/types/interfaces/treasury';
+import type { Multiplier } from '@polkadot/types/interfaces/txpayment';
+import type { ClassDetails, ClassId, ClassMetadata, DepositBalance, DepositBalanceOf, DestroyWitness, InstanceDetails, InstanceId, InstanceMetadata } from '@polkadot/types/interfaces/uniques';
+import type { Multisig, Timepoint } from '@polkadot/types/interfaces/utility';
+import type { VestingInfo } from '@polkadot/types/interfaces/vesting';
+import type { AssetInstance, AssetInstanceV0, AssetInstanceV1, AssetInstanceV2, BodyId, BodyPart, DoubleEncodedCall, Fungibility, FungibilityV0, FungibilityV1, FungibilityV2, InboundStatus, InstructionV2, InteriorMultiLocation, Junction, JunctionV0, JunctionV1, JunctionV2, Junctions, JunctionsV1, JunctionsV2, MultiAsset, MultiAssetFilter, MultiAssetFilterV1, MultiAssetFilterV2, MultiAssetV0, MultiAssetV1, MultiAssetV2, MultiAssets, MultiAssetsV1, MultiAssetsV2, MultiLocation, MultiLocationV0, MultiLocationV1, MultiLocationV2, NetworkId, OriginKindV0, OriginKindV1, OriginKindV2, OutboundStatus, Outcome, QueryId, QueryStatus, QueueConfigData, Response, ResponseV0, ResponseV1, ResponseV2, ResponseV2Error, ResponseV2Result, VersionMigrationStage, VersionedMultiAsset, VersionedMultiAssets, VersionedMultiLocation, VersionedResponse, VersionedXcm, WeightLimitV2, WildFungibility, WildFungibilityV0, WildFungibilityV1, WildFungibilityV2, WildMultiAsset, WildMultiAssetV1, WildMultiAssetV2, Xcm, XcmAssetId, XcmError, XcmErrorV0, XcmErrorV1, XcmErrorV2, XcmOrder, XcmOrderV0, XcmOrderV1, XcmOrderV2, XcmOrigin, XcmOriginKind, XcmV0, XcmV1, XcmV2, XcmVersion, XcmpMessageFormat } from '@polkadot/types/interfaces/xcm';
+
+declare module '@polkadot/types/types/registry' {
+  export interface InterfaceTypes {
+    AbridgedCandidateReceipt: AbridgedCandidateReceipt;
+    AbridgedHostConfiguration: AbridgedHostConfiguration;
+    AbridgedHrmpChannel: AbridgedHrmpChannel;
+    AccountData: AccountData;
+    AccountId: AccountId;
+    AccountId20: AccountId20;
+    AccountId32: AccountId32;
+    AccountIdOf: AccountIdOf;
+    AccountIndex: AccountIndex;
+    AccountInfo: AccountInfo;
+    AccountInfoWithDualRefCount: AccountInfoWithDualRefCount;
+    AccountInfoWithProviders: AccountInfoWithProviders;
+    AccountInfoWithRefCount: AccountInfoWithRefCount;
+    AccountInfoWithRefCountU8: AccountInfoWithRefCountU8;
+    AccountInfoWithTripleRefCount: AccountInfoWithTripleRefCount;
+    AccountStatus: AccountStatus;
+    AccountValidity: AccountValidity;
+    AccountVote: AccountVote;
+    AccountVoteSplit: AccountVoteSplit;
+    AccountVoteStandard: AccountVoteStandard;
+    ActiveEraInfo: ActiveEraInfo;
+    ActiveGilt: ActiveGilt;
+    ActiveGiltsTotal: ActiveGiltsTotal;
+    ActiveIndex: ActiveIndex;
+    ActiveRecovery: ActiveRecovery;
+    Address: Address;
+    AliveContractInfo: AliveContractInfo;
+    AllowedSlots: AllowedSlots;
+    AnySignature: AnySignature;
+    ApiId: ApiId;
+    ApplyExtrinsicResult: ApplyExtrinsicResult;
+    ApprovalFlag: ApprovalFlag;
+    Approvals: Approvals;
+    ArithmeticError: ArithmeticError;
+    AssetApproval: AssetApproval;
+    AssetApprovalKey: AssetApprovalKey;
+    AssetBalance: AssetBalance;
+    AssetDestroyWitness: AssetDestroyWitness;
+    AssetDetails: AssetDetails;
+    AssetId: AssetId;
+    AssetInstance: AssetInstance;
+    AssetInstanceV0: AssetInstanceV0;
+    AssetInstanceV1: AssetInstanceV1;
+    AssetInstanceV2: AssetInstanceV2;
+    AssetMetadata: AssetMetadata;
+    AssetOptions: AssetOptions;
+    AssignmentId: AssignmentId;
+    AssignmentKind: AssignmentKind;
+    AttestedCandidate: AttestedCandidate;
+    AuctionIndex: AuctionIndex;
+    AuthIndex: AuthIndex;
+    AuthorityDiscoveryId: AuthorityDiscoveryId;
+    AuthorityId: AuthorityId;
+    AuthorityIndex: AuthorityIndex;
+    AuthorityList: AuthorityList;
+    AuthoritySet: AuthoritySet;
+    AuthoritySetChange: AuthoritySetChange;
+    AuthoritySetChanges: AuthoritySetChanges;
+    AuthoritySignature: AuthoritySignature;
+    AuthorityWeight: AuthorityWeight;
+    AvailabilityBitfield: AvailabilityBitfield;
+    AvailabilityBitfieldRecord: AvailabilityBitfieldRecord;
+    BabeAuthorityWeight: BabeAuthorityWeight;
+    BabeBlockWeight: BabeBlockWeight;
+    BabeEpochConfiguration: BabeEpochConfiguration;
+    BabeEquivocationProof: BabeEquivocationProof;
+    BabeWeight: BabeWeight;
+    BackedCandidate: BackedCandidate;
+    Balance: Balance;
+    BalanceLock: BalanceLock;
+    BalanceLockTo212: BalanceLockTo212;
+    BalanceOf: BalanceOf;
+    BalanceStatus: BalanceStatus;
+    BeefyCommitment: BeefyCommitment;
+    BeefyId: BeefyId;
+    BeefyKey: BeefyKey;
+    BeefyNextAuthoritySet: BeefyNextAuthoritySet;
+    BeefyPayload: BeefyPayload;
+    BeefySignedCommitment: BeefySignedCommitment;
+    Bid: Bid;
+    Bidder: Bidder;
+    BidKind: BidKind;
+    BitVec: BitVec;
+    Block: Block;
+    BlockAttestations: BlockAttestations;
+    BlockHash: BlockHash;
+    BlockLength: BlockLength;
+    BlockNumber: BlockNumber;
+    BlockNumberFor: BlockNumberFor;
+    BlockNumberOf: BlockNumberOf;
+    BlockStats: BlockStats;
+    BlockTrace: BlockTrace;
+    BlockTraceEvent: BlockTraceEvent;
+    BlockTraceEventData: BlockTraceEventData;
+    BlockTraceSpan: BlockTraceSpan;
+    BlockV0: BlockV0;
+    BlockV1: BlockV1;
+    BlockV2: BlockV2;
+    BlockWeights: BlockWeights;
+    BodyId: BodyId;
+    BodyPart: BodyPart;
+    bool: bool;
+    Bool: Bool;
+    Bounty: Bounty;
+    BountyIndex: BountyIndex;
+    BountyStatus: BountyStatus;
+    BountyStatusActive: BountyStatusActive;
+    BountyStatusCuratorProposed: BountyStatusCuratorProposed;
+    BountyStatusPendingPayout: BountyStatusPendingPayout;
+    BridgedBlockHash: BridgedBlockHash;
+    BridgedBlockNumber: BridgedBlockNumber;
+    BridgedHeader: BridgedHeader;
+    BridgeMessageId: BridgeMessageId;
+    BufferedSessionChange: BufferedSessionChange;
+    Bytes: Bytes;
+    Call: Call;
+    CallHash: CallHash;
+    CallHashOf: CallHashOf;
+    CallIndex: CallIndex;
+    CallOrigin: CallOrigin;
+    CandidateCommitments: CandidateCommitments;
+    CandidateDescriptor: CandidateDescriptor;
+    CandidateHash: CandidateHash;
+    CandidateInfo: CandidateInfo;
+    CandidatePendingAvailability: CandidatePendingAvailability;
+    CandidateReceipt: CandidateReceipt;
+    ChainId: ChainId;
+    ChainProperties: ChainProperties;
+    ChainType: ChainType;
+    ChangesTrieConfiguration: ChangesTrieConfiguration;
+    ChangesTrieSignal: ChangesTrieSignal;
+    ClassDetails: ClassDetails;
+    ClassId: ClassId;
+    ClassMetadata: ClassMetadata;
+    CodecHash: CodecHash;
+    CodeHash: CodeHash;
+    CodeSource: CodeSource;
+    CodeUploadRequest: CodeUploadRequest;
+    CodeUploadResult: CodeUploadResult;
+    CodeUploadResultValue: CodeUploadResultValue;
+    CollatorId: CollatorId;
+    CollatorSignature: CollatorSignature;
+    CollectiveOrigin: CollectiveOrigin;
+    CommittedCandidateReceipt: CommittedCandidateReceipt;
+    CompactAssignments: CompactAssignments;
+    CompactAssignmentsTo257: CompactAssignmentsTo257;
+    CompactAssignmentsTo265: CompactAssignmentsTo265;
+    CompactAssignmentsWith16: CompactAssignmentsWith16;
+    CompactAssignmentsWith24: CompactAssignmentsWith24;
+    CompactScore: CompactScore;
+    CompactScoreCompact: CompactScoreCompact;
+    ConfigData: ConfigData;
+    Consensus: Consensus;
+    ConsensusEngineId: ConsensusEngineId;
+    ConsumedWeight: ConsumedWeight;
+    ContractCallFlags: ContractCallFlags;
+    ContractCallRequest: ContractCallRequest;
+    ContractConstructorSpecLatest: ContractConstructorSpecLatest;
+    ContractConstructorSpecV0: ContractConstructorSpecV0;
+    ContractConstructorSpecV1: ContractConstructorSpecV1;
+    ContractConstructorSpecV2: ContractConstructorSpecV2;
+    ContractConstructorSpecV3: ContractConstructorSpecV3;
+    ContractContractSpecV0: ContractContractSpecV0;
+    ContractContractSpecV1: ContractContractSpecV1;
+    ContractContractSpecV2: ContractContractSpecV2;
+    ContractContractSpecV3: ContractContractSpecV3;
+    ContractCryptoHasher: ContractCryptoHasher;
+    ContractDiscriminant: ContractDiscriminant;
+    ContractDisplayName: ContractDisplayName;
+    ContractEventParamSpecLatest: ContractEventParamSpecLatest;
+    ContractEventParamSpecV0: ContractEventParamSpecV0;
+    ContractEventParamSpecV2: ContractEventParamSpecV2;
+    ContractEventSpecLatest: ContractEventSpecLatest;
+    ContractEventSpecV0: ContractEventSpecV0;
+    ContractEventSpecV1: ContractEventSpecV1;
+    ContractEventSpecV2: ContractEventSpecV2;
+    ContractExecResult: ContractExecResult;
+    ContractExecResultOk: ContractExecResultOk;
+    ContractExecResultResult: ContractExecResultResult;
+    ContractExecResultSuccessTo255: ContractExecResultSuccessTo255;
+    ContractExecResultSuccessTo260: ContractExecResultSuccessTo260;
+    ContractExecResultTo255: ContractExecResultTo255;
+    ContractExecResultTo260: ContractExecResultTo260;
+    ContractExecResultTo267: ContractExecResultTo267;
+    ContractInfo: ContractInfo;
+    ContractInstantiateResult: ContractInstantiateResult;
+    ContractInstantiateResultTo267: ContractInstantiateResultTo267;
+    ContractInstantiateResultTo299: ContractInstantiateResultTo299;
+    ContractLayoutArray: ContractLayoutArray;
+    ContractLayoutCell: ContractLayoutCell;
+    ContractLayoutEnum: ContractLayoutEnum;
+    ContractLayoutHash: ContractLayoutHash;
+    ContractLayoutHashingStrategy: ContractLayoutHashingStrategy;
+    ContractLayoutKey: ContractLayoutKey;
+    ContractLayoutStruct: ContractLayoutStruct;
+    ContractLayoutStructField: ContractLayoutStructField;
+    ContractMessageParamSpecLatest: ContractMessageParamSpecLatest;
+    ContractMessageParamSpecV0: ContractMessageParamSpecV0;
+    ContractMessageParamSpecV2: ContractMessageParamSpecV2;
+    ContractMessageSpecLatest: ContractMessageSpecLatest;
+    ContractMessageSpecV0: ContractMessageSpecV0;
+    ContractMessageSpecV1: ContractMessageSpecV1;
+    ContractMessageSpecV2: ContractMessageSpecV2;
+    ContractMetadata: ContractMetadata;
+    ContractMetadataLatest: ContractMetadataLatest;
+    ContractMetadataV0: ContractMetadataV0;
+    ContractMetadataV1: ContractMetadataV1;
+    ContractMetadataV2: ContractMetadataV2;
+    ContractMetadataV3: ContractMetadataV3;
+    ContractProject: ContractProject;
+    ContractProjectContract: ContractProjectContract;
+    ContractProjectInfo: ContractProjectInfo;
+    ContractProjectSource: ContractProjectSource;
+    ContractProjectV0: ContractProjectV0;
+    ContractReturnFlags: ContractReturnFlags;
+    ContractSelector: ContractSelector;
+    ContractStorageKey: ContractStorageKey;
+    ContractStorageLayout: ContractStorageLayout;
+    ContractTypeSpec: ContractTypeSpec;
+    Conviction: Conviction;
+    CoreAssignment: CoreAssignment;
+    CoreIndex: CoreIndex;
+    CoreOccupied: CoreOccupied;
+    CrateVersion: CrateVersion;
+    CreatedBlock: CreatedBlock;
+    Data: Data;
+    DeferredOffenceOf: DeferredOffenceOf;
+    DefunctVoter: DefunctVoter;
+    DelayKind: DelayKind;
+    DelayKindBest: DelayKindBest;
+    Delegations: Delegations;
+    DeletedContract: DeletedContract;
+    DeliveredMessages: DeliveredMessages;
+    DepositBalance: DepositBalance;
+    DepositBalanceOf: DepositBalanceOf;
+    DestroyWitness: DestroyWitness;
+    Digest: Digest;
+    DigestItem: DigestItem;
+    DigestOf: DigestOf;
+    DispatchClass: DispatchClass;
+    DispatchError: DispatchError;
+    DispatchErrorModule: DispatchErrorModule;
+    DispatchErrorModuleU8: DispatchErrorModuleU8;
+    DispatchErrorModuleU8a: DispatchErrorModuleU8a;
+    DispatchErrorTo198: DispatchErrorTo198;
+    DispatchFeePayment: DispatchFeePayment;
+    DispatchInfo: DispatchInfo;
+    DispatchInfoTo190: DispatchInfoTo190;
+    DispatchInfoTo244: DispatchInfoTo244;
+    DispatchOutcome: DispatchOutcome;
+    DispatchResult: DispatchResult;
+    DispatchResultOf: DispatchResultOf;
+    DispatchResultTo198: DispatchResultTo198;
+    DisputeLocation: DisputeLocation;
+    DisputeResult: DisputeResult;
+    DisputeState: DisputeState;
+    DisputeStatement: DisputeStatement;
+    DisputeStatementSet: DisputeStatementSet;
+    DoubleEncodedCall: DoubleEncodedCall;
+    DoubleVoteReport: DoubleVoteReport;
+    DownwardMessage: DownwardMessage;
+    EcdsaSignature: EcdsaSignature;
+    Ed25519Signature: Ed25519Signature;
+    EIP1559Transaction: EIP1559Transaction;
+    EIP2930Transaction: EIP2930Transaction;
+    ElectionCompute: ElectionCompute;
+    ElectionPhase: ElectionPhase;
+    ElectionResult: ElectionResult;
+    ElectionScore: ElectionScore;
+    ElectionSize: ElectionSize;
+    ElectionStatus: ElectionStatus;
+    EncodedFinalityProofs: EncodedFinalityProofs;
+    EncodedJustification: EncodedJustification;
+    EpochAuthorship: EpochAuthorship;
+    Era: Era;
+    EraIndex: EraIndex;
+    EraPoints: EraPoints;
+    EraRewardPoints: EraRewardPoints;
+    EraRewards: EraRewards;
+    ErrorMetadataLatest: ErrorMetadataLatest;
+    ErrorMetadataV10: ErrorMetadataV10;
+    ErrorMetadataV11: ErrorMetadataV11;
+    ErrorMetadataV12: ErrorMetadataV12;
+    ErrorMetadataV13: ErrorMetadataV13;
+    ErrorMetadataV14: ErrorMetadataV14;
+    ErrorMetadataV9: ErrorMetadataV9;
+    EthAccessList: EthAccessList;
+    EthAccessListItem: EthAccessListItem;
+    EthAccount: EthAccount;
+    EthAddress: EthAddress;
+    EthBlock: EthBlock;
+    EthBloom: EthBloom;
+    EthCallRequest: EthCallRequest;
+    EthereumAccountId: EthereumAccountId;
+    EthereumAddress: EthereumAddress;
+    EthereumLookupSource: EthereumLookupSource;
+    EthereumSignature: EthereumSignature;
+    EthFilter: EthFilter;
+    EthFilterAddress: EthFilterAddress;
+    EthFilterChanges: EthFilterChanges;
+    EthFilterTopic: EthFilterTopic;
+    EthFilterTopicEntry: EthFilterTopicEntry;
+    EthFilterTopicInner: EthFilterTopicInner;
+    EthHeader: EthHeader;
+    EthLog: EthLog;
+    EthReceipt: EthReceipt;
+    EthRichBlock: EthRichBlock;
+    EthRichHeader: EthRichHeader;
+    EthStorageProof: EthStorageProof;
+    EthSubKind: EthSubKind;
+    EthSubParams: EthSubParams;
+    EthSubResult: EthSubResult;
+    EthSyncInfo: EthSyncInfo;
+    EthSyncStatus: EthSyncStatus;
+    EthTransaction: EthTransaction;
+    EthTransactionAction: EthTransactionAction;
+    EthTransactionCondition: EthTransactionCondition;
+    EthTransactionRequest: EthTransactionRequest;
+    EthTransactionSignature: EthTransactionSignature;
+    EthTransactionStatus: EthTransactionStatus;
+    EthWork: EthWork;
+    Event: Event;
+    EventId: EventId;
+    EventIndex: EventIndex;
+    EventMetadataLatest: EventMetadataLatest;
+    EventMetadataV10: EventMetadataV10;
+    EventMetadataV11: EventMetadataV11;
+    EventMetadataV12: EventMetadataV12;
+    EventMetadataV13: EventMetadataV13;
+    EventMetadataV14: EventMetadataV14;
+    EventMetadataV9: EventMetadataV9;
+    EventRecord: EventRecord;
+    EvmAccount: EvmAccount;
+    EvmLog: EvmLog;
+    EvmVicinity: EvmVicinity;
+    ExecReturnValue: ExecReturnValue;
+    ExitError: ExitError;
+    ExitFatal: ExitFatal;
+    ExitReason: ExitReason;
+    ExitRevert: ExitRevert;
+    ExitSucceed: ExitSucceed;
+    ExplicitDisputeStatement: ExplicitDisputeStatement;
+    Exposure: Exposure;
+    ExtendedBalance: ExtendedBalance;
+    Extrinsic: Extrinsic;
+    ExtrinsicEra: ExtrinsicEra;
+    ExtrinsicMetadataLatest: ExtrinsicMetadataLatest;
+    ExtrinsicMetadataV11: ExtrinsicMetadataV11;
+    ExtrinsicMetadataV12: ExtrinsicMetadataV12;
+    ExtrinsicMetadataV13: ExtrinsicMetadataV13;
+    ExtrinsicMetadataV14: ExtrinsicMetadataV14;
+    ExtrinsicOrHash: ExtrinsicOrHash;
+    ExtrinsicPayload: ExtrinsicPayload;
+    ExtrinsicPayloadUnknown: ExtrinsicPayloadUnknown;
+    ExtrinsicPayloadV4: ExtrinsicPayloadV4;
+    ExtrinsicSignature: ExtrinsicSignature;
+    ExtrinsicSignatureV4: ExtrinsicSignatureV4;
+    ExtrinsicStatus: ExtrinsicStatus;
+    ExtrinsicsWeight: ExtrinsicsWeight;
+    ExtrinsicUnknown: ExtrinsicUnknown;
+    ExtrinsicV4: ExtrinsicV4;
+    FeeDetails: FeeDetails;
+    Fixed128: Fixed128;
+    Fixed64: Fixed64;
+    FixedI128: FixedI128;
+    FixedI64: FixedI64;
+    FixedU128: FixedU128;
+    FixedU64: FixedU64;
+    Forcing: Forcing;
+    ForkTreePendingChange: ForkTreePendingChange;
+    ForkTreePendingChangeNode: ForkTreePendingChangeNode;
+    FullIdentification: FullIdentification;
+    FunctionArgumentMetadataLatest: FunctionArgumentMetadataLatest;
+    FunctionArgumentMetadataV10: FunctionArgumentMetadataV10;
+    FunctionArgumentMetadataV11: FunctionArgumentMetadataV11;
+    FunctionArgumentMetadataV12: FunctionArgumentMetadataV12;
+    FunctionArgumentMetadataV13: FunctionArgumentMetadataV13;
+    FunctionArgumentMetadataV14: FunctionArgumentMetadataV14;
+    FunctionArgumentMetadataV9: FunctionArgumentMetadataV9;
+    FunctionMetadataLatest: FunctionMetadataLatest;
+    FunctionMetadataV10: FunctionMetadataV10;
+    FunctionMetadataV11: FunctionMetadataV11;
+    FunctionMetadataV12: FunctionMetadataV12;
+    FunctionMetadataV13: FunctionMetadataV13;
+    FunctionMetadataV14: FunctionMetadataV14;
+    FunctionMetadataV9: FunctionMetadataV9;
+    FundIndex: FundIndex;
+    FundInfo: FundInfo;
+    Fungibility: Fungibility;
+    FungibilityV0: FungibilityV0;
+    FungibilityV1: FungibilityV1;
+    FungibilityV2: FungibilityV2;
+    Gas: Gas;
+    GiltBid: GiltBid;
+    GlobalValidationData: GlobalValidationData;
+    GlobalValidationSchedule: GlobalValidationSchedule;
+    GrandpaCommit: GrandpaCommit;
+    GrandpaEquivocation: GrandpaEquivocation;
+    GrandpaEquivocationProof: GrandpaEquivocationProof;
+    GrandpaEquivocationValue: GrandpaEquivocationValue;
+    GrandpaJustification: GrandpaJustification;
+    GrandpaPrecommit: GrandpaPrecommit;
+    GrandpaPrevote: GrandpaPrevote;
+    GrandpaSignedPrecommit: GrandpaSignedPrecommit;
+    GroupIndex: GroupIndex;
+    H1024: H1024;
+    H128: H128;
+    H160: H160;
+    H2048: H2048;
+    H256: H256;
+    H32: H32;
+    H512: H512;
+    H64: H64;
+    Hash: Hash;
+    HeadData: HeadData;
+    Header: Header;
+    HeaderPartial: HeaderPartial;
+    Health: Health;
+    Heartbeat: Heartbeat;
+    HeartbeatTo244: HeartbeatTo244;
+    HostConfiguration: HostConfiguration;
+    HostFnWeights: HostFnWeights;
+    HostFnWeightsTo264: HostFnWeightsTo264;
+    HrmpChannel: HrmpChannel;
+    HrmpChannelId: HrmpChannelId;
+    HrmpOpenChannelRequest: HrmpOpenChannelRequest;
+    i128: i128;
+    I128: I128;
+    i16: i16;
+    I16: I16;
+    i256: i256;
+    I256: I256;
+    i32: i32;
+    I32: I32;
+    I32F32: I32F32;
+    i64: i64;
+    I64: I64;
+    i8: i8;
+    I8: I8;
+    IdentificationTuple: IdentificationTuple;
+    IdentityFields: IdentityFields;
+    IdentityInfo: IdentityInfo;
+    IdentityInfoAdditional: IdentityInfoAdditional;
+    IdentityInfoTo198: IdentityInfoTo198;
+    IdentityJudgement: IdentityJudgement;
+    ImmortalEra: ImmortalEra;
+    ImportedAux: ImportedAux;
+    InboundDownwardMessage: InboundDownwardMessage;
+    InboundHrmpMessage: InboundHrmpMessage;
+    InboundHrmpMessages: InboundHrmpMessages;
+    InboundLaneData: InboundLaneData;
+    InboundRelayer: InboundRelayer;
+    InboundStatus: InboundStatus;
+    IncludedBlocks: IncludedBlocks;
+    InclusionFee: InclusionFee;
+    IncomingParachain: IncomingParachain;
+    IncomingParachainDeploy: IncomingParachainDeploy;
+    IncomingParachainFixed: IncomingParachainFixed;
+    Index: Index;
+    IndicesLookupSource: IndicesLookupSource;
+    IndividualExposure: IndividualExposure;
+    InitializationData: InitializationData;
+    InstanceDetails: InstanceDetails;
+    InstanceId: InstanceId;
+    InstanceMetadata: InstanceMetadata;
+    InstantiateRequest: InstantiateRequest;
+    InstantiateRequestV1: InstantiateRequestV1;
+    InstantiateRequestV2: InstantiateRequestV2;
+    InstantiateReturnValue: InstantiateReturnValue;
+    InstantiateReturnValueOk: InstantiateReturnValueOk;
+    InstantiateReturnValueTo267: InstantiateReturnValueTo267;
+    InstructionV2: InstructionV2;
+    InstructionWeights: InstructionWeights;
+    InteriorMultiLocation: InteriorMultiLocation;
+    InvalidDisputeStatementKind: InvalidDisputeStatementKind;
+    InvalidTransaction: InvalidTransaction;
+    Json: Json;
+    Junction: Junction;
+    Junctions: Junctions;
+    JunctionsV1: JunctionsV1;
+    JunctionsV2: JunctionsV2;
+    JunctionV0: JunctionV0;
+    JunctionV1: JunctionV1;
+    JunctionV2: JunctionV2;
+    Justification: Justification;
+    JustificationNotification: JustificationNotification;
+    Justifications: Justifications;
+    Key: Key;
+    KeyOwnerProof: KeyOwnerProof;
+    Keys: Keys;
+    KeyType: KeyType;
+    KeyTypeId: KeyTypeId;
+    KeyValue: KeyValue;
+    KeyValueOption: KeyValueOption;
+    Kind: Kind;
+    LaneId: LaneId;
+    LastContribution: LastContribution;
+    LastRuntimeUpgradeInfo: LastRuntimeUpgradeInfo;
+    LeasePeriod: LeasePeriod;
+    LeasePeriodOf: LeasePeriodOf;
+    LegacyTransaction: LegacyTransaction;
+    Limits: Limits;
+    LimitsTo264: LimitsTo264;
+    LocalValidationData: LocalValidationData;
+    LockIdentifier: LockIdentifier;
+    LookupSource: LookupSource;
+    LookupTarget: LookupTarget;
+    LotteryConfig: LotteryConfig;
+    MaybeRandomness: MaybeRandomness;
+    MaybeVrf: MaybeVrf;
+    MemberCount: MemberCount;
+    MembershipProof: MembershipProof;
+    MessageData: MessageData;
+    MessageId: MessageId;
+    MessageIngestionType: MessageIngestionType;
+    MessageKey: MessageKey;
+    MessageNonce: MessageNonce;
+    MessageQueueChain: MessageQueueChain;
+    MessagesDeliveryProofOf: MessagesDeliveryProofOf;
+    MessagesProofOf: MessagesProofOf;
+    MessagingStateSnapshot: MessagingStateSnapshot;
+    MessagingStateSnapshotEgressEntry: MessagingStateSnapshotEgressEntry;
+    MetadataAll: MetadataAll;
+    MetadataLatest: MetadataLatest;
+    MetadataV10: MetadataV10;
+    MetadataV11: MetadataV11;
+    MetadataV12: MetadataV12;
+    MetadataV13: MetadataV13;
+    MetadataV14: MetadataV14;
+    MetadataV9: MetadataV9;
+    MigrationStatusResult: MigrationStatusResult;
+    MmrLeafBatchProof: MmrLeafBatchProof;
+    MmrLeafProof: MmrLeafProof;
+    MmrRootHash: MmrRootHash;
+    ModuleConstantMetadataV10: ModuleConstantMetadataV10;
+    ModuleConstantMetadataV11: ModuleConstantMetadataV11;
+    ModuleConstantMetadataV12: ModuleConstantMetadataV12;
+    ModuleConstantMetadataV13: ModuleConstantMetadataV13;
+    ModuleConstantMetadataV9: ModuleConstantMetadataV9;
+    ModuleId: ModuleId;
+    ModuleMetadataV10: ModuleMetadataV10;
+    ModuleMetadataV11: ModuleMetadataV11;
+    ModuleMetadataV12: ModuleMetadataV12;
+    ModuleMetadataV13: ModuleMetadataV13;
+    ModuleMetadataV9: ModuleMetadataV9;
+    Moment: Moment;
+    MomentOf: MomentOf;
+    MoreAttestations: MoreAttestations;
+    MortalEra: MortalEra;
+    MultiAddress: MultiAddress;
+    MultiAsset: MultiAsset;
+    MultiAssetFilter: MultiAssetFilter;
+    MultiAssetFilterV1: MultiAssetFilterV1;
+    MultiAssetFilterV2: MultiAssetFilterV2;
+    MultiAssets: MultiAssets;
+    MultiAssetsV1: MultiAssetsV1;
+    MultiAssetsV2: MultiAssetsV2;
+    MultiAssetV0: MultiAssetV0;
+    MultiAssetV1: MultiAssetV1;
+    MultiAssetV2: MultiAssetV2;
+    MultiDisputeStatementSet: MultiDisputeStatementSet;
+    MultiLocation: MultiLocation;
+    MultiLocationV0: MultiLocationV0;
+    MultiLocationV1: MultiLocationV1;
+    MultiLocationV2: MultiLocationV2;
+    Multiplier: Multiplier;
+    Multisig: Multisig;
+    MultiSignature: MultiSignature;
+    MultiSigner: MultiSigner;
+    NetworkId: NetworkId;
+    NetworkState: NetworkState;
+    NetworkStatePeerset: NetworkStatePeerset;
+    NetworkStatePeersetInfo: NetworkStatePeersetInfo;
+    NewBidder: NewBidder;
+    NextAuthority: NextAuthority;
+    NextConfigDescriptor: NextConfigDescriptor;
+    NextConfigDescriptorV1: NextConfigDescriptorV1;
+    NodeRole: NodeRole;
+    Nominations: Nominations;
+    NominatorIndex: NominatorIndex;
+    NominatorIndexCompact: NominatorIndexCompact;
+    NotConnectedPeer: NotConnectedPeer;
+    Null: Null;
+    OffchainAccuracy: OffchainAccuracy;
+    OffchainAccuracyCompact: OffchainAccuracyCompact;
+    OffenceDetails: OffenceDetails;
+    Offender: Offender;
+    OpaqueCall: OpaqueCall;
+    OpaqueMultiaddr: OpaqueMultiaddr;
+    OpaqueNetworkState: OpaqueNetworkState;
+    OpaquePeerId: OpaquePeerId;
+    OpaqueTimeSlot: OpaqueTimeSlot;
+    OpenTip: OpenTip;
+    OpenTipFinderTo225: OpenTipFinderTo225;
+    OpenTipTip: OpenTipTip;
+    OpenTipTo225: OpenTipTo225;
+    OperatingMode: OperatingMode;
+    OptionBool: OptionBool;
+    Origin: Origin;
+    OriginCaller: OriginCaller;
+    OriginKindV0: OriginKindV0;
+    OriginKindV1: OriginKindV1;
+    OriginKindV2: OriginKindV2;
+    OutboundHrmpMessage: OutboundHrmpMessage;
+    OutboundLaneData: OutboundLaneData;
+    OutboundMessageFee: OutboundMessageFee;
+    OutboundPayload: OutboundPayload;
+    OutboundStatus: OutboundStatus;
+    Outcome: Outcome;
+    OverweightIndex: OverweightIndex;
+    Owner: Owner;
+    PageCounter: PageCounter;
+    PageIndexData: PageIndexData;
+    PalletCallMetadataLatest: PalletCallMetadataLatest;
+    PalletCallMetadataV14: PalletCallMetadataV14;
+    PalletConstantMetadataLatest: PalletConstantMetadataLatest;
+    PalletConstantMetadataV14: PalletConstantMetadataV14;
+    PalletErrorMetadataLatest: PalletErrorMetadataLatest;
+    PalletErrorMetadataV14: PalletErrorMetadataV14;
+    PalletEventMetadataLatest: PalletEventMetadataLatest;
+    PalletEventMetadataV14: PalletEventMetadataV14;
+    PalletId: PalletId;
+    PalletMetadataLatest: PalletMetadataLatest;
+    PalletMetadataV14: PalletMetadataV14;
+    PalletsOrigin: PalletsOrigin;
+    PalletStorageMetadataLatest: PalletStorageMetadataLatest;
+    PalletStorageMetadataV14: PalletStorageMetadataV14;
+    PalletVersion: PalletVersion;
+    ParachainDispatchOrigin: ParachainDispatchOrigin;
+    ParachainInherentData: ParachainInherentData;
+    ParachainProposal: ParachainProposal;
+    ParachainsInherentData: ParachainsInherentData;
+    ParaGenesisArgs: ParaGenesisArgs;
+    ParaId: ParaId;
+    ParaInfo: ParaInfo;
+    ParaLifecycle: ParaLifecycle;
+    Parameter: Parameter;
+    ParaPastCodeMeta: ParaPastCodeMeta;
+    ParaScheduling: ParaScheduling;
+    ParathreadClaim: ParathreadClaim;
+    ParathreadClaimQueue: ParathreadClaimQueue;
+    ParathreadEntry: ParathreadEntry;
+    ParaValidatorIndex: ParaValidatorIndex;
+    Pays: Pays;
+    Peer: Peer;
+    PeerEndpoint: PeerEndpoint;
+    PeerEndpointAddr: PeerEndpointAddr;
+    PeerInfo: PeerInfo;
+    PeerPing: PeerPing;
+    PendingChange: PendingChange;
+    PendingPause: PendingPause;
+    PendingResume: PendingResume;
+    Perbill: Perbill;
+    Percent: Percent;
+    PerDispatchClassU32: PerDispatchClassU32;
+    PerDispatchClassWeight: PerDispatchClassWeight;
+    PerDispatchClassWeightsPerClass: PerDispatchClassWeightsPerClass;
+    Period: Period;
+    Permill: Permill;
+    PermissionLatest: PermissionLatest;
+    PermissionsV1: PermissionsV1;
+    PermissionVersions: PermissionVersions;
+    Perquintill: Perquintill;
+    PersistedValidationData: PersistedValidationData;
+    PerU16: PerU16;
+    Phantom: Phantom;
+    PhantomData: PhantomData;
+    Phase: Phase;
+    PhragmenScore: PhragmenScore;
+    Points: Points;
+    PortableType: PortableType;
+    PortableTypeV14: PortableTypeV14;
+    Precommits: Precommits;
+    PrefabWasmModule: PrefabWasmModule;
+    PrefixedStorageKey: PrefixedStorageKey;
+    PreimageStatus: PreimageStatus;
+    PreimageStatusAvailable: PreimageStatusAvailable;
+    PreRuntime: PreRuntime;
+    Prevotes: Prevotes;
+    Priority: Priority;
+    PriorLock: PriorLock;
+    PropIndex: PropIndex;
+    Proposal: Proposal;
+    ProposalIndex: ProposalIndex;
+    ProxyAnnouncement: ProxyAnnouncement;
+    ProxyDefinition: ProxyDefinition;
+    ProxyState: ProxyState;
+    ProxyType: ProxyType;
+    QueryId: QueryId;
+    QueryStatus: QueryStatus;
+    QueueConfigData: QueueConfigData;
+    QueuedParathread: QueuedParathread;
+    Randomness: Randomness;
+    Raw: Raw;
+    RawAuraPreDigest: RawAuraPreDigest;
+    RawBabePreDigest: RawBabePreDigest;
+    RawBabePreDigestCompat: RawBabePreDigestCompat;
+    RawBabePreDigestPrimary: RawBabePreDigestPrimary;
+    RawBabePreDigestPrimaryTo159: RawBabePreDigestPrimaryTo159;
+    RawBabePreDigestSecondaryPlain: RawBabePreDigestSecondaryPlain;
+    RawBabePreDigestSecondaryTo159: RawBabePreDigestSecondaryTo159;
+    RawBabePreDigestSecondaryVRF: RawBabePreDigestSecondaryVRF;
+    RawBabePreDigestTo159: RawBabePreDigestTo159;
+    RawOrigin: RawOrigin;
+    RawSolution: RawSolution;
+    RawSolutionTo265: RawSolutionTo265;
+    RawSolutionWith16: RawSolutionWith16;
+    RawSolutionWith24: RawSolutionWith24;
+    RawVRFOutput: RawVRFOutput;
+    ReadProof: ReadProof;
+    ReadySolution: ReadySolution;
+    Reasons: Reasons;
+    RecoveryConfig: RecoveryConfig;
+    RefCount: RefCount;
+    RefCountTo259: RefCountTo259;
+    ReferendumIndex: ReferendumIndex;
+    ReferendumInfo: ReferendumInfo;
+    ReferendumInfoFinished: ReferendumInfoFinished;
+    ReferendumInfoTo239: ReferendumInfoTo239;
+    ReferendumStatus: ReferendumStatus;
+    RegisteredParachainInfo: RegisteredParachainInfo;
+    RegistrarIndex: RegistrarIndex;
+    RegistrarInfo: RegistrarInfo;
+    Registration: Registration;
+    RegistrationJudgement: RegistrationJudgement;
+    RegistrationTo198: RegistrationTo198;
+    RelayBlockNumber: RelayBlockNumber;
+    RelayChainBlockNumber: RelayChainBlockNumber;
+    RelayChainHash: RelayChainHash;
+    RelayerId: RelayerId;
+    RelayHash: RelayHash;
+    Releases: Releases;
+    Remark: Remark;
+    Renouncing: Renouncing;
+    RentProjection: RentProjection;
+    ReplacementTimes: ReplacementTimes;
+    ReportedRoundStates: ReportedRoundStates;
+    Reporter: Reporter;
+    ReportIdOf: ReportIdOf;
+    ReserveData: ReserveData;
+    ReserveIdentifier: ReserveIdentifier;
+    Response: Response;
+    ResponseV0: ResponseV0;
+    ResponseV1: ResponseV1;
+    ResponseV2: ResponseV2;
+    ResponseV2Error: ResponseV2Error;
+    ResponseV2Result: ResponseV2Result;
+    Retriable: Retriable;
+    RewardDestination: RewardDestination;
+    RewardPoint: RewardPoint;
+    RoundSnapshot: RoundSnapshot;
+    RoundState: RoundState;
+    RpcMethods: RpcMethods;
+    RuntimeDbWeight: RuntimeDbWeight;
+    RuntimeDispatchInfo: RuntimeDispatchInfo;
+    RuntimeVersion: RuntimeVersion;
+    RuntimeVersionApi: RuntimeVersionApi;
+    RuntimeVersionPartial: RuntimeVersionPartial;
+    Schedule: Schedule;
+    Scheduled: Scheduled;
+    ScheduledTo254: ScheduledTo254;
+    SchedulePeriod: SchedulePeriod;
+    SchedulePriority: SchedulePriority;
+    ScheduleTo212: ScheduleTo212;
+    ScheduleTo258: ScheduleTo258;
+    ScheduleTo264: ScheduleTo264;
+    Scheduling: Scheduling;
+    Seal: Seal;
+    SealV0: SealV0;
+    SeatHolder: SeatHolder;
+    SeedOf: SeedOf;
+    ServiceQuality: ServiceQuality;
+    SessionIndex: SessionIndex;
+    SessionInfo: SessionInfo;
+    SessionInfoValidatorGroup: SessionInfoValidatorGroup;
+    SessionKeys1: SessionKeys1;
+    SessionKeys10: SessionKeys10;
+    SessionKeys10B: SessionKeys10B;
+    SessionKeys2: SessionKeys2;
+    SessionKeys3: SessionKeys3;
+    SessionKeys4: SessionKeys4;
+    SessionKeys5: SessionKeys5;
+    SessionKeys6: SessionKeys6;
+    SessionKeys6B: SessionKeys6B;
+    SessionKeys7: SessionKeys7;
+    SessionKeys7B: SessionKeys7B;
+    SessionKeys8: SessionKeys8;
+    SessionKeys8B: SessionKeys8B;
+    SessionKeys9: SessionKeys9;
+    SessionKeys9B: SessionKeys9B;
+    SetId: SetId;
+    SetIndex: SetIndex;
+    Si0Field: Si0Field;
+    Si0LookupTypeId: Si0LookupTypeId;
+    Si0Path: Si0Path;
+    Si0Type: Si0Type;
+    Si0TypeDef: Si0TypeDef;
+    Si0TypeDefArray: Si0TypeDefArray;
+    Si0TypeDefBitSequence: Si0TypeDefBitSequence;
+    Si0TypeDefCompact: Si0TypeDefCompact;
+    Si0TypeDefComposite: Si0TypeDefComposite;
+    Si0TypeDefPhantom: Si0TypeDefPhantom;
+    Si0TypeDefPrimitive: Si0TypeDefPrimitive;
+    Si0TypeDefSequence: Si0TypeDefSequence;
+    Si0TypeDefTuple: Si0TypeDefTuple;
+    Si0TypeDefVariant: Si0TypeDefVariant;
+    Si0TypeParameter: Si0TypeParameter;
+    Si0Variant: Si0Variant;
+    Si1Field: Si1Field;
+    Si1LookupTypeId: Si1LookupTypeId;
+    Si1Path: Si1Path;
+    Si1Type: Si1Type;
+    Si1TypeDef: Si1TypeDef;
+    Si1TypeDefArray: Si1TypeDefArray;
+    Si1TypeDefBitSequence: Si1TypeDefBitSequence;
+    Si1TypeDefCompact: Si1TypeDefCompact;
+    Si1TypeDefComposite: Si1TypeDefComposite;
+    Si1TypeDefPrimitive: Si1TypeDefPrimitive;
+    Si1TypeDefSequence: Si1TypeDefSequence;
+    Si1TypeDefTuple: Si1TypeDefTuple;
+    Si1TypeDefVariant: Si1TypeDefVariant;
+    Si1TypeParameter: Si1TypeParameter;
+    Si1Variant: Si1Variant;
+    SiField: SiField;
+    Signature: Signature;
+    SignedAvailabilityBitfield: SignedAvailabilityBitfield;
+    SignedAvailabilityBitfields: SignedAvailabilityBitfields;
+    SignedBlock: SignedBlock;
+    SignedBlockWithJustification: SignedBlockWithJustification;
+    SignedBlockWithJustifications: SignedBlockWithJustifications;
+    SignedExtensionMetadataLatest: SignedExtensionMetadataLatest;
+    SignedExtensionMetadataV14: SignedExtensionMetadataV14;
+    SignedSubmission: SignedSubmission;
+    SignedSubmissionOf: SignedSubmissionOf;
+    SignedSubmissionTo276: SignedSubmissionTo276;
+    SignerPayload: SignerPayload;
+    SigningContext: SigningContext;
+    SiLookupTypeId: SiLookupTypeId;
+    SiPath: SiPath;
+    SiType: SiType;
+    SiTypeDef: SiTypeDef;
+    SiTypeDefArray: SiTypeDefArray;
+    SiTypeDefBitSequence: SiTypeDefBitSequence;
+    SiTypeDefCompact: SiTypeDefCompact;
+    SiTypeDefComposite: SiTypeDefComposite;
+    SiTypeDefPrimitive: SiTypeDefPrimitive;
+    SiTypeDefSequence: SiTypeDefSequence;
+    SiTypeDefTuple: SiTypeDefTuple;
+    SiTypeDefVariant: SiTypeDefVariant;
+    SiTypeParameter: SiTypeParameter;
+    SiVariant: SiVariant;
+    SlashingSpans: SlashingSpans;
+    SlashingSpansTo204: SlashingSpansTo204;
+    SlashJournalEntry: SlashJournalEntry;
+    Slot: Slot;
+    SlotNumber: SlotNumber;
+    SlotRange: SlotRange;
+    SlotRange10: SlotRange10;
+    SocietyJudgement: SocietyJudgement;
+    SocietyVote: SocietyVote;
+    SolutionOrSnapshotSize: SolutionOrSnapshotSize;
+    SolutionSupport: SolutionSupport;
+    SolutionSupports: SolutionSupports;
+    SpanIndex: SpanIndex;
+    SpanRecord: SpanRecord;
+    SpecVersion: SpecVersion;
+    Sr25519Signature: Sr25519Signature;
+    StakingLedger: StakingLedger;
+    StakingLedgerTo223: StakingLedgerTo223;
+    StakingLedgerTo240: StakingLedgerTo240;
+    Statement: Statement;
+    StatementKind: StatementKind;
+    StorageChangeSet: StorageChangeSet;
+    StorageData: StorageData;
+    StorageDeposit: StorageDeposit;
+    StorageEntryMetadataLatest: StorageEntryMetadataLatest;
+    StorageEntryMetadataV10: StorageEntryMetadataV10;
+    StorageEntryMetadataV11: StorageEntryMetadataV11;
+    StorageEntryMetadataV12: StorageEntryMetadataV12;
+    StorageEntryMetadataV13: StorageEntryMetadataV13;
+    StorageEntryMetadataV14: StorageEntryMetadataV14;
+    StorageEntryMetadataV9: StorageEntryMetadataV9;
+    StorageEntryModifierLatest: StorageEntryModifierLatest;
+    StorageEntryModifierV10: StorageEntryModifierV10;
+    StorageEntryModifierV11: StorageEntryModifierV11;
+    StorageEntryModifierV12: StorageEntryModifierV12;
+    StorageEntryModifierV13: StorageEntryModifierV13;
+    StorageEntryModifierV14: StorageEntryModifierV14;
+    StorageEntryModifierV9: StorageEntryModifierV9;
+    StorageEntryTypeLatest: StorageEntryTypeLatest;
+    StorageEntryTypeV10: StorageEntryTypeV10;
+    StorageEntryTypeV11: StorageEntryTypeV11;
+    StorageEntryTypeV12: StorageEntryTypeV12;
+    StorageEntryTypeV13: StorageEntryTypeV13;
+    StorageEntryTypeV14: StorageEntryTypeV14;
+    StorageEntryTypeV9: StorageEntryTypeV9;
+    StorageHasher: StorageHasher;
+    StorageHasherV10: StorageHasherV10;
+    StorageHasherV11: StorageHasherV11;
+    StorageHasherV12: StorageHasherV12;
+    StorageHasherV13: StorageHasherV13;
+    StorageHasherV14: StorageHasherV14;
+    StorageHasherV9: StorageHasherV9;
+    StorageKey: StorageKey;
+    StorageKind: StorageKind;
+    StorageMetadataV10: StorageMetadataV10;
+    StorageMetadataV11: StorageMetadataV11;
+    StorageMetadataV12: StorageMetadataV12;
+    StorageMetadataV13: StorageMetadataV13;
+    StorageMetadataV9: StorageMetadataV9;
+    StorageProof: StorageProof;
+    StoredPendingChange: StoredPendingChange;
+    StoredState: StoredState;
+    StrikeCount: StrikeCount;
+    SubId: SubId;
+    SubmissionIndicesOf: SubmissionIndicesOf;
+    Supports: Supports;
+    SyncState: SyncState;
+    SystemInherentData: SystemInherentData;
+    SystemOrigin: SystemOrigin;
+    Tally: Tally;
+    TaskAddress: TaskAddress;
+    TAssetBalance: TAssetBalance;
+    TAssetDepositBalance: TAssetDepositBalance;
+    Text: Text;
+    Timepoint: Timepoint;
+    TokenError: TokenError;
+    TombstoneContractInfo: TombstoneContractInfo;
+    TraceBlockResponse: TraceBlockResponse;
+    TraceError: TraceError;
+    TransactionalError: TransactionalError;
+    TransactionInfo: TransactionInfo;
+    TransactionPriority: TransactionPriority;
+    TransactionStorageProof: TransactionStorageProof;
+    TransactionV0: TransactionV0;
+    TransactionV1: TransactionV1;
+    TransactionV2: TransactionV2;
+    TransactionValidityError: TransactionValidityError;
+    TransientValidationData: TransientValidationData;
+    TreasuryProposal: TreasuryProposal;
+    TrieId: TrieId;
+    TrieIndex: TrieIndex;
+    Type: Type;
+    u128: u128;
+    U128: U128;
+    u16: u16;
+    U16: U16;
+    u256: u256;
+    U256: U256;
+    u32: u32;
+    U32: U32;
+    U32F32: U32F32;
+    u64: u64;
+    U64: U64;
+    u8: u8;
+    U8: U8;
+    UnappliedSlash: UnappliedSlash;
+    UnappliedSlashOther: UnappliedSlashOther;
+    UncleEntryItem: UncleEntryItem;
+    UnknownTransaction: UnknownTransaction;
+    UnlockChunk: UnlockChunk;
+    UnrewardedRelayer: UnrewardedRelayer;
+    UnrewardedRelayersState: UnrewardedRelayersState;
+    UpgradeGoAhead: UpgradeGoAhead;
+    UpgradeRestriction: UpgradeRestriction;
+    UpwardMessage: UpwardMessage;
+    usize: usize;
+    USize: USize;
+    ValidationCode: ValidationCode;
+    ValidationCodeHash: ValidationCodeHash;
+    ValidationData: ValidationData;
+    ValidationDataType: ValidationDataType;
+    ValidationFunctionParams: ValidationFunctionParams;
+    ValidatorCount: ValidatorCount;
+    ValidatorId: ValidatorId;
+    ValidatorIdOf: ValidatorIdOf;
+    ValidatorIndex: ValidatorIndex;
+    ValidatorIndexCompact: ValidatorIndexCompact;
+    ValidatorPrefs: ValidatorPrefs;
+    ValidatorPrefsTo145: ValidatorPrefsTo145;
+    ValidatorPrefsTo196: ValidatorPrefsTo196;
+    ValidatorPrefsWithBlocked: ValidatorPrefsWithBlocked;
+    ValidatorPrefsWithCommission: ValidatorPrefsWithCommission;
+    ValidatorSetId: ValidatorSetId;
+    ValidatorSignature: ValidatorSignature;
+    ValidDisputeStatementKind: ValidDisputeStatementKind;
+    ValidityAttestation: ValidityAttestation;
+    VecInboundHrmpMessage: VecInboundHrmpMessage;
+    VersionedMultiAsset: VersionedMultiAsset;
+    VersionedMultiAssets: VersionedMultiAssets;
+    VersionedMultiLocation: VersionedMultiLocation;
+    VersionedResponse: VersionedResponse;
+    VersionedXcm: VersionedXcm;
+    VersionMigrationStage: VersionMigrationStage;
+    VestingInfo: VestingInfo;
+    VestingSchedule: VestingSchedule;
+    Vote: Vote;
+    VoteIndex: VoteIndex;
+    Voter: Voter;
+    VoterInfo: VoterInfo;
+    Votes: Votes;
+    VotesTo230: VotesTo230;
+    VoteThreshold: VoteThreshold;
+    VoteWeight: VoteWeight;
+    Voting: Voting;
+    VotingDelegating: VotingDelegating;
+    VotingDirect: VotingDirect;
+    VotingDirectVote: VotingDirectVote;
+    VouchingStatus: VouchingStatus;
+    VrfData: VrfData;
+    VrfOutput: VrfOutput;
+    VrfProof: VrfProof;
+    Weight: Weight;
+    WeightLimitV2: WeightLimitV2;
+    WeightMultiplier: WeightMultiplier;
+    WeightPerClass: WeightPerClass;
+    WeightToFeeCoefficient: WeightToFeeCoefficient;
+    WildFungibility: WildFungibility;
+    WildFungibilityV0: WildFungibilityV0;
+    WildFungibilityV1: WildFungibilityV1;
+    WildFungibilityV2: WildFungibilityV2;
+    WildMultiAsset: WildMultiAsset;
+    WildMultiAssetV1: WildMultiAssetV1;
+    WildMultiAssetV2: WildMultiAssetV2;
+    WinnersData: WinnersData;
+    WinnersData10: WinnersData10;
+    WinnersDataTuple: WinnersDataTuple;
+    WinnersDataTuple10: WinnersDataTuple10;
+    WinningData: WinningData;
+    WinningData10: WinningData10;
+    WinningDataEntry: WinningDataEntry;
+    WithdrawReasons: WithdrawReasons;
+    Xcm: Xcm;
+    XcmAssetId: XcmAssetId;
+    XcmError: XcmError;
+    XcmErrorV0: XcmErrorV0;
+    XcmErrorV1: XcmErrorV1;
+    XcmErrorV2: XcmErrorV2;
+    XcmOrder: XcmOrder;
+    XcmOrderV0: XcmOrderV0;
+    XcmOrderV1: XcmOrderV1;
+    XcmOrderV2: XcmOrderV2;
+    XcmOrigin: XcmOrigin;
+    XcmOriginKind: XcmOriginKind;
+    XcmpMessageFormat: XcmpMessageFormat;
+    XcmV0: XcmV0;
+    XcmV1: XcmV1;
+    XcmV2: XcmV2;
+    XcmVersion: XcmVersion;
+  } // InterfaceTypes
+} // declare module
diff --git a/node_modules/@joystream/types/types/src/augment/lookup.ts b/node_modules/@joystream/types/types/src/augment/lookup.ts
new file mode 100644
index 0000000..4e8b5cf
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/lookup.ts
@@ -0,0 +1,4627 @@
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+
+/* eslint-disable sort-keys */
+
+export default {
+  /**
+   * Lookup3: frame_system::AccountInfo<Index, pallet_balances::AccountData<Balance>>
+   **/
+  FrameSystemAccountInfo: {
+    nonce: 'u32',
+    consumers: 'u32',
+    providers: 'u32',
+    sufficients: 'u32',
+    data: 'PalletBalancesAccountData'
+  },
+  /**
+   * Lookup5: pallet_balances::AccountData<Balance>
+   **/
+  PalletBalancesAccountData: {
+    free: 'u128',
+    reserved: 'u128',
+    miscFrozen: 'u128',
+    feeFrozen: 'u128'
+  },
+  /**
+   * Lookup7: frame_support::weights::PerDispatchClass<T>
+   **/
+  FrameSupportWeightsPerDispatchClassU64: {
+    normal: 'u64',
+    operational: 'u64',
+    mandatory: 'u64'
+  },
+  /**
+   * Lookup11: sp_runtime::generic::digest::Digest
+   **/
+  SpRuntimeDigest: {
+    logs: 'Vec<SpRuntimeDigestDigestItem>'
+  },
+  /**
+   * Lookup13: sp_runtime::generic::digest::DigestItem
+   **/
+  SpRuntimeDigestDigestItem: {
+    _enum: {
+      Other: 'Bytes',
+      __Unused1: 'Null',
+      __Unused2: 'Null',
+      __Unused3: 'Null',
+      Consensus: '([u8;4],Bytes)',
+      Seal: '([u8;4],Bytes)',
+      PreRuntime: '([u8;4],Bytes)',
+      __Unused7: 'Null',
+      RuntimeEnvironmentUpdated: 'Null'
+    }
+  },
+  /**
+   * Lookup16: frame_system::EventRecord<joystream_node_runtime::Event, primitive_types::H256>
+   **/
+  FrameSystemEventRecord: {
+    phase: 'FrameSystemPhase',
+    event: 'Event',
+    topics: 'Vec<H256>'
+  },
+  /**
+   * Lookup18: frame_system::pallet::Event<T>
+   **/
+  FrameSystemEvent: {
+    _enum: {
+      ExtrinsicSuccess: {
+        dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+      },
+      ExtrinsicFailed: {
+        dispatchError: 'SpRuntimeDispatchError',
+        dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+      },
+      CodeUpdated: 'Null',
+      NewAccount: {
+        account: 'AccountId32',
+      },
+      KilledAccount: {
+        account: 'AccountId32',
+      },
+      Remarked: {
+        _alias: {
+          hash_: 'hash',
+        },
+        sender: 'AccountId32',
+        hash_: 'H256'
+      }
+    }
+  },
+  /**
+   * Lookup19: frame_support::weights::DispatchInfo
+   **/
+  FrameSupportWeightsDispatchInfo: {
+    weight: 'u64',
+    class: 'FrameSupportWeightsDispatchClass',
+    paysFee: 'FrameSupportWeightsPays'
+  },
+  /**
+   * Lookup20: frame_support::weights::DispatchClass
+   **/
+  FrameSupportWeightsDispatchClass: {
+    _enum: ['Normal', 'Operational', 'Mandatory']
+  },
+  /**
+   * Lookup21: frame_support::weights::Pays
+   **/
+  FrameSupportWeightsPays: {
+    _enum: ['Yes', 'No']
+  },
+  /**
+   * Lookup22: sp_runtime::DispatchError
+   **/
+  SpRuntimeDispatchError: {
+    _enum: {
+      Other: 'Null',
+      CannotLookup: 'Null',
+      BadOrigin: 'Null',
+      Module: 'SpRuntimeModuleError',
+      ConsumerRemaining: 'Null',
+      NoProviders: 'Null',
+      TooManyConsumers: 'Null',
+      Token: 'SpRuntimeTokenError',
+      Arithmetic: 'SpRuntimeArithmeticError',
+      Transactional: 'SpRuntimeTransactionalError'
+    }
+  },
+  /**
+   * Lookup23: sp_runtime::ModuleError
+   **/
+  SpRuntimeModuleError: {
+    index: 'u8',
+    error: '[u8;4]'
+  },
+  /**
+   * Lookup24: sp_runtime::TokenError
+   **/
+  SpRuntimeTokenError: {
+    _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', 'Unsupported']
+  },
+  /**
+   * Lookup25: sp_runtime::ArithmeticError
+   **/
+  SpRuntimeArithmeticError: {
+    _enum: ['Underflow', 'Overflow', 'DivisionByZero']
+  },
+  /**
+   * Lookup26: sp_runtime::TransactionalError
+   **/
+  SpRuntimeTransactionalError: {
+    _enum: ['LimitReached', 'NoLayer']
+  },
+  /**
+   * Lookup27: pallet_utility::pallet::Event
+   **/
+  PalletUtilityEvent: {
+    _enum: {
+      BatchInterrupted: {
+        index: 'u32',
+        error: 'SpRuntimeDispatchError',
+      },
+      BatchCompleted: 'Null',
+      BatchCompletedWithErrors: 'Null',
+      ItemCompleted: 'Null',
+      ItemFailed: {
+        error: 'SpRuntimeDispatchError',
+      },
+      DispatchedAs: {
+        result: 'Result<Null, SpRuntimeDispatchError>'
+      }
+    }
+  },
+  /**
+   * Lookup30: pallet_balances::pallet::Event<T, I>
+   **/
+  PalletBalancesEvent: {
+    _enum: {
+      Endowed: {
+        account: 'AccountId32',
+        freeBalance: 'u128',
+      },
+      DustLost: {
+        account: 'AccountId32',
+        amount: 'u128',
+      },
+      Transfer: {
+        from: 'AccountId32',
+        to: 'AccountId32',
+        amount: 'u128',
+      },
+      BalanceSet: {
+        who: 'AccountId32',
+        free: 'u128',
+        reserved: 'u128',
+      },
+      Reserved: {
+        who: 'AccountId32',
+        amount: 'u128',
+      },
+      Unreserved: {
+        who: 'AccountId32',
+        amount: 'u128',
+      },
+      ReserveRepatriated: {
+        from: 'AccountId32',
+        to: 'AccountId32',
+        amount: 'u128',
+        destinationStatus: 'FrameSupportTokensMiscBalanceStatus',
+      },
+      Deposit: {
+        who: 'AccountId32',
+        amount: 'u128',
+      },
+      Withdraw: {
+        who: 'AccountId32',
+        amount: 'u128',
+      },
+      Slashed: {
+        who: 'AccountId32',
+        amount: 'u128'
+      }
+    }
+  },
+  /**
+   * Lookup31: frame_support::traits::tokens::misc::BalanceStatus
+   **/
+  FrameSupportTokensMiscBalanceStatus: {
+    _enum: ['Free', 'Reserved']
+  },
+  /**
+   * Lookup32: pallet_election_provider_multi_phase::pallet::Event<T>
+   **/
+  PalletElectionProviderMultiPhaseEvent: {
+    _enum: {
+      SolutionStored: {
+        electionCompute: 'PalletElectionProviderMultiPhaseElectionCompute',
+        prevEjected: 'bool',
+      },
+      ElectionFinalized: {
+        electionCompute: 'Option<PalletElectionProviderMultiPhaseElectionCompute>',
+      },
+      Rewarded: {
+        account: 'AccountId32',
+        value: 'u128',
+      },
+      Slashed: {
+        account: 'AccountId32',
+        value: 'u128',
+      },
+      SignedPhaseStarted: {
+        round: 'u32',
+      },
+      UnsignedPhaseStarted: {
+        round: 'u32'
+      }
+    }
+  },
+  /**
+   * Lookup33: pallet_election_provider_multi_phase::ElectionCompute
+   **/
+  PalletElectionProviderMultiPhaseElectionCompute: {
+    _enum: ['OnChain', 'Signed', 'Unsigned', 'Fallback', 'Emergency']
+  },
+  /**
+   * Lookup36: pallet_staking::pallet::pallet::Event<T>
+   **/
+  PalletStakingPalletEvent: {
+    _enum: {
+      EraPaid: '(u32,u128,u128)',
+      Rewarded: '(AccountId32,u128)',
+      Slashed: '(AccountId32,u128)',
+      OldSlashingReportDiscarded: 'u32',
+      StakersElected: 'Null',
+      Bonded: '(AccountId32,u128)',
+      Unbonded: '(AccountId32,u128)',
+      Withdrawn: '(AccountId32,u128)',
+      Kicked: '(AccountId32,AccountId32)',
+      StakingElectionFailed: 'Null',
+      Chilled: 'AccountId32',
+      PayoutStarted: '(u32,AccountId32)',
+      ValidatorPrefsSet: '(AccountId32,PalletStakingValidatorPrefs)'
+    }
+  },
+  /**
+   * Lookup37: pallet_staking::ValidatorPrefs
+   **/
+  PalletStakingValidatorPrefs: {
+    commission: 'Compact<Perbill>',
+    blocked: 'bool'
+  },
+  /**
+   * Lookup40: pallet_session::pallet::Event
+   **/
+  PalletSessionEvent: {
+    _enum: {
+      NewSession: {
+        sessionIndex: 'u32'
+      }
+    }
+  },
+  /**
+   * Lookup41: pallet_grandpa::pallet::Event
+   **/
+  PalletGrandpaEvent: {
+    _enum: {
+      NewAuthorities: {
+        authoritySet: 'Vec<(SpFinalityGrandpaAppPublic,u64)>',
+      },
+      Paused: 'Null',
+      Resumed: 'Null'
+    }
+  },
+  /**
+   * Lookup44: sp_finality_grandpa::app::Public
+   **/
+  SpFinalityGrandpaAppPublic: 'SpCoreEd25519Public',
+  /**
+   * Lookup45: sp_core::ed25519::Public
+   **/
+  SpCoreEd25519Public: '[u8;32]',
+  /**
+   * Lookup46: pallet_im_online::pallet::Event<T>
+   **/
+  PalletImOnlineEvent: {
+    _enum: {
+      HeartbeatReceived: {
+        authorityId: 'PalletImOnlineSr25519AppSr25519Public',
+      },
+      AllGood: 'Null',
+      SomeOffline: {
+        offline: 'Vec<(AccountId32,PalletStakingExposure)>'
+      }
+    }
+  },
+  /**
+   * Lookup47: pallet_im_online::sr25519::app_sr25519::Public
+   **/
+  PalletImOnlineSr25519AppSr25519Public: 'SpCoreSr25519Public',
+  /**
+   * Lookup48: sp_core::sr25519::Public
+   **/
+  SpCoreSr25519Public: '[u8;32]',
+  /**
+   * Lookup51: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
+   **/
+  PalletStakingExposure: {
+    total: 'Compact<u128>',
+    own: 'Compact<u128>',
+    others: 'Vec<PalletStakingIndividualExposure>'
+  },
+  /**
+   * Lookup54: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
+   **/
+  PalletStakingIndividualExposure: {
+    who: 'AccountId32',
+    value: 'Compact<u128>'
+  },
+  /**
+   * Lookup55: pallet_offences::pallet::Event
+   **/
+  PalletOffencesEvent: {
+    _enum: {
+      Offence: {
+        kind: '[u8;16]',
+        timeslot: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup57: pallet_bags_list::pallet::Event<T, I>
+   **/
+  PalletBagsListEvent: {
+    _enum: {
+      Rebagged: {
+        who: 'AccountId32',
+        from: 'u64',
+        to: 'u64',
+      },
+      ScoreUpdated: {
+        who: 'AccountId32',
+        newScore: 'u64'
+      }
+    }
+  },
+  /**
+   * Lookup58: pallet_vesting::pallet::Event<T>
+   **/
+  PalletVestingEvent: {
+    _enum: {
+      VestingUpdated: {
+        account: 'AccountId32',
+        unvested: 'u128',
+      },
+      VestingCompleted: {
+        account: 'AccountId32'
+      }
+    }
+  },
+  /**
+   * Lookup59: pallet_multisig::pallet::Event<T>
+   **/
+  PalletMultisigEvent: {
+    _enum: {
+      NewMultisig: {
+        approving: 'AccountId32',
+        multisig: 'AccountId32',
+        callHash: '[u8;32]',
+      },
+      MultisigApproval: {
+        approving: 'AccountId32',
+        timepoint: 'PalletMultisigTimepoint',
+        multisig: 'AccountId32',
+        callHash: '[u8;32]',
+      },
+      MultisigExecuted: {
+        approving: 'AccountId32',
+        timepoint: 'PalletMultisigTimepoint',
+        multisig: 'AccountId32',
+        callHash: '[u8;32]',
+        result: 'Result<Null, SpRuntimeDispatchError>',
+      },
+      MultisigCancelled: {
+        cancelling: 'AccountId32',
+        timepoint: 'PalletMultisigTimepoint',
+        multisig: 'AccountId32',
+        callHash: '[u8;32]'
+      }
+    }
+  },
+  /**
+   * Lookup60: pallet_multisig::Timepoint<BlockNumber>
+   **/
+  PalletMultisigTimepoint: {
+    height: 'u32',
+    index: 'u32'
+  },
+  /**
+   * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+   **/
+  PalletCouncilRawEvent: {
+    _enum: {
+      AnnouncingPeriodStarted: 'u32',
+      NotEnoughCandidates: 'u32',
+      VotingPeriodStarted: 'u32',
+      NewCandidate: '(u64,AccountId32,AccountId32,u128)',
+      NewCouncilElected: '(Vec<u64>,u32)',
+      NewCouncilNotElected: 'u32',
+      CandidacyStakeRelease: 'u64',
+      CandidacyWithdraw: 'u64',
+      CandidacyNoteSet: '(u64,Bytes)',
+      RewardPayment: '(u64,AccountId32,u128,u128)',
+      BudgetBalanceSet: 'u128',
+      BudgetRefill: 'u128',
+      BudgetRefillPlanned: 'u32',
+      BudgetIncrementUpdated: 'u128',
+      CouncilorRewardUpdated: 'u128',
+      RequestFunded: '(AccountId32,u128)',
+      CouncilBudgetFunded: '(u64,u128,Bytes)',
+      CouncilorRemarked: '(u64,Bytes)',
+      CandidateRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup63: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+   **/
+  PalletReferendumRawEvent: {
+    _enum: {
+      ReferendumStarted: '(u32,u32)',
+      ReferendumStartedForcefully: '(u32,u32)',
+      RevealingStageStarted: 'u32',
+      ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
+      VoteCast: '(AccountId32,H256,u128)',
+      VoteRevealed: '(AccountId32,u64,Bytes)',
+      StakeReleased: 'AccountId32',
+      AccountOptedOutOfVoting: 'AccountId32'
+    }
+  },
+  /**
+   * Lookup64: pallet_referendum::Instance1
+   **/
+  PalletReferendumInstance1: 'Null',
+  /**
+   * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
+   **/
+  PalletReferendumOptionResult: {
+    optionId: 'u64',
+    votePower: 'u128'
+  },
+  /**
+   * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+   **/
+  PalletMembershipRawEvent: {
+    _enum: {
+      MemberInvited: '(u64,PalletMembershipInviteMembershipParameters,u128)',
+      MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
+      MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
+      MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
+      MemberAccountsUpdated: '(u64,Option<AccountId32>,Option<AccountId32>)',
+      MemberVerificationStatusUpdated: '(u64,bool,u64)',
+      ReferralCutUpdated: 'u8',
+      InvitesTransferred: '(u64,u64,u32)',
+      MembershipPriceUpdated: 'u128',
+      InitialInvitationBalanceUpdated: 'u128',
+      LeaderInvitationQuotaUpdated: 'u32',
+      InitialInvitationCountUpdated: 'u32',
+      StakingAccountAdded: '(AccountId32,u64)',
+      StakingAccountRemoved: '(AccountId32,u64)',
+      StakingAccountConfirmed: '(AccountId32,u64)',
+      MemberRemarked: '(u64,Bytes,Option<(AccountId32,u128)>)',
+      MemberCreated: '(u64,PalletMembershipCreateMemberParameters,u32)'
+    }
+  },
+  /**
+   * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+   **/
+  PalletMembershipBuyMembershipParameters: {
+    rootAccount: 'AccountId32',
+    controllerAccount: 'AccountId32',
+    handle: 'Option<Bytes>',
+    metadata: 'Bytes',
+    referrerId: 'Option<u64>'
+  },
+  /**
+   * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+   **/
+  PalletMembershipInviteMembershipParameters: {
+    invitingMemberId: 'u64',
+    rootAccount: 'AccountId32',
+    controllerAccount: 'AccountId32',
+    handle: 'Option<Bytes>',
+    metadata: 'Bytes'
+  },
+  /**
+   * Lookup72: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+   **/
+  PalletMembershipCreateMemberParameters: {
+    rootAccount: 'AccountId32',
+    controllerAccount: 'AccountId32',
+    handle: 'Bytes',
+    metadata: 'Bytes',
+    isFoundingMember: 'bool'
+  },
+  /**
+   * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+   **/
+  PalletMembershipGiftMembershipParameters: {
+    rootAccount: 'AccountId32',
+    controllerAccount: 'AccountId32',
+    handle: 'Option<Bytes>',
+    metadata: 'Bytes',
+    creditControllerAccount: 'u128',
+    applyControllerAccountInvitationLock: 'Option<u128>',
+    creditRootAccount: 'u128',
+    applyRootAccountInvitationLock: 'Option<u128>'
+  },
+  /**
+   * Lookup78: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+   **/
+  PalletForumRawEvent: {
+    _enum: {
+      CategoryCreated: '(u64,Option<u64>,Bytes,Bytes)',
+      CategoryArchivalStatusUpdated: '(u64,bool,PalletForumPrivilegedActor)',
+      CategoryTitleUpdated: '(u64,H256,PalletForumPrivilegedActor)',
+      CategoryDescriptionUpdated: '(u64,H256,PalletForumPrivilegedActor)',
+      CategoryDeleted: '(u64,PalletForumPrivilegedActor)',
+      ThreadCreated: '(u64,u64,u64,u64,Bytes,Bytes)',
+      ThreadModerated: '(u64,Bytes,PalletForumPrivilegedActor,u64)',
+      ThreadUpdated: '(u64,bool,PalletForumPrivilegedActor,u64)',
+      ThreadMetadataUpdated: '(u64,u64,u64,Bytes)',
+      ThreadDeleted: '(u64,u64,u64,bool)',
+      ThreadMoved: '(u64,u64,PalletForumPrivilegedActor,u64)',
+      PostAdded: '(u64,u64,u64,u64,Bytes,bool)',
+      PostModerated: '(u64,Bytes,PalletForumPrivilegedActor,u64,u64)',
+      PostDeleted: '(Bytes,u64,BTreeMap<PalletForumExtendedPostIdObject, bool>)',
+      PostTextUpdated: '(u64,u64,u64,u64,Bytes)',
+      CategoryStickyThreadUpdate: '(u64,BTreeSet<u64>,PalletForumPrivilegedActor)',
+      CategoryMembershipOfModeratorUpdated: '(u64,u64,bool)'
+    }
+  },
+  /**
+   * Lookup79: pallet_forum::PrivilegedActor<T>
+   **/
+  PalletForumPrivilegedActor: {
+    _enum: {
+      Lead: 'Null',
+      Moderator: 'u64'
+    }
+  },
+  /**
+   * Lookup80: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+   **/
+  PalletForumExtendedPostIdObject: {
+    categoryId: 'u64',
+    threadId: 'u64',
+    postId: 'u64'
+  },
+  /**
+   * Lookup85: pallet_constitution::RawEvent<primitive_types::H256>
+   **/
+  PalletConstitutionRawEvent: {
+    _enum: {
+      ConstutionAmended: '(H256,Bytes)'
+    }
+  },
+  /**
+   * Lookup86: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+   **/
+  PalletBountyRawEvent: {
+    _enum: {
+      BountyCreated: '(u64,PalletBountyBountyParametersBTreeSet,Bytes)',
+      BountyOracleSwitched: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+      BountyTerminated: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+      BountyFunded: '(u64,PalletBountyBountyActor,u128)',
+      BountyMaxFundingReached: 'u64',
+      BountyFundingWithdrawal: '(u64,PalletBountyBountyActor)',
+      BountyCreatorCherryWithdrawal: '(u64,PalletBountyBountyActor)',
+      BountyCreatorOracleRewardWithdrawal: '(u64,PalletBountyBountyActor)',
+      BountyOracleRewardWithdrawal: '(u64,PalletBountyBountyActor,u128)',
+      BountyRemoved: 'u64',
+      WorkEntryAnnounced: '(u64,u64,u64,AccountId32,Bytes)',
+      WorkSubmitted: '(u64,u64,u64,Bytes)',
+      OracleJudgmentSubmitted: '(u64,PalletBountyBountyActor,BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>,Bytes)',
+      WorkEntrantFundsWithdrawn: '(u64,u64,u64)',
+      BountyContributorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+      BountyOracleRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+      BountyEntrantRemarked: '(u64,u64,u64,Bytes)',
+      BountyCreatorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+      WorkSubmissionPeriodEnded: '(u64,PalletBountyBountyActor)',
+      WorkEntrantStakeUnlocked: '(u64,u64,AccountId32)',
+      WorkEntrantStakeSlashed: '(u64,u64,AccountId32,u128)',
+      FunderStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)',
+      CreatorStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)'
+    }
+  },
+  /**
+   * Lookup87: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+   **/
+  PalletBountyBountyParametersBTreeSet: {
+    oracle: 'PalletBountyBountyActor',
+    contractType: 'PalletBountyAssuranceContractTypeBTreeSet',
+    creator: 'PalletBountyBountyActor',
+    cherry: 'u128',
+    oracleReward: 'u128',
+    entrantStake: 'u128',
+    fundingType: 'PalletBountyFundingType'
+  },
+  /**
+   * Lookup88: pallet_bounty::BountyActor<MemberId>
+   **/
+  PalletBountyBountyActor: {
+    _enum: {
+      Council: 'Null',
+      Member: 'u64'
+    }
+  },
+  /**
+   * Lookup89: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+   **/
+  PalletBountyAssuranceContractTypeBTreeSet: {
+    _enum: {
+      Open: 'Null',
+      Closed: 'BTreeSet<u64>'
+    }
+  },
+  /**
+   * Lookup90: pallet_bounty::FundingType<BlockNumber, Balance>
+   **/
+  PalletBountyFundingType: {
+    _enum: {
+      Perpetual: {
+        target: 'u128',
+      },
+      Limited: {
+        target: 'u128',
+        fundingPeriod: 'u32'
+      }
+    }
+  },
+  /**
+   * Lookup92: pallet_bounty::OracleWorkEntryJudgment<Balance>
+   **/
+  PalletBountyOracleWorkEntryJudgment: {
+    _enum: {
+      Winner: {
+        reward: 'u128',
+      },
+      Rejected: {
+        slashingShare: 'Perbill',
+        actionJustification: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup95: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+   **/
+  PalletUtilityRawEvent: {
+    _enum: {
+      Signaled: 'Bytes',
+      RuntimeUpgraded: 'Bytes',
+      UpdatedWorkingGroupBudget: '(PalletCommonWorkingGroupIterableEnumsWorkingGroup,u128,PalletCommonBalanceKind)',
+      TokensBurned: '(AccountId32,u128)'
+    }
+  },
+  /**
+   * Lookup96: pallet_common::working_group::iterable_enums::WorkingGroup
+   **/
+  PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
+    _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'App', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
+  },
+  /**
+   * Lookup97: pallet_common::BalanceKind
+   **/
+  PalletCommonBalanceKind: {
+    _enum: ['Positive', 'Negative']
+  },
+  /**
+   * Lookup98: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+   **/
+  PalletContentRawEvent: {
+    _enum: {
+      CuratorGroupCreated: 'u64',
+      CuratorGroupPermissionsUpdated: '(u64,BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>)',
+      CuratorGroupStatusSet: '(u64,bool)',
+      CuratorAdded: '(u64,u64,BTreeSet<PalletContentIterableEnumsChannelActionPermission>)',
+      CuratorRemoved: '(u64,u64)',
+      ChannelCreated: '(u64,PalletContentChannelRecord,PalletContentChannelCreationParametersRecord,AccountId32)',
+      ChannelUpdated: '(PalletContentPermissionsContentActor,u64,PalletContentChannelUpdateParametersRecord,BTreeSet<u64>)',
+      ChannelPrivilegeLevelUpdated: '(u64,u8)',
+      ChannelStateBloatBondValueUpdated: 'u128',
+      VideoStateBloatBondValueUpdated: 'u128',
+      ChannelAssetsRemoved: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,PalletContentChannelRecord)',
+      ChannelDeleted: '(PalletContentPermissionsContentActor,u64)',
+      ChannelDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
+      ChannelVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
+      ChannelPausedFeaturesUpdatedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>,Bytes)',
+      ChannelAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,Bytes)',
+      ChannelFundsWithdrawn: '(PalletContentPermissionsContentActor,u64,u128,PalletContentChannelFundsDestination)',
+      ChannelRewardClaimedAndWithdrawn: '(PalletContentPermissionsContentActor,u64,u128,PalletContentChannelFundsDestination)',
+      VideoCreated: '(PalletContentPermissionsContentActor,u64,u64,PalletContentVideoCreationParametersRecord,BTreeSet<u64>)',
+      VideoUpdated: '(PalletContentPermissionsContentActor,u64,PalletContentVideoUpdateParametersRecord,BTreeSet<u64>)',
+      VideoDeleted: '(PalletContentPermissionsContentActor,u64)',
+      VideoDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
+      VideoVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
+      VideoAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,bool,Bytes)',
+      ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>,AccountId32)',
+      ChannelRewardUpdated: '(u128,u128,u64)',
+      EnglishAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesEnglishAuctionParamsRecord)',
+      OpenAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesOpenAuctionParamsRecord,u64)',
+      NftIssued: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesNftIssuanceParametersRecord)',
+      NftDestroyed: '(PalletContentPermissionsContentActor,u64)',
+      AuctionBidMade: '(u64,u64,u128,Option<u64>)',
+      AuctionBidCanceled: '(u64,u64)',
+      AuctionCanceled: '(PalletContentPermissionsContentActor,u64)',
+      EnglishAuctionSettled: '(u64,AccountId32,u64)',
+      BidMadeCompletingAuction: '(u64,u64,Option<u64>)',
+      OpenAuctionBidAccepted: '(PalletContentPermissionsContentActor,u64,u64,u128)',
+      OfferStarted: '(u64,PalletContentPermissionsContentActor,u64,Option<u128>)',
+      OfferAccepted: 'u64',
+      OfferCanceled: '(u64,PalletContentPermissionsContentActor)',
+      NftSellOrderMade: '(u64,PalletContentPermissionsContentActor,u128)',
+      NftBought: '(u64,u64)',
+      BuyNowCanceled: '(u64,PalletContentPermissionsContentActor)',
+      BuyNowPriceUpdated: '(u64,PalletContentPermissionsContentActor,u128)',
+      NftSlingedBackToTheOriginalArtist: '(u64,PalletContentPermissionsContentActor)',
+      ChannelOwnerRemarked: '(u64,Bytes)',
+      ChannelAgentRemarked: '(PalletContentPermissionsContentActor,u64,Bytes)',
+      NftOwnerRemarked: '(PalletContentPermissionsContentActor,u64,Bytes)',
+      InitializedChannelTransfer: '(u64,PalletContentPermissionsContentActor,PalletContentPendingTransfer)',
+      CancelChannelTransfer: '(u64,PalletContentPermissionsContentActor)',
+      ChannelTransferAccepted: '(u64,PalletContentTransferCommitmentParametersBTreeMap)',
+      GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
+      ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
+      ToggledNftLimits: 'bool',
+      CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)',
+      CreatorTokenIssuerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup99: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+   **/
+  PalletContentPermissionsContentActor: {
+    _enum: {
+      Curator: '(u64,u64)',
+      Member: 'u64',
+      Lead: 'Null'
+    }
+  },
+  /**
+   * Lookup100: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   **/
+  PalletContentChannelRecord: {
+    owner: 'PalletContentChannelOwner',
+    numVideos: 'u64',
+    collaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+    cumulativeRewardClaimed: 'u128',
+    privilegeLevel: 'u8',
+    pausedFeatures: 'BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>',
+    transferStatus: 'PalletContentChannelTransferStatus',
+    dataObjects: 'BTreeSet<u64>',
+    dailyNftLimit: 'PalletContentLimitPerPeriod',
+    weeklyNftLimit: 'PalletContentLimitPerPeriod',
+    dailyNftCounter: 'PalletContentNftCounter',
+    weeklyNftCounter: 'PalletContentNftCounter',
+    creatorTokenId: 'Option<u64>',
+    channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
+  },
+  /**
+   * Lookup104: pallet_content::types::iterable_enums::ChannelActionPermission
+   **/
+  PalletContentIterableEnumsChannelActionPermission: {
+    _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken', 'AmmControl', 'CreatorTokenRemarks']
+  },
+  /**
+   * Lookup111: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+   **/
+  PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
+    _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
+  },
+  /**
+   * Lookup114: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+   **/
+  PalletCommonBloatBondRepayableBloatBond: {
+    repaymentRestrictedTo: 'Option<AccountId32>',
+    amount: 'u128'
+  },
+  /**
+   * Lookup115: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+   **/
+  PalletContentChannelOwner: {
+    _enum: {
+      Member: 'u64',
+      CuratorGroup: 'u64'
+    }
+  },
+  /**
+   * Lookup116: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+   **/
+  PalletContentChannelTransferStatus: {
+    _enum: {
+      NoActiveTransfer: 'Null',
+      PendingTransfer: 'PalletContentPendingTransfer'
+    }
+  },
+  /**
+   * Lookup117: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+   **/
+  PalletContentPendingTransfer: {
+    newOwner: 'PalletContentChannelOwner',
+    transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
+  },
+  /**
+   * Lookup118: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+   **/
+  PalletContentTransferCommitmentParametersBoundedBTreeMap: {
+    newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+    price: 'u128',
+    transferId: 'u64'
+  },
+  /**
+   * Lookup119: pallet_content::types::LimitPerPeriod<BlockNumber>
+   **/
+  PalletContentLimitPerPeriod: {
+    limit: 'u64',
+    blockNumberPeriod: 'u32'
+  },
+  /**
+   * Lookup120: pallet_content::types::NftCounter<BlockNumber>
+   **/
+  PalletContentNftCounter: {
+    counter: 'u64',
+    lastUpdated: 'u32'
+  },
+  /**
+   * Lookup121: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+   **/
+  PalletContentNftTypesEnglishAuctionParamsRecord: {
+    startingPrice: 'u128',
+    buyNowPrice: 'Option<u128>',
+    whitelist: 'BTreeSet<u64>',
+    startsAt: 'Option<u32>',
+    duration: 'u32',
+    extensionPeriod: 'u32',
+    minBidStep: 'u128'
+  },
+  /**
+   * Lookup123: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+   **/
+  PalletContentNftTypesOpenAuctionParamsRecord: {
+    startingPrice: 'u128',
+    buyNowPrice: 'Option<u128>',
+    startsAt: 'Option<u32>',
+    whitelist: 'BTreeSet<u64>',
+    bidLockDuration: 'u32'
+  },
+  /**
+   * Lookup124: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+   **/
+  PalletContentNftTypesNftIssuanceParametersRecord: {
+    royalty: 'Option<Perbill>',
+    nftMetadata: 'Bytes',
+    nonChannelOwner: 'Option<u64>',
+    initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
+  },
+  /**
+   * Lookup125: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+   **/
+  PalletContentNftTypesInitTransactionalStatusRecord: {
+    _enum: {
+      Idle: 'Null',
+      BuyNow: 'u128',
+      InitiatedOfferToMember: '(u64,Option<u128>)',
+      EnglishAuction: 'PalletContentNftTypesEnglishAuctionParamsRecord',
+      OpenAuction: 'PalletContentNftTypesOpenAuctionParamsRecord'
+    }
+  },
+  /**
+   * Lookup127: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+   **/
+  PalletContentChannelCreationParametersRecord: {
+    assets: 'Option<PalletContentStorageAssetsRecord>',
+    meta: 'Option<Bytes>',
+    collaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+    storageBuckets: 'BTreeSet<u64>',
+    distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>',
+    expectedChannelStateBloatBond: 'u128',
+    expectedDataObjectStateBloatBond: 'u128'
+  },
+  /**
+   * Lookup128: pallet_content::types::StorageAssetsRecord<Balance>
+   **/
+  PalletContentStorageAssetsRecord: {
+    objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+    expectedDataSizeFee: 'u128'
+  },
+  /**
+   * Lookup130: pallet_storage::DataObjectCreationParameters
+   **/
+  PalletStorageDataObjectCreationParameters: {
+    _alias: {
+      size_: 'size'
+    },
+    size_: 'u64',
+    ipfsContentId: 'Bytes'
+  },
+  /**
+   * Lookup131: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+   **/
+  PalletStorageDistributionBucketIdRecord: {
+    distributionBucketFamilyId: 'u64',
+    distributionBucketIndex: 'u64'
+  },
+  /**
+   * Lookup138: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+   **/
+  PalletContentChannelUpdateParametersRecord: {
+    assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
+    newMeta: 'Option<Bytes>',
+    assetsToRemove: 'BTreeSet<u64>',
+    collaborators: 'Option<BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>>',
+    expectedDataObjectStateBloatBond: 'u128',
+    storageBucketsNumWitness: 'Option<u32>'
+  },
+  /**
+   * Lookup140: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+   **/
+  PalletContentVideoCreationParametersRecord: {
+    assets: 'Option<PalletContentStorageAssetsRecord>',
+    meta: 'Option<Bytes>',
+    autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
+    expectedVideoStateBloatBond: 'u128',
+    expectedDataObjectStateBloatBond: 'u128',
+    storageBucketsNumWitness: 'u32'
+  },
+  /**
+   * Lookup142: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+   **/
+  PalletContentVideoUpdateParametersRecord: {
+    assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
+    newMeta: 'Option<Bytes>',
+    assetsToRemove: 'BTreeSet<u64>',
+    autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
+    expectedDataObjectStateBloatBond: 'u128',
+    storageBucketsNumWitness: 'Option<u32>'
+  },
+  /**
+   * Lookup145: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+   **/
+  PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
+    _enum: {
+      HideVideo: 'Null',
+      HideChannel: 'Null',
+      ChangeChannelFeatureStatus: 'PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature',
+      DeleteVideo: 'Null',
+      DeleteChannel: 'Null',
+      DeleteVideoAssets: 'bool',
+      DeleteNonVideoChannelAssets: 'Null',
+      UpdateChannelNftLimits: 'Null'
+    }
+  },
+  /**
+   * Lookup149: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+   **/
+  PalletContentTransferCommitmentParametersBTreeMap: {
+    newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+    price: 'u128',
+    transferId: 'u64'
+  },
+  /**
+   * Lookup150: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
+   **/
+  PalletContentUpdateChannelPayoutsParametersRecord: {
+    commitment: 'Option<H256>',
+    payload: 'Option<PalletContentChannelPayoutsPayloadParametersRecord>',
+    minCashoutAllowed: 'Option<u128>',
+    maxCashoutAllowed: 'Option<u128>',
+    channelCashoutsEnabled: 'Option<bool>'
+  },
+  /**
+   * Lookup151: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
+   **/
+  PalletContentChannelPayoutsPayloadParametersRecord: {
+    objectCreationParams: 'PalletStorageDataObjectCreationParameters',
+    expectedDataSizeFee: 'u128',
+    expectedDataObjectStateBloatBond: 'u128'
+  },
+  /**
+   * Lookup155: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+   **/
+  PalletContentChannelFundsDestination: {
+    _enum: {
+      AccountId: 'AccountId32',
+      CouncilBudget: 'Null'
+    }
+  },
+  /**
+   * Lookup156: pallet_content::types::NftLimitPeriod
+   **/
+  PalletContentNftLimitPeriod: {
+    _enum: ['Daily', 'Weekly']
+  },
+  /**
+   * Lookup157: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+   **/
+  PalletStorageRawEvent: {
+    _enum: {
+      StorageBucketCreated: '(u64,Option<u64>,bool,u64,u64)',
+      StorageBucketInvitationAccepted: '(u64,u64,AccountId32)',
+      StorageBucketsUpdatedForBag: '(PalletStorageBagIdType,BTreeSet<u64>,BTreeSet<u64>)',
+      DataObjectsUploaded: '(BTreeSet<u64>,PalletStorageUploadParametersRecord,u128)',
+      StorageOperatorMetadataSet: '(u64,u64,Bytes)',
+      StorageBucketVoucherLimitsSet: '(u64,u64,u64)',
+      PendingDataObjectsAccepted: '(u64,u64,PalletStorageBagIdType,BTreeSet<u64>)',
+      StorageBucketInvitationCancelled: 'u64',
+      StorageBucketOperatorInvited: '(u64,u64)',
+      StorageBucketOperatorRemoved: 'u64',
+      UploadingBlockStatusUpdated: 'bool',
+      DataObjectPerMegabyteFeeUpdated: 'u128',
+      StorageBucketsPerBagLimitUpdated: 'u32',
+      StorageBucketsVoucherMaxLimitsUpdated: '(u64,u64)',
+      DataObjectsMoved: '(PalletStorageBagIdType,PalletStorageBagIdType,BTreeSet<u64>)',
+      DataObjectsDeleted: '(AccountId32,PalletStorageBagIdType,BTreeSet<u64>)',
+      StorageBucketStatusUpdated: '(u64,bool)',
+      UpdateBlacklist: '(BTreeSet<Bytes>,BTreeSet<Bytes>)',
+      DynamicBagDeleted: 'PalletStorageDynamicBagIdType',
+      DynamicBagCreated: '(PalletStorageDynBagCreationParametersRecord,BTreeSet<u64>)',
+      VoucherChanged: '(u64,PalletStorageVoucher)',
+      StorageBucketDeleted: 'u64',
+      NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: '(PalletStorageDynamicBagType,u32)',
+      DistributionBucketFamilyCreated: 'u64',
+      DistributionBucketFamilyDeleted: 'u64',
+      DistributionBucketCreated: '(u64,bool,PalletStorageDistributionBucketIdRecord)',
+      DistributionBucketStatusUpdated: '(PalletStorageDistributionBucketIdRecord,bool)',
+      DistributionBucketDeleted: 'PalletStorageDistributionBucketIdRecord',
+      DistributionBucketsUpdatedForBag: '(PalletStorageBagIdType,u64,BTreeSet<u64>,BTreeSet<u64>)',
+      DistributionBucketsPerBagLimitUpdated: 'u32',
+      DistributionBucketModeUpdated: '(PalletStorageDistributionBucketIdRecord,bool)',
+      FamiliesInDynamicBagCreationPolicyUpdated: '(PalletStorageDynamicBagType,BTreeMap<u64, u32>)',
+      DistributionBucketOperatorInvited: '(PalletStorageDistributionBucketIdRecord,u64)',
+      DistributionBucketInvitationCancelled: '(PalletStorageDistributionBucketIdRecord,u64)',
+      DistributionBucketInvitationAccepted: '(u64,PalletStorageDistributionBucketIdRecord)',
+      DistributionBucketMetadataSet: '(u64,PalletStorageDistributionBucketIdRecord,Bytes)',
+      DistributionBucketOperatorRemoved: '(PalletStorageDistributionBucketIdRecord,u64)',
+      DistributionBucketFamilyMetadataSet: '(u64,Bytes)',
+      DataObjectStateBloatBondValueUpdated: 'u128',
+      DataObjectsUpdated: '(PalletStorageUploadParametersRecord,BTreeSet<u64>,BTreeSet<u64>)',
+      StorageOperatorRemarked: '(u64,u64,Bytes)',
+      DistributionOperatorRemarked: '(u64,PalletStorageDistributionBucketIdRecord,Bytes)'
+    }
+  },
+  /**
+   * Lookup158: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+   **/
+  PalletStorageUploadParametersRecord: {
+    bagId: 'PalletStorageBagIdType',
+    objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+    stateBloatBondSourceAccountId: 'AccountId32',
+    expectedDataSizeFee: 'u128',
+    expectedDataObjectStateBloatBond: 'u128'
+  },
+  /**
+   * Lookup159: pallet_storage::BagIdType<MemberId, ChannelId>
+   **/
+  PalletStorageBagIdType: {
+    _enum: {
+      Static: 'PalletStorageStaticBagId',
+      Dynamic: 'PalletStorageDynamicBagIdType'
+    }
+  },
+  /**
+   * Lookup160: pallet_storage::StaticBagId
+   **/
+  PalletStorageStaticBagId: {
+    _enum: {
+      Council: 'Null',
+      WorkingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+    }
+  },
+  /**
+   * Lookup161: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+   **/
+  PalletStorageDynamicBagIdType: {
+    _enum: {
+      Member: 'u64',
+      Channel: 'u64'
+    }
+  },
+  /**
+   * Lookup162: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+   **/
+  PalletStorageDynBagCreationParametersRecord: {
+    bagId: 'PalletStorageDynamicBagIdType',
+    objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+    stateBloatBondSourceAccountId: 'AccountId32',
+    expectedDataSizeFee: 'u128',
+    expectedDataObjectStateBloatBond: 'u128',
+    storageBuckets: 'BTreeSet<u64>',
+    distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
+  },
+  /**
+   * Lookup165: pallet_storage::Voucher
+   **/
+  PalletStorageVoucher: {
+    sizeLimit: 'u64',
+    objectsLimit: 'u64',
+    sizeUsed: 'u64',
+    objectsUsed: 'u64'
+  },
+  /**
+   * Lookup166: pallet_storage::DynamicBagType
+   **/
+  PalletStorageDynamicBagType: {
+    _enum: ['Member', 'Channel']
+  },
+  /**
+   * Lookup170: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
+   **/
+  PalletProjectTokenEventsRawEvent: {
+    _enum: {
+      TokenAmountTransferred: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+      TokenAmountTransferredByIssuer: '(u64,u64,PalletProjectTokenTransfers,Bytes)',
+      PatronageRateDecreasedTo: '(u64,Permill)',
+      PatronageCreditClaimed: '(u64,u128,u64)',
+      RevenueSplitIssued: '(u64,u32,u32,u128)',
+      RevenueSplitFinalized: '(u64,AccountId32,u128)',
+      UserParticipatedInSplit: '(u64,u64,u128,u128,u32)',
+      RevenueSplitLeft: '(u64,u64,u128)',
+      MemberJoinedWhitelist: '(u64,u64,PalletProjectTokenTransferPolicy)',
+      AccountDustedBy: '(u64,u64,AccountId32,PalletProjectTokenTransferPolicy)',
+      TokenDeissued: 'u64',
+      TokenIssued: '(u64,PalletProjectTokenTokenIssuanceParameters)',
+      TokenSaleInitialized: '(u64,u32,PalletProjectTokenTokenSale,Option<Bytes>)',
+      UpcomingTokenSaleUpdated: '(u64,u32,Option<u32>,Option<u32>)',
+      TokensPurchasedOnSale: '(u64,u32,u128,u64)',
+      TokenSaleFinalized: '(u64,u32,u128,u128)',
+      TransferPolicyChangedToPermissionless: 'u64',
+      TokensBurned: '(u64,u64,u128)',
+      AmmActivated: '(u64,u64,PalletProjectTokenAmmCurve)',
+      TokensBoughtOnAmm: '(u64,u64,u128,u128)',
+      TokensSoldOnAmm: '(u64,u64,u128,u128)',
+      AmmDeactivated: '(u64,u64,u128)',
+      MaxYearlyPatronageRateUpdated: 'Permill'
+    }
+  },
+  /**
+   * Lookup171: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+   **/
+  PalletProjectTokenTransferPolicy: {
+    _enum: {
+      Permissionless: 'Null',
+      Permissioned: 'H256'
+    }
+  },
+  /**
+   * Lookup172: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+   **/
+  PalletProjectTokenTokenIssuanceParameters: {
+    initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
+    symbol: 'H256',
+    transferPolicy: 'PalletProjectTokenTransferPolicyParams',
+    patronageRate: 'Permill',
+    revenueSplitRate: 'Permill'
+  },
+  /**
+   * Lookup173: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   **/
+  PalletProjectTokenTokenAllocation: {
+    amount: 'u128',
+    vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
+  },
+  /**
+   * Lookup174: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+   **/
+  PalletProjectTokenVestingScheduleParams: {
+    linearVestingDuration: 'u32',
+    blocksBeforeCliff: 'u32',
+    cliffAmountPercentage: 'Permill'
+  },
+  /**
+   * Lookup177: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+   **/
+  PalletProjectTokenTransferPolicyParams: {
+    _enum: {
+      Permissionless: 'Null',
+      Permissioned: 'PalletProjectTokenWhitelistParams'
+    }
+  },
+  /**
+   * Lookup178: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+   **/
+  PalletProjectTokenWhitelistParams: {
+    commitment: 'H256',
+    payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
+  },
+  /**
+   * Lookup179: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+   **/
+  PalletProjectTokenSingleDataObjectUploadParams: {
+    objectCreationParams: 'PalletStorageDataObjectCreationParameters',
+    expectedDataSizeFee: 'u128',
+    expectedDataObjectStateBloatBond: 'u128'
+  },
+  /**
+   * Lookup185: pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>
+   **/
+  PalletProjectTokenTransfers: 'BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>',
+  /**
+   * Lookup186: pallet_project_token::types::Validated<MemberId>
+   **/
+  PalletProjectTokenValidated: {
+    _enum: {
+      Existing: 'u64',
+      NonExisting: 'u64'
+    }
+  },
+  /**
+   * Lookup187: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+   **/
+  PalletProjectTokenValidatedPayment: {
+    payment: 'PalletProjectTokenPaymentWithVesting',
+    vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
+  },
+  /**
+   * Lookup188: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   **/
+  PalletProjectTokenPaymentWithVesting: {
+    amount: 'u128',
+    vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
+  },
+  /**
+   * Lookup190: pallet_project_token::types::VestingSource
+   **/
+  PalletProjectTokenVestingSource: {
+    _enum: {
+      InitialIssuance: 'Null',
+      Sale: 'u32',
+      IssuerTransfer: 'u64'
+    }
+  },
+  /**
+   * Lookup194: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+   **/
+  PalletProjectTokenTokenSale: {
+    unitPrice: 'u128',
+    quantityLeft: 'u128',
+    fundsCollected: 'u128',
+    tokensSource: 'u64',
+    earningsDestination: 'Option<AccountId32>',
+    startBlock: 'u32',
+    duration: 'u32',
+    vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>',
+    capPerMember: 'Option<u128>',
+    autoFinalize: 'bool'
+  },
+  /**
+   * Lookup195: pallet_project_token::types::AmmCurve<Balance>
+   **/
+  PalletProjectTokenAmmCurve: {
+    slope: 'u128',
+    intercept: 'u128',
+    providedSupply: 'u128'
+  },
+  /**
+   * Lookup196: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+   **/
+  PalletProposalsEngineRawEvent: {
+    _enum: {
+      ProposalStatusUpdated: '(u32,PalletProposalsEngineProposalStatusesProposalStatus)',
+      ProposalDecisionMade: '(u32,PalletProposalsEngineProposalStatusesProposalDecision)',
+      ProposalExecuted: '(u32,PalletProposalsEngineProposalStatusesExecutionStatus)',
+      Voted: '(u64,u32,PalletProposalsEngineVoteKind,Bytes)',
+      ProposalCancelled: '(u64,u32)',
+      ProposerRemarked: '(u64,u32,Bytes)'
+    }
+  },
+  /**
+   * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+   **/
+  PalletProposalsEngineProposalStatusesProposalStatus: {
+    _enum: {
+      Active: 'Null',
+      PendingExecution: 'u32',
+      PendingConstitutionality: 'Null'
+    }
+  },
+  /**
+   * Lookup198: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+   **/
+  PalletProposalsEngineProposalStatusesProposalDecision: {
+    _enum: {
+      Canceled: 'Null',
+      CanceledByRuntime: 'Null',
+      Vetoed: 'Null',
+      Rejected: 'Null',
+      Slashed: 'Null',
+      Expired: 'Null',
+      Approved: 'PalletProposalsEngineProposalStatusesApprovedProposalDecision'
+    }
+  },
+  /**
+   * Lookup199: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+   **/
+  PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
+    _enum: ['PendingExecution', 'PendingConstitutionality']
+  },
+  /**
+   * Lookup200: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+   **/
+  PalletProposalsEngineProposalStatusesExecutionStatus: {
+    _enum: {
+      Executed: 'Null',
+      ExecutionFailed: {
+        error: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup201: pallet_proposals_engine::types::VoteKind
+   **/
+  PalletProposalsEngineVoteKind: {
+    _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
+  },
+  /**
+   * Lookup202: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+   **/
+  PalletProposalsDiscussionRawEvent: {
+    _enum: {
+      ThreadCreated: '(u64,u64)',
+      PostCreated: '(u64,u64,u64,Bytes,bool)',
+      PostUpdated: '(u64,u64,u64,Bytes)',
+      ThreadModeChanged: '(u64,PalletProposalsDiscussionThreadModeBTreeSet,u64)',
+      PostDeleted: '(u64,u64,u64,bool)'
+    }
+  },
+  /**
+   * Lookup203: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+   **/
+  PalletProposalsDiscussionThreadModeBTreeSet: {
+    _enum: {
+      Open: 'Null',
+      Closed: 'BTreeSet<u64>'
+    }
+  },
+  /**
+   * Lookup204: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+   **/
+  PalletProposalsCodexRawEvent: {
+    _enum: {
+      ProposalCreated: '(u32,PalletProposalsCodexGeneralProposalParams,PalletProposalsCodexProposalDetails,u64)'
+    }
+  },
+  /**
+   * Lookup205: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+   **/
+  PalletProposalsCodexGeneralProposalParams: {
+    memberId: 'u64',
+    title: 'Bytes',
+    description: 'Bytes',
+    stakingAccountId: 'Option<AccountId32>',
+    exactExecutionBlock: 'Option<u32>'
+  },
+  /**
+   * Lookup206: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
+   **/
+  PalletProposalsCodexProposalDetails: {
+    _enum: {
+      Signal: 'Bytes',
+      RuntimeUpgrade: 'Bytes',
+      FundingRequest: 'Vec<PalletCommonFundingRequestParameters>',
+      SetMaxValidatorCount: 'u32',
+      CreateWorkingGroupLeadOpening: 'PalletProposalsCodexCreateOpeningParameters',
+      FillWorkingGroupLeadOpening: 'PalletProposalsCodexFillOpeningParameters',
+      UpdateWorkingGroupBudget: '(u128,PalletCommonWorkingGroupIterableEnumsWorkingGroup,PalletCommonBalanceKind)',
+      DecreaseWorkingGroupLeadStake: '(u64,u128,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+      SlashWorkingGroupLead: '(u64,u128,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+      SetWorkingGroupLeadReward: '(u64,Option<u128>,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+      TerminateWorkingGroupLead: 'PalletProposalsCodexTerminateRoleParameters',
+      AmendConstitution: 'Bytes',
+      CancelWorkingGroupLeadOpening: '(u64,PalletCommonWorkingGroupIterableEnumsWorkingGroup)',
+      SetMembershipPrice: 'u128',
+      SetCouncilBudgetIncrement: 'u128',
+      SetCouncilorReward: 'u128',
+      SetInitialInvitationBalance: 'u128',
+      SetInitialInvitationCount: 'u32',
+      SetMembershipLeadInvitationQuota: 'u32',
+      SetReferralCut: 'u8',
+      VetoProposal: 'u32',
+      UpdateGlobalNftLimit: '(PalletContentNftLimitPeriod,u64)',
+      UpdateChannelPayouts: 'PalletContentUpdateChannelPayoutsParametersRecord',
+      UpdateMaxYearlyPatronageRate: 'Permill'
+    }
+  },
+  /**
+   * Lookup208: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+   **/
+  PalletCommonFundingRequestParameters: {
+    account: 'AccountId32',
+    amount: 'u128'
+  },
+  /**
+   * Lookup209: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+   **/
+  PalletProposalsCodexCreateOpeningParameters: {
+    description: 'Bytes',
+    stakePolicy: 'PalletWorkingGroupStakePolicy',
+    rewardPerBlock: 'Option<u128>',
+    group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+  },
+  /**
+   * Lookup210: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+   **/
+  PalletWorkingGroupStakePolicy: {
+    stakeAmount: 'u128',
+    leavingUnstakingPeriod: 'u32'
+  },
+  /**
+   * Lookup211: pallet_proposals_codex::types::FillOpeningParameters
+   **/
+  PalletProposalsCodexFillOpeningParameters: {
+    openingId: 'u64',
+    applicationId: 'u64',
+    workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+  },
+  /**
+   * Lookup212: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+   **/
+  PalletProposalsCodexTerminateRoleParameters: {
+    workerId: 'u64',
+    slashingAmount: 'Option<u128>',
+    group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
+  },
+  /**
+   * Lookup213: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+   **/
+  PalletWorkingGroupRawEventInstance1: {
+    _enum: {
+      OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+      AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+      OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+      LeaderSet: 'u64',
+      WorkerRoleAccountUpdated: '(u64,AccountId32)',
+      LeaderUnset: 'Null',
+      WorkerExited: 'u64',
+      WorkerStartedLeaving: '(u64,Option<Bytes>)',
+      TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+      TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+      StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+      StakeDecreased: '(u64,u128)',
+      StakeIncreased: '(u64,u128)',
+      ApplicationWithdrawn: 'u64',
+      OpeningCanceled: 'u64',
+      BudgetSet: 'u128',
+      WorkerRewardAccountUpdated: '(u64,AccountId32)',
+      WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+      StatusTextChanged: '(H256,Option<Bytes>)',
+      BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+      RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+      NewMissedRewardLevelReached: '(u64,Option<u128>)',
+      WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+      LeadRemarked: 'Bytes',
+      WorkerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup217: pallet_working_group::types::OpeningType
+   **/
+  PalletWorkingGroupOpeningType: {
+    _enum: ['Leader', 'Regular']
+  },
+  /**
+   * Lookup218: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+   **/
+  PalletWorkingGroupApplyOnOpeningParams: {
+    memberId: 'u64',
+    openingId: 'u64',
+    roleAccountId: 'AccountId32',
+    rewardAccountId: 'AccountId32',
+    description: 'Bytes',
+    stakeParameters: 'PalletWorkingGroupStakeParameters'
+  },
+  /**
+   * Lookup219: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+   **/
+  PalletWorkingGroupStakeParameters: {
+    stake: 'u128',
+    stakingAccountId: 'AccountId32'
+  },
+  /**
+   * Lookup220: pallet_working_group::Instance1
+   **/
+  PalletWorkingGroupInstance1: 'Null',
+  /**
+   * Lookup221: pallet_working_group::types::RewardPaymentType
+   **/
+  PalletWorkingGroupRewardPaymentType: {
+    _enum: ['MissedReward', 'RegularReward']
+  },
+  /**
+   * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+   **/
+  PalletWorkingGroupRawEventInstance2: {
+    _enum: {
+      OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+      AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+      OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+      LeaderSet: 'u64',
+      WorkerRoleAccountUpdated: '(u64,AccountId32)',
+      LeaderUnset: 'Null',
+      WorkerExited: 'u64',
+      WorkerStartedLeaving: '(u64,Option<Bytes>)',
+      TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+      TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+      StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+      StakeDecreased: '(u64,u128)',
+      StakeIncreased: '(u64,u128)',
+      ApplicationWithdrawn: 'u64',
+      OpeningCanceled: 'u64',
+      BudgetSet: 'u128',
+      WorkerRewardAccountUpdated: '(u64,AccountId32)',
+      WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+      StatusTextChanged: '(H256,Option<Bytes>)',
+      BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+      RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+      NewMissedRewardLevelReached: '(u64,Option<u128>)',
+      WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+      LeadRemarked: 'Bytes',
+      WorkerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup223: pallet_working_group::Instance2
+   **/
+  PalletWorkingGroupInstance2: 'Null',
+  /**
+   * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+   **/
+  PalletWorkingGroupRawEventInstance3: {
+    _enum: {
+      OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+      AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+      OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+      LeaderSet: 'u64',
+      WorkerRoleAccountUpdated: '(u64,AccountId32)',
+      LeaderUnset: 'Null',
+      WorkerExited: 'u64',
+      WorkerStartedLeaving: '(u64,Option<Bytes>)',
+      TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+      TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+      StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+      StakeDecreased: '(u64,u128)',
+      StakeIncreased: '(u64,u128)',
+      ApplicationWithdrawn: 'u64',
+      OpeningCanceled: 'u64',
+      BudgetSet: 'u128',
+      WorkerRewardAccountUpdated: '(u64,AccountId32)',
+      WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+      StatusTextChanged: '(H256,Option<Bytes>)',
+      BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+      RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+      NewMissedRewardLevelReached: '(u64,Option<u128>)',
+      WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+      LeadRemarked: 'Bytes',
+      WorkerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup225: pallet_working_group::Instance3
+   **/
+  PalletWorkingGroupInstance3: 'Null',
+  /**
+   * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+   **/
+  PalletWorkingGroupRawEventInstance4: {
+    _enum: {
+      OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+      AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+      OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+      LeaderSet: 'u64',
+      WorkerRoleAccountUpdated: '(u64,AccountId32)',
+      LeaderUnset: 'Null',
+      WorkerExited: 'u64',
+      WorkerStartedLeaving: '(u64,Option<Bytes>)',
+      TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+      TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+      StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+      StakeDecreased: '(u64,u128)',
+      StakeIncreased: '(u64,u128)',
+      ApplicationWithdrawn: 'u64',
+      OpeningCanceled: 'u64',
+      BudgetSet: 'u128',
+      WorkerRewardAccountUpdated: '(u64,AccountId32)',
+      WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+      StatusTextChanged: '(H256,Option<Bytes>)',
+      BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+      RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+      NewMissedRewardLevelReached: '(u64,Option<u128>)',
+      WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+      LeadRemarked: 'Bytes',
+      WorkerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup227: pallet_working_group::Instance4
+   **/
+  PalletWorkingGroupInstance4: 'Null',
+  /**
+   * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+   **/
+  PalletWorkingGroupRawEventInstance5: {
+    _enum: {
+      OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+      AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+      OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+      LeaderSet: 'u64',
+      WorkerRoleAccountUpdated: '(u64,AccountId32)',
+      LeaderUnset: 'Null',
+      WorkerExited: 'u64',
+      WorkerStartedLeaving: '(u64,Option<Bytes>)',
+      TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+      TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+      StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+      StakeDecreased: '(u64,u128)',
+      StakeIncreased: '(u64,u128)',
+      ApplicationWithdrawn: 'u64',
+      OpeningCanceled: 'u64',
+      BudgetSet: 'u128',
+      WorkerRewardAccountUpdated: '(u64,AccountId32)',
+      WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+      StatusTextChanged: '(H256,Option<Bytes>)',
+      BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+      RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+      NewMissedRewardLevelReached: '(u64,Option<u128>)',
+      WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+      LeadRemarked: 'Bytes',
+      WorkerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup229: pallet_working_group::Instance5
+   **/
+  PalletWorkingGroupInstance5: 'Null',
+  /**
+   * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+   **/
+  PalletWorkingGroupRawEventInstance6: {
+    _enum: {
+      OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+      AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+      OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+      LeaderSet: 'u64',
+      WorkerRoleAccountUpdated: '(u64,AccountId32)',
+      LeaderUnset: 'Null',
+      WorkerExited: 'u64',
+      WorkerStartedLeaving: '(u64,Option<Bytes>)',
+      TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+      TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+      StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+      StakeDecreased: '(u64,u128)',
+      StakeIncreased: '(u64,u128)',
+      ApplicationWithdrawn: 'u64',
+      OpeningCanceled: 'u64',
+      BudgetSet: 'u128',
+      WorkerRewardAccountUpdated: '(u64,AccountId32)',
+      WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+      StatusTextChanged: '(H256,Option<Bytes>)',
+      BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+      RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+      NewMissedRewardLevelReached: '(u64,Option<u128>)',
+      WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+      LeadRemarked: 'Bytes',
+      WorkerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup231: pallet_working_group::Instance6
+   **/
+  PalletWorkingGroupInstance6: 'Null',
+  /**
+   * Lookup232: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+   **/
+  PalletWorkingGroupRawEventInstance7: {
+    _enum: {
+      OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+      AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+      OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+      LeaderSet: 'u64',
+      WorkerRoleAccountUpdated: '(u64,AccountId32)',
+      LeaderUnset: 'Null',
+      WorkerExited: 'u64',
+      WorkerStartedLeaving: '(u64,Option<Bytes>)',
+      TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+      TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+      StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+      StakeDecreased: '(u64,u128)',
+      StakeIncreased: '(u64,u128)',
+      ApplicationWithdrawn: 'u64',
+      OpeningCanceled: 'u64',
+      BudgetSet: 'u128',
+      WorkerRewardAccountUpdated: '(u64,AccountId32)',
+      WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+      StatusTextChanged: '(H256,Option<Bytes>)',
+      BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+      RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+      NewMissedRewardLevelReached: '(u64,Option<u128>)',
+      WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+      LeadRemarked: 'Bytes',
+      WorkerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup233: pallet_working_group::Instance7
+   **/
+  PalletWorkingGroupInstance7: 'Null',
+  /**
+   * Lookup234: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+   **/
+  PalletWorkingGroupRawEventInstance8: {
+    _enum: {
+      OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+      AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+      OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+      LeaderSet: 'u64',
+      WorkerRoleAccountUpdated: '(u64,AccountId32)',
+      LeaderUnset: 'Null',
+      WorkerExited: 'u64',
+      WorkerStartedLeaving: '(u64,Option<Bytes>)',
+      TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+      TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+      StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+      StakeDecreased: '(u64,u128)',
+      StakeIncreased: '(u64,u128)',
+      ApplicationWithdrawn: 'u64',
+      OpeningCanceled: 'u64',
+      BudgetSet: 'u128',
+      WorkerRewardAccountUpdated: '(u64,AccountId32)',
+      WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+      StatusTextChanged: '(H256,Option<Bytes>)',
+      BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+      RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+      NewMissedRewardLevelReached: '(u64,Option<u128>)',
+      WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+      LeadRemarked: 'Bytes',
+      WorkerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup235: pallet_working_group::Instance8
+   **/
+  PalletWorkingGroupInstance8: 'Null',
+  /**
+   * Lookup236: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+   **/
+  PalletWorkingGroupRawEventInstance9: {
+    _enum: {
+      OpeningAdded: '(u64,Bytes,PalletWorkingGroupOpeningType,PalletWorkingGroupStakePolicy,Option<u128>)',
+      AppliedOnOpening: '(PalletWorkingGroupApplyOnOpeningParams,u64)',
+      OpeningFilled: '(u64,BTreeMap<u64, u64>,BTreeSet<u64>)',
+      LeaderSet: 'u64',
+      WorkerRoleAccountUpdated: '(u64,AccountId32)',
+      LeaderUnset: 'Null',
+      WorkerExited: 'u64',
+      WorkerStartedLeaving: '(u64,Option<Bytes>)',
+      TerminatedWorker: '(u64,Option<u128>,Option<Bytes>)',
+      TerminatedLeader: '(u64,Option<u128>,Option<Bytes>)',
+      StakeSlashed: '(u64,u128,u128,Option<Bytes>)',
+      StakeDecreased: '(u64,u128)',
+      StakeIncreased: '(u64,u128)',
+      ApplicationWithdrawn: 'u64',
+      OpeningCanceled: 'u64',
+      BudgetSet: 'u128',
+      WorkerRewardAccountUpdated: '(u64,AccountId32)',
+      WorkerRewardAmountUpdated: '(u64,Option<u128>)',
+      StatusTextChanged: '(H256,Option<Bytes>)',
+      BudgetSpending: '(AccountId32,u128,Option<Bytes>)',
+      RewardPaid: '(u64,AccountId32,u128,PalletWorkingGroupRewardPaymentType)',
+      NewMissedRewardLevelReached: '(u64,Option<u128>)',
+      WorkingGroupBudgetFunded: '(u64,u128,Bytes)',
+      LeadRemarked: 'Bytes',
+      WorkerRemarked: '(u64,Bytes)'
+    }
+  },
+  /**
+   * Lookup237: pallet_working_group::Instance9
+   **/
+  PalletWorkingGroupInstance9: 'Null',
+  /**
+   * Lookup238: frame_system::Phase
+   **/
+  FrameSystemPhase: {
+    _enum: {
+      ApplyExtrinsic: 'u32',
+      Finalization: 'Null',
+      Initialization: 'Null'
+    }
+  },
+  /**
+   * Lookup242: frame_system::LastRuntimeUpgradeInfo
+   **/
+  FrameSystemLastRuntimeUpgradeInfo: {
+    specVersion: 'Compact<u32>',
+    specName: 'Text'
+  },
+  /**
+   * Lookup245: frame_system::pallet::Call<T>
+   **/
+  FrameSystemCall: {
+    _enum: {
+      fill_block: {
+        ratio: 'Perbill',
+      },
+      remark: {
+        remark: 'Bytes',
+      },
+      set_heap_pages: {
+        pages: 'u64',
+      },
+      set_code: {
+        code: 'Bytes',
+      },
+      set_code_without_checks: {
+        code: 'Bytes',
+      },
+      set_storage: {
+        items: 'Vec<(Bytes,Bytes)>',
+      },
+      kill_storage: {
+        _alias: {
+          keys_: 'keys',
+        },
+        keys_: 'Vec<Bytes>',
+      },
+      kill_prefix: {
+        prefix: 'Bytes',
+        subkeys: 'u32',
+      },
+      remark_with_event: {
+        remark: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup248: frame_system::limits::BlockWeights
+   **/
+  FrameSystemLimitsBlockWeights: {
+    baseBlock: 'u64',
+    maxBlock: 'u64',
+    perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
+  },
+  /**
+   * Lookup249: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+   **/
+  FrameSupportWeightsPerDispatchClassWeightsPerClass: {
+    normal: 'FrameSystemLimitsWeightsPerClass',
+    operational: 'FrameSystemLimitsWeightsPerClass',
+    mandatory: 'FrameSystemLimitsWeightsPerClass'
+  },
+  /**
+   * Lookup250: frame_system::limits::WeightsPerClass
+   **/
+  FrameSystemLimitsWeightsPerClass: {
+    baseExtrinsic: 'u64',
+    maxExtrinsic: 'Option<u64>',
+    maxTotal: 'Option<u64>',
+    reserved: 'Option<u64>'
+  },
+  /**
+   * Lookup251: frame_system::limits::BlockLength
+   **/
+  FrameSystemLimitsBlockLength: {
+    max: 'FrameSupportWeightsPerDispatchClassU32'
+  },
+  /**
+   * Lookup252: frame_support::weights::PerDispatchClass<T>
+   **/
+  FrameSupportWeightsPerDispatchClassU32: {
+    normal: 'u32',
+    operational: 'u32',
+    mandatory: 'u32'
+  },
+  /**
+   * Lookup253: frame_support::weights::RuntimeDbWeight
+   **/
+  FrameSupportWeightsRuntimeDbWeight: {
+    read: 'u64',
+    write: 'u64'
+  },
+  /**
+   * Lookup254: sp_version::RuntimeVersion
+   **/
+  SpVersionRuntimeVersion: {
+    specName: 'Text',
+    implName: 'Text',
+    authoringVersion: 'u32',
+    specVersion: 'u32',
+    implVersion: 'u32',
+    apis: 'Vec<([u8;8],u32)>',
+    transactionVersion: 'u32',
+    stateVersion: 'u8'
+  },
+  /**
+   * Lookup260: frame_system::pallet::Error<T>
+   **/
+  FrameSystemError: {
+    _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
+  },
+  /**
+   * Lookup261: pallet_utility::pallet::Call<T>
+   **/
+  PalletUtilityCall: {
+    _enum: {
+      batch: {
+        calls: 'Vec<Call>',
+      },
+      as_derivative: {
+        index: 'u16',
+        call: 'Call',
+      },
+      batch_all: {
+        calls: 'Vec<Call>',
+      },
+      dispatch_as: {
+        asOrigin: 'JoystreamNodeRuntimeOriginCaller',
+        call: 'Call',
+      },
+      force_batch: {
+        calls: 'Vec<Call>'
+      }
+    }
+  },
+  /**
+   * Lookup264: pallet_babe::pallet::Call<T>
+   **/
+  PalletBabeCall: {
+    _enum: {
+      report_equivocation: {
+        equivocationProof: 'SpConsensusSlotsEquivocationProof',
+        keyOwnerProof: 'SpSessionMembershipProof',
+      },
+      report_equivocation_unsigned: {
+        equivocationProof: 'SpConsensusSlotsEquivocationProof',
+        keyOwnerProof: 'SpSessionMembershipProof',
+      },
+      plan_config_change: {
+        config: 'SpConsensusBabeDigestsNextConfigDescriptor'
+      }
+    }
+  },
+  /**
+   * Lookup265: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+   **/
+  SpConsensusSlotsEquivocationProof: {
+    offender: 'SpConsensusBabeAppPublic',
+    slot: 'u64',
+    firstHeader: 'SpRuntimeHeader',
+    secondHeader: 'SpRuntimeHeader'
+  },
+  /**
+   * Lookup266: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+   **/
+  SpRuntimeHeader: {
+    parentHash: 'H256',
+    number: 'Compact<u32>',
+    stateRoot: 'H256',
+    extrinsicsRoot: 'H256',
+    digest: 'SpRuntimeDigest'
+  },
+  /**
+   * Lookup267: sp_runtime::traits::BlakeTwo256
+   **/
+  SpRuntimeBlakeTwo256: 'Null',
+  /**
+   * Lookup268: sp_consensus_babe::app::Public
+   **/
+  SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
+  /**
+   * Lookup270: sp_session::MembershipProof
+   **/
+  SpSessionMembershipProof: {
+    session: 'u32',
+    trieNodes: 'Vec<Bytes>',
+    validatorCount: 'u32'
+  },
+  /**
+   * Lookup271: sp_consensus_babe::digests::NextConfigDescriptor
+   **/
+  SpConsensusBabeDigestsNextConfigDescriptor: {
+    _enum: {
+      __Unused0: 'Null',
+      V1: {
+        c: '(u64,u64)',
+        allowedSlots: 'SpConsensusBabeAllowedSlots'
+      }
+    }
+  },
+  /**
+   * Lookup272: sp_consensus_babe::AllowedSlots
+   **/
+  SpConsensusBabeAllowedSlots: {
+    _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
+  },
+  /**
+   * Lookup273: pallet_timestamp::pallet::Call<T>
+   **/
+  PalletTimestampCall: {
+    _enum: {
+      set: {
+        now: 'Compact<u64>'
+      }
+    }
+  },
+  /**
+   * Lookup275: pallet_authorship::pallet::Call<T>
+   **/
+  PalletAuthorshipCall: {
+    _enum: {
+      set_uncles: {
+        newUncles: 'Vec<SpRuntimeHeader>'
+      }
+    }
+  },
+  /**
+   * Lookup277: pallet_balances::pallet::Call<T, I>
+   **/
+  PalletBalancesCall: {
+    _enum: {
+      transfer: {
+        dest: 'AccountId32',
+        value: 'Compact<u128>',
+      },
+      set_balance: {
+        who: 'AccountId32',
+        newFree: 'Compact<u128>',
+        newReserved: 'Compact<u128>',
+      },
+      force_transfer: {
+        source: 'AccountId32',
+        dest: 'AccountId32',
+        value: 'Compact<u128>',
+      },
+      transfer_keep_alive: {
+        dest: 'AccountId32',
+        value: 'Compact<u128>',
+      },
+      transfer_all: {
+        dest: 'AccountId32',
+        keepAlive: 'bool',
+      },
+      force_unreserve: {
+        who: 'AccountId32',
+        amount: 'u128'
+      }
+    }
+  },
+  /**
+   * Lookup278: pallet_election_provider_multi_phase::pallet::Call<T>
+   **/
+  PalletElectionProviderMultiPhaseCall: {
+    _enum: {
+      submit_unsigned: {
+        rawSolution: 'PalletElectionProviderMultiPhaseRawSolution',
+        witness: 'PalletElectionProviderMultiPhaseSolutionOrSnapshotSize',
+      },
+      set_minimum_untrusted_score: {
+        maybeNextScore: 'Option<SpNposElectionsElectionScore>',
+      },
+      set_emergency_election_result: {
+        supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
+      },
+      submit: {
+        rawSolution: 'PalletElectionProviderMultiPhaseRawSolution',
+      },
+      governance_fallback: {
+        maybeMaxVoters: 'Option<u32>',
+        maybeMaxTargets: 'Option<u32>'
+      }
+    }
+  },
+  /**
+   * Lookup279: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+   **/
+  PalletElectionProviderMultiPhaseRawSolution: {
+    solution: 'JoystreamNodeRuntimeNposSolution16',
+    score: 'SpNposElectionsElectionScore',
+    round: 'u32'
+  },
+  /**
+   * Lookup280: joystream_node_runtime::NposSolution16
+   **/
+  JoystreamNodeRuntimeNposSolution16: {
+    votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
+    votes2: 'Vec<(Compact<u32>,(Compact<u16>,Compact<PerU16>),Compact<u16>)>',
+    votes3: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);2],Compact<u16>)>',
+    votes4: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);3],Compact<u16>)>',
+    votes5: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);4],Compact<u16>)>',
+    votes6: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);5],Compact<u16>)>',
+    votes7: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);6],Compact<u16>)>',
+    votes8: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);7],Compact<u16>)>',
+    votes9: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);8],Compact<u16>)>',
+    votes10: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);9],Compact<u16>)>',
+    votes11: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);10],Compact<u16>)>',
+    votes12: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);11],Compact<u16>)>',
+    votes13: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);12],Compact<u16>)>',
+    votes14: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);13],Compact<u16>)>',
+    votes15: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);14],Compact<u16>)>',
+    votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
+  },
+  /**
+   * Lookup331: sp_npos_elections::ElectionScore
+   **/
+  SpNposElectionsElectionScore: {
+    minimalStake: 'u128',
+    sumStake: 'u128',
+    sumStakeSquared: 'u128'
+  },
+  /**
+   * Lookup332: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+   **/
+  PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
+    voters: 'Compact<u32>',
+    targets: 'Compact<u32>'
+  },
+  /**
+   * Lookup336: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+   **/
+  SpNposElectionsSupport: {
+    total: 'u128',
+    voters: 'Vec<(AccountId32,u128)>'
+  },
+  /**
+   * Lookup338: pallet_staking::pallet::pallet::Call<T>
+   **/
+  PalletStakingPalletCall: {
+    _enum: {
+      bond: {
+        controller: 'AccountId32',
+        value: 'Compact<u128>',
+        payee: 'PalletStakingRewardDestination',
+      },
+      bond_extra: {
+        maxAdditional: 'Compact<u128>',
+      },
+      unbond: {
+        value: 'Compact<u128>',
+      },
+      withdraw_unbonded: {
+        numSlashingSpans: 'u32',
+      },
+      validate: {
+        prefs: 'PalletStakingValidatorPrefs',
+      },
+      nominate: {
+        targets: 'Vec<AccountId32>',
+      },
+      chill: 'Null',
+      set_payee: {
+        payee: 'PalletStakingRewardDestination',
+      },
+      set_controller: {
+        controller: 'AccountId32',
+      },
+      set_validator_count: {
+        _alias: {
+          new_: 'new',
+        },
+        new_: 'Compact<u32>',
+      },
+      increase_validator_count: {
+        additional: 'Compact<u32>',
+      },
+      scale_validator_count: {
+        factor: 'Percent',
+      },
+      force_no_eras: 'Null',
+      force_new_era: 'Null',
+      set_invulnerables: {
+        invulnerables: 'Vec<AccountId32>',
+      },
+      force_unstake: {
+        stash: 'AccountId32',
+        numSlashingSpans: 'u32',
+      },
+      force_new_era_always: 'Null',
+      cancel_deferred_slash: {
+        era: 'u32',
+        slashIndices: 'Vec<u32>',
+      },
+      payout_stakers: {
+        validatorStash: 'AccountId32',
+        era: 'u32',
+      },
+      rebond: {
+        value: 'Compact<u128>',
+      },
+      set_history_depth: {
+        newHistoryDepth: 'Compact<u32>',
+        eraItemsDeleted: 'Compact<u32>',
+      },
+      reap_stash: {
+        stash: 'AccountId32',
+        numSlashingSpans: 'u32',
+      },
+      kick: {
+        who: 'Vec<AccountId32>',
+      },
+      set_staking_configs: {
+        minNominatorBond: 'PalletStakingPalletConfigOpU128',
+        minValidatorBond: 'PalletStakingPalletConfigOpU128',
+        maxNominatorCount: 'PalletStakingPalletConfigOpU32',
+        maxValidatorCount: 'PalletStakingPalletConfigOpU32',
+        chillThreshold: 'PalletStakingPalletConfigOpPercent',
+        minCommission: 'PalletStakingPalletConfigOpPerbill',
+      },
+      chill_other: {
+        controller: 'AccountId32',
+      },
+      force_apply_min_commission: {
+        validatorStash: 'AccountId32'
+      }
+    }
+  },
+  /**
+   * Lookup339: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+   **/
+  PalletStakingRewardDestination: {
+    _enum: {
+      Staked: 'Null',
+      Stash: 'Null',
+      Controller: 'Null',
+      Account: 'AccountId32',
+      None: 'Null'
+    }
+  },
+  /**
+   * Lookup343: pallet_staking::pallet::pallet::ConfigOp<T>
+   **/
+  PalletStakingPalletConfigOpU128: {
+    _enum: {
+      Noop: 'Null',
+      Set: 'u128',
+      Remove: 'Null'
+    }
+  },
+  /**
+   * Lookup344: pallet_staking::pallet::pallet::ConfigOp<T>
+   **/
+  PalletStakingPalletConfigOpU32: {
+    _enum: {
+      Noop: 'Null',
+      Set: 'u32',
+      Remove: 'Null'
+    }
+  },
+  /**
+   * Lookup345: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+   **/
+  PalletStakingPalletConfigOpPercent: {
+    _enum: {
+      Noop: 'Null',
+      Set: 'Percent',
+      Remove: 'Null'
+    }
+  },
+  /**
+   * Lookup346: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+   **/
+  PalletStakingPalletConfigOpPerbill: {
+    _enum: {
+      Noop: 'Null',
+      Set: 'Perbill',
+      Remove: 'Null'
+    }
+  },
+  /**
+   * Lookup347: pallet_session::pallet::Call<T>
+   **/
+  PalletSessionCall: {
+    _enum: {
+      set_keys: {
+        _alias: {
+          keys_: 'keys',
+        },
+        keys_: 'JoystreamNodeRuntimeSessionKeys',
+        proof: 'Bytes',
+      },
+      purge_keys: 'Null'
+    }
+  },
+  /**
+   * Lookup348: joystream_node_runtime::SessionKeys
+   **/
+  JoystreamNodeRuntimeSessionKeys: {
+    grandpa: 'SpFinalityGrandpaAppPublic',
+    babe: 'SpConsensusBabeAppPublic',
+    imOnline: 'PalletImOnlineSr25519AppSr25519Public',
+    authorityDiscovery: 'SpAuthorityDiscoveryAppPublic'
+  },
+  /**
+   * Lookup349: sp_authority_discovery::app::Public
+   **/
+  SpAuthorityDiscoveryAppPublic: 'SpCoreSr25519Public',
+  /**
+   * Lookup350: pallet_grandpa::pallet::Call<T>
+   **/
+  PalletGrandpaCall: {
+    _enum: {
+      report_equivocation: {
+        equivocationProof: 'SpFinalityGrandpaEquivocationProof',
+        keyOwnerProof: 'SpSessionMembershipProof',
+      },
+      report_equivocation_unsigned: {
+        equivocationProof: 'SpFinalityGrandpaEquivocationProof',
+        keyOwnerProof: 'SpSessionMembershipProof',
+      },
+      note_stalled: {
+        delay: 'u32',
+        bestFinalizedBlockNumber: 'u32'
+      }
+    }
+  },
+  /**
+   * Lookup351: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+   **/
+  SpFinalityGrandpaEquivocationProof: {
+    setId: 'u64',
+    equivocation: 'SpFinalityGrandpaEquivocation'
+  },
+  /**
+   * Lookup352: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+   **/
+  SpFinalityGrandpaEquivocation: {
+    _enum: {
+      Prevote: 'FinalityGrandpaEquivocationPrevote',
+      Precommit: 'FinalityGrandpaEquivocationPrecommit'
+    }
+  },
+  /**
+   * Lookup353: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+   **/
+  FinalityGrandpaEquivocationPrevote: {
+    roundNumber: 'u64',
+    identity: 'SpFinalityGrandpaAppPublic',
+    first: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)',
+    second: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)'
+  },
+  /**
+   * Lookup354: finality_grandpa::Prevote<primitive_types::H256, N>
+   **/
+  FinalityGrandpaPrevote: {
+    targetHash: 'H256',
+    targetNumber: 'u32'
+  },
+  /**
+   * Lookup355: sp_finality_grandpa::app::Signature
+   **/
+  SpFinalityGrandpaAppSignature: 'SpCoreEd25519Signature',
+  /**
+   * Lookup356: sp_core::ed25519::Signature
+   **/
+  SpCoreEd25519Signature: '[u8;64]',
+  /**
+   * Lookup359: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+   **/
+  FinalityGrandpaEquivocationPrecommit: {
+    roundNumber: 'u64',
+    identity: 'SpFinalityGrandpaAppPublic',
+    first: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)',
+    second: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)'
+  },
+  /**
+   * Lookup360: finality_grandpa::Precommit<primitive_types::H256, N>
+   **/
+  FinalityGrandpaPrecommit: {
+    targetHash: 'H256',
+    targetNumber: 'u32'
+  },
+  /**
+   * Lookup362: pallet_im_online::pallet::Call<T>
+   **/
+  PalletImOnlineCall: {
+    _enum: {
+      heartbeat: {
+        heartbeat: 'PalletImOnlineHeartbeat',
+        signature: 'PalletImOnlineSr25519AppSr25519Signature'
+      }
+    }
+  },
+  /**
+   * Lookup363: pallet_im_online::Heartbeat<BlockNumber>
+   **/
+  PalletImOnlineHeartbeat: {
+    blockNumber: 'u32',
+    networkState: 'SpCoreOffchainOpaqueNetworkState',
+    sessionIndex: 'u32',
+    authorityIndex: 'u32',
+    validatorsLen: 'u32'
+  },
+  /**
+   * Lookup364: sp_core::offchain::OpaqueNetworkState
+   **/
+  SpCoreOffchainOpaqueNetworkState: {
+    peerId: 'Bytes',
+    externalAddresses: 'Vec<Bytes>'
+  },
+  /**
+   * Lookup368: pallet_im_online::sr25519::app_sr25519::Signature
+   **/
+  PalletImOnlineSr25519AppSr25519Signature: 'SpCoreSr25519Signature',
+  /**
+   * Lookup369: sp_core::sr25519::Signature
+   **/
+  SpCoreSr25519Signature: '[u8;64]',
+  /**
+   * Lookup370: pallet_bags_list::pallet::Call<T, I>
+   **/
+  PalletBagsListCall: {
+    _enum: {
+      rebag: {
+        dislocated: 'AccountId32',
+      },
+      put_in_front_of: {
+        lighter: 'AccountId32'
+      }
+    }
+  },
+  /**
+   * Lookup371: pallet_vesting::pallet::Call<T>
+   **/
+  PalletVestingCall: {
+    _enum: {
+      vest: 'Null',
+      vest_other: {
+        target: 'AccountId32',
+      },
+      vested_transfer: {
+        target: 'AccountId32',
+        schedule: 'PalletVestingVestingInfo',
+      },
+      force_vested_transfer: {
+        source: 'AccountId32',
+        target: 'AccountId32',
+        schedule: 'PalletVestingVestingInfo',
+      },
+      merge_schedules: {
+        schedule1Index: 'u32',
+        schedule2Index: 'u32'
+      }
+    }
+  },
+  /**
+   * Lookup372: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+   **/
+  PalletVestingVestingInfo: {
+    locked: 'u128',
+    perBlock: 'u128',
+    startingBlock: 'u32'
+  },
+  /**
+   * Lookup373: pallet_multisig::pallet::Call<T>
+   **/
+  PalletMultisigCall: {
+    _enum: {
+      as_multi_threshold_1: {
+        otherSignatories: 'Vec<AccountId32>',
+        call: 'Call',
+      },
+      as_multi: {
+        threshold: 'u16',
+        otherSignatories: 'Vec<AccountId32>',
+        maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+        call: 'WrapperKeepOpaque<Call>',
+        storeCall: 'bool',
+        maxWeight: 'u64',
+      },
+      approve_as_multi: {
+        threshold: 'u16',
+        otherSignatories: 'Vec<AccountId32>',
+        maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+        callHash: '[u8;32]',
+        maxWeight: 'u64',
+      },
+      cancel_as_multi: {
+        threshold: 'u16',
+        otherSignatories: 'Vec<AccountId32>',
+        timepoint: 'PalletMultisigTimepoint',
+        callHash: '[u8;32]'
+      }
+    }
+  },
+  /**
+   * Lookup376: pallet_council::Call<T>
+   **/
+  PalletCouncilCall: {
+    _enum: {
+      announce_candidacy: {
+        membershipId: 'u64',
+        stakingAccountId: 'AccountId32',
+        rewardAccountId: 'AccountId32',
+        stake: 'u128',
+      },
+      release_candidacy_stake: {
+        membershipId: 'u64',
+      },
+      withdraw_candidacy: {
+        membershipId: 'u64',
+      },
+      set_candidacy_note: {
+        membershipId: 'u64',
+        note: 'Bytes',
+      },
+      set_budget: {
+        balance: 'u128',
+      },
+      plan_budget_refill: {
+        nextRefill: 'u32',
+      },
+      set_budget_increment: {
+        budgetIncrement: 'u128',
+      },
+      set_councilor_reward: {
+        councilorReward: 'u128',
+      },
+      funding_request: {
+        fundingRequests: 'Vec<PalletCommonFundingRequestParameters>',
+      },
+      fund_council_budget: {
+        memberId: 'u64',
+        amount: 'u128',
+        rationale: 'Bytes',
+      },
+      councilor_remark: {
+        councilorId: 'u64',
+        msg: 'Bytes',
+      },
+      candidate_remark: {
+        candidateId: 'u64',
+        msg: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup377: pallet_referendum::Call<T, I>
+   **/
+  PalletReferendumCall: {
+    _enum: {
+      vote: {
+        commitment: 'H256',
+        stake: 'u128',
+      },
+      reveal_vote: {
+        salt: 'Bytes',
+        voteOptionId: 'u64',
+      },
+      release_vote_stake: 'Null',
+      opt_out_of_voting: 'Null'
+    }
+  },
+  /**
+   * Lookup378: pallet_membership::Call<T>
+   **/
+  PalletMembershipCall: {
+    _enum: {
+      buy_membership: {
+        params: 'PalletMembershipBuyMembershipParameters',
+      },
+      update_profile: {
+        memberId: 'u64',
+        handle: 'Option<Bytes>',
+        metadata: 'Option<Bytes>',
+      },
+      update_accounts: {
+        memberId: 'u64',
+        newRootAccount: 'Option<AccountId32>',
+        newControllerAccount: 'Option<AccountId32>',
+      },
+      update_profile_verification: {
+        workerId: 'u64',
+        targetMemberId: 'u64',
+        isVerified: 'bool',
+      },
+      set_referral_cut: {
+        percentValue: 'u8',
+      },
+      transfer_invites: {
+        sourceMemberId: 'u64',
+        targetMemberId: 'u64',
+        numberOfInvites: 'u32',
+      },
+      invite_member: {
+        params: 'PalletMembershipInviteMembershipParameters',
+      },
+      gift_membership: {
+        params: 'PalletMembershipGiftMembershipParameters',
+      },
+      set_membership_price: {
+        newPrice: 'u128',
+      },
+      set_leader_invitation_quota: {
+        invitationQuota: 'u32',
+      },
+      set_initial_invitation_balance: {
+        newInitialBalance: 'u128',
+      },
+      set_initial_invitation_count: {
+        newInvitationCount: 'u32',
+      },
+      add_staking_account_candidate: {
+        memberId: 'u64',
+      },
+      remove_staking_account: {
+        memberId: 'u64',
+      },
+      confirm_staking_account: {
+        memberId: 'u64',
+        stakingAccountId: 'AccountId32',
+      },
+      member_remark: {
+        memberId: 'u64',
+        msg: 'Bytes',
+        payment: 'Option<(AccountId32,u128)>',
+      },
+      create_member: {
+        params: 'PalletMembershipCreateMemberParameters'
+      }
+    }
+  },
+  /**
+   * Lookup379: pallet_forum::Call<T>
+   **/
+  PalletForumCall: {
+    _enum: {
+      update_category_membership_of_moderator: {
+        moderatorId: 'u64',
+        categoryId: 'u64',
+        newValue: 'bool',
+      },
+      create_category: {
+        parentCategoryId: 'Option<u64>',
+        title: 'Bytes',
+        description: 'Bytes',
+      },
+      update_category_archival_status: {
+        actor: 'PalletForumPrivilegedActor',
+        categoryId: 'u64',
+        newArchivalStatus: 'bool',
+      },
+      update_category_title: {
+        actor: 'PalletForumPrivilegedActor',
+        categoryId: 'u64',
+        title: 'Bytes',
+      },
+      update_category_description: {
+        actor: 'PalletForumPrivilegedActor',
+        categoryId: 'u64',
+        description: 'Bytes',
+      },
+      delete_category: {
+        actor: 'PalletForumPrivilegedActor',
+        categoryId: 'u64',
+      },
+      create_thread: {
+        forumUserId: 'u64',
+        categoryId: 'u64',
+        metadata: 'Bytes',
+        text: 'Bytes',
+      },
+      edit_thread_metadata: {
+        forumUserId: 'u64',
+        categoryId: 'u64',
+        threadId: 'u64',
+        newMetadata: 'Bytes',
+      },
+      delete_thread: {
+        forumUserId: 'u64',
+        categoryId: 'u64',
+        threadId: 'u64',
+        hide: 'bool',
+      },
+      move_thread_to_category: {
+        actor: 'PalletForumPrivilegedActor',
+        categoryId: 'u64',
+        threadId: 'u64',
+        newCategoryId: 'u64',
+      },
+      moderate_thread: {
+        actor: 'PalletForumPrivilegedActor',
+        categoryId: 'u64',
+        threadId: 'u64',
+        rationale: 'Bytes',
+      },
+      add_post: {
+        forumUserId: 'u64',
+        categoryId: 'u64',
+        threadId: 'u64',
+        text: 'Bytes',
+        editable: 'bool',
+      },
+      edit_post_text: {
+        forumUserId: 'u64',
+        categoryId: 'u64',
+        threadId: 'u64',
+        postId: 'u64',
+        newText: 'Bytes',
+      },
+      moderate_post: {
+        actor: 'PalletForumPrivilegedActor',
+        categoryId: 'u64',
+        threadId: 'u64',
+        postId: 'u64',
+        rationale: 'Bytes',
+      },
+      delete_posts: {
+        forumUserId: 'u64',
+        posts: 'BTreeMap<PalletForumExtendedPostIdObject, bool>',
+        rationale: 'Bytes',
+      },
+      set_stickied_threads: {
+        actor: 'PalletForumPrivilegedActor',
+        categoryId: 'u64',
+        stickiedIds: 'BTreeSet<u64>'
+      }
+    }
+  },
+  /**
+   * Lookup380: pallet_constitution::Call<T>
+   **/
+  PalletConstitutionCall: {
+    _enum: {
+      amend_constitution: {
+        constitutionText: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup381: pallet_bounty::Call<T>
+   **/
+  PalletBountyCall: {
+    _enum: {
+      create_bounty: {
+        params: 'PalletBountyBountyParametersBTreeSet',
+        metadata: 'Bytes',
+      },
+      fund_bounty: {
+        funder: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+        amount: 'u128',
+      },
+      terminate_bounty: {
+        bountyId: 'u64',
+      },
+      switch_oracle: {
+        newOracle: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+      },
+      withdraw_funding: {
+        funder: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+      },
+      announce_work_entry: {
+        memberId: 'u64',
+        bountyId: 'u64',
+        stakingAccountId: 'AccountId32',
+        workDescription: 'Bytes',
+      },
+      submit_work: {
+        memberId: 'u64',
+        bountyId: 'u64',
+        entryId: 'u64',
+        workData: 'Bytes',
+      },
+      end_working_period: {
+        bountyId: 'u64',
+      },
+      submit_oracle_judgment: {
+        bountyId: 'u64',
+        judgment: 'BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>',
+        rationale: 'Bytes',
+      },
+      withdraw_entrant_stake: {
+        memberId: 'u64',
+        bountyId: 'u64',
+        entryId: 'u64',
+      },
+      withdraw_oracle_reward: {
+        bountyId: 'u64',
+      },
+      contributor_remark: {
+        contributor: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+        msg: 'Bytes',
+      },
+      oracle_remark: {
+        oracle: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+        msg: 'Bytes',
+      },
+      entrant_remark: {
+        entrantId: 'u64',
+        bountyId: 'u64',
+        entryId: 'u64',
+        msg: 'Bytes',
+      },
+      creator_remark: {
+        creator: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+        msg: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup383: pallet_content::Call<T>
+   **/
+  PalletContentCall: {
+    _enum: {
+      create_curator_group: {
+        isActive: 'bool',
+        permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>',
+      },
+      update_curator_group_permissions: {
+        curatorGroupId: 'u64',
+        permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>',
+      },
+      set_curator_group_status: {
+        curatorGroupId: 'u64',
+        isActive: 'bool',
+      },
+      add_curator_to_group: {
+        curatorGroupId: 'u64',
+        curatorId: 'u64',
+        permissions: 'BTreeSet<PalletContentIterableEnumsChannelActionPermission>',
+      },
+      remove_curator_from_group: {
+        curatorGroupId: 'u64',
+        curatorId: 'u64',
+      },
+      create_channel: {
+        channelOwner: 'PalletContentChannelOwner',
+        params: 'PalletContentChannelCreationParametersRecord',
+      },
+      update_channel: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        params: 'PalletContentChannelUpdateParametersRecord',
+      },
+      update_channel_privilege_level: {
+        channelId: 'u64',
+        newPrivilegeLevel: 'u8',
+      },
+      set_channel_paused_features_as_moderator: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        newPausedFeatures: 'BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>',
+        rationale: 'Bytes',
+      },
+      delete_channel: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        channelBagWitness: 'PalletContentChannelBagWitness',
+        numObjectsToDelete: 'u64',
+      },
+      delete_channel_assets_as_moderator: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        assetsToRemove: 'BTreeSet<u64>',
+        storageBucketsNumWitness: 'u32',
+        rationale: 'Bytes',
+      },
+      delete_channel_as_moderator: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        channelBagWitness: 'PalletContentChannelBagWitness',
+        numObjectsToDelete: 'u64',
+        rationale: 'Bytes',
+      },
+      set_channel_visibility_as_moderator: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        isHidden: 'bool',
+        rationale: 'Bytes',
+      },
+      create_video: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        params: 'PalletContentVideoCreationParametersRecord',
+      },
+      update_video: {
+        actor: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        params: 'PalletContentVideoUpdateParametersRecord',
+      },
+      delete_video: {
+        actor: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        numObjectsToDelete: 'u64',
+        storageBucketsNumWitness: 'Option<u32>',
+      },
+      delete_video_assets_as_moderator: {
+        actor: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        storageBucketsNumWitness: 'u32',
+        assetsToRemove: 'BTreeSet<u64>',
+        rationale: 'Bytes',
+      },
+      delete_video_as_moderator: {
+        actor: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        storageBucketsNumWitness: 'Option<u32>',
+        numObjectsToDelete: 'u64',
+        rationale: 'Bytes',
+      },
+      set_video_visibility_as_moderator: {
+        actor: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        isHidden: 'bool',
+        rationale: 'Bytes',
+      },
+      update_channel_payouts: {
+        params: 'PalletContentUpdateChannelPayoutsParametersRecord',
+        uploaderAccount: 'AccountId32',
+      },
+      claim_channel_reward: {
+        actor: 'PalletContentPermissionsContentActor',
+        proof: 'Vec<PalletCommonMerkleTreeProofElementRecord>',
+        item: 'PalletContentPullPaymentElement',
+      },
+      withdraw_from_channel_balance: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        amount: 'u128',
+      },
+      update_channel_state_bloat_bond: {
+        newChannelStateBloatBond: 'u128',
+      },
+      update_video_state_bloat_bond: {
+        newVideoStateBloatBond: 'u128',
+      },
+      claim_and_withdraw_channel_reward: {
+        actor: 'PalletContentPermissionsContentActor',
+        proof: 'Vec<PalletCommonMerkleTreeProofElementRecord>',
+        item: 'PalletContentPullPaymentElement',
+      },
+      issue_nft: {
+        actor: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        params: 'PalletContentNftTypesNftIssuanceParametersRecord',
+      },
+      destroy_nft: {
+        actor: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+      },
+      start_open_auction: {
+        ownerId: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        auctionParams: 'PalletContentNftTypesOpenAuctionParamsRecord',
+      },
+      start_english_auction: {
+        ownerId: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        auctionParams: 'PalletContentNftTypesEnglishAuctionParamsRecord',
+      },
+      cancel_english_auction: {
+        ownerId: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+      },
+      cancel_open_auction: {
+        ownerId: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+      },
+      cancel_offer: {
+        ownerId: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+      },
+      cancel_buy_now: {
+        ownerId: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+      },
+      update_buy_now_price: {
+        ownerId: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        newPrice: 'u128',
+      },
+      make_open_auction_bid: {
+        participantId: 'u64',
+        videoId: 'u64',
+        bidAmount: 'u128',
+      },
+      make_english_auction_bid: {
+        participantId: 'u64',
+        videoId: 'u64',
+        bidAmount: 'u128',
+      },
+      cancel_open_auction_bid: {
+        participantId: 'u64',
+        videoId: 'u64',
+      },
+      settle_english_auction: {
+        videoId: 'u64',
+      },
+      pick_open_auction_winner: {
+        ownerId: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        winnerId: 'u64',
+        commit: 'u128',
+      },
+      offer_nft: {
+        videoId: 'u64',
+        ownerId: 'PalletContentPermissionsContentActor',
+        to: 'u64',
+        price: 'Option<u128>',
+      },
+      sling_nft_back: {
+        videoId: 'u64',
+        ownerId: 'PalletContentPermissionsContentActor',
+      },
+      accept_incoming_offer: {
+        videoId: 'u64',
+        witnessPrice: 'Option<u128>',
+      },
+      sell_nft: {
+        videoId: 'u64',
+        ownerId: 'PalletContentPermissionsContentActor',
+        price: 'u128',
+      },
+      buy_nft: {
+        videoId: 'u64',
+        participantId: 'u64',
+        witnessPrice: 'u128',
+      },
+      toggle_nft_limits: {
+        enabled: 'bool',
+      },
+      channel_owner_remark: {
+        channelId: 'u64',
+        msg: 'Bytes',
+      },
+      creator_token_issuer_remark: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        msg: 'Bytes',
+      },
+      channel_agent_remark: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        msg: 'Bytes',
+      },
+      nft_owner_remark: {
+        actor: 'PalletContentPermissionsContentActor',
+        videoId: 'u64',
+        msg: 'Bytes',
+      },
+      initialize_channel_transfer: {
+        channelId: 'u64',
+        actor: 'PalletContentPermissionsContentActor',
+        transferParams: 'PalletContentInitTransferParameters',
+      },
+      cancel_channel_transfer: {
+        channelId: 'u64',
+        actor: 'PalletContentPermissionsContentActor',
+      },
+      accept_channel_transfer: {
+        channelId: 'u64',
+        commitmentParams: 'PalletContentTransferCommitmentParametersBTreeMap',
+      },
+      update_global_nft_limit: {
+        nftLimitPeriod: 'PalletContentNftLimitPeriod',
+        limit: 'u64',
+      },
+      update_channel_nft_limit: {
+        actor: 'PalletContentPermissionsContentActor',
+        nftLimitPeriod: 'PalletContentNftLimitPeriod',
+        channelId: 'u64',
+        limit: 'u64',
+      },
+      issue_creator_token: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        params: 'PalletProjectTokenTokenIssuanceParameters',
+      },
+      init_creator_token_sale: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        params: 'PalletProjectTokenTokenSaleParams',
+      },
+      update_upcoming_creator_token_sale: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        newStartBlock: 'Option<u32>',
+        newDuration: 'Option<u32>',
+      },
+      creator_token_issuer_transfer: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        outputs: 'Vec<(u64,PalletProjectTokenPaymentWithVesting)>',
+        metadata: 'Bytes',
+      },
+      make_creator_token_permissionless: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+      },
+      reduce_creator_token_patronage_rate_to: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        targetRate: 'Permill',
+      },
+      claim_creator_token_patronage_credit: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+      },
+      issue_revenue_split: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        start: 'Option<u32>',
+        duration: 'u32',
+      },
+      finalize_revenue_split: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+      },
+      finalize_creator_token_sale: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+      },
+      deissue_creator_token: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+      },
+      activate_amm: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        params: 'PalletProjectTokenAmmParams',
+      },
+      deactivate_amm: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64'
+      }
+    }
+  },
+  /**
+   * Lookup384: pallet_content::types::ChannelBagWitness
+   **/
+  PalletContentChannelBagWitness: {
+    storageBucketsNum: 'u32',
+    distributionBucketsNum: 'u32'
+  },
+  /**
+   * Lookup386: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+   **/
+  PalletCommonMerkleTreeProofElementRecord: {
+    _alias: {
+      hash_: 'hash'
+    },
+    hash_: 'H256',
+    side: 'PalletCommonMerkleTreeSide'
+  },
+  /**
+   * Lookup387: pallet_common::merkle_tree::Side
+   **/
+  PalletCommonMerkleTreeSide: {
+    _enum: ['Left', 'Right']
+  },
+  /**
+   * Lookup388: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+   **/
+  PalletContentPullPaymentElement: {
+    channelId: 'u64',
+    cumulativeRewardEarned: 'u128',
+    reason: 'H256'
+  },
+  /**
+   * Lookup389: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+   **/
+  PalletContentInitTransferParameters: {
+    newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+    price: 'u128',
+    newOwner: 'PalletContentChannelOwner'
+  },
+  /**
+   * Lookup390: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   **/
+  PalletProjectTokenTokenSaleParams: {
+    unitPrice: 'u128',
+    upperBoundQuantity: 'u128',
+    startsAt: 'Option<u32>',
+    duration: 'u32',
+    vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>',
+    capPerMember: 'Option<u128>',
+    metadata: 'Option<Bytes>'
+  },
+  /**
+   * Lookup394: pallet_project_token::types::AmmParams<Balance>
+   **/
+  PalletProjectTokenAmmParams: {
+    slope: 'u128',
+    intercept: 'u128'
+  },
+  /**
+   * Lookup395: pallet_storage::Call<T>
+   **/
+  PalletStorageCall: {
+    _enum: {
+      delete_storage_bucket: {
+        storageBucketId: 'u64',
+      },
+      update_uploading_blocked_status: {
+        newStatus: 'bool',
+      },
+      update_data_size_fee: {
+        newDataSizeFee: 'u128',
+      },
+      update_storage_buckets_per_bag_limit: {
+        newLimit: 'u32',
+      },
+      update_storage_buckets_voucher_max_limits: {
+        newObjectsSize: 'u64',
+        newObjectsNumber: 'u64',
+      },
+      update_data_object_state_bloat_bond: {
+        stateBloatBond: 'u128',
+      },
+      update_number_of_storage_buckets_in_dynamic_bag_creation_policy: {
+        dynamicBagType: 'PalletStorageDynamicBagType',
+        numberOfStorageBuckets: 'u32',
+      },
+      update_blacklist: {
+        removeHashes: 'BTreeSet<Bytes>',
+        addHashes: 'BTreeSet<Bytes>',
+      },
+      create_storage_bucket: {
+        inviteWorker: 'Option<u64>',
+        acceptingNewBags: 'bool',
+        sizeLimit: 'u64',
+        objectsLimit: 'u64',
+      },
+      update_storage_buckets_for_bag: {
+        bagId: 'PalletStorageBagIdType',
+        addBuckets: 'BTreeSet<u64>',
+        removeBuckets: 'BTreeSet<u64>',
+      },
+      cancel_storage_bucket_operator_invite: {
+        storageBucketId: 'u64',
+      },
+      invite_storage_bucket_operator: {
+        storageBucketId: 'u64',
+        operatorId: 'u64',
+      },
+      remove_storage_bucket_operator: {
+        storageBucketId: 'u64',
+      },
+      update_storage_bucket_status: {
+        storageBucketId: 'u64',
+        acceptingNewBags: 'bool',
+      },
+      set_storage_bucket_voucher_limits: {
+        storageBucketId: 'u64',
+        newObjectsSizeLimit: 'u64',
+        newObjectsNumberLimit: 'u64',
+      },
+      accept_storage_bucket_invitation: {
+        workerId: 'u64',
+        storageBucketId: 'u64',
+        transactorAccountId: 'AccountId32',
+      },
+      set_storage_operator_metadata: {
+        workerId: 'u64',
+        storageBucketId: 'u64',
+        metadata: 'Bytes',
+      },
+      accept_pending_data_objects: {
+        workerId: 'u64',
+        storageBucketId: 'u64',
+        bagId: 'PalletStorageBagIdType',
+        dataObjects: 'BTreeSet<u64>',
+      },
+      create_distribution_bucket_family: 'Null',
+      delete_distribution_bucket_family: {
+        familyId: 'u64',
+      },
+      create_distribution_bucket: {
+        familyId: 'u64',
+        acceptingNewBags: 'bool',
+      },
+      update_distribution_bucket_status: {
+        bucketId: 'PalletStorageDistributionBucketIdRecord',
+        acceptingNewBags: 'bool',
+      },
+      delete_distribution_bucket: {
+        bucketId: 'PalletStorageDistributionBucketIdRecord',
+      },
+      update_distribution_buckets_for_bag: {
+        bagId: 'PalletStorageBagIdType',
+        familyId: 'u64',
+        addBucketsIndices: 'BTreeSet<u64>',
+        removeBucketsIndices: 'BTreeSet<u64>',
+      },
+      update_distribution_buckets_per_bag_limit: {
+        newLimit: 'u32',
+      },
+      update_distribution_bucket_mode: {
+        bucketId: 'PalletStorageDistributionBucketIdRecord',
+        distributing: 'bool',
+      },
+      update_families_in_dynamic_bag_creation_policy: {
+        dynamicBagType: 'PalletStorageDynamicBagType',
+        families: 'BTreeMap<u64, u32>',
+      },
+      invite_distribution_bucket_operator: {
+        bucketId: 'PalletStorageDistributionBucketIdRecord',
+        operatorWorkerId: 'u64',
+      },
+      cancel_distribution_bucket_operator_invite: {
+        bucketId: 'PalletStorageDistributionBucketIdRecord',
+        operatorWorkerId: 'u64',
+      },
+      remove_distribution_bucket_operator: {
+        bucketId: 'PalletStorageDistributionBucketIdRecord',
+        operatorWorkerId: 'u64',
+      },
+      set_distribution_bucket_family_metadata: {
+        familyId: 'u64',
+        metadata: 'Bytes',
+      },
+      accept_distribution_bucket_invitation: {
+        workerId: 'u64',
+        bucketId: 'PalletStorageDistributionBucketIdRecord',
+      },
+      set_distribution_operator_metadata: {
+        workerId: 'u64',
+        bucketId: 'PalletStorageDistributionBucketIdRecord',
+        metadata: 'Bytes',
+      },
+      storage_operator_remark: {
+        workerId: 'u64',
+        storageBucketId: 'u64',
+        msg: 'Bytes',
+      },
+      distribution_operator_remark: {
+        workerId: 'u64',
+        distributionBucketId: 'PalletStorageDistributionBucketIdRecord',
+        msg: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup396: pallet_project_token::Call<T>
+   **/
+  PalletProjectTokenCall: {
+    _enum: {
+      transfer: {
+        srcMemberId: 'u64',
+        tokenId: 'u64',
+        outputs: 'Vec<(u64,u128)>',
+        metadata: 'Bytes',
+      },
+      burn: {
+        tokenId: 'u64',
+        memberId: 'u64',
+        amount: 'u128',
+      },
+      dust_account: {
+        tokenId: 'u64',
+        memberId: 'u64',
+      },
+      join_whitelist: {
+        memberId: 'u64',
+        tokenId: 'u64',
+        proof: 'PalletProjectTokenMerkleProof',
+      },
+      purchase_tokens_on_sale: {
+        tokenId: 'u64',
+        memberId: 'u64',
+        amount: 'u128',
+      },
+      participate_in_split: {
+        tokenId: 'u64',
+        memberId: 'u64',
+        amount: 'u128',
+      },
+      exit_revenue_split: {
+        tokenId: 'u64',
+        memberId: 'u64',
+      },
+      buy_on_amm: {
+        tokenId: 'u64',
+        memberId: 'u64',
+        amount: 'u128',
+        slippageTolerance: 'Option<(Permill,u128)>',
+      },
+      sell_on_amm: {
+        tokenId: 'u64',
+        memberId: 'u64',
+        amount: 'u128',
+        slippageTolerance: 'Option<(Permill,u128)>',
+      },
+      update_max_yearly_patronage_rate: {
+        rate: 'Permill'
+      }
+    }
+  },
+  /**
+   * Lookup400: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+   **/
+  PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
+  /**
+   * Lookup403: pallet_project_token::types::MerkleSide
+   **/
+  PalletProjectTokenMerkleSide: {
+    _enum: ['Right', 'Left']
+  },
+  /**
+   * Lookup406: pallet_proposals_engine::Call<T>
+   **/
+  PalletProposalsEngineCall: {
+    _enum: {
+      vote: {
+        voterId: 'u64',
+        proposalId: 'u32',
+        vote: 'PalletProposalsEngineVoteKind',
+        rationale: 'Bytes',
+      },
+      cancel_proposal: {
+        proposerId: 'u64',
+        proposalId: 'u32',
+      },
+      veto_proposal: {
+        proposalId: 'u32',
+      },
+      proposer_remark: {
+        proposalId: 'u32',
+        proposerId: 'u64',
+        msg: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup407: pallet_proposals_discussion::Call<T>
+   **/
+  PalletProposalsDiscussionCall: {
+    _enum: {
+      add_post: {
+        postAuthorId: 'u64',
+        threadId: 'u64',
+        text: 'Bytes',
+        editable: 'bool',
+      },
+      delete_post: {
+        deleterId: 'u64',
+        postId: 'u64',
+        threadId: 'u64',
+        hide: 'bool',
+      },
+      update_post: {
+        threadId: 'u64',
+        postId: 'u64',
+        text: 'Bytes',
+      },
+      change_thread_mode: {
+        memberId: 'u64',
+        threadId: 'u64',
+        mode: 'PalletProposalsDiscussionThreadModeBTreeSet'
+      }
+    }
+  },
+  /**
+   * Lookup408: pallet_proposals_codex::Call<T>
+   **/
+  PalletProposalsCodexCall: {
+    _enum: {
+      create_proposal: {
+        generalProposalParameters: 'PalletProposalsCodexGeneralProposalParams',
+        proposalDetails: 'PalletProposalsCodexProposalDetails'
+      }
+    }
+  },
+  /**
+   * Lookup409: pallet_working_group::Call<T, I>
+   **/
+  PalletWorkingGroupCall: {
+    _enum: {
+      add_opening: {
+        description: 'Bytes',
+        openingType: 'PalletWorkingGroupOpeningType',
+        stakePolicy: 'PalletWorkingGroupStakePolicy',
+        rewardPerBlock: 'Option<u128>',
+      },
+      apply_on_opening: {
+        p: 'PalletWorkingGroupApplyOnOpeningParams',
+      },
+      fill_opening: {
+        openingId: 'u64',
+        successfulApplicationIds: 'BTreeSet<u64>',
+      },
+      update_role_account: {
+        workerId: 'u64',
+        newRoleAccountId: 'AccountId32',
+      },
+      leave_role: {
+        workerId: 'u64',
+        rationale: 'Option<Bytes>',
+      },
+      terminate_role: {
+        workerId: 'u64',
+        penalty: 'Option<u128>',
+        rationale: 'Option<Bytes>',
+      },
+      slash_stake: {
+        workerId: 'u64',
+        penalty: 'u128',
+        rationale: 'Option<Bytes>',
+      },
+      decrease_stake: {
+        workerId: 'u64',
+        stakeBalanceDelta: 'u128',
+      },
+      increase_stake: {
+        workerId: 'u64',
+        stakeBalanceDelta: 'u128',
+      },
+      withdraw_application: {
+        applicationId: 'u64',
+      },
+      cancel_opening: {
+        openingId: 'u64',
+      },
+      set_budget: {
+        newBudget: 'u128',
+      },
+      update_reward_account: {
+        workerId: 'u64',
+        newRewardAccountId: 'AccountId32',
+      },
+      update_reward_amount: {
+        workerId: 'u64',
+        rewardPerBlock: 'Option<u128>',
+      },
+      set_status_text: {
+        statusText: 'Option<Bytes>',
+      },
+      spend_from_budget: {
+        accountId: 'AccountId32',
+        amount: 'u128',
+        rationale: 'Option<Bytes>',
+      },
+      fund_working_group_budget: {
+        memberId: 'u64',
+        amount: 'u128',
+        rationale: 'Bytes',
+      },
+      lead_remark: {
+        msg: 'Bytes',
+      },
+      worker_remark: {
+        workerId: 'u64',
+        msg: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup418: joystream_node_runtime::OriginCaller
+   **/
+  JoystreamNodeRuntimeOriginCaller: {
+    _enum: {
+      system: 'FrameSupportDispatchRawOrigin',
+      Void: 'SpCoreVoid'
+    }
+  },
+  /**
+   * Lookup419: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+   **/
+  FrameSupportDispatchRawOrigin: {
+    _enum: {
+      Root: 'Null',
+      Signed: 'AccountId32',
+      None: 'Null'
+    }
+  },
+  /**
+   * Lookup420: sp_core::Void
+   **/
+  SpCoreVoid: 'Null',
+  /**
+   * Lookup421: pallet_utility::pallet::Error<T>
+   **/
+  PalletUtilityError: {
+    _enum: ['TooManyCalls']
+  },
+  /**
+   * Lookup428: sp_consensus_babe::digests::PreDigest
+   **/
+  SpConsensusBabeDigestsPreDigest: {
+    _enum: {
+      __Unused0: 'Null',
+      Primary: 'SpConsensusBabeDigestsPrimaryPreDigest',
+      SecondaryPlain: 'SpConsensusBabeDigestsSecondaryPlainPreDigest',
+      SecondaryVRF: 'SpConsensusBabeDigestsSecondaryVRFPreDigest'
+    }
+  },
+  /**
+   * Lookup429: sp_consensus_babe::digests::PrimaryPreDigest
+   **/
+  SpConsensusBabeDigestsPrimaryPreDigest: {
+    authorityIndex: 'u32',
+    slot: 'u64',
+    vrfOutput: '[u8;32]',
+    vrfProof: '[u8;64]'
+  },
+  /**
+   * Lookup430: sp_consensus_babe::digests::SecondaryPlainPreDigest
+   **/
+  SpConsensusBabeDigestsSecondaryPlainPreDigest: {
+    authorityIndex: 'u32',
+    slot: 'u64'
+  },
+  /**
+   * Lookup431: sp_consensus_babe::digests::SecondaryVRFPreDigest
+   **/
+  SpConsensusBabeDigestsSecondaryVRFPreDigest: {
+    authorityIndex: 'u32',
+    slot: 'u64',
+    vrfOutput: '[u8;32]',
+    vrfProof: '[u8;64]'
+  },
+  /**
+   * Lookup433: sp_consensus_babe::BabeEpochConfiguration
+   **/
+  SpConsensusBabeBabeEpochConfiguration: {
+    c: '(u64,u64)',
+    allowedSlots: 'SpConsensusBabeAllowedSlots'
+  },
+  /**
+   * Lookup434: pallet_babe::pallet::Error<T>
+   **/
+  PalletBabeError: {
+    _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
+  },
+  /**
+   * Lookup436: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+   **/
+  PalletAuthorshipUncleEntryItem: {
+    _enum: {
+      InclusionHeight: 'u32',
+      Uncle: '(H256,Option<AccountId32>)'
+    }
+  },
+  /**
+   * Lookup437: pallet_authorship::pallet::Error<T>
+   **/
+  PalletAuthorshipError: {
+    _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
+  },
+  /**
+   * Lookup439: pallet_balances::BalanceLock<Balance>
+   **/
+  PalletBalancesBalanceLock: {
+    id: '[u8;8]',
+    amount: 'u128',
+    reasons: 'PalletBalancesReasons'
+  },
+  /**
+   * Lookup440: pallet_balances::Reasons
+   **/
+  PalletBalancesReasons: {
+    _enum: ['Fee', 'Misc', 'All']
+  },
+  /**
+   * Lookup443: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+   **/
+  PalletBalancesReserveData: {
+    id: '[u8;8]',
+    amount: 'u128'
+  },
+  /**
+   * Lookup445: pallet_balances::Releases
+   **/
+  PalletBalancesReleases: {
+    _enum: ['V1_0_0', 'V2_0_0']
+  },
+  /**
+   * Lookup446: pallet_balances::pallet::Error<T, I>
+   **/
+  PalletBalancesError: {
+    _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
+  },
+  /**
+   * Lookup448: pallet_transaction_payment::Releases
+   **/
+  PalletTransactionPaymentReleases: {
+    _enum: ['V1Ancient', 'V2']
+  },
+  /**
+   * Lookup449: pallet_election_provider_multi_phase::Phase<Bn>
+   **/
+  PalletElectionProviderMultiPhasePhase: {
+    _enum: {
+      Off: 'Null',
+      Signed: 'Null',
+      Unsigned: '(bool,u32)',
+      Emergency: 'Null'
+    }
+  },
+  /**
+   * Lookup451: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+   **/
+  PalletElectionProviderMultiPhaseReadySolution: {
+    supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
+    score: 'SpNposElectionsElectionScore',
+    compute: 'PalletElectionProviderMultiPhaseElectionCompute'
+  },
+  /**
+   * Lookup452: pallet_election_provider_multi_phase::RoundSnapshot<T>
+   **/
+  PalletElectionProviderMultiPhaseRoundSnapshot: {
+    voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
+    targets: 'Vec<AccountId32>'
+  },
+  /**
+   * Lookup460: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+   **/
+  PalletElectionProviderMultiPhaseSignedSignedSubmission: {
+    who: 'AccountId32',
+    deposit: 'u128',
+    rawSolution: 'PalletElectionProviderMultiPhaseRawSolution',
+    callFee: 'u128'
+  },
+  /**
+   * Lookup461: pallet_election_provider_multi_phase::pallet::Error<T>
+   **/
+  PalletElectionProviderMultiPhaseError: {
+    _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
+  },
+  /**
+   * Lookup462: pallet_staking::StakingLedger<T>
+   **/
+  PalletStakingStakingLedger: {
+    stash: 'AccountId32',
+    total: 'Compact<u128>',
+    active: 'Compact<u128>',
+    unlocking: 'Vec<PalletStakingUnlockChunk>',
+    claimedRewards: 'Vec<u32>'
+  },
+  /**
+   * Lookup464: pallet_staking::UnlockChunk<Balance>
+   **/
+  PalletStakingUnlockChunk: {
+    value: 'Compact<u128>',
+    era: 'Compact<u32>'
+  },
+  /**
+   * Lookup466: pallet_staking::Nominations<T>
+   **/
+  PalletStakingNominations: {
+    targets: 'Vec<AccountId32>',
+    submittedIn: 'u32',
+    suppressed: 'bool'
+  },
+  /**
+   * Lookup467: pallet_staking::ActiveEraInfo
+   **/
+  PalletStakingActiveEraInfo: {
+    index: 'u32',
+    start: 'Option<u64>'
+  },
+  /**
+   * Lookup469: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+   **/
+  PalletStakingEraRewardPoints: {
+    total: 'u32',
+    individual: 'BTreeMap<AccountId32, u32>'
+  },
+  /**
+   * Lookup473: pallet_staking::Forcing
+   **/
+  PalletStakingForcing: {
+    _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
+  },
+  /**
+   * Lookup475: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+   **/
+  PalletStakingUnappliedSlash: {
+    validator: 'AccountId32',
+    own: 'u128',
+    others: 'Vec<(AccountId32,u128)>',
+    reporters: 'Vec<AccountId32>',
+    payout: 'u128'
+  },
+  /**
+   * Lookup477: pallet_staking::slashing::SlashingSpans
+   **/
+  PalletStakingSlashingSlashingSpans: {
+    spanIndex: 'u32',
+    lastStart: 'u32',
+    lastNonzeroSlash: 'u32',
+    prior: 'Vec<u32>'
+  },
+  /**
+   * Lookup478: pallet_staking::slashing::SpanRecord<Balance>
+   **/
+  PalletStakingSlashingSpanRecord: {
+    slashed: 'u128',
+    paidOut: 'u128'
+  },
+  /**
+   * Lookup481: pallet_staking::Releases
+   **/
+  PalletStakingReleases: {
+    _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
+  },
+  /**
+   * Lookup482: pallet_staking::pallet::pallet::Error<T>
+   **/
+  PalletStakingPalletError: {
+    _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
+  },
+  /**
+   * Lookup486: sp_core::crypto::KeyTypeId
+   **/
+  SpCoreCryptoKeyTypeId: '[u8;4]',
+  /**
+   * Lookup487: pallet_session::pallet::Error<T>
+   **/
+  PalletSessionError: {
+    _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
+  },
+  /**
+   * Lookup489: pallet_grandpa::StoredState<N>
+   **/
+  PalletGrandpaStoredState: {
+    _enum: {
+      Live: 'Null',
+      PendingPause: {
+        scheduledAt: 'u32',
+        delay: 'u32',
+      },
+      Paused: 'Null',
+      PendingResume: {
+        scheduledAt: 'u32',
+        delay: 'u32'
+      }
+    }
+  },
+  /**
+   * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
+   **/
+  PalletGrandpaStoredPendingChange: {
+    scheduledAt: 'u32',
+    delay: 'u32',
+    nextAuthorities: 'Vec<(SpFinalityGrandpaAppPublic,u64)>',
+    forced: 'Option<u32>'
+  },
+  /**
+   * Lookup492: pallet_grandpa::pallet::Error<T>
+   **/
+  PalletGrandpaError: {
+    _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
+  },
+  /**
+   * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+   **/
+  PalletImOnlineBoundedOpaqueNetworkState: {
+    peerId: 'Bytes',
+    externalAddresses: 'Vec<Bytes>'
+  },
+  /**
+   * Lookup502: pallet_im_online::pallet::Error<T>
+   **/
+  PalletImOnlineError: {
+    _enum: ['InvalidKey', 'DuplicatedHeartbeat']
+  },
+  /**
+   * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+   **/
+  SpStakingOffenceOffenceDetails: {
+    offender: '(AccountId32,PalletStakingExposure)',
+    reporters: 'Vec<AccountId32>'
+  },
+  /**
+   * Lookup506: pallet_bags_list::list::Node<T, I>
+   **/
+  PalletBagsListListNode: {
+    id: 'AccountId32',
+    prev: 'Option<AccountId32>',
+    next: 'Option<AccountId32>',
+    bagUpper: 'u64',
+    score: 'u64'
+  },
+  /**
+   * Lookup507: pallet_bags_list::list::Bag<T, I>
+   **/
+  PalletBagsListListBag: {
+    head: 'Option<AccountId32>',
+    tail: 'Option<AccountId32>'
+  },
+  /**
+   * Lookup508: pallet_bags_list::pallet::Error<T, I>
+   **/
+  PalletBagsListError: {
+    _enum: {
+      List: 'PalletBagsListListListError'
+    }
+  },
+  /**
+   * Lookup509: pallet_bags_list::list::ListError
+   **/
+  PalletBagsListListListError: {
+    _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
+  },
+  /**
+   * Lookup512: pallet_vesting::Releases
+   **/
+  PalletVestingReleases: {
+    _enum: ['V0', 'V1']
+  },
+  /**
+   * Lookup513: pallet_vesting::pallet::Error<T>
+   **/
+  PalletVestingError: {
+    _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
+  },
+  /**
+   * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+   **/
+  PalletMultisigMultisig: {
+    when: 'PalletMultisigTimepoint',
+    deposit: 'u128',
+    depositor: 'AccountId32',
+    approvals: 'Vec<AccountId32>'
+  },
+  /**
+   * Lookup517: pallet_multisig::pallet::Error<T>
+   **/
+  PalletMultisigError: {
+    _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
+  },
+  /**
+   * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
+   **/
+  PalletCouncilCouncilStageUpdate: {
+    stage: 'PalletCouncilCouncilStage',
+    changedAt: 'u32'
+  },
+  /**
+   * Lookup519: pallet_council::CouncilStage<BlockNumber>
+   **/
+  PalletCouncilCouncilStage: {
+    _enum: {
+      Announcing: 'PalletCouncilCouncilStageAnnouncing',
+      Election: 'PalletCouncilCouncilStageElection',
+      Idle: 'PalletCouncilCouncilStageIdle'
+    }
+  },
+  /**
+   * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
+   **/
+  PalletCouncilCouncilStageAnnouncing: {
+    candidatesCount: 'u32',
+    endsAt: 'u32'
+  },
+  /**
+   * Lookup521: pallet_council::CouncilStageElection
+   **/
+  PalletCouncilCouncilStageElection: {
+    candidatesCount: 'u32'
+  },
+  /**
+   * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
+   **/
+  PalletCouncilCouncilStageIdle: {
+    endsAt: 'u32'
+  },
+  /**
+   * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+   **/
+  PalletCouncilCouncilMember: {
+    stakingAccountId: 'AccountId32',
+    rewardAccountId: 'AccountId32',
+    membershipId: 'u64',
+    stake: 'u128',
+    lastPaymentBlock: 'u32',
+    unpaidReward: 'u128'
+  },
+  /**
+   * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+   **/
+  PalletCouncilCandidate: {
+    stakingAccountId: 'AccountId32',
+    rewardAccountId: 'AccountId32',
+    cycleId: 'u64',
+    stake: 'u128',
+    votePower: 'u128',
+    noteHash: 'Option<H256>'
+  },
+  /**
+   * Lookup527: pallet_council::Error<T>
+   **/
+  PalletCouncilError: {
+    _enum: ['ArithmeticError', 'BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
+  },
+  /**
+   * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+   **/
+  PalletReferendumReferendumStage: {
+    _enum: {
+      Inactive: 'Null',
+      Voting: 'PalletReferendumReferendumStageVoting',
+      Revealing: 'PalletReferendumReferendumStageRevealing'
+    }
+  },
+  /**
+   * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
+   **/
+  PalletReferendumReferendumStageVoting: {
+    started: 'u32',
+    winningTargetCount: 'u32',
+    currentCycleId: 'u64',
+    endsAt: 'u32'
+  },
+  /**
+   * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+   **/
+  PalletReferendumReferendumStageRevealing: {
+    started: 'u32',
+    winningTargetCount: 'u32',
+    intermediateWinners: 'Vec<PalletReferendumOptionResult>',
+    currentCycleId: 'u64',
+    endsAt: 'u32'
+  },
+  /**
+   * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+   **/
+  PalletReferendumCastVote: {
+    commitment: 'H256',
+    cycleId: 'u64',
+    stake: 'u128',
+    voteFor: 'Option<u64>'
+  },
+  /**
+   * Lookup533: pallet_referendum::Error<T, I>
+   **/
+  PalletReferendumError: {
+    _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden', 'AccountAlreadyOptedOutOfVoting']
+  },
+  /**
+   * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+   **/
+  PalletMembershipMembershipObject: {
+    handleHash: 'H256',
+    rootAccount: 'AccountId32',
+    controllerAccount: 'AccountId32',
+    verified: 'bool',
+    invites: 'u32'
+  },
+  /**
+   * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
+   **/
+  PalletMembershipStakingAccountMemberBinding: {
+    memberId: 'u64',
+    confirmed: 'bool'
+  },
+  /**
+   * Lookup536: pallet_membership::Error<T>
+   **/
+  PalletMembershipError: {
+    _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift', 'InsufficientBalanceToCoverPayment']
+  },
+  /**
+   * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   **/
+  PalletForumCategory: {
+    titleHash: 'H256',
+    descriptionHash: 'H256',
+    archived: 'bool',
+    numDirectSubcategories: 'u32',
+    numDirectThreads: 'u32',
+    numDirectModerators: 'u32',
+    parentCategoryId: 'Option<u64>',
+    stickyThreadIds: 'BTreeSet<u64>'
+  },
+  /**
+   * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   **/
+  PalletForumThread: {
+    categoryId: 'u64',
+    authorId: 'u64',
+    cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+    numberOfEditablePosts: 'u64'
+  },
+  /**
+   * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   **/
+  PalletForumPost: {
+    threadId: 'u64',
+    textHash: 'H256',
+    authorId: 'u64',
+    cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+    lastEdited: 'u32'
+  },
+  /**
+   * Lookup541: pallet_forum::Error<T>
+   **/
+  PalletForumError: {
+    _enum: ['ArithmeticError', 'OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero', 'MaxNumberOfStickiedThreadsExceeded']
+  },
+  /**
+   * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+   **/
+  PalletConstitutionConstitutionInfo: {
+    textHash: 'H256'
+  },
+  /**
+   * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   **/
+  PalletBountyBountyRecord: {
+    creationParams: 'PalletBountyBountyParametersBoundedBTreeSet',
+    totalFunding: 'u128',
+    milestone: 'PalletBountyBountyMilestone',
+    activeWorkEntryCount: 'u32',
+    hasUnpaidOracleReward: 'bool'
+  },
+  /**
+   * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   **/
+  PalletBountyBountyParametersBoundedBTreeSet: {
+    oracle: 'PalletBountyBountyActor',
+    contractType: 'PalletBountyAssuranceContractTypeBoundedBTreeSet',
+    creator: 'PalletBountyBountyActor',
+    cherry: 'u128',
+    oracleReward: 'u128',
+    entrantStake: 'u128',
+    fundingType: 'PalletBountyFundingType'
+  },
+  /**
+   * Lookup546: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   **/
+  PalletBountyAssuranceContractTypeBoundedBTreeSet: {
+    _enum: {
+      Open: 'Null',
+      Closed: 'BTreeSet<u64>'
+    }
+  },
+  /**
+   * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
+   **/
+  PalletBountyBountyMilestone: {
+    _enum: {
+      Created: {
+        createdAt: 'u32',
+        hasContributions: 'bool',
+      },
+      BountyMaxFundingReached: 'Null',
+      WorkSubmitted: 'Null',
+      Terminated: 'Null',
+      JudgmentSubmitted: {
+        successfulBounty: 'bool'
+      }
+    }
+  },
+  /**
+   * Lookup549: pallet_bounty::Contribution<T>
+   **/
+  PalletBountyContribution: {
+    amount: 'u128',
+    funderStateBloatBondAmount: 'u128'
+  },
+  /**
+   * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+   **/
+  PalletBountyEntryRecord: {
+    memberId: 'u64',
+    stakingAccountId: 'AccountId32',
+    submittedAt: 'u32',
+    workSubmitted: 'bool'
+  },
+  /**
+   * Lookup551: pallet_bounty::Error<T>
+   **/
+  PalletBountyError: {
+    _enum: ['ArithmeticError', 'MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
+  },
+  /**
+   * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   **/
+  PalletContentVideoRecord: {
+    inChannel: 'u64',
+    nftStatus: 'Option<PalletContentNftTypesOwnedNft>',
+    dataObjects: 'BTreeSet<u64>',
+    videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
+  },
+  /**
+   * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+   **/
+  PalletContentNftTypesOwnedNft: {
+    owner: 'PalletContentNftTypesNftOwner',
+    transactionalStatus: 'PalletContentNftTypesTransactionalStatusRecord',
+    creatorRoyalty: 'Option<Perbill>',
+    openAuctionsNonce: 'u64'
+  },
+  /**
+   * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+   **/
+  PalletContentNftTypesTransactionalStatusRecord: {
+    _enum: {
+      Idle: 'Null',
+      InitiatedOfferToMember: '(u64,Option<u128>)',
+      EnglishAuction: 'PalletContentNftTypesEnglishAuctionRecord',
+      OpenAuction: 'PalletContentNftTypesOpenAuctionRecord',
+      BuyNow: 'u128'
+    }
+  },
+  /**
+   * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   **/
+  PalletContentNftTypesEnglishAuctionRecord: {
+    startingPrice: 'u128',
+    buyNowPrice: 'Option<u128>',
+    whitelist: 'BTreeSet<u64>',
+    end: 'u32',
+    start: 'u32',
+    extensionPeriod: 'u32',
+    minBidStep: 'u128',
+    topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
+  },
+  /**
+   * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+   **/
+  PalletContentNftTypesEnglishAuctionBid: {
+    amount: 'u128',
+    bidderId: 'u64'
+  },
+  /**
+   * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   **/
+  PalletContentNftTypesOpenAuctionRecord: {
+    startingPrice: 'u128',
+    buyNowPrice: 'Option<u128>',
+    whitelist: 'BTreeSet<u64>',
+    bidLockDuration: 'u32',
+    auctionId: 'u64',
+    start: 'u32'
+  },
+  /**
+   * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
+   **/
+  PalletContentNftTypesNftOwner: {
+    _enum: {
+      ChannelOwner: 'Null',
+      Member: 'u64'
+    }
+  },
+  /**
+   * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+   **/
+  PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
+    curators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
+    active: 'bool',
+    permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>'
+  },
+  /**
+   * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+   **/
+  PalletContentNftTypesOpenAuctionBidRecord: {
+    amount: 'u128',
+    madeAtBlock: 'u32',
+    auctionId: 'u64'
+  },
+  /**
+   * Lookup572: pallet_content::errors::Error<T>
+   **/
+  PalletContentErrorsError: {
+    _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales', 'ChannelTransfersBlockedDuringActiveAmm']
+  },
+  /**
+   * Lookup573: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+   **/
+  PalletStorageBagRecord: {
+    storedBy: 'BTreeSet<u64>',
+    distributedBy: 'BTreeSet<PalletStorageDistributionBucketIdRecord>',
+    objectsTotalSize: 'u64',
+    objectsNumber: 'u64'
+  },
+  /**
+   * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+   **/
+  PalletStorageStorageBucketRecord: {
+    operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
+    acceptingNewBags: 'bool',
+    voucher: 'PalletStorageVoucher',
+    assignedBags: 'u64'
+  },
+  /**
+   * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+   **/
+  PalletStorageStorageBucketOperatorStatus: {
+    _enum: {
+      Missing: 'Null',
+      InvitedStorageWorker: 'u64',
+      StorageWorker: '(u64,AccountId32)'
+    }
+  },
+  /**
+   * Lookup579: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+   **/
+  PalletStorageDynamicBagCreationPolicy: {
+    numberOfStorageBuckets: 'u32',
+    families: 'BTreeMap<u64, u32>'
+  },
+  /**
+   * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   **/
+  PalletStorageDataObject: {
+    _alias: {
+      size_: 'size'
+    },
+    accepted: 'bool',
+    stateBloatBond: 'PalletCommonBloatBondRepayableBloatBond',
+    size_: 'u64',
+    ipfsContentId: 'Bytes'
+  },
+  /**
+   * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+   **/
+  PalletStorageDistributionBucketFamilyRecord: {
+    nextDistributionBucketIndex: 'u64'
+  },
+  /**
+   * Lookup584: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   **/
+  PalletStorageDistributionBucketRecord: {
+    acceptingNewBags: 'bool',
+    distributing: 'bool',
+    pendingInvitations: 'BTreeSet<u64>',
+    operators: 'BTreeSet<u64>',
+    assignedBags: 'u64'
+  },
+  /**
+   * Lookup587: pallet_storage::Error<T>
+   **/
+  PalletStorageError: {
+    _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'MaxNumberOfOperatorsPerDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
+  },
+  /**
+   * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+   **/
+  PalletProjectTokenAccountData: {
+    vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
+    amount: 'u128',
+    splitStakingStatus: 'Option<PalletProjectTokenStakingStatus>',
+    bloatBond: 'PalletCommonBloatBondRepayableBloatBond',
+    nextVestingTransferId: 'u64',
+    lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
+  },
+  /**
+   * Lookup589: pallet_project_token::types::StakingStatus<Balance>
+   **/
+  PalletProjectTokenStakingStatus: {
+    splitId: 'u32',
+    amount: 'u128'
+  },
+  /**
+   * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+   **/
+  PalletProjectTokenVestingSchedule: {
+    linearVestingStartBlock: 'u32',
+    linearVestingDuration: 'u32',
+    cliffAmount: 'u128',
+    postCliffTotalAmount: 'u128',
+    burnedAmount: 'u128'
+  },
+  /**
+   * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+   **/
+  PalletProjectTokenTokenData: {
+    totalSupply: 'u128',
+    tokensIssued: 'u128',
+    nextSaleId: 'u32',
+    sale: 'Option<PalletProjectTokenTokenSale>',
+    transferPolicy: 'PalletProjectTokenTransferPolicy',
+    symbol: 'H256',
+    patronageInfo: 'PalletProjectTokenPatronageData',
+    accountsNumber: 'u64',
+    revenueSplitRate: 'Permill',
+    revenueSplit: 'PalletProjectTokenRevenueSplitState',
+    nextRevenueSplitId: 'u32',
+    ammCurve: 'Option<PalletProjectTokenAmmCurve>'
+  },
+  /**
+   * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+   **/
+  PalletProjectTokenRevenueSplitState: {
+    _enum: {
+      Inactive: 'Null',
+      Active: 'PalletProjectTokenRevenueSplitInfo'
+    }
+  },
+  /**
+   * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+   **/
+  PalletProjectTokenRevenueSplitInfo: {
+    allocation: 'u128',
+    timeline: 'PalletProjectTokenTimeline',
+    dividendsClaimed: 'u128'
+  },
+  /**
+   * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
+   **/
+  PalletProjectTokenTimeline: {
+    start: 'u32',
+    duration: 'u32'
+  },
+  /**
+   * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+   **/
+  PalletProjectTokenPatronageData: {
+    rate: 'Permill',
+    unclaimedPatronageTallyAmount: 'u128',
+    lastUnclaimedPatronageTallyBlock: 'u32'
+  },
+  /**
+   * Lookup605: pallet_project_token::errors::Error<T>
+   **/
+  PalletProjectTokenErrorsError: {
+    _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'TransferDestinationMemberDoesNotExist', 'MerkleProofVerificationFailure', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TooManyTransferOutputs', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'CannotInitSaleIfAmmIsActive', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount', 'NotInAmmState', 'InvalidCurveParameters', 'DeadlineExpired', 'SlippageToleranceExceeded', 'InsufficientTokenBalance', 'OutstandingAmmProvidedSupplyTooLarge', 'CurveSlopeParametersTooLow', 'TargetPatronageRateIsHigherThanCurrentRate', 'YearlyPatronageRateLimitExceeded']
+  },
+  /**
+   * Lookup606: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+   **/
+  PalletProposalsEngineProposal: {
+    parameters: 'PalletProposalsEngineProposalParameters',
+    proposerId: 'u64',
+    activatedAt: 'u32',
+    status: 'PalletProposalsEngineProposalStatusesProposalStatus',
+    votingResults: 'PalletProposalsEngineVotingResults',
+    exactExecutionBlock: 'Option<u32>',
+    nrOfCouncilConfirmations: 'u32',
+    stakingAccountId: 'Option<AccountId32>'
+  },
+  /**
+   * Lookup607: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+   **/
+  PalletProposalsEngineProposalParameters: {
+    votingPeriod: 'u32',
+    gracePeriod: 'u32',
+    approvalQuorumPercentage: 'u32',
+    approvalThresholdPercentage: 'u32',
+    slashingQuorumPercentage: 'u32',
+    slashingThresholdPercentage: 'u32',
+    requiredStake: 'Option<u128>',
+    constitutionality: 'u32'
+  },
+  /**
+   * Lookup608: pallet_proposals_engine::types::VotingResults
+   **/
+  PalletProposalsEngineVotingResults: {
+    abstentions: 'u32',
+    approvals: 'u32',
+    rejections: 'u32',
+    slashes: 'u32'
+  },
+  /**
+   * Lookup611: pallet_proposals_engine::Error<T>
+   **/
+  PalletProposalsEngineError: {
+    _enum: ['ArithmeticError', 'EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember', 'MaxDispatchableCallCodeSizeExceeded']
+  },
+  /**
+   * Lookup612: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   **/
+  PalletProposalsDiscussionDiscussionThread: {
+    activatedAt: 'u32',
+    authorId: 'u64',
+    mode: 'PalletProposalsDiscussionThreadModeBoundedBTreeSet'
+  },
+  /**
+   * Lookup614: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   **/
+  PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
+    _enum: {
+      Open: 'Null',
+      Closed: 'BTreeSet<u64>'
+    }
+  },
+  /**
+   * Lookup615: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   **/
+  PalletProposalsDiscussionDiscussionPost: {
+    authorId: 'u64',
+    cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+    lastEdited: 'u32'
+  },
+  /**
+   * Lookup616: pallet_proposals_discussion::Error<T>
+   **/
+  PalletProposalsDiscussionError: {
+    _enum: ['ArithmeticError', 'ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
+  },
+  /**
+   * Lookup617: pallet_proposals_codex::Error<T>
+   **/
+  PalletProposalsCodexError: {
+    _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError', 'MaxYearlyPatronageRateCannotBeZero']
+  },
+  /**
+   * Lookup618: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+   **/
+  PalletWorkingGroupOpening: {
+    openingType: 'PalletWorkingGroupOpeningType',
+    created: 'u32',
+    descriptionHash: 'H256',
+    stakePolicy: 'PalletWorkingGroupStakePolicy',
+    rewardPerBlock: 'Option<u128>',
+    creationStake: 'u128'
+  },
+  /**
+   * Lookup619: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+   **/
+  PalletWorkingGroupJobApplication: {
+    roleAccountId: 'AccountId32',
+    rewardAccountId: 'AccountId32',
+    stakingAccountId: 'AccountId32',
+    memberId: 'u64',
+    descriptionHash: 'H256',
+    openingId: 'u64'
+  },
+  /**
+   * Lookup620: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+   **/
+  PalletWorkingGroupGroupWorker: {
+    memberId: 'u64',
+    roleAccountId: 'AccountId32',
+    stakingAccountId: 'AccountId32',
+    rewardAccountId: 'AccountId32',
+    startedLeavingAt: 'Option<u32>',
+    jobUnstakingPeriod: 'u32',
+    rewardPerBlock: 'Option<u128>',
+    missedReward: 'Option<u128>',
+    createdAt: 'u32'
+  },
+  /**
+   * Lookup621: pallet_working_group::errors::Error<T, I>
+   **/
+  PalletWorkingGroupErrorsError: {
+    _enum: ['ArithmeticError', 'StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
+  },
+  /**
+   * Lookup631: sp_runtime::MultiSignature
+   **/
+  SpRuntimeMultiSignature: {
+    _enum: {
+      Ed25519: 'SpCoreEd25519Signature',
+      Sr25519: 'SpCoreSr25519Signature',
+      Ecdsa: 'SpCoreEcdsaSignature'
+    }
+  },
+  /**
+   * Lookup632: sp_core::ecdsa::Signature
+   **/
+  SpCoreEcdsaSignature: '[u8;65]',
+  /**
+   * Lookup635: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+   **/
+  FrameSystemExtensionsCheckNonZeroSender: 'Null',
+  /**
+   * Lookup636: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+   **/
+  FrameSystemExtensionsCheckSpecVersion: 'Null',
+  /**
+   * Lookup637: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+   **/
+  FrameSystemExtensionsCheckTxVersion: 'Null',
+  /**
+   * Lookup638: frame_system::extensions::check_genesis::CheckGenesis<T>
+   **/
+  FrameSystemExtensionsCheckGenesis: 'Null',
+  /**
+   * Lookup641: frame_system::extensions::check_nonce::CheckNonce<T>
+   **/
+  FrameSystemExtensionsCheckNonce: 'Compact<u32>',
+  /**
+   * Lookup642: frame_system::extensions::check_weight::CheckWeight<T>
+   **/
+  FrameSystemExtensionsCheckWeight: 'Null',
+  /**
+   * Lookup643: pallet_transaction_payment::ChargeTransactionPayment<T>
+   **/
+  PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
+  /**
+   * Lookup644: joystream_node_runtime::Runtime
+   **/
+  JoystreamNodeRuntimeRuntime: 'Null'
+};
diff --git a/node_modules/@joystream/types/types/src/augment/registry.ts b/node_modules/@joystream/types/types/src/augment/registry.ts
new file mode 100644
index 0000000..a882fb3
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/registry.ts
@@ -0,0 +1,363 @@
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+
+import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenAmmCurve, PalletProjectTokenAmmParams, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfers, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+
+declare module '@polkadot/types/types/registry' {
+  export interface InterfaceTypes {
+    FinalityGrandpaEquivocationPrecommit: FinalityGrandpaEquivocationPrecommit;
+    FinalityGrandpaEquivocationPrevote: FinalityGrandpaEquivocationPrevote;
+    FinalityGrandpaPrecommit: FinalityGrandpaPrecommit;
+    FinalityGrandpaPrevote: FinalityGrandpaPrevote;
+    FrameSupportDispatchRawOrigin: FrameSupportDispatchRawOrigin;
+    FrameSupportTokensMiscBalanceStatus: FrameSupportTokensMiscBalanceStatus;
+    FrameSupportWeightsDispatchClass: FrameSupportWeightsDispatchClass;
+    FrameSupportWeightsDispatchInfo: FrameSupportWeightsDispatchInfo;
+    FrameSupportWeightsPays: FrameSupportWeightsPays;
+    FrameSupportWeightsPerDispatchClassU32: FrameSupportWeightsPerDispatchClassU32;
+    FrameSupportWeightsPerDispatchClassU64: FrameSupportWeightsPerDispatchClassU64;
+    FrameSupportWeightsPerDispatchClassWeightsPerClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
+    FrameSupportWeightsRuntimeDbWeight: FrameSupportWeightsRuntimeDbWeight;
+    FrameSystemAccountInfo: FrameSystemAccountInfo;
+    FrameSystemCall: FrameSystemCall;
+    FrameSystemError: FrameSystemError;
+    FrameSystemEvent: FrameSystemEvent;
+    FrameSystemEventRecord: FrameSystemEventRecord;
+    FrameSystemExtensionsCheckGenesis: FrameSystemExtensionsCheckGenesis;
+    FrameSystemExtensionsCheckNonZeroSender: FrameSystemExtensionsCheckNonZeroSender;
+    FrameSystemExtensionsCheckNonce: FrameSystemExtensionsCheckNonce;
+    FrameSystemExtensionsCheckSpecVersion: FrameSystemExtensionsCheckSpecVersion;
+    FrameSystemExtensionsCheckTxVersion: FrameSystemExtensionsCheckTxVersion;
+    FrameSystemExtensionsCheckWeight: FrameSystemExtensionsCheckWeight;
+    FrameSystemLastRuntimeUpgradeInfo: FrameSystemLastRuntimeUpgradeInfo;
+    FrameSystemLimitsBlockLength: FrameSystemLimitsBlockLength;
+    FrameSystemLimitsBlockWeights: FrameSystemLimitsBlockWeights;
+    FrameSystemLimitsWeightsPerClass: FrameSystemLimitsWeightsPerClass;
+    FrameSystemPhase: FrameSystemPhase;
+    JoystreamNodeRuntimeNposSolution16: JoystreamNodeRuntimeNposSolution16;
+    JoystreamNodeRuntimeOriginCaller: JoystreamNodeRuntimeOriginCaller;
+    JoystreamNodeRuntimeRuntime: JoystreamNodeRuntimeRuntime;
+    JoystreamNodeRuntimeSessionKeys: JoystreamNodeRuntimeSessionKeys;
+    PalletAuthorshipCall: PalletAuthorshipCall;
+    PalletAuthorshipError: PalletAuthorshipError;
+    PalletAuthorshipUncleEntryItem: PalletAuthorshipUncleEntryItem;
+    PalletBabeCall: PalletBabeCall;
+    PalletBabeError: PalletBabeError;
+    PalletBagsListCall: PalletBagsListCall;
+    PalletBagsListError: PalletBagsListError;
+    PalletBagsListEvent: PalletBagsListEvent;
+    PalletBagsListListBag: PalletBagsListListBag;
+    PalletBagsListListListError: PalletBagsListListListError;
+    PalletBagsListListNode: PalletBagsListListNode;
+    PalletBalancesAccountData: PalletBalancesAccountData;
+    PalletBalancesBalanceLock: PalletBalancesBalanceLock;
+    PalletBalancesCall: PalletBalancesCall;
+    PalletBalancesError: PalletBalancesError;
+    PalletBalancesEvent: PalletBalancesEvent;
+    PalletBalancesReasons: PalletBalancesReasons;
+    PalletBalancesReleases: PalletBalancesReleases;
+    PalletBalancesReserveData: PalletBalancesReserveData;
+    PalletBountyAssuranceContractTypeBTreeSet: PalletBountyAssuranceContractTypeBTreeSet;
+    PalletBountyAssuranceContractTypeBoundedBTreeSet: PalletBountyAssuranceContractTypeBoundedBTreeSet;
+    PalletBountyBountyActor: PalletBountyBountyActor;
+    PalletBountyBountyMilestone: PalletBountyBountyMilestone;
+    PalletBountyBountyParametersBTreeSet: PalletBountyBountyParametersBTreeSet;
+    PalletBountyBountyParametersBoundedBTreeSet: PalletBountyBountyParametersBoundedBTreeSet;
+    PalletBountyBountyRecord: PalletBountyBountyRecord;
+    PalletBountyCall: PalletBountyCall;
+    PalletBountyContribution: PalletBountyContribution;
+    PalletBountyEntryRecord: PalletBountyEntryRecord;
+    PalletBountyError: PalletBountyError;
+    PalletBountyFundingType: PalletBountyFundingType;
+    PalletBountyOracleWorkEntryJudgment: PalletBountyOracleWorkEntryJudgment;
+    PalletBountyRawEvent: PalletBountyRawEvent;
+    PalletCommonBalanceKind: PalletCommonBalanceKind;
+    PalletCommonBloatBondRepayableBloatBond: PalletCommonBloatBondRepayableBloatBond;
+    PalletCommonFundingRequestParameters: PalletCommonFundingRequestParameters;
+    PalletCommonMerkleTreeProofElementRecord: PalletCommonMerkleTreeProofElementRecord;
+    PalletCommonMerkleTreeSide: PalletCommonMerkleTreeSide;
+    PalletCommonWorkingGroupIterableEnumsWorkingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+    PalletConstitutionCall: PalletConstitutionCall;
+    PalletConstitutionConstitutionInfo: PalletConstitutionConstitutionInfo;
+    PalletConstitutionRawEvent: PalletConstitutionRawEvent;
+    PalletContentCall: PalletContentCall;
+    PalletContentChannelBagWitness: PalletContentChannelBagWitness;
+    PalletContentChannelCreationParametersRecord: PalletContentChannelCreationParametersRecord;
+    PalletContentChannelFundsDestination: PalletContentChannelFundsDestination;
+    PalletContentChannelOwner: PalletContentChannelOwner;
+    PalletContentChannelPayoutsPayloadParametersRecord: PalletContentChannelPayoutsPayloadParametersRecord;
+    PalletContentChannelRecord: PalletContentChannelRecord;
+    PalletContentChannelTransferStatus: PalletContentChannelTransferStatus;
+    PalletContentChannelUpdateParametersRecord: PalletContentChannelUpdateParametersRecord;
+    PalletContentErrorsError: PalletContentErrorsError;
+    PalletContentInitTransferParameters: PalletContentInitTransferParameters;
+    PalletContentIterableEnumsChannelActionPermission: PalletContentIterableEnumsChannelActionPermission;
+    PalletContentLimitPerPeriod: PalletContentLimitPerPeriod;
+    PalletContentNftCounter: PalletContentNftCounter;
+    PalletContentNftLimitPeriod: PalletContentNftLimitPeriod;
+    PalletContentNftTypesEnglishAuctionBid: PalletContentNftTypesEnglishAuctionBid;
+    PalletContentNftTypesEnglishAuctionParamsRecord: PalletContentNftTypesEnglishAuctionParamsRecord;
+    PalletContentNftTypesEnglishAuctionRecord: PalletContentNftTypesEnglishAuctionRecord;
+    PalletContentNftTypesInitTransactionalStatusRecord: PalletContentNftTypesInitTransactionalStatusRecord;
+    PalletContentNftTypesNftIssuanceParametersRecord: PalletContentNftTypesNftIssuanceParametersRecord;
+    PalletContentNftTypesNftOwner: PalletContentNftTypesNftOwner;
+    PalletContentNftTypesOpenAuctionBidRecord: PalletContentNftTypesOpenAuctionBidRecord;
+    PalletContentNftTypesOpenAuctionParamsRecord: PalletContentNftTypesOpenAuctionParamsRecord;
+    PalletContentNftTypesOpenAuctionRecord: PalletContentNftTypesOpenAuctionRecord;
+    PalletContentNftTypesOwnedNft: PalletContentNftTypesOwnedNft;
+    PalletContentNftTypesTransactionalStatusRecord: PalletContentNftTypesTransactionalStatusRecord;
+    PalletContentPendingTransfer: PalletContentPendingTransfer;
+    PalletContentPermissionsContentActor: PalletContentPermissionsContentActor;
+    PalletContentPermissionsCuratorGroupCuratorGroupRecord: PalletContentPermissionsCuratorGroupCuratorGroupRecord;
+    PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction;
+    PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature;
+    PalletContentPullPaymentElement: PalletContentPullPaymentElement;
+    PalletContentRawEvent: PalletContentRawEvent;
+    PalletContentStorageAssetsRecord: PalletContentStorageAssetsRecord;
+    PalletContentTransferCommitmentParametersBTreeMap: PalletContentTransferCommitmentParametersBTreeMap;
+    PalletContentTransferCommitmentParametersBoundedBTreeMap: PalletContentTransferCommitmentParametersBoundedBTreeMap;
+    PalletContentUpdateChannelPayoutsParametersRecord: PalletContentUpdateChannelPayoutsParametersRecord;
+    PalletContentVideoCreationParametersRecord: PalletContentVideoCreationParametersRecord;
+    PalletContentVideoRecord: PalletContentVideoRecord;
+    PalletContentVideoUpdateParametersRecord: PalletContentVideoUpdateParametersRecord;
+    PalletCouncilCall: PalletCouncilCall;
+    PalletCouncilCandidate: PalletCouncilCandidate;
+    PalletCouncilCouncilMember: PalletCouncilCouncilMember;
+    PalletCouncilCouncilStage: PalletCouncilCouncilStage;
+    PalletCouncilCouncilStageAnnouncing: PalletCouncilCouncilStageAnnouncing;
+    PalletCouncilCouncilStageElection: PalletCouncilCouncilStageElection;
+    PalletCouncilCouncilStageIdle: PalletCouncilCouncilStageIdle;
+    PalletCouncilCouncilStageUpdate: PalletCouncilCouncilStageUpdate;
+    PalletCouncilError: PalletCouncilError;
+    PalletCouncilRawEvent: PalletCouncilRawEvent;
+    PalletElectionProviderMultiPhaseCall: PalletElectionProviderMultiPhaseCall;
+    PalletElectionProviderMultiPhaseElectionCompute: PalletElectionProviderMultiPhaseElectionCompute;
+    PalletElectionProviderMultiPhaseError: PalletElectionProviderMultiPhaseError;
+    PalletElectionProviderMultiPhaseEvent: PalletElectionProviderMultiPhaseEvent;
+    PalletElectionProviderMultiPhasePhase: PalletElectionProviderMultiPhasePhase;
+    PalletElectionProviderMultiPhaseRawSolution: PalletElectionProviderMultiPhaseRawSolution;
+    PalletElectionProviderMultiPhaseReadySolution: PalletElectionProviderMultiPhaseReadySolution;
+    PalletElectionProviderMultiPhaseRoundSnapshot: PalletElectionProviderMultiPhaseRoundSnapshot;
+    PalletElectionProviderMultiPhaseSignedSignedSubmission: PalletElectionProviderMultiPhaseSignedSignedSubmission;
+    PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
+    PalletForumCall: PalletForumCall;
+    PalletForumCategory: PalletForumCategory;
+    PalletForumError: PalletForumError;
+    PalletForumExtendedPostIdObject: PalletForumExtendedPostIdObject;
+    PalletForumPost: PalletForumPost;
+    PalletForumPrivilegedActor: PalletForumPrivilegedActor;
+    PalletForumRawEvent: PalletForumRawEvent;
+    PalletForumThread: PalletForumThread;
+    PalletGrandpaCall: PalletGrandpaCall;
+    PalletGrandpaError: PalletGrandpaError;
+    PalletGrandpaEvent: PalletGrandpaEvent;
+    PalletGrandpaStoredPendingChange: PalletGrandpaStoredPendingChange;
+    PalletGrandpaStoredState: PalletGrandpaStoredState;
+    PalletImOnlineBoundedOpaqueNetworkState: PalletImOnlineBoundedOpaqueNetworkState;
+    PalletImOnlineCall: PalletImOnlineCall;
+    PalletImOnlineError: PalletImOnlineError;
+    PalletImOnlineEvent: PalletImOnlineEvent;
+    PalletImOnlineHeartbeat: PalletImOnlineHeartbeat;
+    PalletImOnlineSr25519AppSr25519Public: PalletImOnlineSr25519AppSr25519Public;
+    PalletImOnlineSr25519AppSr25519Signature: PalletImOnlineSr25519AppSr25519Signature;
+    PalletMembershipBuyMembershipParameters: PalletMembershipBuyMembershipParameters;
+    PalletMembershipCall: PalletMembershipCall;
+    PalletMembershipCreateMemberParameters: PalletMembershipCreateMemberParameters;
+    PalletMembershipError: PalletMembershipError;
+    PalletMembershipGiftMembershipParameters: PalletMembershipGiftMembershipParameters;
+    PalletMembershipInviteMembershipParameters: PalletMembershipInviteMembershipParameters;
+    PalletMembershipMembershipObject: PalletMembershipMembershipObject;
+    PalletMembershipRawEvent: PalletMembershipRawEvent;
+    PalletMembershipStakingAccountMemberBinding: PalletMembershipStakingAccountMemberBinding;
+    PalletMultisigCall: PalletMultisigCall;
+    PalletMultisigError: PalletMultisigError;
+    PalletMultisigEvent: PalletMultisigEvent;
+    PalletMultisigMultisig: PalletMultisigMultisig;
+    PalletMultisigTimepoint: PalletMultisigTimepoint;
+    PalletOffencesEvent: PalletOffencesEvent;
+    PalletProjectTokenAccountData: PalletProjectTokenAccountData;
+    PalletProjectTokenAmmCurve: PalletProjectTokenAmmCurve;
+    PalletProjectTokenAmmParams: PalletProjectTokenAmmParams;
+    PalletProjectTokenCall: PalletProjectTokenCall;
+    PalletProjectTokenErrorsError: PalletProjectTokenErrorsError;
+    PalletProjectTokenEventsRawEvent: PalletProjectTokenEventsRawEvent;
+    PalletProjectTokenMerkleProof: PalletProjectTokenMerkleProof;
+    PalletProjectTokenMerkleSide: PalletProjectTokenMerkleSide;
+    PalletProjectTokenPatronageData: PalletProjectTokenPatronageData;
+    PalletProjectTokenPaymentWithVesting: PalletProjectTokenPaymentWithVesting;
+    PalletProjectTokenRevenueSplitInfo: PalletProjectTokenRevenueSplitInfo;
+    PalletProjectTokenRevenueSplitState: PalletProjectTokenRevenueSplitState;
+    PalletProjectTokenSingleDataObjectUploadParams: PalletProjectTokenSingleDataObjectUploadParams;
+    PalletProjectTokenStakingStatus: PalletProjectTokenStakingStatus;
+    PalletProjectTokenTimeline: PalletProjectTokenTimeline;
+    PalletProjectTokenTokenAllocation: PalletProjectTokenTokenAllocation;
+    PalletProjectTokenTokenData: PalletProjectTokenTokenData;
+    PalletProjectTokenTokenIssuanceParameters: PalletProjectTokenTokenIssuanceParameters;
+    PalletProjectTokenTokenSale: PalletProjectTokenTokenSale;
+    PalletProjectTokenTokenSaleParams: PalletProjectTokenTokenSaleParams;
+    PalletProjectTokenTransferPolicy: PalletProjectTokenTransferPolicy;
+    PalletProjectTokenTransferPolicyParams: PalletProjectTokenTransferPolicyParams;
+    PalletProjectTokenTransfers: PalletProjectTokenTransfers;
+    PalletProjectTokenValidated: PalletProjectTokenValidated;
+    PalletProjectTokenValidatedPayment: PalletProjectTokenValidatedPayment;
+    PalletProjectTokenVestingSchedule: PalletProjectTokenVestingSchedule;
+    PalletProjectTokenVestingScheduleParams: PalletProjectTokenVestingScheduleParams;
+    PalletProjectTokenVestingSource: PalletProjectTokenVestingSource;
+    PalletProjectTokenWhitelistParams: PalletProjectTokenWhitelistParams;
+    PalletProposalsCodexCall: PalletProposalsCodexCall;
+    PalletProposalsCodexCreateOpeningParameters: PalletProposalsCodexCreateOpeningParameters;
+    PalletProposalsCodexError: PalletProposalsCodexError;
+    PalletProposalsCodexFillOpeningParameters: PalletProposalsCodexFillOpeningParameters;
+    PalletProposalsCodexGeneralProposalParams: PalletProposalsCodexGeneralProposalParams;
+    PalletProposalsCodexProposalDetails: PalletProposalsCodexProposalDetails;
+    PalletProposalsCodexRawEvent: PalletProposalsCodexRawEvent;
+    PalletProposalsCodexTerminateRoleParameters: PalletProposalsCodexTerminateRoleParameters;
+    PalletProposalsDiscussionCall: PalletProposalsDiscussionCall;
+    PalletProposalsDiscussionDiscussionPost: PalletProposalsDiscussionDiscussionPost;
+    PalletProposalsDiscussionDiscussionThread: PalletProposalsDiscussionDiscussionThread;
+    PalletProposalsDiscussionError: PalletProposalsDiscussionError;
+    PalletProposalsDiscussionRawEvent: PalletProposalsDiscussionRawEvent;
+    PalletProposalsDiscussionThreadModeBTreeSet: PalletProposalsDiscussionThreadModeBTreeSet;
+    PalletProposalsDiscussionThreadModeBoundedBTreeSet: PalletProposalsDiscussionThreadModeBoundedBTreeSet;
+    PalletProposalsEngineCall: PalletProposalsEngineCall;
+    PalletProposalsEngineError: PalletProposalsEngineError;
+    PalletProposalsEngineProposal: PalletProposalsEngineProposal;
+    PalletProposalsEngineProposalParameters: PalletProposalsEngineProposalParameters;
+    PalletProposalsEngineProposalStatusesApprovedProposalDecision: PalletProposalsEngineProposalStatusesApprovedProposalDecision;
+    PalletProposalsEngineProposalStatusesExecutionStatus: PalletProposalsEngineProposalStatusesExecutionStatus;
+    PalletProposalsEngineProposalStatusesProposalDecision: PalletProposalsEngineProposalStatusesProposalDecision;
+    PalletProposalsEngineProposalStatusesProposalStatus: PalletProposalsEngineProposalStatusesProposalStatus;
+    PalletProposalsEngineRawEvent: PalletProposalsEngineRawEvent;
+    PalletProposalsEngineVoteKind: PalletProposalsEngineVoteKind;
+    PalletProposalsEngineVotingResults: PalletProposalsEngineVotingResults;
+    PalletReferendumCall: PalletReferendumCall;
+    PalletReferendumCastVote: PalletReferendumCastVote;
+    PalletReferendumError: PalletReferendumError;
+    PalletReferendumInstance1: PalletReferendumInstance1;
+    PalletReferendumOptionResult: PalletReferendumOptionResult;
+    PalletReferendumRawEvent: PalletReferendumRawEvent;
+    PalletReferendumReferendumStage: PalletReferendumReferendumStage;
+    PalletReferendumReferendumStageRevealing: PalletReferendumReferendumStageRevealing;
+    PalletReferendumReferendumStageVoting: PalletReferendumReferendumStageVoting;
+    PalletSessionCall: PalletSessionCall;
+    PalletSessionError: PalletSessionError;
+    PalletSessionEvent: PalletSessionEvent;
+    PalletStakingActiveEraInfo: PalletStakingActiveEraInfo;
+    PalletStakingEraRewardPoints: PalletStakingEraRewardPoints;
+    PalletStakingExposure: PalletStakingExposure;
+    PalletStakingForcing: PalletStakingForcing;
+    PalletStakingIndividualExposure: PalletStakingIndividualExposure;
+    PalletStakingNominations: PalletStakingNominations;
+    PalletStakingPalletCall: PalletStakingPalletCall;
+    PalletStakingPalletConfigOpPerbill: PalletStakingPalletConfigOpPerbill;
+    PalletStakingPalletConfigOpPercent: PalletStakingPalletConfigOpPercent;
+    PalletStakingPalletConfigOpU128: PalletStakingPalletConfigOpU128;
+    PalletStakingPalletConfigOpU32: PalletStakingPalletConfigOpU32;
+    PalletStakingPalletError: PalletStakingPalletError;
+    PalletStakingPalletEvent: PalletStakingPalletEvent;
+    PalletStakingReleases: PalletStakingReleases;
+    PalletStakingRewardDestination: PalletStakingRewardDestination;
+    PalletStakingSlashingSlashingSpans: PalletStakingSlashingSlashingSpans;
+    PalletStakingSlashingSpanRecord: PalletStakingSlashingSpanRecord;
+    PalletStakingStakingLedger: PalletStakingStakingLedger;
+    PalletStakingUnappliedSlash: PalletStakingUnappliedSlash;
+    PalletStakingUnlockChunk: PalletStakingUnlockChunk;
+    PalletStakingValidatorPrefs: PalletStakingValidatorPrefs;
+    PalletStorageBagIdType: PalletStorageBagIdType;
+    PalletStorageBagRecord: PalletStorageBagRecord;
+    PalletStorageCall: PalletStorageCall;
+    PalletStorageDataObject: PalletStorageDataObject;
+    PalletStorageDataObjectCreationParameters: PalletStorageDataObjectCreationParameters;
+    PalletStorageDistributionBucketFamilyRecord: PalletStorageDistributionBucketFamilyRecord;
+    PalletStorageDistributionBucketIdRecord: PalletStorageDistributionBucketIdRecord;
+    PalletStorageDistributionBucketRecord: PalletStorageDistributionBucketRecord;
+    PalletStorageDynBagCreationParametersRecord: PalletStorageDynBagCreationParametersRecord;
+    PalletStorageDynamicBagCreationPolicy: PalletStorageDynamicBagCreationPolicy;
+    PalletStorageDynamicBagIdType: PalletStorageDynamicBagIdType;
+    PalletStorageDynamicBagType: PalletStorageDynamicBagType;
+    PalletStorageError: PalletStorageError;
+    PalletStorageRawEvent: PalletStorageRawEvent;
+    PalletStorageStaticBagId: PalletStorageStaticBagId;
+    PalletStorageStorageBucketOperatorStatus: PalletStorageStorageBucketOperatorStatus;
+    PalletStorageStorageBucketRecord: PalletStorageStorageBucketRecord;
+    PalletStorageUploadParametersRecord: PalletStorageUploadParametersRecord;
+    PalletStorageVoucher: PalletStorageVoucher;
+    PalletTimestampCall: PalletTimestampCall;
+    PalletTransactionPaymentChargeTransactionPayment: PalletTransactionPaymentChargeTransactionPayment;
+    PalletTransactionPaymentReleases: PalletTransactionPaymentReleases;
+    PalletUtilityCall: PalletUtilityCall;
+    PalletUtilityError: PalletUtilityError;
+    PalletUtilityEvent: PalletUtilityEvent;
+    PalletUtilityRawEvent: PalletUtilityRawEvent;
+    PalletVestingCall: PalletVestingCall;
+    PalletVestingError: PalletVestingError;
+    PalletVestingEvent: PalletVestingEvent;
+    PalletVestingReleases: PalletVestingReleases;
+    PalletVestingVestingInfo: PalletVestingVestingInfo;
+    PalletWorkingGroupApplyOnOpeningParams: PalletWorkingGroupApplyOnOpeningParams;
+    PalletWorkingGroupCall: PalletWorkingGroupCall;
+    PalletWorkingGroupErrorsError: PalletWorkingGroupErrorsError;
+    PalletWorkingGroupGroupWorker: PalletWorkingGroupGroupWorker;
+    PalletWorkingGroupInstance1: PalletWorkingGroupInstance1;
+    PalletWorkingGroupInstance2: PalletWorkingGroupInstance2;
+    PalletWorkingGroupInstance3: PalletWorkingGroupInstance3;
+    PalletWorkingGroupInstance4: PalletWorkingGroupInstance4;
+    PalletWorkingGroupInstance5: PalletWorkingGroupInstance5;
+    PalletWorkingGroupInstance6: PalletWorkingGroupInstance6;
+    PalletWorkingGroupInstance7: PalletWorkingGroupInstance7;
+    PalletWorkingGroupInstance8: PalletWorkingGroupInstance8;
+    PalletWorkingGroupInstance9: PalletWorkingGroupInstance9;
+    PalletWorkingGroupJobApplication: PalletWorkingGroupJobApplication;
+    PalletWorkingGroupOpening: PalletWorkingGroupOpening;
+    PalletWorkingGroupOpeningType: PalletWorkingGroupOpeningType;
+    PalletWorkingGroupRawEventInstance1: PalletWorkingGroupRawEventInstance1;
+    PalletWorkingGroupRawEventInstance2: PalletWorkingGroupRawEventInstance2;
+    PalletWorkingGroupRawEventInstance3: PalletWorkingGroupRawEventInstance3;
+    PalletWorkingGroupRawEventInstance4: PalletWorkingGroupRawEventInstance4;
+    PalletWorkingGroupRawEventInstance5: PalletWorkingGroupRawEventInstance5;
+    PalletWorkingGroupRawEventInstance6: PalletWorkingGroupRawEventInstance6;
+    PalletWorkingGroupRawEventInstance7: PalletWorkingGroupRawEventInstance7;
+    PalletWorkingGroupRawEventInstance8: PalletWorkingGroupRawEventInstance8;
+    PalletWorkingGroupRawEventInstance9: PalletWorkingGroupRawEventInstance9;
+    PalletWorkingGroupRewardPaymentType: PalletWorkingGroupRewardPaymentType;
+    PalletWorkingGroupStakeParameters: PalletWorkingGroupStakeParameters;
+    PalletWorkingGroupStakePolicy: PalletWorkingGroupStakePolicy;
+    SpAuthorityDiscoveryAppPublic: SpAuthorityDiscoveryAppPublic;
+    SpConsensusBabeAllowedSlots: SpConsensusBabeAllowedSlots;
+    SpConsensusBabeAppPublic: SpConsensusBabeAppPublic;
+    SpConsensusBabeBabeEpochConfiguration: SpConsensusBabeBabeEpochConfiguration;
+    SpConsensusBabeDigestsNextConfigDescriptor: SpConsensusBabeDigestsNextConfigDescriptor;
+    SpConsensusBabeDigestsPreDigest: SpConsensusBabeDigestsPreDigest;
+    SpConsensusBabeDigestsPrimaryPreDigest: SpConsensusBabeDigestsPrimaryPreDigest;
+    SpConsensusBabeDigestsSecondaryPlainPreDigest: SpConsensusBabeDigestsSecondaryPlainPreDigest;
+    SpConsensusBabeDigestsSecondaryVRFPreDigest: SpConsensusBabeDigestsSecondaryVRFPreDigest;
+    SpConsensusSlotsEquivocationProof: SpConsensusSlotsEquivocationProof;
+    SpCoreCryptoKeyTypeId: SpCoreCryptoKeyTypeId;
+    SpCoreEcdsaSignature: SpCoreEcdsaSignature;
+    SpCoreEd25519Public: SpCoreEd25519Public;
+    SpCoreEd25519Signature: SpCoreEd25519Signature;
+    SpCoreOffchainOpaqueNetworkState: SpCoreOffchainOpaqueNetworkState;
+    SpCoreSr25519Public: SpCoreSr25519Public;
+    SpCoreSr25519Signature: SpCoreSr25519Signature;
+    SpCoreVoid: SpCoreVoid;
+    SpFinalityGrandpaAppPublic: SpFinalityGrandpaAppPublic;
+    SpFinalityGrandpaAppSignature: SpFinalityGrandpaAppSignature;
+    SpFinalityGrandpaEquivocation: SpFinalityGrandpaEquivocation;
+    SpFinalityGrandpaEquivocationProof: SpFinalityGrandpaEquivocationProof;
+    SpNposElectionsElectionScore: SpNposElectionsElectionScore;
+    SpNposElectionsSupport: SpNposElectionsSupport;
+    SpRuntimeArithmeticError: SpRuntimeArithmeticError;
+    SpRuntimeBlakeTwo256: SpRuntimeBlakeTwo256;
+    SpRuntimeDigest: SpRuntimeDigest;
+    SpRuntimeDigestDigestItem: SpRuntimeDigestDigestItem;
+    SpRuntimeDispatchError: SpRuntimeDispatchError;
+    SpRuntimeHeader: SpRuntimeHeader;
+    SpRuntimeModuleError: SpRuntimeModuleError;
+    SpRuntimeMultiSignature: SpRuntimeMultiSignature;
+    SpRuntimeTokenError: SpRuntimeTokenError;
+    SpRuntimeTransactionalError: SpRuntimeTransactionalError;
+    SpSessionMembershipProof: SpSessionMembershipProof;
+    SpStakingOffenceOffenceDetails: SpStakingOffenceOffenceDetails;
+    SpVersionRuntimeVersion: SpVersionRuntimeVersion;
+  } // InterfaceTypes
+} // declare module
diff --git a/node_modules/@joystream/types/types/src/augment/types-lookup.ts b/node_modules/@joystream/types/types/src/augment/types-lookup.ts
new file mode 100644
index 0000000..fd687a8
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/augment/types-lookup.ts
@@ -0,0 +1,5673 @@
+// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
+/* eslint-disable */
+
+declare module '@polkadot/types/lookup' {
+  import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+  import type { ITuple } from '@polkadot/types-codec/types';
+  import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+  import type { Event } from '@polkadot/types/interfaces/system';
+
+  /** @name FrameSystemAccountInfo (3) */
+  export interface FrameSystemAccountInfo extends Struct {
+    readonly nonce: u32;
+    readonly consumers: u32;
+    readonly providers: u32;
+    readonly sufficients: u32;
+    readonly data: PalletBalancesAccountData;
+  }
+
+  /** @name PalletBalancesAccountData (5) */
+  export interface PalletBalancesAccountData extends Struct {
+    readonly free: u128;
+    readonly reserved: u128;
+    readonly miscFrozen: u128;
+    readonly feeFrozen: u128;
+  }
+
+  /** @name FrameSupportWeightsPerDispatchClassU64 (7) */
+  export interface FrameSupportWeightsPerDispatchClassU64 extends Struct {
+    readonly normal: u64;
+    readonly operational: u64;
+    readonly mandatory: u64;
+  }
+
+  /** @name SpRuntimeDigest (11) */
+  export interface SpRuntimeDigest extends Struct {
+    readonly logs: Vec<SpRuntimeDigestDigestItem>;
+  }
+
+  /** @name SpRuntimeDigestDigestItem (13) */
+  export interface SpRuntimeDigestDigestItem extends Enum {
+    readonly isOther: boolean;
+    readonly asOther: Bytes;
+    readonly isConsensus: boolean;
+    readonly asConsensus: ITuple<[U8aFixed, Bytes]>;
+    readonly isSeal: boolean;
+    readonly asSeal: ITuple<[U8aFixed, Bytes]>;
+    readonly isPreRuntime: boolean;
+    readonly asPreRuntime: ITuple<[U8aFixed, Bytes]>;
+    readonly isRuntimeEnvironmentUpdated: boolean;
+    readonly type: 'Other' | 'Consensus' | 'Seal' | 'PreRuntime' | 'RuntimeEnvironmentUpdated';
+  }
+
+  /** @name FrameSystemEventRecord (16) */
+  export interface FrameSystemEventRecord extends Struct {
+    readonly phase: FrameSystemPhase;
+    readonly event: Event;
+    readonly topics: Vec<H256>;
+  }
+
+  /** @name FrameSystemEvent (18) */
+  export interface FrameSystemEvent extends Enum {
+    readonly isExtrinsicSuccess: boolean;
+    readonly asExtrinsicSuccess: {
+      readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
+    } & Struct;
+    readonly isExtrinsicFailed: boolean;
+    readonly asExtrinsicFailed: {
+      readonly dispatchError: SpRuntimeDispatchError;
+      readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
+    } & Struct;
+    readonly isCodeUpdated: boolean;
+    readonly isNewAccount: boolean;
+    readonly asNewAccount: {
+      readonly account: AccountId32;
+    } & Struct;
+    readonly isKilledAccount: boolean;
+    readonly asKilledAccount: {
+      readonly account: AccountId32;
+    } & Struct;
+    readonly isRemarked: boolean;
+    readonly asRemarked: {
+      readonly sender: AccountId32;
+      readonly hash_: H256;
+    } & Struct;
+    readonly type: 'ExtrinsicSuccess' | 'ExtrinsicFailed' | 'CodeUpdated' | 'NewAccount' | 'KilledAccount' | 'Remarked';
+  }
+
+  /** @name FrameSupportWeightsDispatchInfo (19) */
+  export interface FrameSupportWeightsDispatchInfo extends Struct {
+    readonly weight: u64;
+    readonly class: FrameSupportWeightsDispatchClass;
+    readonly paysFee: FrameSupportWeightsPays;
+  }
+
+  /** @name FrameSupportWeightsDispatchClass (20) */
+  export interface FrameSupportWeightsDispatchClass extends Enum {
+    readonly isNormal: boolean;
+    readonly isOperational: boolean;
+    readonly isMandatory: boolean;
+    readonly type: 'Normal' | 'Operational' | 'Mandatory';
+  }
+
+  /** @name FrameSupportWeightsPays (21) */
+  export interface FrameSupportWeightsPays extends Enum {
+    readonly isYes: boolean;
+    readonly isNo: boolean;
+    readonly type: 'Yes' | 'No';
+  }
+
+  /** @name SpRuntimeDispatchError (22) */
+  export interface SpRuntimeDispatchError extends Enum {
+    readonly isOther: boolean;
+    readonly isCannotLookup: boolean;
+    readonly isBadOrigin: boolean;
+    readonly isModule: boolean;
+    readonly asModule: SpRuntimeModuleError;
+    readonly isConsumerRemaining: boolean;
+    readonly isNoProviders: boolean;
+    readonly isTooManyConsumers: boolean;
+    readonly isToken: boolean;
+    readonly asToken: SpRuntimeTokenError;
+    readonly isArithmetic: boolean;
+    readonly asArithmetic: SpRuntimeArithmeticError;
+    readonly isTransactional: boolean;
+    readonly asTransactional: SpRuntimeTransactionalError;
+    readonly type: 'Other' | 'CannotLookup' | 'BadOrigin' | 'Module' | 'ConsumerRemaining' | 'NoProviders' | 'TooManyConsumers' | 'Token' | 'Arithmetic' | 'Transactional';
+  }
+
+  /** @name SpRuntimeModuleError (23) */
+  export interface SpRuntimeModuleError extends Struct {
+    readonly index: u8;
+    readonly error: U8aFixed;
+  }
+
+  /** @name SpRuntimeTokenError (24) */
+  export interface SpRuntimeTokenError extends Enum {
+    readonly isNoFunds: boolean;
+    readonly isWouldDie: boolean;
+    readonly isBelowMinimum: boolean;
+    readonly isCannotCreate: boolean;
+    readonly isUnknownAsset: boolean;
+    readonly isFrozen: boolean;
+    readonly isUnsupported: boolean;
+    readonly type: 'NoFunds' | 'WouldDie' | 'BelowMinimum' | 'CannotCreate' | 'UnknownAsset' | 'Frozen' | 'Unsupported';
+  }
+
+  /** @name SpRuntimeArithmeticError (25) */
+  export interface SpRuntimeArithmeticError extends Enum {
+    readonly isUnderflow: boolean;
+    readonly isOverflow: boolean;
+    readonly isDivisionByZero: boolean;
+    readonly type: 'Underflow' | 'Overflow' | 'DivisionByZero';
+  }
+
+  /** @name SpRuntimeTransactionalError (26) */
+  export interface SpRuntimeTransactionalError extends Enum {
+    readonly isLimitReached: boolean;
+    readonly isNoLayer: boolean;
+    readonly type: 'LimitReached' | 'NoLayer';
+  }
+
+  /** @name PalletUtilityEvent (27) */
+  export interface PalletUtilityEvent extends Enum {
+    readonly isBatchInterrupted: boolean;
+    readonly asBatchInterrupted: {
+      readonly index: u32;
+      readonly error: SpRuntimeDispatchError;
+    } & Struct;
+    readonly isBatchCompleted: boolean;
+    readonly isBatchCompletedWithErrors: boolean;
+    readonly isItemCompleted: boolean;
+    readonly isItemFailed: boolean;
+    readonly asItemFailed: {
+      readonly error: SpRuntimeDispatchError;
+    } & Struct;
+    readonly isDispatchedAs: boolean;
+    readonly asDispatchedAs: {
+      readonly result: Result<Null, SpRuntimeDispatchError>;
+    } & Struct;
+    readonly type: 'BatchInterrupted' | 'BatchCompleted' | 'BatchCompletedWithErrors' | 'ItemCompleted' | 'ItemFailed' | 'DispatchedAs';
+  }
+
+  /** @name PalletBalancesEvent (30) */
+  export interface PalletBalancesEvent extends Enum {
+    readonly isEndowed: boolean;
+    readonly asEndowed: {
+      readonly account: AccountId32;
+      readonly freeBalance: u128;
+    } & Struct;
+    readonly isDustLost: boolean;
+    readonly asDustLost: {
+      readonly account: AccountId32;
+      readonly amount: u128;
+    } & Struct;
+    readonly isTransfer: boolean;
+    readonly asTransfer: {
+      readonly from: AccountId32;
+      readonly to: AccountId32;
+      readonly amount: u128;
+    } & Struct;
+    readonly isBalanceSet: boolean;
+    readonly asBalanceSet: {
+      readonly who: AccountId32;
+      readonly free: u128;
+      readonly reserved: u128;
+    } & Struct;
+    readonly isReserved: boolean;
+    readonly asReserved: {
+      readonly who: AccountId32;
+      readonly amount: u128;
+    } & Struct;
+    readonly isUnreserved: boolean;
+    readonly asUnreserved: {
+      readonly who: AccountId32;
+      readonly amount: u128;
+    } & Struct;
+    readonly isReserveRepatriated: boolean;
+    readonly asReserveRepatriated: {
+      readonly from: AccountId32;
+      readonly to: AccountId32;
+      readonly amount: u128;
+      readonly destinationStatus: FrameSupportTokensMiscBalanceStatus;
+    } & Struct;
+    readonly isDeposit: boolean;
+    readonly asDeposit: {
+      readonly who: AccountId32;
+      readonly amount: u128;
+    } & Struct;
+    readonly isWithdraw: boolean;
+    readonly asWithdraw: {
+      readonly who: AccountId32;
+      readonly amount: u128;
+    } & Struct;
+    readonly isSlashed: boolean;
+    readonly asSlashed: {
+      readonly who: AccountId32;
+      readonly amount: u128;
+    } & Struct;
+    readonly type: 'Endowed' | 'DustLost' | 'Transfer' | 'BalanceSet' | 'Reserved' | 'Unreserved' | 'ReserveRepatriated' | 'Deposit' | 'Withdraw' | 'Slashed';
+  }
+
+  /** @name FrameSupportTokensMiscBalanceStatus (31) */
+  export interface FrameSupportTokensMiscBalanceStatus extends Enum {
+    readonly isFree: boolean;
+    readonly isReserved: boolean;
+    readonly type: 'Free' | 'Reserved';
+  }
+
+  /** @name PalletElectionProviderMultiPhaseEvent (32) */
+  export interface PalletElectionProviderMultiPhaseEvent extends Enum {
+    readonly isSolutionStored: boolean;
+    readonly asSolutionStored: {
+      readonly electionCompute: PalletElectionProviderMultiPhaseElectionCompute;
+      readonly prevEjected: bool;
+    } & Struct;
+    readonly isElectionFinalized: boolean;
+    readonly asElectionFinalized: {
+      readonly electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>;
+    } & Struct;
+    readonly isRewarded: boolean;
+    readonly asRewarded: {
+      readonly account: AccountId32;
+      readonly value: u128;
+    } & Struct;
+    readonly isSlashed: boolean;
+    readonly asSlashed: {
+      readonly account: AccountId32;
+      readonly value: u128;
+    } & Struct;
+    readonly isSignedPhaseStarted: boolean;
+    readonly asSignedPhaseStarted: {
+      readonly round: u32;
+    } & Struct;
+    readonly isUnsignedPhaseStarted: boolean;
+    readonly asUnsignedPhaseStarted: {
+      readonly round: u32;
+    } & Struct;
+    readonly type: 'SolutionStored' | 'ElectionFinalized' | 'Rewarded' | 'Slashed' | 'SignedPhaseStarted' | 'UnsignedPhaseStarted';
+  }
+
+  /** @name PalletElectionProviderMultiPhaseElectionCompute (33) */
+  export interface PalletElectionProviderMultiPhaseElectionCompute extends Enum {
+    readonly isOnChain: boolean;
+    readonly isSigned: boolean;
+    readonly isUnsigned: boolean;
+    readonly isFallback: boolean;
+    readonly isEmergency: boolean;
+    readonly type: 'OnChain' | 'Signed' | 'Unsigned' | 'Fallback' | 'Emergency';
+  }
+
+  /** @name PalletStakingPalletEvent (36) */
+  export interface PalletStakingPalletEvent extends Enum {
+    readonly isEraPaid: boolean;
+    readonly asEraPaid: ITuple<[u32, u128, u128]>;
+    readonly isRewarded: boolean;
+    readonly asRewarded: ITuple<[AccountId32, u128]>;
+    readonly isSlashed: boolean;
+    readonly asSlashed: ITuple<[AccountId32, u128]>;
+    readonly isOldSlashingReportDiscarded: boolean;
+    readonly asOldSlashingReportDiscarded: u32;
+    readonly isStakersElected: boolean;
+    readonly isBonded: boolean;
+    readonly asBonded: ITuple<[AccountId32, u128]>;
+    readonly isUnbonded: boolean;
+    readonly asUnbonded: ITuple<[AccountId32, u128]>;
+    readonly isWithdrawn: boolean;
+    readonly asWithdrawn: ITuple<[AccountId32, u128]>;
+    readonly isKicked: boolean;
+    readonly asKicked: ITuple<[AccountId32, AccountId32]>;
+    readonly isStakingElectionFailed: boolean;
+    readonly isChilled: boolean;
+    readonly asChilled: AccountId32;
+    readonly isPayoutStarted: boolean;
+    readonly asPayoutStarted: ITuple<[u32, AccountId32]>;
+    readonly isValidatorPrefsSet: boolean;
+    readonly asValidatorPrefsSet: ITuple<[AccountId32, PalletStakingValidatorPrefs]>;
+    readonly type: 'EraPaid' | 'Rewarded' | 'Slashed' | 'OldSlashingReportDiscarded' | 'StakersElected' | 'Bonded' | 'Unbonded' | 'Withdrawn' | 'Kicked' | 'StakingElectionFailed' | 'Chilled' | 'PayoutStarted' | 'ValidatorPrefsSet';
+  }
+
+  /** @name PalletStakingValidatorPrefs (37) */
+  export interface PalletStakingValidatorPrefs extends Struct {
+    readonly commission: Compact<Perbill>;
+    readonly blocked: bool;
+  }
+
+  /** @name PalletSessionEvent (40) */
+  export interface PalletSessionEvent extends Enum {
+    readonly isNewSession: boolean;
+    readonly asNewSession: {
+      readonly sessionIndex: u32;
+    } & Struct;
+    readonly type: 'NewSession';
+  }
+
+  /** @name PalletGrandpaEvent (41) */
+  export interface PalletGrandpaEvent extends Enum {
+    readonly isNewAuthorities: boolean;
+    readonly asNewAuthorities: {
+      readonly authoritySet: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
+    } & Struct;
+    readonly isPaused: boolean;
+    readonly isResumed: boolean;
+    readonly type: 'NewAuthorities' | 'Paused' | 'Resumed';
+  }
+
+  /** @name SpFinalityGrandpaAppPublic (44) */
+  export interface SpFinalityGrandpaAppPublic extends SpCoreEd25519Public {}
+
+  /** @name SpCoreEd25519Public (45) */
+  export interface SpCoreEd25519Public extends U8aFixed {}
+
+  /** @name PalletImOnlineEvent (46) */
+  export interface PalletImOnlineEvent extends Enum {
+    readonly isHeartbeatReceived: boolean;
+    readonly asHeartbeatReceived: {
+      readonly authorityId: PalletImOnlineSr25519AppSr25519Public;
+    } & Struct;
+    readonly isAllGood: boolean;
+    readonly isSomeOffline: boolean;
+    readonly asSomeOffline: {
+      readonly offline: Vec<ITuple<[AccountId32, PalletStakingExposure]>>;
+    } & Struct;
+    readonly type: 'HeartbeatReceived' | 'AllGood' | 'SomeOffline';
+  }
+
+  /** @name PalletImOnlineSr25519AppSr25519Public (47) */
+  export interface PalletImOnlineSr25519AppSr25519Public extends SpCoreSr25519Public {}
+
+  /** @name SpCoreSr25519Public (48) */
+  export interface SpCoreSr25519Public extends U8aFixed {}
+
+  /** @name PalletStakingExposure (51) */
+  export interface PalletStakingExposure extends Struct {
+    readonly total: Compact<u128>;
+    readonly own: Compact<u128>;
+    readonly others: Vec<PalletStakingIndividualExposure>;
+  }
+
+  /** @name PalletStakingIndividualExposure (54) */
+  export interface PalletStakingIndividualExposure extends Struct {
+    readonly who: AccountId32;
+    readonly value: Compact<u128>;
+  }
+
+  /** @name PalletOffencesEvent (55) */
+  export interface PalletOffencesEvent extends Enum {
+    readonly isOffence: boolean;
+    readonly asOffence: {
+      readonly kind: U8aFixed;
+      readonly timeslot: Bytes;
+    } & Struct;
+    readonly type: 'Offence';
+  }
+
+  /** @name PalletBagsListEvent (57) */
+  export interface PalletBagsListEvent extends Enum {
+    readonly isRebagged: boolean;
+    readonly asRebagged: {
+      readonly who: AccountId32;
+      readonly from: u64;
+      readonly to: u64;
+    } & Struct;
+    readonly isScoreUpdated: boolean;
+    readonly asScoreUpdated: {
+      readonly who: AccountId32;
+      readonly newScore: u64;
+    } & Struct;
+    readonly type: 'Rebagged' | 'ScoreUpdated';
+  }
+
+  /** @name PalletVestingEvent (58) */
+  export interface PalletVestingEvent extends Enum {
+    readonly isVestingUpdated: boolean;
+    readonly asVestingUpdated: {
+      readonly account: AccountId32;
+      readonly unvested: u128;
+    } & Struct;
+    readonly isVestingCompleted: boolean;
+    readonly asVestingCompleted: {
+      readonly account: AccountId32;
+    } & Struct;
+    readonly type: 'VestingUpdated' | 'VestingCompleted';
+  }
+
+  /** @name PalletMultisigEvent (59) */
+  export interface PalletMultisigEvent extends Enum {
+    readonly isNewMultisig: boolean;
+    readonly asNewMultisig: {
+      readonly approving: AccountId32;
+      readonly multisig: AccountId32;
+      readonly callHash: U8aFixed;
+    } & Struct;
+    readonly isMultisigApproval: boolean;
+    readonly asMultisigApproval: {
+      readonly approving: AccountId32;
+      readonly timepoint: PalletMultisigTimepoint;
+      readonly multisig: AccountId32;
+      readonly callHash: U8aFixed;
+    } & Struct;
+    readonly isMultisigExecuted: boolean;
+    readonly asMultisigExecuted: {
+      readonly approving: AccountId32;
+      readonly timepoint: PalletMultisigTimepoint;
+      readonly multisig: AccountId32;
+      readonly callHash: U8aFixed;
+      readonly result: Result<Null, SpRuntimeDispatchError>;
+    } & Struct;
+    readonly isMultisigCancelled: boolean;
+    readonly asMultisigCancelled: {
+      readonly cancelling: AccountId32;
+      readonly timepoint: PalletMultisigTimepoint;
+      readonly multisig: AccountId32;
+      readonly callHash: U8aFixed;
+    } & Struct;
+    readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
+  }
+
+  /** @name PalletMultisigTimepoint (60) */
+  export interface PalletMultisigTimepoint extends Struct {
+    readonly height: u32;
+    readonly index: u32;
+  }
+
+  /** @name PalletCouncilRawEvent (61) */
+  export interface PalletCouncilRawEvent extends Enum {
+    readonly isAnnouncingPeriodStarted: boolean;
+    readonly asAnnouncingPeriodStarted: u32;
+    readonly isNotEnoughCandidates: boolean;
+    readonly asNotEnoughCandidates: u32;
+    readonly isVotingPeriodStarted: boolean;
+    readonly asVotingPeriodStarted: u32;
+    readonly isNewCandidate: boolean;
+    readonly asNewCandidate: ITuple<[u64, AccountId32, AccountId32, u128]>;
+    readonly isNewCouncilElected: boolean;
+    readonly asNewCouncilElected: ITuple<[Vec<u64>, u32]>;
+    readonly isNewCouncilNotElected: boolean;
+    readonly asNewCouncilNotElected: u32;
+    readonly isCandidacyStakeRelease: boolean;
+    readonly asCandidacyStakeRelease: u64;
+    readonly isCandidacyWithdraw: boolean;
+    readonly asCandidacyWithdraw: u64;
+    readonly isCandidacyNoteSet: boolean;
+    readonly asCandidacyNoteSet: ITuple<[u64, Bytes]>;
+    readonly isRewardPayment: boolean;
+    readonly asRewardPayment: ITuple<[u64, AccountId32, u128, u128]>;
+    readonly isBudgetBalanceSet: boolean;
+    readonly asBudgetBalanceSet: u128;
+    readonly isBudgetRefill: boolean;
+    readonly asBudgetRefill: u128;
+    readonly isBudgetRefillPlanned: boolean;
+    readonly asBudgetRefillPlanned: u32;
+    readonly isBudgetIncrementUpdated: boolean;
+    readonly asBudgetIncrementUpdated: u128;
+    readonly isCouncilorRewardUpdated: boolean;
+    readonly asCouncilorRewardUpdated: u128;
+    readonly isRequestFunded: boolean;
+    readonly asRequestFunded: ITuple<[AccountId32, u128]>;
+    readonly isCouncilBudgetFunded: boolean;
+    readonly asCouncilBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isCouncilorRemarked: boolean;
+    readonly asCouncilorRemarked: ITuple<[u64, Bytes]>;
+    readonly isCandidateRemarked: boolean;
+    readonly asCandidateRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'AnnouncingPeriodStarted' | 'NotEnoughCandidates' | 'VotingPeriodStarted' | 'NewCandidate' | 'NewCouncilElected' | 'NewCouncilNotElected' | 'CandidacyStakeRelease' | 'CandidacyWithdraw' | 'CandidacyNoteSet' | 'RewardPayment' | 'BudgetBalanceSet' | 'BudgetRefill' | 'BudgetRefillPlanned' | 'BudgetIncrementUpdated' | 'CouncilorRewardUpdated' | 'RequestFunded' | 'CouncilBudgetFunded' | 'CouncilorRemarked' | 'CandidateRemarked';
+  }
+
+  /** @name PalletReferendumRawEvent (63) */
+  export interface PalletReferendumRawEvent extends Enum {
+    readonly isReferendumStarted: boolean;
+    readonly asReferendumStarted: ITuple<[u32, u32]>;
+    readonly isReferendumStartedForcefully: boolean;
+    readonly asReferendumStartedForcefully: ITuple<[u32, u32]>;
+    readonly isRevealingStageStarted: boolean;
+    readonly asRevealingStageStarted: u32;
+    readonly isReferendumFinished: boolean;
+    readonly asReferendumFinished: Vec<PalletReferendumOptionResult>;
+    readonly isVoteCast: boolean;
+    readonly asVoteCast: ITuple<[AccountId32, H256, u128]>;
+    readonly isVoteRevealed: boolean;
+    readonly asVoteRevealed: ITuple<[AccountId32, u64, Bytes]>;
+    readonly isStakeReleased: boolean;
+    readonly asStakeReleased: AccountId32;
+    readonly isAccountOptedOutOfVoting: boolean;
+    readonly asAccountOptedOutOfVoting: AccountId32;
+    readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased' | 'AccountOptedOutOfVoting';
+  }
+
+  /** @name PalletReferendumInstance1 (64) */
+  export type PalletReferendumInstance1 = Null;
+
+  /** @name PalletReferendumOptionResult (66) */
+  export interface PalletReferendumOptionResult extends Struct {
+    readonly optionId: u64;
+    readonly votePower: u128;
+  }
+
+  /** @name PalletMembershipRawEvent (67) */
+  export interface PalletMembershipRawEvent extends Enum {
+    readonly isMemberInvited: boolean;
+    readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters, u128]>;
+    readonly isMembershipGifted: boolean;
+    readonly asMembershipGifted: ITuple<[u64, PalletMembershipGiftMembershipParameters]>;
+    readonly isMembershipBought: boolean;
+    readonly asMembershipBought: ITuple<[u64, PalletMembershipBuyMembershipParameters, u32]>;
+    readonly isMemberProfileUpdated: boolean;
+    readonly asMemberProfileUpdated: ITuple<[u64, Option<Bytes>, Option<Bytes>]>;
+    readonly isMemberAccountsUpdated: boolean;
+    readonly asMemberAccountsUpdated: ITuple<[u64, Option<AccountId32>, Option<AccountId32>]>;
+    readonly isMemberVerificationStatusUpdated: boolean;
+    readonly asMemberVerificationStatusUpdated: ITuple<[u64, bool, u64]>;
+    readonly isReferralCutUpdated: boolean;
+    readonly asReferralCutUpdated: u8;
+    readonly isInvitesTransferred: boolean;
+    readonly asInvitesTransferred: ITuple<[u64, u64, u32]>;
+    readonly isMembershipPriceUpdated: boolean;
+    readonly asMembershipPriceUpdated: u128;
+    readonly isInitialInvitationBalanceUpdated: boolean;
+    readonly asInitialInvitationBalanceUpdated: u128;
+    readonly isLeaderInvitationQuotaUpdated: boolean;
+    readonly asLeaderInvitationQuotaUpdated: u32;
+    readonly isInitialInvitationCountUpdated: boolean;
+    readonly asInitialInvitationCountUpdated: u32;
+    readonly isStakingAccountAdded: boolean;
+    readonly asStakingAccountAdded: ITuple<[AccountId32, u64]>;
+    readonly isStakingAccountRemoved: boolean;
+    readonly asStakingAccountRemoved: ITuple<[AccountId32, u64]>;
+    readonly isStakingAccountConfirmed: boolean;
+    readonly asStakingAccountConfirmed: ITuple<[AccountId32, u64]>;
+    readonly isMemberRemarked: boolean;
+    readonly asMemberRemarked: ITuple<[u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
+    readonly isMemberCreated: boolean;
+    readonly asMemberCreated: ITuple<[u64, PalletMembershipCreateMemberParameters, u32]>;
+    readonly type: 'MemberInvited' | 'MembershipGifted' | 'MembershipBought' | 'MemberProfileUpdated' | 'MemberAccountsUpdated' | 'MemberVerificationStatusUpdated' | 'ReferralCutUpdated' | 'InvitesTransferred' | 'MembershipPriceUpdated' | 'InitialInvitationBalanceUpdated' | 'LeaderInvitationQuotaUpdated' | 'InitialInvitationCountUpdated' | 'StakingAccountAdded' | 'StakingAccountRemoved' | 'StakingAccountConfirmed' | 'MemberRemarked' | 'MemberCreated';
+  }
+
+  /** @name PalletMembershipBuyMembershipParameters (68) */
+  export interface PalletMembershipBuyMembershipParameters extends Struct {
+    readonly rootAccount: AccountId32;
+    readonly controllerAccount: AccountId32;
+    readonly handle: Option<Bytes>;
+    readonly metadata: Bytes;
+    readonly referrerId: Option<u64>;
+  }
+
+  /** @name PalletMembershipInviteMembershipParameters (71) */
+  export interface PalletMembershipInviteMembershipParameters extends Struct {
+    readonly invitingMemberId: u64;
+    readonly rootAccount: AccountId32;
+    readonly controllerAccount: AccountId32;
+    readonly handle: Option<Bytes>;
+    readonly metadata: Bytes;
+  }
+
+  /** @name PalletMembershipCreateMemberParameters (72) */
+  export interface PalletMembershipCreateMemberParameters extends Struct {
+    readonly rootAccount: AccountId32;
+    readonly controllerAccount: AccountId32;
+    readonly handle: Bytes;
+    readonly metadata: Bytes;
+    readonly isFoundingMember: bool;
+  }
+
+  /** @name PalletMembershipGiftMembershipParameters (73) */
+  export interface PalletMembershipGiftMembershipParameters extends Struct {
+    readonly rootAccount: AccountId32;
+    readonly controllerAccount: AccountId32;
+    readonly handle: Option<Bytes>;
+    readonly metadata: Bytes;
+    readonly creditControllerAccount: u128;
+    readonly applyControllerAccountInvitationLock: Option<u128>;
+    readonly creditRootAccount: u128;
+    readonly applyRootAccountInvitationLock: Option<u128>;
+  }
+
+  /** @name PalletForumRawEvent (78) */
+  export interface PalletForumRawEvent extends Enum {
+    readonly isCategoryCreated: boolean;
+    readonly asCategoryCreated: ITuple<[u64, Option<u64>, Bytes, Bytes]>;
+    readonly isCategoryArchivalStatusUpdated: boolean;
+    readonly asCategoryArchivalStatusUpdated: ITuple<[u64, bool, PalletForumPrivilegedActor]>;
+    readonly isCategoryTitleUpdated: boolean;
+    readonly asCategoryTitleUpdated: ITuple<[u64, H256, PalletForumPrivilegedActor]>;
+    readonly isCategoryDescriptionUpdated: boolean;
+    readonly asCategoryDescriptionUpdated: ITuple<[u64, H256, PalletForumPrivilegedActor]>;
+    readonly isCategoryDeleted: boolean;
+    readonly asCategoryDeleted: ITuple<[u64, PalletForumPrivilegedActor]>;
+    readonly isThreadCreated: boolean;
+    readonly asThreadCreated: ITuple<[u64, u64, u64, u64, Bytes, Bytes]>;
+    readonly isThreadModerated: boolean;
+    readonly asThreadModerated: ITuple<[u64, Bytes, PalletForumPrivilegedActor, u64]>;
+    readonly isThreadUpdated: boolean;
+    readonly asThreadUpdated: ITuple<[u64, bool, PalletForumPrivilegedActor, u64]>;
+    readonly isThreadMetadataUpdated: boolean;
+    readonly asThreadMetadataUpdated: ITuple<[u64, u64, u64, Bytes]>;
+    readonly isThreadDeleted: boolean;
+    readonly asThreadDeleted: ITuple<[u64, u64, u64, bool]>;
+    readonly isThreadMoved: boolean;
+    readonly asThreadMoved: ITuple<[u64, u64, PalletForumPrivilegedActor, u64]>;
+    readonly isPostAdded: boolean;
+    readonly asPostAdded: ITuple<[u64, u64, u64, u64, Bytes, bool]>;
+    readonly isPostModerated: boolean;
+    readonly asPostModerated: ITuple<[u64, Bytes, PalletForumPrivilegedActor, u64, u64]>;
+    readonly isPostDeleted: boolean;
+    readonly asPostDeleted: ITuple<[Bytes, u64, BTreeMap<PalletForumExtendedPostIdObject, bool>]>;
+    readonly isPostTextUpdated: boolean;
+    readonly asPostTextUpdated: ITuple<[u64, u64, u64, u64, Bytes]>;
+    readonly isCategoryStickyThreadUpdate: boolean;
+    readonly asCategoryStickyThreadUpdate: ITuple<[u64, BTreeSet<u64>, PalletForumPrivilegedActor]>;
+    readonly isCategoryMembershipOfModeratorUpdated: boolean;
+    readonly asCategoryMembershipOfModeratorUpdated: ITuple<[u64, u64, bool]>;
+    readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
+  }
+
+  /** @name PalletForumPrivilegedActor (79) */
+  export interface PalletForumPrivilegedActor extends Enum {
+    readonly isLead: boolean;
+    readonly isModerator: boolean;
+    readonly asModerator: u64;
+    readonly type: 'Lead' | 'Moderator';
+  }
+
+  /** @name PalletForumExtendedPostIdObject (80) */
+  export interface PalletForumExtendedPostIdObject extends Struct {
+    readonly categoryId: u64;
+    readonly threadId: u64;
+    readonly postId: u64;
+  }
+
+  /** @name PalletConstitutionRawEvent (85) */
+  export interface PalletConstitutionRawEvent extends Enum {
+    readonly isConstutionAmended: boolean;
+    readonly asConstutionAmended: ITuple<[H256, Bytes]>;
+    readonly type: 'ConstutionAmended';
+  }
+
+  /** @name PalletBountyRawEvent (86) */
+  export interface PalletBountyRawEvent extends Enum {
+    readonly isBountyCreated: boolean;
+    readonly asBountyCreated: ITuple<[u64, PalletBountyBountyParametersBTreeSet, Bytes]>;
+    readonly isBountyOracleSwitched: boolean;
+    readonly asBountyOracleSwitched: ITuple<[u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+    readonly isBountyTerminated: boolean;
+    readonly asBountyTerminated: ITuple<[u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+    readonly isBountyFunded: boolean;
+    readonly asBountyFunded: ITuple<[u64, PalletBountyBountyActor, u128]>;
+    readonly isBountyMaxFundingReached: boolean;
+    readonly asBountyMaxFundingReached: u64;
+    readonly isBountyFundingWithdrawal: boolean;
+    readonly asBountyFundingWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+    readonly isBountyCreatorCherryWithdrawal: boolean;
+    readonly asBountyCreatorCherryWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+    readonly isBountyCreatorOracleRewardWithdrawal: boolean;
+    readonly asBountyCreatorOracleRewardWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+    readonly isBountyOracleRewardWithdrawal: boolean;
+    readonly asBountyOracleRewardWithdrawal: ITuple<[u64, PalletBountyBountyActor, u128]>;
+    readonly isBountyRemoved: boolean;
+    readonly asBountyRemoved: u64;
+    readonly isWorkEntryAnnounced: boolean;
+    readonly asWorkEntryAnnounced: ITuple<[u64, u64, u64, AccountId32, Bytes]>;
+    readonly isWorkSubmitted: boolean;
+    readonly asWorkSubmitted: ITuple<[u64, u64, u64, Bytes]>;
+    readonly isOracleJudgmentSubmitted: boolean;
+    readonly asOracleJudgmentSubmitted: ITuple<[u64, PalletBountyBountyActor, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+    readonly isWorkEntrantFundsWithdrawn: boolean;
+    readonly asWorkEntrantFundsWithdrawn: ITuple<[u64, u64, u64]>;
+    readonly isBountyContributorRemarked: boolean;
+    readonly asBountyContributorRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+    readonly isBountyOracleRemarked: boolean;
+    readonly asBountyOracleRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+    readonly isBountyEntrantRemarked: boolean;
+    readonly asBountyEntrantRemarked: ITuple<[u64, u64, u64, Bytes]>;
+    readonly isBountyCreatorRemarked: boolean;
+    readonly asBountyCreatorRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+    readonly isWorkSubmissionPeriodEnded: boolean;
+    readonly asWorkSubmissionPeriodEnded: ITuple<[u64, PalletBountyBountyActor]>;
+    readonly isWorkEntrantStakeUnlocked: boolean;
+    readonly asWorkEntrantStakeUnlocked: ITuple<[u64, u64, AccountId32]>;
+    readonly isWorkEntrantStakeSlashed: boolean;
+    readonly asWorkEntrantStakeSlashed: ITuple<[u64, u64, AccountId32, u128]>;
+    readonly isFunderStateBloatBondWithdrawn: boolean;
+    readonly asFunderStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
+    readonly isCreatorStateBloatBondWithdrawn: boolean;
+    readonly asCreatorStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
+    readonly type: 'BountyCreated' | 'BountyOracleSwitched' | 'BountyTerminated' | 'BountyFunded' | 'BountyMaxFundingReached' | 'BountyFundingWithdrawal' | 'BountyCreatorCherryWithdrawal' | 'BountyCreatorOracleRewardWithdrawal' | 'BountyOracleRewardWithdrawal' | 'BountyRemoved' | 'WorkEntryAnnounced' | 'WorkSubmitted' | 'OracleJudgmentSubmitted' | 'WorkEntrantFundsWithdrawn' | 'BountyContributorRemarked' | 'BountyOracleRemarked' | 'BountyEntrantRemarked' | 'BountyCreatorRemarked' | 'WorkSubmissionPeriodEnded' | 'WorkEntrantStakeUnlocked' | 'WorkEntrantStakeSlashed' | 'FunderStateBloatBondWithdrawn' | 'CreatorStateBloatBondWithdrawn';
+  }
+
+  /** @name PalletBountyBountyParametersBTreeSet (87) */
+  export interface PalletBountyBountyParametersBTreeSet extends Struct {
+    readonly oracle: PalletBountyBountyActor;
+    readonly contractType: PalletBountyAssuranceContractTypeBTreeSet;
+    readonly creator: PalletBountyBountyActor;
+    readonly cherry: u128;
+    readonly oracleReward: u128;
+    readonly entrantStake: u128;
+    readonly fundingType: PalletBountyFundingType;
+  }
+
+  /** @name PalletBountyBountyActor (88) */
+  export interface PalletBountyBountyActor extends Enum {
+    readonly isCouncil: boolean;
+    readonly isMember: boolean;
+    readonly asMember: u64;
+    readonly type: 'Council' | 'Member';
+  }
+
+  /** @name PalletBountyAssuranceContractTypeBTreeSet (89) */
+  export interface PalletBountyAssuranceContractTypeBTreeSet extends Enum {
+    readonly isOpen: boolean;
+    readonly isClosed: boolean;
+    readonly asClosed: BTreeSet<u64>;
+    readonly type: 'Open' | 'Closed';
+  }
+
+  /** @name PalletBountyFundingType (90) */
+  export interface PalletBountyFundingType extends Enum {
+    readonly isPerpetual: boolean;
+    readonly asPerpetual: {
+      readonly target: u128;
+    } & Struct;
+    readonly isLimited: boolean;
+    readonly asLimited: {
+      readonly target: u128;
+      readonly fundingPeriod: u32;
+    } & Struct;
+    readonly type: 'Perpetual' | 'Limited';
+  }
+
+  /** @name PalletBountyOracleWorkEntryJudgment (92) */
+  export interface PalletBountyOracleWorkEntryJudgment extends Enum {
+    readonly isWinner: boolean;
+    readonly asWinner: {
+      readonly reward: u128;
+    } & Struct;
+    readonly isRejected: boolean;
+    readonly asRejected: {
+      readonly slashingShare: Perbill;
+      readonly actionJustification: Bytes;
+    } & Struct;
+    readonly type: 'Winner' | 'Rejected';
+  }
+
+  /** @name PalletUtilityRawEvent (95) */
+  export interface PalletUtilityRawEvent extends Enum {
+    readonly isSignaled: boolean;
+    readonly asSignaled: Bytes;
+    readonly isRuntimeUpgraded: boolean;
+    readonly asRuntimeUpgraded: Bytes;
+    readonly isUpdatedWorkingGroupBudget: boolean;
+    readonly asUpdatedWorkingGroupBudget: ITuple<[PalletCommonWorkingGroupIterableEnumsWorkingGroup, u128, PalletCommonBalanceKind]>;
+    readonly isTokensBurned: boolean;
+    readonly asTokensBurned: ITuple<[AccountId32, u128]>;
+    readonly type: 'Signaled' | 'RuntimeUpgraded' | 'UpdatedWorkingGroupBudget' | 'TokensBurned';
+  }
+
+  /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (96) */
+  export interface PalletCommonWorkingGroupIterableEnumsWorkingGroup extends Enum {
+    readonly isForum: boolean;
+    readonly isStorage: boolean;
+    readonly isContent: boolean;
+    readonly isOperationsAlpha: boolean;
+    readonly isApp: boolean;
+    readonly isDistribution: boolean;
+    readonly isOperationsBeta: boolean;
+    readonly isOperationsGamma: boolean;
+    readonly isMembership: boolean;
+    readonly type: 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'App' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership';
+  }
+
+  /** @name PalletCommonBalanceKind (97) */
+  export interface PalletCommonBalanceKind extends Enum {
+    readonly isPositive: boolean;
+    readonly isNegative: boolean;
+    readonly type: 'Positive' | 'Negative';
+  }
+
+  /** @name PalletContentRawEvent (98) */
+  export interface PalletContentRawEvent extends Enum {
+    readonly isCuratorGroupCreated: boolean;
+    readonly asCuratorGroupCreated: u64;
+    readonly isCuratorGroupPermissionsUpdated: boolean;
+    readonly asCuratorGroupPermissionsUpdated: ITuple<[u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
+    readonly isCuratorGroupStatusSet: boolean;
+    readonly asCuratorGroupStatusSet: ITuple<[u64, bool]>;
+    readonly isCuratorAdded: boolean;
+    readonly asCuratorAdded: ITuple<[u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
+    readonly isCuratorRemoved: boolean;
+    readonly asCuratorRemoved: ITuple<[u64, u64]>;
+    readonly isChannelCreated: boolean;
+    readonly asChannelCreated: ITuple<[u64, PalletContentChannelRecord, PalletContentChannelCreationParametersRecord, AccountId32]>;
+    readonly isChannelUpdated: boolean;
+    readonly asChannelUpdated: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
+    readonly isChannelPrivilegeLevelUpdated: boolean;
+    readonly asChannelPrivilegeLevelUpdated: ITuple<[u64, u8]>;
+    readonly isChannelStateBloatBondValueUpdated: boolean;
+    readonly asChannelStateBloatBondValueUpdated: u128;
+    readonly isVideoStateBloatBondValueUpdated: boolean;
+    readonly asVideoStateBloatBondValueUpdated: u128;
+    readonly isChannelAssetsRemoved: boolean;
+    readonly asChannelAssetsRemoved: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, PalletContentChannelRecord]>;
+    readonly isChannelDeleted: boolean;
+    readonly asChannelDeleted: ITuple<[PalletContentPermissionsContentActor, u64]>;
+    readonly isChannelDeletedByModerator: boolean;
+    readonly asChannelDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, Bytes]>;
+    readonly isChannelVisibilitySetByModerator: boolean;
+    readonly asChannelVisibilitySetByModerator: ITuple<[PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+    readonly isChannelPausedFeaturesUpdatedByModerator: boolean;
+    readonly asChannelPausedFeaturesUpdatedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
+    readonly isChannelAssetsDeletedByModerator: boolean;
+    readonly asChannelAssetsDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, Bytes]>;
+    readonly isChannelFundsWithdrawn: boolean;
+    readonly asChannelFundsWithdrawn: ITuple<[PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
+    readonly isChannelRewardClaimedAndWithdrawn: boolean;
+    readonly asChannelRewardClaimedAndWithdrawn: ITuple<[PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
+    readonly isVideoCreated: boolean;
+    readonly asVideoCreated: ITuple<[PalletContentPermissionsContentActor, u64, u64, PalletContentVideoCreationParametersRecord, BTreeSet<u64>]>;
+    readonly isVideoUpdated: boolean;
+    readonly asVideoUpdated: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentVideoUpdateParametersRecord, BTreeSet<u64>]>;
+    readonly isVideoDeleted: boolean;
+    readonly asVideoDeleted: ITuple<[PalletContentPermissionsContentActor, u64]>;
+    readonly isVideoDeletedByModerator: boolean;
+    readonly asVideoDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, Bytes]>;
+    readonly isVideoVisibilitySetByModerator: boolean;
+    readonly asVideoVisibilitySetByModerator: ITuple<[PalletContentPermissionsContentActor, u64, bool, Bytes]>;
+    readonly isVideoAssetsDeletedByModerator: boolean;
+    readonly asVideoAssetsDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, bool, Bytes]>;
+    readonly isChannelPayoutsUpdated: boolean;
+    readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
+    readonly isChannelRewardUpdated: boolean;
+    readonly asChannelRewardUpdated: ITuple<[u128, u128, u64]>;
+    readonly isEnglishAuctionStarted: boolean;
+    readonly asEnglishAuctionStarted: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
+    readonly isOpenAuctionStarted: boolean;
+    readonly asOpenAuctionStarted: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesOpenAuctionParamsRecord, u64]>;
+    readonly isNftIssued: boolean;
+    readonly asNftIssued: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesNftIssuanceParametersRecord]>;
+    readonly isNftDestroyed: boolean;
+    readonly asNftDestroyed: ITuple<[PalletContentPermissionsContentActor, u64]>;
+    readonly isAuctionBidMade: boolean;
+    readonly asAuctionBidMade: ITuple<[u64, u64, u128, Option<u64>]>;
+    readonly isAuctionBidCanceled: boolean;
+    readonly asAuctionBidCanceled: ITuple<[u64, u64]>;
+    readonly isAuctionCanceled: boolean;
+    readonly asAuctionCanceled: ITuple<[PalletContentPermissionsContentActor, u64]>;
+    readonly isEnglishAuctionSettled: boolean;
+    readonly asEnglishAuctionSettled: ITuple<[u64, AccountId32, u64]>;
+    readonly isBidMadeCompletingAuction: boolean;
+    readonly asBidMadeCompletingAuction: ITuple<[u64, u64, Option<u64>]>;
+    readonly isOpenAuctionBidAccepted: boolean;
+    readonly asOpenAuctionBidAccepted: ITuple<[PalletContentPermissionsContentActor, u64, u64, u128]>;
+    readonly isOfferStarted: boolean;
+    readonly asOfferStarted: ITuple<[u64, PalletContentPermissionsContentActor, u64, Option<u128>]>;
+    readonly isOfferAccepted: boolean;
+    readonly asOfferAccepted: u64;
+    readonly isOfferCanceled: boolean;
+    readonly asOfferCanceled: ITuple<[u64, PalletContentPermissionsContentActor]>;
+    readonly isNftSellOrderMade: boolean;
+    readonly asNftSellOrderMade: ITuple<[u64, PalletContentPermissionsContentActor, u128]>;
+    readonly isNftBought: boolean;
+    readonly asNftBought: ITuple<[u64, u64]>;
+    readonly isBuyNowCanceled: boolean;
+    readonly asBuyNowCanceled: ITuple<[u64, PalletContentPermissionsContentActor]>;
+    readonly isBuyNowPriceUpdated: boolean;
+    readonly asBuyNowPriceUpdated: ITuple<[u64, PalletContentPermissionsContentActor, u128]>;
+    readonly isNftSlingedBackToTheOriginalArtist: boolean;
+    readonly asNftSlingedBackToTheOriginalArtist: ITuple<[u64, PalletContentPermissionsContentActor]>;
+    readonly isChannelOwnerRemarked: boolean;
+    readonly asChannelOwnerRemarked: ITuple<[u64, Bytes]>;
+    readonly isChannelAgentRemarked: boolean;
+    readonly asChannelAgentRemarked: ITuple<[PalletContentPermissionsContentActor, u64, Bytes]>;
+    readonly isNftOwnerRemarked: boolean;
+    readonly asNftOwnerRemarked: ITuple<[PalletContentPermissionsContentActor, u64, Bytes]>;
+    readonly isInitializedChannelTransfer: boolean;
+    readonly asInitializedChannelTransfer: ITuple<[u64, PalletContentPermissionsContentActor, PalletContentPendingTransfer]>;
+    readonly isCancelChannelTransfer: boolean;
+    readonly asCancelChannelTransfer: ITuple<[u64, PalletContentPermissionsContentActor]>;
+    readonly isChannelTransferAccepted: boolean;
+    readonly asChannelTransferAccepted: ITuple<[u64, PalletContentTransferCommitmentParametersBTreeMap]>;
+    readonly isGlobalNftLimitUpdated: boolean;
+    readonly asGlobalNftLimitUpdated: ITuple<[PalletContentNftLimitPeriod, u64]>;
+    readonly isChannelNftLimitUpdated: boolean;
+    readonly asChannelNftLimitUpdated: ITuple<[PalletContentPermissionsContentActor, PalletContentNftLimitPeriod, u64, u64]>;
+    readonly isToggledNftLimits: boolean;
+    readonly asToggledNftLimits: bool;
+    readonly isCreatorTokenIssued: boolean;
+    readonly asCreatorTokenIssued: ITuple<[PalletContentPermissionsContentActor, u64, u64]>;
+    readonly isCreatorTokenIssuerRemarked: boolean;
+    readonly asCreatorTokenIssuerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued' | 'CreatorTokenIssuerRemarked';
+  }
+
+  /** @name PalletContentPermissionsContentActor (99) */
+  export interface PalletContentPermissionsContentActor extends Enum {
+    readonly isCurator: boolean;
+    readonly asCurator: ITuple<[u64, u64]>;
+    readonly isMember: boolean;
+    readonly asMember: u64;
+    readonly isLead: boolean;
+    readonly type: 'Curator' | 'Member' | 'Lead';
+  }
+
+  /** @name PalletContentChannelRecord (100) */
+  export interface PalletContentChannelRecord extends Struct {
+    readonly owner: PalletContentChannelOwner;
+    readonly numVideos: u64;
+    readonly collaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+    readonly cumulativeRewardClaimed: u128;
+    readonly privilegeLevel: u8;
+    readonly pausedFeatures: BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>;
+    readonly transferStatus: PalletContentChannelTransferStatus;
+    readonly dataObjects: BTreeSet<u64>;
+    readonly dailyNftLimit: PalletContentLimitPerPeriod;
+    readonly weeklyNftLimit: PalletContentLimitPerPeriod;
+    readonly dailyNftCounter: PalletContentNftCounter;
+    readonly weeklyNftCounter: PalletContentNftCounter;
+    readonly creatorTokenId: Option<u64>;
+    readonly channelStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
+  }
+
+  /** @name PalletContentIterableEnumsChannelActionPermission (104) */
+  export interface PalletContentIterableEnumsChannelActionPermission extends Enum {
+    readonly isUpdateChannelMetadata: boolean;
+    readonly isManageNonVideoChannelAssets: boolean;
+    readonly isManageChannelCollaborators: boolean;
+    readonly isUpdateVideoMetadata: boolean;
+    readonly isAddVideo: boolean;
+    readonly isManageVideoAssets: boolean;
+    readonly isDeleteChannel: boolean;
+    readonly isDeleteVideo: boolean;
+    readonly isManageVideoNfts: boolean;
+    readonly isAgentRemark: boolean;
+    readonly isTransferChannel: boolean;
+    readonly isClaimChannelReward: boolean;
+    readonly isWithdrawFromChannelBalance: boolean;
+    readonly isIssueCreatorToken: boolean;
+    readonly isClaimCreatorTokenPatronage: boolean;
+    readonly isInitAndManageCreatorTokenSale: boolean;
+    readonly isCreatorTokenIssuerTransfer: boolean;
+    readonly isMakeCreatorTokenPermissionless: boolean;
+    readonly isReduceCreatorTokenPatronageRate: boolean;
+    readonly isManageRevenueSplits: boolean;
+    readonly isDeissueCreatorToken: boolean;
+    readonly isAmmControl: boolean;
+    readonly isCreatorTokenRemarks: boolean;
+    readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken' | 'AmmControl' | 'CreatorTokenRemarks';
+  }
+
+  /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (111) */
+  export interface PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature extends Enum {
+    readonly isChannelFundsTransfer: boolean;
+    readonly isCreatorCashout: boolean;
+    readonly isVideoNftIssuance: boolean;
+    readonly isVideoCreation: boolean;
+    readonly isVideoUpdate: boolean;
+    readonly isChannelUpdate: boolean;
+    readonly isCreatorTokenIssuance: boolean;
+    readonly type: 'ChannelFundsTransfer' | 'CreatorCashout' | 'VideoNftIssuance' | 'VideoCreation' | 'VideoUpdate' | 'ChannelUpdate' | 'CreatorTokenIssuance';
+  }
+
+  /** @name PalletCommonBloatBondRepayableBloatBond (114) */
+  export interface PalletCommonBloatBondRepayableBloatBond extends Struct {
+    readonly repaymentRestrictedTo: Option<AccountId32>;
+    readonly amount: u128;
+  }
+
+  /** @name PalletContentChannelOwner (115) */
+  export interface PalletContentChannelOwner extends Enum {
+    readonly isMember: boolean;
+    readonly asMember: u64;
+    readonly isCuratorGroup: boolean;
+    readonly asCuratorGroup: u64;
+    readonly type: 'Member' | 'CuratorGroup';
+  }
+
+  /** @name PalletContentChannelTransferStatus (116) */
+  export interface PalletContentChannelTransferStatus extends Enum {
+    readonly isNoActiveTransfer: boolean;
+    readonly isPendingTransfer: boolean;
+    readonly asPendingTransfer: PalletContentPendingTransfer;
+    readonly type: 'NoActiveTransfer' | 'PendingTransfer';
+  }
+
+  /** @name PalletContentPendingTransfer (117) */
+  export interface PalletContentPendingTransfer extends Struct {
+    readonly newOwner: PalletContentChannelOwner;
+    readonly transferParams: PalletContentTransferCommitmentParametersBoundedBTreeMap;
+  }
+
+  /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (118) */
+  export interface PalletContentTransferCommitmentParametersBoundedBTreeMap extends Struct {
+    readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+    readonly price: u128;
+    readonly transferId: u64;
+  }
+
+  /** @name PalletContentLimitPerPeriod (119) */
+  export interface PalletContentLimitPerPeriod extends Struct {
+    readonly limit: u64;
+    readonly blockNumberPeriod: u32;
+  }
+
+  /** @name PalletContentNftCounter (120) */
+  export interface PalletContentNftCounter extends Struct {
+    readonly counter: u64;
+    readonly lastUpdated: u32;
+  }
+
+  /** @name PalletContentNftTypesEnglishAuctionParamsRecord (121) */
+  export interface PalletContentNftTypesEnglishAuctionParamsRecord extends Struct {
+    readonly startingPrice: u128;
+    readonly buyNowPrice: Option<u128>;
+    readonly whitelist: BTreeSet<u64>;
+    readonly startsAt: Option<u32>;
+    readonly duration: u32;
+    readonly extensionPeriod: u32;
+    readonly minBidStep: u128;
+  }
+
+  /** @name PalletContentNftTypesOpenAuctionParamsRecord (123) */
+  export interface PalletContentNftTypesOpenAuctionParamsRecord extends Struct {
+    readonly startingPrice: u128;
+    readonly buyNowPrice: Option<u128>;
+    readonly startsAt: Option<u32>;
+    readonly whitelist: BTreeSet<u64>;
+    readonly bidLockDuration: u32;
+  }
+
+  /** @name PalletContentNftTypesNftIssuanceParametersRecord (124) */
+  export interface PalletContentNftTypesNftIssuanceParametersRecord extends Struct {
+    readonly royalty: Option<Perbill>;
+    readonly nftMetadata: Bytes;
+    readonly nonChannelOwner: Option<u64>;
+    readonly initTransactionalStatus: PalletContentNftTypesInitTransactionalStatusRecord;
+  }
+
+  /** @name PalletContentNftTypesInitTransactionalStatusRecord (125) */
+  export interface PalletContentNftTypesInitTransactionalStatusRecord extends Enum {
+    readonly isIdle: boolean;
+    readonly isBuyNow: boolean;
+    readonly asBuyNow: u128;
+    readonly isInitiatedOfferToMember: boolean;
+    readonly asInitiatedOfferToMember: ITuple<[u64, Option<u128>]>;
+    readonly isEnglishAuction: boolean;
+    readonly asEnglishAuction: PalletContentNftTypesEnglishAuctionParamsRecord;
+    readonly isOpenAuction: boolean;
+    readonly asOpenAuction: PalletContentNftTypesOpenAuctionParamsRecord;
+    readonly type: 'Idle' | 'BuyNow' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction';
+  }
+
+  /** @name PalletContentChannelCreationParametersRecord (127) */
+  export interface PalletContentChannelCreationParametersRecord extends Struct {
+    readonly assets: Option<PalletContentStorageAssetsRecord>;
+    readonly meta: Option<Bytes>;
+    readonly collaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+    readonly storageBuckets: BTreeSet<u64>;
+    readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+    readonly expectedChannelStateBloatBond: u128;
+    readonly expectedDataObjectStateBloatBond: u128;
+  }
+
+  /** @name PalletContentStorageAssetsRecord (128) */
+  export interface PalletContentStorageAssetsRecord extends Struct {
+    readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
+    readonly expectedDataSizeFee: u128;
+  }
+
+  /** @name PalletStorageDataObjectCreationParameters (130) */
+  export interface PalletStorageDataObjectCreationParameters extends Struct {
+    readonly size_: u64;
+    readonly ipfsContentId: Bytes;
+  }
+
+  /** @name PalletStorageDistributionBucketIdRecord (131) */
+  export interface PalletStorageDistributionBucketIdRecord extends Struct {
+    readonly distributionBucketFamilyId: u64;
+    readonly distributionBucketIndex: u64;
+  }
+
+  /** @name PalletContentChannelUpdateParametersRecord (138) */
+  export interface PalletContentChannelUpdateParametersRecord extends Struct {
+    readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
+    readonly newMeta: Option<Bytes>;
+    readonly assetsToRemove: BTreeSet<u64>;
+    readonly collaborators: Option<BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>>;
+    readonly expectedDataObjectStateBloatBond: u128;
+    readonly storageBucketsNumWitness: Option<u32>;
+  }
+
+  /** @name PalletContentVideoCreationParametersRecord (140) */
+  export interface PalletContentVideoCreationParametersRecord extends Struct {
+    readonly assets: Option<PalletContentStorageAssetsRecord>;
+    readonly meta: Option<Bytes>;
+    readonly autoIssueNft: Option<PalletContentNftTypesNftIssuanceParametersRecord>;
+    readonly expectedVideoStateBloatBond: u128;
+    readonly expectedDataObjectStateBloatBond: u128;
+    readonly storageBucketsNumWitness: u32;
+  }
+
+  /** @name PalletContentVideoUpdateParametersRecord (142) */
+  export interface PalletContentVideoUpdateParametersRecord extends Struct {
+    readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
+    readonly newMeta: Option<Bytes>;
+    readonly assetsToRemove: BTreeSet<u64>;
+    readonly autoIssueNft: Option<PalletContentNftTypesNftIssuanceParametersRecord>;
+    readonly expectedDataObjectStateBloatBond: u128;
+    readonly storageBucketsNumWitness: Option<u32>;
+  }
+
+  /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (145) */
+  export interface PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction extends Enum {
+    readonly isHideVideo: boolean;
+    readonly isHideChannel: boolean;
+    readonly isChangeChannelFeatureStatus: boolean;
+    readonly asChangeChannelFeatureStatus: PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature;
+    readonly isDeleteVideo: boolean;
+    readonly isDeleteChannel: boolean;
+    readonly isDeleteVideoAssets: boolean;
+    readonly asDeleteVideoAssets: bool;
+    readonly isDeleteNonVideoChannelAssets: boolean;
+    readonly isUpdateChannelNftLimits: boolean;
+    readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideo' | 'DeleteChannel' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
+  }
+
+  /** @name PalletContentTransferCommitmentParametersBTreeMap (149) */
+  export interface PalletContentTransferCommitmentParametersBTreeMap extends Struct {
+    readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+    readonly price: u128;
+    readonly transferId: u64;
+  }
+
+  /** @name PalletContentUpdateChannelPayoutsParametersRecord (150) */
+  export interface PalletContentUpdateChannelPayoutsParametersRecord extends Struct {
+    readonly commitment: Option<H256>;
+    readonly payload: Option<PalletContentChannelPayoutsPayloadParametersRecord>;
+    readonly minCashoutAllowed: Option<u128>;
+    readonly maxCashoutAllowed: Option<u128>;
+    readonly channelCashoutsEnabled: Option<bool>;
+  }
+
+  /** @name PalletContentChannelPayoutsPayloadParametersRecord (151) */
+  export interface PalletContentChannelPayoutsPayloadParametersRecord extends Struct {
+    readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
+    readonly expectedDataSizeFee: u128;
+    readonly expectedDataObjectStateBloatBond: u128;
+  }
+
+  /** @name PalletContentChannelFundsDestination (155) */
+  export interface PalletContentChannelFundsDestination extends Enum {
+    readonly isAccountId: boolean;
+    readonly asAccountId: AccountId32;
+    readonly isCouncilBudget: boolean;
+    readonly type: 'AccountId' | 'CouncilBudget';
+  }
+
+  /** @name PalletContentNftLimitPeriod (156) */
+  export interface PalletContentNftLimitPeriod extends Enum {
+    readonly isDaily: boolean;
+    readonly isWeekly: boolean;
+    readonly type: 'Daily' | 'Weekly';
+  }
+
+  /** @name PalletStorageRawEvent (157) */
+  export interface PalletStorageRawEvent extends Enum {
+    readonly isStorageBucketCreated: boolean;
+    readonly asStorageBucketCreated: ITuple<[u64, Option<u64>, bool, u64, u64]>;
+    readonly isStorageBucketInvitationAccepted: boolean;
+    readonly asStorageBucketInvitationAccepted: ITuple<[u64, u64, AccountId32]>;
+    readonly isStorageBucketsUpdatedForBag: boolean;
+    readonly asStorageBucketsUpdatedForBag: ITuple<[PalletStorageBagIdType, BTreeSet<u64>, BTreeSet<u64>]>;
+    readonly isDataObjectsUploaded: boolean;
+    readonly asDataObjectsUploaded: ITuple<[BTreeSet<u64>, PalletStorageUploadParametersRecord, u128]>;
+    readonly isStorageOperatorMetadataSet: boolean;
+    readonly asStorageOperatorMetadataSet: ITuple<[u64, u64, Bytes]>;
+    readonly isStorageBucketVoucherLimitsSet: boolean;
+    readonly asStorageBucketVoucherLimitsSet: ITuple<[u64, u64, u64]>;
+    readonly isPendingDataObjectsAccepted: boolean;
+    readonly asPendingDataObjectsAccepted: ITuple<[u64, u64, PalletStorageBagIdType, BTreeSet<u64>]>;
+    readonly isStorageBucketInvitationCancelled: boolean;
+    readonly asStorageBucketInvitationCancelled: u64;
+    readonly isStorageBucketOperatorInvited: boolean;
+    readonly asStorageBucketOperatorInvited: ITuple<[u64, u64]>;
+    readonly isStorageBucketOperatorRemoved: boolean;
+    readonly asStorageBucketOperatorRemoved: u64;
+    readonly isUploadingBlockStatusUpdated: boolean;
+    readonly asUploadingBlockStatusUpdated: bool;
+    readonly isDataObjectPerMegabyteFeeUpdated: boolean;
+    readonly asDataObjectPerMegabyteFeeUpdated: u128;
+    readonly isStorageBucketsPerBagLimitUpdated: boolean;
+    readonly asStorageBucketsPerBagLimitUpdated: u32;
+    readonly isStorageBucketsVoucherMaxLimitsUpdated: boolean;
+    readonly asStorageBucketsVoucherMaxLimitsUpdated: ITuple<[u64, u64]>;
+    readonly isDataObjectsMoved: boolean;
+    readonly asDataObjectsMoved: ITuple<[PalletStorageBagIdType, PalletStorageBagIdType, BTreeSet<u64>]>;
+    readonly isDataObjectsDeleted: boolean;
+    readonly asDataObjectsDeleted: ITuple<[AccountId32, PalletStorageBagIdType, BTreeSet<u64>]>;
+    readonly isStorageBucketStatusUpdated: boolean;
+    readonly asStorageBucketStatusUpdated: ITuple<[u64, bool]>;
+    readonly isUpdateBlacklist: boolean;
+    readonly asUpdateBlacklist: ITuple<[BTreeSet<Bytes>, BTreeSet<Bytes>]>;
+    readonly isDynamicBagDeleted: boolean;
+    readonly asDynamicBagDeleted: PalletStorageDynamicBagIdType;
+    readonly isDynamicBagCreated: boolean;
+    readonly asDynamicBagCreated: ITuple<[PalletStorageDynBagCreationParametersRecord, BTreeSet<u64>]>;
+    readonly isVoucherChanged: boolean;
+    readonly asVoucherChanged: ITuple<[u64, PalletStorageVoucher]>;
+    readonly isStorageBucketDeleted: boolean;
+    readonly asStorageBucketDeleted: u64;
+    readonly isNumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: boolean;
+    readonly asNumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: ITuple<[PalletStorageDynamicBagType, u32]>;
+    readonly isDistributionBucketFamilyCreated: boolean;
+    readonly asDistributionBucketFamilyCreated: u64;
+    readonly isDistributionBucketFamilyDeleted: boolean;
+    readonly asDistributionBucketFamilyDeleted: u64;
+    readonly isDistributionBucketCreated: boolean;
+    readonly asDistributionBucketCreated: ITuple<[u64, bool, PalletStorageDistributionBucketIdRecord]>;
+    readonly isDistributionBucketStatusUpdated: boolean;
+    readonly asDistributionBucketStatusUpdated: ITuple<[PalletStorageDistributionBucketIdRecord, bool]>;
+    readonly isDistributionBucketDeleted: boolean;
+    readonly asDistributionBucketDeleted: PalletStorageDistributionBucketIdRecord;
+    readonly isDistributionBucketsUpdatedForBag: boolean;
+    readonly asDistributionBucketsUpdatedForBag: ITuple<[PalletStorageBagIdType, u64, BTreeSet<u64>, BTreeSet<u64>]>;
+    readonly isDistributionBucketsPerBagLimitUpdated: boolean;
+    readonly asDistributionBucketsPerBagLimitUpdated: u32;
+    readonly isDistributionBucketModeUpdated: boolean;
+    readonly asDistributionBucketModeUpdated: ITuple<[PalletStorageDistributionBucketIdRecord, bool]>;
+    readonly isFamiliesInDynamicBagCreationPolicyUpdated: boolean;
+    readonly asFamiliesInDynamicBagCreationPolicyUpdated: ITuple<[PalletStorageDynamicBagType, BTreeMap<u64, u32>]>;
+    readonly isDistributionBucketOperatorInvited: boolean;
+    readonly asDistributionBucketOperatorInvited: ITuple<[PalletStorageDistributionBucketIdRecord, u64]>;
+    readonly isDistributionBucketInvitationCancelled: boolean;
+    readonly asDistributionBucketInvitationCancelled: ITuple<[PalletStorageDistributionBucketIdRecord, u64]>;
+    readonly isDistributionBucketInvitationAccepted: boolean;
+    readonly asDistributionBucketInvitationAccepted: ITuple<[u64, PalletStorageDistributionBucketIdRecord]>;
+    readonly isDistributionBucketMetadataSet: boolean;
+    readonly asDistributionBucketMetadataSet: ITuple<[u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+    readonly isDistributionBucketOperatorRemoved: boolean;
+    readonly asDistributionBucketOperatorRemoved: ITuple<[PalletStorageDistributionBucketIdRecord, u64]>;
+    readonly isDistributionBucketFamilyMetadataSet: boolean;
+    readonly asDistributionBucketFamilyMetadataSet: ITuple<[u64, Bytes]>;
+    readonly isDataObjectStateBloatBondValueUpdated: boolean;
+    readonly asDataObjectStateBloatBondValueUpdated: u128;
+    readonly isDataObjectsUpdated: boolean;
+    readonly asDataObjectsUpdated: ITuple<[PalletStorageUploadParametersRecord, BTreeSet<u64>, BTreeSet<u64>]>;
+    readonly isStorageOperatorRemarked: boolean;
+    readonly asStorageOperatorRemarked: ITuple<[u64, u64, Bytes]>;
+    readonly isDistributionOperatorRemarked: boolean;
+    readonly asDistributionOperatorRemarked: ITuple<[u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
+    readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
+  }
+
+  /** @name PalletStorageUploadParametersRecord (158) */
+  export interface PalletStorageUploadParametersRecord extends Struct {
+    readonly bagId: PalletStorageBagIdType;
+    readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
+    readonly stateBloatBondSourceAccountId: AccountId32;
+    readonly expectedDataSizeFee: u128;
+    readonly expectedDataObjectStateBloatBond: u128;
+  }
+
+  /** @name PalletStorageBagIdType (159) */
+  export interface PalletStorageBagIdType extends Enum {
+    readonly isStatic: boolean;
+    readonly asStatic: PalletStorageStaticBagId;
+    readonly isDynamic: boolean;
+    readonly asDynamic: PalletStorageDynamicBagIdType;
+    readonly type: 'Static' | 'Dynamic';
+  }
+
+  /** @name PalletStorageStaticBagId (160) */
+  export interface PalletStorageStaticBagId extends Enum {
+    readonly isCouncil: boolean;
+    readonly isWorkingGroup: boolean;
+    readonly asWorkingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+    readonly type: 'Council' | 'WorkingGroup';
+  }
+
+  /** @name PalletStorageDynamicBagIdType (161) */
+  export interface PalletStorageDynamicBagIdType extends Enum {
+    readonly isMember: boolean;
+    readonly asMember: u64;
+    readonly isChannel: boolean;
+    readonly asChannel: u64;
+    readonly type: 'Member' | 'Channel';
+  }
+
+  /** @name PalletStorageDynBagCreationParametersRecord (162) */
+  export interface PalletStorageDynBagCreationParametersRecord extends Struct {
+    readonly bagId: PalletStorageDynamicBagIdType;
+    readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
+    readonly stateBloatBondSourceAccountId: AccountId32;
+    readonly expectedDataSizeFee: u128;
+    readonly expectedDataObjectStateBloatBond: u128;
+    readonly storageBuckets: BTreeSet<u64>;
+    readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+  }
+
+  /** @name PalletStorageVoucher (165) */
+  export interface PalletStorageVoucher extends Struct {
+    readonly sizeLimit: u64;
+    readonly objectsLimit: u64;
+    readonly sizeUsed: u64;
+    readonly objectsUsed: u64;
+  }
+
+  /** @name PalletStorageDynamicBagType (166) */
+  export interface PalletStorageDynamicBagType extends Enum {
+    readonly isMember: boolean;
+    readonly isChannel: boolean;
+    readonly type: 'Member' | 'Channel';
+  }
+
+  /** @name PalletProjectTokenEventsRawEvent (170) */
+  export interface PalletProjectTokenEventsRawEvent extends Enum {
+    readonly isTokenAmountTransferred: boolean;
+    readonly asTokenAmountTransferred: ITuple<[u64, u64, PalletProjectTokenTransfers, Bytes]>;
+    readonly isTokenAmountTransferredByIssuer: boolean;
+    readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, PalletProjectTokenTransfers, Bytes]>;
+    readonly isPatronageRateDecreasedTo: boolean;
+    readonly asPatronageRateDecreasedTo: ITuple<[u64, Permill]>;
+    readonly isPatronageCreditClaimed: boolean;
+    readonly asPatronageCreditClaimed: ITuple<[u64, u128, u64]>;
+    readonly isRevenueSplitIssued: boolean;
+    readonly asRevenueSplitIssued: ITuple<[u64, u32, u32, u128]>;
+    readonly isRevenueSplitFinalized: boolean;
+    readonly asRevenueSplitFinalized: ITuple<[u64, AccountId32, u128]>;
+    readonly isUserParticipatedInSplit: boolean;
+    readonly asUserParticipatedInSplit: ITuple<[u64, u64, u128, u128, u32]>;
+    readonly isRevenueSplitLeft: boolean;
+    readonly asRevenueSplitLeft: ITuple<[u64, u64, u128]>;
+    readonly isMemberJoinedWhitelist: boolean;
+    readonly asMemberJoinedWhitelist: ITuple<[u64, u64, PalletProjectTokenTransferPolicy]>;
+    readonly isAccountDustedBy: boolean;
+    readonly asAccountDustedBy: ITuple<[u64, u64, AccountId32, PalletProjectTokenTransferPolicy]>;
+    readonly isTokenDeissued: boolean;
+    readonly asTokenDeissued: u64;
+    readonly isTokenIssued: boolean;
+    readonly asTokenIssued: ITuple<[u64, PalletProjectTokenTokenIssuanceParameters]>;
+    readonly isTokenSaleInitialized: boolean;
+    readonly asTokenSaleInitialized: ITuple<[u64, u32, PalletProjectTokenTokenSale, Option<Bytes>]>;
+    readonly isUpcomingTokenSaleUpdated: boolean;
+    readonly asUpcomingTokenSaleUpdated: ITuple<[u64, u32, Option<u32>, Option<u32>]>;
+    readonly isTokensPurchasedOnSale: boolean;
+    readonly asTokensPurchasedOnSale: ITuple<[u64, u32, u128, u64]>;
+    readonly isTokenSaleFinalized: boolean;
+    readonly asTokenSaleFinalized: ITuple<[u64, u32, u128, u128]>;
+    readonly isTransferPolicyChangedToPermissionless: boolean;
+    readonly asTransferPolicyChangedToPermissionless: u64;
+    readonly isTokensBurned: boolean;
+    readonly asTokensBurned: ITuple<[u64, u64, u128]>;
+    readonly isAmmActivated: boolean;
+    readonly asAmmActivated: ITuple<[u64, u64, PalletProjectTokenAmmCurve]>;
+    readonly isTokensBoughtOnAmm: boolean;
+    readonly asTokensBoughtOnAmm: ITuple<[u64, u64, u128, u128]>;
+    readonly isTokensSoldOnAmm: boolean;
+    readonly asTokensSoldOnAmm: ITuple<[u64, u64, u128, u128]>;
+    readonly isAmmDeactivated: boolean;
+    readonly asAmmDeactivated: ITuple<[u64, u64, u128]>;
+    readonly isMaxYearlyPatronageRateUpdated: boolean;
+    readonly asMaxYearlyPatronageRateUpdated: Permill;
+    readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned' | 'AmmActivated' | 'TokensBoughtOnAmm' | 'TokensSoldOnAmm' | 'AmmDeactivated' | 'MaxYearlyPatronageRateUpdated';
+  }
+
+  /** @name PalletProjectTokenTransferPolicy (171) */
+  export interface PalletProjectTokenTransferPolicy extends Enum {
+    readonly isPermissionless: boolean;
+    readonly isPermissioned: boolean;
+    readonly asPermissioned: H256;
+    readonly type: 'Permissionless' | 'Permissioned';
+  }
+
+  /** @name PalletProjectTokenTokenIssuanceParameters (172) */
+  export interface PalletProjectTokenTokenIssuanceParameters extends Struct {
+    readonly initialAllocation: BTreeMap<u64, PalletProjectTokenTokenAllocation>;
+    readonly symbol: H256;
+    readonly transferPolicy: PalletProjectTokenTransferPolicyParams;
+    readonly patronageRate: Permill;
+    readonly revenueSplitRate: Permill;
+  }
+
+  /** @name PalletProjectTokenTokenAllocation (173) */
+  export interface PalletProjectTokenTokenAllocation extends Struct {
+    readonly amount: u128;
+    readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
+  }
+
+  /** @name PalletProjectTokenVestingScheduleParams (174) */
+  export interface PalletProjectTokenVestingScheduleParams extends Struct {
+    readonly linearVestingDuration: u32;
+    readonly blocksBeforeCliff: u32;
+    readonly cliffAmountPercentage: Permill;
+  }
+
+  /** @name PalletProjectTokenTransferPolicyParams (177) */
+  export interface PalletProjectTokenTransferPolicyParams extends Enum {
+    readonly isPermissionless: boolean;
+    readonly isPermissioned: boolean;
+    readonly asPermissioned: PalletProjectTokenWhitelistParams;
+    readonly type: 'Permissionless' | 'Permissioned';
+  }
+
+  /** @name PalletProjectTokenWhitelistParams (178) */
+  export interface PalletProjectTokenWhitelistParams extends Struct {
+    readonly commitment: H256;
+    readonly payload: Option<PalletProjectTokenSingleDataObjectUploadParams>;
+  }
+
+  /** @name PalletProjectTokenSingleDataObjectUploadParams (179) */
+  export interface PalletProjectTokenSingleDataObjectUploadParams extends Struct {
+    readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
+    readonly expectedDataSizeFee: u128;
+    readonly expectedDataObjectStateBloatBond: u128;
+  }
+
+  /** @name PalletProjectTokenTransfers (185) */
+  export interface PalletProjectTokenTransfers extends BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment> {}
+
+  /** @name PalletProjectTokenValidated (186) */
+  export interface PalletProjectTokenValidated extends Enum {
+    readonly isExisting: boolean;
+    readonly asExisting: u64;
+    readonly isNonExisting: boolean;
+    readonly asNonExisting: u64;
+    readonly type: 'Existing' | 'NonExisting';
+  }
+
+  /** @name PalletProjectTokenValidatedPayment (187) */
+  export interface PalletProjectTokenValidatedPayment extends Struct {
+    readonly payment: PalletProjectTokenPaymentWithVesting;
+    readonly vestingCleanupCandidate: Option<PalletProjectTokenVestingSource>;
+  }
+
+  /** @name PalletProjectTokenPaymentWithVesting (188) */
+  export interface PalletProjectTokenPaymentWithVesting extends Struct {
+    readonly amount: u128;
+    readonly vestingSchedule: Option<PalletProjectTokenVestingScheduleParams>;
+  }
+
+  /** @name PalletProjectTokenVestingSource (190) */
+  export interface PalletProjectTokenVestingSource extends Enum {
+    readonly isInitialIssuance: boolean;
+    readonly isSale: boolean;
+    readonly asSale: u32;
+    readonly isIssuerTransfer: boolean;
+    readonly asIssuerTransfer: u64;
+    readonly type: 'InitialIssuance' | 'Sale' | 'IssuerTransfer';
+  }
+
+  /** @name PalletProjectTokenTokenSale (194) */
+  export interface PalletProjectTokenTokenSale extends Struct {
+    readonly unitPrice: u128;
+    readonly quantityLeft: u128;
+    readonly fundsCollected: u128;
+    readonly tokensSource: u64;
+    readonly earningsDestination: Option<AccountId32>;
+    readonly startBlock: u32;
+    readonly duration: u32;
+    readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
+    readonly capPerMember: Option<u128>;
+    readonly autoFinalize: bool;
+  }
+
+  /** @name PalletProjectTokenAmmCurve (195) */
+  export interface PalletProjectTokenAmmCurve extends Struct {
+    readonly slope: u128;
+    readonly intercept: u128;
+    readonly providedSupply: u128;
+  }
+
+  /** @name PalletProposalsEngineRawEvent (196) */
+  export interface PalletProposalsEngineRawEvent extends Enum {
+    readonly isProposalStatusUpdated: boolean;
+    readonly asProposalStatusUpdated: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
+    readonly isProposalDecisionMade: boolean;
+    readonly asProposalDecisionMade: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalDecision]>;
+    readonly isProposalExecuted: boolean;
+    readonly asProposalExecuted: ITuple<[u32, PalletProposalsEngineProposalStatusesExecutionStatus]>;
+    readonly isVoted: boolean;
+    readonly asVoted: ITuple<[u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
+    readonly isProposalCancelled: boolean;
+    readonly asProposalCancelled: ITuple<[u64, u32]>;
+    readonly isProposerRemarked: boolean;
+    readonly asProposerRemarked: ITuple<[u64, u32, Bytes]>;
+    readonly type: 'ProposalStatusUpdated' | 'ProposalDecisionMade' | 'ProposalExecuted' | 'Voted' | 'ProposalCancelled' | 'ProposerRemarked';
+  }
+
+  /** @name PalletProposalsEngineProposalStatusesProposalStatus (197) */
+  export interface PalletProposalsEngineProposalStatusesProposalStatus extends Enum {
+    readonly isActive: boolean;
+    readonly isPendingExecution: boolean;
+    readonly asPendingExecution: u32;
+    readonly isPendingConstitutionality: boolean;
+    readonly type: 'Active' | 'PendingExecution' | 'PendingConstitutionality';
+  }
+
+  /** @name PalletProposalsEngineProposalStatusesProposalDecision (198) */
+  export interface PalletProposalsEngineProposalStatusesProposalDecision extends Enum {
+    readonly isCanceled: boolean;
+    readonly isCanceledByRuntime: boolean;
+    readonly isVetoed: boolean;
+    readonly isRejected: boolean;
+    readonly isSlashed: boolean;
+    readonly isExpired: boolean;
+    readonly isApproved: boolean;
+    readonly asApproved: PalletProposalsEngineProposalStatusesApprovedProposalDecision;
+    readonly type: 'Canceled' | 'CanceledByRuntime' | 'Vetoed' | 'Rejected' | 'Slashed' | 'Expired' | 'Approved';
+  }
+
+  /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (199) */
+  export interface PalletProposalsEngineProposalStatusesApprovedProposalDecision extends Enum {
+    readonly isPendingExecution: boolean;
+    readonly isPendingConstitutionality: boolean;
+    readonly type: 'PendingExecution' | 'PendingConstitutionality';
+  }
+
+  /** @name PalletProposalsEngineProposalStatusesExecutionStatus (200) */
+  export interface PalletProposalsEngineProposalStatusesExecutionStatus extends Enum {
+    readonly isExecuted: boolean;
+    readonly isExecutionFailed: boolean;
+    readonly asExecutionFailed: {
+      readonly error: Bytes;
+    } & Struct;
+    readonly type: 'Executed' | 'ExecutionFailed';
+  }
+
+  /** @name PalletProposalsEngineVoteKind (201) */
+  export interface PalletProposalsEngineVoteKind extends Enum {
+    readonly isApprove: boolean;
+    readonly isReject: boolean;
+    readonly isSlash: boolean;
+    readonly isAbstain: boolean;
+    readonly type: 'Approve' | 'Reject' | 'Slash' | 'Abstain';
+  }
+
+  /** @name PalletProposalsDiscussionRawEvent (202) */
+  export interface PalletProposalsDiscussionRawEvent extends Enum {
+    readonly isThreadCreated: boolean;
+    readonly asThreadCreated: ITuple<[u64, u64]>;
+    readonly isPostCreated: boolean;
+    readonly asPostCreated: ITuple<[u64, u64, u64, Bytes, bool]>;
+    readonly isPostUpdated: boolean;
+    readonly asPostUpdated: ITuple<[u64, u64, u64, Bytes]>;
+    readonly isThreadModeChanged: boolean;
+    readonly asThreadModeChanged: ITuple<[u64, PalletProposalsDiscussionThreadModeBTreeSet, u64]>;
+    readonly isPostDeleted: boolean;
+    readonly asPostDeleted: ITuple<[u64, u64, u64, bool]>;
+    readonly type: 'ThreadCreated' | 'PostCreated' | 'PostUpdated' | 'ThreadModeChanged' | 'PostDeleted';
+  }
+
+  /** @name PalletProposalsDiscussionThreadModeBTreeSet (203) */
+  export interface PalletProposalsDiscussionThreadModeBTreeSet extends Enum {
+    readonly isOpen: boolean;
+    readonly isClosed: boolean;
+    readonly asClosed: BTreeSet<u64>;
+    readonly type: 'Open' | 'Closed';
+  }
+
+  /** @name PalletProposalsCodexRawEvent (204) */
+  export interface PalletProposalsCodexRawEvent extends Enum {
+    readonly isProposalCreated: boolean;
+    readonly asProposalCreated: ITuple<[u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
+    readonly type: 'ProposalCreated';
+  }
+
+  /** @name PalletProposalsCodexGeneralProposalParams (205) */
+  export interface PalletProposalsCodexGeneralProposalParams extends Struct {
+    readonly memberId: u64;
+    readonly title: Bytes;
+    readonly description: Bytes;
+    readonly stakingAccountId: Option<AccountId32>;
+    readonly exactExecutionBlock: Option<u32>;
+  }
+
+  /** @name PalletProposalsCodexProposalDetails (206) */
+  export interface PalletProposalsCodexProposalDetails extends Enum {
+    readonly isSignal: boolean;
+    readonly asSignal: Bytes;
+    readonly isRuntimeUpgrade: boolean;
+    readonly asRuntimeUpgrade: Bytes;
+    readonly isFundingRequest: boolean;
+    readonly asFundingRequest: Vec<PalletCommonFundingRequestParameters>;
+    readonly isSetMaxValidatorCount: boolean;
+    readonly asSetMaxValidatorCount: u32;
+    readonly isCreateWorkingGroupLeadOpening: boolean;
+    readonly asCreateWorkingGroupLeadOpening: PalletProposalsCodexCreateOpeningParameters;
+    readonly isFillWorkingGroupLeadOpening: boolean;
+    readonly asFillWorkingGroupLeadOpening: PalletProposalsCodexFillOpeningParameters;
+    readonly isUpdateWorkingGroupBudget: boolean;
+    readonly asUpdateWorkingGroupBudget: ITuple<[u128, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletCommonBalanceKind]>;
+    readonly isDecreaseWorkingGroupLeadStake: boolean;
+    readonly asDecreaseWorkingGroupLeadStake: ITuple<[u64, u128, PalletCommonWorkingGroupIterableEnumsWorkingGroup]>;
+    readonly isSlashWorkingGroupLead: boolean;
+    readonly asSlashWorkingGroupLead: ITuple<[u64, u128, PalletCommonWorkingGroupIterableEnumsWorkingGroup]>;
+    readonly isSetWorkingGroupLeadReward: boolean;
+    readonly asSetWorkingGroupLeadReward: ITuple<[u64, Option<u128>, PalletCommonWorkingGroupIterableEnumsWorkingGroup]>;
+    readonly isTerminateWorkingGroupLead: boolean;
+    readonly asTerminateWorkingGroupLead: PalletProposalsCodexTerminateRoleParameters;
+    readonly isAmendConstitution: boolean;
+    readonly asAmendConstitution: Bytes;
+    readonly isCancelWorkingGroupLeadOpening: boolean;
+    readonly asCancelWorkingGroupLeadOpening: ITuple<[u64, PalletCommonWorkingGroupIterableEnumsWorkingGroup]>;
+    readonly isSetMembershipPrice: boolean;
+    readonly asSetMembershipPrice: u128;
+    readonly isSetCouncilBudgetIncrement: boolean;
+    readonly asSetCouncilBudgetIncrement: u128;
+    readonly isSetCouncilorReward: boolean;
+    readonly asSetCouncilorReward: u128;
+    readonly isSetInitialInvitationBalance: boolean;
+    readonly asSetInitialInvitationBalance: u128;
+    readonly isSetInitialInvitationCount: boolean;
+    readonly asSetInitialInvitationCount: u32;
+    readonly isSetMembershipLeadInvitationQuota: boolean;
+    readonly asSetMembershipLeadInvitationQuota: u32;
+    readonly isSetReferralCut: boolean;
+    readonly asSetReferralCut: u8;
+    readonly isVetoProposal: boolean;
+    readonly asVetoProposal: u32;
+    readonly isUpdateGlobalNftLimit: boolean;
+    readonly asUpdateGlobalNftLimit: ITuple<[PalletContentNftLimitPeriod, u64]>;
+    readonly isUpdateChannelPayouts: boolean;
+    readonly asUpdateChannelPayouts: PalletContentUpdateChannelPayoutsParametersRecord;
+    readonly isUpdateMaxYearlyPatronageRate: boolean;
+    readonly asUpdateMaxYearlyPatronageRate: Permill;
+    readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts' | 'UpdateMaxYearlyPatronageRate';
+  }
+
+  /** @name PalletCommonFundingRequestParameters (208) */
+  export interface PalletCommonFundingRequestParameters extends Struct {
+    readonly account: AccountId32;
+    readonly amount: u128;
+  }
+
+  /** @name PalletProposalsCodexCreateOpeningParameters (209) */
+  export interface PalletProposalsCodexCreateOpeningParameters extends Struct {
+    readonly description: Bytes;
+    readonly stakePolicy: PalletWorkingGroupStakePolicy;
+    readonly rewardPerBlock: Option<u128>;
+    readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+  }
+
+  /** @name PalletWorkingGroupStakePolicy (210) */
+  export interface PalletWorkingGroupStakePolicy extends Struct {
+    readonly stakeAmount: u128;
+    readonly leavingUnstakingPeriod: u32;
+  }
+
+  /** @name PalletProposalsCodexFillOpeningParameters (211) */
+  export interface PalletProposalsCodexFillOpeningParameters extends Struct {
+    readonly openingId: u64;
+    readonly applicationId: u64;
+    readonly workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+  }
+
+  /** @name PalletProposalsCodexTerminateRoleParameters (212) */
+  export interface PalletProposalsCodexTerminateRoleParameters extends Struct {
+    readonly workerId: u64;
+    readonly slashingAmount: Option<u128>;
+    readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+  }
+
+  /** @name PalletWorkingGroupRawEventInstance1 (213) */
+  export interface PalletWorkingGroupRawEventInstance1 extends Enum {
+    readonly isOpeningAdded: boolean;
+    readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+    readonly isAppliedOnOpening: boolean;
+    readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+    readonly isOpeningFilled: boolean;
+    readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+    readonly isLeaderSet: boolean;
+    readonly asLeaderSet: u64;
+    readonly isWorkerRoleAccountUpdated: boolean;
+    readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isLeaderUnset: boolean;
+    readonly isWorkerExited: boolean;
+    readonly asWorkerExited: u64;
+    readonly isWorkerStartedLeaving: boolean;
+    readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+    readonly isTerminatedWorker: boolean;
+    readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isTerminatedLeader: boolean;
+    readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isStakeSlashed: boolean;
+    readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+    readonly isStakeDecreased: boolean;
+    readonly asStakeDecreased: ITuple<[u64, u128]>;
+    readonly isStakeIncreased: boolean;
+    readonly asStakeIncreased: ITuple<[u64, u128]>;
+    readonly isApplicationWithdrawn: boolean;
+    readonly asApplicationWithdrawn: u64;
+    readonly isOpeningCanceled: boolean;
+    readonly asOpeningCanceled: u64;
+    readonly isBudgetSet: boolean;
+    readonly asBudgetSet: u128;
+    readonly isWorkerRewardAccountUpdated: boolean;
+    readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isWorkerRewardAmountUpdated: boolean;
+    readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+    readonly isStatusTextChanged: boolean;
+    readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+    readonly isBudgetSpending: boolean;
+    readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+    readonly isRewardPaid: boolean;
+    readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+    readonly isNewMissedRewardLevelReached: boolean;
+    readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+    readonly isWorkingGroupBudgetFunded: boolean;
+    readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isLeadRemarked: boolean;
+    readonly asLeadRemarked: Bytes;
+    readonly isWorkerRemarked: boolean;
+    readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+  }
+
+  /** @name PalletWorkingGroupOpeningType (217) */
+  export interface PalletWorkingGroupOpeningType extends Enum {
+    readonly isLeader: boolean;
+    readonly isRegular: boolean;
+    readonly type: 'Leader' | 'Regular';
+  }
+
+  /** @name PalletWorkingGroupApplyOnOpeningParams (218) */
+  export interface PalletWorkingGroupApplyOnOpeningParams extends Struct {
+    readonly memberId: u64;
+    readonly openingId: u64;
+    readonly roleAccountId: AccountId32;
+    readonly rewardAccountId: AccountId32;
+    readonly description: Bytes;
+    readonly stakeParameters: PalletWorkingGroupStakeParameters;
+  }
+
+  /** @name PalletWorkingGroupStakeParameters (219) */
+  export interface PalletWorkingGroupStakeParameters extends Struct {
+    readonly stake: u128;
+    readonly stakingAccountId: AccountId32;
+  }
+
+  /** @name PalletWorkingGroupInstance1 (220) */
+  export type PalletWorkingGroupInstance1 = Null;
+
+  /** @name PalletWorkingGroupRewardPaymentType (221) */
+  export interface PalletWorkingGroupRewardPaymentType extends Enum {
+    readonly isMissedReward: boolean;
+    readonly isRegularReward: boolean;
+    readonly type: 'MissedReward' | 'RegularReward';
+  }
+
+  /** @name PalletWorkingGroupRawEventInstance2 (222) */
+  export interface PalletWorkingGroupRawEventInstance2 extends Enum {
+    readonly isOpeningAdded: boolean;
+    readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+    readonly isAppliedOnOpening: boolean;
+    readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+    readonly isOpeningFilled: boolean;
+    readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+    readonly isLeaderSet: boolean;
+    readonly asLeaderSet: u64;
+    readonly isWorkerRoleAccountUpdated: boolean;
+    readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isLeaderUnset: boolean;
+    readonly isWorkerExited: boolean;
+    readonly asWorkerExited: u64;
+    readonly isWorkerStartedLeaving: boolean;
+    readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+    readonly isTerminatedWorker: boolean;
+    readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isTerminatedLeader: boolean;
+    readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isStakeSlashed: boolean;
+    readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+    readonly isStakeDecreased: boolean;
+    readonly asStakeDecreased: ITuple<[u64, u128]>;
+    readonly isStakeIncreased: boolean;
+    readonly asStakeIncreased: ITuple<[u64, u128]>;
+    readonly isApplicationWithdrawn: boolean;
+    readonly asApplicationWithdrawn: u64;
+    readonly isOpeningCanceled: boolean;
+    readonly asOpeningCanceled: u64;
+    readonly isBudgetSet: boolean;
+    readonly asBudgetSet: u128;
+    readonly isWorkerRewardAccountUpdated: boolean;
+    readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isWorkerRewardAmountUpdated: boolean;
+    readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+    readonly isStatusTextChanged: boolean;
+    readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+    readonly isBudgetSpending: boolean;
+    readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+    readonly isRewardPaid: boolean;
+    readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+    readonly isNewMissedRewardLevelReached: boolean;
+    readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+    readonly isWorkingGroupBudgetFunded: boolean;
+    readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isLeadRemarked: boolean;
+    readonly asLeadRemarked: Bytes;
+    readonly isWorkerRemarked: boolean;
+    readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+  }
+
+  /** @name PalletWorkingGroupInstance2 (223) */
+  export type PalletWorkingGroupInstance2 = Null;
+
+  /** @name PalletWorkingGroupRawEventInstance3 (224) */
+  export interface PalletWorkingGroupRawEventInstance3 extends Enum {
+    readonly isOpeningAdded: boolean;
+    readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+    readonly isAppliedOnOpening: boolean;
+    readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+    readonly isOpeningFilled: boolean;
+    readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+    readonly isLeaderSet: boolean;
+    readonly asLeaderSet: u64;
+    readonly isWorkerRoleAccountUpdated: boolean;
+    readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isLeaderUnset: boolean;
+    readonly isWorkerExited: boolean;
+    readonly asWorkerExited: u64;
+    readonly isWorkerStartedLeaving: boolean;
+    readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+    readonly isTerminatedWorker: boolean;
+    readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isTerminatedLeader: boolean;
+    readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isStakeSlashed: boolean;
+    readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+    readonly isStakeDecreased: boolean;
+    readonly asStakeDecreased: ITuple<[u64, u128]>;
+    readonly isStakeIncreased: boolean;
+    readonly asStakeIncreased: ITuple<[u64, u128]>;
+    readonly isApplicationWithdrawn: boolean;
+    readonly asApplicationWithdrawn: u64;
+    readonly isOpeningCanceled: boolean;
+    readonly asOpeningCanceled: u64;
+    readonly isBudgetSet: boolean;
+    readonly asBudgetSet: u128;
+    readonly isWorkerRewardAccountUpdated: boolean;
+    readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isWorkerRewardAmountUpdated: boolean;
+    readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+    readonly isStatusTextChanged: boolean;
+    readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+    readonly isBudgetSpending: boolean;
+    readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+    readonly isRewardPaid: boolean;
+    readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+    readonly isNewMissedRewardLevelReached: boolean;
+    readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+    readonly isWorkingGroupBudgetFunded: boolean;
+    readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isLeadRemarked: boolean;
+    readonly asLeadRemarked: Bytes;
+    readonly isWorkerRemarked: boolean;
+    readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+  }
+
+  /** @name PalletWorkingGroupInstance3 (225) */
+  export type PalletWorkingGroupInstance3 = Null;
+
+  /** @name PalletWorkingGroupRawEventInstance4 (226) */
+  export interface PalletWorkingGroupRawEventInstance4 extends Enum {
+    readonly isOpeningAdded: boolean;
+    readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+    readonly isAppliedOnOpening: boolean;
+    readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+    readonly isOpeningFilled: boolean;
+    readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+    readonly isLeaderSet: boolean;
+    readonly asLeaderSet: u64;
+    readonly isWorkerRoleAccountUpdated: boolean;
+    readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isLeaderUnset: boolean;
+    readonly isWorkerExited: boolean;
+    readonly asWorkerExited: u64;
+    readonly isWorkerStartedLeaving: boolean;
+    readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+    readonly isTerminatedWorker: boolean;
+    readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isTerminatedLeader: boolean;
+    readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isStakeSlashed: boolean;
+    readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+    readonly isStakeDecreased: boolean;
+    readonly asStakeDecreased: ITuple<[u64, u128]>;
+    readonly isStakeIncreased: boolean;
+    readonly asStakeIncreased: ITuple<[u64, u128]>;
+    readonly isApplicationWithdrawn: boolean;
+    readonly asApplicationWithdrawn: u64;
+    readonly isOpeningCanceled: boolean;
+    readonly asOpeningCanceled: u64;
+    readonly isBudgetSet: boolean;
+    readonly asBudgetSet: u128;
+    readonly isWorkerRewardAccountUpdated: boolean;
+    readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isWorkerRewardAmountUpdated: boolean;
+    readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+    readonly isStatusTextChanged: boolean;
+    readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+    readonly isBudgetSpending: boolean;
+    readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+    readonly isRewardPaid: boolean;
+    readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+    readonly isNewMissedRewardLevelReached: boolean;
+    readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+    readonly isWorkingGroupBudgetFunded: boolean;
+    readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isLeadRemarked: boolean;
+    readonly asLeadRemarked: Bytes;
+    readonly isWorkerRemarked: boolean;
+    readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+  }
+
+  /** @name PalletWorkingGroupInstance4 (227) */
+  export type PalletWorkingGroupInstance4 = Null;
+
+  /** @name PalletWorkingGroupRawEventInstance5 (228) */
+  export interface PalletWorkingGroupRawEventInstance5 extends Enum {
+    readonly isOpeningAdded: boolean;
+    readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+    readonly isAppliedOnOpening: boolean;
+    readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+    readonly isOpeningFilled: boolean;
+    readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+    readonly isLeaderSet: boolean;
+    readonly asLeaderSet: u64;
+    readonly isWorkerRoleAccountUpdated: boolean;
+    readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isLeaderUnset: boolean;
+    readonly isWorkerExited: boolean;
+    readonly asWorkerExited: u64;
+    readonly isWorkerStartedLeaving: boolean;
+    readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+    readonly isTerminatedWorker: boolean;
+    readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isTerminatedLeader: boolean;
+    readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isStakeSlashed: boolean;
+    readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+    readonly isStakeDecreased: boolean;
+    readonly asStakeDecreased: ITuple<[u64, u128]>;
+    readonly isStakeIncreased: boolean;
+    readonly asStakeIncreased: ITuple<[u64, u128]>;
+    readonly isApplicationWithdrawn: boolean;
+    readonly asApplicationWithdrawn: u64;
+    readonly isOpeningCanceled: boolean;
+    readonly asOpeningCanceled: u64;
+    readonly isBudgetSet: boolean;
+    readonly asBudgetSet: u128;
+    readonly isWorkerRewardAccountUpdated: boolean;
+    readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isWorkerRewardAmountUpdated: boolean;
+    readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+    readonly isStatusTextChanged: boolean;
+    readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+    readonly isBudgetSpending: boolean;
+    readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+    readonly isRewardPaid: boolean;
+    readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+    readonly isNewMissedRewardLevelReached: boolean;
+    readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+    readonly isWorkingGroupBudgetFunded: boolean;
+    readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isLeadRemarked: boolean;
+    readonly asLeadRemarked: Bytes;
+    readonly isWorkerRemarked: boolean;
+    readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+  }
+
+  /** @name PalletWorkingGroupInstance5 (229) */
+  export type PalletWorkingGroupInstance5 = Null;
+
+  /** @name PalletWorkingGroupRawEventInstance6 (230) */
+  export interface PalletWorkingGroupRawEventInstance6 extends Enum {
+    readonly isOpeningAdded: boolean;
+    readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+    readonly isAppliedOnOpening: boolean;
+    readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+    readonly isOpeningFilled: boolean;
+    readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+    readonly isLeaderSet: boolean;
+    readonly asLeaderSet: u64;
+    readonly isWorkerRoleAccountUpdated: boolean;
+    readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isLeaderUnset: boolean;
+    readonly isWorkerExited: boolean;
+    readonly asWorkerExited: u64;
+    readonly isWorkerStartedLeaving: boolean;
+    readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+    readonly isTerminatedWorker: boolean;
+    readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isTerminatedLeader: boolean;
+    readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isStakeSlashed: boolean;
+    readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+    readonly isStakeDecreased: boolean;
+    readonly asStakeDecreased: ITuple<[u64, u128]>;
+    readonly isStakeIncreased: boolean;
+    readonly asStakeIncreased: ITuple<[u64, u128]>;
+    readonly isApplicationWithdrawn: boolean;
+    readonly asApplicationWithdrawn: u64;
+    readonly isOpeningCanceled: boolean;
+    readonly asOpeningCanceled: u64;
+    readonly isBudgetSet: boolean;
+    readonly asBudgetSet: u128;
+    readonly isWorkerRewardAccountUpdated: boolean;
+    readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isWorkerRewardAmountUpdated: boolean;
+    readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+    readonly isStatusTextChanged: boolean;
+    readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+    readonly isBudgetSpending: boolean;
+    readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+    readonly isRewardPaid: boolean;
+    readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+    readonly isNewMissedRewardLevelReached: boolean;
+    readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+    readonly isWorkingGroupBudgetFunded: boolean;
+    readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isLeadRemarked: boolean;
+    readonly asLeadRemarked: Bytes;
+    readonly isWorkerRemarked: boolean;
+    readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+  }
+
+  /** @name PalletWorkingGroupInstance6 (231) */
+  export type PalletWorkingGroupInstance6 = Null;
+
+  /** @name PalletWorkingGroupRawEventInstance7 (232) */
+  export interface PalletWorkingGroupRawEventInstance7 extends Enum {
+    readonly isOpeningAdded: boolean;
+    readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+    readonly isAppliedOnOpening: boolean;
+    readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+    readonly isOpeningFilled: boolean;
+    readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+    readonly isLeaderSet: boolean;
+    readonly asLeaderSet: u64;
+    readonly isWorkerRoleAccountUpdated: boolean;
+    readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isLeaderUnset: boolean;
+    readonly isWorkerExited: boolean;
+    readonly asWorkerExited: u64;
+    readonly isWorkerStartedLeaving: boolean;
+    readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+    readonly isTerminatedWorker: boolean;
+    readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isTerminatedLeader: boolean;
+    readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isStakeSlashed: boolean;
+    readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+    readonly isStakeDecreased: boolean;
+    readonly asStakeDecreased: ITuple<[u64, u128]>;
+    readonly isStakeIncreased: boolean;
+    readonly asStakeIncreased: ITuple<[u64, u128]>;
+    readonly isApplicationWithdrawn: boolean;
+    readonly asApplicationWithdrawn: u64;
+    readonly isOpeningCanceled: boolean;
+    readonly asOpeningCanceled: u64;
+    readonly isBudgetSet: boolean;
+    readonly asBudgetSet: u128;
+    readonly isWorkerRewardAccountUpdated: boolean;
+    readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isWorkerRewardAmountUpdated: boolean;
+    readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+    readonly isStatusTextChanged: boolean;
+    readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+    readonly isBudgetSpending: boolean;
+    readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+    readonly isRewardPaid: boolean;
+    readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+    readonly isNewMissedRewardLevelReached: boolean;
+    readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+    readonly isWorkingGroupBudgetFunded: boolean;
+    readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isLeadRemarked: boolean;
+    readonly asLeadRemarked: Bytes;
+    readonly isWorkerRemarked: boolean;
+    readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+  }
+
+  /** @name PalletWorkingGroupInstance7 (233) */
+  export type PalletWorkingGroupInstance7 = Null;
+
+  /** @name PalletWorkingGroupRawEventInstance8 (234) */
+  export interface PalletWorkingGroupRawEventInstance8 extends Enum {
+    readonly isOpeningAdded: boolean;
+    readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+    readonly isAppliedOnOpening: boolean;
+    readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+    readonly isOpeningFilled: boolean;
+    readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+    readonly isLeaderSet: boolean;
+    readonly asLeaderSet: u64;
+    readonly isWorkerRoleAccountUpdated: boolean;
+    readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isLeaderUnset: boolean;
+    readonly isWorkerExited: boolean;
+    readonly asWorkerExited: u64;
+    readonly isWorkerStartedLeaving: boolean;
+    readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+    readonly isTerminatedWorker: boolean;
+    readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isTerminatedLeader: boolean;
+    readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isStakeSlashed: boolean;
+    readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+    readonly isStakeDecreased: boolean;
+    readonly asStakeDecreased: ITuple<[u64, u128]>;
+    readonly isStakeIncreased: boolean;
+    readonly asStakeIncreased: ITuple<[u64, u128]>;
+    readonly isApplicationWithdrawn: boolean;
+    readonly asApplicationWithdrawn: u64;
+    readonly isOpeningCanceled: boolean;
+    readonly asOpeningCanceled: u64;
+    readonly isBudgetSet: boolean;
+    readonly asBudgetSet: u128;
+    readonly isWorkerRewardAccountUpdated: boolean;
+    readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isWorkerRewardAmountUpdated: boolean;
+    readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+    readonly isStatusTextChanged: boolean;
+    readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+    readonly isBudgetSpending: boolean;
+    readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+    readonly isRewardPaid: boolean;
+    readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+    readonly isNewMissedRewardLevelReached: boolean;
+    readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+    readonly isWorkingGroupBudgetFunded: boolean;
+    readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isLeadRemarked: boolean;
+    readonly asLeadRemarked: Bytes;
+    readonly isWorkerRemarked: boolean;
+    readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+  }
+
+  /** @name PalletWorkingGroupInstance8 (235) */
+  export type PalletWorkingGroupInstance8 = Null;
+
+  /** @name PalletWorkingGroupRawEventInstance9 (236) */
+  export interface PalletWorkingGroupRawEventInstance9 extends Enum {
+    readonly isOpeningAdded: boolean;
+    readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
+    readonly isAppliedOnOpening: boolean;
+    readonly asAppliedOnOpening: ITuple<[PalletWorkingGroupApplyOnOpeningParams, u64]>;
+    readonly isOpeningFilled: boolean;
+    readonly asOpeningFilled: ITuple<[u64, BTreeMap<u64, u64>, BTreeSet<u64>]>;
+    readonly isLeaderSet: boolean;
+    readonly asLeaderSet: u64;
+    readonly isWorkerRoleAccountUpdated: boolean;
+    readonly asWorkerRoleAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isLeaderUnset: boolean;
+    readonly isWorkerExited: boolean;
+    readonly asWorkerExited: u64;
+    readonly isWorkerStartedLeaving: boolean;
+    readonly asWorkerStartedLeaving: ITuple<[u64, Option<Bytes>]>;
+    readonly isTerminatedWorker: boolean;
+    readonly asTerminatedWorker: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isTerminatedLeader: boolean;
+    readonly asTerminatedLeader: ITuple<[u64, Option<u128>, Option<Bytes>]>;
+    readonly isStakeSlashed: boolean;
+    readonly asStakeSlashed: ITuple<[u64, u128, u128, Option<Bytes>]>;
+    readonly isStakeDecreased: boolean;
+    readonly asStakeDecreased: ITuple<[u64, u128]>;
+    readonly isStakeIncreased: boolean;
+    readonly asStakeIncreased: ITuple<[u64, u128]>;
+    readonly isApplicationWithdrawn: boolean;
+    readonly asApplicationWithdrawn: u64;
+    readonly isOpeningCanceled: boolean;
+    readonly asOpeningCanceled: u64;
+    readonly isBudgetSet: boolean;
+    readonly asBudgetSet: u128;
+    readonly isWorkerRewardAccountUpdated: boolean;
+    readonly asWorkerRewardAccountUpdated: ITuple<[u64, AccountId32]>;
+    readonly isWorkerRewardAmountUpdated: boolean;
+    readonly asWorkerRewardAmountUpdated: ITuple<[u64, Option<u128>]>;
+    readonly isStatusTextChanged: boolean;
+    readonly asStatusTextChanged: ITuple<[H256, Option<Bytes>]>;
+    readonly isBudgetSpending: boolean;
+    readonly asBudgetSpending: ITuple<[AccountId32, u128, Option<Bytes>]>;
+    readonly isRewardPaid: boolean;
+    readonly asRewardPaid: ITuple<[u64, AccountId32, u128, PalletWorkingGroupRewardPaymentType]>;
+    readonly isNewMissedRewardLevelReached: boolean;
+    readonly asNewMissedRewardLevelReached: ITuple<[u64, Option<u128>]>;
+    readonly isWorkingGroupBudgetFunded: boolean;
+    readonly asWorkingGroupBudgetFunded: ITuple<[u64, u128, Bytes]>;
+    readonly isLeadRemarked: boolean;
+    readonly asLeadRemarked: Bytes;
+    readonly isWorkerRemarked: boolean;
+    readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
+    readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
+  }
+
+  /** @name PalletWorkingGroupInstance9 (237) */
+  export type PalletWorkingGroupInstance9 = Null;
+
+  /** @name FrameSystemPhase (238) */
+  export interface FrameSystemPhase extends Enum {
+    readonly isApplyExtrinsic: boolean;
+    readonly asApplyExtrinsic: u32;
+    readonly isFinalization: boolean;
+    readonly isInitialization: boolean;
+    readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
+  }
+
+  /** @name FrameSystemLastRuntimeUpgradeInfo (242) */
+  export interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
+    readonly specVersion: Compact<u32>;
+    readonly specName: Text;
+  }
+
+  /** @name FrameSystemCall (245) */
+  export interface FrameSystemCall extends Enum {
+    readonly isFillBlock: boolean;
+    readonly asFillBlock: {
+      readonly ratio: Perbill;
+    } & Struct;
+    readonly isRemark: boolean;
+    readonly asRemark: {
+      readonly remark: Bytes;
+    } & Struct;
+    readonly isSetHeapPages: boolean;
+    readonly asSetHeapPages: {
+      readonly pages: u64;
+    } & Struct;
+    readonly isSetCode: boolean;
+    readonly asSetCode: {
+      readonly code: Bytes;
+    } & Struct;
+    readonly isSetCodeWithoutChecks: boolean;
+    readonly asSetCodeWithoutChecks: {
+      readonly code: Bytes;
+    } & Struct;
+    readonly isSetStorage: boolean;
+    readonly asSetStorage: {
+      readonly items: Vec<ITuple<[Bytes, Bytes]>>;
+    } & Struct;
+    readonly isKillStorage: boolean;
+    readonly asKillStorage: {
+      readonly keys_: Vec<Bytes>;
+    } & Struct;
+    readonly isKillPrefix: boolean;
+    readonly asKillPrefix: {
+      readonly prefix: Bytes;
+      readonly subkeys: u32;
+    } & Struct;
+    readonly isRemarkWithEvent: boolean;
+    readonly asRemarkWithEvent: {
+      readonly remark: Bytes;
+    } & Struct;
+    readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
+  }
+
+  /** @name FrameSystemLimitsBlockWeights (248) */
+  export interface FrameSystemLimitsBlockWeights extends Struct {
+    readonly baseBlock: u64;
+    readonly maxBlock: u64;
+    readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
+  }
+
+  /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (249) */
+  export interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
+    readonly normal: FrameSystemLimitsWeightsPerClass;
+    readonly operational: FrameSystemLimitsWeightsPerClass;
+    readonly mandatory: FrameSystemLimitsWeightsPerClass;
+  }
+
+  /** @name FrameSystemLimitsWeightsPerClass (250) */
+  export interface FrameSystemLimitsWeightsPerClass extends Struct {
+    readonly baseExtrinsic: u64;
+    readonly maxExtrinsic: Option<u64>;
+    readonly maxTotal: Option<u64>;
+    readonly reserved: Option<u64>;
+  }
+
+  /** @name FrameSystemLimitsBlockLength (251) */
+  export interface FrameSystemLimitsBlockLength extends Struct {
+    readonly max: FrameSupportWeightsPerDispatchClassU32;
+  }
+
+  /** @name FrameSupportWeightsPerDispatchClassU32 (252) */
+  export interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
+    readonly normal: u32;
+    readonly operational: u32;
+    readonly mandatory: u32;
+  }
+
+  /** @name FrameSupportWeightsRuntimeDbWeight (253) */
+  export interface FrameSupportWeightsRuntimeDbWeight extends Struct {
+    readonly read: u64;
+    readonly write: u64;
+  }
+
+  /** @name SpVersionRuntimeVersion (254) */
+  export interface SpVersionRuntimeVersion extends Struct {
+    readonly specName: Text;
+    readonly implName: Text;
+    readonly authoringVersion: u32;
+    readonly specVersion: u32;
+    readonly implVersion: u32;
+    readonly apis: Vec<ITuple<[U8aFixed, u32]>>;
+    readonly transactionVersion: u32;
+    readonly stateVersion: u8;
+  }
+
+  /** @name FrameSystemError (260) */
+  export interface FrameSystemError extends Enum {
+    readonly isInvalidSpecName: boolean;
+    readonly isSpecVersionNeedsToIncrease: boolean;
+    readonly isFailedToExtractRuntimeVersion: boolean;
+    readonly isNonDefaultComposite: boolean;
+    readonly isNonZeroRefCount: boolean;
+    readonly isCallFiltered: boolean;
+    readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
+  }
+
+  /** @name PalletUtilityCall (261) */
+  export interface PalletUtilityCall extends Enum {
+    readonly isBatch: boolean;
+    readonly asBatch: {
+      readonly calls: Vec<Call>;
+    } & Struct;
+    readonly isAsDerivative: boolean;
+    readonly asAsDerivative: {
+      readonly index: u16;
+      readonly call: Call;
+    } & Struct;
+    readonly isBatchAll: boolean;
+    readonly asBatchAll: {
+      readonly calls: Vec<Call>;
+    } & Struct;
+    readonly isDispatchAs: boolean;
+    readonly asDispatchAs: {
+      readonly asOrigin: JoystreamNodeRuntimeOriginCaller;
+      readonly call: Call;
+    } & Struct;
+    readonly isForceBatch: boolean;
+    readonly asForceBatch: {
+      readonly calls: Vec<Call>;
+    } & Struct;
+    readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
+  }
+
+  /** @name PalletBabeCall (264) */
+  export interface PalletBabeCall extends Enum {
+    readonly isReportEquivocation: boolean;
+    readonly asReportEquivocation: {
+      readonly equivocationProof: SpConsensusSlotsEquivocationProof;
+      readonly keyOwnerProof: SpSessionMembershipProof;
+    } & Struct;
+    readonly isReportEquivocationUnsigned: boolean;
+    readonly asReportEquivocationUnsigned: {
+      readonly equivocationProof: SpConsensusSlotsEquivocationProof;
+      readonly keyOwnerProof: SpSessionMembershipProof;
+    } & Struct;
+    readonly isPlanConfigChange: boolean;
+    readonly asPlanConfigChange: {
+      readonly config: SpConsensusBabeDigestsNextConfigDescriptor;
+    } & Struct;
+    readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'PlanConfigChange';
+  }
+
+  /** @name SpConsensusSlotsEquivocationProof (265) */
+  export interface SpConsensusSlotsEquivocationProof extends Struct {
+    readonly offender: SpConsensusBabeAppPublic;
+    readonly slot: u64;
+    readonly firstHeader: SpRuntimeHeader;
+    readonly secondHeader: SpRuntimeHeader;
+  }
+
+  /** @name SpRuntimeHeader (266) */
+  export interface SpRuntimeHeader extends Struct {
+    readonly parentHash: H256;
+    readonly number: Compact<u32>;
+    readonly stateRoot: H256;
+    readonly extrinsicsRoot: H256;
+    readonly digest: SpRuntimeDigest;
+  }
+
+  /** @name SpRuntimeBlakeTwo256 (267) */
+  export type SpRuntimeBlakeTwo256 = Null;
+
+  /** @name SpConsensusBabeAppPublic (268) */
+  export interface SpConsensusBabeAppPublic extends SpCoreSr25519Public {}
+
+  /** @name SpSessionMembershipProof (270) */
+  export interface SpSessionMembershipProof extends Struct {
+    readonly session: u32;
+    readonly trieNodes: Vec<Bytes>;
+    readonly validatorCount: u32;
+  }
+
+  /** @name SpConsensusBabeDigestsNextConfigDescriptor (271) */
+  export interface SpConsensusBabeDigestsNextConfigDescriptor extends Enum {
+    readonly isV1: boolean;
+    readonly asV1: {
+      readonly c: ITuple<[u64, u64]>;
+      readonly allowedSlots: SpConsensusBabeAllowedSlots;
+    } & Struct;
+    readonly type: 'V1';
+  }
+
+  /** @name SpConsensusBabeAllowedSlots (272) */
+  export interface SpConsensusBabeAllowedSlots extends Enum {
+    readonly isPrimarySlots: boolean;
+    readonly isPrimaryAndSecondaryPlainSlots: boolean;
+    readonly isPrimaryAndSecondaryVRFSlots: boolean;
+    readonly type: 'PrimarySlots' | 'PrimaryAndSecondaryPlainSlots' | 'PrimaryAndSecondaryVRFSlots';
+  }
+
+  /** @name PalletTimestampCall (273) */
+  export interface PalletTimestampCall extends Enum {
+    readonly isSet: boolean;
+    readonly asSet: {
+      readonly now: Compact<u64>;
+    } & Struct;
+    readonly type: 'Set';
+  }
+
+  /** @name PalletAuthorshipCall (275) */
+  export interface PalletAuthorshipCall extends Enum {
+    readonly isSetUncles: boolean;
+    readonly asSetUncles: {
+      readonly newUncles: Vec<SpRuntimeHeader>;
+    } & Struct;
+    readonly type: 'SetUncles';
+  }
+
+  /** @name PalletBalancesCall (277) */
+  export interface PalletBalancesCall extends Enum {
+    readonly isTransfer: boolean;
+    readonly asTransfer: {
+      readonly dest: AccountId32;
+      readonly value: Compact<u128>;
+    } & Struct;
+    readonly isSetBalance: boolean;
+    readonly asSetBalance: {
+      readonly who: AccountId32;
+      readonly newFree: Compact<u128>;
+      readonly newReserved: Compact<u128>;
+    } & Struct;
+    readonly isForceTransfer: boolean;
+    readonly asForceTransfer: {
+      readonly source: AccountId32;
+      readonly dest: AccountId32;
+      readonly value: Compact<u128>;
+    } & Struct;
+    readonly isTransferKeepAlive: boolean;
+    readonly asTransferKeepAlive: {
+      readonly dest: AccountId32;
+      readonly value: Compact<u128>;
+    } & Struct;
+    readonly isTransferAll: boolean;
+    readonly asTransferAll: {
+      readonly dest: AccountId32;
+      readonly keepAlive: bool;
+    } & Struct;
+    readonly isForceUnreserve: boolean;
+    readonly asForceUnreserve: {
+      readonly who: AccountId32;
+      readonly amount: u128;
+    } & Struct;
+    readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
+  }
+
+  /** @name PalletElectionProviderMultiPhaseCall (278) */
+  export interface PalletElectionProviderMultiPhaseCall extends Enum {
+    readonly isSubmitUnsigned: boolean;
+    readonly asSubmitUnsigned: {
+      readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
+      readonly witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
+    } & Struct;
+    readonly isSetMinimumUntrustedScore: boolean;
+    readonly asSetMinimumUntrustedScore: {
+      readonly maybeNextScore: Option<SpNposElectionsElectionScore>;
+    } & Struct;
+    readonly isSetEmergencyElectionResult: boolean;
+    readonly asSetEmergencyElectionResult: {
+      readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
+    } & Struct;
+    readonly isSubmit: boolean;
+    readonly asSubmit: {
+      readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
+    } & Struct;
+    readonly isGovernanceFallback: boolean;
+    readonly asGovernanceFallback: {
+      readonly maybeMaxVoters: Option<u32>;
+      readonly maybeMaxTargets: Option<u32>;
+    } & Struct;
+    readonly type: 'SubmitUnsigned' | 'SetMinimumUntrustedScore' | 'SetEmergencyElectionResult' | 'Submit' | 'GovernanceFallback';
+  }
+
+  /** @name PalletElectionProviderMultiPhaseRawSolution (279) */
+  export interface PalletElectionProviderMultiPhaseRawSolution extends Struct {
+    readonly solution: JoystreamNodeRuntimeNposSolution16;
+    readonly score: SpNposElectionsElectionScore;
+    readonly round: u32;
+  }
+
+  /** @name JoystreamNodeRuntimeNposSolution16 (280) */
+  export interface JoystreamNodeRuntimeNposSolution16 extends Struct {
+    readonly votes1: Vec<ITuple<[Compact<u32>, Compact<u16>]>>;
+    readonly votes2: Vec<ITuple<[Compact<u32>, ITuple<[Compact<u16>, Compact<PerU16>]>, Compact<u16>]>>;
+    readonly votes3: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes4: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes5: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes6: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes7: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes8: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes9: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes10: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes11: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes12: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes13: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes14: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes15: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+    readonly votes16: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
+  }
+
+  /** @name SpNposElectionsElectionScore (331) */
+  export interface SpNposElectionsElectionScore extends Struct {
+    readonly minimalStake: u128;
+    readonly sumStake: u128;
+    readonly sumStakeSquared: u128;
+  }
+
+  /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (332) */
+  export interface PalletElectionProviderMultiPhaseSolutionOrSnapshotSize extends Struct {
+    readonly voters: Compact<u32>;
+    readonly targets: Compact<u32>;
+  }
+
+  /** @name SpNposElectionsSupport (336) */
+  export interface SpNposElectionsSupport extends Struct {
+    readonly total: u128;
+    readonly voters: Vec<ITuple<[AccountId32, u128]>>;
+  }
+
+  /** @name PalletStakingPalletCall (338) */
+  export interface PalletStakingPalletCall extends Enum {
+    readonly isBond: boolean;
+    readonly asBond: {
+      readonly controller: AccountId32;
+      readonly value: Compact<u128>;
+      readonly payee: PalletStakingRewardDestination;
+    } & Struct;
+    readonly isBondExtra: boolean;
+    readonly asBondExtra: {
+      readonly maxAdditional: Compact<u128>;
+    } & Struct;
+    readonly isUnbond: boolean;
+    readonly asUnbond: {
+      readonly value: Compact<u128>;
+    } & Struct;
+    readonly isWithdrawUnbonded: boolean;
+    readonly asWithdrawUnbonded: {
+      readonly numSlashingSpans: u32;
+    } & Struct;
+    readonly isValidate: boolean;
+    readonly asValidate: {
+      readonly prefs: PalletStakingValidatorPrefs;
+    } & Struct;
+    readonly isNominate: boolean;
+    readonly asNominate: {
+      readonly targets: Vec<AccountId32>;
+    } & Struct;
+    readonly isChill: boolean;
+    readonly isSetPayee: boolean;
+    readonly asSetPayee: {
+      readonly payee: PalletStakingRewardDestination;
+    } & Struct;
+    readonly isSetController: boolean;
+    readonly asSetController: {
+      readonly controller: AccountId32;
+    } & Struct;
+    readonly isSetValidatorCount: boolean;
+    readonly asSetValidatorCount: {
+      readonly new_: Compact<u32>;
+    } & Struct;
+    readonly isIncreaseValidatorCount: boolean;
+    readonly asIncreaseValidatorCount: {
+      readonly additional: Compact<u32>;
+    } & Struct;
+    readonly isScaleValidatorCount: boolean;
+    readonly asScaleValidatorCount: {
+      readonly factor: Percent;
+    } & Struct;
+    readonly isForceNoEras: boolean;
+    readonly isForceNewEra: boolean;
+    readonly isSetInvulnerables: boolean;
+    readonly asSetInvulnerables: {
+      readonly invulnerables: Vec<AccountId32>;
+    } & Struct;
+    readonly isForceUnstake: boolean;
+    readonly asForceUnstake: {
+      readonly stash: AccountId32;
+      readonly numSlashingSpans: u32;
+    } & Struct;
+    readonly isForceNewEraAlways: boolean;
+    readonly isCancelDeferredSlash: boolean;
+    readonly asCancelDeferredSlash: {
+      readonly era: u32;
+      readonly slashIndices: Vec<u32>;
+    } & Struct;
+    readonly isPayoutStakers: boolean;
+    readonly asPayoutStakers: {
+      readonly validatorStash: AccountId32;
+      readonly era: u32;
+    } & Struct;
+    readonly isRebond: boolean;
+    readonly asRebond: {
+      readonly value: Compact<u128>;
+    } & Struct;
+    readonly isSetHistoryDepth: boolean;
+    readonly asSetHistoryDepth: {
+      readonly newHistoryDepth: Compact<u32>;
+      readonly eraItemsDeleted: Compact<u32>;
+    } & Struct;
+    readonly isReapStash: boolean;
+    readonly asReapStash: {
+      readonly stash: AccountId32;
+      readonly numSlashingSpans: u32;
+    } & Struct;
+    readonly isKick: boolean;
+    readonly asKick: {
+      readonly who: Vec<AccountId32>;
+    } & Struct;
+    readonly isSetStakingConfigs: boolean;
+    readonly asSetStakingConfigs: {
+      readonly minNominatorBond: PalletStakingPalletConfigOpU128;
+      readonly minValidatorBond: PalletStakingPalletConfigOpU128;
+      readonly maxNominatorCount: PalletStakingPalletConfigOpU32;
+      readonly maxValidatorCount: PalletStakingPalletConfigOpU32;
+      readonly chillThreshold: PalletStakingPalletConfigOpPercent;
+      readonly minCommission: PalletStakingPalletConfigOpPerbill;
+    } & Struct;
+    readonly isChillOther: boolean;
+    readonly asChillOther: {
+      readonly controller: AccountId32;
+    } & Struct;
+    readonly isForceApplyMinCommission: boolean;
+    readonly asForceApplyMinCommission: {
+      readonly validatorStash: AccountId32;
+    } & Struct;
+    readonly type: 'Bond' | 'BondExtra' | 'Unbond' | 'WithdrawUnbonded' | 'Validate' | 'Nominate' | 'Chill' | 'SetPayee' | 'SetController' | 'SetValidatorCount' | 'IncreaseValidatorCount' | 'ScaleValidatorCount' | 'ForceNoEras' | 'ForceNewEra' | 'SetInvulnerables' | 'ForceUnstake' | 'ForceNewEraAlways' | 'CancelDeferredSlash' | 'PayoutStakers' | 'Rebond' | 'SetHistoryDepth' | 'ReapStash' | 'Kick' | 'SetStakingConfigs' | 'ChillOther' | 'ForceApplyMinCommission';
+  }
+
+  /** @name PalletStakingRewardDestination (339) */
+  export interface PalletStakingRewardDestination extends Enum {
+    readonly isStaked: boolean;
+    readonly isStash: boolean;
+    readonly isController: boolean;
+    readonly isAccount: boolean;
+    readonly asAccount: AccountId32;
+    readonly isNone: boolean;
+    readonly type: 'Staked' | 'Stash' | 'Controller' | 'Account' | 'None';
+  }
+
+  /** @name PalletStakingPalletConfigOpU128 (343) */
+  export interface PalletStakingPalletConfigOpU128 extends Enum {
+    readonly isNoop: boolean;
+    readonly isSet: boolean;
+    readonly asSet: u128;
+    readonly isRemove: boolean;
+    readonly type: 'Noop' | 'Set' | 'Remove';
+  }
+
+  /** @name PalletStakingPalletConfigOpU32 (344) */
+  export interface PalletStakingPalletConfigOpU32 extends Enum {
+    readonly isNoop: boolean;
+    readonly isSet: boolean;
+    readonly asSet: u32;
+    readonly isRemove: boolean;
+    readonly type: 'Noop' | 'Set' | 'Remove';
+  }
+
+  /** @name PalletStakingPalletConfigOpPercent (345) */
+  export interface PalletStakingPalletConfigOpPercent extends Enum {
+    readonly isNoop: boolean;
+    readonly isSet: boolean;
+    readonly asSet: Percent;
+    readonly isRemove: boolean;
+    readonly type: 'Noop' | 'Set' | 'Remove';
+  }
+
+  /** @name PalletStakingPalletConfigOpPerbill (346) */
+  export interface PalletStakingPalletConfigOpPerbill extends Enum {
+    readonly isNoop: boolean;
+    readonly isSet: boolean;
+    readonly asSet: Perbill;
+    readonly isRemove: boolean;
+    readonly type: 'Noop' | 'Set' | 'Remove';
+  }
+
+  /** @name PalletSessionCall (347) */
+  export interface PalletSessionCall extends Enum {
+    readonly isSetKeys: boolean;
+    readonly asSetKeys: {
+      readonly keys_: JoystreamNodeRuntimeSessionKeys;
+      readonly proof: Bytes;
+    } & Struct;
+    readonly isPurgeKeys: boolean;
+    readonly type: 'SetKeys' | 'PurgeKeys';
+  }
+
+  /** @name JoystreamNodeRuntimeSessionKeys (348) */
+  export interface JoystreamNodeRuntimeSessionKeys extends Struct {
+    readonly grandpa: SpFinalityGrandpaAppPublic;
+    readonly babe: SpConsensusBabeAppPublic;
+    readonly imOnline: PalletImOnlineSr25519AppSr25519Public;
+    readonly authorityDiscovery: SpAuthorityDiscoveryAppPublic;
+  }
+
+  /** @name SpAuthorityDiscoveryAppPublic (349) */
+  export interface SpAuthorityDiscoveryAppPublic extends SpCoreSr25519Public {}
+
+  /** @name PalletGrandpaCall (350) */
+  export interface PalletGrandpaCall extends Enum {
+    readonly isReportEquivocation: boolean;
+    readonly asReportEquivocation: {
+      readonly equivocationProof: SpFinalityGrandpaEquivocationProof;
+      readonly keyOwnerProof: SpSessionMembershipProof;
+    } & Struct;
+    readonly isReportEquivocationUnsigned: boolean;
+    readonly asReportEquivocationUnsigned: {
+      readonly equivocationProof: SpFinalityGrandpaEquivocationProof;
+      readonly keyOwnerProof: SpSessionMembershipProof;
+    } & Struct;
+    readonly isNoteStalled: boolean;
+    readonly asNoteStalled: {
+      readonly delay: u32;
+      readonly bestFinalizedBlockNumber: u32;
+    } & Struct;
+    readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'NoteStalled';
+  }
+
+  /** @name SpFinalityGrandpaEquivocationProof (351) */
+  export interface SpFinalityGrandpaEquivocationProof extends Struct {
+    readonly setId: u64;
+    readonly equivocation: SpFinalityGrandpaEquivocation;
+  }
+
+  /** @name SpFinalityGrandpaEquivocation (352) */
+  export interface SpFinalityGrandpaEquivocation extends Enum {
+    readonly isPrevote: boolean;
+    readonly asPrevote: FinalityGrandpaEquivocationPrevote;
+    readonly isPrecommit: boolean;
+    readonly asPrecommit: FinalityGrandpaEquivocationPrecommit;
+    readonly type: 'Prevote' | 'Precommit';
+  }
+
+  /** @name FinalityGrandpaEquivocationPrevote (353) */
+  export interface FinalityGrandpaEquivocationPrevote extends Struct {
+    readonly roundNumber: u64;
+    readonly identity: SpFinalityGrandpaAppPublic;
+    readonly first: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
+    readonly second: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
+  }
+
+  /** @name FinalityGrandpaPrevote (354) */
+  export interface FinalityGrandpaPrevote extends Struct {
+    readonly targetHash: H256;
+    readonly targetNumber: u32;
+  }
+
+  /** @name SpFinalityGrandpaAppSignature (355) */
+  export interface SpFinalityGrandpaAppSignature extends SpCoreEd25519Signature {}
+
+  /** @name SpCoreEd25519Signature (356) */
+  export interface SpCoreEd25519Signature extends U8aFixed {}
+
+  /** @name FinalityGrandpaEquivocationPrecommit (359) */
+  export interface FinalityGrandpaEquivocationPrecommit extends Struct {
+    readonly roundNumber: u64;
+    readonly identity: SpFinalityGrandpaAppPublic;
+    readonly first: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
+    readonly second: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
+  }
+
+  /** @name FinalityGrandpaPrecommit (360) */
+  export interface FinalityGrandpaPrecommit extends Struct {
+    readonly targetHash: H256;
+    readonly targetNumber: u32;
+  }
+
+  /** @name PalletImOnlineCall (362) */
+  export interface PalletImOnlineCall extends Enum {
+    readonly isHeartbeat: boolean;
+    readonly asHeartbeat: {
+      readonly heartbeat: PalletImOnlineHeartbeat;
+      readonly signature: PalletImOnlineSr25519AppSr25519Signature;
+    } & Struct;
+    readonly type: 'Heartbeat';
+  }
+
+  /** @name PalletImOnlineHeartbeat (363) */
+  export interface PalletImOnlineHeartbeat extends Struct {
+    readonly blockNumber: u32;
+    readonly networkState: SpCoreOffchainOpaqueNetworkState;
+    readonly sessionIndex: u32;
+    readonly authorityIndex: u32;
+    readonly validatorsLen: u32;
+  }
+
+  /** @name SpCoreOffchainOpaqueNetworkState (364) */
+  export interface SpCoreOffchainOpaqueNetworkState extends Struct {
+    readonly peerId: Bytes;
+    readonly externalAddresses: Vec<Bytes>;
+  }
+
+  /** @name PalletImOnlineSr25519AppSr25519Signature (368) */
+  export interface PalletImOnlineSr25519AppSr25519Signature extends SpCoreSr25519Signature {}
+
+  /** @name SpCoreSr25519Signature (369) */
+  export interface SpCoreSr25519Signature extends U8aFixed {}
+
+  /** @name PalletBagsListCall (370) */
+  export interface PalletBagsListCall extends Enum {
+    readonly isRebag: boolean;
+    readonly asRebag: {
+      readonly dislocated: AccountId32;
+    } & Struct;
+    readonly isPutInFrontOf: boolean;
+    readonly asPutInFrontOf: {
+      readonly lighter: AccountId32;
+    } & Struct;
+    readonly type: 'Rebag' | 'PutInFrontOf';
+  }
+
+  /** @name PalletVestingCall (371) */
+  export interface PalletVestingCall extends Enum {
+    readonly isVest: boolean;
+    readonly isVestOther: boolean;
+    readonly asVestOther: {
+      readonly target: AccountId32;
+    } & Struct;
+    readonly isVestedTransfer: boolean;
+    readonly asVestedTransfer: {
+      readonly target: AccountId32;
+      readonly schedule: PalletVestingVestingInfo;
+    } & Struct;
+    readonly isForceVestedTransfer: boolean;
+    readonly asForceVestedTransfer: {
+      readonly source: AccountId32;
+      readonly target: AccountId32;
+      readonly schedule: PalletVestingVestingInfo;
+    } & Struct;
+    readonly isMergeSchedules: boolean;
+    readonly asMergeSchedules: {
+      readonly schedule1Index: u32;
+      readonly schedule2Index: u32;
+    } & Struct;
+    readonly type: 'Vest' | 'VestOther' | 'VestedTransfer' | 'ForceVestedTransfer' | 'MergeSchedules';
+  }
+
+  /** @name PalletVestingVestingInfo (372) */
+  export interface PalletVestingVestingInfo extends Struct {
+    readonly locked: u128;
+    readonly perBlock: u128;
+    readonly startingBlock: u32;
+  }
+
+  /** @name PalletMultisigCall (373) */
+  export interface PalletMultisigCall extends Enum {
+    readonly isAsMultiThreshold1: boolean;
+    readonly asAsMultiThreshold1: {
+      readonly otherSignatories: Vec<AccountId32>;
+      readonly call: Call;
+    } & Struct;
+    readonly isAsMulti: boolean;
+    readonly asAsMulti: {
+      readonly threshold: u16;
+      readonly otherSignatories: Vec<AccountId32>;
+      readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
+      readonly call: WrapperKeepOpaque<Call>;
+      readonly storeCall: bool;
+      readonly maxWeight: u64;
+    } & Struct;
+    readonly isApproveAsMulti: boolean;
+    readonly asApproveAsMulti: {
+      readonly threshold: u16;
+      readonly otherSignatories: Vec<AccountId32>;
+      readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
+      readonly callHash: U8aFixed;
+      readonly maxWeight: u64;
+    } & Struct;
+    readonly isCancelAsMulti: boolean;
+    readonly asCancelAsMulti: {
+      readonly threshold: u16;
+      readonly otherSignatories: Vec<AccountId32>;
+      readonly timepoint: PalletMultisigTimepoint;
+      readonly callHash: U8aFixed;
+    } & Struct;
+    readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
+  }
+
+  /** @name PalletCouncilCall (376) */
+  export interface PalletCouncilCall extends Enum {
+    readonly isAnnounceCandidacy: boolean;
+    readonly asAnnounceCandidacy: {
+      readonly membershipId: u64;
+      readonly stakingAccountId: AccountId32;
+      readonly rewardAccountId: AccountId32;
+      readonly stake: u128;
+    } & Struct;
+    readonly isReleaseCandidacyStake: boolean;
+    readonly asReleaseCandidacyStake: {
+      readonly membershipId: u64;
+    } & Struct;
+    readonly isWithdrawCandidacy: boolean;
+    readonly asWithdrawCandidacy: {
+      readonly membershipId: u64;
+    } & Struct;
+    readonly isSetCandidacyNote: boolean;
+    readonly asSetCandidacyNote: {
+      readonly membershipId: u64;
+      readonly note: Bytes;
+    } & Struct;
+    readonly isSetBudget: boolean;
+    readonly asSetBudget: {
+      readonly balance: u128;
+    } & Struct;
+    readonly isPlanBudgetRefill: boolean;
+    readonly asPlanBudgetRefill: {
+      readonly nextRefill: u32;
+    } & Struct;
+    readonly isSetBudgetIncrement: boolean;
+    readonly asSetBudgetIncrement: {
+      readonly budgetIncrement: u128;
+    } & Struct;
+    readonly isSetCouncilorReward: boolean;
+    readonly asSetCouncilorReward: {
+      readonly councilorReward: u128;
+    } & Struct;
+    readonly isFundingRequest: boolean;
+    readonly asFundingRequest: {
+      readonly fundingRequests: Vec<PalletCommonFundingRequestParameters>;
+    } & Struct;
+    readonly isFundCouncilBudget: boolean;
+    readonly asFundCouncilBudget: {
+      readonly memberId: u64;
+      readonly amount: u128;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isCouncilorRemark: boolean;
+    readonly asCouncilorRemark: {
+      readonly councilorId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isCandidateRemark: boolean;
+    readonly asCandidateRemark: {
+      readonly candidateId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly type: 'AnnounceCandidacy' | 'ReleaseCandidacyStake' | 'WithdrawCandidacy' | 'SetCandidacyNote' | 'SetBudget' | 'PlanBudgetRefill' | 'SetBudgetIncrement' | 'SetCouncilorReward' | 'FundingRequest' | 'FundCouncilBudget' | 'CouncilorRemark' | 'CandidateRemark';
+  }
+
+  /** @name PalletReferendumCall (377) */
+  export interface PalletReferendumCall extends Enum {
+    readonly isVote: boolean;
+    readonly asVote: {
+      readonly commitment: H256;
+      readonly stake: u128;
+    } & Struct;
+    readonly isRevealVote: boolean;
+    readonly asRevealVote: {
+      readonly salt: Bytes;
+      readonly voteOptionId: u64;
+    } & Struct;
+    readonly isReleaseVoteStake: boolean;
+    readonly isOptOutOfVoting: boolean;
+    readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake' | 'OptOutOfVoting';
+  }
+
+  /** @name PalletMembershipCall (378) */
+  export interface PalletMembershipCall extends Enum {
+    readonly isBuyMembership: boolean;
+    readonly asBuyMembership: {
+      readonly params: PalletMembershipBuyMembershipParameters;
+    } & Struct;
+    readonly isUpdateProfile: boolean;
+    readonly asUpdateProfile: {
+      readonly memberId: u64;
+      readonly handle: Option<Bytes>;
+      readonly metadata: Option<Bytes>;
+    } & Struct;
+    readonly isUpdateAccounts: boolean;
+    readonly asUpdateAccounts: {
+      readonly memberId: u64;
+      readonly newRootAccount: Option<AccountId32>;
+      readonly newControllerAccount: Option<AccountId32>;
+    } & Struct;
+    readonly isUpdateProfileVerification: boolean;
+    readonly asUpdateProfileVerification: {
+      readonly workerId: u64;
+      readonly targetMemberId: u64;
+      readonly isVerified: bool;
+    } & Struct;
+    readonly isSetReferralCut: boolean;
+    readonly asSetReferralCut: {
+      readonly percentValue: u8;
+    } & Struct;
+    readonly isTransferInvites: boolean;
+    readonly asTransferInvites: {
+      readonly sourceMemberId: u64;
+      readonly targetMemberId: u64;
+      readonly numberOfInvites: u32;
+    } & Struct;
+    readonly isInviteMember: boolean;
+    readonly asInviteMember: {
+      readonly params: PalletMembershipInviteMembershipParameters;
+    } & Struct;
+    readonly isGiftMembership: boolean;
+    readonly asGiftMembership: {
+      readonly params: PalletMembershipGiftMembershipParameters;
+    } & Struct;
+    readonly isSetMembershipPrice: boolean;
+    readonly asSetMembershipPrice: {
+      readonly newPrice: u128;
+    } & Struct;
+    readonly isSetLeaderInvitationQuota: boolean;
+    readonly asSetLeaderInvitationQuota: {
+      readonly invitationQuota: u32;
+    } & Struct;
+    readonly isSetInitialInvitationBalance: boolean;
+    readonly asSetInitialInvitationBalance: {
+      readonly newInitialBalance: u128;
+    } & Struct;
+    readonly isSetInitialInvitationCount: boolean;
+    readonly asSetInitialInvitationCount: {
+      readonly newInvitationCount: u32;
+    } & Struct;
+    readonly isAddStakingAccountCandidate: boolean;
+    readonly asAddStakingAccountCandidate: {
+      readonly memberId: u64;
+    } & Struct;
+    readonly isRemoveStakingAccount: boolean;
+    readonly asRemoveStakingAccount: {
+      readonly memberId: u64;
+    } & Struct;
+    readonly isConfirmStakingAccount: boolean;
+    readonly asConfirmStakingAccount: {
+      readonly memberId: u64;
+      readonly stakingAccountId: AccountId32;
+    } & Struct;
+    readonly isMemberRemark: boolean;
+    readonly asMemberRemark: {
+      readonly memberId: u64;
+      readonly msg: Bytes;
+      readonly payment: Option<ITuple<[AccountId32, u128]>>;
+    } & Struct;
+    readonly isCreateMember: boolean;
+    readonly asCreateMember: {
+      readonly params: PalletMembershipCreateMemberParameters;
+    } & Struct;
+    readonly type: 'BuyMembership' | 'UpdateProfile' | 'UpdateAccounts' | 'UpdateProfileVerification' | 'SetReferralCut' | 'TransferInvites' | 'InviteMember' | 'GiftMembership' | 'SetMembershipPrice' | 'SetLeaderInvitationQuota' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'AddStakingAccountCandidate' | 'RemoveStakingAccount' | 'ConfirmStakingAccount' | 'MemberRemark' | 'CreateMember';
+  }
+
+  /** @name PalletForumCall (379) */
+  export interface PalletForumCall extends Enum {
+    readonly isUpdateCategoryMembershipOfModerator: boolean;
+    readonly asUpdateCategoryMembershipOfModerator: {
+      readonly moderatorId: u64;
+      readonly categoryId: u64;
+      readonly newValue: bool;
+    } & Struct;
+    readonly isCreateCategory: boolean;
+    readonly asCreateCategory: {
+      readonly parentCategoryId: Option<u64>;
+      readonly title: Bytes;
+      readonly description: Bytes;
+    } & Struct;
+    readonly isUpdateCategoryArchivalStatus: boolean;
+    readonly asUpdateCategoryArchivalStatus: {
+      readonly actor: PalletForumPrivilegedActor;
+      readonly categoryId: u64;
+      readonly newArchivalStatus: bool;
+    } & Struct;
+    readonly isUpdateCategoryTitle: boolean;
+    readonly asUpdateCategoryTitle: {
+      readonly actor: PalletForumPrivilegedActor;
+      readonly categoryId: u64;
+      readonly title: Bytes;
+    } & Struct;
+    readonly isUpdateCategoryDescription: boolean;
+    readonly asUpdateCategoryDescription: {
+      readonly actor: PalletForumPrivilegedActor;
+      readonly categoryId: u64;
+      readonly description: Bytes;
+    } & Struct;
+    readonly isDeleteCategory: boolean;
+    readonly asDeleteCategory: {
+      readonly actor: PalletForumPrivilegedActor;
+      readonly categoryId: u64;
+    } & Struct;
+    readonly isCreateThread: boolean;
+    readonly asCreateThread: {
+      readonly forumUserId: u64;
+      readonly categoryId: u64;
+      readonly metadata: Bytes;
+      readonly text: Bytes;
+    } & Struct;
+    readonly isEditThreadMetadata: boolean;
+    readonly asEditThreadMetadata: {
+      readonly forumUserId: u64;
+      readonly categoryId: u64;
+      readonly threadId: u64;
+      readonly newMetadata: Bytes;
+    } & Struct;
+    readonly isDeleteThread: boolean;
+    readonly asDeleteThread: {
+      readonly forumUserId: u64;
+      readonly categoryId: u64;
+      readonly threadId: u64;
+      readonly hide: bool;
+    } & Struct;
+    readonly isMoveThreadToCategory: boolean;
+    readonly asMoveThreadToCategory: {
+      readonly actor: PalletForumPrivilegedActor;
+      readonly categoryId: u64;
+      readonly threadId: u64;
+      readonly newCategoryId: u64;
+    } & Struct;
+    readonly isModerateThread: boolean;
+    readonly asModerateThread: {
+      readonly actor: PalletForumPrivilegedActor;
+      readonly categoryId: u64;
+      readonly threadId: u64;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isAddPost: boolean;
+    readonly asAddPost: {
+      readonly forumUserId: u64;
+      readonly categoryId: u64;
+      readonly threadId: u64;
+      readonly text: Bytes;
+      readonly editable: bool;
+    } & Struct;
+    readonly isEditPostText: boolean;
+    readonly asEditPostText: {
+      readonly forumUserId: u64;
+      readonly categoryId: u64;
+      readonly threadId: u64;
+      readonly postId: u64;
+      readonly newText: Bytes;
+    } & Struct;
+    readonly isModeratePost: boolean;
+    readonly asModeratePost: {
+      readonly actor: PalletForumPrivilegedActor;
+      readonly categoryId: u64;
+      readonly threadId: u64;
+      readonly postId: u64;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isDeletePosts: boolean;
+    readonly asDeletePosts: {
+      readonly forumUserId: u64;
+      readonly posts: BTreeMap<PalletForumExtendedPostIdObject, bool>;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isSetStickiedThreads: boolean;
+    readonly asSetStickiedThreads: {
+      readonly actor: PalletForumPrivilegedActor;
+      readonly categoryId: u64;
+      readonly stickiedIds: BTreeSet<u64>;
+    } & Struct;
+    readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
+  }
+
+  /** @name PalletConstitutionCall (380) */
+  export interface PalletConstitutionCall extends Enum {
+    readonly isAmendConstitution: boolean;
+    readonly asAmendConstitution: {
+      readonly constitutionText: Bytes;
+    } & Struct;
+    readonly type: 'AmendConstitution';
+  }
+
+  /** @name PalletBountyCall (381) */
+  export interface PalletBountyCall extends Enum {
+    readonly isCreateBounty: boolean;
+    readonly asCreateBounty: {
+      readonly params: PalletBountyBountyParametersBTreeSet;
+      readonly metadata: Bytes;
+    } & Struct;
+    readonly isFundBounty: boolean;
+    readonly asFundBounty: {
+      readonly funder: PalletBountyBountyActor;
+      readonly bountyId: u64;
+      readonly amount: u128;
+    } & Struct;
+    readonly isTerminateBounty: boolean;
+    readonly asTerminateBounty: {
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isSwitchOracle: boolean;
+    readonly asSwitchOracle: {
+      readonly newOracle: PalletBountyBountyActor;
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isWithdrawFunding: boolean;
+    readonly asWithdrawFunding: {
+      readonly funder: PalletBountyBountyActor;
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isAnnounceWorkEntry: boolean;
+    readonly asAnnounceWorkEntry: {
+      readonly memberId: u64;
+      readonly bountyId: u64;
+      readonly stakingAccountId: AccountId32;
+      readonly workDescription: Bytes;
+    } & Struct;
+    readonly isSubmitWork: boolean;
+    readonly asSubmitWork: {
+      readonly memberId: u64;
+      readonly bountyId: u64;
+      readonly entryId: u64;
+      readonly workData: Bytes;
+    } & Struct;
+    readonly isEndWorkingPeriod: boolean;
+    readonly asEndWorkingPeriod: {
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isSubmitOracleJudgment: boolean;
+    readonly asSubmitOracleJudgment: {
+      readonly bountyId: u64;
+      readonly judgment: BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isWithdrawEntrantStake: boolean;
+    readonly asWithdrawEntrantStake: {
+      readonly memberId: u64;
+      readonly bountyId: u64;
+      readonly entryId: u64;
+    } & Struct;
+    readonly isWithdrawOracleReward: boolean;
+    readonly asWithdrawOracleReward: {
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isContributorRemark: boolean;
+    readonly asContributorRemark: {
+      readonly contributor: PalletBountyBountyActor;
+      readonly bountyId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isOracleRemark: boolean;
+    readonly asOracleRemark: {
+      readonly oracle: PalletBountyBountyActor;
+      readonly bountyId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isEntrantRemark: boolean;
+    readonly asEntrantRemark: {
+      readonly entrantId: u64;
+      readonly bountyId: u64;
+      readonly entryId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isCreatorRemark: boolean;
+    readonly asCreatorRemark: {
+      readonly creator: PalletBountyBountyActor;
+      readonly bountyId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly type: 'CreateBounty' | 'FundBounty' | 'TerminateBounty' | 'SwitchOracle' | 'WithdrawFunding' | 'AnnounceWorkEntry' | 'SubmitWork' | 'EndWorkingPeriod' | 'SubmitOracleJudgment' | 'WithdrawEntrantStake' | 'WithdrawOracleReward' | 'ContributorRemark' | 'OracleRemark' | 'EntrantRemark' | 'CreatorRemark';
+  }
+
+  /** @name PalletContentCall (383) */
+  export interface PalletContentCall extends Enum {
+    readonly isCreateCuratorGroup: boolean;
+    readonly asCreateCuratorGroup: {
+      readonly isActive: bool;
+      readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
+    } & Struct;
+    readonly isUpdateCuratorGroupPermissions: boolean;
+    readonly asUpdateCuratorGroupPermissions: {
+      readonly curatorGroupId: u64;
+      readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
+    } & Struct;
+    readonly isSetCuratorGroupStatus: boolean;
+    readonly asSetCuratorGroupStatus: {
+      readonly curatorGroupId: u64;
+      readonly isActive: bool;
+    } & Struct;
+    readonly isAddCuratorToGroup: boolean;
+    readonly asAddCuratorToGroup: {
+      readonly curatorGroupId: u64;
+      readonly curatorId: u64;
+      readonly permissions: BTreeSet<PalletContentIterableEnumsChannelActionPermission>;
+    } & Struct;
+    readonly isRemoveCuratorFromGroup: boolean;
+    readonly asRemoveCuratorFromGroup: {
+      readonly curatorGroupId: u64;
+      readonly curatorId: u64;
+    } & Struct;
+    readonly isCreateChannel: boolean;
+    readonly asCreateChannel: {
+      readonly channelOwner: PalletContentChannelOwner;
+      readonly params: PalletContentChannelCreationParametersRecord;
+    } & Struct;
+    readonly isUpdateChannel: boolean;
+    readonly asUpdateChannel: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly params: PalletContentChannelUpdateParametersRecord;
+    } & Struct;
+    readonly isUpdateChannelPrivilegeLevel: boolean;
+    readonly asUpdateChannelPrivilegeLevel: {
+      readonly channelId: u64;
+      readonly newPrivilegeLevel: u8;
+    } & Struct;
+    readonly isSetChannelPausedFeaturesAsModerator: boolean;
+    readonly asSetChannelPausedFeaturesAsModerator: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly newPausedFeatures: BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isDeleteChannel: boolean;
+    readonly asDeleteChannel: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly channelBagWitness: PalletContentChannelBagWitness;
+      readonly numObjectsToDelete: u64;
+    } & Struct;
+    readonly isDeleteChannelAssetsAsModerator: boolean;
+    readonly asDeleteChannelAssetsAsModerator: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly assetsToRemove: BTreeSet<u64>;
+      readonly storageBucketsNumWitness: u32;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isDeleteChannelAsModerator: boolean;
+    readonly asDeleteChannelAsModerator: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly channelBagWitness: PalletContentChannelBagWitness;
+      readonly numObjectsToDelete: u64;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isSetChannelVisibilityAsModerator: boolean;
+    readonly asSetChannelVisibilityAsModerator: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly isHidden: bool;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isCreateVideo: boolean;
+    readonly asCreateVideo: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly params: PalletContentVideoCreationParametersRecord;
+    } & Struct;
+    readonly isUpdateVideo: boolean;
+    readonly asUpdateVideo: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly params: PalletContentVideoUpdateParametersRecord;
+    } & Struct;
+    readonly isDeleteVideo: boolean;
+    readonly asDeleteVideo: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly numObjectsToDelete: u64;
+      readonly storageBucketsNumWitness: Option<u32>;
+    } & Struct;
+    readonly isDeleteVideoAssetsAsModerator: boolean;
+    readonly asDeleteVideoAssetsAsModerator: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly storageBucketsNumWitness: u32;
+      readonly assetsToRemove: BTreeSet<u64>;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isDeleteVideoAsModerator: boolean;
+    readonly asDeleteVideoAsModerator: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly storageBucketsNumWitness: Option<u32>;
+      readonly numObjectsToDelete: u64;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isSetVideoVisibilityAsModerator: boolean;
+    readonly asSetVideoVisibilityAsModerator: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly isHidden: bool;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isUpdateChannelPayouts: boolean;
+    readonly asUpdateChannelPayouts: {
+      readonly params: PalletContentUpdateChannelPayoutsParametersRecord;
+      readonly uploaderAccount: AccountId32;
+    } & Struct;
+    readonly isClaimChannelReward: boolean;
+    readonly asClaimChannelReward: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly proof: Vec<PalletCommonMerkleTreeProofElementRecord>;
+      readonly item: PalletContentPullPaymentElement;
+    } & Struct;
+    readonly isWithdrawFromChannelBalance: boolean;
+    readonly asWithdrawFromChannelBalance: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly amount: u128;
+    } & Struct;
+    readonly isUpdateChannelStateBloatBond: boolean;
+    readonly asUpdateChannelStateBloatBond: {
+      readonly newChannelStateBloatBond: u128;
+    } & Struct;
+    readonly isUpdateVideoStateBloatBond: boolean;
+    readonly asUpdateVideoStateBloatBond: {
+      readonly newVideoStateBloatBond: u128;
+    } & Struct;
+    readonly isClaimAndWithdrawChannelReward: boolean;
+    readonly asClaimAndWithdrawChannelReward: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly proof: Vec<PalletCommonMerkleTreeProofElementRecord>;
+      readonly item: PalletContentPullPaymentElement;
+    } & Struct;
+    readonly isIssueNft: boolean;
+    readonly asIssueNft: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly params: PalletContentNftTypesNftIssuanceParametersRecord;
+    } & Struct;
+    readonly isDestroyNft: boolean;
+    readonly asDestroyNft: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+    } & Struct;
+    readonly isStartOpenAuction: boolean;
+    readonly asStartOpenAuction: {
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly auctionParams: PalletContentNftTypesOpenAuctionParamsRecord;
+    } & Struct;
+    readonly isStartEnglishAuction: boolean;
+    readonly asStartEnglishAuction: {
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly auctionParams: PalletContentNftTypesEnglishAuctionParamsRecord;
+    } & Struct;
+    readonly isCancelEnglishAuction: boolean;
+    readonly asCancelEnglishAuction: {
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+    } & Struct;
+    readonly isCancelOpenAuction: boolean;
+    readonly asCancelOpenAuction: {
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+    } & Struct;
+    readonly isCancelOffer: boolean;
+    readonly asCancelOffer: {
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+    } & Struct;
+    readonly isCancelBuyNow: boolean;
+    readonly asCancelBuyNow: {
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+    } & Struct;
+    readonly isUpdateBuyNowPrice: boolean;
+    readonly asUpdateBuyNowPrice: {
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly newPrice: u128;
+    } & Struct;
+    readonly isMakeOpenAuctionBid: boolean;
+    readonly asMakeOpenAuctionBid: {
+      readonly participantId: u64;
+      readonly videoId: u64;
+      readonly bidAmount: u128;
+    } & Struct;
+    readonly isMakeEnglishAuctionBid: boolean;
+    readonly asMakeEnglishAuctionBid: {
+      readonly participantId: u64;
+      readonly videoId: u64;
+      readonly bidAmount: u128;
+    } & Struct;
+    readonly isCancelOpenAuctionBid: boolean;
+    readonly asCancelOpenAuctionBid: {
+      readonly participantId: u64;
+      readonly videoId: u64;
+    } & Struct;
+    readonly isSettleEnglishAuction: boolean;
+    readonly asSettleEnglishAuction: {
+      readonly videoId: u64;
+    } & Struct;
+    readonly isPickOpenAuctionWinner: boolean;
+    readonly asPickOpenAuctionWinner: {
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly winnerId: u64;
+      readonly commit: u128;
+    } & Struct;
+    readonly isOfferNft: boolean;
+    readonly asOfferNft: {
+      readonly videoId: u64;
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly to: u64;
+      readonly price: Option<u128>;
+    } & Struct;
+    readonly isSlingNftBack: boolean;
+    readonly asSlingNftBack: {
+      readonly videoId: u64;
+      readonly ownerId: PalletContentPermissionsContentActor;
+    } & Struct;
+    readonly isAcceptIncomingOffer: boolean;
+    readonly asAcceptIncomingOffer: {
+      readonly videoId: u64;
+      readonly witnessPrice: Option<u128>;
+    } & Struct;
+    readonly isSellNft: boolean;
+    readonly asSellNft: {
+      readonly videoId: u64;
+      readonly ownerId: PalletContentPermissionsContentActor;
+      readonly price: u128;
+    } & Struct;
+    readonly isBuyNft: boolean;
+    readonly asBuyNft: {
+      readonly videoId: u64;
+      readonly participantId: u64;
+      readonly witnessPrice: u128;
+    } & Struct;
+    readonly isToggleNftLimits: boolean;
+    readonly asToggleNftLimits: {
+      readonly enabled: bool;
+    } & Struct;
+    readonly isChannelOwnerRemark: boolean;
+    readonly asChannelOwnerRemark: {
+      readonly channelId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isCreatorTokenIssuerRemark: boolean;
+    readonly asCreatorTokenIssuerRemark: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isChannelAgentRemark: boolean;
+    readonly asChannelAgentRemark: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isNftOwnerRemark: boolean;
+    readonly asNftOwnerRemark: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly videoId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isInitializeChannelTransfer: boolean;
+    readonly asInitializeChannelTransfer: {
+      readonly channelId: u64;
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly transferParams: PalletContentInitTransferParameters;
+    } & Struct;
+    readonly isCancelChannelTransfer: boolean;
+    readonly asCancelChannelTransfer: {
+      readonly channelId: u64;
+      readonly actor: PalletContentPermissionsContentActor;
+    } & Struct;
+    readonly isAcceptChannelTransfer: boolean;
+    readonly asAcceptChannelTransfer: {
+      readonly channelId: u64;
+      readonly commitmentParams: PalletContentTransferCommitmentParametersBTreeMap;
+    } & Struct;
+    readonly isUpdateGlobalNftLimit: boolean;
+    readonly asUpdateGlobalNftLimit: {
+      readonly nftLimitPeriod: PalletContentNftLimitPeriod;
+      readonly limit: u64;
+    } & Struct;
+    readonly isUpdateChannelNftLimit: boolean;
+    readonly asUpdateChannelNftLimit: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly nftLimitPeriod: PalletContentNftLimitPeriod;
+      readonly channelId: u64;
+      readonly limit: u64;
+    } & Struct;
+    readonly isIssueCreatorToken: boolean;
+    readonly asIssueCreatorToken: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly params: PalletProjectTokenTokenIssuanceParameters;
+    } & Struct;
+    readonly isInitCreatorTokenSale: boolean;
+    readonly asInitCreatorTokenSale: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly params: PalletProjectTokenTokenSaleParams;
+    } & Struct;
+    readonly isUpdateUpcomingCreatorTokenSale: boolean;
+    readonly asUpdateUpcomingCreatorTokenSale: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly newStartBlock: Option<u32>;
+      readonly newDuration: Option<u32>;
+    } & Struct;
+    readonly isCreatorTokenIssuerTransfer: boolean;
+    readonly asCreatorTokenIssuerTransfer: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly outputs: Vec<ITuple<[u64, PalletProjectTokenPaymentWithVesting]>>;
+      readonly metadata: Bytes;
+    } & Struct;
+    readonly isMakeCreatorTokenPermissionless: boolean;
+    readonly asMakeCreatorTokenPermissionless: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+    } & Struct;
+    readonly isReduceCreatorTokenPatronageRateTo: boolean;
+    readonly asReduceCreatorTokenPatronageRateTo: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly targetRate: Permill;
+    } & Struct;
+    readonly isClaimCreatorTokenPatronageCredit: boolean;
+    readonly asClaimCreatorTokenPatronageCredit: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+    } & Struct;
+    readonly isIssueRevenueSplit: boolean;
+    readonly asIssueRevenueSplit: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly start: Option<u32>;
+      readonly duration: u32;
+    } & Struct;
+    readonly isFinalizeRevenueSplit: boolean;
+    readonly asFinalizeRevenueSplit: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+    } & Struct;
+    readonly isFinalizeCreatorTokenSale: boolean;
+    readonly asFinalizeCreatorTokenSale: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+    } & Struct;
+    readonly isDeissueCreatorToken: boolean;
+    readonly asDeissueCreatorToken: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+    } & Struct;
+    readonly isActivateAmm: boolean;
+    readonly asActivateAmm: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly params: PalletProjectTokenAmmParams;
+    } & Struct;
+    readonly isDeactivateAmm: boolean;
+    readonly asDeactivateAmm: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+    } & Struct;
+    readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'CreatorTokenIssuerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken' | 'ActivateAmm' | 'DeactivateAmm';
+  }
+
+  /** @name PalletContentChannelBagWitness (384) */
+  export interface PalletContentChannelBagWitness extends Struct {
+    readonly storageBucketsNum: u32;
+    readonly distributionBucketsNum: u32;
+  }
+
+  /** @name PalletCommonMerkleTreeProofElementRecord (386) */
+  export interface PalletCommonMerkleTreeProofElementRecord extends Struct {
+    readonly hash_: H256;
+    readonly side: PalletCommonMerkleTreeSide;
+  }
+
+  /** @name PalletCommonMerkleTreeSide (387) */
+  export interface PalletCommonMerkleTreeSide extends Enum {
+    readonly isLeft: boolean;
+    readonly isRight: boolean;
+    readonly type: 'Left' | 'Right';
+  }
+
+  /** @name PalletContentPullPaymentElement (388) */
+  export interface PalletContentPullPaymentElement extends Struct {
+    readonly channelId: u64;
+    readonly cumulativeRewardEarned: u128;
+    readonly reason: H256;
+  }
+
+  /** @name PalletContentInitTransferParameters (389) */
+  export interface PalletContentInitTransferParameters extends Struct {
+    readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+    readonly price: u128;
+    readonly newOwner: PalletContentChannelOwner;
+  }
+
+  /** @name PalletProjectTokenTokenSaleParams (390) */
+  export interface PalletProjectTokenTokenSaleParams extends Struct {
+    readonly unitPrice: u128;
+    readonly upperBoundQuantity: u128;
+    readonly startsAt: Option<u32>;
+    readonly duration: u32;
+    readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
+    readonly capPerMember: Option<u128>;
+    readonly metadata: Option<Bytes>;
+  }
+
+  /** @name PalletProjectTokenAmmParams (394) */
+  export interface PalletProjectTokenAmmParams extends Struct {
+    readonly slope: u128;
+    readonly intercept: u128;
+  }
+
+  /** @name PalletStorageCall (395) */
+  export interface PalletStorageCall extends Enum {
+    readonly isDeleteStorageBucket: boolean;
+    readonly asDeleteStorageBucket: {
+      readonly storageBucketId: u64;
+    } & Struct;
+    readonly isUpdateUploadingBlockedStatus: boolean;
+    readonly asUpdateUploadingBlockedStatus: {
+      readonly newStatus: bool;
+    } & Struct;
+    readonly isUpdateDataSizeFee: boolean;
+    readonly asUpdateDataSizeFee: {
+      readonly newDataSizeFee: u128;
+    } & Struct;
+    readonly isUpdateStorageBucketsPerBagLimit: boolean;
+    readonly asUpdateStorageBucketsPerBagLimit: {
+      readonly newLimit: u32;
+    } & Struct;
+    readonly isUpdateStorageBucketsVoucherMaxLimits: boolean;
+    readonly asUpdateStorageBucketsVoucherMaxLimits: {
+      readonly newObjectsSize: u64;
+      readonly newObjectsNumber: u64;
+    } & Struct;
+    readonly isUpdateDataObjectStateBloatBond: boolean;
+    readonly asUpdateDataObjectStateBloatBond: {
+      readonly stateBloatBond: u128;
+    } & Struct;
+    readonly isUpdateNumberOfStorageBucketsInDynamicBagCreationPolicy: boolean;
+    readonly asUpdateNumberOfStorageBucketsInDynamicBagCreationPolicy: {
+      readonly dynamicBagType: PalletStorageDynamicBagType;
+      readonly numberOfStorageBuckets: u32;
+    } & Struct;
+    readonly isUpdateBlacklist: boolean;
+    readonly asUpdateBlacklist: {
+      readonly removeHashes: BTreeSet<Bytes>;
+      readonly addHashes: BTreeSet<Bytes>;
+    } & Struct;
+    readonly isCreateStorageBucket: boolean;
+    readonly asCreateStorageBucket: {
+      readonly inviteWorker: Option<u64>;
+      readonly acceptingNewBags: bool;
+      readonly sizeLimit: u64;
+      readonly objectsLimit: u64;
+    } & Struct;
+    readonly isUpdateStorageBucketsForBag: boolean;
+    readonly asUpdateStorageBucketsForBag: {
+      readonly bagId: PalletStorageBagIdType;
+      readonly addBuckets: BTreeSet<u64>;
+      readonly removeBuckets: BTreeSet<u64>;
+    } & Struct;
+    readonly isCancelStorageBucketOperatorInvite: boolean;
+    readonly asCancelStorageBucketOperatorInvite: {
+      readonly storageBucketId: u64;
+    } & Struct;
+    readonly isInviteStorageBucketOperator: boolean;
+    readonly asInviteStorageBucketOperator: {
+      readonly storageBucketId: u64;
+      readonly operatorId: u64;
+    } & Struct;
+    readonly isRemoveStorageBucketOperator: boolean;
+    readonly asRemoveStorageBucketOperator: {
+      readonly storageBucketId: u64;
+    } & Struct;
+    readonly isUpdateStorageBucketStatus: boolean;
+    readonly asUpdateStorageBucketStatus: {
+      readonly storageBucketId: u64;
+      readonly acceptingNewBags: bool;
+    } & Struct;
+    readonly isSetStorageBucketVoucherLimits: boolean;
+    readonly asSetStorageBucketVoucherLimits: {
+      readonly storageBucketId: u64;
+      readonly newObjectsSizeLimit: u64;
+      readonly newObjectsNumberLimit: u64;
+    } & Struct;
+    readonly isAcceptStorageBucketInvitation: boolean;
+    readonly asAcceptStorageBucketInvitation: {
+      readonly workerId: u64;
+      readonly storageBucketId: u64;
+      readonly transactorAccountId: AccountId32;
+    } & Struct;
+    readonly isSetStorageOperatorMetadata: boolean;
+    readonly asSetStorageOperatorMetadata: {
+      readonly workerId: u64;
+      readonly storageBucketId: u64;
+      readonly metadata: Bytes;
+    } & Struct;
+    readonly isAcceptPendingDataObjects: boolean;
+    readonly asAcceptPendingDataObjects: {
+      readonly workerId: u64;
+      readonly storageBucketId: u64;
+      readonly bagId: PalletStorageBagIdType;
+      readonly dataObjects: BTreeSet<u64>;
+    } & Struct;
+    readonly isCreateDistributionBucketFamily: boolean;
+    readonly isDeleteDistributionBucketFamily: boolean;
+    readonly asDeleteDistributionBucketFamily: {
+      readonly familyId: u64;
+    } & Struct;
+    readonly isCreateDistributionBucket: boolean;
+    readonly asCreateDistributionBucket: {
+      readonly familyId: u64;
+      readonly acceptingNewBags: bool;
+    } & Struct;
+    readonly isUpdateDistributionBucketStatus: boolean;
+    readonly asUpdateDistributionBucketStatus: {
+      readonly bucketId: PalletStorageDistributionBucketIdRecord;
+      readonly acceptingNewBags: bool;
+    } & Struct;
+    readonly isDeleteDistributionBucket: boolean;
+    readonly asDeleteDistributionBucket: {
+      readonly bucketId: PalletStorageDistributionBucketIdRecord;
+    } & Struct;
+    readonly isUpdateDistributionBucketsForBag: boolean;
+    readonly asUpdateDistributionBucketsForBag: {
+      readonly bagId: PalletStorageBagIdType;
+      readonly familyId: u64;
+      readonly addBucketsIndices: BTreeSet<u64>;
+      readonly removeBucketsIndices: BTreeSet<u64>;
+    } & Struct;
+    readonly isUpdateDistributionBucketsPerBagLimit: boolean;
+    readonly asUpdateDistributionBucketsPerBagLimit: {
+      readonly newLimit: u32;
+    } & Struct;
+    readonly isUpdateDistributionBucketMode: boolean;
+    readonly asUpdateDistributionBucketMode: {
+      readonly bucketId: PalletStorageDistributionBucketIdRecord;
+      readonly distributing: bool;
+    } & Struct;
+    readonly isUpdateFamiliesInDynamicBagCreationPolicy: boolean;
+    readonly asUpdateFamiliesInDynamicBagCreationPolicy: {
+      readonly dynamicBagType: PalletStorageDynamicBagType;
+      readonly families: BTreeMap<u64, u32>;
+    } & Struct;
+    readonly isInviteDistributionBucketOperator: boolean;
+    readonly asInviteDistributionBucketOperator: {
+      readonly bucketId: PalletStorageDistributionBucketIdRecord;
+      readonly operatorWorkerId: u64;
+    } & Struct;
+    readonly isCancelDistributionBucketOperatorInvite: boolean;
+    readonly asCancelDistributionBucketOperatorInvite: {
+      readonly bucketId: PalletStorageDistributionBucketIdRecord;
+      readonly operatorWorkerId: u64;
+    } & Struct;
+    readonly isRemoveDistributionBucketOperator: boolean;
+    readonly asRemoveDistributionBucketOperator: {
+      readonly bucketId: PalletStorageDistributionBucketIdRecord;
+      readonly operatorWorkerId: u64;
+    } & Struct;
+    readonly isSetDistributionBucketFamilyMetadata: boolean;
+    readonly asSetDistributionBucketFamilyMetadata: {
+      readonly familyId: u64;
+      readonly metadata: Bytes;
+    } & Struct;
+    readonly isAcceptDistributionBucketInvitation: boolean;
+    readonly asAcceptDistributionBucketInvitation: {
+      readonly workerId: u64;
+      readonly bucketId: PalletStorageDistributionBucketIdRecord;
+    } & Struct;
+    readonly isSetDistributionOperatorMetadata: boolean;
+    readonly asSetDistributionOperatorMetadata: {
+      readonly workerId: u64;
+      readonly bucketId: PalletStorageDistributionBucketIdRecord;
+      readonly metadata: Bytes;
+    } & Struct;
+    readonly isStorageOperatorRemark: boolean;
+    readonly asStorageOperatorRemark: {
+      readonly workerId: u64;
+      readonly storageBucketId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isDistributionOperatorRemark: boolean;
+    readonly asDistributionOperatorRemark: {
+      readonly workerId: u64;
+      readonly distributionBucketId: PalletStorageDistributionBucketIdRecord;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
+  }
+
+  /** @name PalletProjectTokenCall (396) */
+  export interface PalletProjectTokenCall extends Enum {
+    readonly isTransfer: boolean;
+    readonly asTransfer: {
+      readonly srcMemberId: u64;
+      readonly tokenId: u64;
+      readonly outputs: Vec<ITuple<[u64, u128]>>;
+      readonly metadata: Bytes;
+    } & Struct;
+    readonly isBurn: boolean;
+    readonly asBurn: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+      readonly amount: u128;
+    } & Struct;
+    readonly isDustAccount: boolean;
+    readonly asDustAccount: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+    } & Struct;
+    readonly isJoinWhitelist: boolean;
+    readonly asJoinWhitelist: {
+      readonly memberId: u64;
+      readonly tokenId: u64;
+      readonly proof: PalletProjectTokenMerkleProof;
+    } & Struct;
+    readonly isPurchaseTokensOnSale: boolean;
+    readonly asPurchaseTokensOnSale: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+      readonly amount: u128;
+    } & Struct;
+    readonly isParticipateInSplit: boolean;
+    readonly asParticipateInSplit: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+      readonly amount: u128;
+    } & Struct;
+    readonly isExitRevenueSplit: boolean;
+    readonly asExitRevenueSplit: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+    } & Struct;
+    readonly isBuyOnAmm: boolean;
+    readonly asBuyOnAmm: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+      readonly amount: u128;
+      readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+    } & Struct;
+    readonly isSellOnAmm: boolean;
+    readonly asSellOnAmm: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+      readonly amount: u128;
+      readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+    } & Struct;
+    readonly isUpdateMaxYearlyPatronageRate: boolean;
+    readonly asUpdateMaxYearlyPatronageRate: {
+      readonly rate: Permill;
+    } & Struct;
+    readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit' | 'BuyOnAmm' | 'SellOnAmm' | 'UpdateMaxYearlyPatronageRate';
+  }
+
+  /** @name PalletProjectTokenMerkleProof (400) */
+  export interface PalletProjectTokenMerkleProof extends Vec<ITuple<[H256, PalletProjectTokenMerkleSide]>> {}
+
+  /** @name PalletProjectTokenMerkleSide (403) */
+  export interface PalletProjectTokenMerkleSide extends Enum {
+    readonly isRight: boolean;
+    readonly isLeft: boolean;
+    readonly type: 'Right' | 'Left';
+  }
+
+  /** @name PalletProposalsEngineCall (406) */
+  export interface PalletProposalsEngineCall extends Enum {
+    readonly isVote: boolean;
+    readonly asVote: {
+      readonly voterId: u64;
+      readonly proposalId: u32;
+      readonly vote: PalletProposalsEngineVoteKind;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isCancelProposal: boolean;
+    readonly asCancelProposal: {
+      readonly proposerId: u64;
+      readonly proposalId: u32;
+    } & Struct;
+    readonly isVetoProposal: boolean;
+    readonly asVetoProposal: {
+      readonly proposalId: u32;
+    } & Struct;
+    readonly isProposerRemark: boolean;
+    readonly asProposerRemark: {
+      readonly proposalId: u32;
+      readonly proposerId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly type: 'Vote' | 'CancelProposal' | 'VetoProposal' | 'ProposerRemark';
+  }
+
+  /** @name PalletProposalsDiscussionCall (407) */
+  export interface PalletProposalsDiscussionCall extends Enum {
+    readonly isAddPost: boolean;
+    readonly asAddPost: {
+      readonly postAuthorId: u64;
+      readonly threadId: u64;
+      readonly text: Bytes;
+      readonly editable: bool;
+    } & Struct;
+    readonly isDeletePost: boolean;
+    readonly asDeletePost: {
+      readonly deleterId: u64;
+      readonly postId: u64;
+      readonly threadId: u64;
+      readonly hide: bool;
+    } & Struct;
+    readonly isUpdatePost: boolean;
+    readonly asUpdatePost: {
+      readonly threadId: u64;
+      readonly postId: u64;
+      readonly text: Bytes;
+    } & Struct;
+    readonly isChangeThreadMode: boolean;
+    readonly asChangeThreadMode: {
+      readonly memberId: u64;
+      readonly threadId: u64;
+      readonly mode: PalletProposalsDiscussionThreadModeBTreeSet;
+    } & Struct;
+    readonly type: 'AddPost' | 'DeletePost' | 'UpdatePost' | 'ChangeThreadMode';
+  }
+
+  /** @name PalletProposalsCodexCall (408) */
+  export interface PalletProposalsCodexCall extends Enum {
+    readonly isCreateProposal: boolean;
+    readonly asCreateProposal: {
+      readonly generalProposalParameters: PalletProposalsCodexGeneralProposalParams;
+      readonly proposalDetails: PalletProposalsCodexProposalDetails;
+    } & Struct;
+    readonly type: 'CreateProposal';
+  }
+
+  /** @name PalletWorkingGroupCall (409) */
+  export interface PalletWorkingGroupCall extends Enum {
+    readonly isAddOpening: boolean;
+    readonly asAddOpening: {
+      readonly description: Bytes;
+      readonly openingType: PalletWorkingGroupOpeningType;
+      readonly stakePolicy: PalletWorkingGroupStakePolicy;
+      readonly rewardPerBlock: Option<u128>;
+    } & Struct;
+    readonly isApplyOnOpening: boolean;
+    readonly asApplyOnOpening: {
+      readonly p: PalletWorkingGroupApplyOnOpeningParams;
+    } & Struct;
+    readonly isFillOpening: boolean;
+    readonly asFillOpening: {
+      readonly openingId: u64;
+      readonly successfulApplicationIds: BTreeSet<u64>;
+    } & Struct;
+    readonly isUpdateRoleAccount: boolean;
+    readonly asUpdateRoleAccount: {
+      readonly workerId: u64;
+      readonly newRoleAccountId: AccountId32;
+    } & Struct;
+    readonly isLeaveRole: boolean;
+    readonly asLeaveRole: {
+      readonly workerId: u64;
+      readonly rationale: Option<Bytes>;
+    } & Struct;
+    readonly isTerminateRole: boolean;
+    readonly asTerminateRole: {
+      readonly workerId: u64;
+      readonly penalty: Option<u128>;
+      readonly rationale: Option<Bytes>;
+    } & Struct;
+    readonly isSlashStake: boolean;
+    readonly asSlashStake: {
+      readonly workerId: u64;
+      readonly penalty: u128;
+      readonly rationale: Option<Bytes>;
+    } & Struct;
+    readonly isDecreaseStake: boolean;
+    readonly asDecreaseStake: {
+      readonly workerId: u64;
+      readonly stakeBalanceDelta: u128;
+    } & Struct;
+    readonly isIncreaseStake: boolean;
+    readonly asIncreaseStake: {
+      readonly workerId: u64;
+      readonly stakeBalanceDelta: u128;
+    } & Struct;
+    readonly isWithdrawApplication: boolean;
+    readonly asWithdrawApplication: {
+      readonly applicationId: u64;
+    } & Struct;
+    readonly isCancelOpening: boolean;
+    readonly asCancelOpening: {
+      readonly openingId: u64;
+    } & Struct;
+    readonly isSetBudget: boolean;
+    readonly asSetBudget: {
+      readonly newBudget: u128;
+    } & Struct;
+    readonly isUpdateRewardAccount: boolean;
+    readonly asUpdateRewardAccount: {
+      readonly workerId: u64;
+      readonly newRewardAccountId: AccountId32;
+    } & Struct;
+    readonly isUpdateRewardAmount: boolean;
+    readonly asUpdateRewardAmount: {
+      readonly workerId: u64;
+      readonly rewardPerBlock: Option<u128>;
+    } & Struct;
+    readonly isSetStatusText: boolean;
+    readonly asSetStatusText: {
+      readonly statusText: Option<Bytes>;
+    } & Struct;
+    readonly isSpendFromBudget: boolean;
+    readonly asSpendFromBudget: {
+      readonly accountId: AccountId32;
+      readonly amount: u128;
+      readonly rationale: Option<Bytes>;
+    } & Struct;
+    readonly isFundWorkingGroupBudget: boolean;
+    readonly asFundWorkingGroupBudget: {
+      readonly memberId: u64;
+      readonly amount: u128;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isLeadRemark: boolean;
+    readonly asLeadRemark: {
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isWorkerRemark: boolean;
+    readonly asWorkerRemark: {
+      readonly workerId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly type: 'AddOpening' | 'ApplyOnOpening' | 'FillOpening' | 'UpdateRoleAccount' | 'LeaveRole' | 'TerminateRole' | 'SlashStake' | 'DecreaseStake' | 'IncreaseStake' | 'WithdrawApplication' | 'CancelOpening' | 'SetBudget' | 'UpdateRewardAccount' | 'UpdateRewardAmount' | 'SetStatusText' | 'SpendFromBudget' | 'FundWorkingGroupBudget' | 'LeadRemark' | 'WorkerRemark';
+  }
+
+  /** @name JoystreamNodeRuntimeOriginCaller (418) */
+  export interface JoystreamNodeRuntimeOriginCaller extends Enum {
+    readonly isSystem: boolean;
+    readonly asSystem: FrameSupportDispatchRawOrigin;
+    readonly isVoid: boolean;
+    readonly type: 'System' | 'Void';
+  }
+
+  /** @name FrameSupportDispatchRawOrigin (419) */
+  export interface FrameSupportDispatchRawOrigin extends Enum {
+    readonly isRoot: boolean;
+    readonly isSigned: boolean;
+    readonly asSigned: AccountId32;
+    readonly isNone: boolean;
+    readonly type: 'Root' | 'Signed' | 'None';
+  }
+
+  /** @name SpCoreVoid (420) */
+  export type SpCoreVoid = Null;
+
+  /** @name PalletUtilityError (421) */
+  export interface PalletUtilityError extends Enum {
+    readonly isTooManyCalls: boolean;
+    readonly type: 'TooManyCalls';
+  }
+
+  /** @name SpConsensusBabeDigestsPreDigest (428) */
+  export interface SpConsensusBabeDigestsPreDigest extends Enum {
+    readonly isPrimary: boolean;
+    readonly asPrimary: SpConsensusBabeDigestsPrimaryPreDigest;
+    readonly isSecondaryPlain: boolean;
+    readonly asSecondaryPlain: SpConsensusBabeDigestsSecondaryPlainPreDigest;
+    readonly isSecondaryVRF: boolean;
+    readonly asSecondaryVRF: SpConsensusBabeDigestsSecondaryVRFPreDigest;
+    readonly type: 'Primary' | 'SecondaryPlain' | 'SecondaryVRF';
+  }
+
+  /** @name SpConsensusBabeDigestsPrimaryPreDigest (429) */
+  export interface SpConsensusBabeDigestsPrimaryPreDigest extends Struct {
+    readonly authorityIndex: u32;
+    readonly slot: u64;
+    readonly vrfOutput: U8aFixed;
+    readonly vrfProof: U8aFixed;
+  }
+
+  /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (430) */
+  export interface SpConsensusBabeDigestsSecondaryPlainPreDigest extends Struct {
+    readonly authorityIndex: u32;
+    readonly slot: u64;
+  }
+
+  /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (431) */
+  export interface SpConsensusBabeDigestsSecondaryVRFPreDigest extends Struct {
+    readonly authorityIndex: u32;
+    readonly slot: u64;
+    readonly vrfOutput: U8aFixed;
+    readonly vrfProof: U8aFixed;
+  }
+
+  /** @name SpConsensusBabeBabeEpochConfiguration (433) */
+  export interface SpConsensusBabeBabeEpochConfiguration extends Struct {
+    readonly c: ITuple<[u64, u64]>;
+    readonly allowedSlots: SpConsensusBabeAllowedSlots;
+  }
+
+  /** @name PalletBabeError (434) */
+  export interface PalletBabeError extends Enum {
+    readonly isInvalidEquivocationProof: boolean;
+    readonly isInvalidKeyOwnershipProof: boolean;
+    readonly isDuplicateOffenceReport: boolean;
+    readonly isInvalidConfiguration: boolean;
+    readonly type: 'InvalidEquivocationProof' | 'InvalidKeyOwnershipProof' | 'DuplicateOffenceReport' | 'InvalidConfiguration';
+  }
+
+  /** @name PalletAuthorshipUncleEntryItem (436) */
+  export interface PalletAuthorshipUncleEntryItem extends Enum {
+    readonly isInclusionHeight: boolean;
+    readonly asInclusionHeight: u32;
+    readonly isUncle: boolean;
+    readonly asUncle: ITuple<[H256, Option<AccountId32>]>;
+    readonly type: 'InclusionHeight' | 'Uncle';
+  }
+
+  /** @name PalletAuthorshipError (437) */
+  export interface PalletAuthorshipError extends Enum {
+    readonly isInvalidUncleParent: boolean;
+    readonly isUnclesAlreadySet: boolean;
+    readonly isTooManyUncles: boolean;
+    readonly isGenesisUncle: boolean;
+    readonly isTooHighUncle: boolean;
+    readonly isUncleAlreadyIncluded: boolean;
+    readonly isOldUncle: boolean;
+    readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
+  }
+
+  /** @name PalletBalancesBalanceLock (439) */
+  export interface PalletBalancesBalanceLock extends Struct {
+    readonly id: U8aFixed;
+    readonly amount: u128;
+    readonly reasons: PalletBalancesReasons;
+  }
+
+  /** @name PalletBalancesReasons (440) */
+  export interface PalletBalancesReasons extends Enum {
+    readonly isFee: boolean;
+    readonly isMisc: boolean;
+    readonly isAll: boolean;
+    readonly type: 'Fee' | 'Misc' | 'All';
+  }
+
+  /** @name PalletBalancesReserveData (443) */
+  export interface PalletBalancesReserveData extends Struct {
+    readonly id: U8aFixed;
+    readonly amount: u128;
+  }
+
+  /** @name PalletBalancesReleases (445) */
+  export interface PalletBalancesReleases extends Enum {
+    readonly isV100: boolean;
+    readonly isV200: boolean;
+    readonly type: 'V100' | 'V200';
+  }
+
+  /** @name PalletBalancesError (446) */
+  export interface PalletBalancesError extends Enum {
+    readonly isVestingBalance: boolean;
+    readonly isLiquidityRestrictions: boolean;
+    readonly isInsufficientBalance: boolean;
+    readonly isExistentialDeposit: boolean;
+    readonly isKeepAlive: boolean;
+    readonly isExistingVestingSchedule: boolean;
+    readonly isDeadAccount: boolean;
+    readonly isTooManyReserves: boolean;
+    readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
+  }
+
+  /** @name PalletTransactionPaymentReleases (448) */
+  export interface PalletTransactionPaymentReleases extends Enum {
+    readonly isV1Ancient: boolean;
+    readonly isV2: boolean;
+    readonly type: 'V1Ancient' | 'V2';
+  }
+
+  /** @name PalletElectionProviderMultiPhasePhase (449) */
+  export interface PalletElectionProviderMultiPhasePhase extends Enum {
+    readonly isOff: boolean;
+    readonly isSigned: boolean;
+    readonly isUnsigned: boolean;
+    readonly asUnsigned: ITuple<[bool, u32]>;
+    readonly isEmergency: boolean;
+    readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
+  }
+
+  /** @name PalletElectionProviderMultiPhaseReadySolution (451) */
+  export interface PalletElectionProviderMultiPhaseReadySolution extends Struct {
+    readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
+    readonly score: SpNposElectionsElectionScore;
+    readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
+  }
+
+  /** @name PalletElectionProviderMultiPhaseRoundSnapshot (452) */
+  export interface PalletElectionProviderMultiPhaseRoundSnapshot extends Struct {
+    readonly voters: Vec<ITuple<[AccountId32, u64, Vec<AccountId32>]>>;
+    readonly targets: Vec<AccountId32>;
+  }
+
+  /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (460) */
+  export interface PalletElectionProviderMultiPhaseSignedSignedSubmission extends Struct {
+    readonly who: AccountId32;
+    readonly deposit: u128;
+    readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
+    readonly callFee: u128;
+  }
+
+  /** @name PalletElectionProviderMultiPhaseError (461) */
+  export interface PalletElectionProviderMultiPhaseError extends Enum {
+    readonly isPreDispatchEarlySubmission: boolean;
+    readonly isPreDispatchWrongWinnerCount: boolean;
+    readonly isPreDispatchWeakSubmission: boolean;
+    readonly isSignedQueueFull: boolean;
+    readonly isSignedCannotPayDeposit: boolean;
+    readonly isSignedInvalidWitness: boolean;
+    readonly isSignedTooMuchWeight: boolean;
+    readonly isOcwCallWrongEra: boolean;
+    readonly isMissingSnapshotMetadata: boolean;
+    readonly isInvalidSubmissionIndex: boolean;
+    readonly isCallNotAllowed: boolean;
+    readonly isFallbackFailed: boolean;
+    readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed';
+  }
+
+  /** @name PalletStakingStakingLedger (462) */
+  export interface PalletStakingStakingLedger extends Struct {
+    readonly stash: AccountId32;
+    readonly total: Compact<u128>;
+    readonly active: Compact<u128>;
+    readonly unlocking: Vec<PalletStakingUnlockChunk>;
+    readonly claimedRewards: Vec<u32>;
+  }
+
+  /** @name PalletStakingUnlockChunk (464) */
+  export interface PalletStakingUnlockChunk extends Struct {
+    readonly value: Compact<u128>;
+    readonly era: Compact<u32>;
+  }
+
+  /** @name PalletStakingNominations (466) */
+  export interface PalletStakingNominations extends Struct {
+    readonly targets: Vec<AccountId32>;
+    readonly submittedIn: u32;
+    readonly suppressed: bool;
+  }
+
+  /** @name PalletStakingActiveEraInfo (467) */
+  export interface PalletStakingActiveEraInfo extends Struct {
+    readonly index: u32;
+    readonly start: Option<u64>;
+  }
+
+  /** @name PalletStakingEraRewardPoints (469) */
+  export interface PalletStakingEraRewardPoints extends Struct {
+    readonly total: u32;
+    readonly individual: BTreeMap<AccountId32, u32>;
+  }
+
+  /** @name PalletStakingForcing (473) */
+  export interface PalletStakingForcing extends Enum {
+    readonly isNotForcing: boolean;
+    readonly isForceNew: boolean;
+    readonly isForceNone: boolean;
+    readonly isForceAlways: boolean;
+    readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
+  }
+
+  /** @name PalletStakingUnappliedSlash (475) */
+  export interface PalletStakingUnappliedSlash extends Struct {
+    readonly validator: AccountId32;
+    readonly own: u128;
+    readonly others: Vec<ITuple<[AccountId32, u128]>>;
+    readonly reporters: Vec<AccountId32>;
+    readonly payout: u128;
+  }
+
+  /** @name PalletStakingSlashingSlashingSpans (477) */
+  export interface PalletStakingSlashingSlashingSpans extends Struct {
+    readonly spanIndex: u32;
+    readonly lastStart: u32;
+    readonly lastNonzeroSlash: u32;
+    readonly prior: Vec<u32>;
+  }
+
+  /** @name PalletStakingSlashingSpanRecord (478) */
+  export interface PalletStakingSlashingSpanRecord extends Struct {
+    readonly slashed: u128;
+    readonly paidOut: u128;
+  }
+
+  /** @name PalletStakingReleases (481) */
+  export interface PalletStakingReleases extends Enum {
+    readonly isV100Ancient: boolean;
+    readonly isV200: boolean;
+    readonly isV300: boolean;
+    readonly isV400: boolean;
+    readonly isV500: boolean;
+    readonly isV600: boolean;
+    readonly isV700: boolean;
+    readonly isV800: boolean;
+    readonly isV900: boolean;
+    readonly type: 'V100Ancient' | 'V200' | 'V300' | 'V400' | 'V500' | 'V600' | 'V700' | 'V800' | 'V900';
+  }
+
+  /** @name PalletStakingPalletError (482) */
+  export interface PalletStakingPalletError extends Enum {
+    readonly isNotController: boolean;
+    readonly isNotStash: boolean;
+    readonly isAlreadyBonded: boolean;
+    readonly isAlreadyPaired: boolean;
+    readonly isEmptyTargets: boolean;
+    readonly isDuplicateIndex: boolean;
+    readonly isInvalidSlashIndex: boolean;
+    readonly isInsufficientBond: boolean;
+    readonly isNoMoreChunks: boolean;
+    readonly isNoUnlockChunk: boolean;
+    readonly isFundedTarget: boolean;
+    readonly isInvalidEraToReward: boolean;
+    readonly isInvalidNumberOfNominations: boolean;
+    readonly isNotSortedAndUnique: boolean;
+    readonly isAlreadyClaimed: boolean;
+    readonly isIncorrectHistoryDepth: boolean;
+    readonly isIncorrectSlashingSpans: boolean;
+    readonly isBadState: boolean;
+    readonly isTooManyTargets: boolean;
+    readonly isBadTarget: boolean;
+    readonly isCannotChillOther: boolean;
+    readonly isTooManyNominators: boolean;
+    readonly isTooManyValidators: boolean;
+    readonly isCommissionTooLow: boolean;
+    readonly isBondingRestricted: boolean;
+    readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BondingRestricted';
+  }
+
+  /** @name SpCoreCryptoKeyTypeId (486) */
+  export interface SpCoreCryptoKeyTypeId extends U8aFixed {}
+
+  /** @name PalletSessionError (487) */
+  export interface PalletSessionError extends Enum {
+    readonly isInvalidProof: boolean;
+    readonly isNoAssociatedValidatorId: boolean;
+    readonly isDuplicatedKey: boolean;
+    readonly isNoKeys: boolean;
+    readonly isNoAccount: boolean;
+    readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
+  }
+
+  /** @name PalletGrandpaStoredState (489) */
+  export interface PalletGrandpaStoredState extends Enum {
+    readonly isLive: boolean;
+    readonly isPendingPause: boolean;
+    readonly asPendingPause: {
+      readonly scheduledAt: u32;
+      readonly delay: u32;
+    } & Struct;
+    readonly isPaused: boolean;
+    readonly isPendingResume: boolean;
+    readonly asPendingResume: {
+      readonly scheduledAt: u32;
+      readonly delay: u32;
+    } & Struct;
+    readonly type: 'Live' | 'PendingPause' | 'Paused' | 'PendingResume';
+  }
+
+  /** @name PalletGrandpaStoredPendingChange (490) */
+  export interface PalletGrandpaStoredPendingChange extends Struct {
+    readonly scheduledAt: u32;
+    readonly delay: u32;
+    readonly nextAuthorities: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
+    readonly forced: Option<u32>;
+  }
+
+  /** @name PalletGrandpaError (492) */
+  export interface PalletGrandpaError extends Enum {
+    readonly isPauseFailed: boolean;
+    readonly isResumeFailed: boolean;
+    readonly isChangePending: boolean;
+    readonly isTooSoon: boolean;
+    readonly isInvalidKeyOwnershipProof: boolean;
+    readonly isInvalidEquivocationProof: boolean;
+    readonly isDuplicateOffenceReport: boolean;
+    readonly type: 'PauseFailed' | 'ResumeFailed' | 'ChangePending' | 'TooSoon' | 'InvalidKeyOwnershipProof' | 'InvalidEquivocationProof' | 'DuplicateOffenceReport';
+  }
+
+  /** @name PalletImOnlineBoundedOpaqueNetworkState (498) */
+  export interface PalletImOnlineBoundedOpaqueNetworkState extends Struct {
+    readonly peerId: Bytes;
+    readonly externalAddresses: Vec<Bytes>;
+  }
+
+  /** @name PalletImOnlineError (502) */
+  export interface PalletImOnlineError extends Enum {
+    readonly isInvalidKey: boolean;
+    readonly isDuplicatedHeartbeat: boolean;
+    readonly type: 'InvalidKey' | 'DuplicatedHeartbeat';
+  }
+
+  /** @name SpStakingOffenceOffenceDetails (503) */
+  export interface SpStakingOffenceOffenceDetails extends Struct {
+    readonly offender: ITuple<[AccountId32, PalletStakingExposure]>;
+    readonly reporters: Vec<AccountId32>;
+  }
+
+  /** @name PalletBagsListListNode (506) */
+  export interface PalletBagsListListNode extends Struct {
+    readonly id: AccountId32;
+    readonly prev: Option<AccountId32>;
+    readonly next: Option<AccountId32>;
+    readonly bagUpper: u64;
+    readonly score: u64;
+  }
+
+  /** @name PalletBagsListListBag (507) */
+  export interface PalletBagsListListBag extends Struct {
+    readonly head: Option<AccountId32>;
+    readonly tail: Option<AccountId32>;
+  }
+
+  /** @name PalletBagsListError (508) */
+  export interface PalletBagsListError extends Enum {
+    readonly isList: boolean;
+    readonly asList: PalletBagsListListListError;
+    readonly type: 'List';
+  }
+
+  /** @name PalletBagsListListListError (509) */
+  export interface PalletBagsListListListError extends Enum {
+    readonly isDuplicate: boolean;
+    readonly isNotHeavier: boolean;
+    readonly isNotInSameBag: boolean;
+    readonly isNodeNotFound: boolean;
+    readonly type: 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';
+  }
+
+  /** @name PalletVestingReleases (512) */
+  export interface PalletVestingReleases extends Enum {
+    readonly isV0: boolean;
+    readonly isV1: boolean;
+    readonly type: 'V0' | 'V1';
+  }
+
+  /** @name PalletVestingError (513) */
+  export interface PalletVestingError extends Enum {
+    readonly isNotVesting: boolean;
+    readonly isAtMaxVestingSchedules: boolean;
+    readonly isAmountLow: boolean;
+    readonly isScheduleIndexOutOfBounds: boolean;
+    readonly isInvalidScheduleParams: boolean;
+    readonly type: 'NotVesting' | 'AtMaxVestingSchedules' | 'AmountLow' | 'ScheduleIndexOutOfBounds' | 'InvalidScheduleParams';
+  }
+
+  /** @name PalletMultisigMultisig (515) */
+  export interface PalletMultisigMultisig extends Struct {
+    readonly when: PalletMultisigTimepoint;
+    readonly deposit: u128;
+    readonly depositor: AccountId32;
+    readonly approvals: Vec<AccountId32>;
+  }
+
+  /** @name PalletMultisigError (517) */
+  export interface PalletMultisigError extends Enum {
+    readonly isMinimumThreshold: boolean;
+    readonly isAlreadyApproved: boolean;
+    readonly isNoApprovalsNeeded: boolean;
+    readonly isTooFewSignatories: boolean;
+    readonly isTooManySignatories: boolean;
+    readonly isSignatoriesOutOfOrder: boolean;
+    readonly isSenderInSignatories: boolean;
+    readonly isNotFound: boolean;
+    readonly isNotOwner: boolean;
+    readonly isNoTimepoint: boolean;
+    readonly isWrongTimepoint: boolean;
+    readonly isUnexpectedTimepoint: boolean;
+    readonly isMaxWeightTooLow: boolean;
+    readonly isAlreadyStored: boolean;
+    readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
+  }
+
+  /** @name PalletCouncilCouncilStageUpdate (518) */
+  export interface PalletCouncilCouncilStageUpdate extends Struct {
+    readonly stage: PalletCouncilCouncilStage;
+    readonly changedAt: u32;
+  }
+
+  /** @name PalletCouncilCouncilStage (519) */
+  export interface PalletCouncilCouncilStage extends Enum {
+    readonly isAnnouncing: boolean;
+    readonly asAnnouncing: PalletCouncilCouncilStageAnnouncing;
+    readonly isElection: boolean;
+    readonly asElection: PalletCouncilCouncilStageElection;
+    readonly isIdle: boolean;
+    readonly asIdle: PalletCouncilCouncilStageIdle;
+    readonly type: 'Announcing' | 'Election' | 'Idle';
+  }
+
+  /** @name PalletCouncilCouncilStageAnnouncing (520) */
+  export interface PalletCouncilCouncilStageAnnouncing extends Struct {
+    readonly candidatesCount: u32;
+    readonly endsAt: u32;
+  }
+
+  /** @name PalletCouncilCouncilStageElection (521) */
+  export interface PalletCouncilCouncilStageElection extends Struct {
+    readonly candidatesCount: u32;
+  }
+
+  /** @name PalletCouncilCouncilStageIdle (522) */
+  export interface PalletCouncilCouncilStageIdle extends Struct {
+    readonly endsAt: u32;
+  }
+
+  /** @name PalletCouncilCouncilMember (524) */
+  export interface PalletCouncilCouncilMember extends Struct {
+    readonly stakingAccountId: AccountId32;
+    readonly rewardAccountId: AccountId32;
+    readonly membershipId: u64;
+    readonly stake: u128;
+    readonly lastPaymentBlock: u32;
+    readonly unpaidReward: u128;
+  }
+
+  /** @name PalletCouncilCandidate (526) */
+  export interface PalletCouncilCandidate extends Struct {
+    readonly stakingAccountId: AccountId32;
+    readonly rewardAccountId: AccountId32;
+    readonly cycleId: u64;
+    readonly stake: u128;
+    readonly votePower: u128;
+    readonly noteHash: Option<H256>;
+  }
+
+  /** @name PalletCouncilError (527) */
+  export interface PalletCouncilError extends Enum {
+    readonly isArithmeticError: boolean;
+    readonly isBadOrigin: boolean;
+    readonly isCantCandidateNow: boolean;
+    readonly isCantReleaseStakeNow: boolean;
+    readonly isCandidacyStakeTooLow: boolean;
+    readonly isCantCandidateTwice: boolean;
+    readonly isConflictingStake: boolean;
+    readonly isStakeStillNeeded: boolean;
+    readonly isNoStake: boolean;
+    readonly isInsufficientBalanceForStaking: boolean;
+    readonly isCantVoteForYourself: boolean;
+    readonly isMemberIdNotMatchAccount: boolean;
+    readonly isInvalidAccountToStakeReuse: boolean;
+    readonly isNotCandidatingNow: boolean;
+    readonly isCantWithdrawCandidacyNow: boolean;
+    readonly isNotCouncilor: boolean;
+    readonly isInsufficientFundsForFundingRequest: boolean;
+    readonly isZeroBalanceFundRequest: boolean;
+    readonly isRepeatedFundRequestAccount: boolean;
+    readonly isEmptyFundingRequests: boolean;
+    readonly isInsufficientTokensForFunding: boolean;
+    readonly isZeroTokensFunding: boolean;
+    readonly isCandidateDoesNotExist: boolean;
+    readonly isInsufficientBalanceForTransfer: boolean;
+    readonly type: 'ArithmeticError' | 'BadOrigin' | 'CantCandidateNow' | 'CantReleaseStakeNow' | 'CandidacyStakeTooLow' | 'CantCandidateTwice' | 'ConflictingStake' | 'StakeStillNeeded' | 'NoStake' | 'InsufficientBalanceForStaking' | 'CantVoteForYourself' | 'MemberIdNotMatchAccount' | 'InvalidAccountToStakeReuse' | 'NotCandidatingNow' | 'CantWithdrawCandidacyNow' | 'NotCouncilor' | 'InsufficientFundsForFundingRequest' | 'ZeroBalanceFundRequest' | 'RepeatedFundRequestAccount' | 'EmptyFundingRequests' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'CandidateDoesNotExist' | 'InsufficientBalanceForTransfer';
+  }
+
+  /** @name PalletReferendumReferendumStage (528) */
+  export interface PalletReferendumReferendumStage extends Enum {
+    readonly isInactive: boolean;
+    readonly isVoting: boolean;
+    readonly asVoting: PalletReferendumReferendumStageVoting;
+    readonly isRevealing: boolean;
+    readonly asRevealing: PalletReferendumReferendumStageRevealing;
+    readonly type: 'Inactive' | 'Voting' | 'Revealing';
+  }
+
+  /** @name PalletReferendumReferendumStageVoting (530) */
+  export interface PalletReferendumReferendumStageVoting extends Struct {
+    readonly started: u32;
+    readonly winningTargetCount: u32;
+    readonly currentCycleId: u64;
+    readonly endsAt: u32;
+  }
+
+  /** @name PalletReferendumReferendumStageRevealing (531) */
+  export interface PalletReferendumReferendumStageRevealing extends Struct {
+    readonly started: u32;
+    readonly winningTargetCount: u32;
+    readonly intermediateWinners: Vec<PalletReferendumOptionResult>;
+    readonly currentCycleId: u64;
+    readonly endsAt: u32;
+  }
+
+  /** @name PalletReferendumCastVote (532) */
+  export interface PalletReferendumCastVote extends Struct {
+    readonly commitment: H256;
+    readonly cycleId: u64;
+    readonly stake: u128;
+    readonly voteFor: Option<u64>;
+  }
+
+  /** @name PalletReferendumError (533) */
+  export interface PalletReferendumError extends Enum {
+    readonly isBadOrigin: boolean;
+    readonly isReferendumNotRunning: boolean;
+    readonly isRevealingNotInProgress: boolean;
+    readonly isConflictStakesOnAccount: boolean;
+    readonly isInsufficientBalanceToStake: boolean;
+    readonly isInsufficientStake: boolean;
+    readonly isInvalidReveal: boolean;
+    readonly isInvalidVote: boolean;
+    readonly isVoteNotExisting: boolean;
+    readonly isAlreadyVotedThisCycle: boolean;
+    readonly isUnstakingVoteInSameCycle: boolean;
+    readonly isSaltTooLong: boolean;
+    readonly isUnstakingForbidden: boolean;
+    readonly isAccountAlreadyOptedOutOfVoting: boolean;
+    readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden' | 'AccountAlreadyOptedOutOfVoting';
+  }
+
+  /** @name PalletMembershipMembershipObject (534) */
+  export interface PalletMembershipMembershipObject extends Struct {
+    readonly handleHash: H256;
+    readonly rootAccount: AccountId32;
+    readonly controllerAccount: AccountId32;
+    readonly verified: bool;
+    readonly invites: u32;
+  }
+
+  /** @name PalletMembershipStakingAccountMemberBinding (535) */
+  export interface PalletMembershipStakingAccountMemberBinding extends Struct {
+    readonly memberId: u64;
+    readonly confirmed: bool;
+  }
+
+  /** @name PalletMembershipError (536) */
+  export interface PalletMembershipError extends Enum {
+    readonly isNotEnoughBalanceToBuyMembership: boolean;
+    readonly isControllerAccountRequired: boolean;
+    readonly isRootAccountRequired: boolean;
+    readonly isUnsignedOrigin: boolean;
+    readonly isMemberProfileNotFound: boolean;
+    readonly isHandleAlreadyRegistered: boolean;
+    readonly isHandleMustBeProvidedDuringRegistration: boolean;
+    readonly isReferrerIsNotMember: boolean;
+    readonly isCannotTransferInvitesForNotMember: boolean;
+    readonly isNotEnoughInvites: boolean;
+    readonly isWorkingGroupLeaderNotSet: boolean;
+    readonly isStakingAccountIsAlreadyRegistered: boolean;
+    readonly isStakingAccountDoesntExist: boolean;
+    readonly isStakingAccountAlreadyConfirmed: boolean;
+    readonly isWorkingGroupBudgetIsNotSufficientForInviting: boolean;
+    readonly isConflictingLock: boolean;
+    readonly isCannotExceedReferralCutPercentLimit: boolean;
+    readonly isConflictStakesOnAccount: boolean;
+    readonly isInsufficientBalanceToCoverStake: boolean;
+    readonly isGifLockExceedsCredit: boolean;
+    readonly isInsufficientBalanceToGift: boolean;
+    readonly isInsufficientBalanceToCoverPayment: boolean;
+    readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift' | 'InsufficientBalanceToCoverPayment';
+  }
+
+  /** @name PalletForumCategory (537) */
+  export interface PalletForumCategory extends Struct {
+    readonly titleHash: H256;
+    readonly descriptionHash: H256;
+    readonly archived: bool;
+    readonly numDirectSubcategories: u32;
+    readonly numDirectThreads: u32;
+    readonly numDirectModerators: u32;
+    readonly parentCategoryId: Option<u64>;
+    readonly stickyThreadIds: BTreeSet<u64>;
+  }
+
+  /** @name PalletForumThread (539) */
+  export interface PalletForumThread extends Struct {
+    readonly categoryId: u64;
+    readonly authorId: u64;
+    readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
+    readonly numberOfEditablePosts: u64;
+  }
+
+  /** @name PalletForumPost (540) */
+  export interface PalletForumPost extends Struct {
+    readonly threadId: u64;
+    readonly textHash: H256;
+    readonly authorId: u64;
+    readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
+    readonly lastEdited: u32;
+  }
+
+  /** @name PalletForumError (541) */
+  export interface PalletForumError extends Enum {
+    readonly isArithmeticError: boolean;
+    readonly isOriginNotForumLead: boolean;
+    readonly isForumUserIdNotMatchAccount: boolean;
+    readonly isModeratorIdNotMatchAccount: boolean;
+    readonly isAccountDoesNotMatchThreadAuthor: boolean;
+    readonly isThreadDoesNotExist: boolean;
+    readonly isModeratorModerateOriginCategory: boolean;
+    readonly isModeratorModerateDestinationCategory: boolean;
+    readonly isThreadMoveInvalid: boolean;
+    readonly isThreadNotBeingUpdated: boolean;
+    readonly isInsufficientBalanceForThreadCreation: boolean;
+    readonly isCannotDeleteThreadWithOutstandingPosts: boolean;
+    readonly isPostDoesNotExist: boolean;
+    readonly isAccountDoesNotMatchPostAuthor: boolean;
+    readonly isInsufficientBalanceForPost: boolean;
+    readonly isCategoryNotBeingUpdated: boolean;
+    readonly isAncestorCategoryImmutable: boolean;
+    readonly isMaxValidCategoryDepthExceeded: boolean;
+    readonly isCategoryDoesNotExist: boolean;
+    readonly isCategoryModeratorDoesNotExist: boolean;
+    readonly isCategoryNotEmptyThreads: boolean;
+    readonly isCategoryNotEmptyCategories: boolean;
+    readonly isModeratorCantDeleteCategory: boolean;
+    readonly isModeratorCantUpdateCategory: boolean;
+    readonly isMapSizeLimit: boolean;
+    readonly isPathLengthShouldBeGreaterThanZero: boolean;
+    readonly isMaxNumberOfStickiedThreadsExceeded: boolean;
+    readonly type: 'ArithmeticError' | 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero' | 'MaxNumberOfStickiedThreadsExceeded';
+  }
+
+  /** @name PalletConstitutionConstitutionInfo (542) */
+  export interface PalletConstitutionConstitutionInfo extends Struct {
+    readonly textHash: H256;
+  }
+
+  /** @name PalletBountyBountyRecord (543) */
+  export interface PalletBountyBountyRecord extends Struct {
+    readonly creationParams: PalletBountyBountyParametersBoundedBTreeSet;
+    readonly totalFunding: u128;
+    readonly milestone: PalletBountyBountyMilestone;
+    readonly activeWorkEntryCount: u32;
+    readonly hasUnpaidOracleReward: bool;
+  }
+
+  /** @name PalletBountyBountyParametersBoundedBTreeSet (545) */
+  export interface PalletBountyBountyParametersBoundedBTreeSet extends Struct {
+    readonly oracle: PalletBountyBountyActor;
+    readonly contractType: PalletBountyAssuranceContractTypeBoundedBTreeSet;
+    readonly creator: PalletBountyBountyActor;
+    readonly cherry: u128;
+    readonly oracleReward: u128;
+    readonly entrantStake: u128;
+    readonly fundingType: PalletBountyFundingType;
+  }
+
+  /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (546) */
+  export interface PalletBountyAssuranceContractTypeBoundedBTreeSet extends Enum {
+    readonly isOpen: boolean;
+    readonly isClosed: boolean;
+    readonly asClosed: BTreeSet<u64>;
+    readonly type: 'Open' | 'Closed';
+  }
+
+  /** @name PalletBountyBountyMilestone (547) */
+  export interface PalletBountyBountyMilestone extends Enum {
+    readonly isCreated: boolean;
+    readonly asCreated: {
+      readonly createdAt: u32;
+      readonly hasContributions: bool;
+    } & Struct;
+    readonly isBountyMaxFundingReached: boolean;
+    readonly isWorkSubmitted: boolean;
+    readonly isTerminated: boolean;
+    readonly isJudgmentSubmitted: boolean;
+    readonly asJudgmentSubmitted: {
+      readonly successfulBounty: bool;
+    } & Struct;
+    readonly type: 'Created' | 'BountyMaxFundingReached' | 'WorkSubmitted' | 'Terminated' | 'JudgmentSubmitted';
+  }
+
+  /** @name PalletBountyContribution (549) */
+  export interface PalletBountyContribution extends Struct {
+    readonly amount: u128;
+    readonly funderStateBloatBondAmount: u128;
+  }
+
+  /** @name PalletBountyEntryRecord (550) */
+  export interface PalletBountyEntryRecord extends Struct {
+    readonly memberId: u64;
+    readonly stakingAccountId: AccountId32;
+    readonly submittedAt: u32;
+    readonly workSubmitted: bool;
+  }
+
+  /** @name PalletBountyError (551) */
+  export interface PalletBountyError extends Enum {
+    readonly isArithmeticError: boolean;
+    readonly isMinFundingAmountCannotBeGreaterThanMaxAmount: boolean;
+    readonly isBountyDoesntExist: boolean;
+    readonly isSwitchOracleOriginIsRoot: boolean;
+    readonly isInvalidStageUnexpectedFunding: boolean;
+    readonly isInvalidStageUnexpectedNoFundingContributed: boolean;
+    readonly isInvalidStageUnexpectedCancelled: boolean;
+    readonly isInvalidStageUnexpectedWorkSubmission: boolean;
+    readonly isInvalidStageUnexpectedJudgment: boolean;
+    readonly isInvalidStageUnexpectedSuccessfulBountyWithdrawal: boolean;
+    readonly isInvalidStageUnexpectedFailedBountyWithdrawal: boolean;
+    readonly isInsufficientBalanceForBounty: boolean;
+    readonly isNoBountyContributionFound: boolean;
+    readonly isInsufficientBalanceForStake: boolean;
+    readonly isConflictingStakes: boolean;
+    readonly isWorkEntryDoesntExist: boolean;
+    readonly isCherryLessThenMinimumAllowed: boolean;
+    readonly isCannotSubmitWorkToClosedContractBounty: boolean;
+    readonly isClosedContractMemberListIsEmpty: boolean;
+    readonly isClosedContractMemberListIsTooLarge: boolean;
+    readonly isClosedContractMemberNotFound: boolean;
+    readonly isInvalidOracleMemberId: boolean;
+    readonly isInvalidStakingAccountForMember: boolean;
+    readonly isZeroWinnerReward: boolean;
+    readonly isTotalRewardShouldBeEqualToTotalFunding: boolean;
+    readonly isEntrantStakeIsLessThanMininum: boolean;
+    readonly isFundingAmountCannotBeZero: boolean;
+    readonly isFundingPeriodCannotBeZero: boolean;
+    readonly isWinnerShouldHasWorkSubmission: boolean;
+    readonly isInvalidContributorActorSpecified: boolean;
+    readonly isInvalidOracleActorSpecified: boolean;
+    readonly isInvalidEntrantWorkerSpecified: boolean;
+    readonly isInvalidCreatorActorSpecified: boolean;
+    readonly isWorkEntryDoesntBelongToWorker: boolean;
+    readonly isOracleRewardAlreadyWithdrawn: boolean;
+    readonly type: 'ArithmeticError' | 'MinFundingAmountCannotBeGreaterThanMaxAmount' | 'BountyDoesntExist' | 'SwitchOracleOriginIsRoot' | 'InvalidStageUnexpectedFunding' | 'InvalidStageUnexpectedNoFundingContributed' | 'InvalidStageUnexpectedCancelled' | 'InvalidStageUnexpectedWorkSubmission' | 'InvalidStageUnexpectedJudgment' | 'InvalidStageUnexpectedSuccessfulBountyWithdrawal' | 'InvalidStageUnexpectedFailedBountyWithdrawal' | 'InsufficientBalanceForBounty' | 'NoBountyContributionFound' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'WorkEntryDoesntExist' | 'CherryLessThenMinimumAllowed' | 'CannotSubmitWorkToClosedContractBounty' | 'ClosedContractMemberListIsEmpty' | 'ClosedContractMemberListIsTooLarge' | 'ClosedContractMemberNotFound' | 'InvalidOracleMemberId' | 'InvalidStakingAccountForMember' | 'ZeroWinnerReward' | 'TotalRewardShouldBeEqualToTotalFunding' | 'EntrantStakeIsLessThanMininum' | 'FundingAmountCannotBeZero' | 'FundingPeriodCannotBeZero' | 'WinnerShouldHasWorkSubmission' | 'InvalidContributorActorSpecified' | 'InvalidOracleActorSpecified' | 'InvalidEntrantWorkerSpecified' | 'InvalidCreatorActorSpecified' | 'WorkEntryDoesntBelongToWorker' | 'OracleRewardAlreadyWithdrawn';
+  }
+
+  /** @name PalletContentVideoRecord (553) */
+  export interface PalletContentVideoRecord extends Struct {
+    readonly inChannel: u64;
+    readonly nftStatus: Option<PalletContentNftTypesOwnedNft>;
+    readonly dataObjects: BTreeSet<u64>;
+    readonly videoStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
+  }
+
+  /** @name PalletContentNftTypesOwnedNft (554) */
+  export interface PalletContentNftTypesOwnedNft extends Struct {
+    readonly owner: PalletContentNftTypesNftOwner;
+    readonly transactionalStatus: PalletContentNftTypesTransactionalStatusRecord;
+    readonly creatorRoyalty: Option<Perbill>;
+    readonly openAuctionsNonce: u64;
+  }
+
+  /** @name PalletContentNftTypesTransactionalStatusRecord (555) */
+  export interface PalletContentNftTypesTransactionalStatusRecord extends Enum {
+    readonly isIdle: boolean;
+    readonly isInitiatedOfferToMember: boolean;
+    readonly asInitiatedOfferToMember: ITuple<[u64, Option<u128>]>;
+    readonly isEnglishAuction: boolean;
+    readonly asEnglishAuction: PalletContentNftTypesEnglishAuctionRecord;
+    readonly isOpenAuction: boolean;
+    readonly asOpenAuction: PalletContentNftTypesOpenAuctionRecord;
+    readonly isBuyNow: boolean;
+    readonly asBuyNow: u128;
+    readonly type: 'Idle' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction' | 'BuyNow';
+  }
+
+  /** @name PalletContentNftTypesEnglishAuctionRecord (556) */
+  export interface PalletContentNftTypesEnglishAuctionRecord extends Struct {
+    readonly startingPrice: u128;
+    readonly buyNowPrice: Option<u128>;
+    readonly whitelist: BTreeSet<u64>;
+    readonly end: u32;
+    readonly start: u32;
+    readonly extensionPeriod: u32;
+    readonly minBidStep: u128;
+    readonly topBid: Option<PalletContentNftTypesEnglishAuctionBid>;
+  }
+
+  /** @name PalletContentNftTypesEnglishAuctionBid (559) */
+  export interface PalletContentNftTypesEnglishAuctionBid extends Struct {
+    readonly amount: u128;
+    readonly bidderId: u64;
+  }
+
+  /** @name PalletContentNftTypesOpenAuctionRecord (560) */
+  export interface PalletContentNftTypesOpenAuctionRecord extends Struct {
+    readonly startingPrice: u128;
+    readonly buyNowPrice: Option<u128>;
+    readonly whitelist: BTreeSet<u64>;
+    readonly bidLockDuration: u32;
+    readonly auctionId: u64;
+    readonly start: u32;
+  }
+
+  /** @name PalletContentNftTypesNftOwner (561) */
+  export interface PalletContentNftTypesNftOwner extends Enum {
+    readonly isChannelOwner: boolean;
+    readonly isMember: boolean;
+    readonly asMember: u64;
+    readonly type: 'ChannelOwner' | 'Member';
+  }
+
+  /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (564) */
+  export interface PalletContentPermissionsCuratorGroupCuratorGroupRecord extends Struct {
+    readonly curators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
+    readonly active: bool;
+    readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
+  }
+
+  /** @name PalletContentNftTypesOpenAuctionBidRecord (571) */
+  export interface PalletContentNftTypesOpenAuctionBidRecord extends Struct {
+    readonly amount: u128;
+    readonly madeAtBlock: u32;
+    readonly auctionId: u64;
+  }
+
+  /** @name PalletContentErrorsError (572) */
+  export interface PalletContentErrorsError extends Enum {
+    readonly isChannelStateBloatBondChanged: boolean;
+    readonly isVideoStateBloatBondChanged: boolean;
+    readonly isMinCashoutValueTooLow: boolean;
+    readonly isMaxCashoutValueTooHigh: boolean;
+    readonly isMaxNumberOfChannelCollaboratorsExceeded: boolean;
+    readonly isMaxNumberOfChannelAssetsExceeded: boolean;
+    readonly isMaxNumberOfVideoAssetsExceeded: boolean;
+    readonly isMaxNumberOfChannelAgentPermissionsExceeded: boolean;
+    readonly isMaxNumberOfPausedFeaturesPerChannelExceeded: boolean;
+    readonly isInvalidChannelBagWitnessProvided: boolean;
+    readonly isInvalidStorageBucketsNumWitnessProvided: boolean;
+    readonly isMissingStorageBucketsNumWitness: boolean;
+    readonly isChannelOwnerMemberDoesNotExist: boolean;
+    readonly isChannelOwnerCuratorGroupDoesNotExist: boolean;
+    readonly isChannelStateBloatBondBelowExistentialDeposit: boolean;
+    readonly isNumberOfAssetsToRemoveIsZero: boolean;
+    readonly isCuratorIsNotAMemberOfGivenCuratorGroup: boolean;
+    readonly isCuratorIsAlreadyAMemberOfGivenCuratorGroup: boolean;
+    readonly isCuratorGroupDoesNotExist: boolean;
+    readonly isCuratorsPerGroupLimitReached: boolean;
+    readonly isCuratorGroupIsNotActive: boolean;
+    readonly isCuratorIdInvalid: boolean;
+    readonly isLeadAuthFailed: boolean;
+    readonly isMemberAuthFailed: boolean;
+    readonly isCuratorAuthFailed: boolean;
+    readonly isBadOrigin: boolean;
+    readonly isActorNotAuthorized: boolean;
+    readonly isCategoryDoesNotExist: boolean;
+    readonly isChannelDoesNotExist: boolean;
+    readonly isVideoDoesNotExist: boolean;
+    readonly isVideoInSeason: boolean;
+    readonly isActorCannotBeLead: boolean;
+    readonly isActorCannotOwnChannel: boolean;
+    readonly isNftAlreadyOwnedByChannel: boolean;
+    readonly isNftAlreadyExists: boolean;
+    readonly isNftDoesNotExist: boolean;
+    readonly isOverflowOrUnderflowHappened: boolean;
+    readonly isDoesNotOwnNft: boolean;
+    readonly isRoyaltyUpperBoundExceeded: boolean;
+    readonly isRoyaltyLowerBoundExceeded: boolean;
+    readonly isAuctionDurationUpperBoundExceeded: boolean;
+    readonly isAuctionDurationLowerBoundExceeded: boolean;
+    readonly isExtensionPeriodUpperBoundExceeded: boolean;
+    readonly isExtensionPeriodLowerBoundExceeded: boolean;
+    readonly isBidLockDurationUpperBoundExceeded: boolean;
+    readonly isBidLockDurationLowerBoundExceeded: boolean;
+    readonly isStartingPriceUpperBoundExceeded: boolean;
+    readonly isStartingPriceLowerBoundExceeded: boolean;
+    readonly isAuctionBidStepUpperBoundExceeded: boolean;
+    readonly isAuctionBidStepLowerBoundExceeded: boolean;
+    readonly isInsufficientBalance: boolean;
+    readonly isBidStepConstraintViolated: boolean;
+    readonly isInvalidBidAmountSpecified: boolean;
+    readonly isStartingPriceConstraintViolated: boolean;
+    readonly isActionHasBidsAlready: boolean;
+    readonly isNftIsNotIdle: boolean;
+    readonly isPendingOfferDoesNotExist: boolean;
+    readonly isRewardAccountIsNotSet: boolean;
+    readonly isActorIsNotBidder: boolean;
+    readonly isAuctionCannotBeCompleted: boolean;
+    readonly isBidDoesNotExist: boolean;
+    readonly isBidIsForPastAuction: boolean;
+    readonly isStartsAtLowerBoundExceeded: boolean;
+    readonly isStartsAtUpperBoundExceeded: boolean;
+    readonly isAuctionDidNotStart: boolean;
+    readonly isNotInAuctionState: boolean;
+    readonly isMemberIsNotAllowedToParticipate: boolean;
+    readonly isMemberProfileNotFound: boolean;
+    readonly isNftNotInBuyNowState: boolean;
+    readonly isInvalidBuyNowWitnessPriceProvided: boolean;
+    readonly isIsNotOpenAuctionType: boolean;
+    readonly isIsNotEnglishAuctionType: boolean;
+    readonly isBidLockDurationIsNotExpired: boolean;
+    readonly isNftAuctionIsAlreadyExpired: boolean;
+    readonly isBuyNowMustBeGreaterThanStartingPrice: boolean;
+    readonly isTargetMemberDoesNotExist: boolean;
+    readonly isInvalidNftOfferWitnessPriceProvided: boolean;
+    readonly isMaxAuctionWhiteListLengthUpperBoundExceeded: boolean;
+    readonly isWhitelistHasOnlyOneMember: boolean;
+    readonly isWhitelistedMemberDoesNotExist: boolean;
+    readonly isNftNonChannelOwnerDoesNotExist: boolean;
+    readonly isExtensionPeriodIsGreaterThenAuctionDuration: boolean;
+    readonly isNoAssetsSpecified: boolean;
+    readonly isInvalidAssetsProvided: boolean;
+    readonly isChannelContainsVideos: boolean;
+    readonly isChannelContainsAssets: boolean;
+    readonly isInvalidBagSizeSpecified: boolean;
+    readonly isMigrationNotFinished: boolean;
+    readonly isReplyDoesNotExist: boolean;
+    readonly isUnsufficientBalance: boolean;
+    readonly isInsufficientTreasuryBalance: boolean;
+    readonly isInvalidMemberProvided: boolean;
+    readonly isActorNotAMember: boolean;
+    readonly isPaymentProofVerificationFailed: boolean;
+    readonly isCashoutAmountExceedsMaximumAmount: boolean;
+    readonly isCashoutAmountBelowMinimumAmount: boolean;
+    readonly isWithdrawalAmountExceedsChannelAccountWithdrawableBalance: boolean;
+    readonly isWithdrawFromChannelAmountIsZero: boolean;
+    readonly isChannelCashoutsDisabled: boolean;
+    readonly isMinCashoutAllowedExceedsMaxCashoutAllowed: boolean;
+    readonly isCuratorModerationActionNotAllowed: boolean;
+    readonly isMaxCuratorPermissionsPerLevelExceeded: boolean;
+    readonly isCuratorGroupMaxPermissionsByLevelMapSizeExceeded: boolean;
+    readonly isChannelFeaturePaused: boolean;
+    readonly isChannelBagMissing: boolean;
+    readonly isAssetsToRemoveBeyondEntityAssetsSet: boolean;
+    readonly isInvalidVideoDataObjectsCountProvided: boolean;
+    readonly isInvalidChannelTransferStatus: boolean;
+    readonly isInvalidChannelTransferAcceptor: boolean;
+    readonly isInvalidChannelTransferCommitmentParams: boolean;
+    readonly isChannelAgentInsufficientPermissions: boolean;
+    readonly isInvalidChannelOwner: boolean;
+    readonly isZeroReward: boolean;
+    readonly isInsufficientBalanceForTransfer: boolean;
+    readonly isInsufficientBalanceForChannelCreation: boolean;
+    readonly isInsufficientBalanceForVideoCreation: boolean;
+    readonly isInsufficientCouncilBudget: boolean;
+    readonly isGlobalNftDailyLimitExceeded: boolean;
+    readonly isGlobalNftWeeklyLimitExceeded: boolean;
+    readonly isChannelNftDailyLimitExceeded: boolean;
+    readonly isChannelNftWeeklyLimitExceeded: boolean;
+    readonly isCreatorTokenAlreadyIssued: boolean;
+    readonly isCreatorTokenNotIssued: boolean;
+    readonly isMemberIdCouldNotBeDerivedFromActor: boolean;
+    readonly isCannotWithdrawFromChannelWithCreatorTokenIssued: boolean;
+    readonly isPatronageCanOnlyBeClaimedForMemberOwnedChannels: boolean;
+    readonly isChannelTransfersBlockedDuringRevenueSplits: boolean;
+    readonly isChannelTransfersBlockedDuringTokenSales: boolean;
+    readonly isChannelTransfersBlockedDuringActiveAmm: boolean;
+    readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales' | 'ChannelTransfersBlockedDuringActiveAmm';
+  }
+
+  /** @name PalletStorageBagRecord (573) */
+  export interface PalletStorageBagRecord extends Struct {
+    readonly storedBy: BTreeSet<u64>;
+    readonly distributedBy: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+    readonly objectsTotalSize: u64;
+    readonly objectsNumber: u64;
+  }
+
+  /** @name PalletStorageStorageBucketRecord (576) */
+  export interface PalletStorageStorageBucketRecord extends Struct {
+    readonly operatorStatus: PalletStorageStorageBucketOperatorStatus;
+    readonly acceptingNewBags: bool;
+    readonly voucher: PalletStorageVoucher;
+    readonly assignedBags: u64;
+  }
+
+  /** @name PalletStorageStorageBucketOperatorStatus (577) */
+  export interface PalletStorageStorageBucketOperatorStatus extends Enum {
+    readonly isMissing: boolean;
+    readonly isInvitedStorageWorker: boolean;
+    readonly asInvitedStorageWorker: u64;
+    readonly isStorageWorker: boolean;
+    readonly asStorageWorker: ITuple<[u64, AccountId32]>;
+    readonly type: 'Missing' | 'InvitedStorageWorker' | 'StorageWorker';
+  }
+
+  /** @name PalletStorageDynamicBagCreationPolicy (579) */
+  export interface PalletStorageDynamicBagCreationPolicy extends Struct {
+    readonly numberOfStorageBuckets: u32;
+    readonly families: BTreeMap<u64, u32>;
+  }
+
+  /** @name PalletStorageDataObject (582) */
+  export interface PalletStorageDataObject extends Struct {
+    readonly accepted: bool;
+    readonly stateBloatBond: PalletCommonBloatBondRepayableBloatBond;
+    readonly size_: u64;
+    readonly ipfsContentId: Bytes;
+  }
+
+  /** @name PalletStorageDistributionBucketFamilyRecord (583) */
+  export interface PalletStorageDistributionBucketFamilyRecord extends Struct {
+    readonly nextDistributionBucketIndex: u64;
+  }
+
+  /** @name PalletStorageDistributionBucketRecord (584) */
+  export interface PalletStorageDistributionBucketRecord extends Struct {
+    readonly acceptingNewBags: bool;
+    readonly distributing: bool;
+    readonly pendingInvitations: BTreeSet<u64>;
+    readonly operators: BTreeSet<u64>;
+    readonly assignedBags: u64;
+  }
+
+  /** @name PalletStorageError (587) */
+  export interface PalletStorageError extends Enum {
+    readonly isArithmeticError: boolean;
+    readonly isInvalidCidLength: boolean;
+    readonly isNoObjectsOnUpload: boolean;
+    readonly isStorageBucketDoesntExist: boolean;
+    readonly isStorageBucketIsNotBoundToBag: boolean;
+    readonly isStorageBucketIsBoundToBag: boolean;
+    readonly isNoStorageBucketInvitation: boolean;
+    readonly isStorageProviderAlreadySet: boolean;
+    readonly isStorageProviderMustBeSet: boolean;
+    readonly isDifferentStorageProviderInvited: boolean;
+    readonly isInvitedStorageProvider: boolean;
+    readonly isStorageBucketIdCollectionsAreEmpty: boolean;
+    readonly isStorageBucketsNumberViolatesDynamicBagCreationPolicy: boolean;
+    readonly isDistributionBucketsViolatesDynamicBagCreationPolicy: boolean;
+    readonly isEmptyContentId: boolean;
+    readonly isZeroObjectSize: boolean;
+    readonly isInvalidStateBloatBondSourceAccount: boolean;
+    readonly isInvalidStorageProvider: boolean;
+    readonly isInsufficientBalance: boolean;
+    readonly isDataObjectDoesntExist: boolean;
+    readonly isUploadingBlocked: boolean;
+    readonly isDataObjectIdCollectionIsEmpty: boolean;
+    readonly isSourceAndDestinationBagsAreEqual: boolean;
+    readonly isDataObjectBlacklisted: boolean;
+    readonly isBlacklistSizeLimitExceeded: boolean;
+    readonly isVoucherMaxObjectSizeLimitExceeded: boolean;
+    readonly isVoucherMaxObjectNumberLimitExceeded: boolean;
+    readonly isStorageBucketObjectNumberLimitReached: boolean;
+    readonly isStorageBucketObjectSizeLimitReached: boolean;
+    readonly isInsufficientTreasuryBalance: boolean;
+    readonly isCannotDeleteNonEmptyStorageBucket: boolean;
+    readonly isDataObjectIdParamsAreEmpty: boolean;
+    readonly isStorageBucketsPerBagLimitTooLow: boolean;
+    readonly isStorageBucketsPerBagLimitTooHigh: boolean;
+    readonly isStorageBucketPerBagLimitExceeded: boolean;
+    readonly isStorageBucketDoesntAcceptNewBags: boolean;
+    readonly isDynamicBagExists: boolean;
+    readonly isDynamicBagDoesntExist: boolean;
+    readonly isStorageProviderOperatorDoesntExist: boolean;
+    readonly isDataSizeFeeChanged: boolean;
+    readonly isDataObjectStateBloatBondChanged: boolean;
+    readonly isCannotDeleteNonEmptyDynamicBag: boolean;
+    readonly isMaxDistributionBucketFamilyNumberLimitExceeded: boolean;
+    readonly isDistributionBucketFamilyDoesntExist: boolean;
+    readonly isDistributionBucketDoesntExist: boolean;
+    readonly isDistributionBucketIdCollectionsAreEmpty: boolean;
+    readonly isDistributionBucketDoesntAcceptNewBags: boolean;
+    readonly isMaxDistributionBucketNumberPerBagLimitExceeded: boolean;
+    readonly isDistributionBucketIsNotBoundToBag: boolean;
+    readonly isDistributionBucketIsBoundToBag: boolean;
+    readonly isDistributionBucketsPerBagLimitTooLow: boolean;
+    readonly isDistributionBucketsPerBagLimitTooHigh: boolean;
+    readonly isDistributionProviderOperatorDoesntExist: boolean;
+    readonly isDistributionProviderOperatorAlreadyInvited: boolean;
+    readonly isDistributionProviderOperatorSet: boolean;
+    readonly isNoDistributionBucketInvitation: boolean;
+    readonly isMustBeDistributionProviderOperatorForBucket: boolean;
+    readonly isMaxNumberOfPendingInvitationsLimitForDistributionBucketReached: boolean;
+    readonly isMaxNumberOfOperatorsPerDistributionBucketReached: boolean;
+    readonly isDistributionFamilyBoundToBagCreationPolicy: boolean;
+    readonly isMaxDataObjectSizeExceeded: boolean;
+    readonly isInvalidTransactorAccount: boolean;
+    readonly isNumberOfStorageBucketsOutsideOfAllowedContraints: boolean;
+    readonly isNumberOfDistributionBucketsOutsideOfAllowedContraints: boolean;
+    readonly isCallDisabled: boolean;
+    readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'MaxNumberOfOperatorsPerDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints' | 'CallDisabled';
+  }
+
+  /** @name PalletProjectTokenAccountData (588) */
+  export interface PalletProjectTokenAccountData extends Struct {
+    readonly vestingSchedules: BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>;
+    readonly amount: u128;
+    readonly splitStakingStatus: Option<PalletProjectTokenStakingStatus>;
+    readonly bloatBond: PalletCommonBloatBondRepayableBloatBond;
+    readonly nextVestingTransferId: u64;
+    readonly lastSaleTotalPurchasedAmount: Option<ITuple<[u32, u128]>>;
+  }
+
+  /** @name PalletProjectTokenStakingStatus (589) */
+  export interface PalletProjectTokenStakingStatus extends Struct {
+    readonly splitId: u32;
+    readonly amount: u128;
+  }
+
+  /** @name PalletProjectTokenVestingSchedule (591) */
+  export interface PalletProjectTokenVestingSchedule extends Struct {
+    readonly linearVestingStartBlock: u32;
+    readonly linearVestingDuration: u32;
+    readonly cliffAmount: u128;
+    readonly postCliffTotalAmount: u128;
+    readonly burnedAmount: u128;
+  }
+
+  /** @name PalletProjectTokenTokenData (598) */
+  export interface PalletProjectTokenTokenData extends Struct {
+    readonly totalSupply: u128;
+    readonly tokensIssued: u128;
+    readonly nextSaleId: u32;
+    readonly sale: Option<PalletProjectTokenTokenSale>;
+    readonly transferPolicy: PalletProjectTokenTransferPolicy;
+    readonly symbol: H256;
+    readonly patronageInfo: PalletProjectTokenPatronageData;
+    readonly accountsNumber: u64;
+    readonly revenueSplitRate: Permill;
+    readonly revenueSplit: PalletProjectTokenRevenueSplitState;
+    readonly nextRevenueSplitId: u32;
+    readonly ammCurve: Option<PalletProjectTokenAmmCurve>;
+  }
+
+  /** @name PalletProjectTokenRevenueSplitState (599) */
+  export interface PalletProjectTokenRevenueSplitState extends Enum {
+    readonly isInactive: boolean;
+    readonly isActive: boolean;
+    readonly asActive: PalletProjectTokenRevenueSplitInfo;
+    readonly type: 'Inactive' | 'Active';
+  }
+
+  /** @name PalletProjectTokenRevenueSplitInfo (600) */
+  export interface PalletProjectTokenRevenueSplitInfo extends Struct {
+    readonly allocation: u128;
+    readonly timeline: PalletProjectTokenTimeline;
+    readonly dividendsClaimed: u128;
+  }
+
+  /** @name PalletProjectTokenTimeline (601) */
+  export interface PalletProjectTokenTimeline extends Struct {
+    readonly start: u32;
+    readonly duration: u32;
+  }
+
+  /** @name PalletProjectTokenPatronageData (603) */
+  export interface PalletProjectTokenPatronageData extends Struct {
+    readonly rate: Permill;
+    readonly unclaimedPatronageTallyAmount: u128;
+    readonly lastUnclaimedPatronageTallyBlock: u32;
+  }
+
+  /** @name PalletProjectTokenErrorsError (605) */
+  export interface PalletProjectTokenErrorsError extends Enum {
+    readonly isArithmeticError: boolean;
+    readonly isInsufficientTransferrableBalance: boolean;
+    readonly isTokenDoesNotExist: boolean;
+    readonly isAccountInformationDoesNotExist: boolean;
+    readonly isTransferDestinationMemberDoesNotExist: boolean;
+    readonly isMerkleProofVerificationFailure: boolean;
+    readonly isTokenSymbolAlreadyInUse: boolean;
+    readonly isInitialAllocationToNonExistingMember: boolean;
+    readonly isAccountAlreadyExists: boolean;
+    readonly isTooManyTransferOutputs: boolean;
+    readonly isTokenIssuanceNotInIdleState: boolean;
+    readonly isInsufficientJoyBalance: boolean;
+    readonly isJoyTransferSubjectToDusting: boolean;
+    readonly isAttemptToRemoveNonOwnedAccountUnderPermissionedMode: boolean;
+    readonly isAttemptToRemoveNonEmptyAccount: boolean;
+    readonly isCannotJoinWhitelistInPermissionlessMode: boolean;
+    readonly isCannotDeissueTokenWithOutstandingAccounts: boolean;
+    readonly isNoUpcomingSale: boolean;
+    readonly isNoActiveSale: boolean;
+    readonly isInsufficientBalanceForTokenPurchase: boolean;
+    readonly isNotEnoughTokensOnSale: boolean;
+    readonly isSaleStartingBlockInThePast: boolean;
+    readonly isSaleAccessProofRequired: boolean;
+    readonly isSaleAccessProofParticipantIsNotSender: boolean;
+    readonly isSalePurchaseCapExceeded: boolean;
+    readonly isMaxVestingSchedulesPerAccountPerTokenReached: boolean;
+    readonly isPreviousSaleNotFinalized: boolean;
+    readonly isNoTokensToRecover: boolean;
+    readonly isSaleDurationTooShort: boolean;
+    readonly isSaleDurationIsZero: boolean;
+    readonly isSaleUpperBoundQuantityIsZero: boolean;
+    readonly isSaleCapPerMemberIsZero: boolean;
+    readonly isSaleUnitPriceIsZero: boolean;
+    readonly isSalePurchaseAmountIsZero: boolean;
+    readonly isCannotInitSaleIfAmmIsActive: boolean;
+    readonly isRevenueSplitTimeToStartTooShort: boolean;
+    readonly isRevenueSplitDurationTooShort: boolean;
+    readonly isRevenueSplitAlreadyActiveForToken: boolean;
+    readonly isRevenueSplitNotActiveForToken: boolean;
+    readonly isRevenueSplitDidNotEnd: boolean;
+    readonly isRevenueSplitNotOngoing: boolean;
+    readonly isUserAlreadyParticipating: boolean;
+    readonly isInsufficientBalanceForSplitParticipation: boolean;
+    readonly isUserNotParticipantingInAnySplit: boolean;
+    readonly isCannotParticipateInSplitWithZeroAmount: boolean;
+    readonly isCannotIssueSplitWithZeroAllocationAmount: boolean;
+    readonly isCannotModifySupplyWhenRevenueSplitsAreActive: boolean;
+    readonly isRevenueSplitRateIsZero: boolean;
+    readonly isBurnAmountIsZero: boolean;
+    readonly isBurnAmountGreaterThanAccountTokensAmount: boolean;
+    readonly isNotInAmmState: boolean;
+    readonly isInvalidCurveParameters: boolean;
+    readonly isDeadlineExpired: boolean;
+    readonly isSlippageToleranceExceeded: boolean;
+    readonly isInsufficientTokenBalance: boolean;
+    readonly isOutstandingAmmProvidedSupplyTooLarge: boolean;
+    readonly isCurveSlopeParametersTooLow: boolean;
+    readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
+    readonly isYearlyPatronageRateLimitExceeded: boolean;
+    readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'TransferDestinationMemberDoesNotExist' | 'MerkleProofVerificationFailure' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TooManyTransferOutputs' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'CannotInitSaleIfAmmIsActive' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount' | 'NotInAmmState' | 'InvalidCurveParameters' | 'DeadlineExpired' | 'SlippageToleranceExceeded' | 'InsufficientTokenBalance' | 'OutstandingAmmProvidedSupplyTooLarge' | 'CurveSlopeParametersTooLow' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'YearlyPatronageRateLimitExceeded';
+  }
+
+  /** @name PalletProposalsEngineProposal (606) */
+  export interface PalletProposalsEngineProposal extends Struct {
+    readonly parameters: PalletProposalsEngineProposalParameters;
+    readonly proposerId: u64;
+    readonly activatedAt: u32;
+    readonly status: PalletProposalsEngineProposalStatusesProposalStatus;
+    readonly votingResults: PalletProposalsEngineVotingResults;
+    readonly exactExecutionBlock: Option<u32>;
+    readonly nrOfCouncilConfirmations: u32;
+    readonly stakingAccountId: Option<AccountId32>;
+  }
+
+  /** @name PalletProposalsEngineProposalParameters (607) */
+  export interface PalletProposalsEngineProposalParameters extends Struct {
+    readonly votingPeriod: u32;
+    readonly gracePeriod: u32;
+    readonly approvalQuorumPercentage: u32;
+    readonly approvalThresholdPercentage: u32;
+    readonly slashingQuorumPercentage: u32;
+    readonly slashingThresholdPercentage: u32;
+    readonly requiredStake: Option<u128>;
+    readonly constitutionality: u32;
+  }
+
+  /** @name PalletProposalsEngineVotingResults (608) */
+  export interface PalletProposalsEngineVotingResults extends Struct {
+    readonly abstentions: u32;
+    readonly approvals: u32;
+    readonly rejections: u32;
+    readonly slashes: u32;
+  }
+
+  /** @name PalletProposalsEngineError (611) */
+  export interface PalletProposalsEngineError extends Enum {
+    readonly isArithmeticError: boolean;
+    readonly isEmptyTitleProvided: boolean;
+    readonly isEmptyDescriptionProvided: boolean;
+    readonly isTitleIsTooLong: boolean;
+    readonly isDescriptionIsTooLong: boolean;
+    readonly isProposalNotFound: boolean;
+    readonly isProposalFinalized: boolean;
+    readonly isAlreadyVoted: boolean;
+    readonly isNotAuthor: boolean;
+    readonly isMaxActiveProposalNumberExceeded: boolean;
+    readonly isEmptyStake: boolean;
+    readonly isStakeShouldBeEmpty: boolean;
+    readonly isStakeDiffersFromRequired: boolean;
+    readonly isInvalidParameterApprovalThreshold: boolean;
+    readonly isInvalidParameterSlashingThreshold: boolean;
+    readonly isRequireRootOrigin: boolean;
+    readonly isProposalHasVotes: boolean;
+    readonly isZeroExactExecutionBlock: boolean;
+    readonly isInvalidExactExecutionBlock: boolean;
+    readonly isInsufficientBalanceForStake: boolean;
+    readonly isConflictingStakes: boolean;
+    readonly isInvalidStakingAccountForMember: boolean;
+    readonly isMaxDispatchableCallCodeSizeExceeded: boolean;
+    readonly type: 'ArithmeticError' | 'EmptyTitleProvided' | 'EmptyDescriptionProvided' | 'TitleIsTooLong' | 'DescriptionIsTooLong' | 'ProposalNotFound' | 'ProposalFinalized' | 'AlreadyVoted' | 'NotAuthor' | 'MaxActiveProposalNumberExceeded' | 'EmptyStake' | 'StakeShouldBeEmpty' | 'StakeDiffersFromRequired' | 'InvalidParameterApprovalThreshold' | 'InvalidParameterSlashingThreshold' | 'RequireRootOrigin' | 'ProposalHasVotes' | 'ZeroExactExecutionBlock' | 'InvalidExactExecutionBlock' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'InvalidStakingAccountForMember' | 'MaxDispatchableCallCodeSizeExceeded';
+  }
+
+  /** @name PalletProposalsDiscussionDiscussionThread (612) */
+  export interface PalletProposalsDiscussionDiscussionThread extends Struct {
+    readonly activatedAt: u32;
+    readonly authorId: u64;
+    readonly mode: PalletProposalsDiscussionThreadModeBoundedBTreeSet;
+  }
+
+  /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (614) */
+  export interface PalletProposalsDiscussionThreadModeBoundedBTreeSet extends Enum {
+    readonly isOpen: boolean;
+    readonly isClosed: boolean;
+    readonly asClosed: BTreeSet<u64>;
+    readonly type: 'Open' | 'Closed';
+  }
+
+  /** @name PalletProposalsDiscussionDiscussionPost (615) */
+  export interface PalletProposalsDiscussionDiscussionPost extends Struct {
+    readonly authorId: u64;
+    readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
+    readonly lastEdited: u32;
+  }
+
+  /** @name PalletProposalsDiscussionError (616) */
+  export interface PalletProposalsDiscussionError extends Enum {
+    readonly isArithmeticError: boolean;
+    readonly isThreadDoesntExist: boolean;
+    readonly isPostDoesntExist: boolean;
+    readonly isRequireRootOrigin: boolean;
+    readonly isCannotPostOnClosedThread: boolean;
+    readonly isNotAuthorOrCouncilor: boolean;
+    readonly isMaxWhiteListSizeExceeded: boolean;
+    readonly isWhitelistedMemberDoesNotExist: boolean;
+    readonly isInsufficientBalanceForPost: boolean;
+    readonly isCannotDeletePost: boolean;
+    readonly type: 'ArithmeticError' | 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'WhitelistedMemberDoesNotExist' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
+  }
+
+  /** @name PalletProposalsCodexError (617) */
+  export interface PalletProposalsCodexError extends Enum {
+    readonly isSignalProposalIsEmpty: boolean;
+    readonly isRuntimeProposalIsEmpty: boolean;
+    readonly isInvalidFundingRequestProposalBalance: boolean;
+    readonly isInvalidValidatorCount: boolean;
+    readonly isRequireRootOrigin: boolean;
+    readonly isInvalidCouncilElectionParameterCouncilSize: boolean;
+    readonly isInvalidCouncilElectionParameterCandidacyLimit: boolean;
+    readonly isInvalidCouncilElectionParameterMinVotingStake: boolean;
+    readonly isInvalidCouncilElectionParameterNewTermDuration: boolean;
+    readonly isInvalidCouncilElectionParameterMinCouncilStake: boolean;
+    readonly isInvalidCouncilElectionParameterRevealingPeriod: boolean;
+    readonly isInvalidCouncilElectionParameterVotingPeriod: boolean;
+    readonly isInvalidCouncilElectionParameterAnnouncingPeriod: boolean;
+    readonly isInvalidWorkingGroupBudgetCapacity: boolean;
+    readonly isInvalidSetLeadParameterCannotBeCouncilor: boolean;
+    readonly isSlashingStakeIsZero: boolean;
+    readonly isDecreasingStakeIsZero: boolean;
+    readonly isInsufficientFundsForBudgetUpdate: boolean;
+    readonly isInvalidFundingRequestProposalNumberOfAccount: boolean;
+    readonly isInvalidFundingRequestProposalRepeatedAccount: boolean;
+    readonly isInvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout: boolean;
+    readonly isInvalidLeadWorkerId: boolean;
+    readonly isInvalidLeadOpeningId: boolean;
+    readonly isInvalidLeadApplicationId: boolean;
+    readonly isInvalidProposalId: boolean;
+    readonly isArithmeticError: boolean;
+    readonly isMaxYearlyPatronageRateCannotBeZero: boolean;
+    readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId' | 'ArithmeticError' | 'MaxYearlyPatronageRateCannotBeZero';
+  }
+
+  /** @name PalletWorkingGroupOpening (618) */
+  export interface PalletWorkingGroupOpening extends Struct {
+    readonly openingType: PalletWorkingGroupOpeningType;
+    readonly created: u32;
+    readonly descriptionHash: H256;
+    readonly stakePolicy: PalletWorkingGroupStakePolicy;
+    readonly rewardPerBlock: Option<u128>;
+    readonly creationStake: u128;
+  }
+
+  /** @name PalletWorkingGroupJobApplication (619) */
+  export interface PalletWorkingGroupJobApplication extends Struct {
+    readonly roleAccountId: AccountId32;
+    readonly rewardAccountId: AccountId32;
+    readonly stakingAccountId: AccountId32;
+    readonly memberId: u64;
+    readonly descriptionHash: H256;
+    readonly openingId: u64;
+  }
+
+  /** @name PalletWorkingGroupGroupWorker (620) */
+  export interface PalletWorkingGroupGroupWorker extends Struct {
+    readonly memberId: u64;
+    readonly roleAccountId: AccountId32;
+    readonly stakingAccountId: AccountId32;
+    readonly rewardAccountId: AccountId32;
+    readonly startedLeavingAt: Option<u32>;
+    readonly jobUnstakingPeriod: u32;
+    readonly rewardPerBlock: Option<u128>;
+    readonly missedReward: Option<u128>;
+    readonly createdAt: u32;
+  }
+
+  /** @name PalletWorkingGroupErrorsError (621) */
+  export interface PalletWorkingGroupErrorsError extends Enum {
+    readonly isArithmeticError: boolean;
+    readonly isStakeBalanceCannotBeZero: boolean;
+    readonly isOpeningDoesNotExist: boolean;
+    readonly isCannotHireMultipleLeaders: boolean;
+    readonly isWorkerApplicationDoesNotExist: boolean;
+    readonly isMaxActiveWorkerNumberExceeded: boolean;
+    readonly isSuccessfulWorkerApplicationDoesNotExist: boolean;
+    readonly isCannotHireLeaderWhenLeaderExists: boolean;
+    readonly isIsNotLeadAccount: boolean;
+    readonly isCurrentLeadNotSet: boolean;
+    readonly isWorkerDoesNotExist: boolean;
+    readonly isInvalidMemberOrigin: boolean;
+    readonly isSignerIsNotWorkerRoleAccount: boolean;
+    readonly isBelowMinimumStakes: boolean;
+    readonly isInsufficientBalanceToCoverStake: boolean;
+    readonly isApplicationStakeDoesntMatchOpening: boolean;
+    readonly isOriginIsNotApplicant: boolean;
+    readonly isWorkerIsLeaving: boolean;
+    readonly isCannotRewardWithZero: boolean;
+    readonly isInvalidStakingAccountForMember: boolean;
+    readonly isConflictStakesOnAccount: boolean;
+    readonly isWorkerHasNoReward: boolean;
+    readonly isUnstakingPeriodLessThanMinimum: boolean;
+    readonly isCannotSpendZero: boolean;
+    readonly isInsufficientBudgetForSpending: boolean;
+    readonly isNoApplicationsProvided: boolean;
+    readonly isCannotDecreaseStakeDeltaGreaterThanStake: boolean;
+    readonly isApplicationsNotForOpening: boolean;
+    readonly isWorkerStorageValueTooLong: boolean;
+    readonly isInsufficientTokensForFunding: boolean;
+    readonly isZeroTokensFunding: boolean;
+    readonly isInsufficientBalanceForTransfer: boolean;
+    readonly type: 'ArithmeticError' | 'StakeBalanceCannotBeZero' | 'OpeningDoesNotExist' | 'CannotHireMultipleLeaders' | 'WorkerApplicationDoesNotExist' | 'MaxActiveWorkerNumberExceeded' | 'SuccessfulWorkerApplicationDoesNotExist' | 'CannotHireLeaderWhenLeaderExists' | 'IsNotLeadAccount' | 'CurrentLeadNotSet' | 'WorkerDoesNotExist' | 'InvalidMemberOrigin' | 'SignerIsNotWorkerRoleAccount' | 'BelowMinimumStakes' | 'InsufficientBalanceToCoverStake' | 'ApplicationStakeDoesntMatchOpening' | 'OriginIsNotApplicant' | 'WorkerIsLeaving' | 'CannotRewardWithZero' | 'InvalidStakingAccountForMember' | 'ConflictStakesOnAccount' | 'WorkerHasNoReward' | 'UnstakingPeriodLessThanMinimum' | 'CannotSpendZero' | 'InsufficientBudgetForSpending' | 'NoApplicationsProvided' | 'CannotDecreaseStakeDeltaGreaterThanStake' | 'ApplicationsNotForOpening' | 'WorkerStorageValueTooLong' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'InsufficientBalanceForTransfer';
+  }
+
+  /** @name SpRuntimeMultiSignature (631) */
+  export interface SpRuntimeMultiSignature extends Enum {
+    readonly isEd25519: boolean;
+    readonly asEd25519: SpCoreEd25519Signature;
+    readonly isSr25519: boolean;
+    readonly asSr25519: SpCoreSr25519Signature;
+    readonly isEcdsa: boolean;
+    readonly asEcdsa: SpCoreEcdsaSignature;
+    readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
+  }
+
+  /** @name SpCoreEcdsaSignature (632) */
+  export interface SpCoreEcdsaSignature extends U8aFixed {}
+
+  /** @name FrameSystemExtensionsCheckNonZeroSender (635) */
+  export type FrameSystemExtensionsCheckNonZeroSender = Null;
+
+  /** @name FrameSystemExtensionsCheckSpecVersion (636) */
+  export type FrameSystemExtensionsCheckSpecVersion = Null;
+
+  /** @name FrameSystemExtensionsCheckTxVersion (637) */
+  export type FrameSystemExtensionsCheckTxVersion = Null;
+
+  /** @name FrameSystemExtensionsCheckGenesis (638) */
+  export type FrameSystemExtensionsCheckGenesis = Null;
+
+  /** @name FrameSystemExtensionsCheckNonce (641) */
+  export interface FrameSystemExtensionsCheckNonce extends Compact<u32> {}
+
+  /** @name FrameSystemExtensionsCheckWeight (642) */
+  export type FrameSystemExtensionsCheckWeight = Null;
+
+  /** @name PalletTransactionPaymentChargeTransactionPayment (643) */
+  export interface PalletTransactionPaymentChargeTransactionPayment extends Compact<u128> {}
+
+  /** @name JoystreamNodeRuntimeRuntime (644) */
+  export type JoystreamNodeRuntimeRuntime = Null;
+
+} // declare module
diff --git a/node_modules/@joystream/types/types/src/index.ts b/node_modules/@joystream/types/types/src/index.ts
new file mode 100644
index 0000000..fcd62ab
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/index.ts
@@ -0,0 +1,138 @@
+import './augment/types-lookup'
+import './augment/registry'
+import './augment/augment-api'
+
+import { AnyU8a, Codec, DetectCodec, ITuple, Observable } from '@polkadot/types/types'
+import {
+  Text,
+  UInt,
+  Null,
+  bool,
+  Option,
+  Vec,
+  BTreeSet,
+  BTreeMap,
+  Tuple,
+  Enum,
+  Struct,
+  Bytes,
+  TypeRegistry,
+  Raw,
+} from '@polkadot/types'
+import defs from './augment/lookup'
+import BN from 'bn.js'
+import { AugmentedQuery } from '@polkadot/api/types'
+
+// Tweaked version of https://stackoverflow.com/a/62163715 for handling enum variants
+// Based on type (T) like: { a: string; b: number; c: Null; }
+// will create a type like: { a: string } | { b: number } | { c: Null } | "c"
+export type EnumVariant<T> = keyof T extends infer K
+  ? K extends keyof T
+    ? T[K] extends Null | null
+      ? K | { [I in K]: T[I] }
+      : { [I in K]: T[I] }
+    : never
+  : never
+
+// Other enum utility types:
+type EnumAccessors<T extends string> = { [K in `as${T}`]?: unknown }
+type DecoratedEnum<T extends string> = Omit<Enum, 'type'> & { type: T } & EnumAccessors<T>
+// If `asX` is defined - we want the returned codec type, otherwise it's Null (and `isX` is defined instead)
+type CodecOrNull<T> = T extends Codec ? T : Null
+type EnumDefs<E extends DecoratedEnum<T>, T extends string> = { [K in T]: CodecOrNull<E[`as${K}`]> }
+
+// Struct utility types
+type StructDefs<S extends Struct> = Omit<S, keyof Struct>
+
+type KeyOf<T> = T extends DecoratedEnum<infer S>
+  ? keyof EnumDefs<T, S>
+  : T extends Struct
+  ? keyof StructDefs<T>
+  : unknown[]
+
+type AsRecord<K, V> = K extends string ? Record<K & string, V> : K extends number ? Record<K & number, V> : never
+
+/**
+ * Recursively create typesafe interface representing valid input for constructing any Codec type
+ * (inlcuding complex types with a lot of nesting)
+ *
+ * Some examples:
+ *
+ * CreateInterface<Option<u128>> = Option<u128> | u128 | number | BN | null | undefined
+ *
+ * CreateInterface<PalletCommonBalanceKind> =
+ *   PalletCommonBalanceKind |
+ *   'Positive' |
+ *   'Negative' |
+ *   { Positive: null } |
+ *   { Negative: null }
+ *
+ * CreateInterface<PalletContentPermissionsContentActor> =
+ *   PalletContentPermissionsContentActor |
+ *   'Lead' |
+ *   { Lead: null } |
+ *   { Curator: ITuple<[u64, u64]> | [u64 | BN | number, u64 | BN | number] }
+ *   { Member: u64 | BN | number }
+ *
+ * CreateInterface<PalletContentLimitPerPeriod> =
+ *   PalletContentLimitPerPeriod |
+ *   { limit: u64 | BN | number, blockNumberPeriod: u32 | BN | number }
+ */
+export type CreateInterface<T> =
+  | T
+  | (T extends Option<infer S>
+      ? null | undefined | CreateInterface<S>
+      : T extends DecoratedEnum<infer S>
+      ? EnumVariant<{ [K in keyof EnumDefs<T, S>]: CreateInterface<EnumDefs<T, S>[K]> }>
+      : T extends Struct
+      ? { [K in keyof StructDefs<T>]: CreateInterface<StructDefs<T>[K]> }
+      : T extends Text
+      ? string
+      : T extends Bytes | Raw
+      ? AnyU8a
+      : T extends UInt
+      ? number | BN
+      : T extends bool
+      ? boolean
+      : T extends Vec<infer S>
+      ? CreateInterface<S>[]
+      : T extends BTreeSet<infer S>
+      ? CreateInterface<S>[] | Set<CreateInterface<S>>
+      : T extends ITuple<infer S>
+      ? S extends Tuple
+        ? unknown[]
+        : { [K in keyof S]: CreateInterface<T[K]> }
+      : T extends BTreeMap<infer K, infer V>
+      ? Map<CreateInterface<K>, CreateInterface<V>> | AsRecord<CreateInterface<K>, CreateInterface<V>>
+      : T extends Null
+      ? null
+      : unknown)
+
+export const registry = new TypeRegistry()
+registry.register(defs as any)
+
+export function createType<TN extends string>(
+  typeName: TN,
+  value: CreateInterface<DetectCodec<Codec, TN>>
+): Codec extends DetectCodec<Codec, TN> ? unknown : DetectCodec<Codec, TN> {
+  return registry.createType<Codec, TN>(typeName, value)
+}
+
+export function keysOf<T extends Struct | Enum, TN extends string>(typeName: TN): KeyOf<T>[] {
+  return registry.createType<T, TN>(typeName).defKeys as KeyOf<T>[]
+}
+
+export async function entriesByIds<IDType extends UInt, ValueType extends Codec>(
+  apiMethod: AugmentedQuery<'promise', (key: IDType) => Observable<ValueType>, [IDType]>
+): Promise<[IDType, AsCodec<ValueType>][]> {
+  const entries: [IDType, AsCodec<ValueType>][] = (await apiMethod.entries()).map(([storageKey, value]) => [
+    storageKey.args[0] as IDType,
+    value,
+  ])
+
+  return entries.sort((a, b) => a[0].toNumber() - b[0].toNumber())
+}
+
+export type AsCodec<T> = T extends Codec ? T : Codec
+
+export const JOYSTREAM_ADDRESS_PREFIX = 126
diff --git a/node_modules/@joystream/types/types/src/primitives.ts b/node_modules/@joystream/types/types/src/primitives.ts
new file mode 100644
index 0000000..5c0038c
--- /dev/null
+++ b/node_modules/@joystream/types/types/src/primitives.ts
@@ -0,0 +1,39 @@
+import { u8, u32, u64 } from '@polkadot/types'
+
+// Forum
+export type ForumCategoryId = u64
+export type ForumThreadId = u64
+export type ForumPostId = u64
+
+// Proposals
+export type ProposalId = u32
+export type ProposalDiscussionThreadId = u64
+export type ProposalDiscussionPostId = u64
+
+// Storage
+export type DataObjectTypeId = u64
+export type DataObjectId = u64
+export type StorageBucketId = u64
+export type DistributionBucketFamilyId = u64
+export type DistributionBucketOperatorId = u64
+export type DistributionBucketIndex = u64
+
+// Membership
+export type MemberId = u64
+
+// Content
+export type ChannelId = u64
+export type VideoId = u64
+export type OpenAuctionId = u64
+export type CuratorId = u64
+export type CuratorGroupId = u64
+export type CreatorTokenId = u64
+export type CreatorTokenSaleId = u32
+export type CreatorTokenRevenueSplitId = u32
+export type ChannelPrivilegeLevel = u8
+
+// Working groups
+export type WorkerId = u64
+export type ActorId = u64
+export type OpeningId = u64
+export type ApplicationId = u64
diff --git a/node_modules/@joystream/types/types/tsconfig-eslint.json b/node_modules/@joystream/types/types/tsconfig-eslint.json
new file mode 100644
index 0000000..a8d4317
--- /dev/null
+++ b/node_modules/@joystream/types/types/tsconfig-eslint.json
@@ -0,0 +1,4 @@
+{
+  "extends": "./tsconfig.json",
+  "exclude": []
+}
diff --git a/node_modules/@joystream/types/types/tsconfig.cjs.json b/node_modules/@joystream/types/types/tsconfig.cjs.json
new file mode 100644
index 0000000..d0af770
--- /dev/null
+++ b/node_modules/@joystream/types/types/tsconfig.cjs.json
@@ -0,0 +1,8 @@
+{
+  "extends": "./tsconfig.json",
+  "compilerOptions": {
+    "module": "commonjs",
+    "outDir": "lib/cjs",
+    "target": "es2015"
+  }
+}
diff --git a/node_modules/@joystream/types/types/tsconfig.esm.json b/node_modules/@joystream/types/types/tsconfig.esm.json
new file mode 100644
index 0000000..097fa2f
--- /dev/null
+++ b/node_modules/@joystream/types/types/tsconfig.esm.json
@@ -0,0 +1,8 @@
+{
+  "extends": "./tsconfig.json",
+  "compilerOptions": {
+    "module": "esnext",
+    "outDir": "lib/mjs",
+    "target": "esnext"
+  }
+}
diff --git a/node_modules/@joystream/types/types/tsconfig.json b/node_modules/@joystream/types/types/tsconfig.json
new file mode 100644
index 0000000..d683ee5
--- /dev/null
+++ b/node_modules/@joystream/types/types/tsconfig.json
@@ -0,0 +1,21 @@
+{
+  "compilerOptions": {
+    "strict": true,
+    "noImplicitAny": true,
+    "noUnusedLocals": true,
+    "noImplicitReturns": true,
+    "moduleResolution": "node",
+    "allowSyntheticDefaultImports": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,
+    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
+    "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
+    "declaration": true,
+    "declarationDir": "lib",
+    "resolveJsonModule": true,
+    "skipLibCheck": true,
+    "types": ["node"],
+    "forceConsistentCasingInFileNames": true,
+    "baseUrl": "."
+  },
+  "include": ["src/**/*.ts"],
+  "exclude": ["node_modules", "**/*.spec.ts", "**/*.d.ts"]
+}
