diff --git a/node_modules/@subsquid/typeorm-codegen/lib/codegen.js b/node_modules/@subsquid/typeorm-codegen/lib/codegen.js
index e40f9bc..a8b1225 100644
--- a/node_modules/@subsquid/typeorm-codegen/lib/codegen.js
+++ b/node_modules/@subsquid/typeorm-codegen/lib/codegen.js
@@ -110,7 +110,7 @@ function generateOrmModels(model, dir) {
                         if (getFieldIndex(entity, key)?.unique) {
                             imports.useTypeorm('OneToOne', 'Index', 'JoinColumn');
                             out.line(`@Index_({unique: true})`);
-                            out.line(`@OneToOne_(() => ${prop.type.entity}, {nullable: false})`);
+                            out.line(`@OneToOne_(() => ${prop.type.entity}, {nullable: false, deferrable: 'INITIALLY DEFERRED'})`);
                             out.line(`@JoinColumn_()`);
                         }
                         else {
@@ -119,7 +119,7 @@ function generateOrmModels(model, dir) {
                                 out.line(`@Index_()`);
                             }
                             // Make foreign entity references always nullable
-                            out.line(`@ManyToOne_(() => ${prop.type.entity}, {nullable: true})`);
+                            out.line(`@ManyToOne_(() => ${prop.type.entity}, {nullable: true, deferrable: 'INITIALLY DEFERRED'})`);
                         }
                         break;
                     case 'lookup':
@@ -161,6 +161,11 @@ function generateOrmModels(model, dir) {
                 }
                 if (prop.type.kind != 'lookup') {
                     out.line(`${key}!: ${getPropJsType(imports, 'entity', prop)}`);
+                    if (prop.type.kind === 'fk') {
+                        out.line()
+                        out.line(`@Column_(${!getFieldIndex(entity, key)?.unique ? '{ nullable: true }' : ''})`)
+                        out.line(`${key}Id!: string` + (!getFieldIndex(entity, key)?.unique ? ' | null | undefined' : ''))
+                    }
                 }
             }
         });
