diff --git a/node_modules/@joystream/types/.gitignore b/node_modules/@joystream/types/.gitignore
new file mode 100644
index 0000000..206991f
--- /dev/null
+++ b/node_modules/@joystream/types/.gitignore
@@ -0,0 +1,4 @@
+# Don't track build artifacts
+**/*.js
+**/*.d.ts
+!.eslintrc.js
\ No newline at end of file
diff --git a/node_modules/@joystream/types/.npmignore b/node_modules/@joystream/types/.npmignore
new file mode 100644
index 0000000..acdb6a9
--- /dev/null
+++ b/node_modules/@joystream/types/.npmignore
@@ -0,0 +1,6 @@
+# keep src/ files, packages is compiled when installed
+# src/
+
+# old build artifacts
+lib/
+build/
diff --git a/node_modules/@joystream/types/CHANGELOG.md b/node_modules/@joystream/types/CHANGELOG.md
index 23c9cea..8181a69 100644
--- a/node_modules/@joystream/types/CHANGELOG.md
+++ b/node_modules/@joystream/types/CHANGELOG.md
@@ -1,3 +1,15 @@
+### 2.1.0
+
+- Bumped version for dependants version release to get the proper types version. [ref](https://github.com/Joystream/joystream/commit/f899922645013cd5aad6d8036aeae2180f123cf7)
+
+### 2.0.0 (Ephesus release)
+
+- Generated Ephesus augment api from metadata
+
+### 1.0.0
+
+- No changes, version bumped for consistency with mainnet release versioning.
+
 ### 0.20.0
 
 - `@polkadot/api` upgraded from `5.9.1` to `8.9.1` (along with related dependencies)
diff --git a/node_modules/@joystream/types/augment/augment-types.ts b/node_modules/@joystream/types/augment/augment-types.ts
deleted file mode 100644
index a68d386..0000000
--- a/node_modules/@joystream/types/augment/augment-types.ts
+++ /dev/null
@@ -1,2394 +0,0 @@
-// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
-/* eslint-disable */
-
-import type {
-  BitVec,
-  Bool,
-  Bytes,
-  Data,
-  I128,
-  I16,
-  I256,
-  I32,
-  I64,
-  I8,
-  Json,
-  Null,
-  Raw,
-  StorageKey,
-  Text,
-  Type,
-  U128,
-  U16,
-  U256,
-  U32,
-  U64,
-  U8,
-  USize,
-  bool,
-  i128,
-  i16,
-  i256,
-  i32,
-  i64,
-  i8,
-  u128,
-  u16,
-  u256,
-  u32,
-  u64,
-  u8,
-  usize,
-} from '@polkadot/types'
-import type {
-  ActorId,
-  Application,
-  ApplicationId,
-  ApplicationIdSet,
-  ApplicationIdToWorkerIdMap,
-  ApplicationInfo,
-  ApplyOnOpeningParameters,
-  Approved,
-  AssuranceContractType,
-  AssuranceContractType_Closed,
-  Bag,
-  BagId,
-  BagIdType,
-  BalanceKind,
-  BlockAndTime,
-  BlockRate,
-  BountyActor,
-  BountyCreationParameters,
-  BountyId,
-  BountyMilestone,
-  BountyMilestone_BountyMaxFundingReached,
-  BountyMilestone_Created,
-  BountyMilestone_JudgmentSubmitted,
-  BountyMilestone_WorkSubmitted,
-  BuyMembershipParameters,
-  Candidate,
-  CastVoteOf,
-  Category,
-  CategoryId,
-  Channel,
-  ChannelActionPermission,
-  ChannelAgentPermissions,
-  ChannelCreationParameters,
-  ChannelId,
-  ChannelOwner,
-  ChannelPayoutsPayloadParameters,
-  ChannelPrivilegeLevel,
-  ChannelTransferStatus,
-  ChannelTransferStatus_PendingTransfer,
-  ChannelUpdateParameters,
-  Cid,
-  ConstitutionInfo,
-  ContentActor,
-  ContentIdSet,
-  ContentModerationAction,
-  ContentModerationActionsSet,
-  CouncilMemberOf,
-  CouncilStage,
-  CouncilStageAnnouncing,
-  CouncilStageElection,
-  CouncilStageUpdate,
-  CreateOpeningParameters,
-  CuratorGroup,
-  CuratorGroupId,
-  CuratorId,
-  DataObject,
-  DataObjectCreationParameters,
-  DataObjectId,
-  DataObjectIdMap,
-  DataObjectIdSet,
-  DiscussionPost,
-  DiscussionThread,
-  DistributionBucket,
-  DistributionBucketFamily,
-  DistributionBucketFamilyId,
-  DistributionBucketId,
-  DistributionBucketIndex,
-  DistributionBucketIndexSet,
-  DistributionBucketsPerBagValueConstraint,
-  DynBagCreationParameters,
-  Dynamic,
-  DynamicBagCreationPolicy,
-  DynamicBagCreationPolicyDistributorFamiliesMap,
-  DynamicBagId,
-  DynamicBagType,
-  EnglishAuction,
-  EnglishAuctionBid,
-  EnglishAuctionParams,
-  Entry,
-  EntryId,
-  ExecutionFailed,
-  ExecutionStatus,
-  ExtendedPostId,
-  FillOpeningParameters,
-  ForumUserId,
-  FundingRequestParameters,
-  FundingType,
-  FundingType_Limited,
-  FundingType_Perpetual,
-  GeneralProposalParameters,
-  InitTransactionalStatus,
-  InputValidationLengthConstraintU64,
-  InviteMembershipParameters,
-  IsCensored,
-  JoyBalance,
-  LimitPerPeriod,
-  MaxNumber,
-  MemberId,
-  Membership,
-  MerkleProof,
-  MerkleSide,
-  ModerationPermissionsByLevel,
-  ModeratorId,
-  NftCounter,
-  NftIssuanceParameters,
-  NftLimitId,
-  NftLimitPeriod,
-  NftMetadata,
-  NftOwner,
-  OfferingState,
-  OpenAuction,
-  OpenAuctionBid,
-  OpenAuctionId,
-  OpenAuctionParams,
-  Opening,
-  OpeningId,
-  OpeningType,
-  OptionResult,
-  OracleJudgment,
-  OracleWorkEntryJudgment,
-  OracleWorkEntryJudgment_Winner,
-  OwnedNft,
-  ParticipantId,
-  PausableChannelFeature,
-  Payment,
-  PaymentWithVesting,
-  Penalty,
-  Poll,
-  PollAlternative,
-  PollInput,
-  Post,
-  PostId,
-  PostReactionId,
-  PrivilegedActor,
-  ProofElement,
-  ProposalDecision,
-  ProposalDetails,
-  ProposalDetailsOf,
-  ProposalId,
-  ProposalOf,
-  ProposalParameters,
-  ProposalStatus,
-  PullPayment,
-  ReferendumStage,
-  ReferendumStageRevealing,
-  ReferendumStageVoting,
-  Reply,
-  ReplyId,
-  ReplyToDelete,
-  RewardPaymentType,
-  Royalty,
-  SetLeadParams,
-  Side,
-  SingleDataObjectUploadParams,
-  StakeParameters,
-  StakePolicy,
-  StakingAccountMemberBinding,
-  Static,
-  StaticBagId,
-  StorageAssets,
-  StorageBucket,
-  StorageBucketId,
-  StorageBucketIdSet,
-  StorageBucketOperatorStatus,
-  StorageBucketsPerBagValueConstraint,
-  StorageProviderId,
-  TerminateRoleParameters,
-  Thread,
-  ThreadId,
-  ThreadMode,
-  ThreadOf,
-  Title,
-  TokenAllocation,
-  TokenId,
-  TokenIssuanceParams,
-  TokenSale,
-  TokenSaleId,
-  TokenSaleParams,
-  TransactionalStatus,
-  TransferParameters,
-  TransferPolicy,
-  TransferPolicyParams,
-  UpdateChannelPayoutsParameters,
-  UpdatedBody,
-  UpdatedTitle,
-  UploadContent,
-  UploadParameters,
-  Url,
-  ValidatedPayment,
-  VestingScheduleParams,
-  VestingSource,
-  Video,
-  VideoCreationParameters,
-  VideoId,
-  VideoUpdateParameters,
-  VoteKind,
-  VotePower,
-  VotingResults,
-  Voucher,
-  WhitelistParams,
-  Worker,
-  WorkerId,
-  WorkerInfo,
-  WorkingGroup,
-  YearlyRate,
-} from './all'
-import type {
-  AssetApproval,
-  AssetApprovalKey,
-  AssetBalance,
-  AssetDestroyWitness,
-  AssetDetails,
-  AssetMetadata,
-  TAssetBalance,
-  TAssetDepositBalance,
-} from '@polkadot/types/interfaces/assets'
-import type { BlockAttestations, IncludedBlocks, MoreAttestations } from '@polkadot/types/interfaces/attestations'
-import type { RawAuraPreDigest } from '@polkadot/types/interfaces/aura'
-import type { ExtrinsicOrHash, ExtrinsicStatus } from '@polkadot/types/interfaces/author'
-import type { UncleEntryItem } from '@polkadot/types/interfaces/authorship'
-import type {
-  AllowedSlots,
-  BabeAuthorityWeight,
-  BabeBlockWeight,
-  BabeEpochConfiguration,
-  BabeEquivocationProof,
-  BabeWeight,
-  EpochAuthorship,
-  MaybeRandomness,
-  MaybeVrf,
-  NextConfigDescriptor,
-  NextConfigDescriptorV1,
-  Randomness,
-  RawBabePreDigest,
-  RawBabePreDigestCompat,
-  RawBabePreDigestPrimary,
-  RawBabePreDigestPrimaryTo159,
-  RawBabePreDigestSecondaryPlain,
-  RawBabePreDigestSecondaryTo159,
-  RawBabePreDigestSecondaryVRF,
-  RawBabePreDigestTo159,
-  SlotNumber,
-  VrfData,
-  VrfOutput,
-  VrfProof,
-} from '@polkadot/types/interfaces/babe'
-import type {
-  AccountData,
-  BalanceLock,
-  BalanceLockTo212,
-  BalanceStatus,
-  Reasons,
-  ReserveData,
-  ReserveIdentifier,
-  VestingSchedule,
-  WithdrawReasons,
-} from '@polkadot/types/interfaces/balances'
-import type {
-  BeefyCommitment,
-  BeefyId,
-  BeefyNextAuthoritySet,
-  BeefyPayload,
-  BeefySignedCommitment,
-  MmrRootHash,
-  ValidatorSetId,
-} from '@polkadot/types/interfaces/beefy'
-import type {
-  BridgedBlockHash,
-  BridgedBlockNumber,
-  BridgedHeader,
-  CallOrigin,
-  ChainId,
-  DeliveredMessages,
-  DispatchFeePayment,
-  InboundLaneData,
-  InboundRelayer,
-  InitializationData,
-  LaneId,
-  MessageData,
-  MessageKey,
-  MessageNonce,
-  MessagesDeliveryProofOf,
-  MessagesProofOf,
-  OperatingMode,
-  OutboundLaneData,
-  OutboundMessageFee,
-  OutboundPayload,
-  Parameter,
-  RelayerId,
-  UnrewardedRelayer,
-  UnrewardedRelayersState,
-} from '@polkadot/types/interfaces/bridges'
-import type { BlockHash } from '@polkadot/types/interfaces/chain'
-import type { PrefixedStorageKey } from '@polkadot/types/interfaces/childstate'
-import type { EthereumAddress, StatementKind } from '@polkadot/types/interfaces/claims'
-import type {
-  CollectiveOrigin,
-  MemberCount,
-  ProposalIndex,
-  Votes,
-  VotesTo230,
-} from '@polkadot/types/interfaces/collective'
-import type { AuthorityId, RawVRFOutput } from '@polkadot/types/interfaces/consensus'
-import type {
-  AliveContractInfo,
-  CodeHash,
-  ContractCallRequest,
-  ContractExecResult,
-  ContractExecResultErr,
-  ContractExecResultErrModule,
-  ContractExecResultOk,
-  ContractExecResultResult,
-  ContractExecResultSuccessTo255,
-  ContractExecResultSuccessTo260,
-  ContractExecResultTo255,
-  ContractExecResultTo260,
-  ContractExecResultTo267,
-  ContractInfo,
-  ContractInstantiateResult,
-  ContractStorageKey,
-  DeletedContract,
-  ExecReturnValue,
-  Gas,
-  HostFnWeights,
-  HostFnWeightsTo264,
-  InstantiateRequest,
-  InstantiateReturnValue,
-  InstructionWeights,
-  Limits,
-  LimitsTo264,
-  PrefabWasmModule,
-  RentProjection,
-  Schedule,
-  ScheduleTo212,
-  ScheduleTo258,
-  ScheduleTo264,
-  SeedOf,
-  TombstoneContractInfo,
-  TrieId,
-} from '@polkadot/types/interfaces/contracts'
-import type {
-  ContractConstructorSpec,
-  ContractContractSpec,
-  ContractCryptoHasher,
-  ContractDiscriminant,
-  ContractDisplayName,
-  ContractEventParamSpec,
-  ContractEventSpec,
-  ContractLayoutArray,
-  ContractLayoutCell,
-  ContractLayoutEnum,
-  ContractLayoutHash,
-  ContractLayoutHashingStrategy,
-  ContractLayoutKey,
-  ContractLayoutStruct,
-  ContractLayoutStructField,
-  ContractMessageParamSpec,
-  ContractMessageSpec,
-  ContractProject,
-  ContractProjectContract,
-  ContractProjectSource,
-  ContractSelector,
-  ContractStorageLayout,
-  ContractTypeSpec,
-} from '@polkadot/types/interfaces/contractsAbi'
-import type { FundIndex, FundInfo, LastContribution, TrieIndex } from '@polkadot/types/interfaces/crowdloan'
-import type {
-  ConfigData,
-  MessageId,
-  OverweightIndex,
-  PageCounter,
-  PageIndexData,
-} from '@polkadot/types/interfaces/cumulus'
-import type {
-  AccountVote,
-  AccountVoteSplit,
-  AccountVoteStandard,
-  Conviction,
-  Delegations,
-  PreimageStatus,
-  PreimageStatusAvailable,
-  PriorLock,
-  PropIndex,
-  Proposal,
-  ProxyState,
-  ReferendumIndex,
-  ReferendumInfo,
-  ReferendumInfoFinished,
-  ReferendumInfoTo239,
-  ReferendumStatus,
-  Tally,
-  Voting,
-  VotingDelegating,
-  VotingDirect,
-  VotingDirectVote,
-} from '@polkadot/types/interfaces/democracy'
-import type {
-  ApprovalFlag,
-  DefunctVoter,
-  Renouncing,
-  SetIndex,
-  Vote,
-  VoteIndex,
-  VoteThreshold,
-  VoterInfo,
-} from '@polkadot/types/interfaces/elections'
-import type { CreatedBlock, ImportedAux } from '@polkadot/types/interfaces/engine'
-import type {
-  EthAccount,
-  EthBlock,
-  EthBloom,
-  EthCallRequest,
-  EthFilter,
-  EthFilterAddress,
-  EthFilterChanges,
-  EthFilterTopic,
-  EthFilterTopicEntry,
-  EthFilterTopicInner,
-  EthHeader,
-  EthLog,
-  EthReceipt,
-  EthRichBlock,
-  EthRichHeader,
-  EthStorageProof,
-  EthSubKind,
-  EthSubParams,
-  EthSubResult,
-  EthSyncInfo,
-  EthSyncStatus,
-  EthTransaction,
-  EthTransactionAction,
-  EthTransactionCondition,
-  EthTransactionRequest,
-  EthTransactionSignature,
-  EthTransactionStatus,
-  EthWork,
-  EthereumAccountId,
-  EthereumLookupSource,
-  EthereumSignature,
-} from '@polkadot/types/interfaces/eth'
-import type {
-  EvmAccount,
-  EvmLog,
-  EvmVicinity,
-  ExitError,
-  ExitFatal,
-  ExitReason,
-  ExitRevert,
-  ExitSucceed,
-} from '@polkadot/types/interfaces/evm'
-import type {
-  AnySignature,
-  EcdsaSignature,
-  Ed25519Signature,
-  Era,
-  Extrinsic,
-  ExtrinsicEra,
-  ExtrinsicPayload,
-  ExtrinsicPayloadUnknown,
-  ExtrinsicPayloadV4,
-  ExtrinsicSignature,
-  ExtrinsicSignatureV4,
-  ExtrinsicUnknown,
-  ExtrinsicV4,
-  ImmortalEra,
-  MortalEra,
-  MultiSignature,
-  Signature,
-  SignerPayload,
-  Sr25519Signature,
-} from '@polkadot/types/interfaces/extrinsics'
-import type {
-  AssetOptions,
-  Owner,
-  PermissionLatest,
-  PermissionVersions,
-  PermissionsV1,
-} from '@polkadot/types/interfaces/genericAsset'
-import type { ActiveGilt, ActiveGiltsTotal, ActiveIndex, GiltBid } from '@polkadot/types/interfaces/gilt'
-import type {
-  AuthorityIndex,
-  AuthorityList,
-  AuthoritySet,
-  AuthoritySetChange,
-  AuthoritySetChanges,
-  AuthorityWeight,
-  DelayKind,
-  DelayKindBest,
-  EncodedFinalityProofs,
-  ForkTreePendingChange,
-  ForkTreePendingChangeNode,
-  GrandpaCommit,
-  GrandpaEquivocation,
-  GrandpaEquivocationProof,
-  GrandpaEquivocationValue,
-  GrandpaJustification,
-  GrandpaPrecommit,
-  GrandpaPrevote,
-  GrandpaSignedPrecommit,
-  JustificationNotification,
-  KeyOwnerProof,
-  NextAuthority,
-  PendingChange,
-  PendingPause,
-  PendingResume,
-  Precommits,
-  Prevotes,
-  ReportedRoundStates,
-  RoundState,
-  SetId,
-  StoredPendingChange,
-  StoredState,
-} from '@polkadot/types/interfaces/grandpa'
-import type {
-  IdentityFields,
-  IdentityInfo,
-  IdentityInfoAdditional,
-  IdentityJudgement,
-  RegistrarIndex,
-  RegistrarInfo,
-  Registration,
-  RegistrationJudgement,
-} from '@polkadot/types/interfaces/identity'
-import type {
-  AuthIndex,
-  AuthoritySignature,
-  Heartbeat,
-  HeartbeatTo244,
-  OpaqueMultiaddr,
-  OpaqueNetworkState,
-  OpaquePeerId,
-} from '@polkadot/types/interfaces/imOnline'
-import type { CallIndex, LotteryConfig } from '@polkadot/types/interfaces/lottery'
-import type {
-  ErrorMetadataLatest,
-  ErrorMetadataV10,
-  ErrorMetadataV11,
-  ErrorMetadataV12,
-  ErrorMetadataV13,
-  ErrorMetadataV14,
-  ErrorMetadataV9,
-  EventMetadataLatest,
-  EventMetadataV10,
-  EventMetadataV11,
-  EventMetadataV12,
-  EventMetadataV13,
-  EventMetadataV14,
-  EventMetadataV9,
-  ExtrinsicMetadataLatest,
-  ExtrinsicMetadataV11,
-  ExtrinsicMetadataV12,
-  ExtrinsicMetadataV13,
-  ExtrinsicMetadataV14,
-  FunctionArgumentMetadataLatest,
-  FunctionArgumentMetadataV10,
-  FunctionArgumentMetadataV11,
-  FunctionArgumentMetadataV12,
-  FunctionArgumentMetadataV13,
-  FunctionArgumentMetadataV14,
-  FunctionArgumentMetadataV9,
-  FunctionMetadataLatest,
-  FunctionMetadataV10,
-  FunctionMetadataV11,
-  FunctionMetadataV12,
-  FunctionMetadataV13,
-  FunctionMetadataV14,
-  FunctionMetadataV9,
-  MetadataAll,
-  MetadataLatest,
-  MetadataV10,
-  MetadataV11,
-  MetadataV12,
-  MetadataV13,
-  MetadataV14,
-  MetadataV9,
-  ModuleConstantMetadataLatest,
-  ModuleConstantMetadataV10,
-  ModuleConstantMetadataV11,
-  ModuleConstantMetadataV12,
-  ModuleConstantMetadataV13,
-  ModuleConstantMetadataV9,
-  ModuleMetadataLatest,
-  ModuleMetadataV10,
-  ModuleMetadataV11,
-  ModuleMetadataV12,
-  ModuleMetadataV13,
-  ModuleMetadataV9,
-  PalletCallMetadataLatest,
-  PalletCallMetadataV14,
-  PalletConstantMetadataLatest,
-  PalletConstantMetadataV14,
-  PalletErrorMetadataLatest,
-  PalletErrorMetadataV14,
-  PalletEventMetadataLatest,
-  PalletEventMetadataV14,
-  PalletMetadataLatest,
-  PalletMetadataV14,
-  PalletStorageMetadataLatest,
-  PalletStorageMetadataV14,
-  PortableRegistry,
-  PortableType,
-  SignedExtensionMetadataLatest,
-  SignedExtensionMetadataV14,
-  StorageEntryMetadataLatest,
-  StorageEntryMetadataV10,
-  StorageEntryMetadataV11,
-  StorageEntryMetadataV12,
-  StorageEntryMetadataV13,
-  StorageEntryMetadataV14,
-  StorageEntryMetadataV9,
-  StorageEntryModifierLatest,
-  StorageEntryModifierV10,
-  StorageEntryModifierV11,
-  StorageEntryModifierV12,
-  StorageEntryModifierV13,
-  StorageEntryModifierV14,
-  StorageEntryModifierV9,
-  StorageEntryTypeLatest,
-  StorageEntryTypeV10,
-  StorageEntryTypeV11,
-  StorageEntryTypeV12,
-  StorageEntryTypeV13,
-  StorageEntryTypeV14,
-  StorageEntryTypeV9,
-  StorageHasher,
-  StorageHasherV10,
-  StorageHasherV11,
-  StorageHasherV12,
-  StorageHasherV13,
-  StorageHasherV14,
-  StorageHasherV9,
-  StorageMetadataLatest,
-  StorageMetadataV10,
-  StorageMetadataV11,
-  StorageMetadataV12,
-  StorageMetadataV13,
-  StorageMetadataV9,
-} from '@polkadot/types/interfaces/metadata'
-import type { MmrLeafProof } from '@polkadot/types/interfaces/mmr'
-import type { StorageKind } from '@polkadot/types/interfaces/offchain'
-import type {
-  DeferredOffenceOf,
-  Kind,
-  OffenceDetails,
-  Offender,
-  OpaqueTimeSlot,
-  ReportIdOf,
-  Reporter,
-} from '@polkadot/types/interfaces/offences'
-import type {
-  AbridgedCandidateReceipt,
-  AbridgedHostConfiguration,
-  AbridgedHrmpChannel,
-  AssignmentId,
-  AssignmentKind,
-  AttestedCandidate,
-  AuctionIndex,
-  AuthorityDiscoveryId,
-  AvailabilityBitfield,
-  AvailabilityBitfieldRecord,
-  BackedCandidate,
-  Bidder,
-  BufferedSessionChange,
-  CandidateCommitments,
-  CandidateDescriptor,
-  CandidateHash,
-  CandidateInfo,
-  CandidatePendingAvailability,
-  CandidateReceipt,
-  CollatorId,
-  CollatorSignature,
-  CommittedCandidateReceipt,
-  CoreAssignment,
-  CoreIndex,
-  CoreOccupied,
-  DisputeLocation,
-  DisputeResult,
-  DisputeState,
-  DisputeStatement,
-  DisputeStatementSet,
-  DoubleVoteReport,
-  DownwardMessage,
-  ExplicitDisputeStatement,
-  GlobalValidationData,
-  GlobalValidationSchedule,
-  GroupIndex,
-  HeadData,
-  HostConfiguration,
-  HrmpChannel,
-  HrmpChannelId,
-  HrmpOpenChannelRequest,
-  InboundDownwardMessage,
-  InboundHrmpMessage,
-  InboundHrmpMessages,
-  IncomingParachain,
-  IncomingParachainDeploy,
-  IncomingParachainFixed,
-  InvalidDisputeStatementKind,
-  LeasePeriod,
-  LeasePeriodOf,
-  LocalValidationData,
-  MessageIngestionType,
-  MessageQueueChain,
-  MessagingStateSnapshot,
-  MessagingStateSnapshotEgressEntry,
-  MultiDisputeStatementSet,
-  NewBidder,
-  OutboundHrmpMessage,
-  ParaGenesisArgs,
-  ParaId,
-  ParaInfo,
-  ParaLifecycle,
-  ParaPastCodeMeta,
-  ParaScheduling,
-  ParaValidatorIndex,
-  ParachainDispatchOrigin,
-  ParachainInherentData,
-  ParachainProposal,
-  ParachainsInherentData,
-  ParathreadClaim,
-  ParathreadClaimQueue,
-  ParathreadEntry,
-  PersistedValidationData,
-  QueuedParathread,
-  RegisteredParachainInfo,
-  RelayBlockNumber,
-  RelayChainBlockNumber,
-  RelayChainHash,
-  RelayHash,
-  Remark,
-  ReplacementTimes,
-  Retriable,
-  Scheduling,
-  ServiceQuality,
-  SessionInfo,
-  SessionInfoValidatorGroup,
-  SignedAvailabilityBitfield,
-  SignedAvailabilityBitfields,
-  SigningContext,
-  SlotRange,
-  Statement,
-  SubId,
-  SystemInherentData,
-  TransientValidationData,
-  UpgradeGoAhead,
-  UpgradeRestriction,
-  UpwardMessage,
-  ValidDisputeStatementKind,
-  ValidationCode,
-  ValidationCodeHash,
-  ValidationData,
-  ValidationDataType,
-  ValidationFunctionParams,
-  ValidatorSignature,
-  ValidityAttestation,
-  VecInboundHrmpMessage,
-  WinnersData,
-  WinnersDataTuple,
-  WinningData,
-  WinningDataEntry,
-} from '@polkadot/types/interfaces/parachains'
-import type { FeeDetails, InclusionFee, RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment'
-import type { Approvals } from '@polkadot/types/interfaces/poll'
-import type { ProxyAnnouncement, ProxyDefinition, ProxyType } from '@polkadot/types/interfaces/proxy'
-import type { AccountStatus, AccountValidity } from '@polkadot/types/interfaces/purchase'
-import type { ActiveRecovery, RecoveryConfig } from '@polkadot/types/interfaces/recovery'
-import type { RpcMethods } from '@polkadot/types/interfaces/rpc'
-import type {
-  AccountId,
-  AccountId20,
-  AccountId32,
-  AccountIdOf,
-  AccountIndex,
-  Address,
-  AssetId,
-  Balance,
-  BalanceOf,
-  Block,
-  BlockNumber,
-  BlockNumberFor,
-  BlockNumberOf,
-  Call,
-  CallHash,
-  CallHashOf,
-  ChangesTrieConfiguration,
-  ChangesTrieSignal,
-  CodecHash,
-  Consensus,
-  ConsensusEngineId,
-  Digest,
-  DigestItem,
-  EncodedJustification,
-  ExtrinsicsWeight,
-  Fixed128,
-  Fixed64,
-  FixedI128,
-  FixedI64,
-  FixedU128,
-  FixedU64,
-  H1024,
-  H128,
-  H160,
-  H2048,
-  H256,
-  H32,
-  H512,
-  H64,
-  Hash,
-  Header,
-  HeaderPartial,
-  I32F32,
-  Index,
-  IndicesLookupSource,
-  Justification,
-  Justifications,
-  KeyTypeId,
-  KeyValue,
-  LockIdentifier,
-  LookupSource,
-  LookupTarget,
-  ModuleId,
-  Moment,
-  MultiAddress,
-  MultiSigner,
-  OpaqueCall,
-  Origin,
-  OriginCaller,
-  PalletId,
-  PalletVersion,
-  PalletsOrigin,
-  Pays,
-  PerU16,
-  Perbill,
-  Percent,
-  Permill,
-  Perquintill,
-  Phantom,
-  PhantomData,
-  PreRuntime,
-  Releases,
-  RuntimeDbWeight,
-  Seal,
-  SealV0,
-  SignedBlock,
-  SignedBlockWithJustification,
-  SignedBlockWithJustifications,
-  Slot,
-  StorageData,
-  StorageProof,
-  TransactionInfo,
-  TransactionPriority,
-  TransactionStorageProof,
-  U32F32,
-  ValidatorId,
-  ValidatorIdOf,
-  Weight,
-  WeightMultiplier,
-} from '@polkadot/types/interfaces/runtime'
-import type {
-  Si0Field,
-  Si0LookupTypeId,
-  Si0Path,
-  Si0Type,
-  Si0TypeDef,
-  Si0TypeDefArray,
-  Si0TypeDefBitSequence,
-  Si0TypeDefCompact,
-  Si0TypeDefComposite,
-  Si0TypeDefPhantom,
-  Si0TypeDefPrimitive,
-  Si0TypeDefSequence,
-  Si0TypeDefTuple,
-  Si0TypeDefVariant,
-  Si0TypeParameter,
-  Si0Variant,
-  SiField,
-  SiLookupTypeId,
-  SiPath,
-  SiType,
-  SiTypeDef,
-  SiTypeDefArray,
-  SiTypeDefBitSequence,
-  SiTypeDefCompact,
-  SiTypeDefComposite,
-  SiTypeDefPrimitive,
-  SiTypeDefSequence,
-  SiTypeDefTuple,
-  SiTypeDefVariant,
-  SiTypeParameter,
-  SiVariant,
-} from '@polkadot/types/interfaces/scaleInfo'
-import type {
-  Period,
-  Priority,
-  SchedulePeriod,
-  SchedulePriority,
-  Scheduled,
-  ScheduledTo254,
-  TaskAddress,
-} from '@polkadot/types/interfaces/scheduler'
-import type {
-  BeefyKey,
-  FullIdentification,
-  IdentificationTuple,
-  Keys,
-  MembershipProof,
-  SessionIndex,
-  SessionKeys1,
-  SessionKeys10,
-  SessionKeys10B,
-  SessionKeys2,
-  SessionKeys3,
-  SessionKeys4,
-  SessionKeys5,
-  SessionKeys6,
-  SessionKeys6B,
-  SessionKeys7,
-  SessionKeys7B,
-  SessionKeys8,
-  SessionKeys8B,
-  SessionKeys9,
-  SessionKeys9B,
-  ValidatorCount,
-} from '@polkadot/types/interfaces/session'
-import type {
-  Bid,
-  BidKind,
-  SocietyJudgement,
-  SocietyVote,
-  StrikeCount,
-  VouchingStatus,
-} from '@polkadot/types/interfaces/society'
-import type {
-  ActiveEraInfo,
-  CompactAssignments,
-  CompactAssignmentsTo257,
-  CompactAssignmentsTo265,
-  CompactAssignmentsWith16,
-  CompactAssignmentsWith24,
-  CompactScore,
-  CompactScoreCompact,
-  ElectionCompute,
-  ElectionPhase,
-  ElectionResult,
-  ElectionScore,
-  ElectionSize,
-  ElectionStatus,
-  EraIndex,
-  EraPoints,
-  EraRewardPoints,
-  EraRewards,
-  Exposure,
-  ExtendedBalance,
-  Forcing,
-  IndividualExposure,
-  KeyType,
-  MomentOf,
-  Nominations,
-  NominatorIndex,
-  NominatorIndexCompact,
-  OffchainAccuracy,
-  OffchainAccuracyCompact,
-  PhragmenScore,
-  Points,
-  RawSolution,
-  RawSolutionTo265,
-  RawSolutionWith16,
-  RawSolutionWith24,
-  ReadySolution,
-  RewardDestination,
-  RewardPoint,
-  RoundSnapshot,
-  SeatHolder,
-  SignedSubmission,
-  SignedSubmissionOf,
-  SignedSubmissionTo276,
-  SlashJournalEntry,
-  SlashingSpans,
-  SlashingSpansTo204,
-  SolutionOrSnapshotSize,
-  SolutionSupport,
-  SolutionSupports,
-  SpanIndex,
-  SpanRecord,
-  StakingLedger,
-  StakingLedgerTo223,
-  StakingLedgerTo240,
-  SubmissionIndicesOf,
-  Supports,
-  UnappliedSlash,
-  UnappliedSlashOther,
-  UnlockChunk,
-  ValidatorIndex,
-  ValidatorIndexCompact,
-  ValidatorPrefs,
-  ValidatorPrefsTo145,
-  ValidatorPrefsTo196,
-  ValidatorPrefsWithBlocked,
-  ValidatorPrefsWithCommission,
-  VoteWeight,
-  Voter,
-} from '@polkadot/types/interfaces/staking'
-import type {
-  ApiId,
-  BlockTrace,
-  BlockTraceEvent,
-  BlockTraceEventData,
-  BlockTraceSpan,
-  KeyValueOption,
-  ReadProof,
-  RuntimeVersion,
-  RuntimeVersionApi,
-  RuntimeVersionPartial,
-  StorageChangeSet,
-  TraceBlockResponse,
-  TraceError,
-} from '@polkadot/types/interfaces/state'
-import type { WeightToFeeCoefficient } from '@polkadot/types/interfaces/support'
-import type {
-  AccountInfo,
-  AccountInfoWithDualRefCount,
-  AccountInfoWithProviders,
-  AccountInfoWithRefCount,
-  AccountInfoWithRefCountU8,
-  AccountInfoWithTripleRefCount,
-  ApplyExtrinsicResult,
-  ArithmeticError,
-  BlockLength,
-  BlockWeights,
-  ChainProperties,
-  ChainType,
-  ConsumedWeight,
-  DigestOf,
-  DispatchClass,
-  DispatchError,
-  DispatchErrorModule,
-  DispatchErrorTo198,
-  DispatchInfo,
-  DispatchInfoTo190,
-  DispatchInfoTo244,
-  DispatchOutcome,
-  DispatchResult,
-  DispatchResultOf,
-  DispatchResultTo198,
-  Event,
-  EventId,
-  EventIndex,
-  EventRecord,
-  Health,
-  InvalidTransaction,
-  Key,
-  LastRuntimeUpgradeInfo,
-  NetworkState,
-  NetworkStatePeerset,
-  NetworkStatePeersetInfo,
-  NodeRole,
-  NotConnectedPeer,
-  Peer,
-  PeerEndpoint,
-  PeerEndpointAddr,
-  PeerInfo,
-  PeerPing,
-  PerDispatchClassU32,
-  PerDispatchClassWeight,
-  PerDispatchClassWeightsPerClass,
-  Phase,
-  RawOrigin,
-  RefCount,
-  RefCountTo259,
-  SyncState,
-  SystemOrigin,
-  TokenError,
-  TransactionValidityError,
-  UnknownTransaction,
-  WeightPerClass,
-} from '@polkadot/types/interfaces/system'
-import type {
-  Bounty,
-  BountyIndex,
-  BountyStatus,
-  BountyStatusActive,
-  BountyStatusCuratorProposed,
-  BountyStatusPendingPayout,
-  OpenTip,
-  OpenTipFinderTo225,
-  OpenTipTip,
-  OpenTipTo225,
-  TreasuryProposal,
-} from '@polkadot/types/interfaces/treasury'
-import type { Multiplier } from '@polkadot/types/interfaces/txpayment'
-import type {
-  ClassDetails,
-  ClassId,
-  ClassMetadata,
-  DepositBalance,
-  DepositBalanceOf,
-  DestroyWitness,
-  InstanceDetails,
-  InstanceId,
-  InstanceMetadata,
-} from '@polkadot/types/interfaces/uniques'
-import type { Multisig, Timepoint } from '@polkadot/types/interfaces/utility'
-import type { VestingInfo } from '@polkadot/types/interfaces/vesting'
-import type {
-  AssetInstance,
-  AssetInstanceV0,
-  AssetInstanceV1,
-  BodyId,
-  BodyPart,
-  DoubleEncodedCall,
-  Fungibility,
-  InboundStatus,
-  InstructionV2,
-  InteriorMultiLocation,
-  Junction,
-  JunctionV0,
-  JunctionV1,
-  JunctionV2,
-  Junctions,
-  JunctionsV1,
-  JunctionsV2,
-  MultiAsset,
-  MultiAssetFilter,
-  MultiAssetFilterV1,
-  MultiAssetFilterV2,
-  MultiAssetV0,
-  MultiAssetV1,
-  MultiAssetV2,
-  MultiAssets,
-  MultiAssetsV1,
-  MultiAssetsV2,
-  MultiLocation,
-  MultiLocationV0,
-  MultiLocationV1,
-  MultiLocationV2,
-  NetworkId,
-  OriginKindV0,
-  OriginKindV1,
-  OriginKindV2,
-  OutboundStatus,
-  Outcome,
-  QueryId,
-  QueryStatus,
-  QueueConfigData,
-  Response,
-  ResponseV0,
-  ResponseV1,
-  ResponseV2,
-  ResponseV2Error,
-  ResponseV2Result,
-  VersionMigrationStage,
-  VersionedMultiAsset,
-  VersionedMultiAssets,
-  VersionedMultiLocation,
-  VersionedResponse,
-  VersionedXcm,
-  WeightLimitV2,
-  WildFungibility,
-  WildMultiAsset,
-  WildMultiAssetV1,
-  Xcm,
-  XcmAssetId,
-  XcmError,
-  XcmErrorV0,
-  XcmErrorV1,
-  XcmErrorV2,
-  XcmOrder,
-  XcmOrderV0,
-  XcmOrderV1,
-  XcmOrigin,
-  XcmOriginKind,
-  XcmV0,
-  XcmV1,
-  XcmV2,
-  XcmVersion,
-  XcmpMessageFormat,
-} from '@polkadot/types/interfaces/xcm'
-
-declare module '@polkadot/types/types/registry' {
-  export interface InterfaceTypes {
-    AbridgedCandidateReceipt: AbridgedCandidateReceipt
-    AbridgedHostConfiguration: AbridgedHostConfiguration
-    AbridgedHrmpChannel: AbridgedHrmpChannel
-    AccountData: AccountData
-    AccountId: AccountId
-    AccountId20: AccountId20
-    AccountId32: AccountId32
-    AccountIdOf: AccountIdOf
-    AccountIndex: AccountIndex
-    AccountInfo: AccountInfo
-    AccountInfoWithDualRefCount: AccountInfoWithDualRefCount
-    AccountInfoWithProviders: AccountInfoWithProviders
-    AccountInfoWithRefCount: AccountInfoWithRefCount
-    AccountInfoWithRefCountU8: AccountInfoWithRefCountU8
-    AccountInfoWithTripleRefCount: AccountInfoWithTripleRefCount
-    AccountStatus: AccountStatus
-    AccountValidity: AccountValidity
-    AccountVote: AccountVote
-    AccountVoteSplit: AccountVoteSplit
-    AccountVoteStandard: AccountVoteStandard
-    ActiveEraInfo: ActiveEraInfo
-    ActiveGilt: ActiveGilt
-    ActiveGiltsTotal: ActiveGiltsTotal
-    ActiveIndex: ActiveIndex
-    ActiveRecovery: ActiveRecovery
-    ActorId: ActorId
-    Address: Address
-    AliveContractInfo: AliveContractInfo
-    AllowedSlots: AllowedSlots
-    AnySignature: AnySignature
-    ApiId: ApiId
-    Application: Application
-    ApplicationId: ApplicationId
-    ApplicationIdSet: ApplicationIdSet
-    ApplicationIdToWorkerIdMap: ApplicationIdToWorkerIdMap
-    ApplicationInfo: ApplicationInfo
-    ApplyExtrinsicResult: ApplyExtrinsicResult
-    ApplyOnOpeningParameters: ApplyOnOpeningParameters
-    ApprovalFlag: ApprovalFlag
-    Approvals: Approvals
-    Approved: Approved
-    ArithmeticError: ArithmeticError
-    AssetApproval: AssetApproval
-    AssetApprovalKey: AssetApprovalKey
-    AssetBalance: AssetBalance
-    AssetDestroyWitness: AssetDestroyWitness
-    AssetDetails: AssetDetails
-    AssetId: AssetId
-    AssetInstance: AssetInstance
-    AssetInstanceV0: AssetInstanceV0
-    AssetInstanceV1: AssetInstanceV1
-    AssetMetadata: AssetMetadata
-    AssetOptions: AssetOptions
-    AssignmentId: AssignmentId
-    AssignmentKind: AssignmentKind
-    AssuranceContractType: AssuranceContractType
-    AssuranceContractType_Closed: AssuranceContractType_Closed
-    AttestedCandidate: AttestedCandidate
-    AuctionIndex: AuctionIndex
-    AuthIndex: AuthIndex
-    AuthorityDiscoveryId: AuthorityDiscoveryId
-    AuthorityId: AuthorityId
-    AuthorityIndex: AuthorityIndex
-    AuthorityList: AuthorityList
-    AuthoritySet: AuthoritySet
-    AuthoritySetChange: AuthoritySetChange
-    AuthoritySetChanges: AuthoritySetChanges
-    AuthoritySignature: AuthoritySignature
-    AuthorityWeight: AuthorityWeight
-    AvailabilityBitfield: AvailabilityBitfield
-    AvailabilityBitfieldRecord: AvailabilityBitfieldRecord
-    BabeAuthorityWeight: BabeAuthorityWeight
-    BabeBlockWeight: BabeBlockWeight
-    BabeEpochConfiguration: BabeEpochConfiguration
-    BabeEquivocationProof: BabeEquivocationProof
-    BabeWeight: BabeWeight
-    BackedCandidate: BackedCandidate
-    Bag: Bag
-    BagId: BagId
-    BagIdType: BagIdType
-    Balance: Balance
-    BalanceKind: BalanceKind
-    BalanceLock: BalanceLock
-    BalanceLockTo212: BalanceLockTo212
-    BalanceOf: BalanceOf
-    BalanceStatus: BalanceStatus
-    BeefyCommitment: BeefyCommitment
-    BeefyId: BeefyId
-    BeefyKey: BeefyKey
-    BeefyNextAuthoritySet: BeefyNextAuthoritySet
-    BeefyPayload: BeefyPayload
-    BeefySignedCommitment: BeefySignedCommitment
-    Bid: Bid
-    Bidder: Bidder
-    BidKind: BidKind
-    BitVec: BitVec
-    Block: Block
-    BlockAndTime: BlockAndTime
-    BlockAttestations: BlockAttestations
-    BlockHash: BlockHash
-    BlockLength: BlockLength
-    BlockNumber: BlockNumber
-    BlockNumberFor: BlockNumberFor
-    BlockNumberOf: BlockNumberOf
-    BlockRate: BlockRate
-    BlockTrace: BlockTrace
-    BlockTraceEvent: BlockTraceEvent
-    BlockTraceEventData: BlockTraceEventData
-    BlockTraceSpan: BlockTraceSpan
-    BlockWeights: BlockWeights
-    BodyId: BodyId
-    BodyPart: BodyPart
-    bool: bool
-    Bool: Bool
-    Bounty: Bounty
-    BountyActor: BountyActor
-    BountyCreationParameters: BountyCreationParameters
-    BountyId: BountyId
-    BountyIndex: BountyIndex
-    BountyMilestone: BountyMilestone
-    BountyMilestone_BountyMaxFundingReached: BountyMilestone_BountyMaxFundingReached
-    BountyMilestone_Created: BountyMilestone_Created
-    BountyMilestone_JudgmentSubmitted: BountyMilestone_JudgmentSubmitted
-    BountyMilestone_WorkSubmitted: BountyMilestone_WorkSubmitted
-    BountyStatus: BountyStatus
-    BountyStatusActive: BountyStatusActive
-    BountyStatusCuratorProposed: BountyStatusCuratorProposed
-    BountyStatusPendingPayout: BountyStatusPendingPayout
-    BridgedBlockHash: BridgedBlockHash
-    BridgedBlockNumber: BridgedBlockNumber
-    BridgedHeader: BridgedHeader
-    BufferedSessionChange: BufferedSessionChange
-    BuyMembershipParameters: BuyMembershipParameters
-    Bytes: Bytes
-    Call: Call
-    CallHash: CallHash
-    CallHashOf: CallHashOf
-    CallIndex: CallIndex
-    CallOrigin: CallOrigin
-    Candidate: Candidate
-    CandidateCommitments: CandidateCommitments
-    CandidateDescriptor: CandidateDescriptor
-    CandidateHash: CandidateHash
-    CandidateInfo: CandidateInfo
-    CandidatePendingAvailability: CandidatePendingAvailability
-    CandidateReceipt: CandidateReceipt
-    CastVoteOf: CastVoteOf
-    Category: Category
-    CategoryId: CategoryId
-    ChainId: ChainId
-    ChainProperties: ChainProperties
-    ChainType: ChainType
-    ChangesTrieConfiguration: ChangesTrieConfiguration
-    ChangesTrieSignal: ChangesTrieSignal
-    Channel: Channel
-    ChannelActionPermission: ChannelActionPermission
-    ChannelAgentPermissions: ChannelAgentPermissions
-    ChannelCreationParameters: ChannelCreationParameters
-    ChannelId: ChannelId
-    ChannelOwner: ChannelOwner
-    ChannelPayoutsPayloadParameters: ChannelPayoutsPayloadParameters
-    ChannelPrivilegeLevel: ChannelPrivilegeLevel
-    ChannelTransferStatus: ChannelTransferStatus
-    ChannelTransferStatus_PendingTransfer: ChannelTransferStatus_PendingTransfer
-    ChannelUpdateParameters: ChannelUpdateParameters
-    Cid: Cid
-    ClassDetails: ClassDetails
-    ClassId: ClassId
-    ClassMetadata: ClassMetadata
-    CodecHash: CodecHash
-    CodeHash: CodeHash
-    CollatorId: CollatorId
-    CollatorSignature: CollatorSignature
-    CollectiveOrigin: CollectiveOrigin
-    CommittedCandidateReceipt: CommittedCandidateReceipt
-    CompactAssignments: CompactAssignments
-    CompactAssignmentsTo257: CompactAssignmentsTo257
-    CompactAssignmentsTo265: CompactAssignmentsTo265
-    CompactAssignmentsWith16: CompactAssignmentsWith16
-    CompactAssignmentsWith24: CompactAssignmentsWith24
-    CompactScore: CompactScore
-    CompactScoreCompact: CompactScoreCompact
-    ConfigData: ConfigData
-    Consensus: Consensus
-    ConsensusEngineId: ConsensusEngineId
-    ConstitutionInfo: ConstitutionInfo
-    ConsumedWeight: ConsumedWeight
-    ContentActor: ContentActor
-    ContentIdSet: ContentIdSet
-    ContentModerationAction: ContentModerationAction
-    ContentModerationActionsSet: ContentModerationActionsSet
-    ContractCallRequest: ContractCallRequest
-    ContractConstructorSpec: ContractConstructorSpec
-    ContractContractSpec: ContractContractSpec
-    ContractCryptoHasher: ContractCryptoHasher
-    ContractDiscriminant: ContractDiscriminant
-    ContractDisplayName: ContractDisplayName
-    ContractEventParamSpec: ContractEventParamSpec
-    ContractEventSpec: ContractEventSpec
-    ContractExecResult: ContractExecResult
-    ContractExecResultErr: ContractExecResultErr
-    ContractExecResultErrModule: ContractExecResultErrModule
-    ContractExecResultOk: ContractExecResultOk
-    ContractExecResultResult: ContractExecResultResult
-    ContractExecResultSuccessTo255: ContractExecResultSuccessTo255
-    ContractExecResultSuccessTo260: ContractExecResultSuccessTo260
-    ContractExecResultTo255: ContractExecResultTo255
-    ContractExecResultTo260: ContractExecResultTo260
-    ContractExecResultTo267: ContractExecResultTo267
-    ContractInfo: ContractInfo
-    ContractInstantiateResult: ContractInstantiateResult
-    ContractLayoutArray: ContractLayoutArray
-    ContractLayoutCell: ContractLayoutCell
-    ContractLayoutEnum: ContractLayoutEnum
-    ContractLayoutHash: ContractLayoutHash
-    ContractLayoutHashingStrategy: ContractLayoutHashingStrategy
-    ContractLayoutKey: ContractLayoutKey
-    ContractLayoutStruct: ContractLayoutStruct
-    ContractLayoutStructField: ContractLayoutStructField
-    ContractMessageParamSpec: ContractMessageParamSpec
-    ContractMessageSpec: ContractMessageSpec
-    ContractProject: ContractProject
-    ContractProjectContract: ContractProjectContract
-    ContractProjectSource: ContractProjectSource
-    ContractSelector: ContractSelector
-    ContractStorageKey: ContractStorageKey
-    ContractStorageLayout: ContractStorageLayout
-    ContractTypeSpec: ContractTypeSpec
-    Conviction: Conviction
-    CoreAssignment: CoreAssignment
-    CoreIndex: CoreIndex
-    CoreOccupied: CoreOccupied
-    CouncilMemberOf: CouncilMemberOf
-    CouncilStage: CouncilStage
-    CouncilStageAnnouncing: CouncilStageAnnouncing
-    CouncilStageElection: CouncilStageElection
-    CouncilStageUpdate: CouncilStageUpdate
-    CreatedBlock: CreatedBlock
-    CreateOpeningParameters: CreateOpeningParameters
-    CuratorGroup: CuratorGroup
-    CuratorGroupId: CuratorGroupId
-    CuratorId: CuratorId
-    Data: Data
-    DataObject: DataObject
-    DataObjectCreationParameters: DataObjectCreationParameters
-    DataObjectId: DataObjectId
-    DataObjectIdMap: DataObjectIdMap
-    DataObjectIdSet: DataObjectIdSet
-    DeferredOffenceOf: DeferredOffenceOf
-    DefunctVoter: DefunctVoter
-    DelayKind: DelayKind
-    DelayKindBest: DelayKindBest
-    Delegations: Delegations
-    DeletedContract: DeletedContract
-    DeliveredMessages: DeliveredMessages
-    DepositBalance: DepositBalance
-    DepositBalanceOf: DepositBalanceOf
-    DestroyWitness: DestroyWitness
-    Digest: Digest
-    DigestItem: DigestItem
-    DigestOf: DigestOf
-    DiscussionPost: DiscussionPost
-    DiscussionThread: DiscussionThread
-    DispatchClass: DispatchClass
-    DispatchError: DispatchError
-    DispatchErrorModule: DispatchErrorModule
-    DispatchErrorTo198: DispatchErrorTo198
-    DispatchFeePayment: DispatchFeePayment
-    DispatchInfo: DispatchInfo
-    DispatchInfoTo190: DispatchInfoTo190
-    DispatchInfoTo244: DispatchInfoTo244
-    DispatchOutcome: DispatchOutcome
-    DispatchResult: DispatchResult
-    DispatchResultOf: DispatchResultOf
-    DispatchResultTo198: DispatchResultTo198
-    DisputeLocation: DisputeLocation
-    DisputeResult: DisputeResult
-    DisputeState: DisputeState
-    DisputeStatement: DisputeStatement
-    DisputeStatementSet: DisputeStatementSet
-    DistributionBucket: DistributionBucket
-    DistributionBucketFamily: DistributionBucketFamily
-    DistributionBucketFamilyId: DistributionBucketFamilyId
-    DistributionBucketId: DistributionBucketId
-    DistributionBucketIndex: DistributionBucketIndex
-    DistributionBucketIndexSet: DistributionBucketIndexSet
-    DistributionBucketsPerBagValueConstraint: DistributionBucketsPerBagValueConstraint
-    DoubleEncodedCall: DoubleEncodedCall
-    DoubleVoteReport: DoubleVoteReport
-    DownwardMessage: DownwardMessage
-    Dynamic: Dynamic
-    DynamicBagCreationPolicy: DynamicBagCreationPolicy
-    DynamicBagCreationPolicyDistributorFamiliesMap: DynamicBagCreationPolicyDistributorFamiliesMap
-    DynamicBagId: DynamicBagId
-    DynamicBagType: DynamicBagType
-    DynBagCreationParameters: DynBagCreationParameters
-    EcdsaSignature: EcdsaSignature
-    Ed25519Signature: Ed25519Signature
-    ElectionCompute: ElectionCompute
-    ElectionPhase: ElectionPhase
-    ElectionResult: ElectionResult
-    ElectionScore: ElectionScore
-    ElectionSize: ElectionSize
-    ElectionStatus: ElectionStatus
-    EncodedFinalityProofs: EncodedFinalityProofs
-    EncodedJustification: EncodedJustification
-    EnglishAuction: EnglishAuction
-    EnglishAuctionBid: EnglishAuctionBid
-    EnglishAuctionParams: EnglishAuctionParams
-    Entry: Entry
-    EntryId: EntryId
-    EpochAuthorship: EpochAuthorship
-    Era: Era
-    EraIndex: EraIndex
-    EraPoints: EraPoints
-    EraRewardPoints: EraRewardPoints
-    EraRewards: EraRewards
-    ErrorMetadataLatest: ErrorMetadataLatest
-    ErrorMetadataV10: ErrorMetadataV10
-    ErrorMetadataV11: ErrorMetadataV11
-    ErrorMetadataV12: ErrorMetadataV12
-    ErrorMetadataV13: ErrorMetadataV13
-    ErrorMetadataV14: ErrorMetadataV14
-    ErrorMetadataV9: ErrorMetadataV9
-    EthAccount: EthAccount
-    EthBlock: EthBlock
-    EthBloom: EthBloom
-    EthCallRequest: EthCallRequest
-    EthereumAccountId: EthereumAccountId
-    EthereumAddress: EthereumAddress
-    EthereumLookupSource: EthereumLookupSource
-    EthereumSignature: EthereumSignature
-    EthFilter: EthFilter
-    EthFilterAddress: EthFilterAddress
-    EthFilterChanges: EthFilterChanges
-    EthFilterTopic: EthFilterTopic
-    EthFilterTopicEntry: EthFilterTopicEntry
-    EthFilterTopicInner: EthFilterTopicInner
-    EthHeader: EthHeader
-    EthLog: EthLog
-    EthReceipt: EthReceipt
-    EthRichBlock: EthRichBlock
-    EthRichHeader: EthRichHeader
-    EthStorageProof: EthStorageProof
-    EthSubKind: EthSubKind
-    EthSubParams: EthSubParams
-    EthSubResult: EthSubResult
-    EthSyncInfo: EthSyncInfo
-    EthSyncStatus: EthSyncStatus
-    EthTransaction: EthTransaction
-    EthTransactionAction: EthTransactionAction
-    EthTransactionCondition: EthTransactionCondition
-    EthTransactionRequest: EthTransactionRequest
-    EthTransactionSignature: EthTransactionSignature
-    EthTransactionStatus: EthTransactionStatus
-    EthWork: EthWork
-    Event: Event
-    EventId: EventId
-    EventIndex: EventIndex
-    EventMetadataLatest: EventMetadataLatest
-    EventMetadataV10: EventMetadataV10
-    EventMetadataV11: EventMetadataV11
-    EventMetadataV12: EventMetadataV12
-    EventMetadataV13: EventMetadataV13
-    EventMetadataV14: EventMetadataV14
-    EventMetadataV9: EventMetadataV9
-    EventRecord: EventRecord
-    EvmAccount: EvmAccount
-    EvmLog: EvmLog
-    EvmVicinity: EvmVicinity
-    ExecReturnValue: ExecReturnValue
-    ExecutionFailed: ExecutionFailed
-    ExecutionStatus: ExecutionStatus
-    ExitError: ExitError
-    ExitFatal: ExitFatal
-    ExitReason: ExitReason
-    ExitRevert: ExitRevert
-    ExitSucceed: ExitSucceed
-    ExplicitDisputeStatement: ExplicitDisputeStatement
-    Exposure: Exposure
-    ExtendedBalance: ExtendedBalance
-    ExtendedPostId: ExtendedPostId
-    Extrinsic: Extrinsic
-    ExtrinsicEra: ExtrinsicEra
-    ExtrinsicMetadataLatest: ExtrinsicMetadataLatest
-    ExtrinsicMetadataV11: ExtrinsicMetadataV11
-    ExtrinsicMetadataV12: ExtrinsicMetadataV12
-    ExtrinsicMetadataV13: ExtrinsicMetadataV13
-    ExtrinsicMetadataV14: ExtrinsicMetadataV14
-    ExtrinsicOrHash: ExtrinsicOrHash
-    ExtrinsicPayload: ExtrinsicPayload
-    ExtrinsicPayloadUnknown: ExtrinsicPayloadUnknown
-    ExtrinsicPayloadV4: ExtrinsicPayloadV4
-    ExtrinsicSignature: ExtrinsicSignature
-    ExtrinsicSignatureV4: ExtrinsicSignatureV4
-    ExtrinsicStatus: ExtrinsicStatus
-    ExtrinsicsWeight: ExtrinsicsWeight
-    ExtrinsicUnknown: ExtrinsicUnknown
-    ExtrinsicV4: ExtrinsicV4
-    FeeDetails: FeeDetails
-    FillOpeningParameters: FillOpeningParameters
-    Fixed128: Fixed128
-    Fixed64: Fixed64
-    FixedI128: FixedI128
-    FixedI64: FixedI64
-    FixedU128: FixedU128
-    FixedU64: FixedU64
-    Forcing: Forcing
-    ForkTreePendingChange: ForkTreePendingChange
-    ForkTreePendingChangeNode: ForkTreePendingChangeNode
-    ForumUserId: ForumUserId
-    FullIdentification: FullIdentification
-    FunctionArgumentMetadataLatest: FunctionArgumentMetadataLatest
-    FunctionArgumentMetadataV10: FunctionArgumentMetadataV10
-    FunctionArgumentMetadataV11: FunctionArgumentMetadataV11
-    FunctionArgumentMetadataV12: FunctionArgumentMetadataV12
-    FunctionArgumentMetadataV13: FunctionArgumentMetadataV13
-    FunctionArgumentMetadataV14: FunctionArgumentMetadataV14
-    FunctionArgumentMetadataV9: FunctionArgumentMetadataV9
-    FunctionMetadataLatest: FunctionMetadataLatest
-    FunctionMetadataV10: FunctionMetadataV10
-    FunctionMetadataV11: FunctionMetadataV11
-    FunctionMetadataV12: FunctionMetadataV12
-    FunctionMetadataV13: FunctionMetadataV13
-    FunctionMetadataV14: FunctionMetadataV14
-    FunctionMetadataV9: FunctionMetadataV9
-    FundIndex: FundIndex
-    FundInfo: FundInfo
-    FundingRequestParameters: FundingRequestParameters
-    FundingType: FundingType
-    FundingType_Limited: FundingType_Limited
-    FundingType_Perpetual: FundingType_Perpetual
-    Fungibility: Fungibility
-    Gas: Gas
-    GeneralProposalParameters: GeneralProposalParameters
-    GiltBid: GiltBid
-    GlobalValidationData: GlobalValidationData
-    GlobalValidationSchedule: GlobalValidationSchedule
-    GrandpaCommit: GrandpaCommit
-    GrandpaEquivocation: GrandpaEquivocation
-    GrandpaEquivocationProof: GrandpaEquivocationProof
-    GrandpaEquivocationValue: GrandpaEquivocationValue
-    GrandpaJustification: GrandpaJustification
-    GrandpaPrecommit: GrandpaPrecommit
-    GrandpaPrevote: GrandpaPrevote
-    GrandpaSignedPrecommit: GrandpaSignedPrecommit
-    GroupIndex: GroupIndex
-    H1024: H1024
-    H128: H128
-    H160: H160
-    H2048: H2048
-    H256: H256
-    H32: H32
-    H512: H512
-    H64: H64
-    Hash: Hash
-    HeadData: HeadData
-    Header: Header
-    HeaderPartial: HeaderPartial
-    Health: Health
-    Heartbeat: Heartbeat
-    HeartbeatTo244: HeartbeatTo244
-    HostConfiguration: HostConfiguration
-    HostFnWeights: HostFnWeights
-    HostFnWeightsTo264: HostFnWeightsTo264
-    HrmpChannel: HrmpChannel
-    HrmpChannelId: HrmpChannelId
-    HrmpOpenChannelRequest: HrmpOpenChannelRequest
-    i128: i128
-    I128: I128
-    i16: i16
-    I16: I16
-    i256: i256
-    I256: I256
-    i32: i32
-    I32: I32
-    I32F32: I32F32
-    i64: i64
-    I64: I64
-    i8: i8
-    I8: I8
-    IdentificationTuple: IdentificationTuple
-    IdentityFields: IdentityFields
-    IdentityInfo: IdentityInfo
-    IdentityInfoAdditional: IdentityInfoAdditional
-    IdentityJudgement: IdentityJudgement
-    ImmortalEra: ImmortalEra
-    ImportedAux: ImportedAux
-    InboundDownwardMessage: InboundDownwardMessage
-    InboundHrmpMessage: InboundHrmpMessage
-    InboundHrmpMessages: InboundHrmpMessages
-    InboundLaneData: InboundLaneData
-    InboundRelayer: InboundRelayer
-    InboundStatus: InboundStatus
-    IncludedBlocks: IncludedBlocks
-    InclusionFee: InclusionFee
-    IncomingParachain: IncomingParachain
-    IncomingParachainDeploy: IncomingParachainDeploy
-    IncomingParachainFixed: IncomingParachainFixed
-    Index: Index
-    IndicesLookupSource: IndicesLookupSource
-    IndividualExposure: IndividualExposure
-    InitializationData: InitializationData
-    InitTransactionalStatus: InitTransactionalStatus
-    InputValidationLengthConstraintU64: InputValidationLengthConstraintU64
-    InstanceDetails: InstanceDetails
-    InstanceId: InstanceId
-    InstanceMetadata: InstanceMetadata
-    InstantiateRequest: InstantiateRequest
-    InstantiateReturnValue: InstantiateReturnValue
-    InstructionV2: InstructionV2
-    InstructionWeights: InstructionWeights
-    InteriorMultiLocation: InteriorMultiLocation
-    InvalidDisputeStatementKind: InvalidDisputeStatementKind
-    InvalidTransaction: InvalidTransaction
-    InviteMembershipParameters: InviteMembershipParameters
-    IsCensored: IsCensored
-    JoyBalance: JoyBalance
-    Json: Json
-    Junction: Junction
-    Junctions: Junctions
-    JunctionsV1: JunctionsV1
-    JunctionsV2: JunctionsV2
-    JunctionV0: JunctionV0
-    JunctionV1: JunctionV1
-    JunctionV2: JunctionV2
-    Justification: Justification
-    JustificationNotification: JustificationNotification
-    Justifications: Justifications
-    Key: Key
-    KeyOwnerProof: KeyOwnerProof
-    Keys: Keys
-    KeyType: KeyType
-    KeyTypeId: KeyTypeId
-    KeyValue: KeyValue
-    KeyValueOption: KeyValueOption
-    Kind: Kind
-    LaneId: LaneId
-    LastContribution: LastContribution
-    LastRuntimeUpgradeInfo: LastRuntimeUpgradeInfo
-    LeasePeriod: LeasePeriod
-    LeasePeriodOf: LeasePeriodOf
-    LimitPerPeriod: LimitPerPeriod
-    Limits: Limits
-    LimitsTo264: LimitsTo264
-    LocalValidationData: LocalValidationData
-    LockIdentifier: LockIdentifier
-    LookupSource: LookupSource
-    LookupTarget: LookupTarget
-    LotteryConfig: LotteryConfig
-    MaxNumber: MaxNumber
-    MaybeRandomness: MaybeRandomness
-    MaybeVrf: MaybeVrf
-    MemberCount: MemberCount
-    MemberId: MemberId
-    Membership: Membership
-    MembershipProof: MembershipProof
-    MerkleProof: MerkleProof
-    MerkleSide: MerkleSide
-    MessageData: MessageData
-    MessageId: MessageId
-    MessageIngestionType: MessageIngestionType
-    MessageKey: MessageKey
-    MessageNonce: MessageNonce
-    MessageQueueChain: MessageQueueChain
-    MessagesDeliveryProofOf: MessagesDeliveryProofOf
-    MessagesProofOf: MessagesProofOf
-    MessagingStateSnapshot: MessagingStateSnapshot
-    MessagingStateSnapshotEgressEntry: MessagingStateSnapshotEgressEntry
-    MetadataAll: MetadataAll
-    MetadataLatest: MetadataLatest
-    MetadataV10: MetadataV10
-    MetadataV11: MetadataV11
-    MetadataV12: MetadataV12
-    MetadataV13: MetadataV13
-    MetadataV14: MetadataV14
-    MetadataV9: MetadataV9
-    MmrLeafProof: MmrLeafProof
-    MmrRootHash: MmrRootHash
-    ModerationPermissionsByLevel: ModerationPermissionsByLevel
-    ModeratorId: ModeratorId
-    ModuleConstantMetadataLatest: ModuleConstantMetadataLatest
-    ModuleConstantMetadataV10: ModuleConstantMetadataV10
-    ModuleConstantMetadataV11: ModuleConstantMetadataV11
-    ModuleConstantMetadataV12: ModuleConstantMetadataV12
-    ModuleConstantMetadataV13: ModuleConstantMetadataV13
-    ModuleConstantMetadataV9: ModuleConstantMetadataV9
-    ModuleId: ModuleId
-    ModuleMetadataLatest: ModuleMetadataLatest
-    ModuleMetadataV10: ModuleMetadataV10
-    ModuleMetadataV11: ModuleMetadataV11
-    ModuleMetadataV12: ModuleMetadataV12
-    ModuleMetadataV13: ModuleMetadataV13
-    ModuleMetadataV9: ModuleMetadataV9
-    Moment: Moment
-    MomentOf: MomentOf
-    MoreAttestations: MoreAttestations
-    MortalEra: MortalEra
-    MultiAddress: MultiAddress
-    MultiAsset: MultiAsset
-    MultiAssetFilter: MultiAssetFilter
-    MultiAssetFilterV1: MultiAssetFilterV1
-    MultiAssetFilterV2: MultiAssetFilterV2
-    MultiAssets: MultiAssets
-    MultiAssetsV1: MultiAssetsV1
-    MultiAssetsV2: MultiAssetsV2
-    MultiAssetV0: MultiAssetV0
-    MultiAssetV1: MultiAssetV1
-    MultiAssetV2: MultiAssetV2
-    MultiDisputeStatementSet: MultiDisputeStatementSet
-    MultiLocation: MultiLocation
-    MultiLocationV0: MultiLocationV0
-    MultiLocationV1: MultiLocationV1
-    MultiLocationV2: MultiLocationV2
-    Multiplier: Multiplier
-    Multisig: Multisig
-    MultiSignature: MultiSignature
-    MultiSigner: MultiSigner
-    NetworkId: NetworkId
-    NetworkState: NetworkState
-    NetworkStatePeerset: NetworkStatePeerset
-    NetworkStatePeersetInfo: NetworkStatePeersetInfo
-    NewBidder: NewBidder
-    NextAuthority: NextAuthority
-    NextConfigDescriptor: NextConfigDescriptor
-    NextConfigDescriptorV1: NextConfigDescriptorV1
-    NftCounter: NftCounter
-    NftIssuanceParameters: NftIssuanceParameters
-    NftLimitId: NftLimitId
-    NftLimitPeriod: NftLimitPeriod
-    NftMetadata: NftMetadata
-    NftOwner: NftOwner
-    NodeRole: NodeRole
-    Nominations: Nominations
-    NominatorIndex: NominatorIndex
-    NominatorIndexCompact: NominatorIndexCompact
-    NotConnectedPeer: NotConnectedPeer
-    Null: Null
-    OffchainAccuracy: OffchainAccuracy
-    OffchainAccuracyCompact: OffchainAccuracyCompact
-    OffenceDetails: OffenceDetails
-    Offender: Offender
-    OfferingState: OfferingState
-    OpaqueCall: OpaqueCall
-    OpaqueMultiaddr: OpaqueMultiaddr
-    OpaqueNetworkState: OpaqueNetworkState
-    OpaquePeerId: OpaquePeerId
-    OpaqueTimeSlot: OpaqueTimeSlot
-    OpenAuction: OpenAuction
-    OpenAuctionBid: OpenAuctionBid
-    OpenAuctionId: OpenAuctionId
-    OpenAuctionParams: OpenAuctionParams
-    Opening: Opening
-    OpeningId: OpeningId
-    OpeningType: OpeningType
-    OpenTip: OpenTip
-    OpenTipFinderTo225: OpenTipFinderTo225
-    OpenTipTip: OpenTipTip
-    OpenTipTo225: OpenTipTo225
-    OperatingMode: OperatingMode
-    OptionResult: OptionResult
-    OracleJudgment: OracleJudgment
-    OracleWorkEntryJudgment: OracleWorkEntryJudgment
-    OracleWorkEntryJudgment_Winner: OracleWorkEntryJudgment_Winner
-    Origin: Origin
-    OriginCaller: OriginCaller
-    OriginKindV0: OriginKindV0
-    OriginKindV1: OriginKindV1
-    OriginKindV2: OriginKindV2
-    OutboundHrmpMessage: OutboundHrmpMessage
-    OutboundLaneData: OutboundLaneData
-    OutboundMessageFee: OutboundMessageFee
-    OutboundPayload: OutboundPayload
-    OutboundStatus: OutboundStatus
-    Outcome: Outcome
-    OverweightIndex: OverweightIndex
-    OwnedNft: OwnedNft
-    Owner: Owner
-    PageCounter: PageCounter
-    PageIndexData: PageIndexData
-    PalletCallMetadataLatest: PalletCallMetadataLatest
-    PalletCallMetadataV14: PalletCallMetadataV14
-    PalletConstantMetadataLatest: PalletConstantMetadataLatest
-    PalletConstantMetadataV14: PalletConstantMetadataV14
-    PalletErrorMetadataLatest: PalletErrorMetadataLatest
-    PalletErrorMetadataV14: PalletErrorMetadataV14
-    PalletEventMetadataLatest: PalletEventMetadataLatest
-    PalletEventMetadataV14: PalletEventMetadataV14
-    PalletId: PalletId
-    PalletMetadataLatest: PalletMetadataLatest
-    PalletMetadataV14: PalletMetadataV14
-    PalletsOrigin: PalletsOrigin
-    PalletStorageMetadataLatest: PalletStorageMetadataLatest
-    PalletStorageMetadataV14: PalletStorageMetadataV14
-    PalletVersion: PalletVersion
-    ParachainDispatchOrigin: ParachainDispatchOrigin
-    ParachainInherentData: ParachainInherentData
-    ParachainProposal: ParachainProposal
-    ParachainsInherentData: ParachainsInherentData
-    ParaGenesisArgs: ParaGenesisArgs
-    ParaId: ParaId
-    ParaInfo: ParaInfo
-    ParaLifecycle: ParaLifecycle
-    Parameter: Parameter
-    ParaPastCodeMeta: ParaPastCodeMeta
-    ParaScheduling: ParaScheduling
-    ParathreadClaim: ParathreadClaim
-    ParathreadClaimQueue: ParathreadClaimQueue
-    ParathreadEntry: ParathreadEntry
-    ParaValidatorIndex: ParaValidatorIndex
-    ParticipantId: ParticipantId
-    PausableChannelFeature: PausableChannelFeature
-    Payment: Payment
-    PaymentWithVesting: PaymentWithVesting
-    Pays: Pays
-    Peer: Peer
-    PeerEndpoint: PeerEndpoint
-    PeerEndpointAddr: PeerEndpointAddr
-    PeerInfo: PeerInfo
-    PeerPing: PeerPing
-    Penalty: Penalty
-    PendingChange: PendingChange
-    PendingPause: PendingPause
-    PendingResume: PendingResume
-    Perbill: Perbill
-    Percent: Percent
-    PerDispatchClassU32: PerDispatchClassU32
-    PerDispatchClassWeight: PerDispatchClassWeight
-    PerDispatchClassWeightsPerClass: PerDispatchClassWeightsPerClass
-    Period: Period
-    Permill: Permill
-    PermissionLatest: PermissionLatest
-    PermissionsV1: PermissionsV1
-    PermissionVersions: PermissionVersions
-    Perquintill: Perquintill
-    PersistedValidationData: PersistedValidationData
-    PerU16: PerU16
-    Phantom: Phantom
-    PhantomData: PhantomData
-    Phase: Phase
-    PhragmenScore: PhragmenScore
-    Points: Points
-    Poll: Poll
-    PollAlternative: PollAlternative
-    PollInput: PollInput
-    PortableRegistry: PortableRegistry
-    PortableType: PortableType
-    Post: Post
-    PostId: PostId
-    PostReactionId: PostReactionId
-    Precommits: Precommits
-    PrefabWasmModule: PrefabWasmModule
-    PrefixedStorageKey: PrefixedStorageKey
-    PreimageStatus: PreimageStatus
-    PreimageStatusAvailable: PreimageStatusAvailable
-    PreRuntime: PreRuntime
-    Prevotes: Prevotes
-    Priority: Priority
-    PriorLock: PriorLock
-    PrivilegedActor: PrivilegedActor
-    ProofElement: ProofElement
-    PropIndex: PropIndex
-    Proposal: Proposal
-    ProposalDecision: ProposalDecision
-    ProposalDetails: ProposalDetails
-    ProposalDetailsOf: ProposalDetailsOf
-    ProposalId: ProposalId
-    ProposalIndex: ProposalIndex
-    ProposalOf: ProposalOf
-    ProposalParameters: ProposalParameters
-    ProposalStatus: ProposalStatus
-    ProxyAnnouncement: ProxyAnnouncement
-    ProxyDefinition: ProxyDefinition
-    ProxyState: ProxyState
-    ProxyType: ProxyType
-    PullPayment: PullPayment
-    QueryId: QueryId
-    QueryStatus: QueryStatus
-    QueueConfigData: QueueConfigData
-    QueuedParathread: QueuedParathread
-    Randomness: Randomness
-    Raw: Raw
-    RawAuraPreDigest: RawAuraPreDigest
-    RawBabePreDigest: RawBabePreDigest
-    RawBabePreDigestCompat: RawBabePreDigestCompat
-    RawBabePreDigestPrimary: RawBabePreDigestPrimary
-    RawBabePreDigestPrimaryTo159: RawBabePreDigestPrimaryTo159
-    RawBabePreDigestSecondaryPlain: RawBabePreDigestSecondaryPlain
-    RawBabePreDigestSecondaryTo159: RawBabePreDigestSecondaryTo159
-    RawBabePreDigestSecondaryVRF: RawBabePreDigestSecondaryVRF
-    RawBabePreDigestTo159: RawBabePreDigestTo159
-    RawOrigin: RawOrigin
-    RawSolution: RawSolution
-    RawSolutionTo265: RawSolutionTo265
-    RawSolutionWith16: RawSolutionWith16
-    RawSolutionWith24: RawSolutionWith24
-    RawVRFOutput: RawVRFOutput
-    ReadProof: ReadProof
-    ReadySolution: ReadySolution
-    Reasons: Reasons
-    RecoveryConfig: RecoveryConfig
-    RefCount: RefCount
-    RefCountTo259: RefCountTo259
-    ReferendumIndex: ReferendumIndex
-    ReferendumInfo: ReferendumInfo
-    ReferendumInfoFinished: ReferendumInfoFinished
-    ReferendumInfoTo239: ReferendumInfoTo239
-    ReferendumStage: ReferendumStage
-    ReferendumStageRevealing: ReferendumStageRevealing
-    ReferendumStageVoting: ReferendumStageVoting
-    ReferendumStatus: ReferendumStatus
-    RegisteredParachainInfo: RegisteredParachainInfo
-    RegistrarIndex: RegistrarIndex
-    RegistrarInfo: RegistrarInfo
-    Registration: Registration
-    RegistrationJudgement: RegistrationJudgement
-    RelayBlockNumber: RelayBlockNumber
-    RelayChainBlockNumber: RelayChainBlockNumber
-    RelayChainHash: RelayChainHash
-    RelayerId: RelayerId
-    RelayHash: RelayHash
-    Releases: Releases
-    Remark: Remark
-    Renouncing: Renouncing
-    RentProjection: RentProjection
-    ReplacementTimes: ReplacementTimes
-    Reply: Reply
-    ReplyId: ReplyId
-    ReplyToDelete: ReplyToDelete
-    ReportedRoundStates: ReportedRoundStates
-    Reporter: Reporter
-    ReportIdOf: ReportIdOf
-    ReserveData: ReserveData
-    ReserveIdentifier: ReserveIdentifier
-    Response: Response
-    ResponseV0: ResponseV0
-    ResponseV1: ResponseV1
-    ResponseV2: ResponseV2
-    ResponseV2Error: ResponseV2Error
-    ResponseV2Result: ResponseV2Result
-    Retriable: Retriable
-    RewardDestination: RewardDestination
-    RewardPaymentType: RewardPaymentType
-    RewardPoint: RewardPoint
-    RoundSnapshot: RoundSnapshot
-    RoundState: RoundState
-    Royalty: Royalty
-    RpcMethods: RpcMethods
-    RuntimeDbWeight: RuntimeDbWeight
-    RuntimeDispatchInfo: RuntimeDispatchInfo
-    RuntimeVersion: RuntimeVersion
-    RuntimeVersionApi: RuntimeVersionApi
-    RuntimeVersionPartial: RuntimeVersionPartial
-    Schedule: Schedule
-    Scheduled: Scheduled
-    ScheduledTo254: ScheduledTo254
-    SchedulePeriod: SchedulePeriod
-    SchedulePriority: SchedulePriority
-    ScheduleTo212: ScheduleTo212
-    ScheduleTo258: ScheduleTo258
-    ScheduleTo264: ScheduleTo264
-    Scheduling: Scheduling
-    Seal: Seal
-    SealV0: SealV0
-    SeatHolder: SeatHolder
-    SeedOf: SeedOf
-    ServiceQuality: ServiceQuality
-    SessionIndex: SessionIndex
-    SessionInfo: SessionInfo
-    SessionInfoValidatorGroup: SessionInfoValidatorGroup
-    SessionKeys1: SessionKeys1
-    SessionKeys10: SessionKeys10
-    SessionKeys10B: SessionKeys10B
-    SessionKeys2: SessionKeys2
-    SessionKeys3: SessionKeys3
-    SessionKeys4: SessionKeys4
-    SessionKeys5: SessionKeys5
-    SessionKeys6: SessionKeys6
-    SessionKeys6B: SessionKeys6B
-    SessionKeys7: SessionKeys7
-    SessionKeys7B: SessionKeys7B
-    SessionKeys8: SessionKeys8
-    SessionKeys8B: SessionKeys8B
-    SessionKeys9: SessionKeys9
-    SessionKeys9B: SessionKeys9B
-    SetId: SetId
-    SetIndex: SetIndex
-    SetLeadParams: SetLeadParams
-    Si0Field: Si0Field
-    Si0LookupTypeId: Si0LookupTypeId
-    Si0Path: Si0Path
-    Si0Type: Si0Type
-    Si0TypeDef: Si0TypeDef
-    Si0TypeDefArray: Si0TypeDefArray
-    Si0TypeDefBitSequence: Si0TypeDefBitSequence
-    Si0TypeDefCompact: Si0TypeDefCompact
-    Si0TypeDefComposite: Si0TypeDefComposite
-    Si0TypeDefPhantom: Si0TypeDefPhantom
-    Si0TypeDefPrimitive: Si0TypeDefPrimitive
-    Si0TypeDefSequence: Si0TypeDefSequence
-    Si0TypeDefTuple: Si0TypeDefTuple
-    Si0TypeDefVariant: Si0TypeDefVariant
-    Si0TypeParameter: Si0TypeParameter
-    Si0Variant: Si0Variant
-    Side: Side
-    SiField: SiField
-    Signature: Signature
-    SignedAvailabilityBitfield: SignedAvailabilityBitfield
-    SignedAvailabilityBitfields: SignedAvailabilityBitfields
-    SignedBlock: SignedBlock
-    SignedBlockWithJustification: SignedBlockWithJustification
-    SignedBlockWithJustifications: SignedBlockWithJustifications
-    SignedExtensionMetadataLatest: SignedExtensionMetadataLatest
-    SignedExtensionMetadataV14: SignedExtensionMetadataV14
-    SignedSubmission: SignedSubmission
-    SignedSubmissionOf: SignedSubmissionOf
-    SignedSubmissionTo276: SignedSubmissionTo276
-    SignerPayload: SignerPayload
-    SigningContext: SigningContext
-    SiLookupTypeId: SiLookupTypeId
-    SingleDataObjectUploadParams: SingleDataObjectUploadParams
-    SiPath: SiPath
-    SiType: SiType
-    SiTypeDef: SiTypeDef
-    SiTypeDefArray: SiTypeDefArray
-    SiTypeDefBitSequence: SiTypeDefBitSequence
-    SiTypeDefCompact: SiTypeDefCompact
-    SiTypeDefComposite: SiTypeDefComposite
-    SiTypeDefPrimitive: SiTypeDefPrimitive
-    SiTypeDefSequence: SiTypeDefSequence
-    SiTypeDefTuple: SiTypeDefTuple
-    SiTypeDefVariant: SiTypeDefVariant
-    SiTypeParameter: SiTypeParameter
-    SiVariant: SiVariant
-    SlashingSpans: SlashingSpans
-    SlashingSpansTo204: SlashingSpansTo204
-    SlashJournalEntry: SlashJournalEntry
-    Slot: Slot
-    SlotNumber: SlotNumber
-    SlotRange: SlotRange
-    SocietyJudgement: SocietyJudgement
-    SocietyVote: SocietyVote
-    SolutionOrSnapshotSize: SolutionOrSnapshotSize
-    SolutionSupport: SolutionSupport
-    SolutionSupports: SolutionSupports
-    SpanIndex: SpanIndex
-    SpanRecord: SpanRecord
-    Sr25519Signature: Sr25519Signature
-    StakeParameters: StakeParameters
-    StakePolicy: StakePolicy
-    StakingAccountMemberBinding: StakingAccountMemberBinding
-    StakingLedger: StakingLedger
-    StakingLedgerTo223: StakingLedgerTo223
-    StakingLedgerTo240: StakingLedgerTo240
-    Statement: Statement
-    StatementKind: StatementKind
-    Static: Static
-    StaticBagId: StaticBagId
-    StorageAssets: StorageAssets
-    StorageBucket: StorageBucket
-    StorageBucketId: StorageBucketId
-    StorageBucketIdSet: StorageBucketIdSet
-    StorageBucketOperatorStatus: StorageBucketOperatorStatus
-    StorageBucketsPerBagValueConstraint: StorageBucketsPerBagValueConstraint
-    StorageChangeSet: StorageChangeSet
-    StorageData: StorageData
-    StorageEntryMetadataLatest: StorageEntryMetadataLatest
-    StorageEntryMetadataV10: StorageEntryMetadataV10
-    StorageEntryMetadataV11: StorageEntryMetadataV11
-    StorageEntryMetadataV12: StorageEntryMetadataV12
-    StorageEntryMetadataV13: StorageEntryMetadataV13
-    StorageEntryMetadataV14: StorageEntryMetadataV14
-    StorageEntryMetadataV9: StorageEntryMetadataV9
-    StorageEntryModifierLatest: StorageEntryModifierLatest
-    StorageEntryModifierV10: StorageEntryModifierV10
-    StorageEntryModifierV11: StorageEntryModifierV11
-    StorageEntryModifierV12: StorageEntryModifierV12
-    StorageEntryModifierV13: StorageEntryModifierV13
-    StorageEntryModifierV14: StorageEntryModifierV14
-    StorageEntryModifierV9: StorageEntryModifierV9
-    StorageEntryTypeLatest: StorageEntryTypeLatest
-    StorageEntryTypeV10: StorageEntryTypeV10
-    StorageEntryTypeV11: StorageEntryTypeV11
-    StorageEntryTypeV12: StorageEntryTypeV12
-    StorageEntryTypeV13: StorageEntryTypeV13
-    StorageEntryTypeV14: StorageEntryTypeV14
-    StorageEntryTypeV9: StorageEntryTypeV9
-    StorageHasher: StorageHasher
-    StorageHasherV10: StorageHasherV10
-    StorageHasherV11: StorageHasherV11
-    StorageHasherV12: StorageHasherV12
-    StorageHasherV13: StorageHasherV13
-    StorageHasherV14: StorageHasherV14
-    StorageHasherV9: StorageHasherV9
-    StorageKey: StorageKey
-    StorageKind: StorageKind
-    StorageMetadataLatest: StorageMetadataLatest
-    StorageMetadataV10: StorageMetadataV10
-    StorageMetadataV11: StorageMetadataV11
-    StorageMetadataV12: StorageMetadataV12
-    StorageMetadataV13: StorageMetadataV13
-    StorageMetadataV9: StorageMetadataV9
-    StorageProof: StorageProof
-    StorageProviderId: StorageProviderId
-    StoredPendingChange: StoredPendingChange
-    StoredState: StoredState
-    StrikeCount: StrikeCount
-    SubId: SubId
-    SubmissionIndicesOf: SubmissionIndicesOf
-    Supports: Supports
-    SyncState: SyncState
-    SystemInherentData: SystemInherentData
-    SystemOrigin: SystemOrigin
-    Tally: Tally
-    TaskAddress: TaskAddress
-    TAssetBalance: TAssetBalance
-    TAssetDepositBalance: TAssetDepositBalance
-    TerminateRoleParameters: TerminateRoleParameters
-    Text: Text
-    Thread: Thread
-    ThreadId: ThreadId
-    ThreadMode: ThreadMode
-    ThreadOf: ThreadOf
-    Timepoint: Timepoint
-    Title: Title
-    TokenAllocation: TokenAllocation
-    TokenError: TokenError
-    TokenId: TokenId
-    TokenIssuanceParams: TokenIssuanceParams
-    TokenSale: TokenSale
-    TokenSaleId: TokenSaleId
-    TokenSaleParams: TokenSaleParams
-    TombstoneContractInfo: TombstoneContractInfo
-    TraceBlockResponse: TraceBlockResponse
-    TraceError: TraceError
-    TransactionalStatus: TransactionalStatus
-    TransactionInfo: TransactionInfo
-    TransactionPriority: TransactionPriority
-    TransactionStorageProof: TransactionStorageProof
-    TransactionValidityError: TransactionValidityError
-    TransferParameters: TransferParameters
-    TransferPolicy: TransferPolicy
-    TransferPolicyParams: TransferPolicyParams
-    TransientValidationData: TransientValidationData
-    TreasuryProposal: TreasuryProposal
-    TrieId: TrieId
-    TrieIndex: TrieIndex
-    Type: Type
-    u128: u128
-    U128: U128
-    u16: u16
-    U16: U16
-    u256: u256
-    U256: U256
-    u32: u32
-    U32: U32
-    U32F32: U32F32
-    u64: u64
-    U64: U64
-    u8: u8
-    U8: U8
-    UnappliedSlash: UnappliedSlash
-    UnappliedSlashOther: UnappliedSlashOther
-    UncleEntryItem: UncleEntryItem
-    UnknownTransaction: UnknownTransaction
-    UnlockChunk: UnlockChunk
-    UnrewardedRelayer: UnrewardedRelayer
-    UnrewardedRelayersState: UnrewardedRelayersState
-    UpdateChannelPayoutsParameters: UpdateChannelPayoutsParameters
-    UpdatedBody: UpdatedBody
-    UpdatedTitle: UpdatedTitle
-    UpgradeGoAhead: UpgradeGoAhead
-    UpgradeRestriction: UpgradeRestriction
-    UploadContent: UploadContent
-    UploadParameters: UploadParameters
-    UpwardMessage: UpwardMessage
-    Url: Url
-    usize: usize
-    USize: USize
-    ValidatedPayment: ValidatedPayment
-    ValidationCode: ValidationCode
-    ValidationCodeHash: ValidationCodeHash
-    ValidationData: ValidationData
-    ValidationDataType: ValidationDataType
-    ValidationFunctionParams: ValidationFunctionParams
-    ValidatorCount: ValidatorCount
-    ValidatorId: ValidatorId
-    ValidatorIdOf: ValidatorIdOf
-    ValidatorIndex: ValidatorIndex
-    ValidatorIndexCompact: ValidatorIndexCompact
-    ValidatorPrefs: ValidatorPrefs
-    ValidatorPrefsTo145: ValidatorPrefsTo145
-    ValidatorPrefsTo196: ValidatorPrefsTo196
-    ValidatorPrefsWithBlocked: ValidatorPrefsWithBlocked
-    ValidatorPrefsWithCommission: ValidatorPrefsWithCommission
-    ValidatorSetId: ValidatorSetId
-    ValidatorSignature: ValidatorSignature
-    ValidDisputeStatementKind: ValidDisputeStatementKind
-    ValidityAttestation: ValidityAttestation
-    VecInboundHrmpMessage: VecInboundHrmpMessage
-    VersionedMultiAsset: VersionedMultiAsset
-    VersionedMultiAssets: VersionedMultiAssets
-    VersionedMultiLocation: VersionedMultiLocation
-    VersionedResponse: VersionedResponse
-    VersionedXcm: VersionedXcm
-    VersionMigrationStage: VersionMigrationStage
-    VestingInfo: VestingInfo
-    VestingSchedule: VestingSchedule
-    VestingScheduleParams: VestingScheduleParams
-    VestingSource: VestingSource
-    Video: Video
-    VideoCreationParameters: VideoCreationParameters
-    VideoId: VideoId
-    VideoUpdateParameters: VideoUpdateParameters
-    Vote: Vote
-    VoteIndex: VoteIndex
-    VoteKind: VoteKind
-    VotePower: VotePower
-    Voter: Voter
-    VoterInfo: VoterInfo
-    Votes: Votes
-    VotesTo230: VotesTo230
-    VoteThreshold: VoteThreshold
-    VoteWeight: VoteWeight
-    Voting: Voting
-    VotingDelegating: VotingDelegating
-    VotingDirect: VotingDirect
-    VotingDirectVote: VotingDirectVote
-    VotingResults: VotingResults
-    Voucher: Voucher
-    VouchingStatus: VouchingStatus
-    VrfData: VrfData
-    VrfOutput: VrfOutput
-    VrfProof: VrfProof
-    Weight: Weight
-    WeightLimitV2: WeightLimitV2
-    WeightMultiplier: WeightMultiplier
-    WeightPerClass: WeightPerClass
-    WeightToFeeCoefficient: WeightToFeeCoefficient
-    WhitelistParams: WhitelistParams
-    WildFungibility: WildFungibility
-    WildMultiAsset: WildMultiAsset
-    WildMultiAssetV1: WildMultiAssetV1
-    WinnersData: WinnersData
-    WinnersDataTuple: WinnersDataTuple
-    WinningData: WinningData
-    WinningDataEntry: WinningDataEntry
-    WithdrawReasons: WithdrawReasons
-    Worker: Worker
-    WorkerId: WorkerId
-    WorkerInfo: WorkerInfo
-    WorkingGroup: WorkingGroup
-    Xcm: Xcm
-    XcmAssetId: XcmAssetId
-    XcmError: XcmError
-    XcmErrorV0: XcmErrorV0
-    XcmErrorV1: XcmErrorV1
-    XcmErrorV2: XcmErrorV2
-    XcmOrder: XcmOrder
-    XcmOrderV0: XcmOrderV0
-    XcmOrderV1: XcmOrderV1
-    XcmOrigin: XcmOrigin
-    XcmOriginKind: XcmOriginKind
-    XcmpMessageFormat: XcmpMessageFormat
-    XcmV0: XcmV0
-    XcmV1: XcmV1
-    XcmV2: XcmV2
-    XcmVersion: XcmVersion
-    YearlyRate: YearlyRate
-  }
-}
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-consts.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-consts.d.ts
index 9799689..283aa4e 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-consts.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-consts.d.ts
@@ -1,7 +1,7 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
 import type { U8aFixed, Vec, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { Perbill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportWeightsRuntimeDbWeight, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, PalletContentLimitPerPeriod, PalletProposalsEngineProposalParameters, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+import type { FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, PalletContentLimitPerPeriod, PalletProposalsEngineProposalParameters, SpVersionRuntimeVersion, SpWeightsRuntimeDbWeight, SpWeightsWeightV2Weight } from '@polkadot/types/lookup';
 declare module '@polkadot/api-base/types/consts' {
     interface AugmentedConsts<ApiType extends ApiTypes> {
         appWorkingGroup: {
@@ -31,14 +31,6 @@ declare module '@polkadot/api-base/types/consts' {
              **/
             stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
         };
-        authorship: {
-            /**
-             * The number of blocks back we should accept uncles.
-             * This means that we will deal with uncle-parents that are
-             * `UncleGenerations + 1` before `now`.
-             **/
-            uncleGenerations: u32 & AugmentedConst<ApiType>;
-        };
         babe: {
             /**
              * The amount of time, in slots, that each epoch should last.
@@ -157,6 +149,10 @@ declare module '@polkadot/api-base/types/consts' {
              * Exports const - default global weekly NFT limit.
              **/
             defaultGlobalWeeklyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+            /**
+             * Export const - max cashout allowed limits
+             **/
+            maximumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
             /**
              * Exports const - max number of keys per curator_group.permissions_by_level map instance
              **/
@@ -169,6 +165,10 @@ declare module '@polkadot/api-base/types/consts' {
              * Exports const - max number of curators per group
              **/
             maxNumberOfCuratorsPerGroup: u32 & AugmentedConst<ApiType>;
+            /**
+             * Export const - min cashout allowed limits
+             **/
+            minimumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
         };
         contentWorkingGroup: {
             /**
@@ -284,6 +284,16 @@ declare module '@polkadot/api-base/types/consts' {
              * take place over multiple blocks.
              **/
             maxElectingVoters: u32 & AugmentedConst<ApiType>;
+            /**
+             * The maximum number of winners that can be elected by this `ElectionProvider`
+             * implementation.
+             *
+             * Note: This must always be greater or equal to `T::DataProvider::desired_targets()`.
+             **/
+            maxWinners: u32 & AugmentedConst<ApiType>;
+            minerMaxLength: u32 & AugmentedConst<ApiType>;
+            minerMaxVotesPerVoter: u32 & AugmentedConst<ApiType>;
+            minerMaxWeight: SpWeightsWeightV2Weight & AugmentedConst<ApiType>;
             /**
              * The priority of the unsigned transaction submitted in the unsigned-phase
              **/
@@ -328,7 +338,7 @@ declare module '@polkadot/api-base/types/consts' {
              * this pallet), then [`MinerConfig::solution_weight`] is used to compare against
              * this value.
              **/
-            signedMaxWeight: u64 & AugmentedConst<ApiType>;
+            signedMaxWeight: SpWeightsWeightV2Weight & AugmentedConst<ApiType>;
             /**
              * Duration of the signed phase.
              **/
@@ -393,6 +403,15 @@ declare module '@polkadot/api-base/types/consts' {
              * Max Authorities in use
              **/
             maxAuthorities: u32 & AugmentedConst<ApiType>;
+            /**
+             * The maximum number of entries to keep in the set id to session index mapping.
+             *
+             * Since the `SetIdSession` map is only used for validating equivocations this
+             * value should relate to the bonding duration of whatever staking system is
+             * being used (if any). If equivocation handling is not enabled then this value
+             * can be zero.
+             **/
+            maxSetIdSessionEntries: u64 & AugmentedConst<ApiType>;
         };
         imOnline: {
             /**
@@ -475,7 +494,7 @@ declare module '@polkadot/api-base/types/consts' {
             /**
              * The maximum amount of signatories allowed in the multisig.
              **/
-            maxSignatories: u16 & AugmentedConst<ApiType>;
+            maxSignatories: u32 & AugmentedConst<ApiType>;
         };
         operationsWorkingGroupAlpha: {
             /**
@@ -715,6 +734,29 @@ declare module '@polkadot/api-base/types/consts' {
              * Number of eras that staked funds must remain bonded for.
              **/
             bondingDuration: u32 & AugmentedConst<ApiType>;
+            /**
+             * Number of eras to keep in history.
+             *
+             * Following information is kept for eras in `[current_era -
+             * HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,
+             * `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,
+             * `ErasTotalStake`, `ErasStartSessionIndex`,
+             * `StakingLedger.claimed_rewards`.
+             *
+             * Must be more than the number of eras delayed by session.
+             * I.e. active era must always be in history. I.e. `active_era >
+             * current_era - history_depth` must be guaranteed.
+             *
+             * If migrating an existing pallet from storage value to config value,
+             * this should be set to same value or greater as in storage.
+             *
+             * Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`
+             * item `StakingLedger.claimed_rewards`. Setting this value lower than
+             * the existing value can lead to inconsistencies in the
+             * `StakingLedger` and will need to be handled properly in a migration.
+             * The test `reducing_history_depth_abrupt` shows this effect.
+             **/
+            historyDepth: u32 & AugmentedConst<ApiType>;
             /**
              * Maximum number of nominations per nominator.
              **/
@@ -727,8 +769,16 @@ declare module '@polkadot/api-base/types/consts' {
              **/
             maxNominatorRewardedPerValidator: u32 & AugmentedConst<ApiType>;
             /**
-             * The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively
-             * determines how many unique eras a staker may be unbonding in.
+             * The maximum number of `unlocking` chunks a [`StakingLedger`] can
+             * have. Effectively determines how many unique eras a staker may be
+             * unbonding in.
+             *
+             * Note: `MaxUnlockingChunks` is used as the upper bound for the
+             * `BoundedVec` item `StakingLedger.unlocking`. Setting this value
+             * lower than the existing value can lead to inconsistencies in the
+             * `StakingLedger` and will need to be handled properly in a runtime
+             * migration. The test `reducing_max_unlocking_chunks_abrupt` shows
+             * this effect.
              **/
             maxUnlockingChunks: u32 & AugmentedConst<ApiType>;
             /**
@@ -834,9 +884,9 @@ declare module '@polkadot/api-base/types/consts' {
             /**
              * The weight of runtime database operations the runtime can invoke.
              **/
-            dbWeight: FrameSupportWeightsRuntimeDbWeight & AugmentedConst<ApiType>;
+            dbWeight: SpWeightsRuntimeDbWeight & AugmentedConst<ApiType>;
             /**
-             * The designated SS85 prefix of this chain.
+             * The designated SS58 prefix of this chain.
              *
              * This replaces the "ss58Format" property declared in the chain spec. Reason is
              * that the runtime should know about the prefix in order to make use of it as
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-errors.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-errors.d.ts
index 7e3d672..8298bcd 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-errors.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-errors.d.ts
@@ -131,36 +131,6 @@ declare module '@polkadot/api-base/types/errors' {
              **/
             ZeroTokensFunding: AugmentedError<ApiType>;
         };
-        authorship: {
-            /**
-             * The uncle is genesis.
-             **/
-            GenesisUncle: AugmentedError<ApiType>;
-            /**
-             * The uncle parent not in the chain.
-             **/
-            InvalidUncleParent: AugmentedError<ApiType>;
-            /**
-             * The uncle isn't recent enough to be included.
-             **/
-            OldUncle: AugmentedError<ApiType>;
-            /**
-             * The uncle is too high in chain.
-             **/
-            TooHighUncle: AugmentedError<ApiType>;
-            /**
-             * Too many uncles.
-             **/
-            TooManyUncles: AugmentedError<ApiType>;
-            /**
-             * The uncle is already included.
-             **/
-            UncleAlreadyIncluded: AugmentedError<ApiType>;
-            /**
-             * Uncles already set in the block.
-             **/
-            UnclesAlreadySet: AugmentedError<ApiType>;
-        };
         babe: {
             /**
              * A given equivocation report is valid but already previously reported.
@@ -199,7 +169,7 @@ declare module '@polkadot/api-base/types/errors' {
              **/
             ExistingVestingSchedule: AugmentedError<ApiType>;
             /**
-             * Balance too low to send value
+             * Balance too low to send value.
              **/
             InsufficientBalance: AugmentedError<ApiType>;
             /**
@@ -509,6 +479,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Invalid extrinsic call: Channel state bloat bond changed.
              **/
             ChannelStateBloatBondChanged: AugmentedError<ApiType>;
+            /**
+             * Channel Transfers are blocked during active AMM
+             **/
+            ChannelTransfersBlockedDuringActiveAmm: AugmentedError<ApiType>;
             /**
              * Channel Transfers are blocked during revenue splits
              **/
@@ -1229,6 +1203,10 @@ declare module '@polkadot/api-base/types/errors' {
             ZeroTokensFunding: AugmentedError<ApiType>;
         };
         electionProviderMultiPhase: {
+            /**
+             * Some bound not met
+             **/
+            BoundNotMet: AugmentedError<ApiType>;
             /**
              * The call is not allowed at this point.
              **/
@@ -1277,6 +1255,10 @@ declare module '@polkadot/api-base/types/errors' {
              * The signed submission consumes too much weight
              **/
             SignedTooMuchWeight: AugmentedError<ApiType>;
+            /**
+             * Submitted solution has too many winners
+             **/
+            TooManyWinners: AugmentedError<ApiType>;
         };
         forum: {
             /**
@@ -1607,6 +1589,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Handle must be provided during registration.
              **/
             HandleMustBeProvidedDuringRegistration: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance to cover payment.
+             **/
+            InsufficientBalanceToCoverPayment: AugmentedError<ApiType>;
             /**
              * Insufficient balance to cover stake.
              **/
@@ -2272,6 +2258,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Cannot Deissue Token with outstanding accounts
              **/
             CannotDeissueTokenWithOutstandingAccounts: AugmentedError<ApiType>;
+            /**
+             * No Sale if Amm is active
+             **/
+            CannotInitSaleIfAmmIsActive: AugmentedError<ApiType>;
             /**
              * Attempt to issue in a split with zero allocation amount
              **/
@@ -2288,6 +2278,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Attempt to participate in a split with zero token to stake
              **/
             CannotParticipateInSplitWithZeroAmount: AugmentedError<ApiType>;
+            /**
+             * Deadline constraint not satisfied
+             **/
+            DeadlineExpired: AugmentedError<ApiType>;
             /**
              * At least one of the members provided as part of InitialAllocation does not exist
              **/
@@ -2304,10 +2298,18 @@ declare module '@polkadot/api-base/types/errors' {
              * Insufficient JOY Balance to cover the transaction costs
              **/
             InsufficientJoyBalance: AugmentedError<ApiType>;
+            /**
+             * Creator token balance is insufficient
+             **/
+            InsufficientTokenBalance: AugmentedError<ApiType>;
             /**
              * Account's transferrable balance is insufficient to perform the transfer or initialize token sale
              **/
             InsufficientTransferrableBalance: AugmentedError<ApiType>;
+            /**
+             * Invalid bonding curve construction parameters
+             **/
+            InvalidCurveParameters: AugmentedError<ApiType>;
             /**
              * The amount of JOY to be transferred is not enough to keep the destination account alive
              **/
@@ -2329,6 +2331,11 @@ declare module '@polkadot/api-base/types/errors' {
              * Amount of tokens to purchase on sale exceeds the quantity of tokens still available on the sale
              **/
             NotEnoughTokensOnSale: AugmentedError<ApiType>;
+            /**
+             * ------ AMM ---------------------------------------------------------
+             * not in AMM state
+             **/
+            NotInAmmState: AugmentedError<ApiType>;
             /**
              * There are no remaining tokes to recover from the previous token sale.
              **/
@@ -2337,6 +2344,10 @@ declare module '@polkadot/api-base/types/errors' {
              * The token has no upcoming sale
              **/
             NoUpcomingSale: AugmentedError<ApiType>;
+            /**
+             * Oustanding AMM-provided supply constitutes too large percentage of the token's total supply
+             **/
+            OutstandingAmmProvidedSupplyTooLarge: AugmentedError<ApiType>;
             /**
              * Previous sale was still not finalized, finalize it first.
              **/
@@ -2411,6 +2422,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Upper bound quantity cannot be zero
              **/
             SaleUpperBoundQuantityIsZero: AugmentedError<ApiType>;
+            /**
+             * Slippage tolerance constraint tolerance not satisfied
+             **/
+            SlippageToleranceExceeded: AugmentedError<ApiType>;
             /**
              * Target Rate is higher than current patronage rate
              **/
@@ -2428,7 +2443,7 @@ declare module '@polkadot/api-base/types/errors' {
              **/
             TokenSymbolAlreadyInUse: AugmentedError<ApiType>;
             /**
-             * Transfer destination member id invalid
+             * At least one of the transfer destinations is not an existing member id
              **/
             TransferDestinationMemberDoesNotExist: AugmentedError<ApiType>;
             /**
@@ -2684,6 +2699,10 @@ declare module '@polkadot/api-base/types/errors' {
             ZeroExactExecutionBlock: AugmentedError<ApiType>;
         };
         referendum: {
+            /**
+             * A vote cannot be cast from an account that already opted out of voting.
+             **/
+            AccountAlreadyOptedOutOfVoting: AugmentedError<ApiType>;
             /**
              * Trying to vote multiple time in the same cycle
              **/
@@ -2784,6 +2803,10 @@ declare module '@polkadot/api-base/types/errors' {
              * External restriction prevents bonding with given account
              **/
             BondingRestricted: AugmentedError<ApiType>;
+            /**
+             * Some bound is not met.
+             **/
+            BoundNotMet: AugmentedError<ApiType>;
             /**
              * The user has enough bond and thus cannot be chilled forcefully by an external person.
              **/
@@ -2860,8 +2883,8 @@ declare module '@polkadot/api-base/types/errors' {
              **/
             TooManyTargets: AugmentedError<ApiType>;
             /**
-             * There are too many validators in the system. Governance needs to adjust the staking
-             * settings to keep things safe for the runtime.
+             * There are too many validator candidates in the system. Governance needs to adjust the
+             * staking settings to keep things safe for the runtime.
              **/
             TooManyValidators: AugmentedError<ApiType>;
         };
@@ -3259,12 +3282,6 @@ declare module '@polkadot/api-base/types/errors' {
              **/
             ZeroTokensFunding: AugmentedError<ApiType>;
         };
-        sudo: {
-            /**
-             * Sender must be the Sudo account
-             **/
-            RequireSudo: AugmentedError<ApiType>;
-        };
         system: {
             /**
              * The origin filter prevent the call to be dispatched.
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-events.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-events.d.ts
index 557e0b3..0754882 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-events.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-events.d.ts
@@ -1,8 +1,8 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
 import type { BTreeMap, BTreeSet, Bytes, Null, Option, Result, U8aFixed, Vec, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
 import type { ITuple } from '@polkadot/types-codec/types';
-import type { AccountId32, H256, Perquintill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
+import type { AccountId32, H256, Perbill, Perquintill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportDispatchDispatchInfo, FrameSupportTokensMiscBalanceStatus, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhasePhase, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmCurve, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingForcing, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpNposElectionsElectionScore, SpRuntimeDispatchError } from '@polkadot/types/lookup';
 declare module '@polkadot/api-base/types/events' {
     interface AugmentedEvents<ApiType extends ApiTypes> {
         appWorkingGroup: {
@@ -497,16 +497,16 @@ declare module '@polkadot/api-base/types/events' {
              **/
             ChannelOwnerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
             ChannelPausedFeaturesUpdatedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
-            ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>]>;
+            ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
             ChannelPrivilegeLevelUpdated: AugmentedEvent<ApiType, [u64, u8]>;
             ChannelRewardClaimedAndWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
-            ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u64]>;
+            ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u128, u64]>;
             ChannelStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
             ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
             ChannelUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
             ChannelVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
-            CouncilRewardClaimed: AugmentedEvent<ApiType, [u64, u128]>;
             CreatorTokenIssued: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64]>;
+            CreatorTokenIssuerRemarked: AugmentedEvent<ApiType, [u64, u64, Bytes]>;
             CuratorAdded: AugmentedEvent<ApiType, [u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
             CuratorGroupCreated: AugmentedEvent<ApiType, [u64]>;
             CuratorGroupPermissionsUpdated: AugmentedEvent<ApiType, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
@@ -982,11 +982,25 @@ declare module '@polkadot/api-base/types/events' {
         };
         electionProviderMultiPhase: {
             /**
-             * The election has been finalized, with `Some` of the given computation, or else if the
-             * election failed, `None`.
+             * An election failed.
+             *
+             * Not much can be said about which computes failed in the process.
+             **/
+            ElectionFailed: AugmentedEvent<ApiType, []>;
+            /**
+             * The election has been finalized, with the given computation and score.
+             **/
+            ElectionFinalized: AugmentedEvent<ApiType, [compute: PalletElectionProviderMultiPhaseElectionCompute, score: SpNposElectionsElectionScore], {
+                compute: PalletElectionProviderMultiPhaseElectionCompute;
+                score: SpNposElectionsElectionScore;
+            }>;
+            /**
+             * There was a phase transition in a given round.
              **/
-            ElectionFinalized: AugmentedEvent<ApiType, [electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>], {
-                electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>;
+            PhaseTransitioned: AugmentedEvent<ApiType, [from: PalletElectionProviderMultiPhasePhase, to: PalletElectionProviderMultiPhasePhase, round: u32], {
+                from: PalletElectionProviderMultiPhasePhase;
+                to: PalletElectionProviderMultiPhasePhase;
+                round: u32;
             }>;
             /**
              * An account has been rewarded for their signed submission being finalized.
@@ -995,12 +1009,6 @@ declare module '@polkadot/api-base/types/events' {
                 account: AccountId32;
                 value: u128;
             }>;
-            /**
-             * The signed phase of the given round has started.
-             **/
-            SignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], {
-                round: u32;
-            }>;
             /**
              * An account has been slashed for submitting an invalid signed submission.
              **/
@@ -1011,21 +1019,17 @@ declare module '@polkadot/api-base/types/events' {
             /**
              * A solution was stored with the given compute.
              *
-             * If the solution is signed, this means that it hasn't yet been processed. If the
-             * solution is unsigned, this means that it has also been processed.
-             *
-             * The `bool` is `true` when a previous solution was ejected to make room for this one.
-             **/
-            SolutionStored: AugmentedEvent<ApiType, [electionCompute: PalletElectionProviderMultiPhaseElectionCompute, prevEjected: bool], {
-                electionCompute: PalletElectionProviderMultiPhaseElectionCompute;
+             * The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,
+             * the stored solution was submited in the signed phase by a miner with the `AccountId`.
+             * Otherwise, the solution was stored either during the unsigned phase or by
+             * `T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make
+             * room for this one.
+             **/
+            SolutionStored: AugmentedEvent<ApiType, [compute: PalletElectionProviderMultiPhaseElectionCompute, origin: Option<AccountId32>, prevEjected: bool], {
+                compute: PalletElectionProviderMultiPhaseElectionCompute;
+                origin: Option<AccountId32>;
                 prevEjected: bool;
             }>;
-            /**
-             * The unsigned phase of the given round has started.
-             **/
-            UnsignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], {
-                round: u32;
-            }>;
         };
         forum: {
             /**
@@ -1355,9 +1359,9 @@ declare module '@polkadot/api-base/types/events' {
             LeaderInvitationQuotaUpdated: AugmentedEvent<ApiType, [u32]>;
             MemberAccountsUpdated: AugmentedEvent<ApiType, [u64, Option<AccountId32>, Option<AccountId32>]>;
             MemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateMemberParameters, u32]>;
-            MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters]>;
+            MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters, u128]>;
             MemberProfileUpdated: AugmentedEvent<ApiType, [u64, Option<Bytes>, Option<Bytes>]>;
-            MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+            MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
             MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters, u32]>;
             MembershipGifted: AugmentedEvent<ApiType, [u64, PalletMembershipGiftMembershipParameters]>;
             MembershipPriceUpdated: AugmentedEvent<ApiType, [u128]>;
@@ -2150,6 +2154,22 @@ declare module '@polkadot/api-base/types/events' {
              * - ongoing policy
              **/
             AccountDustedBy: AugmentedEvent<ApiType, [u64, u64, AccountId32, PalletProjectTokenTransferPolicy]>;
+            /**
+             * AMM activated
+             * Params:
+             * - token id
+             * - member id
+             * - params for the bonding curve
+             **/
+            AmmActivated: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenAmmCurve]>;
+            /**
+             * AMM deactivated
+             * Params:
+             * - token id
+             * - member id
+             * - amm treasury amount burned upon deactivation
+             **/
+            AmmDeactivated: AugmentedEvent<ApiType, [u64, u64, u128]>;
             /**
              * Member joined whitelist
              * Params:
@@ -2249,6 +2269,15 @@ declare module '@polkadot/api-base/types/events' {
              * - token sale metadata
              **/
             TokenSaleInitialized: AugmentedEvent<ApiType, [u64, u32, PalletProjectTokenTokenSale, Option<Bytes>]>;
+            /**
+             * Tokens Bought on AMM
+             * Params:
+             * - token id
+             * - member id
+             * - amount of CRT minted
+             * - amount of JOY deposited into curve treasury
+             **/
+            TokensBoughtOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
             /**
              * Tokens Burned
              * Params:
@@ -2266,6 +2295,15 @@ declare module '@polkadot/api-base/types/events' {
              * - buyer's member id
              **/
             TokensPurchasedOnSale: AugmentedEvent<ApiType, [u64, u32, u128, u64]>;
+            /**
+             * Tokens Sold on AMM
+             * Params:
+             * - token id
+             * - member id
+             * - amount of CRT burned
+             * - amount of JOY withdrawn from curve treasury
+             **/
+            TokensSoldOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
             /**
              * Transfer Policy Changed To Permissionless
              * Params:
@@ -2372,6 +2410,10 @@ declare module '@polkadot/api-base/types/events' {
             Voted: AugmentedEvent<ApiType, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
         };
         referendum: {
+            /**
+             * Account permanently opted out of voting in referendum.
+             **/
+            AccountOptedOutOfVoting: AugmentedEvent<ApiType, [AccountId32]>;
             /**
              * Referendum ended and winning option was selected
              **/
@@ -2417,40 +2459,75 @@ declare module '@polkadot/api-base/types/events' {
              * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
              * it will not be emitted for staking rewards when they are added to stake.
              **/
-            Bonded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            Bonded: AugmentedEvent<ApiType, [stash: AccountId32, amount: u128], {
+                stash: AccountId32;
+                amount: u128;
+            }>;
             /**
              * An account has stopped participating as either a validator or nominator.
-             * \[stash\]
              **/
-            Chilled: AugmentedEvent<ApiType, [AccountId32]>;
+            Chilled: AugmentedEvent<ApiType, [stash: AccountId32], {
+                stash: AccountId32;
+            }>;
             /**
              * The era payout has been set; the first balance is the validator-payout; the second is
              * the remainder from the maximum amount of reward.
-             * \[era_index, validator_payout, remainder\]
              **/
-            EraPaid: AugmentedEvent<ApiType, [u32, u128, u128]>;
+            EraPaid: AugmentedEvent<ApiType, [eraIndex: u32, validatorPayout: u128, remainder: u128], {
+                eraIndex: u32;
+                validatorPayout: u128;
+                remainder: u128;
+            }>;
+            /**
+             * A new force era mode was set.
+             **/
+            ForceEra: AugmentedEvent<ApiType, [mode: PalletStakingForcing], {
+                mode: PalletStakingForcing;
+            }>;
             /**
-             * A nominator has been kicked from a validator. \[nominator, stash\]
+             * A nominator has been kicked from a validator.
              **/
-            Kicked: AugmentedEvent<ApiType, [AccountId32, AccountId32]>;
+            Kicked: AugmentedEvent<ApiType, [nominator: AccountId32, stash: AccountId32], {
+                nominator: AccountId32;
+                stash: AccountId32;
+            }>;
             /**
              * An old slashing report from a prior era was discarded because it could
-             * not be processed. \[session_index\]
+             * not be processed.
              **/
-            OldSlashingReportDiscarded: AugmentedEvent<ApiType, [u32]>;
+            OldSlashingReportDiscarded: AugmentedEvent<ApiType, [sessionIndex: u32], {
+                sessionIndex: u32;
+            }>;
             /**
-             * The stakers' rewards are getting paid. \[era_index, validator_stash\]
+             * The stakers' rewards are getting paid.
              **/
-            PayoutStarted: AugmentedEvent<ApiType, [u32, AccountId32]>;
+            PayoutStarted: AugmentedEvent<ApiType, [eraIndex: u32, validatorStash: AccountId32], {
+                eraIndex: u32;
+                validatorStash: AccountId32;
+            }>;
             /**
-             * The nominator has been rewarded by this amount. \[stash, amount\]
+             * The nominator has been rewarded by this amount.
              **/
-            Rewarded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            Rewarded: AugmentedEvent<ApiType, [stash: AccountId32, amount: u128], {
+                stash: AccountId32;
+                amount: u128;
+            }>;
             /**
-             * One validator (and its nominators) has been slashed by the given amount.
-             * \[validator, amount\]
+             * A staker (validator or nominator) has been slashed by the given amount.
              **/
-            Slashed: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            Slashed: AugmentedEvent<ApiType, [staker: AccountId32, amount: u128], {
+                staker: AccountId32;
+                amount: u128;
+            }>;
+            /**
+             * A slash for the given validator, for the given percentage of their stake, at the given
+             * era as been reported.
+             **/
+            SlashReported: AugmentedEvent<ApiType, [validator: AccountId32, fraction: Perbill, slashEra: u32], {
+                validator: AccountId32;
+                fraction: Perbill;
+                slashEra: u32;
+            }>;
             /**
              * A new set of stakers was elected.
              **/
@@ -2460,18 +2537,27 @@ declare module '@polkadot/api-base/types/events' {
              **/
             StakingElectionFailed: AugmentedEvent<ApiType, []>;
             /**
-             * An account has unbonded this amount. \[stash, amount\]
+             * An account has unbonded this amount.
              **/
-            Unbonded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            Unbonded: AugmentedEvent<ApiType, [stash: AccountId32, amount: u128], {
+                stash: AccountId32;
+                amount: u128;
+            }>;
             /**
              * A validator has set their preferences.
              **/
-            ValidatorPrefsSet: AugmentedEvent<ApiType, [AccountId32, PalletStakingValidatorPrefs]>;
+            ValidatorPrefsSet: AugmentedEvent<ApiType, [stash: AccountId32, prefs: PalletStakingValidatorPrefs], {
+                stash: AccountId32;
+                prefs: PalletStakingValidatorPrefs;
+            }>;
             /**
              * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
-             * from the unlocking queue. \[stash, amount\]
+             * from the unlocking queue.
              **/
-            Withdrawn: AugmentedEvent<ApiType, [AccountId32, u128]>;
+            Withdrawn: AugmentedEvent<ApiType, [stash: AccountId32, amount: u128], {
+                stash: AccountId32;
+                amount: u128;
+            }>;
         };
         storage: {
             /**
@@ -2956,26 +3042,6 @@ declare module '@polkadot/api-base/types/events' {
              **/
             WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
         };
-        sudo: {
-            /**
-             * The \[sudoer\] just switched identity; the old key is supplied if one existed.
-             **/
-            KeyChanged: AugmentedEvent<ApiType, [oldSudoer: Option<AccountId32>], {
-                oldSudoer: Option<AccountId32>;
-            }>;
-            /**
-             * A sudo just took place. \[result\]
-             **/
-            Sudid: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], {
-                sudoResult: Result<Null, SpRuntimeDispatchError>;
-            }>;
-            /**
-             * A sudo just took place. \[result\]
-             **/
-            SudoAsDone: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], {
-                sudoResult: Result<Null, SpRuntimeDispatchError>;
-            }>;
-        };
         system: {
             /**
              * `:code` was updated.
@@ -2984,15 +3050,15 @@ declare module '@polkadot/api-base/types/events' {
             /**
              * An extrinsic failed.
              **/
-            ExtrinsicFailed: AugmentedEvent<ApiType, [dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportWeightsDispatchInfo], {
+            ExtrinsicFailed: AugmentedEvent<ApiType, [dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportDispatchDispatchInfo], {
                 dispatchError: SpRuntimeDispatchError;
-                dispatchInfo: FrameSupportWeightsDispatchInfo;
+                dispatchInfo: FrameSupportDispatchDispatchInfo;
             }>;
             /**
              * An extrinsic completed successfully.
              **/
-            ExtrinsicSuccess: AugmentedEvent<ApiType, [dispatchInfo: FrameSupportWeightsDispatchInfo], {
-                dispatchInfo: FrameSupportWeightsDispatchInfo;
+            ExtrinsicSuccess: AugmentedEvent<ApiType, [dispatchInfo: FrameSupportDispatchDispatchInfo], {
+                dispatchInfo: FrameSupportDispatchDispatchInfo;
             }>;
             /**
              * An account was reaped.
@@ -3014,6 +3080,17 @@ declare module '@polkadot/api-base/types/events' {
                 hash_: H256;
             }>;
         };
+        transactionPayment: {
+            /**
+             * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
+             * has been paid by `who`.
+             **/
+            TransactionFeePaid: AugmentedEvent<ApiType, [who: AccountId32, actualFee: u128, tip: u128], {
+                who: AccountId32;
+                actualFee: u128;
+                tip: u128;
+            }>;
+        };
         utility: {
             /**
              * Batch of dispatches completed fully with no error.
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-query.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-query.d.ts
index 51a9e80..ee3915a 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-query.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-query.d.ts
@@ -1,8 +1,8 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
-import type { BTreeMap, Bytes, Null, Option, U8aFixed, Vec, WrapperKeepOpaque, WrapperOpaque, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
+import type { Bytes, Null, Option, U8aFixed, Vec, WrapperOpaque, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, ITuple } from '@polkadot/types-codec/types';
-import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportWeightsPerDispatchClassU64, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipUncleEntryItem, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyBountyActor, PalletBountyBountyRecord, PalletBountyContribution, PalletBountyEntryRecord, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletMultisigMultisig, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
+import type { AccountId32, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportDispatchPerDispatchClassWeight, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReserveData, PalletBountyBountyActor, PalletBountyBountyRecord, PalletBountyContribution, PalletBountyEntryRecord, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletMultisigMultisig, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
 import type { Observable } from '@polkadot/types/types';
 declare module '@polkadot/api-base/types/storage' {
     interface AugmentedQueries<ApiType extends ApiTypes> {
@@ -63,14 +63,6 @@ declare module '@polkadot/api-base/types/storage' {
              * Author of current block.
              **/
             author: AugmentedQuery<ApiType, () => Observable<Option<AccountId32>>, []>;
-            /**
-             * Whether uncles were already set in this block.
-             **/
-            didSetUncles: AugmentedQuery<ApiType, () => Observable<bool>, []>;
-            /**
-             * Uncles
-             **/
-            uncles: AugmentedQuery<ApiType, () => Observable<Vec<PalletAuthorshipUncleEntryItem>>, []>;
         };
         babe: {
             /**
@@ -165,6 +157,17 @@ declare module '@polkadot/api-base/types/storage' {
              * epoch.
              **/
             segmentIndex: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * A list of the last 100 skipped epochs and the corresponding session index
+             * when the epoch was skipped.
+             *
+             * This is only used for validating equivocation proofs. An equivocation proof
+             * must contains a key-ownership proof for a given session, therefore we need a
+             * way to tie together sessions and epoch indices, i.e. we need to validate that
+             * a validator was the owner of a given key on a given session, and what the
+             * active epoch index was during that session.
+             **/
+            skippedEpochs: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[u64, u32]>>>, []>;
             /**
              * TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
              **/
@@ -216,6 +219,10 @@ declare module '@polkadot/api-base/types/storage' {
              * NOTE: This is only used in the case that this pallet is used to store balances.
              **/
             account: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletBalancesAccountData>, [AccountId32]>;
+            /**
+             * The total units of outstanding deactivated balance in the system.
+             **/
+            inactiveIssuance: AugmentedQuery<ApiType, () => Observable<u128>, []>;
             /**
              * Any liquidity locks on some account balances.
              * NOTE: Should only be accessed when setting, changing and freeing a lock.
@@ -225,12 +232,6 @@ declare module '@polkadot/api-base/types/storage' {
              * Named reserves on some account balances.
              **/
             reserves: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Vec<PalletBalancesReserveData>>, [AccountId32]>;
-            /**
-             * Storage version of the pallet.
-             *
-             * This is set to v2.0.0 for new networks.
-             **/
-            storageVersion: AugmentedQuery<ApiType, () => Observable<PalletBalancesReleases>, []>;
             /**
              * The total units issued in the system.
              **/
@@ -522,14 +523,14 @@ declare module '@polkadot/api-base/types/storage' {
              **/
             round: AugmentedQuery<ApiType, () => Observable<u32>, []>;
             /**
-             * A sorted, bounded set of `(score, index)`, where each `index` points to a value in
-             * `SignedSubmissions`.
+             * A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a
+             * value in `SignedSubmissions`.
              *
              * We never need to process more than a single signed submission at a time. Signed submissions
              * can be quite large, so we're willing to pay the cost of multiple database accesses to access
              * them one at a time instead of reading and decoding all of them at once.
              **/
-            signedSubmissionIndices: AugmentedQuery<ApiType, () => Observable<BTreeMap<SpNposElectionsElectionScore, u32>>, []>;
+            signedSubmissionIndices: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[SpNposElectionsElectionScore, u32, u32]>>>, []>;
             /**
              * The next index to be assigned to an incoming signed submission.
              *
@@ -659,6 +660,12 @@ declare module '@polkadot/api-base/types/storage' {
              * A mapping from grandpa set ID to the index of the *most recent* session for which its
              * members were responsible.
              *
+             * This is only used for validating equivocation proofs. An equivocation proof must
+             * contains a key-ownership proof for a given session, therefore we need a way to tie
+             * together sessions and GRANDPA set ids, i.e. we need to validate that a validator
+             * was the owner of a given key on a given session, and what the active set ID was
+             * during that session.
+             *
              * TWOX-NOTE: `SetId` is not under user control.
              **/
             setIdSession: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<u32>>, [u64]>;
@@ -790,7 +797,6 @@ declare module '@polkadot/api-base/types/storage' {
             workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
         };
         multisig: {
-            calls: AugmentedQuery<ApiType, (arg: U8aFixed | string | Uint8Array) => Observable<Option<ITuple<[WrapperKeepOpaque<Call>, AccountId32, u128]>>>, [U8aFixed]>;
             /**
              * The set of open multisig operations.
              **/
@@ -946,6 +952,18 @@ declare module '@polkadot/api-base/types/storage' {
              * Double map TokenId x MemberId => AccountData for managing account data
              **/
             accountInfoByTokenAndMember: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProjectTokenAccountData>, [u64, u64]>;
+            /**
+             * AMM buy transaction fee percentage
+             **/
+            ammBuyTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * Percentage threshold for deactivating the amm functionality
+             **/
+            ammDeactivationThreshold: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+            /**
+             * AMM sell transaction fee percentage
+             **/
+            ammSellTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
             /**
              * Bloat Bond value used during account creation
              **/
@@ -970,10 +988,6 @@ declare module '@polkadot/api-base/types/storage' {
              * Platform fee (percentage) charged on top of each sale purchase (in JOY) and burned
              **/
             salePlatformFee: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
-            /**
-             * Set for the tokens symbols
-             **/
-            symbolsUsed: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<Null>, [H256]>;
             /**
              * map TokenId => TokenData to retrieve token information
              **/
@@ -1034,6 +1048,10 @@ declare module '@polkadot/api-base/types/storage' {
             randomMaterial: AugmentedQuery<ApiType, () => Observable<Vec<H256>>, []>;
         };
         referendum: {
+            /**
+             * Accounts that permanently opted out of voting in referendum.
+             **/
+            accountsOptedOut: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Null>, [AccountId32]>;
             /**
              * Current referendum stage.
              **/
@@ -1094,6 +1112,8 @@ declare module '@polkadot/api-base/types/storage' {
             activeEra: AugmentedQuery<ApiType, () => Observable<Option<PalletStakingActiveEraInfo>>, []>;
             /**
              * Map from all locked "stash" accounts to the controller account.
+             *
+             * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
              **/
             bonded: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<AccountId32>>, [AccountId32]>;
             /**
@@ -1135,10 +1155,6 @@ declare module '@polkadot/api-base/types/storage' {
              * This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
              **/
             currentPlannedSession: AugmentedQuery<ApiType, () => Observable<u32>, []>;
-            /**
-             * The earliest era for which we have a pending, unapplied slash.
-             **/
-            earliestUnappliedSlash: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
             /**
              * Rewards for the last `HISTORY_DEPTH` eras.
              * If reward hasn't been set or has been removed then 0 reward is returned.
@@ -1197,16 +1213,6 @@ declare module '@polkadot/api-base/types/storage' {
              * Mode of era forcing.
              **/
             forceEra: AugmentedQuery<ApiType, () => Observable<PalletStakingForcing>, []>;
-            /**
-             * Number of eras to keep in history.
-             *
-             * Information is kept for eras in `[current_era - history_depth; current_era]`.
-             *
-             * Must be more than the number of eras delayed by session otherwise. I.e. active era must
-             * always be in history. I.e. `active_era > current_era - history_depth` must be
-             * guaranteed.
-             **/
-            historyDepth: AugmentedQuery<ApiType, () => Observable<u32>, []>;
             /**
              * Any validators that may never be slashed or forcibly kicked. It's a Vec since they're
              * easy to initialize and the performance hit is minimal (we expect no more than four
@@ -1235,6 +1241,10 @@ declare module '@polkadot/api-base/types/storage' {
              * If set to `0`, no limit exists.
              **/
             minCommission: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+            /**
+             * The minimum active nominator stake of the last successful election.
+             **/
+            minimumActiveStake: AugmentedQuery<ApiType, () => Observable<u128>, []>;
             /**
              * Minimum number of staking participants before emergency conditions are imposed.
              **/
@@ -1264,6 +1274,8 @@ declare module '@polkadot/api-base/types/storage' {
              *
              * Lastly, if any of the nominators become non-decodable, they can be chilled immediately via
              * [`Call::chill_other`] dispatchable by anyone.
+             *
+             * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
              **/
             nominators: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletStakingNominations>>, [AccountId32]>;
             /**
@@ -1284,6 +1296,8 @@ declare module '@polkadot/api-base/types/storage' {
             offendingValidators: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[u32, bool]>>>, []>;
             /**
              * Where the reward payment should be made. Keyed by stash.
+             *
+             * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
              **/
             payee: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletStakingRewardDestination>, [AccountId32]>;
             /**
@@ -1301,23 +1315,18 @@ declare module '@polkadot/api-base/types/storage' {
              * as well as how much reward has been paid out.
              **/
             spanSlash: AugmentedQuery<ApiType, (arg: ITuple<[AccountId32, u32]> | [AccountId32 | string | Uint8Array, u32 | AnyNumber | Uint8Array]) => Observable<PalletStakingSlashingSpanRecord>, [ITuple<[AccountId32, u32]>]>;
-            /**
-             * True if network has been upgraded to this version.
-             * Storage version of the pallet.
-             *
-             * This is set to v7.0.0 for new networks.
-             **/
-            storageVersion: AugmentedQuery<ApiType, () => Observable<PalletStakingReleases>, []>;
             /**
              * All unapplied slashes that are queued for later.
              **/
             unappliedSlashes: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Vec<PalletStakingUnappliedSlash>>, [u32]>;
             /**
-             * The ideal number of staking participants.
+             * The ideal number of active validators.
              **/
             validatorCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
             /**
              * The map from (wannabe) validator stash key to the preferences of that validator.
+             *
+             * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
              **/
             validators: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletStakingValidatorPrefs>, [AccountId32]>;
             /**
@@ -1454,12 +1463,6 @@ declare module '@polkadot/api-base/types/storage' {
              **/
             workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
         };
-        sudo: {
-            /**
-             * The `AccountId` of the sudo key.
-             **/
-            key: AugmentedQuery<ApiType, () => Observable<Option<AccountId32>>, []>;
-        };
         system: {
             /**
              * The full account information for a particular account ID.
@@ -1476,7 +1479,7 @@ declare module '@polkadot/api-base/types/storage' {
             /**
              * The current weight for the block.
              **/
-            blockWeight: AugmentedQuery<ApiType, () => Observable<FrameSupportWeightsPerDispatchClassU64>, []>;
+            blockWeight: AugmentedQuery<ApiType, () => Observable<FrameSupportDispatchPerDispatchClassWeight>, []>;
             /**
              * Digest of the current block, also part of the block header.
              **/
diff --git a/node_modules/@joystream/types/lib/augment/augment-api-tx.d.ts b/node_modules/@joystream/types/lib/augment/augment-api-tx.d.ts
index d14be1e..7b0f39c 100644
--- a/node_modules/@joystream/types/lib/augment/augment-api-tx.d.ts
+++ b/node_modules/@joystream/types/lib/augment/augment-api-tx.d.ts
@@ -1,8 +1,8 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
-import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, IMethod, ITuple } from '@polkadot/types-codec/types';
 import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
+import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmParams, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpSessionMembershipProof, SpWeightsWeightV2Weight } from '@polkadot/types/lookup';
 declare module '@polkadot/api-base/types/submittable' {
     interface AugmentedSubmittables<ApiType extends ApiTypes> {
         appWorkingGroup: {
@@ -264,18 +264,6 @@ declare module '@polkadot/api-base/types/submittable' {
              **/
             workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
         };
-        authorship: {
-            /**
-             * Provide a set of uncles.
-             **/
-            setUncles: AugmentedSubmittable<(newUncles: Vec<SpRuntimeHeader> | (SpRuntimeHeader | {
-                parentHash?: any;
-                number?: any;
-                stateRoot?: any;
-                extrinsicsRoot?: any;
-                digest?: any;
-            } | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<SpRuntimeHeader>]>;
-        };
         babe: {
             /**
              * Plan an epoch config change. The epoch config change is recorded and will be enacted on
@@ -353,10 +341,9 @@ declare module '@polkadot/api-base/types/submittable' {
             /**
              * Exactly as `transfer`, except the origin must be root and the source account may be
              * specified.
-             * # <weight>
+             * ## Complexity
              * - Same as transfer, but additional read and write because the source account is not
              * assumed to be in the overlay.
-             * # </weight>
              **/
             forceTransfer: AugmentedSubmittable<(source: AccountId32 | string | Uint8Array, dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, AccountId32, Compact<u128>]>;
             /**
@@ -385,7 +372,7 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin for this call must be `Signed` by the transactor.
              *
-             * # <weight>
+             * ## Complexity
              * - Dependent on arguments but not critical, given proper implementations for input config
              * types. See related functions below.
              * - It contains a limited number of reads and writes internally and no complex
@@ -399,9 +386,6 @@ declare module '@polkadot/api-base/types/submittable' {
              * - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.
              * - `transfer_keep_alive` works the same way as `transfer`, but has an additional check
              * that the transfer will not kill the origin account.
-             * ---------------------------------
-             * - Origin account is already in memory, so no DB operations for them.
-             * # </weight>
              **/
             transfer: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>]>;
             /**
@@ -419,9 +403,8 @@ declare module '@polkadot/api-base/types/submittable' {
              * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
              * of the funds the account has, causing the sender account to be killed (false), or
              * transfer everything except at least the existential deposit, which will guarantee to
-             * keep the sender account alive (true). # <weight>
+             * keep the sender account alive (true). ## Complexity
              * - O(1). Just like transfer, but reading the user's transferable balance first.
-             * #</weight>
              **/
             transferAll: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, keepAlive: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, bool]>;
             /**
@@ -700,6 +683,19 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             acceptIncomingOffer: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, witnessPrice: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+            /**
+             * Activate Amm functionality for token
+             **/
+            activateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenAmmParams | {
+                slope?: any;
+                intercept?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenAmmParams]>;
             /**
              * Add curator to curator group under given `curator_group_id`
              *
@@ -855,32 +851,6 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             channelOwnerRemark: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
-            /**
-             * Claim and withdraw reward in JOY from channel account
-             *
-             * <weight>
-             *
-             * ## Weight
-             * `O (H)` where:
-             * - `H` is the lenght of the provided merkle `proof`
-             * - DB:
-             * - O(1)
-             * # </weight>
-             **/
-            claimAndWithdrawChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
-                Curator: any;
-            } | {
-                Member: any;
-            } | {
-                Lead: any;
-            } | string | Uint8Array, proof: Vec<PalletCommonMerkleTreeProofElementRecord> | (PalletCommonMerkleTreeProofElementRecord | {
-                hash_?: any;
-                side?: any;
-            } | string | Uint8Array)[], item: PalletContentPullPaymentElement | {
-                channelId?: any;
-                cumulativeRewardEarned?: any;
-                reason?: any;
-            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonMerkleTreeProofElementRecord>, PalletContentPullPaymentElement]>;
             /**
              * Claim reward in JOY from channel account
              *
@@ -992,6 +962,16 @@ declare module '@polkadot/api-base/types/submittable' {
                 expectedDataObjectStateBloatBond?: any;
                 storageBucketsNumWitness?: any;
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoCreationParametersRecord]>;
+            /**
+             * Allow crt issuer to update metadata for an existing token
+             **/
+            creatorTokenIssuerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, remark: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
             /**
              * Perform transfer of tokens as creator token issuer
              *
@@ -1012,6 +992,16 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPaymentWithVesting, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTransfersPaymentWithVesting, Bytes]>;
+            /**
+             * Deactivate Amm functionality for token
+             **/
+            deactivateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
+                Curator: any;
+            } | {
+                Member: any;
+            } | {
+                Lead: any;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
             /**
              * Deissue channel's creator token
              *
@@ -1052,16 +1042,6 @@ declare module '@polkadot/api-base/types/submittable' {
                 storageBucketsNum?: any;
                 distributionBucketsNum?: any;
             } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64]>;
-            deleteChannelAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
-                Curator: any;
-            } | {
-                Member: any;
-            } | {
-                Lead: any;
-            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | {
-                storageBucketsNum?: any;
-                distributionBucketsNum?: any;
-            } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64, Bytes]>;
             /**
              * <weight>
              *
@@ -1099,25 +1079,6 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Option<u32>]>;
-            /**
-             * <weight>
-             *
-             * ## Weight
-             * `O (A + B + C)` where:
-             * - `A` is the value of `num_objects_to_delete`
-             * - `B` is the value of `storage_buckets_num_witness`
-             * - `C` is the size of `rationale` in kilobytes
-             * - DB:
-             * - `O(A + B)` - from the the generated weights
-             * # </weight>
-             **/
-            deleteVideoAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
-                Curator: any;
-            } | {
-                Member: any;
-            } | {
-                Lead: any;
-            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u64, Bytes]>;
             /**
              * <weight>
              *
@@ -1261,10 +1222,10 @@ declare module '@polkadot/api-base/types/submittable' {
                 Lead: any;
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenTokenIssuanceParameters | {
                 initialAllocation?: any;
-                symbol?: any;
                 transferPolicy?: any;
                 patronageRate?: any;
                 revenueSplitRate?: any;
+                metadata?: any;
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenIssuanceParameters]>;
             /**
              * Issue NFT
@@ -1692,7 +1653,7 @@ declare module '@polkadot/api-base/types/submittable' {
                 minCashoutAllowed?: any;
                 maxCashoutAllowed?: any;
                 channelCashoutsEnabled?: any;
-            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord]>;
+            } | string | Uint8Array, uploaderAccount: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord, AccountId32]>;
             /**
              * Extrinsic for updating channel privilege level (requires lead access)
              *
@@ -3077,12 +3038,17 @@ declare module '@polkadot/api-base/types/submittable' {
         };
         grandpa: {
             /**
-             * Note that the current authority set of the GRANDPA finality gadget has
-             * stalled. This will trigger a forced authority set change at the beginning
-             * of the next session, to be enacted `delay` blocks after that. The delay
-             * should be high enough to safely assume that the block signalling the
-             * forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters
-             * will start the new authority set using the given finalized block as base.
+             * Note that the current authority set of the GRANDPA finality gadget has stalled.
+             *
+             * This will trigger a forced authority set change at the beginning of the next session, to
+             * be enacted `delay` blocks after that. The `delay` should be high enough to safely assume
+             * that the block signalling the forced change will not be re-orged e.g. 1000 blocks.
+             * The block production rate (which may be slowed down because of finality lagging) should
+             * be taken into account when choosing the `delay`. The GRANDPA voters based on the new
+             * authority will start voting on top of `best_finalized_block_number` for new finalized
+             * blocks. `best_finalized_block_number` should be the highest of the latest finalized
+             * block of all validators of the new authority set.
+             *
              * Only callable by root.
              **/
             noteStalled: AugmentedSubmittable<(delay: u32 | AnyNumber | Uint8Array, bestFinalizedBlockNumber: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32, u32]>;
@@ -3122,15 +3088,11 @@ declare module '@polkadot/api-base/types/submittable' {
         };
         imOnline: {
             /**
-             * # <weight>
-             * - Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is
-             * length of `heartbeat.network_state.external_address`
+             * ## Complexity:
+             * - `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is length of
+             * `heartbeat.network_state.external_address`
              * - `O(K)`: decoding of length `K`
              * - `O(E)`: decoding/encoding of length `E`
-             * - DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,
-             * `ReceivedHeartbeats`
-             * - DbWrites: `ReceivedHeartbeats`
-             * # </weight>
              **/
             heartbeat: AugmentedSubmittable<(heartbeat: PalletImOnlineHeartbeat | {
                 blockNumber?: any;
@@ -3302,7 +3264,7 @@ declare module '@polkadot/api-base/types/submittable' {
              * - O(1) doesn't depend on the state or parameters
              * # </weight>
              **/
-            memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+            memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array, payment: Option<ITuple<[AccountId32, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
             /**
              * Remove staking account for a member.
              *
@@ -3709,7 +3671,7 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * NOTE: If this is the final approval, you will want to use `as_multi` instead.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(S)`.
              * - Up to one balance-reserve or unreserve operation.
              * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
@@ -3720,13 +3682,11 @@ declare module '@polkadot/api-base/types/submittable' {
              * - One event.
              * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
              * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
-             * ----------------------------------
-             * - DB Weight:
-             * - Read: Multisig Storage, [Caller Account]
-             * - Write: Multisig Storage, [Caller Account]
-             * # </weight>
              **/
-            approveAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, callHash: U8aFixed | string | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, U8aFixed, u64]>;
+            approveAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, callHash: U8aFixed | string | Uint8Array, maxWeight: SpWeightsWeightV2Weight | {
+                refTime?: any;
+                proofSize?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, U8aFixed, SpWeightsWeightV2Weight]>;
             /**
              * Register approval for a dispatch to be made from a deterministic composite account if
              * approved by a total of `threshold - 1` of `other_signatories`.
@@ -3754,7 +3714,7 @@ declare module '@polkadot/api-base/types/submittable' {
              * on success, result is `Ok` and the result from the interior call, if it was executed,
              * may be found in the deposited `MultisigExecuted` event.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(S + Z + Call)`.
              * - Up to one balance-reserve or unreserve operation.
              * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
@@ -3767,14 +3727,11 @@ declare module '@polkadot/api-base/types/submittable' {
              * - The weight of the `call`.
              * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
              * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
-             * -------------------------------
-             * - DB Weight:
-             * - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)
-             * - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)
-             * - Plus Call Weight
-             * # </weight>
              **/
-            asMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, call: WrapperKeepOpaque<Call> | object | string | Uint8Array, storeCall: bool | boolean | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, WrapperKeepOpaque<Call>, bool, u64]>;
+            asMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, call: Call | IMethod | string | Uint8Array, maxWeight: SpWeightsWeightV2Weight | {
+                refTime?: any;
+                proofSize?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, Call, SpWeightsWeightV2Weight]>;
             /**
              * Immediately dispatch a multi-signature call using a single approval from the caller.
              *
@@ -3786,12 +3743,8 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * Result is equivalent to the dispatched result.
              *
-             * # <weight>
+             * ## Complexity
              * O(Z + C) where Z is the length of the call and C its execution weight.
-             * -------------------------------
-             * - DB Weight: None
-             * - Plus Call Weight
-             * # </weight>
              **/
             asMultiThreshold1: AugmentedSubmittable<(otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>, Call]>;
             /**
@@ -3807,7 +3760,7 @@ declare module '@polkadot/api-base/types/submittable' {
              * transaction for this dispatch.
              * - `call_hash`: The hash of the call to be executed.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(S)`.
              * - Up to one balance-reserve or unreserve operation.
              * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
@@ -3816,11 +3769,6 @@ declare module '@polkadot/api-base/types/submittable' {
              * - One event.
              * - I/O: 1 read `O(S)`, one remove.
              * - Storage: removes one item.
-             * ----------------------------------
-             * - DB Weight:
-             * - Read: Multisig Storage, [Caller Account], Refund Account, Calls
-             * - Write: Multisig Storage, [Caller Account], Refund Account, Calls
-             * # </weight>
              **/
             cancelAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], timepoint: PalletMultisigTimepoint | {
                 height?: any;
@@ -4638,6 +4586,21 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             burn: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * Mint desired `token_id` amount into user account via JOY exchnage
+             * Preconditions
+             * - origin, member_id pair must be a valid authentication pair
+             * - token_id must exist
+             * - user usable JOY balance must be enough for buying (+ existential deposit)
+             * - slippage tolerance constraints respected if provided
+             * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+             *
+             * Postconditions
+             * - `amount` CRT minted into account (which is created if necessary with existential deposit transferred to it)
+             * - respective JOY amount transferred from user balance to amm treasury account
+             * - event deposited
+             **/
+            buyOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
             /**
              * Allow any user to remove an account
              *
@@ -4796,6 +4759,24 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             purchaseTokensOnSale: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+            /**
+             * Burn desired `token_id` amount from user account and get JOY from treasury account
+             * Preconditions
+             * - origin, member_id pair must be a valid authentication pair
+             * - token_id must exist
+             * - token_id, member_id must be valid account coordinates
+             * - user usable CRT balance must be at least `amount`
+             * - slippage tolerance constraints respected if provided
+             * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+             * - amm treasury account must have sufficient JOYs for the operation
+             *
+             * Postconditions
+             * - `amount` burned from user account
+             * - total supply decreased by amount
+             * - respective JOY amount transferred from amm treasury account to user account
+             * - event deposited
+             **/
+            sellOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
             /**
              * Allow to transfer from `src_member_id` account to the various `outputs` beneficiaries
              * in the specified amounts.
@@ -5007,6 +4988,18 @@ declare module '@polkadot/api-base/types/submittable' {
             vote: AugmentedSubmittable<(voterId: u64 | AnyNumber | Uint8Array, proposalId: u32 | AnyNumber | Uint8Array, vote: PalletProposalsEngineVoteKind | 'Approve' | 'Reject' | 'Slash' | 'Abstain' | number | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
         };
         referendum: {
+            /**
+             * Permanently opt out of voting from a given account.
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            optOutOfVoting: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
             /**
              * Release a locked stake.
              * # <weight>
@@ -5056,13 +5049,9 @@ declare module '@polkadot/api-base/types/submittable' {
              * means being a controller account) or directly convertible into a validator ID (which
              * usually means being a stash account).
              *
-             * # <weight>
-             * - Complexity: `O(1)` in number of key types. Actual cost depends on the number of length
-             * of `T::Keys::key_ids()` which is fixed.
-             * - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`
-             * - DbWrites: `NextKeys`, `origin account`
-             * - DbWrites per key id: `KeyOwner`
-             * # </weight>
+             * ## Complexity
+             * - `O(1)` in number of key types. Actual cost depends on the number of length of
+             * `T::Keys::key_ids()` which is fixed.
              **/
             purgeKeys: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
             /**
@@ -5072,14 +5061,9 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin of this function must be signed.
              *
-             * # <weight>
-             * - Complexity: `O(1)`. Actual cost depends on the number of length of
-             * `T::Keys::key_ids()` which is fixed.
-             * - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`
-             * - DbWrites: `origin account`, `NextKeys`
-             * - DbReads per key id: `KeyOwner`
-             * - DbWrites per key id: `KeyOwner`
-             * # </weight>
+             * ## Complexity
+             * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
+             * fixed.
              **/
             setKeys: AugmentedSubmittable<(keys: JoystreamNodeRuntimeSessionKeys | {
                 grandpa?: any;
@@ -5098,15 +5082,13 @@ declare module '@polkadot/api-base/types/submittable' {
              * The dispatch origin for this call must be _Signed_ by the stash account.
              *
              * Emits `Bonded`.
-             * # <weight>
+             * ## Complexity
              * - Independent of the arguments. Moderate complexity.
              * - O(1).
              * - Three extra DB entries.
              *
              * NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned
              * unless the `origin` falls below _existential deposit_ and gets removed as dust.
-             * ------------------
-             * # </weight>
              **/
             bond: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array, payee: PalletStakingRewardDestination | {
                 Staked: any;
@@ -5131,16 +5113,15 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * Emits `Bonded`.
              *
-             * # <weight>
+             * ## Complexity
              * - Independent of the arguments. Insignificant complexity.
              * - O(1).
-             * # </weight>
              **/
             bondExtra: AugmentedSubmittable<(maxAdditional: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
             /**
              * Cancel enactment of a deferred slash.
              *
-             * Can be called by the `T::SlashCancelOrigin`.
+             * Can be called by the `T::AdminOrigin`.
              *
              * Parameters: era and indices of the slashes for that era to kill.
              **/
@@ -5152,11 +5133,10 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
              *
-             * # <weight>
+             * ## Complexity
              * - Independent of the arguments. Insignificant complexity.
              * - Contains one read.
              * - Writes are limited to the `origin` account key.
-             * # </weight>
              **/
             chill: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
             /**
@@ -5206,11 +5186,9 @@ declare module '@polkadot/api-base/types/submittable' {
              * If this is called just before a new era is triggered, the election process may not
              * have enough blocks to get a result.
              *
-             * # <weight>
+             * ## Complexity
              * - No arguments.
              * - Weight: O(1)
-             * - Write ForceEra
-             * # </weight>
              **/
             forceNewEra: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
             /**
@@ -5236,11 +5214,9 @@ declare module '@polkadot/api-base/types/submittable' {
              * Thus the election process may be ongoing when this is called. In this case the
              * election will continue until the next era is triggered.
              *
-             * # <weight>
+             * ## Complexity
              * - No arguments.
              * - Weight: O(1)
-             * - Write: ForceEra
-             * # </weight>
              **/
             forceNoEras: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
             /**
@@ -5250,13 +5226,13 @@ declare module '@polkadot/api-base/types/submittable' {
              **/
             forceUnstake: AugmentedSubmittable<(stash: AccountId32 | string | Uint8Array, numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
             /**
-             * Increments the ideal number of validators.
+             * Increments the ideal number of validators upto maximum of
+             * `ElectionProviderBase::MaxWinners`.
              *
              * The dispatch origin must be Root.
              *
-             * # <weight>
+             * ## Complexity
              * Same as [`Self::set_validator_count`].
-             * # </weight>
              **/
             increaseValidatorCount: AugmentedSubmittable<(additional: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>]>;
             /**
@@ -5280,11 +5256,10 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
              *
-             * # <weight>
+             * ## Complexity
              * - The transaction's complexity is proportional to the size of `targets` (N)
              * which is capped at CompactAssignments::LIMIT (T::MaxNominations).
              * - Both the reads and writes follow a similar pattern.
-             * # </weight>
              **/
             nominate: AugmentedSubmittable<(targets: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
             /**
@@ -5297,18 +5272,8 @@ declare module '@polkadot/api-base/types/submittable' {
              * The origin of this call must be _Signed_. Any account can call this function, even if
              * it is not one of the stakers.
              *
-             * # <weight>
-             * - Time complexity: at most O(MaxNominatorRewardedPerValidator).
-             * - Contains a limited number of reads and writes.
-             * -----------
-             * N is the Number of payouts for the validator (including the validator)
-             * Weight:
-             * - Reward Destination Staked: O(N)
-             * - Reward Destination Controller (Creating): O(N)
-             *
-             * NOTE: weights are assuming that payouts are made to alive stash account (Staked).
-             * Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.
-             * # </weight>
+             * ## Complexity
+             * - At most O(MaxNominatorRewardedPerValidator).
              **/
             payoutStakers: AugmentedSubmittable<(validatorStash: AccountId32 | string | Uint8Array, era: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
             /**
@@ -5331,21 +5296,19 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin must be signed by the controller.
              *
-             * # <weight>
+             * ## Complexity
              * - Time complexity: O(L), where L is unlocking chunks
              * - Bounded by `MaxUnlockingChunks`.
-             * - Storage changes: Can't increase storage, only decrease it.
-             * # </weight>
              **/
             rebond: AugmentedSubmittable<(value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
             /**
-             * Scale up the ideal number of validators by a factor.
+             * Scale up the ideal number of validators by a factor upto maximum of
+             * `ElectionProviderBase::MaxWinners`.
              *
              * The dispatch origin must be Root.
              *
-             * # <weight>
+             * ## Complexity
              * Same as [`Self::set_validator_count`].
-             * # </weight>
              **/
             scaleValidatorCount: AugmentedSubmittable<(factor: Percent | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Percent]>;
             /**
@@ -5355,49 +5318,26 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
              *
-             * # <weight>
+             * ## Complexity
+             * O(1)
              * - Independent of the arguments. Insignificant complexity.
              * - Contains a limited number of reads.
              * - Writes are limited to the `origin` account key.
-             * ----------
-             * Weight: O(1)
-             * DB Weight:
-             * - Read: Bonded, Ledger New Controller, Ledger Old Controller
-             * - Write: Bonded, Ledger New Controller, Ledger Old Controller
-             * # </weight>
              **/
             setController: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
-            /**
-             * Set `HistoryDepth` value. This function will delete any history information
-             * when `HistoryDepth` is reduced.
-             *
-             * Parameters:
-             * - `new_history_depth`: The new history depth you would like to set.
-             * - `era_items_deleted`: The number of items that will be deleted by this dispatch. This
-             * should report all the storage items that will be deleted by clearing old era history.
-             * Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an
-             * accurate number.
-             *
-             * Origin must be root.
-             *
-             * # <weight>
-             * - E: Number of history depths removed, i.e. 10 -> 7 = 3
-             * - Weight: O(E)
-             * - DB Weight:
-             * - Reads: Current Era, History Depth
-             * - Writes: History Depth
-             * - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs
-             * - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,
-             * ErasStartSessionIndex
-             * # </weight>
-             **/
-            setHistoryDepth: AugmentedSubmittable<(newHistoryDepth: Compact<u32> | AnyNumber | Uint8Array, eraItemsDeleted: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>, Compact<u32>]>;
             /**
              * Set the validators who cannot be slashed (if any).
              *
              * The dispatch origin must be Root.
              **/
             setInvulnerables: AugmentedSubmittable<(invulnerables: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
+            /**
+             * Sets the minimum amount of commission that each validators must maintain.
+             *
+             * This call has lower privilege requirements than `set_staking_config` and can be called
+             * by the `T::AdminOrigin`. Root can always call this.
+             **/
+            setMinCommission: AugmentedSubmittable<(updated: Perbill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Perbill]>;
             /**
              * (Re-)set the payment target for a controller.
              *
@@ -5405,16 +5345,12 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
              *
-             * # <weight>
+             * ## Complexity
+             * - O(1)
              * - Independent of the arguments. Insignificant complexity.
              * - Contains a limited number of reads.
              * - Writes are limited to the `origin` account key.
              * ---------
-             * - Weight: O(1)
-             * - DB Weight:
-             * - Read: Ledger
-             * - Write: Payee
-             * # </weight>
              **/
             setPayee: AugmentedSubmittable<(payee: PalletStakingRewardDestination | {
                 Staked: any;
@@ -5441,7 +5377,7 @@ declare module '@polkadot/api-base/types/submittable' {
              * * `min_commission`: The minimum amount of commission that each validators must maintain.
              * This is checked only upon calling `validate`. Existing validators are not affected.
              *
-             * Origin must be Root to call this function.
+             * RuntimeOrigin must be Root to call this function.
              *
              * NOTE: Existing nominators and validators will not be affected by this update.
              * to kick people under the new limits, `chill_other` should be called.
@@ -5488,10 +5424,8 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin must be Root.
              *
-             * # <weight>
-             * Weight: O(1)
-             * Write: Validator Count
-             * # </weight>
+             * ## Complexity
+             * O(1)
              **/
             setValidatorCount: AugmentedSubmittable<(updated: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>]>;
             /**
@@ -5505,8 +5439,8 @@ declare module '@polkadot/api-base/types/submittable' {
              * the funds out of management ready for transfer.
              *
              * No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)
-             * can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need
-             * to be called first to remove some of the chunks (if possible).
+             * can co-exists at the same time. If there are no unlocking chunks slots available
+             * [`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).
              *
              * If a user encounters the `InsufficientBond` error when calling this extrinsic,
              * they should call `chill` first in order to free up their bonded funds.
@@ -5539,10 +5473,9 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * See also [`Call::unbond`].
              *
-             * # <weight>
-             * Complexity O(S) where S is the number of slashing spans to remove
+             * ## Complexity
+             * O(S) where S is the number of slashing spans to remove
              * NOTE: Weight annotation is the kill scenario, we refund otherwise.
-             * # </weight>
              **/
             withdrawUnbonded: AugmentedSubmittable<(numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
         };
@@ -5800,7 +5733,8 @@ declare module '@polkadot/api-base/types/submittable' {
              **/
             setStorageOperatorMetadata: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
             /**
-             * Create a dynamic bag. Development mode.
+             * Deposit a StorageOperatorRemarked event
+             * containing a generic message.
              * <weight>
              *
              * ## Weight
@@ -5811,16 +5745,6 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             storageOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
-            /**
-             * Upload new data objects. Development mode.
-             **/
-            sudoUploadDataObjects: AugmentedSubmittable<(params: PalletStorageUploadParametersRecord | {
-                bagId?: any;
-                objectCreationList?: any;
-                stateBloatBondSourceAccountId?: any;
-                expectedDataSizeFee?: any;
-                expectedDataObjectStateBloatBond?: any;
-            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageUploadParametersRecord]>;
             /**
              * Add and remove hashes to the current blacklist.
              * <weight>
@@ -6257,66 +6181,7 @@ declare module '@polkadot/api-base/types/submittable' {
              **/
             workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
         };
-        sudo: {
-            /**
-             * Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
-             * key.
-             *
-             * The dispatch origin for this call must be _Signed_.
-             *
-             * # <weight>
-             * - O(1).
-             * - Limited storage reads.
-             * - One DB change.
-             * # </weight>
-             **/
-            setKey: AugmentedSubmittable<(updated: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
-            /**
-             * Authenticates the sudo key and dispatches a function call with `Root` origin.
-             *
-             * The dispatch origin for this call must be _Signed_.
-             *
-             * # <weight>
-             * - O(1).
-             * - Limited storage reads.
-             * - One DB write (event).
-             * - Weight of derivative `call` execution + 10,000.
-             * # </weight>
-             **/
-            sudo: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call]>;
-            /**
-             * Authenticates the sudo key and dispatches a function call with `Signed` origin from
-             * a given account.
-             *
-             * The dispatch origin for this call must be _Signed_.
-             *
-             * # <weight>
-             * - O(1).
-             * - Limited storage reads.
-             * - One DB write (event).
-             * - Weight of derivative `call` execution + 10,000.
-             * # </weight>
-             **/
-            sudoAs: AugmentedSubmittable<(who: AccountId32 | string | Uint8Array, call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Call]>;
-            /**
-             * Authenticates the sudo key and dispatches a function call with `Root` origin.
-             * This function does not check the weight of the call, and instead allows the
-             * Sudo user to specify the weight of the call.
-             *
-             * The dispatch origin for this call must be _Signed_.
-             *
-             * # <weight>
-             * - O(1).
-             * - The weight of this call is defined by the caller.
-             * # </weight>
-             **/
-            sudoUncheckedWeight: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array, weight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call, u64]>;
-        };
         system: {
-            /**
-             * A dispatch that will fill the block weight up to the given ratio.
-             **/
-            fillBlock: AugmentedSubmittable<(ratio: Perbill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Perbill]>;
             /**
              * Kill all storage items with a key that starts with the given prefix.
              *
@@ -6331,9 +6196,8 @@ declare module '@polkadot/api-base/types/submittable' {
             /**
              * Make some on-chain remark.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(1)`
-             * # </weight>
              **/
             remark: AugmentedSubmittable<(remark: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
             /**
@@ -6343,28 +6207,15 @@ declare module '@polkadot/api-base/types/submittable' {
             /**
              * Set the new runtime code.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`
-             * - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is
-             * expensive).
-             * - 1 storage write (codec `O(C)`).
-             * - 1 digest item.
-             * - 1 event.
-             * The weight of this function is dependent on the runtime, but generally this is very
-             * expensive. We will treat this as a full block.
-             * # </weight>
              **/
             setCode: AugmentedSubmittable<(code: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
             /**
              * Set the new runtime code without doing any checks of the given `code`.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(C)` where `C` length of `code`
-             * - 1 storage write (codec `O(C)`).
-             * - 1 digest item.
-             * - 1 event.
-             * The weight of this function is dependent on the runtime. We will treat this as a full
-             * block. # </weight>
              **/
             setCodeWithoutChecks: AugmentedSubmittable<(code: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
             /**
@@ -6388,12 +6239,11 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin for this call must be `Inherent`.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
              * - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in
              * `on_finalize`)
              * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
-             * # </weight>
              **/
             set: AugmentedSubmittable<(now: Compact<u64> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u64>]>;
         };
@@ -6417,17 +6267,16 @@ declare module '@polkadot/api-base/types/submittable' {
             /**
              * Send a batch of dispatch calls.
              *
-             * May be called from any origin.
+             * May be called from any origin except `None`.
              *
              * - `calls`: The calls to be dispatched from the same origin. The number of call must not
              * exceed the constant: `batched_calls_limit` (available in constant metadata).
              *
-             * If origin is root then call are dispatch without checking origin filter. (This includes
-             * bypassing `frame_system::Config::BaseCallFilter`).
+             * If origin is root then the calls are dispatched without checking origin filter. (This
+             * includes bypassing `frame_system::Config::BaseCallFilter`).
              *
-             * # <weight>
-             * - Complexity: O(C) where C is the number of calls to be batched.
-             * # </weight>
+             * ## Complexity
+             * - O(C) where C is the number of calls to be batched.
              *
              * This will return `Ok` in all circumstances. To determine the success of the batch, an
              * event is deposited. If a call failed and the batch was interrupted, then the
@@ -6440,17 +6289,16 @@ declare module '@polkadot/api-base/types/submittable' {
              * Send a batch of dispatch calls and atomically execute them.
              * The whole transaction will rollback and fail if any of the calls failed.
              *
-             * May be called from any origin.
+             * May be called from any origin except `None`.
              *
              * - `calls`: The calls to be dispatched from the same origin. The number of call must not
              * exceed the constant: `batched_calls_limit` (available in constant metadata).
              *
-             * If origin is root then call are dispatch without checking origin filter. (This includes
-             * bypassing `frame_system::Config::BaseCallFilter`).
+             * If origin is root then the calls are dispatched without checking origin filter. (This
+             * includes bypassing `frame_system::Config::BaseCallFilter`).
              *
-             * # <weight>
-             * - Complexity: O(C) where C is the number of calls to be batched.
-             * # </weight>
+             * ## Complexity
+             * - O(C) where C is the number of calls to be batched.
              **/
             batchAll: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
             /**
@@ -6458,12 +6306,8 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * The dispatch origin for this call must be _Root_.
              *
-             * # <weight>
+             * ## Complexity
              * - O(1).
-             * - Limited storage reads.
-             * - One DB write (event).
-             * - Weight of derivative `call` execution + T::WeightInfo::dispatch_as().
-             * # </weight>
              **/
             dispatchAs: AugmentedSubmittable<(asOrigin: JoystreamNodeRuntimeOriginCaller | {
                 system: any;
@@ -6474,19 +6318,30 @@ declare module '@polkadot/api-base/types/submittable' {
              * Send a batch of dispatch calls.
              * Unlike `batch`, it allows errors and won't interrupt.
              *
-             * May be called from any origin.
+             * May be called from any origin except `None`.
              *
              * - `calls`: The calls to be dispatched from the same origin. The number of call must not
              * exceed the constant: `batched_calls_limit` (available in constant metadata).
              *
-             * If origin is root then call are dispatch without checking origin filter. (This includes
-             * bypassing `frame_system::Config::BaseCallFilter`).
+             * If origin is root then the calls are dispatch without checking origin filter. (This
+             * includes bypassing `frame_system::Config::BaseCallFilter`).
              *
-             * # <weight>
-             * - Complexity: O(C) where C is the number of calls to be batched.
-             * # </weight>
+             * ## Complexity
+             * - O(C) where C is the number of calls to be batched.
              **/
             forceBatch: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
+            /**
+             * Dispatch a function call with a specified weight.
+             *
+             * This function does not check the weight of the call, and instead allows the
+             * Root origin to specify the weight of the call.
+             *
+             * The dispatch origin for this call must be _Root_.
+             **/
+            withWeight: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array, weight: SpWeightsWeightV2Weight | {
+                refTime?: any;
+                proofSize?: any;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call, SpWeightsWeightV2Weight]>;
         };
         vesting: {
             /**
@@ -6502,12 +6357,8 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * NOTE: This will unlock all schedules through the current block.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(1)`.
-             * - DbWeight: 4 Reads, 4 Writes
-             * - Reads: Vesting Storage, Balances Locks, Target Account, Source Account
-             * - Writes: Vesting Storage, Balances Locks, Target Account, Source Account
-             * # </weight>
              **/
             forceVestedTransfer: AugmentedSubmittable<(source: AccountId32 | string | Uint8Array, target: AccountId32 | string | Uint8Array, schedule: PalletVestingVestingInfo | {
                 locked?: any;
@@ -6546,12 +6397,8 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * Emits either `VestingCompleted` or `VestingUpdated`.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(1)`.
-             * - DbWeight: 2 Reads, 2 Writes
-             * - Reads: Vesting Storage, Balances Locks, [Sender Account]
-             * - Writes: Vesting Storage, Balances Locks, [Sender Account]
-             * # </weight>
              **/
             vest: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
             /**
@@ -6566,12 +6413,8 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * NOTE: This will unlock all schedules through the current block.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(1)`.
-             * - DbWeight: 3 Reads, 3 Writes
-             * - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]
-             * - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]
-             * # </weight>
              **/
             vestedTransfer: AugmentedSubmittable<(target: AccountId32 | string | Uint8Array, schedule: PalletVestingVestingInfo | {
                 locked?: any;
@@ -6588,12 +6431,8 @@ declare module '@polkadot/api-base/types/submittable' {
              *
              * Emits either `VestingCompleted` or `VestingUpdated`.
              *
-             * # <weight>
+             * ## Complexity
              * - `O(1)`.
-             * - DbWeight: 3 Reads, 3 Writes
-             * - Reads: Vesting Storage, Balances Locks, Target Account
-             * - Writes: Vesting Storage, Balances Locks, Target Account
-             * # </weight>
              **/
             vestOther: AugmentedSubmittable<(target: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
         };
diff --git a/node_modules/@joystream/types/lib/augment/lookup.d.ts b/node_modules/@joystream/types/lib/augment/lookup.d.ts
index ae9bbdb..d4cf70b 100644
--- a/node_modules/@joystream/types/lib/augment/lookup.d.ts
+++ b/node_modules/@joystream/types/lib/augment/lookup.d.ts
@@ -19,21 +19,28 @@ declare const _default: {
         feeFrozen: string;
     };
     /**
-     * Lookup7: frame_support::weights::PerDispatchClass<T>
+     * Lookup7: frame_support::dispatch::PerDispatchClass<sp_weights::weight_v2::Weight>
      **/
-    FrameSupportWeightsPerDispatchClassU64: {
+    FrameSupportDispatchPerDispatchClassWeight: {
         normal: string;
         operational: string;
         mandatory: string;
     };
     /**
-     * Lookup11: sp_runtime::generic::digest::Digest
+     * Lookup8: sp_weights::weight_v2::Weight
+     **/
+    SpWeightsWeightV2Weight: {
+        refTime: string;
+        proofSize: string;
+    };
+    /**
+     * Lookup13: sp_runtime::generic::digest::Digest
      **/
     SpRuntimeDigest: {
         logs: string;
     };
     /**
-     * Lookup13: sp_runtime::generic::digest::DigestItem
+     * Lookup15: sp_runtime::generic::digest::DigestItem
      **/
     SpRuntimeDigestDigestItem: {
         _enum: {
@@ -49,7 +56,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup16: frame_system::EventRecord<joystream_node_runtime::Event, primitive_types::H256>
+     * Lookup18: frame_system::EventRecord<joystream_node_runtime::RuntimeEvent, primitive_types::H256>
      **/
     FrameSystemEventRecord: {
         phase: string;
@@ -57,7 +64,7 @@ declare const _default: {
         topics: string;
     };
     /**
-     * Lookup18: frame_system::pallet::Event<T>
+     * Lookup20: frame_system::pallet::Event<T>
      **/
     FrameSystemEvent: {
         _enum: {
@@ -85,27 +92,27 @@ declare const _default: {
         };
     };
     /**
-     * Lookup19: frame_support::weights::DispatchInfo
+     * Lookup21: frame_support::dispatch::DispatchInfo
      **/
-    FrameSupportWeightsDispatchInfo: {
+    FrameSupportDispatchDispatchInfo: {
         weight: string;
         class: string;
         paysFee: string;
     };
     /**
-     * Lookup20: frame_support::weights::DispatchClass
+     * Lookup22: frame_support::dispatch::DispatchClass
      **/
-    FrameSupportWeightsDispatchClass: {
+    FrameSupportDispatchDispatchClass: {
         _enum: string[];
     };
     /**
-     * Lookup21: frame_support::weights::Pays
+     * Lookup23: frame_support::dispatch::Pays
      **/
-    FrameSupportWeightsPays: {
+    FrameSupportDispatchPays: {
         _enum: string[];
     };
     /**
-     * Lookup22: sp_runtime::DispatchError
+     * Lookup24: sp_runtime::DispatchError
      **/
     SpRuntimeDispatchError: {
         _enum: {
@@ -119,35 +126,38 @@ declare const _default: {
             Token: string;
             Arithmetic: string;
             Transactional: string;
+            Exhausted: string;
+            Corruption: string;
+            Unavailable: string;
         };
     };
     /**
-     * Lookup23: sp_runtime::ModuleError
+     * Lookup25: sp_runtime::ModuleError
      **/
     SpRuntimeModuleError: {
         index: string;
         error: string;
     };
     /**
-     * Lookup24: sp_runtime::TokenError
+     * Lookup26: sp_runtime::TokenError
      **/
     SpRuntimeTokenError: {
         _enum: string[];
     };
     /**
-     * Lookup25: sp_runtime::ArithmeticError
+     * Lookup27: sp_arithmetic::ArithmeticError
      **/
-    SpRuntimeArithmeticError: {
+    SpArithmeticArithmeticError: {
         _enum: string[];
     };
     /**
-     * Lookup26: sp_runtime::TransactionalError
+     * Lookup28: sp_runtime::TransactionalError
      **/
     SpRuntimeTransactionalError: {
         _enum: string[];
     };
     /**
-     * Lookup27: pallet_utility::pallet::Event
+     * Lookup29: pallet_utility::pallet::Event
      **/
     PalletUtilityEvent: {
         _enum: {
@@ -167,7 +177,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup30: pallet_balances::pallet::Event<T, I>
+     * Lookup32: pallet_balances::pallet::Event<T, I>
      **/
     PalletBalancesEvent: {
         _enum: {
@@ -218,23 +228,38 @@ declare const _default: {
         };
     };
     /**
-     * Lookup31: frame_support::traits::tokens::misc::BalanceStatus
+     * Lookup33: frame_support::traits::tokens::misc::BalanceStatus
      **/
     FrameSupportTokensMiscBalanceStatus: {
         _enum: string[];
     };
     /**
-     * Lookup32: pallet_election_provider_multi_phase::pallet::Event<T>
+     * Lookup34: pallet_transaction_payment::pallet::Event<T>
+     **/
+    PalletTransactionPaymentEvent: {
+        _enum: {
+            TransactionFeePaid: {
+                who: string;
+                actualFee: string;
+                tip: string;
+            };
+        };
+    };
+    /**
+     * Lookup35: pallet_election_provider_multi_phase::pallet::Event<T>
      **/
     PalletElectionProviderMultiPhaseEvent: {
         _enum: {
             SolutionStored: {
-                electionCompute: string;
+                compute: string;
+                origin: string;
                 prevEjected: string;
             };
             ElectionFinalized: {
-                electionCompute: string;
+                compute: string;
+                score: string;
             };
+            ElectionFailed: string;
             Rewarded: {
                 account: string;
                 value: string;
@@ -243,49 +268,113 @@ declare const _default: {
                 account: string;
                 value: string;
             };
-            SignedPhaseStarted: {
-                round: string;
-            };
-            UnsignedPhaseStarted: {
+            PhaseTransitioned: {
+                from: string;
+                to: string;
                 round: string;
             };
         };
     };
     /**
-     * Lookup33: pallet_election_provider_multi_phase::ElectionCompute
+     * Lookup36: pallet_election_provider_multi_phase::ElectionCompute
      **/
     PalletElectionProviderMultiPhaseElectionCompute: {
         _enum: string[];
     };
     /**
-     * Lookup36: pallet_staking::pallet::pallet::Event<T>
+     * Lookup39: sp_npos_elections::ElectionScore
+     **/
+    SpNposElectionsElectionScore: {
+        minimalStake: string;
+        sumStake: string;
+        sumStakeSquared: string;
+    };
+    /**
+     * Lookup40: pallet_election_provider_multi_phase::Phase<Bn>
+     **/
+    PalletElectionProviderMultiPhasePhase: {
+        _enum: {
+            Off: string;
+            Signed: string;
+            Unsigned: string;
+            Emergency: string;
+        };
+    };
+    /**
+     * Lookup42: pallet_staking::pallet::pallet::Event<T>
      **/
     PalletStakingPalletEvent: {
         _enum: {
-            EraPaid: string;
-            Rewarded: string;
-            Slashed: string;
-            OldSlashingReportDiscarded: string;
+            EraPaid: {
+                eraIndex: string;
+                validatorPayout: string;
+                remainder: string;
+            };
+            Rewarded: {
+                stash: string;
+                amount: string;
+            };
+            Slashed: {
+                staker: string;
+                amount: string;
+            };
+            SlashReported: {
+                validator: string;
+                fraction: string;
+                slashEra: string;
+            };
+            OldSlashingReportDiscarded: {
+                sessionIndex: string;
+            };
             StakersElected: string;
-            Bonded: string;
-            Unbonded: string;
-            Withdrawn: string;
-            Kicked: string;
+            Bonded: {
+                stash: string;
+                amount: string;
+            };
+            Unbonded: {
+                stash: string;
+                amount: string;
+            };
+            Withdrawn: {
+                stash: string;
+                amount: string;
+            };
+            Kicked: {
+                nominator: string;
+                stash: string;
+            };
             StakingElectionFailed: string;
-            Chilled: string;
-            PayoutStarted: string;
-            ValidatorPrefsSet: string;
+            Chilled: {
+                stash: string;
+            };
+            PayoutStarted: {
+                eraIndex: string;
+                validatorStash: string;
+            };
+            ValidatorPrefsSet: {
+                stash: string;
+                prefs: string;
+            };
+            ForceEra: {
+                mode: string;
+            };
         };
     };
     /**
-     * Lookup37: pallet_staking::ValidatorPrefs
+     * Lookup44: pallet_staking::ValidatorPrefs
      **/
     PalletStakingValidatorPrefs: {
         commission: string;
         blocked: string;
     };
     /**
-     * Lookup40: pallet_session::pallet::Event
+     * Lookup46: pallet_staking::Forcing
+     **/
+    PalletStakingForcing: {
+        _enum: string[];
+    };
+    /**
+     * Lookup47: pallet_session::pallet::Event
      **/
     PalletSessionEvent: {
         _enum: {
@@ -295,7 +384,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup41: pallet_grandpa::pallet::Event
+     * Lookup48: pallet_grandpa::pallet::Event
      **/
     PalletGrandpaEvent: {
         _enum: {
@@ -307,15 +396,15 @@ declare const _default: {
         };
     };
     /**
-     * Lookup44: sp_finality_grandpa::app::Public
+     * Lookup51: sp_finality_grandpa::app::Public
      **/
     SpFinalityGrandpaAppPublic: string;
     /**
-     * Lookup45: sp_core::ed25519::Public
+     * Lookup52: sp_core::ed25519::Public
      **/
     SpCoreEd25519Public: string;
     /**
-     * Lookup46: pallet_im_online::pallet::Event<T>
+     * Lookup53: pallet_im_online::pallet::Event<T>
      **/
     PalletImOnlineEvent: {
         _enum: {
@@ -329,15 +418,15 @@ declare const _default: {
         };
     };
     /**
-     * Lookup47: pallet_im_online::sr25519::app_sr25519::Public
+     * Lookup54: pallet_im_online::sr25519::app_sr25519::Public
      **/
     PalletImOnlineSr25519AppSr25519Public: string;
     /**
-     * Lookup48: sp_core::sr25519::Public
+     * Lookup55: sp_core::sr25519::Public
      **/
     SpCoreSr25519Public: string;
     /**
-     * Lookup51: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
+     * Lookup58: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingExposure: {
         total: string;
@@ -345,14 +434,14 @@ declare const _default: {
         others: string;
     };
     /**
-     * Lookup54: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
+     * Lookup61: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingIndividualExposure: {
         who: string;
         value: string;
     };
     /**
-     * Lookup55: pallet_offences::pallet::Event
+     * Lookup62: pallet_offences::pallet::Event
      **/
     PalletOffencesEvent: {
         _enum: {
@@ -363,23 +452,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup57: pallet_sudo::pallet::Event<T>
-     **/
-    PalletSudoEvent: {
-        _enum: {
-            Sudid: {
-                sudoResult: string;
-            };
-            KeyChanged: {
-                oldSudoer: string;
-            };
-            SudoAsDone: {
-                sudoResult: string;
-            };
-        };
-    };
-    /**
-     * Lookup59: pallet_bags_list::pallet::Event<T, I>
+     * Lookup64: pallet_bags_list::pallet::Event<T, I>
      **/
     PalletBagsListEvent: {
         _enum: {
@@ -395,7 +468,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup60: pallet_vesting::pallet::Event<T>
+     * Lookup65: pallet_vesting::pallet::Event<T>
      **/
     PalletVestingEvent: {
         _enum: {
@@ -409,7 +482,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup61: pallet_multisig::pallet::Event<T>
+     * Lookup66: pallet_multisig::pallet::Event<T>
      **/
     PalletMultisigEvent: {
         _enum: {
@@ -440,14 +513,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+     * Lookup67: pallet_multisig::Timepoint<BlockNumber>
      **/
     PalletMultisigTimepoint: {
         height: string;
         index: string;
     };
     /**
-     * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     * Lookup68: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletCouncilRawEvent: {
         _enum: {
@@ -473,7 +546,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     * Lookup70: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
      **/
     PalletReferendumRawEvent: {
         _enum: {
@@ -484,21 +557,22 @@ declare const _default: {
             VoteCast: string;
             VoteRevealed: string;
             StakeReleased: string;
+            AccountOptedOutOfVoting: string;
         };
     };
     /**
-     * Lookup66: pallet_referendum::Instance1
+     * Lookup71: pallet_referendum::Instance1
      **/
     PalletReferendumInstance1: string;
     /**
-     * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
+     * Lookup73: pallet_referendum::OptionResult<MemberId, VotePower>
      **/
     PalletReferendumOptionResult: {
         optionId: string;
         votePower: string;
     };
     /**
-     * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     * Lookup74: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletMembershipRawEvent: {
         _enum: {
@@ -522,7 +596,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup75: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipBuyMembershipParameters: {
         rootAccount: string;
@@ -532,7 +606,7 @@ declare const _default: {
         referrerId: string;
     };
     /**
-     * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup78: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipInviteMembershipParameters: {
         invitingMemberId: string;
@@ -542,7 +616,7 @@ declare const _default: {
         metadata: string;
     };
     /**
-     * Lookup74: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+     * Lookup79: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
      **/
     PalletMembershipCreateMemberParameters: {
         rootAccount: string;
@@ -552,7 +626,7 @@ declare const _default: {
         isFoundingMember: string;
     };
     /**
-     * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup80: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletMembershipGiftMembershipParameters: {
         rootAccount: string;
@@ -565,7 +639,7 @@ declare const _default: {
         applyRootAccountInvitationLock: string;
     };
     /**
-     * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     * Lookup84: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
      **/
     PalletForumRawEvent: {
         _enum: {
@@ -589,7 +663,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup78: pallet_forum::PrivilegedActor<T>
+     * Lookup85: pallet_forum::PrivilegedActor<T>
      **/
     PalletForumPrivilegedActor: {
         _enum: {
@@ -598,7 +672,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     * Lookup86: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
      **/
     PalletForumExtendedPostIdObject: {
         categoryId: string;
@@ -606,7 +680,7 @@ declare const _default: {
         postId: string;
     };
     /**
-     * Lookup84: pallet_constitution::RawEvent<primitive_types::H256>
+     * Lookup91: pallet_constitution::RawEvent<primitive_types::H256>
      **/
     PalletConstitutionRawEvent: {
         _enum: {
@@ -614,7 +688,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup85: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     * Lookup92: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
      **/
     PalletBountyRawEvent: {
         _enum: {
@@ -644,7 +718,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup86: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+     * Lookup93: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
      **/
     PalletBountyBountyParametersBTreeSet: {
         oracle: string;
@@ -656,7 +730,7 @@ declare const _default: {
         fundingType: string;
     };
     /**
-     * Lookup87: pallet_bounty::BountyActor<MemberId>
+     * Lookup94: pallet_bounty::BountyActor<MemberId>
      **/
     PalletBountyBountyActor: {
         _enum: {
@@ -665,7 +739,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup88: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+     * Lookup95: pallet_bounty::AssuranceContractType<BTreeSet<T>>
      **/
     PalletBountyAssuranceContractTypeBTreeSet: {
         _enum: {
@@ -674,7 +748,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+     * Lookup96: pallet_bounty::FundingType<BlockNumber, Balance>
      **/
     PalletBountyFundingType: {
         _enum: {
@@ -688,7 +762,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     * Lookup98: pallet_bounty::OracleWorkEntryJudgment<Balance>
      **/
     PalletBountyOracleWorkEntryJudgment: {
         _enum: {
@@ -702,9 +776,9 @@ declare const _default: {
         };
     };
     /**
-     * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     * Lookup101: pallet_joystream_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
      **/
-    PalletUtilityRawEvent: {
+    PalletJoystreamUtilityRawEvent: {
         _enum: {
             Signaled: string;
             RuntimeUpgraded: string;
@@ -713,19 +787,19 @@ declare const _default: {
         };
     };
     /**
-     * Lookup95: pallet_common::working_group::iterable_enums::WorkingGroup
+     * Lookup102: pallet_common::working_group::iterable_enums::WorkingGroup
      **/
     PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
         _enum: string[];
     };
     /**
-     * Lookup96: pallet_common::BalanceKind
+     * Lookup103: pallet_common::BalanceKind
      **/
     PalletCommonBalanceKind: {
         _enum: string[];
     };
     /**
-     * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     * Lookup104: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
      **/
     PalletContentRawEvent: {
         _enum: {
@@ -755,7 +829,6 @@ declare const _default: {
             VideoAssetsDeletedByModerator: string;
             ChannelPayoutsUpdated: string;
             ChannelRewardUpdated: string;
-            CouncilRewardClaimed: string;
             EnglishAuctionStarted: string;
             OpenAuctionStarted: string;
             NftIssued: string;
@@ -784,10 +857,11 @@ declare const _default: {
             ChannelNftLimitUpdated: string;
             ToggledNftLimits: string;
             CreatorTokenIssued: string;
+            CreatorTokenIssuerRemarked: string;
         };
     };
     /**
-     * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     * Lookup105: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
      **/
     PalletContentPermissionsContentActor: {
         _enum: {
@@ -797,7 +871,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup106: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentChannelRecord: {
         owner: string;
@@ -816,26 +890,26 @@ declare const _default: {
         channelStateBloatBond: string;
     };
     /**
-     * Lookup103: pallet_content::types::iterable_enums::ChannelActionPermission
+     * Lookup110: pallet_content::types::iterable_enums::ChannelActionPermission
      **/
     PalletContentIterableEnumsChannelActionPermission: {
         _enum: string[];
     };
     /**
-     * Lookup110: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+     * Lookup117: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
         _enum: string[];
     };
     /**
-     * Lookup113: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     * Lookup120: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
      **/
     PalletCommonBloatBondRepayableBloatBond: {
         repaymentRestrictedTo: string;
         amount: string;
     };
     /**
-     * Lookup114: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     * Lookup121: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
      **/
     PalletContentChannelOwner: {
         _enum: {
@@ -844,7 +918,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup115: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup122: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentChannelTransferStatus: {
         _enum: {
@@ -853,14 +927,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup116: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup123: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentPendingTransfer: {
         newOwner: string;
         transferParams: string;
     };
     /**
-     * Lookup117: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+     * Lookup124: pallet_content::types::TransferCommitmentParameters<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBoundedBTreeMap: {
         newCollaborators: string;
@@ -868,21 +942,21 @@ declare const _default: {
         transferId: string;
     };
     /**
-     * Lookup118: pallet_content::types::LimitPerPeriod<BlockNumber>
+     * Lookup125: pallet_content::types::LimitPerPeriod<BlockNumber>
      **/
     PalletContentLimitPerPeriod: {
         limit: string;
         blockNumberPeriod: string;
     };
     /**
-     * Lookup119: pallet_content::types::NftCounter<BlockNumber>
+     * Lookup126: pallet_content::types::NftCounter<BlockNumber>
      **/
     PalletContentNftCounter: {
         counter: string;
         lastUpdated: string;
     };
     /**
-     * Lookup120: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup127: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionParamsRecord: {
         startingPrice: string;
@@ -894,7 +968,7 @@ declare const _default: {
         minBidStep: string;
     };
     /**
-     * Lookup122: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup129: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionParamsRecord: {
         startingPrice: string;
@@ -904,7 +978,7 @@ declare const _default: {
         bidLockDuration: string;
     };
     /**
-     * Lookup123: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     * Lookup130: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
      **/
     PalletContentNftTypesNftIssuanceParametersRecord: {
         royalty: string;
@@ -913,7 +987,7 @@ declare const _default: {
         initTransactionalStatus: string;
     };
     /**
-     * Lookup124: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     * Lookup131: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
      **/
     PalletContentNftTypesInitTransactionalStatusRecord: {
         _enum: {
@@ -925,7 +999,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup126: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     * Lookup133: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
      **/
     PalletContentChannelCreationParametersRecord: {
         assets: string;
@@ -937,14 +1011,14 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup127: pallet_content::types::StorageAssetsRecord<Balance>
+     * Lookup134: pallet_content::types::StorageAssetsRecord<Balance>
      **/
     PalletContentStorageAssetsRecord: {
         objectCreationList: string;
         expectedDataSizeFee: string;
     };
     /**
-     * Lookup129: pallet_storage::DataObjectCreationParameters
+     * Lookup136: pallet_storage::DataObjectCreationParameters
      **/
     PalletStorageDataObjectCreationParameters: {
         _alias: {
@@ -954,14 +1028,14 @@ declare const _default: {
         ipfsContentId: string;
     };
     /**
-     * Lookup130: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     * Lookup137: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketIdRecord: {
         distributionBucketFamilyId: string;
         distributionBucketIndex: string;
     };
     /**
-     * Lookup137: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     * Lookup144: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
      **/
     PalletContentChannelUpdateParametersRecord: {
         assetsToUpload: string;
@@ -972,7 +1046,7 @@ declare const _default: {
         storageBucketsNumWitness: string;
     };
     /**
-     * Lookup139: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup146: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoCreationParametersRecord: {
         assets: string;
@@ -983,7 +1057,7 @@ declare const _default: {
         storageBucketsNumWitness: string;
     };
     /**
-     * Lookup141: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup148: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoUpdateParametersRecord: {
         assetsToUpload: string;
@@ -994,22 +1068,20 @@ declare const _default: {
         storageBucketsNumWitness: string;
     };
     /**
-     * Lookup144: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+     * Lookup151: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
         _enum: {
             HideVideo: string;
             HideChannel: string;
             ChangeChannelFeatureStatus: string;
-            DeleteVideo: string;
-            DeleteChannel: string;
             DeleteVideoAssets: string;
             DeleteNonVideoChannelAssets: string;
             UpdateChannelNftLimits: string;
         };
     };
     /**
-     * Lookup148: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+     * Lookup155: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBTreeMap: {
         newCollaborators: string;
@@ -1017,7 +1089,7 @@ declare const _default: {
         transferId: string;
     };
     /**
-     * Lookup149: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+     * Lookup156: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
      **/
     PalletContentUpdateChannelPayoutsParametersRecord: {
         commitment: string;
@@ -1027,16 +1099,15 @@ declare const _default: {
         channelCashoutsEnabled: string;
     };
     /**
-     * Lookup150: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+     * Lookup157: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
      **/
     PalletContentChannelPayoutsPayloadParametersRecord: {
-        uploaderAccount: string;
         objectCreationParams: string;
         expectedDataSizeFee: string;
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup154: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     * Lookup161: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
      **/
     PalletContentChannelFundsDestination: {
         _enum: {
@@ -1045,13 +1116,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup155: pallet_content::types::NftLimitPeriod
+     * Lookup162: pallet_content::types::NftLimitPeriod
      **/
     PalletContentNftLimitPeriod: {
         _enum: string[];
     };
     /**
-     * Lookup156: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+     * Lookup163: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
      **/
     PalletStorageRawEvent: {
         _enum: {
@@ -1100,7 +1171,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup157: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     * Lookup164: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
      **/
     PalletStorageUploadParametersRecord: {
         bagId: string;
@@ -1110,7 +1181,7 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup158: pallet_storage::BagIdType<MemberId, ChannelId>
+     * Lookup165: pallet_storage::BagIdType<MemberId, ChannelId>
      **/
     PalletStorageBagIdType: {
         _enum: {
@@ -1119,7 +1190,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup159: pallet_storage::StaticBagId
+     * Lookup166: pallet_storage::StaticBagId
      **/
     PalletStorageStaticBagId: {
         _enum: {
@@ -1128,7 +1199,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup160: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     * Lookup167: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
      **/
     PalletStorageDynamicBagIdType: {
         _enum: {
@@ -1137,7 +1208,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup161: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     * Lookup168: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
      **/
     PalletStorageDynBagCreationParametersRecord: {
         bagId: string;
@@ -1149,7 +1220,7 @@ declare const _default: {
         distributionBuckets: string;
     };
     /**
-     * Lookup164: pallet_storage::Voucher
+     * Lookup171: pallet_storage::Voucher
      **/
     PalletStorageVoucher: {
         sizeLimit: string;
@@ -1158,13 +1229,13 @@ declare const _default: {
         objectsUsed: string;
     };
     /**
-     * Lookup165: pallet_storage::DynamicBagType
+     * Lookup172: pallet_storage::DynamicBagType
      **/
     PalletStorageDynamicBagType: {
         _enum: string[];
     };
     /**
-     * Lookup169: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+     * Lookup176: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
      **/
     PalletProjectTokenEventsRawEvent: {
         _enum: {
@@ -1186,10 +1257,14 @@ declare const _default: {
             TokenSaleFinalized: string;
             TransferPolicyChangedToPermissionless: string;
             TokensBurned: string;
+            AmmActivated: string;
+            TokensBoughtOnAmm: string;
+            TokensSoldOnAmm: string;
+            AmmDeactivated: string;
         };
     };
     /**
-     * Lookup170: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     * Lookup177: pallet_project_token::types::TransferPolicy<primitive_types::H256>
      **/
     PalletProjectTokenTransferPolicy: {
         _enum: {
@@ -1198,24 +1273,24 @@ declare const _default: {
         };
     };
     /**
-     * Lookup171: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     * Lookup178: pallet_project_token::types::TokenIssuanceParameters<pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
      **/
     PalletProjectTokenTokenIssuanceParameters: {
         initialAllocation: string;
-        symbol: string;
         transferPolicy: string;
         patronageRate: string;
         revenueSplitRate: string;
+        metadata: string;
     };
     /**
-     * Lookup172: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup179: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenAllocation: {
         amount: string;
         vestingScheduleParams: string;
     };
     /**
-     * Lookup173: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     * Lookup180: pallet_project_token::types::VestingScheduleParams<BlockNumber>
      **/
     PalletProjectTokenVestingScheduleParams: {
         linearVestingDuration: string;
@@ -1223,7 +1298,7 @@ declare const _default: {
         cliffAmountPercentage: string;
     };
     /**
-     * Lookup176: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     * Lookup183: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
      **/
     PalletProjectTokenTransferPolicyParams: {
         _enum: {
@@ -1232,14 +1307,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup177: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     * Lookup184: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
      **/
     PalletProjectTokenWhitelistParams: {
         commitment: string;
         payload: string;
     };
     /**
-     * Lookup178: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     * Lookup185: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
      **/
     PalletProjectTokenSingleDataObjectUploadParams: {
         objectCreationParams: string;
@@ -1247,7 +1322,7 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup185: pallet_project_token::types::Validated<MemberId>
+     * Lookup192: pallet_project_token::types::Validated<MemberId>
      **/
     PalletProjectTokenValidated: {
         _enum: {
@@ -1256,21 +1331,21 @@ declare const _default: {
         };
     };
     /**
-     * Lookup186: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup193: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenValidatedPayment: {
         payment: string;
         vestingCleanupCandidate: string;
     };
     /**
-     * Lookup187: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup194: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenPaymentWithVesting: {
         amount: string;
         vestingSchedule: string;
     };
     /**
-     * Lookup189: pallet_project_token::types::VestingSource
+     * Lookup196: pallet_project_token::types::VestingSource
      **/
     PalletProjectTokenVestingSource: {
         _enum: {
@@ -1280,7 +1355,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup193: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     * Lookup200: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletProjectTokenTokenSale: {
         unitPrice: string;
@@ -1295,7 +1370,15 @@ declare const _default: {
         autoFinalize: string;
     };
     /**
-     * Lookup195: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     * Lookup201: pallet_project_token::types::AmmCurve<Balance>
+     **/
+    PalletProjectTokenAmmCurve: {
+        slope: string;
+        intercept: string;
+        providedSupply: string;
+    };
+    /**
+     * Lookup203: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
      **/
     PalletProposalsEngineRawEvent: {
         _enum: {
@@ -1308,7 +1391,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup196: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     * Lookup204: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
      **/
     PalletProposalsEngineProposalStatusesProposalStatus: {
         _enum: {
@@ -1318,7 +1401,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     * Lookup205: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
      **/
     PalletProposalsEngineProposalStatusesProposalDecision: {
         _enum: {
@@ -1332,13 +1415,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     * Lookup206: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
      **/
     PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
         _enum: string[];
     };
     /**
-     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     * Lookup207: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
      **/
     PalletProposalsEngineProposalStatusesExecutionStatus: {
         _enum: {
@@ -1349,13 +1432,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup200: pallet_proposals_engine::types::VoteKind
+     * Lookup208: pallet_proposals_engine::types::VoteKind
      **/
     PalletProposalsEngineVoteKind: {
         _enum: string[];
     };
     /**
-     * Lookup201: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     * Lookup209: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
      **/
     PalletProposalsDiscussionRawEvent: {
         _enum: {
@@ -1367,7 +1450,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup202: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+     * Lookup210: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
      **/
     PalletProposalsDiscussionThreadModeBTreeSet: {
         _enum: {
@@ -1376,7 +1459,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup203: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     * Lookup211: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
      **/
     PalletProposalsCodexRawEvent: {
         _enum: {
@@ -1384,7 +1467,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup204: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     * Lookup212: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
      **/
     PalletProposalsCodexGeneralProposalParams: {
         memberId: string;
@@ -1394,7 +1477,7 @@ declare const _default: {
         exactExecutionBlock: string;
     };
     /**
-     * Lookup205: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+     * Lookup213: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
      **/
     PalletProposalsCodexProposalDetails: {
         _enum: {
@@ -1424,14 +1507,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup207: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     * Lookup215: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
      **/
     PalletCommonFundingRequestParameters: {
         account: string;
         amount: string;
     };
     /**
-     * Lookup208: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     * Lookup216: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
      **/
     PalletProposalsCodexCreateOpeningParameters: {
         description: string;
@@ -1440,14 +1523,14 @@ declare const _default: {
         group: string;
     };
     /**
-     * Lookup209: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     * Lookup217: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
      **/
     PalletWorkingGroupStakePolicy: {
         stakeAmount: string;
         leavingUnstakingPeriod: string;
     };
     /**
-     * Lookup210: pallet_proposals_codex::types::FillOpeningParameters
+     * Lookup218: pallet_proposals_codex::types::FillOpeningParameters
      **/
     PalletProposalsCodexFillOpeningParameters: {
         openingId: string;
@@ -1455,7 +1538,7 @@ declare const _default: {
         workingGroup: string;
     };
     /**
-     * Lookup211: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     * Lookup219: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
      **/
     PalletProposalsCodexTerminateRoleParameters: {
         workerId: string;
@@ -1463,7 +1546,7 @@ declare const _default: {
         group: string;
     };
     /**
-     * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+     * Lookup220: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
      **/
     PalletWorkingGroupRawEventInstance1: {
         _enum: {
@@ -1495,13 +1578,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup216: pallet_working_group::types::OpeningType
+     * Lookup224: pallet_working_group::types::OpeningType
      **/
     PalletWorkingGroupOpeningType: {
         _enum: string[];
     };
     /**
-     * Lookup217: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     * Lookup225: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupApplyOnOpeningParams: {
         memberId: string;
@@ -1512,24 +1595,24 @@ declare const _default: {
         stakeParameters: string;
     };
     /**
-     * Lookup218: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup226: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupStakeParameters: {
         stake: string;
         stakingAccountId: string;
     };
     /**
-     * Lookup219: pallet_working_group::Instance1
+     * Lookup227: pallet_working_group::Instance1
      **/
     PalletWorkingGroupInstance1: string;
     /**
-     * Lookup220: pallet_working_group::types::RewardPaymentType
+     * Lookup228: pallet_working_group::types::RewardPaymentType
      **/
     PalletWorkingGroupRewardPaymentType: {
         _enum: string[];
     };
     /**
-     * Lookup221: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+     * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
      **/
     PalletWorkingGroupRawEventInstance2: {
         _enum: {
@@ -1561,11 +1644,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup222: pallet_working_group::Instance2
+     * Lookup230: pallet_working_group::Instance2
      **/
     PalletWorkingGroupInstance2: string;
     /**
-     * Lookup223: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+     * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
      **/
     PalletWorkingGroupRawEventInstance3: {
         _enum: {
@@ -1597,11 +1680,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup224: pallet_working_group::Instance3
+     * Lookup232: pallet_working_group::Instance3
      **/
     PalletWorkingGroupInstance3: string;
     /**
-     * Lookup225: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+     * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
      **/
     PalletWorkingGroupRawEventInstance4: {
         _enum: {
@@ -1633,11 +1716,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup226: pallet_working_group::Instance4
+     * Lookup234: pallet_working_group::Instance4
      **/
     PalletWorkingGroupInstance4: string;
     /**
-     * Lookup227: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+     * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
      **/
     PalletWorkingGroupRawEventInstance5: {
         _enum: {
@@ -1669,11 +1752,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup228: pallet_working_group::Instance5
+     * Lookup236: pallet_working_group::Instance5
      **/
     PalletWorkingGroupInstance5: string;
     /**
-     * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+     * Lookup237: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
      **/
     PalletWorkingGroupRawEventInstance6: {
         _enum: {
@@ -1705,11 +1788,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup230: pallet_working_group::Instance6
+     * Lookup238: pallet_working_group::Instance6
      **/
     PalletWorkingGroupInstance6: string;
     /**
-     * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+     * Lookup239: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
      **/
     PalletWorkingGroupRawEventInstance7: {
         _enum: {
@@ -1741,11 +1824,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup232: pallet_working_group::Instance7
+     * Lookup240: pallet_working_group::Instance7
      **/
     PalletWorkingGroupInstance7: string;
     /**
-     * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+     * Lookup241: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
      **/
     PalletWorkingGroupRawEventInstance8: {
         _enum: {
@@ -1777,11 +1860,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup234: pallet_working_group::Instance8
+     * Lookup242: pallet_working_group::Instance8
      **/
     PalletWorkingGroupInstance8: string;
     /**
-     * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+     * Lookup243: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
      **/
     PalletWorkingGroupRawEventInstance9: {
         _enum: {
@@ -1813,11 +1896,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup236: pallet_working_group::Instance9
+     * Lookup244: pallet_working_group::Instance9
      **/
     PalletWorkingGroupInstance9: string;
     /**
-     * Lookup237: frame_system::Phase
+     * Lookup245: frame_system::Phase
      **/
     FrameSystemPhase: {
         _enum: {
@@ -1827,20 +1910,17 @@ declare const _default: {
         };
     };
     /**
-     * Lookup241: frame_system::LastRuntimeUpgradeInfo
+     * Lookup249: frame_system::LastRuntimeUpgradeInfo
      **/
     FrameSystemLastRuntimeUpgradeInfo: {
         specVersion: string;
         specName: string;
     };
     /**
-     * Lookup244: frame_system::pallet::Call<T>
+     * Lookup252: frame_system::pallet::Call<T>
      **/
     FrameSystemCall: {
         _enum: {
-            fill_block: {
-                ratio: string;
-            };
             remark: {
                 remark: string;
             };
@@ -1872,7 +1952,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup247: frame_system::limits::BlockWeights
+     * Lookup255: frame_system::limits::BlockWeights
      **/
     FrameSystemLimitsBlockWeights: {
         baseBlock: string;
@@ -1880,15 +1960,15 @@ declare const _default: {
         perClass: string;
     };
     /**
-     * Lookup248: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     * Lookup256: frame_support::dispatch::PerDispatchClass<frame_system::limits::WeightsPerClass>
      **/
-    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
+    FrameSupportDispatchPerDispatchClassWeightsPerClass: {
         normal: string;
         operational: string;
         mandatory: string;
     };
     /**
-     * Lookup249: frame_system::limits::WeightsPerClass
+     * Lookup257: frame_system::limits::WeightsPerClass
      **/
     FrameSystemLimitsWeightsPerClass: {
         baseExtrinsic: string;
@@ -1897,28 +1977,28 @@ declare const _default: {
         reserved: string;
     };
     /**
-     * Lookup250: frame_system::limits::BlockLength
+     * Lookup259: frame_system::limits::BlockLength
      **/
     FrameSystemLimitsBlockLength: {
         max: string;
     };
     /**
-     * Lookup251: frame_support::weights::PerDispatchClass<T>
+     * Lookup260: frame_support::dispatch::PerDispatchClass<T>
      **/
-    FrameSupportWeightsPerDispatchClassU32: {
+    FrameSupportDispatchPerDispatchClassU32: {
         normal: string;
         operational: string;
         mandatory: string;
     };
     /**
-     * Lookup252: frame_support::weights::RuntimeDbWeight
+     * Lookup261: sp_weights::RuntimeDbWeight
      **/
-    FrameSupportWeightsRuntimeDbWeight: {
+    SpWeightsRuntimeDbWeight: {
         read: string;
         write: string;
     };
     /**
-     * Lookup253: sp_version::RuntimeVersion
+     * Lookup262: sp_version::RuntimeVersion
      **/
     SpVersionRuntimeVersion: {
         specName: string;
@@ -1931,13 +2011,13 @@ declare const _default: {
         stateVersion: string;
     };
     /**
-     * Lookup259: frame_system::pallet::Error<T>
+     * Lookup268: frame_system::pallet::Error<T>
      **/
     FrameSystemError: {
         _enum: string[];
     };
     /**
-     * Lookup260: pallet_utility::pallet::Call<T>
+     * Lookup269: pallet_utility::pallet::Call<T>
      **/
     PalletUtilityCall: {
         _enum: {
@@ -1958,10 +2038,14 @@ declare const _default: {
             force_batch: {
                 calls: string;
             };
+            with_weight: {
+                call: string;
+                weight: string;
+            };
         };
     };
     /**
-     * Lookup263: pallet_babe::pallet::Call<T>
+     * Lookup272: pallet_babe::pallet::Call<T>
      **/
     PalletBabeCall: {
         _enum: {
@@ -1979,7 +2063,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup264: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     * Lookup273: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
      **/
     SpConsensusSlotsEquivocationProof: {
         offender: string;
@@ -1988,7 +2072,7 @@ declare const _default: {
         secondHeader: string;
     };
     /**
-     * Lookup265: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     * Lookup274: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
      **/
     SpRuntimeHeader: {
         parentHash: string;
@@ -1998,15 +2082,15 @@ declare const _default: {
         digest: string;
     };
     /**
-     * Lookup266: sp_runtime::traits::BlakeTwo256
+     * Lookup275: sp_runtime::traits::BlakeTwo256
      **/
     SpRuntimeBlakeTwo256: string;
     /**
-     * Lookup267: sp_consensus_babe::app::Public
+     * Lookup276: sp_consensus_babe::app::Public
      **/
     SpConsensusBabeAppPublic: string;
     /**
-     * Lookup269: sp_session::MembershipProof
+     * Lookup278: sp_session::MembershipProof
      **/
     SpSessionMembershipProof: {
         session: string;
@@ -2014,7 +2098,7 @@ declare const _default: {
         validatorCount: string;
     };
     /**
-     * Lookup270: sp_consensus_babe::digests::NextConfigDescriptor
+     * Lookup279: sp_consensus_babe::digests::NextConfigDescriptor
      **/
     SpConsensusBabeDigestsNextConfigDescriptor: {
         _enum: {
@@ -2026,13 +2110,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup271: sp_consensus_babe::AllowedSlots
+     * Lookup280: sp_consensus_babe::AllowedSlots
      **/
     SpConsensusBabeAllowedSlots: {
         _enum: string[];
     };
     /**
-     * Lookup272: pallet_timestamp::pallet::Call<T>
+     * Lookup281: pallet_timestamp::pallet::Call<T>
      **/
     PalletTimestampCall: {
         _enum: {
@@ -2042,17 +2126,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup274: pallet_authorship::pallet::Call<T>
-     **/
-    PalletAuthorshipCall: {
-        _enum: {
-            set_uncles: {
-                newUncles: string;
-            };
-        };
-    };
-    /**
-     * Lookup276: pallet_balances::pallet::Call<T, I>
+     * Lookup282: pallet_balances::pallet::Call<T, I>
      **/
     PalletBalancesCall: {
         _enum: {
@@ -2085,7 +2159,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup277: pallet_election_provider_multi_phase::pallet::Call<T>
+     * Lookup283: pallet_election_provider_multi_phase::pallet::Call<T>
      **/
     PalletElectionProviderMultiPhaseCall: {
         _enum: {
@@ -2109,7 +2183,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup278: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     * Lookup284: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseRawSolution: {
         solution: string;
@@ -2117,7 +2191,7 @@ declare const _default: {
         round: string;
     };
     /**
-     * Lookup279: joystream_node_runtime::NposSolution16
+     * Lookup285: joystream_node_runtime::NposSolution16
      **/
     JoystreamNodeRuntimeNposSolution16: {
         votes1: string;
@@ -2138,29 +2212,21 @@ declare const _default: {
         votes16: string;
     };
     /**
-     * Lookup330: sp_npos_elections::ElectionScore
-     **/
-    SpNposElectionsElectionScore: {
-        minimalStake: string;
-        sumStake: string;
-        sumStakeSquared: string;
-    };
-    /**
-     * Lookup331: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     * Lookup336: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
      **/
     PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
         voters: string;
         targets: string;
     };
     /**
-     * Lookup335: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     * Lookup340: sp_npos_elections::Support<sp_core::crypto::AccountId32>
      **/
     SpNposElectionsSupport: {
         total: string;
         voters: string;
     };
     /**
-     * Lookup338: pallet_staking::pallet::pallet::Call<T>
+     * Lookup342: pallet_staking::pallet::pallet::Call<T>
      **/
     PalletStakingPalletCall: {
         _enum: {
@@ -2224,10 +2290,6 @@ declare const _default: {
             rebond: {
                 value: string;
             };
-            set_history_depth: {
-                newHistoryDepth: string;
-                eraItemsDeleted: string;
-            };
             reap_stash: {
                 stash: string;
                 numSlashingSpans: string;
@@ -2249,10 +2311,16 @@ declare const _default: {
             force_apply_min_commission: {
                 validatorStash: string;
             };
+            set_min_commission: {
+                _alias: {
+                    new_: string;
+                };
+                new_: string;
+            };
         };
     };
     /**
-     * Lookup339: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+     * Lookup343: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
      **/
     PalletStakingRewardDestination: {
         _enum: {
@@ -2264,7 +2332,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup343: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup347: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU128: {
         _enum: {
@@ -2274,7 +2342,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup344: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup348: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU32: {
         _enum: {
@@ -2284,7 +2352,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup345: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+     * Lookup349: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
      **/
     PalletStakingPalletConfigOpPercent: {
         _enum: {
@@ -2294,7 +2362,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup346: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+     * Lookup350: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
      **/
     PalletStakingPalletConfigOpPerbill: {
         _enum: {
@@ -2304,7 +2372,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup347: pallet_session::pallet::Call<T>
+     * Lookup351: pallet_session::pallet::Call<T>
      **/
     PalletSessionCall: {
         _enum: {
@@ -2319,7 +2387,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup348: joystream_node_runtime::SessionKeys
+     * Lookup352: joystream_node_runtime::SessionKeys
      **/
     JoystreamNodeRuntimeSessionKeys: {
         grandpa: string;
@@ -2328,11 +2396,11 @@ declare const _default: {
         authorityDiscovery: string;
     };
     /**
-     * Lookup349: sp_authority_discovery::app::Public
+     * Lookup353: sp_authority_discovery::app::Public
      **/
     SpAuthorityDiscoveryAppPublic: string;
     /**
-     * Lookup350: pallet_grandpa::pallet::Call<T>
+     * Lookup354: pallet_grandpa::pallet::Call<T>
      **/
     PalletGrandpaCall: {
         _enum: {
@@ -2351,14 +2419,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup351: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+     * Lookup355: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocationProof: {
         setId: string;
         equivocation: string;
     };
     /**
-     * Lookup352: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+     * Lookup356: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocation: {
         _enum: {
@@ -2367,7 +2435,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup353: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup357: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrevote: {
         roundNumber: string;
@@ -2376,22 +2444,22 @@ declare const _default: {
         second: string;
     };
     /**
-     * Lookup354: finality_grandpa::Prevote<primitive_types::H256, N>
+     * Lookup358: finality_grandpa::Prevote<primitive_types::H256, N>
      **/
     FinalityGrandpaPrevote: {
         targetHash: string;
         targetNumber: string;
     };
     /**
-     * Lookup355: sp_finality_grandpa::app::Signature
+     * Lookup359: sp_finality_grandpa::app::Signature
      **/
     SpFinalityGrandpaAppSignature: string;
     /**
-     * Lookup356: sp_core::ed25519::Signature
+     * Lookup360: sp_core::ed25519::Signature
      **/
     SpCoreEd25519Signature: string;
     /**
-     * Lookup359: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup363: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrecommit: {
         roundNumber: string;
@@ -2400,14 +2468,14 @@ declare const _default: {
         second: string;
     };
     /**
-     * Lookup360: finality_grandpa::Precommit<primitive_types::H256, N>
+     * Lookup364: finality_grandpa::Precommit<primitive_types::H256, N>
      **/
     FinalityGrandpaPrecommit: {
         targetHash: string;
         targetNumber: string;
     };
     /**
-     * Lookup362: pallet_im_online::pallet::Call<T>
+     * Lookup366: pallet_im_online::pallet::Call<T>
      **/
     PalletImOnlineCall: {
         _enum: {
@@ -2418,7 +2486,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup363: pallet_im_online::Heartbeat<BlockNumber>
+     * Lookup367: pallet_im_online::Heartbeat<BlockNumber>
      **/
     PalletImOnlineHeartbeat: {
         blockNumber: string;
@@ -2428,46 +2496,22 @@ declare const _default: {
         validatorsLen: string;
     };
     /**
-     * Lookup364: sp_core::offchain::OpaqueNetworkState
+     * Lookup368: sp_core::offchain::OpaqueNetworkState
      **/
     SpCoreOffchainOpaqueNetworkState: {
         peerId: string;
         externalAddresses: string;
     };
     /**
-     * Lookup368: pallet_im_online::sr25519::app_sr25519::Signature
+     * Lookup372: pallet_im_online::sr25519::app_sr25519::Signature
      **/
     PalletImOnlineSr25519AppSr25519Signature: string;
     /**
-     * Lookup369: sp_core::sr25519::Signature
+     * Lookup373: sp_core::sr25519::Signature
      **/
     SpCoreSr25519Signature: string;
     /**
-     * Lookup370: pallet_sudo::pallet::Call<T>
-     **/
-    PalletSudoCall: {
-        _enum: {
-            sudo: {
-                call: string;
-            };
-            sudo_unchecked_weight: {
-                call: string;
-                weight: string;
-            };
-            set_key: {
-                _alias: {
-                    new_: string;
-                };
-                new_: string;
-            };
-            sudo_as: {
-                who: string;
-                call: string;
-            };
-        };
-    };
-    /**
-     * Lookup371: pallet_bags_list::pallet::Call<T, I>
+     * Lookup374: pallet_bags_list::pallet::Call<T, I>
      **/
     PalletBagsListCall: {
         _enum: {
@@ -2480,7 +2524,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup372: pallet_vesting::pallet::Call<T>
+     * Lookup375: pallet_vesting::pallet::Call<T>
      **/
     PalletVestingCall: {
         _enum: {
@@ -2504,7 +2548,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup373: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     * Lookup376: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
      **/
     PalletVestingVestingInfo: {
         locked: string;
@@ -2512,7 +2556,7 @@ declare const _default: {
         startingBlock: string;
     };
     /**
-     * Lookup374: pallet_multisig::pallet::Call<T>
+     * Lookup377: pallet_multisig::pallet::Call<T>
      **/
     PalletMultisigCall: {
         _enum: {
@@ -2525,7 +2569,6 @@ declare const _default: {
                 otherSignatories: string;
                 maybeTimepoint: string;
                 call: string;
-                storeCall: string;
                 maxWeight: string;
             };
             approve_as_multi: {
@@ -2544,7 +2587,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup377: pallet_council::Call<T>
+     * Lookup379: pallet_council::Call<T>
      **/
     PalletCouncilCall: {
         _enum: {
@@ -2595,7 +2638,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup378: pallet_referendum::Call<T, I>
+     * Lookup380: pallet_referendum::Call<T, I>
      **/
     PalletReferendumCall: {
         _enum: {
@@ -2608,10 +2651,11 @@ declare const _default: {
                 voteOptionId: string;
             };
             release_vote_stake: string;
+            opt_out_of_voting: string;
         };
     };
     /**
-     * Lookup379: pallet_membership::Call<T>
+     * Lookup381: pallet_membership::Call<T>
      **/
     PalletMembershipCall: {
         _enum: {
@@ -2672,6 +2716,7 @@ declare const _default: {
             member_remark: {
                 memberId: string;
                 msg: string;
+                payment: string;
             };
             create_member: {
                 params: string;
@@ -2679,7 +2724,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup380: pallet_forum::Call<T>
+     * Lookup382: pallet_forum::Call<T>
      **/
     PalletForumCall: {
         _enum: {
@@ -2776,7 +2821,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup381: pallet_constitution::Call<T>
+     * Lookup383: pallet_constitution::Call<T>
      **/
     PalletConstitutionCall: {
         _enum: {
@@ -2786,7 +2831,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup382: pallet_bounty::Call<T>
+     * Lookup384: pallet_bounty::Call<T>
      **/
     PalletBountyCall: {
         _enum: {
@@ -2862,7 +2907,28 @@ declare const _default: {
         };
     };
     /**
-     * Lookup384: pallet_content::Call<T>
+     * Lookup385: pallet_joystream_utility::Call<T>
+     **/
+    PalletJoystreamUtilityCall: {
+        _enum: {
+            execute_signal_proposal: {
+                signal: string;
+            };
+            execute_runtime_upgrade_proposal: {
+                wasm: string;
+            };
+            update_working_group_budget: {
+                workingGroup: string;
+                amount: string;
+                balanceKind: string;
+            };
+            burn_account_tokens: {
+                amount: string;
+            };
+        };
+    };
+    /**
+     * Lookup386: pallet_content::Call<T>
      **/
     PalletContentCall: {
         _enum: {
@@ -2919,13 +2985,6 @@ declare const _default: {
                 storageBucketsNumWitness: string;
                 rationale: string;
             };
-            delete_channel_as_moderator: {
-                actor: string;
-                channelId: string;
-                channelBagWitness: string;
-                numObjectsToDelete: string;
-                rationale: string;
-            };
             set_channel_visibility_as_moderator: {
                 actor: string;
                 channelId: string;
@@ -2955,13 +3014,6 @@ declare const _default: {
                 assetsToRemove: string;
                 rationale: string;
             };
-            delete_video_as_moderator: {
-                actor: string;
-                videoId: string;
-                storageBucketsNumWitness: string;
-                numObjectsToDelete: string;
-                rationale: string;
-            };
             set_video_visibility_as_moderator: {
                 actor: string;
                 videoId: string;
@@ -2970,6 +3022,7 @@ declare const _default: {
             };
             update_channel_payouts: {
                 params: string;
+                uploaderAccount: string;
             };
             claim_channel_reward: {
                 actor: string;
@@ -2987,11 +3040,6 @@ declare const _default: {
             update_video_state_bloat_bond: {
                 newVideoStateBloatBond: string;
             };
-            claim_and_withdraw_channel_reward: {
-                actor: string;
-                proof: string;
-                item: string;
-            };
             issue_nft: {
                 actor: string;
                 videoId: string;
@@ -3172,17 +3220,31 @@ declare const _default: {
                 actor: string;
                 channelId: string;
             };
+            activate_amm: {
+                actor: string;
+                channelId: string;
+                params: string;
+            };
+            deactivate_amm: {
+                actor: string;
+                channelId: string;
+            };
+            creator_token_issuer_remark: {
+                actor: string;
+                channelId: string;
+                remark: string;
+            };
         };
     };
     /**
-     * Lookup385: pallet_content::types::ChannelBagWitness
+     * Lookup387: pallet_content::types::ChannelBagWitness
      **/
     PalletContentChannelBagWitness: {
         storageBucketsNum: string;
         distributionBucketsNum: string;
     };
     /**
-     * Lookup387: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+     * Lookup389: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
      **/
     PalletCommonMerkleTreeProofElementRecord: {
         _alias: {
@@ -3192,13 +3254,13 @@ declare const _default: {
         side: string;
     };
     /**
-     * Lookup388: pallet_common::merkle_tree::Side
+     * Lookup390: pallet_common::merkle_tree::Side
      **/
     PalletCommonMerkleTreeSide: {
         _enum: string[];
     };
     /**
-     * Lookup389: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     * Lookup391: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
      **/
     PalletContentPullPaymentElement: {
         channelId: string;
@@ -3206,7 +3268,7 @@ declare const _default: {
         reason: string;
     };
     /**
-     * Lookup390: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     * Lookup392: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
      **/
     PalletContentInitTransferParameters: {
         newCollaborators: string;
@@ -3214,7 +3276,7 @@ declare const _default: {
         newOwner: string;
     };
     /**
-     * Lookup391: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup393: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenSaleParams: {
         unitPrice: string;
@@ -3226,11 +3288,18 @@ declare const _default: {
         metadata: string;
     };
     /**
-     * Lookup392: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup394: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenTransfersPaymentWithVesting: string;
     /**
-     * Lookup396: pallet_storage::Call<T>
+     * Lookup398: pallet_project_token::types::AmmParams
+     **/
+    PalletProjectTokenAmmParams: {
+        slope: string;
+        intercept: string;
+    };
+    /**
+     * Lookup399: pallet_storage::Call<T>
      **/
     PalletStorageCall: {
         _enum: {
@@ -3364,9 +3433,6 @@ declare const _default: {
                 bucketId: string;
                 metadata: string;
             };
-            sudo_upload_data_objects: {
-                params: string;
-            };
             storage_operator_remark: {
                 workerId: string;
                 storageBucketId: string;
@@ -3380,7 +3446,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup397: pallet_project_token::Call<T>
+     * Lookup400: pallet_project_token::Call<T>
      **/
     PalletProjectTokenCall: {
         _enum: {
@@ -3418,30 +3484,42 @@ declare const _default: {
                 tokenId: string;
                 memberId: string;
             };
+            buy_on_amm: {
+                tokenId: string;
+                memberId: string;
+                amount: string;
+                slippageTolerance: string;
+            };
+            sell_on_amm: {
+                tokenId: string;
+                memberId: string;
+                amount: string;
+                slippageTolerance: string;
+            };
         };
     };
     /**
-     * Lookup398: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
+     * Lookup401: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
      **/
     PalletProjectTokenTransfersPayment: string;
     /**
-     * Lookup399: pallet_project_token::types::Payment<Balance>
+     * Lookup402: pallet_project_token::types::Payment<Balance>
      **/
     PalletProjectTokenPayment: {
         amount: string;
     };
     /**
-     * Lookup403: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     * Lookup406: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
      **/
     PalletProjectTokenMerkleProof: string;
     /**
-     * Lookup406: pallet_project_token::types::MerkleSide
+     * Lookup409: pallet_project_token::types::MerkleSide
      **/
     PalletProjectTokenMerkleSide: {
         _enum: string[];
     };
     /**
-     * Lookup407: pallet_proposals_engine::Call<T>
+     * Lookup412: pallet_proposals_engine::Call<T>
      **/
     PalletProposalsEngineCall: {
         _enum: {
@@ -3466,7 +3544,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup408: pallet_proposals_discussion::Call<T>
+     * Lookup413: pallet_proposals_discussion::Call<T>
      **/
     PalletProposalsDiscussionCall: {
         _enum: {
@@ -3495,7 +3573,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup409: pallet_proposals_codex::Call<T>
+     * Lookup414: pallet_proposals_codex::Call<T>
      **/
     PalletProposalsCodexCall: {
         _enum: {
@@ -3506,7 +3584,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup410: pallet_working_group::Call<T, I>
+     * Lookup415: pallet_working_group::Call<T, I>
      **/
     PalletWorkingGroupCall: {
         _enum: {
@@ -3589,7 +3667,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup419: joystream_node_runtime::OriginCaller
+     * Lookup424: joystream_node_runtime::OriginCaller
      **/
     JoystreamNodeRuntimeOriginCaller: {
         _enum: {
@@ -3598,7 +3676,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup420: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     * Lookup425: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
      **/
     FrameSupportDispatchRawOrigin: {
         _enum: {
@@ -3608,17 +3686,17 @@ declare const _default: {
         };
     };
     /**
-     * Lookup421: sp_core::Void
+     * Lookup426: sp_core::Void
      **/
     SpCoreVoid: string;
     /**
-     * Lookup422: pallet_utility::pallet::Error<T>
+     * Lookup427: pallet_utility::pallet::Error<T>
      **/
     PalletUtilityError: {
         _enum: string[];
     };
     /**
-     * Lookup429: sp_consensus_babe::digests::PreDigest
+     * Lookup434: sp_consensus_babe::digests::PreDigest
      **/
     SpConsensusBabeDigestsPreDigest: {
         _enum: {
@@ -3629,7 +3707,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup430: sp_consensus_babe::digests::PrimaryPreDigest
+     * Lookup435: sp_consensus_babe::digests::PrimaryPreDigest
      **/
     SpConsensusBabeDigestsPrimaryPreDigest: {
         authorityIndex: string;
@@ -3638,14 +3716,14 @@ declare const _default: {
         vrfProof: string;
     };
     /**
-     * Lookup431: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     * Lookup436: sp_consensus_babe::digests::SecondaryPlainPreDigest
      **/
     SpConsensusBabeDigestsSecondaryPlainPreDigest: {
         authorityIndex: string;
         slot: string;
     };
     /**
-     * Lookup432: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     * Lookup437: sp_consensus_babe::digests::SecondaryVRFPreDigest
      **/
     SpConsensusBabeDigestsSecondaryVRFPreDigest: {
         authorityIndex: string;
@@ -3654,35 +3732,20 @@ declare const _default: {
         vrfProof: string;
     };
     /**
-     * Lookup434: sp_consensus_babe::BabeEpochConfiguration
+     * Lookup439: sp_consensus_babe::BabeEpochConfiguration
      **/
     SpConsensusBabeBabeEpochConfiguration: {
         c: string;
         allowedSlots: string;
     };
     /**
-     * Lookup435: pallet_babe::pallet::Error<T>
+     * Lookup441: pallet_babe::pallet::Error<T>
      **/
     PalletBabeError: {
         _enum: string[];
     };
     /**
-     * Lookup437: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
-     **/
-    PalletAuthorshipUncleEntryItem: {
-        _enum: {
-            InclusionHeight: string;
-            Uncle: string;
-        };
-    };
-    /**
-     * Lookup438: pallet_authorship::pallet::Error<T>
-     **/
-    PalletAuthorshipError: {
-        _enum: string[];
-    };
-    /**
-     * Lookup440: pallet_balances::BalanceLock<Balance>
+     * Lookup443: pallet_balances::BalanceLock<Balance>
      **/
     PalletBalancesBalanceLock: {
         id: string;
@@ -3690,49 +3753,32 @@ declare const _default: {
         reasons: string;
     };
     /**
-     * Lookup441: pallet_balances::Reasons
+     * Lookup444: pallet_balances::Reasons
      **/
     PalletBalancesReasons: {
         _enum: string[];
     };
     /**
-     * Lookup444: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     * Lookup447: pallet_balances::ReserveData<ReserveIdentifier, Balance>
      **/
     PalletBalancesReserveData: {
         id: string;
         amount: string;
     };
     /**
-     * Lookup446: pallet_balances::Releases
-     **/
-    PalletBalancesReleases: {
-        _enum: string[];
-    };
-    /**
-     * Lookup447: pallet_balances::pallet::Error<T, I>
+     * Lookup449: pallet_balances::pallet::Error<T, I>
      **/
     PalletBalancesError: {
         _enum: string[];
     };
     /**
-     * Lookup449: pallet_transaction_payment::Releases
+     * Lookup451: pallet_transaction_payment::Releases
      **/
     PalletTransactionPaymentReleases: {
         _enum: string[];
     };
     /**
-     * Lookup450: pallet_election_provider_multi_phase::Phase<Bn>
-     **/
-    PalletElectionProviderMultiPhasePhase: {
-        _enum: {
-            Off: string;
-            Signed: string;
-            Unsigned: string;
-            Emergency: string;
-        };
-    };
-    /**
-     * Lookup452: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     * Lookup452: pallet_election_provider_multi_phase::ReadySolution<T>
      **/
     PalletElectionProviderMultiPhaseReadySolution: {
         supports: string;
@@ -3740,7 +3786,7 @@ declare const _default: {
         compute: string;
     };
     /**
-     * Lookup453: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     * Lookup454: pallet_election_provider_multi_phase::RoundSnapshot<T>
      **/
     PalletElectionProviderMultiPhaseRoundSnapshot: {
         voters: string;
@@ -3779,7 +3825,7 @@ declare const _default: {
         era: string;
     };
     /**
-     * Lookup467: pallet_staking::Nominations<T>
+     * Lookup468: pallet_staking::Nominations<T>
      **/
     PalletStakingNominations: {
         targets: string;
@@ -3787,25 +3833,19 @@ declare const _default: {
         suppressed: string;
     };
     /**
-     * Lookup468: pallet_staking::ActiveEraInfo
+     * Lookup469: pallet_staking::ActiveEraInfo
      **/
     PalletStakingActiveEraInfo: {
         index: string;
         start: string;
     };
     /**
-     * Lookup470: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     * Lookup471: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
      **/
     PalletStakingEraRewardPoints: {
         total: string;
         individual: string;
     };
-    /**
-     * Lookup474: pallet_staking::Forcing
-     **/
-    PalletStakingForcing: {
-        _enum: string[];
-    };
     /**
      * Lookup476: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
      **/
@@ -3833,29 +3873,23 @@ declare const _default: {
         paidOut: string;
     };
     /**
-     * Lookup482: pallet_staking::Releases
-     **/
-    PalletStakingReleases: {
-        _enum: string[];
-    };
-    /**
-     * Lookup483: pallet_staking::pallet::pallet::Error<T>
+     * Lookup482: pallet_staking::pallet::pallet::Error<T>
      **/
     PalletStakingPalletError: {
         _enum: string[];
     };
     /**
-     * Lookup487: sp_core::crypto::KeyTypeId
+     * Lookup486: sp_core::crypto::KeyTypeId
      **/
     SpCoreCryptoKeyTypeId: string;
     /**
-     * Lookup488: pallet_session::pallet::Error<T>
+     * Lookup487: pallet_session::pallet::Error<T>
      **/
     PalletSessionError: {
         _enum: string[];
     };
     /**
-     * Lookup490: pallet_grandpa::StoredState<N>
+     * Lookup489: pallet_grandpa::StoredState<N>
      **/
     PalletGrandpaStoredState: {
         _enum: {
@@ -3872,7 +3906,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup491: pallet_grandpa::StoredPendingChange<N, Limit>
+     * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
      **/
     PalletGrandpaStoredPendingChange: {
         scheduledAt: string;
@@ -3881,39 +3915,33 @@ declare const _default: {
         forced: string;
     };
     /**
-     * Lookup493: pallet_grandpa::pallet::Error<T>
+     * Lookup492: pallet_grandpa::pallet::Error<T>
      **/
     PalletGrandpaError: {
         _enum: string[];
     };
     /**
-     * Lookup499: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
      **/
     PalletImOnlineBoundedOpaqueNetworkState: {
         peerId: string;
         externalAddresses: string;
     };
     /**
-     * Lookup503: pallet_im_online::pallet::Error<T>
+     * Lookup502: pallet_im_online::pallet::Error<T>
      **/
     PalletImOnlineError: {
         _enum: string[];
     };
     /**
-     * Lookup504: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
      **/
     SpStakingOffenceOffenceDetails: {
         offender: string;
         reporters: string;
     };
     /**
-     * Lookup507: pallet_sudo::pallet::Error<T>
-     **/
-    PalletSudoError: {
-        _enum: string[];
-    };
-    /**
-     * Lookup508: pallet_bags_list::list::Node<T, I>
+     * Lookup506: pallet_bags_list::list::Node<T, I>
      **/
     PalletBagsListListNode: {
         id: string;
@@ -3923,14 +3951,14 @@ declare const _default: {
         score: string;
     };
     /**
-     * Lookup509: pallet_bags_list::list::Bag<T, I>
+     * Lookup507: pallet_bags_list::list::Bag<T, I>
      **/
     PalletBagsListListBag: {
         head: string;
         tail: string;
     };
     /**
-     * Lookup510: pallet_bags_list::pallet::Error<T, I>
+     * Lookup508: pallet_bags_list::pallet::Error<T, I>
      **/
     PalletBagsListError: {
         _enum: {
@@ -3938,25 +3966,25 @@ declare const _default: {
         };
     };
     /**
-     * Lookup511: pallet_bags_list::list::ListError
+     * Lookup509: pallet_bags_list::list::ListError
      **/
     PalletBagsListListListError: {
         _enum: string[];
     };
     /**
-     * Lookup514: pallet_vesting::Releases
+     * Lookup512: pallet_vesting::Releases
      **/
     PalletVestingReleases: {
         _enum: string[];
     };
     /**
-     * Lookup515: pallet_vesting::pallet::Error<T>
+     * Lookup513: pallet_vesting::pallet::Error<T>
      **/
     PalletVestingError: {
         _enum: string[];
     };
     /**
-     * Lookup517: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32, MaxApprovals>
      **/
     PalletMultisigMultisig: {
         when: string;
@@ -3965,20 +3993,20 @@ declare const _default: {
         approvals: string;
     };
     /**
-     * Lookup519: pallet_multisig::pallet::Error<T>
+     * Lookup517: pallet_multisig::pallet::Error<T>
      **/
     PalletMultisigError: {
         _enum: string[];
     };
     /**
-     * Lookup520: pallet_council::CouncilStageUpdate<BlockNumber>
+     * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
      **/
     PalletCouncilCouncilStageUpdate: {
         stage: string;
         changedAt: string;
     };
     /**
-     * Lookup521: pallet_council::CouncilStage<BlockNumber>
+     * Lookup519: pallet_council::CouncilStage<BlockNumber>
      **/
     PalletCouncilCouncilStage: {
         _enum: {
@@ -3988,26 +4016,26 @@ declare const _default: {
         };
     };
     /**
-     * Lookup522: pallet_council::CouncilStageAnnouncing<BlockNumber>
+     * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
      **/
     PalletCouncilCouncilStageAnnouncing: {
         candidatesCount: string;
         endsAt: string;
     };
     /**
-     * Lookup523: pallet_council::CouncilStageElection
+     * Lookup521: pallet_council::CouncilStageElection
      **/
     PalletCouncilCouncilStageElection: {
         candidatesCount: string;
     };
     /**
-     * Lookup524: pallet_council::CouncilStageIdle<BlockNumber>
+     * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
      **/
     PalletCouncilCouncilStageIdle: {
         endsAt: string;
     };
     /**
-     * Lookup526: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
      **/
     PalletCouncilCouncilMember: {
         stakingAccountId: string;
@@ -4018,7 +4046,7 @@ declare const _default: {
         unpaidReward: string;
     };
     /**
-     * Lookup528: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
      **/
     PalletCouncilCandidate: {
         stakingAccountId: string;
@@ -4029,13 +4057,13 @@ declare const _default: {
         noteHash: string;
     };
     /**
-     * Lookup529: pallet_council::Error<T>
+     * Lookup527: pallet_council::Error<T>
      **/
     PalletCouncilError: {
         _enum: string[];
     };
     /**
-     * Lookup530: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, bounded_collections::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStage: {
         _enum: {
@@ -4045,7 +4073,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup532: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
      **/
     PalletReferendumReferendumStageVoting: {
         started: string;
@@ -4054,7 +4082,7 @@ declare const _default: {
         endsAt: string;
     };
     /**
-     * Lookup533: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, bounded_collections::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStageRevealing: {
         started: string;
@@ -4064,7 +4092,7 @@ declare const _default: {
         endsAt: string;
     };
     /**
-     * Lookup534: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
      **/
     PalletReferendumCastVote: {
         commitment: string;
@@ -4073,13 +4101,13 @@ declare const _default: {
         voteFor: string;
     };
     /**
-     * Lookup535: pallet_referendum::Error<T, I>
+     * Lookup533: pallet_referendum::Error<T, I>
      **/
     PalletReferendumError: {
         _enum: string[];
     };
     /**
-     * Lookup536: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+     * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
      **/
     PalletMembershipMembershipObject: {
         handleHash: string;
@@ -4089,20 +4117,20 @@ declare const _default: {
         invites: string;
     };
     /**
-     * Lookup537: pallet_membership::StakingAccountMemberBinding<MemberId>
+     * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
      **/
     PalletMembershipStakingAccountMemberBinding: {
         memberId: string;
         confirmed: string;
     };
     /**
-     * Lookup538: pallet_membership::Error<T>
+     * Lookup536: pallet_membership::Error<T>
      **/
     PalletMembershipError: {
         _enum: string[];
     };
     /**
-     * Lookup539: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletForumCategory: {
         titleHash: string;
@@ -4115,7 +4143,7 @@ declare const _default: {
         stickyThreadIds: string;
     };
     /**
-     * Lookup541: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumThread: {
         categoryId: string;
@@ -4124,7 +4152,7 @@ declare const _default: {
         numberOfEditablePosts: string;
     };
     /**
-     * Lookup542: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumPost: {
         threadId: string;
@@ -4134,19 +4162,19 @@ declare const _default: {
         lastEdited: string;
     };
     /**
-     * Lookup543: pallet_forum::Error<T>
+     * Lookup541: pallet_forum::Error<T>
      **/
     PalletForumError: {
         _enum: string[];
     };
     /**
-     * Lookup544: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+     * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
      **/
     PalletConstitutionConstitutionInfo: {
         textHash: string;
     };
     /**
-     * Lookup545: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyRecord: {
         creationParams: string;
@@ -4156,7 +4184,7 @@ declare const _default: {
         hasUnpaidOracleReward: string;
     };
     /**
-     * Lookup547: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyParametersBoundedBTreeSet: {
         oracle: string;
@@ -4168,7 +4196,7 @@ declare const _default: {
         fundingType: string;
     };
     /**
-     * Lookup548: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup546: pallet_bounty::AssuranceContractType<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyAssuranceContractTypeBoundedBTreeSet: {
         _enum: {
@@ -4177,7 +4205,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup549: pallet_bounty::BountyMilestone<BlockNumber>
+     * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
      **/
     PalletBountyBountyMilestone: {
         _enum: {
@@ -4194,14 +4222,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup551: pallet_bounty::Contribution<T>
+     * Lookup549: pallet_bounty::Contribution<T>
      **/
     PalletBountyContribution: {
         amount: string;
         funderStateBloatBondAmount: string;
     };
     /**
-     * Lookup552: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
      **/
     PalletBountyEntryRecord: {
         memberId: string;
@@ -4210,13 +4238,19 @@ declare const _default: {
         workSubmitted: string;
     };
     /**
-     * Lookup553: pallet_bounty::Error<T>
+     * Lookup551: pallet_bounty::Error<T>
      **/
     PalletBountyError: {
         _enum: string[];
     };
     /**
-     * Lookup555: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup552: pallet_joystream_utility::Error<T>
+     **/
+    PalletJoystreamUtilityError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentVideoRecord: {
         inChannel: string;
@@ -4225,7 +4259,7 @@ declare const _default: {
         videoStateBloatBond: string;
     };
     /**
-     * Lookup556: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+     * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
      **/
     PalletContentNftTypesOwnedNft: {
         owner: string;
@@ -4234,7 +4268,7 @@ declare const _default: {
         openAuctionsNonce: string;
     };
     /**
-     * Lookup557: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+     * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>
      **/
     PalletContentNftTypesTransactionalStatusRecord: {
         _enum: {
@@ -4246,7 +4280,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup558: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesEnglishAuctionRecord: {
         startingPrice: string;
@@ -4259,14 +4293,14 @@ declare const _default: {
         topBid: string;
     };
     /**
-     * Lookup561: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionBid: {
         amount: string;
         bidderId: string;
     };
     /**
-     * Lookup562: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesOpenAuctionRecord: {
         startingPrice: string;
@@ -4277,7 +4311,7 @@ declare const _default: {
         start: string;
     };
     /**
-     * Lookup563: pallet_content::nft::types::NftOwner<MemberId>
+     * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
      **/
     PalletContentNftTypesNftOwner: {
         _enum: {
@@ -4286,7 +4320,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup566: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+     * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
      **/
     PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
         curators: string;
@@ -4294,7 +4328,7 @@ declare const _default: {
         permissionsByLevel: string;
     };
     /**
-     * Lookup573: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
      **/
     PalletContentNftTypesOpenAuctionBidRecord: {
         amount: string;
@@ -4302,13 +4336,13 @@ declare const _default: {
         auctionId: string;
     };
     /**
-     * Lookup574: pallet_content::errors::Error<T>
+     * Lookup572: pallet_content::errors::Error<T>
      **/
     PalletContentErrorsError: {
         _enum: string[];
     };
     /**
-     * Lookup575: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+     * Lookup573: pallet_storage::BagRecord<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
      **/
     PalletStorageBagRecord: {
         storedBy: string;
@@ -4317,7 +4351,7 @@ declare const _default: {
         objectsNumber: string;
     };
     /**
-     * Lookup578: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketRecord: {
         operatorStatus: string;
@@ -4326,7 +4360,7 @@ declare const _default: {
         assignedBags: string;
     };
     /**
-     * Lookup579: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketOperatorStatus: {
         _enum: {
@@ -4336,14 +4370,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup581: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+     * Lookup579: pallet_storage::DynamicBagCreationPolicy<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, V, S>>
      **/
     PalletStorageDynamicBagCreationPolicy: {
         numberOfStorageBuckets: string;
         families: string;
     };
     /**
-     * Lookup584: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletStorageDataObject: {
         _alias: {
@@ -4355,13 +4389,13 @@ declare const _default: {
         ipfsContentId: string;
     };
     /**
-     * Lookup585: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketFamilyRecord: {
         nextDistributionBucketIndex: string;
     };
     /**
-     * Lookup586: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup584: pallet_storage::DistributionBucketRecord<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletStorageDistributionBucketRecord: {
         acceptingNewBags: string;
@@ -4371,13 +4405,13 @@ declare const _default: {
         assignedBags: string;
     };
     /**
-     * Lookup589: pallet_storage::Error<T>
+     * Lookup587: pallet_storage::Error<T>
      **/
     PalletStorageError: {
         _enum: string[];
     };
     /**
-     * Lookup590: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+     * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, bounded_collections::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
      **/
     PalletProjectTokenAccountData: {
         vestingSchedules: string;
@@ -4388,14 +4422,14 @@ declare const _default: {
         lastSaleTotalPurchasedAmount: string;
     };
     /**
-     * Lookup591: pallet_project_token::types::StakingStatus<Balance>
+     * Lookup589: pallet_project_token::types::StakingStatus<Balance>
      **/
     PalletProjectTokenStakingStatus: {
         splitId: string;
         amount: string;
     };
     /**
-     * Lookup593: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
      **/
     PalletProjectTokenVestingSchedule: {
         linearVestingStartBlock: string;
@@ -4405,7 +4439,7 @@ declare const _default: {
         burnedAmount: string;
     };
     /**
-     * Lookup600: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
      **/
     PalletProjectTokenTokenData: {
         totalSupply: string;
@@ -4413,15 +4447,15 @@ declare const _default: {
         nextSaleId: string;
         sale: string;
         transferPolicy: string;
-        symbol: string;
         patronageInfo: string;
         accountsNumber: string;
         revenueSplitRate: string;
         revenueSplit: string;
         nextRevenueSplitId: string;
+        ammCurve: string;
     };
     /**
-     * Lookup601: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitState: {
         _enum: {
@@ -4430,7 +4464,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup602: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitInfo: {
         allocation: string;
@@ -4438,14 +4472,14 @@ declare const _default: {
         dividendsClaimed: string;
     };
     /**
-     * Lookup603: pallet_project_token::types::Timeline<BlockNumber>
+     * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
      **/
     PalletProjectTokenTimeline: {
         start: string;
         duration: string;
     };
     /**
-     * Lookup605: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
      **/
     PalletProjectTokenPatronageData: {
         rate: string;
@@ -4453,13 +4487,13 @@ declare const _default: {
         lastUnclaimedPatronageTallyBlock: string;
     };
     /**
-     * Lookup607: pallet_project_token::errors::Error<T>
+     * Lookup606: pallet_project_token::errors::Error<T>
      **/
     PalletProjectTokenErrorsError: {
         _enum: string[];
     };
     /**
-     * Lookup608: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     * Lookup607: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
      **/
     PalletProposalsEngineProposal: {
         parameters: string;
@@ -4472,7 +4506,7 @@ declare const _default: {
         stakingAccountId: string;
     };
     /**
-     * Lookup609: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     * Lookup608: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
      **/
     PalletProposalsEngineProposalParameters: {
         votingPeriod: string;
@@ -4485,7 +4519,7 @@ declare const _default: {
         constitutionality: string;
     };
     /**
-     * Lookup610: pallet_proposals_engine::types::VotingResults
+     * Lookup609: pallet_proposals_engine::types::VotingResults
      **/
     PalletProposalsEngineVotingResults: {
         abstentions: string;
@@ -4494,13 +4528,13 @@ declare const _default: {
         slashes: string;
     };
     /**
-     * Lookup613: pallet_proposals_engine::Error<T>
+     * Lookup612: pallet_proposals_engine::Error<T>
      **/
     PalletProposalsEngineError: {
         _enum: string[];
     };
     /**
-     * Lookup614: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup613: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionDiscussionThread: {
         activatedAt: string;
@@ -4508,7 +4542,7 @@ declare const _default: {
         mode: string;
     };
     /**
-     * Lookup616: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup615: pallet_proposals_discussion::types::ThreadMode<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
         _enum: {
@@ -4517,7 +4551,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup617: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup616: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProposalsDiscussionDiscussionPost: {
         authorId: string;
@@ -4525,19 +4559,19 @@ declare const _default: {
         lastEdited: string;
     };
     /**
-     * Lookup618: pallet_proposals_discussion::Error<T>
+     * Lookup617: pallet_proposals_discussion::Error<T>
      **/
     PalletProposalsDiscussionError: {
         _enum: string[];
     };
     /**
-     * Lookup619: pallet_proposals_codex::Error<T>
+     * Lookup618: pallet_proposals_codex::Error<T>
      **/
     PalletProposalsCodexError: {
         _enum: string[];
     };
     /**
-     * Lookup620: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+     * Lookup619: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
      **/
     PalletWorkingGroupOpening: {
         openingType: string;
@@ -4548,7 +4582,7 @@ declare const _default: {
         creationStake: string;
     };
     /**
-     * Lookup621: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+     * Lookup620: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
      **/
     PalletWorkingGroupJobApplication: {
         roleAccountId: string;
@@ -4559,7 +4593,7 @@ declare const _default: {
         openingId: string;
     };
     /**
-     * Lookup622: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     * Lookup621: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
      **/
     PalletWorkingGroupGroupWorker: {
         memberId: string;
@@ -4573,13 +4607,13 @@ declare const _default: {
         createdAt: string;
     };
     /**
-     * Lookup623: pallet_working_group::errors::Error<T, I>
+     * Lookup622: pallet_working_group::errors::Error<T, I>
      **/
     PalletWorkingGroupErrorsError: {
         _enum: string[];
     };
     /**
-     * Lookup633: sp_runtime::MultiSignature
+     * Lookup632: sp_runtime::MultiSignature
      **/
     SpRuntimeMultiSignature: {
         _enum: {
@@ -4589,39 +4623,39 @@ declare const _default: {
         };
     };
     /**
-     * Lookup634: sp_core::ecdsa::Signature
+     * Lookup633: sp_core::ecdsa::Signature
      **/
     SpCoreEcdsaSignature: string;
     /**
-     * Lookup637: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     * Lookup636: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
      **/
     FrameSystemExtensionsCheckNonZeroSender: string;
     /**
-     * Lookup638: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     * Lookup637: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
      **/
     FrameSystemExtensionsCheckSpecVersion: string;
     /**
-     * Lookup639: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     * Lookup638: frame_system::extensions::check_tx_version::CheckTxVersion<T>
      **/
     FrameSystemExtensionsCheckTxVersion: string;
     /**
-     * Lookup640: frame_system::extensions::check_genesis::CheckGenesis<T>
+     * Lookup639: frame_system::extensions::check_genesis::CheckGenesis<T>
      **/
     FrameSystemExtensionsCheckGenesis: string;
     /**
-     * Lookup643: frame_system::extensions::check_nonce::CheckNonce<T>
+     * Lookup642: frame_system::extensions::check_nonce::CheckNonce<T>
      **/
     FrameSystemExtensionsCheckNonce: string;
     /**
-     * Lookup644: frame_system::extensions::check_weight::CheckWeight<T>
+     * Lookup643: frame_system::extensions::check_weight::CheckWeight<T>
      **/
     FrameSystemExtensionsCheckWeight: string;
     /**
-     * Lookup645: pallet_transaction_payment::ChargeTransactionPayment<T>
+     * Lookup644: pallet_transaction_payment::ChargeTransactionPayment<T>
      **/
     PalletTransactionPaymentChargeTransactionPayment: string;
     /**
-     * Lookup646: joystream_node_runtime::Runtime
+     * Lookup645: joystream_node_runtime::Runtime
      **/
     JoystreamNodeRuntimeRuntime: string;
 };
diff --git a/node_modules/@joystream/types/lib/augment/registry.d.ts b/node_modules/@joystream/types/lib/augment/registry.d.ts
index a1514a1..d109a58 100644
--- a/node_modules/@joystream/types/lib/augment/registry.d.ts
+++ b/node_modules/@joystream/types/lib/augment/registry.d.ts
@@ -1,19 +1,18 @@
-import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletSudoCall, PalletSudoError, PalletSudoEvent, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchDispatchClass, FrameSupportDispatchDispatchInfo, FrameSupportDispatchPays, FrameSupportDispatchPerDispatchClassU32, FrameSupportDispatchPerDispatchClassWeight, FrameSupportDispatchPerDispatchClassWeightsPerClass, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletJoystreamUtilityCall, PalletJoystreamUtilityError, PalletJoystreamUtilityRawEvent, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenAmmCurve, PalletProjectTokenAmmParams, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentEvent, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpArithmeticArithmeticError, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion, SpWeightsRuntimeDbWeight, SpWeightsWeightV2Weight } from '@polkadot/types/lookup';
 declare module '@polkadot/types/types/registry' {
     interface InterfaceTypes {
         FinalityGrandpaEquivocationPrecommit: FinalityGrandpaEquivocationPrecommit;
         FinalityGrandpaEquivocationPrevote: FinalityGrandpaEquivocationPrevote;
         FinalityGrandpaPrecommit: FinalityGrandpaPrecommit;
         FinalityGrandpaPrevote: FinalityGrandpaPrevote;
+        FrameSupportDispatchDispatchClass: FrameSupportDispatchDispatchClass;
+        FrameSupportDispatchDispatchInfo: FrameSupportDispatchDispatchInfo;
+        FrameSupportDispatchPays: FrameSupportDispatchPays;
+        FrameSupportDispatchPerDispatchClassU32: FrameSupportDispatchPerDispatchClassU32;
+        FrameSupportDispatchPerDispatchClassWeight: FrameSupportDispatchPerDispatchClassWeight;
+        FrameSupportDispatchPerDispatchClassWeightsPerClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
         FrameSupportDispatchRawOrigin: FrameSupportDispatchRawOrigin;
         FrameSupportTokensMiscBalanceStatus: FrameSupportTokensMiscBalanceStatus;
-        FrameSupportWeightsDispatchClass: FrameSupportWeightsDispatchClass;
-        FrameSupportWeightsDispatchInfo: FrameSupportWeightsDispatchInfo;
-        FrameSupportWeightsPays: FrameSupportWeightsPays;
-        FrameSupportWeightsPerDispatchClassU32: FrameSupportWeightsPerDispatchClassU32;
-        FrameSupportWeightsPerDispatchClassU64: FrameSupportWeightsPerDispatchClassU64;
-        FrameSupportWeightsPerDispatchClassWeightsPerClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
-        FrameSupportWeightsRuntimeDbWeight: FrameSupportWeightsRuntimeDbWeight;
         FrameSystemAccountInfo: FrameSystemAccountInfo;
         FrameSystemCall: FrameSystemCall;
         FrameSystemError: FrameSystemError;
@@ -34,9 +33,6 @@ declare module '@polkadot/types/types/registry' {
         JoystreamNodeRuntimeOriginCaller: JoystreamNodeRuntimeOriginCaller;
         JoystreamNodeRuntimeRuntime: JoystreamNodeRuntimeRuntime;
         JoystreamNodeRuntimeSessionKeys: JoystreamNodeRuntimeSessionKeys;
-        PalletAuthorshipCall: PalletAuthorshipCall;
-        PalletAuthorshipError: PalletAuthorshipError;
-        PalletAuthorshipUncleEntryItem: PalletAuthorshipUncleEntryItem;
         PalletBabeCall: PalletBabeCall;
         PalletBabeError: PalletBabeError;
         PalletBagsListCall: PalletBagsListCall;
@@ -51,7 +47,6 @@ declare module '@polkadot/types/types/registry' {
         PalletBalancesError: PalletBalancesError;
         PalletBalancesEvent: PalletBalancesEvent;
         PalletBalancesReasons: PalletBalancesReasons;
-        PalletBalancesReleases: PalletBalancesReleases;
         PalletBalancesReserveData: PalletBalancesReserveData;
         PalletBountyAssuranceContractTypeBTreeSet: PalletBountyAssuranceContractTypeBTreeSet;
         PalletBountyAssuranceContractTypeBoundedBTreeSet: PalletBountyAssuranceContractTypeBoundedBTreeSet;
@@ -156,6 +151,9 @@ declare module '@polkadot/types/types/registry' {
         PalletImOnlineHeartbeat: PalletImOnlineHeartbeat;
         PalletImOnlineSr25519AppSr25519Public: PalletImOnlineSr25519AppSr25519Public;
         PalletImOnlineSr25519AppSr25519Signature: PalletImOnlineSr25519AppSr25519Signature;
+        PalletJoystreamUtilityCall: PalletJoystreamUtilityCall;
+        PalletJoystreamUtilityError: PalletJoystreamUtilityError;
+        PalletJoystreamUtilityRawEvent: PalletJoystreamUtilityRawEvent;
         PalletMembershipBuyMembershipParameters: PalletMembershipBuyMembershipParameters;
         PalletMembershipCall: PalletMembershipCall;
         PalletMembershipCreateMemberParameters: PalletMembershipCreateMemberParameters;
@@ -172,6 +170,8 @@ declare module '@polkadot/types/types/registry' {
         PalletMultisigTimepoint: PalletMultisigTimepoint;
         PalletOffencesEvent: PalletOffencesEvent;
         PalletProjectTokenAccountData: PalletProjectTokenAccountData;
+        PalletProjectTokenAmmCurve: PalletProjectTokenAmmCurve;
+        PalletProjectTokenAmmParams: PalletProjectTokenAmmParams;
         PalletProjectTokenCall: PalletProjectTokenCall;
         PalletProjectTokenErrorsError: PalletProjectTokenErrorsError;
         PalletProjectTokenEventsRawEvent: PalletProjectTokenEventsRawEvent;
@@ -251,7 +251,6 @@ declare module '@polkadot/types/types/registry' {
         PalletStakingPalletConfigOpU32: PalletStakingPalletConfigOpU32;
         PalletStakingPalletError: PalletStakingPalletError;
         PalletStakingPalletEvent: PalletStakingPalletEvent;
-        PalletStakingReleases: PalletStakingReleases;
         PalletStakingRewardDestination: PalletStakingRewardDestination;
         PalletStakingSlashingSlashingSpans: PalletStakingSlashingSlashingSpans;
         PalletStakingSlashingSpanRecord: PalletStakingSlashingSpanRecord;
@@ -278,16 +277,13 @@ declare module '@polkadot/types/types/registry' {
         PalletStorageStorageBucketRecord: PalletStorageStorageBucketRecord;
         PalletStorageUploadParametersRecord: PalletStorageUploadParametersRecord;
         PalletStorageVoucher: PalletStorageVoucher;
-        PalletSudoCall: PalletSudoCall;
-        PalletSudoError: PalletSudoError;
-        PalletSudoEvent: PalletSudoEvent;
         PalletTimestampCall: PalletTimestampCall;
         PalletTransactionPaymentChargeTransactionPayment: PalletTransactionPaymentChargeTransactionPayment;
+        PalletTransactionPaymentEvent: PalletTransactionPaymentEvent;
         PalletTransactionPaymentReleases: PalletTransactionPaymentReleases;
         PalletUtilityCall: PalletUtilityCall;
         PalletUtilityError: PalletUtilityError;
         PalletUtilityEvent: PalletUtilityEvent;
-        PalletUtilityRawEvent: PalletUtilityRawEvent;
         PalletVestingCall: PalletVestingCall;
         PalletVestingError: PalletVestingError;
         PalletVestingEvent: PalletVestingEvent;
@@ -321,6 +317,7 @@ declare module '@polkadot/types/types/registry' {
         PalletWorkingGroupRewardPaymentType: PalletWorkingGroupRewardPaymentType;
         PalletWorkingGroupStakeParameters: PalletWorkingGroupStakeParameters;
         PalletWorkingGroupStakePolicy: PalletWorkingGroupStakePolicy;
+        SpArithmeticArithmeticError: SpArithmeticArithmeticError;
         SpAuthorityDiscoveryAppPublic: SpAuthorityDiscoveryAppPublic;
         SpConsensusBabeAllowedSlots: SpConsensusBabeAllowedSlots;
         SpConsensusBabeAppPublic: SpConsensusBabeAppPublic;
@@ -345,7 +342,6 @@ declare module '@polkadot/types/types/registry' {
         SpFinalityGrandpaEquivocationProof: SpFinalityGrandpaEquivocationProof;
         SpNposElectionsElectionScore: SpNposElectionsElectionScore;
         SpNposElectionsSupport: SpNposElectionsSupport;
-        SpRuntimeArithmeticError: SpRuntimeArithmeticError;
         SpRuntimeBlakeTwo256: SpRuntimeBlakeTwo256;
         SpRuntimeDigest: SpRuntimeDigest;
         SpRuntimeDigestDigestItem: SpRuntimeDigestDigestItem;
@@ -358,5 +354,7 @@ declare module '@polkadot/types/types/registry' {
         SpSessionMembershipProof: SpSessionMembershipProof;
         SpStakingOffenceOffenceDetails: SpStakingOffenceOffenceDetails;
         SpVersionRuntimeVersion: SpVersionRuntimeVersion;
+        SpWeightsRuntimeDbWeight: SpWeightsRuntimeDbWeight;
+        SpWeightsWeightV2Weight: SpWeightsWeightV2Weight;
     }
 }
diff --git a/node_modules/@joystream/types/lib/augment/types-lookup.d.ts b/node_modules/@joystream/types/lib/augment/types-lookup.d.ts
index 3896f19..458523a 100644
--- a/node_modules/@joystream/types/lib/augment/types-lookup.d.ts
+++ b/node_modules/@joystream/types/lib/augment/types-lookup.d.ts
@@ -1,5 +1,5 @@
 declare module '@polkadot/types/lookup' {
-    import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+    import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
     import type { ITuple } from '@polkadot/types-codec/types';
     import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill, Perquintill } from '@polkadot/types/interfaces/runtime';
     import type { Event } from '@polkadot/types/interfaces/system';
@@ -18,17 +18,22 @@ declare module '@polkadot/types/lookup' {
         readonly miscFrozen: u128;
         readonly feeFrozen: u128;
     }
-    /** @name FrameSupportWeightsPerDispatchClassU64 (7) */
-    interface FrameSupportWeightsPerDispatchClassU64 extends Struct {
-        readonly normal: u64;
-        readonly operational: u64;
-        readonly mandatory: u64;
+    /** @name FrameSupportDispatchPerDispatchClassWeight (7) */
+    interface FrameSupportDispatchPerDispatchClassWeight extends Struct {
+        readonly normal: SpWeightsWeightV2Weight;
+        readonly operational: SpWeightsWeightV2Weight;
+        readonly mandatory: SpWeightsWeightV2Weight;
     }
-    /** @name SpRuntimeDigest (11) */
+    /** @name SpWeightsWeightV2Weight (8) */
+    interface SpWeightsWeightV2Weight extends Struct {
+        readonly refTime: Compact<u64>;
+        readonly proofSize: Compact<u64>;
+    }
+    /** @name SpRuntimeDigest (13) */
     interface SpRuntimeDigest extends Struct {
         readonly logs: Vec<SpRuntimeDigestDigestItem>;
     }
-    /** @name SpRuntimeDigestDigestItem (13) */
+    /** @name SpRuntimeDigestDigestItem (15) */
     interface SpRuntimeDigestDigestItem extends Enum {
         readonly isOther: boolean;
         readonly asOther: Bytes;
@@ -41,22 +46,22 @@ declare module '@polkadot/types/lookup' {
         readonly isRuntimeEnvironmentUpdated: boolean;
         readonly type: 'Other' | 'Consensus' | 'Seal' | 'PreRuntime' | 'RuntimeEnvironmentUpdated';
     }
-    /** @name FrameSystemEventRecord (16) */
+    /** @name FrameSystemEventRecord (18) */
     interface FrameSystemEventRecord extends Struct {
         readonly phase: FrameSystemPhase;
         readonly event: Event;
         readonly topics: Vec<H256>;
     }
-    /** @name FrameSystemEvent (18) */
+    /** @name FrameSystemEvent (20) */
     interface FrameSystemEvent extends Enum {
         readonly isExtrinsicSuccess: boolean;
         readonly asExtrinsicSuccess: {
-            readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
+            readonly dispatchInfo: FrameSupportDispatchDispatchInfo;
         } & Struct;
         readonly isExtrinsicFailed: boolean;
         readonly asExtrinsicFailed: {
             readonly dispatchError: SpRuntimeDispatchError;
-            readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
+            readonly dispatchInfo: FrameSupportDispatchDispatchInfo;
         } & Struct;
         readonly isCodeUpdated: boolean;
         readonly isNewAccount: boolean;
@@ -74,26 +79,26 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'ExtrinsicSuccess' | 'ExtrinsicFailed' | 'CodeUpdated' | 'NewAccount' | 'KilledAccount' | 'Remarked';
     }
-    /** @name FrameSupportWeightsDispatchInfo (19) */
-    interface FrameSupportWeightsDispatchInfo extends Struct {
-        readonly weight: u64;
-        readonly class: FrameSupportWeightsDispatchClass;
-        readonly paysFee: FrameSupportWeightsPays;
+    /** @name FrameSupportDispatchDispatchInfo (21) */
+    interface FrameSupportDispatchDispatchInfo extends Struct {
+        readonly weight: SpWeightsWeightV2Weight;
+        readonly class: FrameSupportDispatchDispatchClass;
+        readonly paysFee: FrameSupportDispatchPays;
     }
-    /** @name FrameSupportWeightsDispatchClass (20) */
-    interface FrameSupportWeightsDispatchClass extends Enum {
+    /** @name FrameSupportDispatchDispatchClass (22) */
+    interface FrameSupportDispatchDispatchClass extends Enum {
         readonly isNormal: boolean;
         readonly isOperational: boolean;
         readonly isMandatory: boolean;
         readonly type: 'Normal' | 'Operational' | 'Mandatory';
     }
-    /** @name FrameSupportWeightsPays (21) */
-    interface FrameSupportWeightsPays extends Enum {
+    /** @name FrameSupportDispatchPays (23) */
+    interface FrameSupportDispatchPays extends Enum {
         readonly isYes: boolean;
         readonly isNo: boolean;
         readonly type: 'Yes' | 'No';
     }
-    /** @name SpRuntimeDispatchError (22) */
+    /** @name SpRuntimeDispatchError (24) */
     interface SpRuntimeDispatchError extends Enum {
         readonly isOther: boolean;
         readonly isCannotLookup: boolean;
@@ -106,17 +111,20 @@ declare module '@polkadot/types/lookup' {
         readonly isToken: boolean;
         readonly asToken: SpRuntimeTokenError;
         readonly isArithmetic: boolean;
-        readonly asArithmetic: SpRuntimeArithmeticError;
+        readonly asArithmetic: SpArithmeticArithmeticError;
         readonly isTransactional: boolean;
         readonly asTransactional: SpRuntimeTransactionalError;
-        readonly type: 'Other' | 'CannotLookup' | 'BadOrigin' | 'Module' | 'ConsumerRemaining' | 'NoProviders' | 'TooManyConsumers' | 'Token' | 'Arithmetic' | 'Transactional';
+        readonly isExhausted: boolean;
+        readonly isCorruption: boolean;
+        readonly isUnavailable: boolean;
+        readonly type: 'Other' | 'CannotLookup' | 'BadOrigin' | 'Module' | 'ConsumerRemaining' | 'NoProviders' | 'TooManyConsumers' | 'Token' | 'Arithmetic' | 'Transactional' | 'Exhausted' | 'Corruption' | 'Unavailable';
     }
-    /** @name SpRuntimeModuleError (23) */
+    /** @name SpRuntimeModuleError (25) */
     interface SpRuntimeModuleError extends Struct {
         readonly index: u8;
         readonly error: U8aFixed;
     }
-    /** @name SpRuntimeTokenError (24) */
+    /** @name SpRuntimeTokenError (26) */
     interface SpRuntimeTokenError extends Enum {
         readonly isNoFunds: boolean;
         readonly isWouldDie: boolean;
@@ -127,20 +135,20 @@ declare module '@polkadot/types/lookup' {
         readonly isUnsupported: boolean;
         readonly type: 'NoFunds' | 'WouldDie' | 'BelowMinimum' | 'CannotCreate' | 'UnknownAsset' | 'Frozen' | 'Unsupported';
     }
-    /** @name SpRuntimeArithmeticError (25) */
-    interface SpRuntimeArithmeticError extends Enum {
+    /** @name SpArithmeticArithmeticError (27) */
+    interface SpArithmeticArithmeticError extends Enum {
         readonly isUnderflow: boolean;
         readonly isOverflow: boolean;
         readonly isDivisionByZero: boolean;
         readonly type: 'Underflow' | 'Overflow' | 'DivisionByZero';
     }
-    /** @name SpRuntimeTransactionalError (26) */
+    /** @name SpRuntimeTransactionalError (28) */
     interface SpRuntimeTransactionalError extends Enum {
         readonly isLimitReached: boolean;
         readonly isNoLayer: boolean;
         readonly type: 'LimitReached' | 'NoLayer';
     }
-    /** @name PalletUtilityEvent (27) */
+    /** @name PalletUtilityEvent (29) */
     interface PalletUtilityEvent extends Enum {
         readonly isBatchInterrupted: boolean;
         readonly asBatchInterrupted: {
@@ -160,7 +168,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'BatchInterrupted' | 'BatchCompleted' | 'BatchCompletedWithErrors' | 'ItemCompleted' | 'ItemFailed' | 'DispatchedAs';
     }
-    /** @name PalletBalancesEvent (30) */
+    /** @name PalletBalancesEvent (32) */
     interface PalletBalancesEvent extends Enum {
         readonly isEndowed: boolean;
         readonly asEndowed: {
@@ -218,23 +226,36 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Endowed' | 'DustLost' | 'Transfer' | 'BalanceSet' | 'Reserved' | 'Unreserved' | 'ReserveRepatriated' | 'Deposit' | 'Withdraw' | 'Slashed';
     }
-    /** @name FrameSupportTokensMiscBalanceStatus (31) */
+    /** @name FrameSupportTokensMiscBalanceStatus (33) */
     interface FrameSupportTokensMiscBalanceStatus extends Enum {
         readonly isFree: boolean;
         readonly isReserved: boolean;
         readonly type: 'Free' | 'Reserved';
     }
-    /** @name PalletElectionProviderMultiPhaseEvent (32) */
+    /** @name PalletTransactionPaymentEvent (34) */
+    interface PalletTransactionPaymentEvent extends Enum {
+        readonly isTransactionFeePaid: boolean;
+        readonly asTransactionFeePaid: {
+            readonly who: AccountId32;
+            readonly actualFee: u128;
+            readonly tip: u128;
+        } & Struct;
+        readonly type: 'TransactionFeePaid';
+    }
+    /** @name PalletElectionProviderMultiPhaseEvent (35) */
     interface PalletElectionProviderMultiPhaseEvent extends Enum {
         readonly isSolutionStored: boolean;
         readonly asSolutionStored: {
-            readonly electionCompute: PalletElectionProviderMultiPhaseElectionCompute;
+            readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
+            readonly origin: Option<AccountId32>;
             readonly prevEjected: bool;
         } & Struct;
         readonly isElectionFinalized: boolean;
         readonly asElectionFinalized: {
-            readonly electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>;
+            readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
+            readonly score: SpNposElectionsElectionScore;
         } & Struct;
+        readonly isElectionFailed: boolean;
         readonly isRewarded: boolean;
         readonly asRewarded: {
             readonly account: AccountId32;
@@ -245,17 +266,15 @@ declare module '@polkadot/types/lookup' {
             readonly account: AccountId32;
             readonly value: u128;
         } & Struct;
-        readonly isSignedPhaseStarted: boolean;
-        readonly asSignedPhaseStarted: {
-            readonly round: u32;
-        } & Struct;
-        readonly isUnsignedPhaseStarted: boolean;
-        readonly asUnsignedPhaseStarted: {
+        readonly isPhaseTransitioned: boolean;
+        readonly asPhaseTransitioned: {
+            readonly from: PalletElectionProviderMultiPhasePhase;
+            readonly to: PalletElectionProviderMultiPhasePhase;
             readonly round: u32;
         } & Struct;
-        readonly type: 'SolutionStored' | 'ElectionFinalized' | 'Rewarded' | 'Slashed' | 'SignedPhaseStarted' | 'UnsignedPhaseStarted';
+        readonly type: 'SolutionStored' | 'ElectionFinalized' | 'ElectionFailed' | 'Rewarded' | 'Slashed' | 'PhaseTransitioned';
     }
-    /** @name PalletElectionProviderMultiPhaseElectionCompute (33) */
+    /** @name PalletElectionProviderMultiPhaseElectionCompute (36) */
     interface PalletElectionProviderMultiPhaseElectionCompute extends Enum {
         readonly isOnChain: boolean;
         readonly isSigned: boolean;
@@ -264,40 +283,105 @@ declare module '@polkadot/types/lookup' {
         readonly isEmergency: boolean;
         readonly type: 'OnChain' | 'Signed' | 'Unsigned' | 'Fallback' | 'Emergency';
     }
-    /** @name PalletStakingPalletEvent (36) */
+    /** @name SpNposElectionsElectionScore (39) */
+    interface SpNposElectionsElectionScore extends Struct {
+        readonly minimalStake: u128;
+        readonly sumStake: u128;
+        readonly sumStakeSquared: u128;
+    }
+    /** @name PalletElectionProviderMultiPhasePhase (40) */
+    interface PalletElectionProviderMultiPhasePhase extends Enum {
+        readonly isOff: boolean;
+        readonly isSigned: boolean;
+        readonly isUnsigned: boolean;
+        readonly asUnsigned: ITuple<[bool, u32]>;
+        readonly isEmergency: boolean;
+        readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
+    }
+    /** @name PalletStakingPalletEvent (42) */
     interface PalletStakingPalletEvent extends Enum {
         readonly isEraPaid: boolean;
-        readonly asEraPaid: ITuple<[u32, u128, u128]>;
+        readonly asEraPaid: {
+            readonly eraIndex: u32;
+            readonly validatorPayout: u128;
+            readonly remainder: u128;
+        } & Struct;
         readonly isRewarded: boolean;
-        readonly asRewarded: ITuple<[AccountId32, u128]>;
+        readonly asRewarded: {
+            readonly stash: AccountId32;
+            readonly amount: u128;
+        } & Struct;
         readonly isSlashed: boolean;
-        readonly asSlashed: ITuple<[AccountId32, u128]>;
+        readonly asSlashed: {
+            readonly staker: AccountId32;
+            readonly amount: u128;
+        } & Struct;
+        readonly isSlashReported: boolean;
+        readonly asSlashReported: {
+            readonly validator: AccountId32;
+            readonly fraction: Perbill;
+            readonly slashEra: u32;
+        } & Struct;
         readonly isOldSlashingReportDiscarded: boolean;
-        readonly asOldSlashingReportDiscarded: u32;
+        readonly asOldSlashingReportDiscarded: {
+            readonly sessionIndex: u32;
+        } & Struct;
         readonly isStakersElected: boolean;
         readonly isBonded: boolean;
-        readonly asBonded: ITuple<[AccountId32, u128]>;
+        readonly asBonded: {
+            readonly stash: AccountId32;
+            readonly amount: u128;
+        } & Struct;
         readonly isUnbonded: boolean;
-        readonly asUnbonded: ITuple<[AccountId32, u128]>;
+        readonly asUnbonded: {
+            readonly stash: AccountId32;
+            readonly amount: u128;
+        } & Struct;
         readonly isWithdrawn: boolean;
-        readonly asWithdrawn: ITuple<[AccountId32, u128]>;
+        readonly asWithdrawn: {
+            readonly stash: AccountId32;
+            readonly amount: u128;
+        } & Struct;
         readonly isKicked: boolean;
-        readonly asKicked: ITuple<[AccountId32, AccountId32]>;
+        readonly asKicked: {
+            readonly nominator: AccountId32;
+            readonly stash: AccountId32;
+        } & Struct;
         readonly isStakingElectionFailed: boolean;
         readonly isChilled: boolean;
-        readonly asChilled: AccountId32;
+        readonly asChilled: {
+            readonly stash: AccountId32;
+        } & Struct;
         readonly isPayoutStarted: boolean;
-        readonly asPayoutStarted: ITuple<[u32, AccountId32]>;
+        readonly asPayoutStarted: {
+            readonly eraIndex: u32;
+            readonly validatorStash: AccountId32;
+        } & Struct;
         readonly isValidatorPrefsSet: boolean;
-        readonly asValidatorPrefsSet: ITuple<[AccountId32, PalletStakingValidatorPrefs]>;
-        readonly type: 'EraPaid' | 'Rewarded' | 'Slashed' | 'OldSlashingReportDiscarded' | 'StakersElected' | 'Bonded' | 'Unbonded' | 'Withdrawn' | 'Kicked' | 'StakingElectionFailed' | 'Chilled' | 'PayoutStarted' | 'ValidatorPrefsSet';
+        readonly asValidatorPrefsSet: {
+            readonly stash: AccountId32;
+            readonly prefs: PalletStakingValidatorPrefs;
+        } & Struct;
+        readonly isForceEra: boolean;
+        readonly asForceEra: {
+            readonly mode: PalletStakingForcing;
+        } & Struct;
+        readonly type: 'EraPaid' | 'Rewarded' | 'Slashed' | 'SlashReported' | 'OldSlashingReportDiscarded' | 'StakersElected' | 'Bonded' | 'Unbonded' | 'Withdrawn' | 'Kicked' | 'StakingElectionFailed' | 'Chilled' | 'PayoutStarted' | 'ValidatorPrefsSet' | 'ForceEra';
     }
-    /** @name PalletStakingValidatorPrefs (37) */
+    /** @name PalletStakingValidatorPrefs (44) */
     interface PalletStakingValidatorPrefs extends Struct {
         readonly commission: Compact<Perbill>;
         readonly blocked: bool;
     }
-    /** @name PalletSessionEvent (40) */
+    /** @name PalletStakingForcing (46) */
+    interface PalletStakingForcing extends Enum {
+        readonly isNotForcing: boolean;
+        readonly isForceNew: boolean;
+        readonly isForceNone: boolean;
+        readonly isForceAlways: boolean;
+        readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
+    }
+    /** @name PalletSessionEvent (47) */
     interface PalletSessionEvent extends Enum {
         readonly isNewSession: boolean;
         readonly asNewSession: {
@@ -305,7 +389,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'NewSession';
     }
-    /** @name PalletGrandpaEvent (41) */
+    /** @name PalletGrandpaEvent (48) */
     interface PalletGrandpaEvent extends Enum {
         readonly isNewAuthorities: boolean;
         readonly asNewAuthorities: {
@@ -315,13 +399,13 @@ declare module '@polkadot/types/lookup' {
         readonly isResumed: boolean;
         readonly type: 'NewAuthorities' | 'Paused' | 'Resumed';
     }
-    /** @name SpFinalityGrandpaAppPublic (44) */
+    /** @name SpFinalityGrandpaAppPublic (51) */
     interface SpFinalityGrandpaAppPublic extends SpCoreEd25519Public {
     }
-    /** @name SpCoreEd25519Public (45) */
+    /** @name SpCoreEd25519Public (52) */
     interface SpCoreEd25519Public extends U8aFixed {
     }
-    /** @name PalletImOnlineEvent (46) */
+    /** @name PalletImOnlineEvent (53) */
     interface PalletImOnlineEvent extends Enum {
         readonly isHeartbeatReceived: boolean;
         readonly asHeartbeatReceived: {
@@ -334,24 +418,24 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'HeartbeatReceived' | 'AllGood' | 'SomeOffline';
     }
-    /** @name PalletImOnlineSr25519AppSr25519Public (47) */
+    /** @name PalletImOnlineSr25519AppSr25519Public (54) */
     interface PalletImOnlineSr25519AppSr25519Public extends SpCoreSr25519Public {
     }
-    /** @name SpCoreSr25519Public (48) */
+    /** @name SpCoreSr25519Public (55) */
     interface SpCoreSr25519Public extends U8aFixed {
     }
-    /** @name PalletStakingExposure (51) */
+    /** @name PalletStakingExposure (58) */
     interface PalletStakingExposure extends Struct {
         readonly total: Compact<u128>;
         readonly own: Compact<u128>;
         readonly others: Vec<PalletStakingIndividualExposure>;
     }
-    /** @name PalletStakingIndividualExposure (54) */
+    /** @name PalletStakingIndividualExposure (61) */
     interface PalletStakingIndividualExposure extends Struct {
         readonly who: AccountId32;
         readonly value: Compact<u128>;
     }
-    /** @name PalletOffencesEvent (55) */
+    /** @name PalletOffencesEvent (62) */
     interface PalletOffencesEvent extends Enum {
         readonly isOffence: boolean;
         readonly asOffence: {
@@ -360,23 +444,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Offence';
     }
-    /** @name PalletSudoEvent (57) */
-    interface PalletSudoEvent extends Enum {
-        readonly isSudid: boolean;
-        readonly asSudid: {
-            readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
-        } & Struct;
-        readonly isKeyChanged: boolean;
-        readonly asKeyChanged: {
-            readonly oldSudoer: Option<AccountId32>;
-        } & Struct;
-        readonly isSudoAsDone: boolean;
-        readonly asSudoAsDone: {
-            readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
-        } & Struct;
-        readonly type: 'Sudid' | 'KeyChanged' | 'SudoAsDone';
-    }
-    /** @name PalletBagsListEvent (59) */
+    /** @name PalletBagsListEvent (64) */
     interface PalletBagsListEvent extends Enum {
         readonly isRebagged: boolean;
         readonly asRebagged: {
@@ -391,7 +459,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Rebagged' | 'ScoreUpdated';
     }
-    /** @name PalletVestingEvent (60) */
+    /** @name PalletVestingEvent (65) */
     interface PalletVestingEvent extends Enum {
         readonly isVestingUpdated: boolean;
         readonly asVestingUpdated: {
@@ -404,7 +472,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'VestingUpdated' | 'VestingCompleted';
     }
-    /** @name PalletMultisigEvent (61) */
+    /** @name PalletMultisigEvent (66) */
     interface PalletMultisigEvent extends Enum {
         readonly isNewMultisig: boolean;
         readonly asNewMultisig: {
@@ -436,12 +504,12 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
     }
-    /** @name PalletMultisigTimepoint (62) */
+    /** @name PalletMultisigTimepoint (67) */
     interface PalletMultisigTimepoint extends Struct {
         readonly height: u32;
         readonly index: u32;
     }
-    /** @name PalletCouncilRawEvent (63) */
+    /** @name PalletCouncilRawEvent (68) */
     interface PalletCouncilRawEvent extends Enum {
         readonly isAnnouncingPeriodStarted: boolean;
         readonly asAnnouncingPeriodStarted: u32;
@@ -483,7 +551,7 @@ declare module '@polkadot/types/lookup' {
         readonly asCandidateRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'AnnouncingPeriodStarted' | 'NotEnoughCandidates' | 'VotingPeriodStarted' | 'NewCandidate' | 'NewCouncilElected' | 'NewCouncilNotElected' | 'CandidacyStakeRelease' | 'CandidacyWithdraw' | 'CandidacyNoteSet' | 'RewardPayment' | 'BudgetBalanceSet' | 'BudgetRefill' | 'BudgetRefillPlanned' | 'BudgetIncrementUpdated' | 'CouncilorRewardUpdated' | 'RequestFunded' | 'CouncilBudgetFunded' | 'CouncilorRemarked' | 'CandidateRemarked';
     }
-    /** @name PalletReferendumRawEvent (65) */
+    /** @name PalletReferendumRawEvent (70) */
     interface PalletReferendumRawEvent extends Enum {
         readonly isReferendumStarted: boolean;
         readonly asReferendumStarted: ITuple<[u32, u32]>;
@@ -499,19 +567,21 @@ declare module '@polkadot/types/lookup' {
         readonly asVoteRevealed: ITuple<[AccountId32, u64, Bytes]>;
         readonly isStakeReleased: boolean;
         readonly asStakeReleased: AccountId32;
-        readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased';
+        readonly isAccountOptedOutOfVoting: boolean;
+        readonly asAccountOptedOutOfVoting: AccountId32;
+        readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased' | 'AccountOptedOutOfVoting';
     }
-    /** @name PalletReferendumInstance1 (66) */
+    /** @name PalletReferendumInstance1 (71) */
     type PalletReferendumInstance1 = Null;
-    /** @name PalletReferendumOptionResult (68) */
+    /** @name PalletReferendumOptionResult (73) */
     interface PalletReferendumOptionResult extends Struct {
         readonly optionId: u64;
         readonly votePower: u128;
     }
-    /** @name PalletMembershipRawEvent (69) */
+    /** @name PalletMembershipRawEvent (74) */
     interface PalletMembershipRawEvent extends Enum {
         readonly isMemberInvited: boolean;
-        readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters]>;
+        readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters, u128]>;
         readonly isMembershipGifted: boolean;
         readonly asMembershipGifted: ITuple<[u64, PalletMembershipGiftMembershipParameters]>;
         readonly isMembershipBought: boolean;
@@ -541,12 +611,12 @@ declare module '@polkadot/types/lookup' {
         readonly isStakingAccountConfirmed: boolean;
         readonly asStakingAccountConfirmed: ITuple<[AccountId32, u64]>;
         readonly isMemberRemarked: boolean;
-        readonly asMemberRemarked: ITuple<[u64, Bytes]>;
+        readonly asMemberRemarked: ITuple<[u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
         readonly isMemberCreated: boolean;
         readonly asMemberCreated: ITuple<[u64, PalletMembershipCreateMemberParameters, u32]>;
         readonly type: 'MemberInvited' | 'MembershipGifted' | 'MembershipBought' | 'MemberProfileUpdated' | 'MemberAccountsUpdated' | 'MemberVerificationStatusUpdated' | 'ReferralCutUpdated' | 'InvitesTransferred' | 'MembershipPriceUpdated' | 'InitialInvitationBalanceUpdated' | 'LeaderInvitationQuotaUpdated' | 'InitialInvitationCountUpdated' | 'StakingAccountAdded' | 'StakingAccountRemoved' | 'StakingAccountConfirmed' | 'MemberRemarked' | 'MemberCreated';
     }
-    /** @name PalletMembershipBuyMembershipParameters (70) */
+    /** @name PalletMembershipBuyMembershipParameters (75) */
     interface PalletMembershipBuyMembershipParameters extends Struct {
         readonly rootAccount: AccountId32;
         readonly controllerAccount: AccountId32;
@@ -554,7 +624,7 @@ declare module '@polkadot/types/lookup' {
         readonly metadata: Bytes;
         readonly referrerId: Option<u64>;
     }
-    /** @name PalletMembershipInviteMembershipParameters (73) */
+    /** @name PalletMembershipInviteMembershipParameters (78) */
     interface PalletMembershipInviteMembershipParameters extends Struct {
         readonly invitingMemberId: u64;
         readonly rootAccount: AccountId32;
@@ -562,7 +632,7 @@ declare module '@polkadot/types/lookup' {
         readonly handle: Option<Bytes>;
         readonly metadata: Bytes;
     }
-    /** @name PalletMembershipCreateMemberParameters (74) */
+    /** @name PalletMembershipCreateMemberParameters (79) */
     interface PalletMembershipCreateMemberParameters extends Struct {
         readonly rootAccount: AccountId32;
         readonly controllerAccount: AccountId32;
@@ -570,7 +640,7 @@ declare module '@polkadot/types/lookup' {
         readonly metadata: Bytes;
         readonly isFoundingMember: bool;
     }
-    /** @name PalletMembershipGiftMembershipParameters (75) */
+    /** @name PalletMembershipGiftMembershipParameters (80) */
     interface PalletMembershipGiftMembershipParameters extends Struct {
         readonly rootAccount: AccountId32;
         readonly controllerAccount: AccountId32;
@@ -581,7 +651,7 @@ declare module '@polkadot/types/lookup' {
         readonly creditRootAccount: u128;
         readonly applyRootAccountInvitationLock: Option<u128>;
     }
-    /** @name PalletForumRawEvent (77) */
+    /** @name PalletForumRawEvent (84) */
     interface PalletForumRawEvent extends Enum {
         readonly isCategoryCreated: boolean;
         readonly asCategoryCreated: ITuple<[u64, Option<u64>, Bytes, Bytes]>;
@@ -619,26 +689,26 @@ declare module '@polkadot/types/lookup' {
         readonly asCategoryMembershipOfModeratorUpdated: ITuple<[u64, u64, bool]>;
         readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
     }
-    /** @name PalletForumPrivilegedActor (78) */
+    /** @name PalletForumPrivilegedActor (85) */
     interface PalletForumPrivilegedActor extends Enum {
         readonly isLead: boolean;
         readonly isModerator: boolean;
         readonly asModerator: u64;
         readonly type: 'Lead' | 'Moderator';
     }
-    /** @name PalletForumExtendedPostIdObject (79) */
+    /** @name PalletForumExtendedPostIdObject (86) */
     interface PalletForumExtendedPostIdObject extends Struct {
         readonly categoryId: u64;
         readonly threadId: u64;
         readonly postId: u64;
     }
-    /** @name PalletConstitutionRawEvent (84) */
+    /** @name PalletConstitutionRawEvent (91) */
     interface PalletConstitutionRawEvent extends Enum {
         readonly isConstutionAmended: boolean;
         readonly asConstutionAmended: ITuple<[H256, Bytes]>;
         readonly type: 'ConstutionAmended';
     }
-    /** @name PalletBountyRawEvent (85) */
+    /** @name PalletBountyRawEvent (92) */
     interface PalletBountyRawEvent extends Enum {
         readonly isBountyCreated: boolean;
         readonly asBountyCreated: ITuple<[u64, PalletBountyBountyParametersBTreeSet, Bytes]>;
@@ -688,7 +758,7 @@ declare module '@polkadot/types/lookup' {
         readonly asCreatorStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
         readonly type: 'BountyCreated' | 'BountyOracleSwitched' | 'BountyTerminated' | 'BountyFunded' | 'BountyMaxFundingReached' | 'BountyFundingWithdrawal' | 'BountyCreatorCherryWithdrawal' | 'BountyCreatorOracleRewardWithdrawal' | 'BountyOracleRewardWithdrawal' | 'BountyRemoved' | 'WorkEntryAnnounced' | 'WorkSubmitted' | 'OracleJudgmentSubmitted' | 'WorkEntrantFundsWithdrawn' | 'BountyContributorRemarked' | 'BountyOracleRemarked' | 'BountyEntrantRemarked' | 'BountyCreatorRemarked' | 'WorkSubmissionPeriodEnded' | 'WorkEntrantStakeUnlocked' | 'WorkEntrantStakeSlashed' | 'FunderStateBloatBondWithdrawn' | 'CreatorStateBloatBondWithdrawn';
     }
-    /** @name PalletBountyBountyParametersBTreeSet (86) */
+    /** @name PalletBountyBountyParametersBTreeSet (93) */
     interface PalletBountyBountyParametersBTreeSet extends Struct {
         readonly oracle: PalletBountyBountyActor;
         readonly contractType: PalletBountyAssuranceContractTypeBTreeSet;
@@ -698,21 +768,21 @@ declare module '@polkadot/types/lookup' {
         readonly entrantStake: u128;
         readonly fundingType: PalletBountyFundingType;
     }
-    /** @name PalletBountyBountyActor (87) */
+    /** @name PalletBountyBountyActor (94) */
     interface PalletBountyBountyActor extends Enum {
         readonly isCouncil: boolean;
         readonly isMember: boolean;
         readonly asMember: u64;
         readonly type: 'Council' | 'Member';
     }
-    /** @name PalletBountyAssuranceContractTypeBTreeSet (88) */
+    /** @name PalletBountyAssuranceContractTypeBTreeSet (95) */
     interface PalletBountyAssuranceContractTypeBTreeSet extends Enum {
         readonly isOpen: boolean;
         readonly isClosed: boolean;
         readonly asClosed: BTreeSet<u64>;
         readonly type: 'Open' | 'Closed';
     }
-    /** @name PalletBountyFundingType (89) */
+    /** @name PalletBountyFundingType (96) */
     interface PalletBountyFundingType extends Enum {
         readonly isPerpetual: boolean;
         readonly asPerpetual: {
@@ -725,7 +795,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Perpetual' | 'Limited';
     }
-    /** @name PalletBountyOracleWorkEntryJudgment (91) */
+    /** @name PalletBountyOracleWorkEntryJudgment (98) */
     interface PalletBountyOracleWorkEntryJudgment extends Enum {
         readonly isWinner: boolean;
         readonly asWinner: {
@@ -738,8 +808,8 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Winner' | 'Rejected';
     }
-    /** @name PalletUtilityRawEvent (94) */
-    interface PalletUtilityRawEvent extends Enum {
+    /** @name PalletJoystreamUtilityRawEvent (101) */
+    interface PalletJoystreamUtilityRawEvent extends Enum {
         readonly isSignaled: boolean;
         readonly asSignaled: Bytes;
         readonly isRuntimeUpgraded: boolean;
@@ -750,7 +820,7 @@ declare module '@polkadot/types/lookup' {
         readonly asTokensBurned: ITuple<[AccountId32, u128]>;
         readonly type: 'Signaled' | 'RuntimeUpgraded' | 'UpdatedWorkingGroupBudget' | 'TokensBurned';
     }
-    /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (95) */
+    /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (102) */
     interface PalletCommonWorkingGroupIterableEnumsWorkingGroup extends Enum {
         readonly isForum: boolean;
         readonly isStorage: boolean;
@@ -763,13 +833,13 @@ declare module '@polkadot/types/lookup' {
         readonly isMembership: boolean;
         readonly type: 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'App' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership';
     }
-    /** @name PalletCommonBalanceKind (96) */
+    /** @name PalletCommonBalanceKind (103) */
     interface PalletCommonBalanceKind extends Enum {
         readonly isPositive: boolean;
         readonly isNegative: boolean;
         readonly type: 'Positive' | 'Negative';
     }
-    /** @name PalletContentRawEvent (97) */
+    /** @name PalletContentRawEvent (104) */
     interface PalletContentRawEvent extends Enum {
         readonly isCuratorGroupCreated: boolean;
         readonly asCuratorGroupCreated: u64;
@@ -820,11 +890,9 @@ declare module '@polkadot/types/lookup' {
         readonly isVideoAssetsDeletedByModerator: boolean;
         readonly asVideoAssetsDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, bool, Bytes]>;
         readonly isChannelPayoutsUpdated: boolean;
-        readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>]>;
+        readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
         readonly isChannelRewardUpdated: boolean;
-        readonly asChannelRewardUpdated: ITuple<[u128, u64]>;
-        readonly isCouncilRewardClaimed: boolean;
-        readonly asCouncilRewardClaimed: ITuple<[u64, u128]>;
+        readonly asChannelRewardUpdated: ITuple<[u128, u128, u64]>;
         readonly isEnglishAuctionStarted: boolean;
         readonly asEnglishAuctionStarted: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
         readonly isOpenAuctionStarted: boolean;
@@ -881,9 +949,11 @@ declare module '@polkadot/types/lookup' {
         readonly asToggledNftLimits: bool;
         readonly isCreatorTokenIssued: boolean;
         readonly asCreatorTokenIssued: ITuple<[PalletContentPermissionsContentActor, u64, u64]>;
-        readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'CouncilRewardClaimed' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued';
+        readonly isCreatorTokenIssuerRemarked: boolean;
+        readonly asCreatorTokenIssuerRemarked: ITuple<[u64, u64, Bytes]>;
+        readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued' | 'CreatorTokenIssuerRemarked';
     }
-    /** @name PalletContentPermissionsContentActor (98) */
+    /** @name PalletContentPermissionsContentActor (105) */
     interface PalletContentPermissionsContentActor extends Enum {
         readonly isCurator: boolean;
         readonly asCurator: ITuple<[u64, u64]>;
@@ -892,7 +962,7 @@ declare module '@polkadot/types/lookup' {
         readonly isLead: boolean;
         readonly type: 'Curator' | 'Member' | 'Lead';
     }
-    /** @name PalletContentChannelRecord (99) */
+    /** @name PalletContentChannelRecord (106) */
     interface PalletContentChannelRecord extends Struct {
         readonly owner: PalletContentChannelOwner;
         readonly numVideos: u64;
@@ -909,7 +979,7 @@ declare module '@polkadot/types/lookup' {
         readonly creatorTokenId: Option<u64>;
         readonly channelStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
     }
-    /** @name PalletContentIterableEnumsChannelActionPermission (103) */
+    /** @name PalletContentIterableEnumsChannelActionPermission (110) */
     interface PalletContentIterableEnumsChannelActionPermission extends Enum {
         readonly isUpdateChannelMetadata: boolean;
         readonly isManageNonVideoChannelAssets: boolean;
@@ -932,9 +1002,10 @@ declare module '@polkadot/types/lookup' {
         readonly isReduceCreatorTokenPatronageRate: boolean;
         readonly isManageRevenueSplits: boolean;
         readonly isDeissueCreatorToken: boolean;
-        readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken';
+        readonly isAmmControl: boolean;
+        readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken' | 'AmmControl';
     }
-    /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (110) */
+    /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (117) */
     interface PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature extends Enum {
         readonly isChannelFundsTransfer: boolean;
         readonly isCreatorCashout: boolean;
@@ -945,12 +1016,12 @@ declare module '@polkadot/types/lookup' {
         readonly isCreatorTokenIssuance: boolean;
         readonly type: 'ChannelFundsTransfer' | 'CreatorCashout' | 'VideoNftIssuance' | 'VideoCreation' | 'VideoUpdate' | 'ChannelUpdate' | 'CreatorTokenIssuance';
     }
-    /** @name PalletCommonBloatBondRepayableBloatBond (113) */
+    /** @name PalletCommonBloatBondRepayableBloatBond (120) */
     interface PalletCommonBloatBondRepayableBloatBond extends Struct {
         readonly repaymentRestrictedTo: Option<AccountId32>;
         readonly amount: u128;
     }
-    /** @name PalletContentChannelOwner (114) */
+    /** @name PalletContentChannelOwner (121) */
     interface PalletContentChannelOwner extends Enum {
         readonly isMember: boolean;
         readonly asMember: u64;
@@ -958,35 +1029,35 @@ declare module '@polkadot/types/lookup' {
         readonly asCuratorGroup: u64;
         readonly type: 'Member' | 'CuratorGroup';
     }
-    /** @name PalletContentChannelTransferStatus (115) */
+    /** @name PalletContentChannelTransferStatus (122) */
     interface PalletContentChannelTransferStatus extends Enum {
         readonly isNoActiveTransfer: boolean;
         readonly isPendingTransfer: boolean;
         readonly asPendingTransfer: PalletContentPendingTransfer;
         readonly type: 'NoActiveTransfer' | 'PendingTransfer';
     }
-    /** @name PalletContentPendingTransfer (116) */
+    /** @name PalletContentPendingTransfer (123) */
     interface PalletContentPendingTransfer extends Struct {
         readonly newOwner: PalletContentChannelOwner;
         readonly transferParams: PalletContentTransferCommitmentParametersBoundedBTreeMap;
     }
-    /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (117) */
+    /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (124) */
     interface PalletContentTransferCommitmentParametersBoundedBTreeMap extends Struct {
         readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
         readonly price: u128;
         readonly transferId: u64;
     }
-    /** @name PalletContentLimitPerPeriod (118) */
+    /** @name PalletContentLimitPerPeriod (125) */
     interface PalletContentLimitPerPeriod extends Struct {
         readonly limit: u64;
         readonly blockNumberPeriod: u32;
     }
-    /** @name PalletContentNftCounter (119) */
+    /** @name PalletContentNftCounter (126) */
     interface PalletContentNftCounter extends Struct {
         readonly counter: u64;
         readonly lastUpdated: u32;
     }
-    /** @name PalletContentNftTypesEnglishAuctionParamsRecord (120) */
+    /** @name PalletContentNftTypesEnglishAuctionParamsRecord (127) */
     interface PalletContentNftTypesEnglishAuctionParamsRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -996,7 +1067,7 @@ declare module '@polkadot/types/lookup' {
         readonly extensionPeriod: u32;
         readonly minBidStep: u128;
     }
-    /** @name PalletContentNftTypesOpenAuctionParamsRecord (122) */
+    /** @name PalletContentNftTypesOpenAuctionParamsRecord (129) */
     interface PalletContentNftTypesOpenAuctionParamsRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -1004,14 +1075,14 @@ declare module '@polkadot/types/lookup' {
         readonly whitelist: BTreeSet<u64>;
         readonly bidLockDuration: u32;
     }
-    /** @name PalletContentNftTypesNftIssuanceParametersRecord (123) */
+    /** @name PalletContentNftTypesNftIssuanceParametersRecord (130) */
     interface PalletContentNftTypesNftIssuanceParametersRecord extends Struct {
         readonly royalty: Option<Perbill>;
         readonly nftMetadata: Bytes;
         readonly nonChannelOwner: Option<u64>;
         readonly initTransactionalStatus: PalletContentNftTypesInitTransactionalStatusRecord;
     }
-    /** @name PalletContentNftTypesInitTransactionalStatusRecord (124) */
+    /** @name PalletContentNftTypesInitTransactionalStatusRecord (131) */
     interface PalletContentNftTypesInitTransactionalStatusRecord extends Enum {
         readonly isIdle: boolean;
         readonly isBuyNow: boolean;
@@ -1024,7 +1095,7 @@ declare module '@polkadot/types/lookup' {
         readonly asOpenAuction: PalletContentNftTypesOpenAuctionParamsRecord;
         readonly type: 'Idle' | 'BuyNow' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction';
     }
-    /** @name PalletContentChannelCreationParametersRecord (126) */
+    /** @name PalletContentChannelCreationParametersRecord (133) */
     interface PalletContentChannelCreationParametersRecord extends Struct {
         readonly assets: Option<PalletContentStorageAssetsRecord>;
         readonly meta: Option<Bytes>;
@@ -1034,22 +1105,22 @@ declare module '@polkadot/types/lookup' {
         readonly expectedChannelStateBloatBond: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletContentStorageAssetsRecord (127) */
+    /** @name PalletContentStorageAssetsRecord (134) */
     interface PalletContentStorageAssetsRecord extends Struct {
         readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
         readonly expectedDataSizeFee: u128;
     }
-    /** @name PalletStorageDataObjectCreationParameters (129) */
+    /** @name PalletStorageDataObjectCreationParameters (136) */
     interface PalletStorageDataObjectCreationParameters extends Struct {
         readonly size_: u64;
         readonly ipfsContentId: Bytes;
     }
-    /** @name PalletStorageDistributionBucketIdRecord (130) */
+    /** @name PalletStorageDistributionBucketIdRecord (137) */
     interface PalletStorageDistributionBucketIdRecord extends Struct {
         readonly distributionBucketFamilyId: u64;
         readonly distributionBucketIndex: u64;
     }
-    /** @name PalletContentChannelUpdateParametersRecord (137) */
+    /** @name PalletContentChannelUpdateParametersRecord (144) */
     interface PalletContentChannelUpdateParametersRecord extends Struct {
         readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
         readonly newMeta: Option<Bytes>;
@@ -1058,7 +1129,7 @@ declare module '@polkadot/types/lookup' {
         readonly expectedDataObjectStateBloatBond: u128;
         readonly storageBucketsNumWitness: Option<u32>;
     }
-    /** @name PalletContentVideoCreationParametersRecord (139) */
+    /** @name PalletContentVideoCreationParametersRecord (146) */
     interface PalletContentVideoCreationParametersRecord extends Struct {
         readonly assets: Option<PalletContentStorageAssetsRecord>;
         readonly meta: Option<Bytes>;
@@ -1067,7 +1138,7 @@ declare module '@polkadot/types/lookup' {
         readonly expectedDataObjectStateBloatBond: u128;
         readonly storageBucketsNumWitness: u32;
     }
-    /** @name PalletContentVideoUpdateParametersRecord (141) */
+    /** @name PalletContentVideoUpdateParametersRecord (148) */
     interface PalletContentVideoUpdateParametersRecord extends Struct {
         readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
         readonly newMeta: Option<Bytes>;
@@ -1076,27 +1147,25 @@ declare module '@polkadot/types/lookup' {
         readonly expectedDataObjectStateBloatBond: u128;
         readonly storageBucketsNumWitness: Option<u32>;
     }
-    /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (144) */
+    /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (151) */
     interface PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction extends Enum {
         readonly isHideVideo: boolean;
         readonly isHideChannel: boolean;
         readonly isChangeChannelFeatureStatus: boolean;
         readonly asChangeChannelFeatureStatus: PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature;
-        readonly isDeleteVideo: boolean;
-        readonly isDeleteChannel: boolean;
         readonly isDeleteVideoAssets: boolean;
         readonly asDeleteVideoAssets: bool;
         readonly isDeleteNonVideoChannelAssets: boolean;
         readonly isUpdateChannelNftLimits: boolean;
-        readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideo' | 'DeleteChannel' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
+        readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
     }
-    /** @name PalletContentTransferCommitmentParametersBTreeMap (148) */
+    /** @name PalletContentTransferCommitmentParametersBTreeMap (155) */
     interface PalletContentTransferCommitmentParametersBTreeMap extends Struct {
         readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
         readonly price: u128;
         readonly transferId: u64;
     }
-    /** @name PalletContentUpdateChannelPayoutsParametersRecord (149) */
+    /** @name PalletContentUpdateChannelPayoutsParametersRecord (156) */
     interface PalletContentUpdateChannelPayoutsParametersRecord extends Struct {
         readonly commitment: Option<H256>;
         readonly payload: Option<PalletContentChannelPayoutsPayloadParametersRecord>;
@@ -1104,27 +1173,26 @@ declare module '@polkadot/types/lookup' {
         readonly maxCashoutAllowed: Option<u128>;
         readonly channelCashoutsEnabled: Option<bool>;
     }
-    /** @name PalletContentChannelPayoutsPayloadParametersRecord (150) */
+    /** @name PalletContentChannelPayoutsPayloadParametersRecord (157) */
     interface PalletContentChannelPayoutsPayloadParametersRecord extends Struct {
-        readonly uploaderAccount: AccountId32;
         readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
         readonly expectedDataSizeFee: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletContentChannelFundsDestination (154) */
+    /** @name PalletContentChannelFundsDestination (161) */
     interface PalletContentChannelFundsDestination extends Enum {
         readonly isAccountId: boolean;
         readonly asAccountId: AccountId32;
         readonly isCouncilBudget: boolean;
         readonly type: 'AccountId' | 'CouncilBudget';
     }
-    /** @name PalletContentNftLimitPeriod (155) */
+    /** @name PalletContentNftLimitPeriod (162) */
     interface PalletContentNftLimitPeriod extends Enum {
         readonly isDaily: boolean;
         readonly isWeekly: boolean;
         readonly type: 'Daily' | 'Weekly';
     }
-    /** @name PalletStorageRawEvent (156) */
+    /** @name PalletStorageRawEvent (163) */
     interface PalletStorageRawEvent extends Enum {
         readonly isStorageBucketCreated: boolean;
         readonly asStorageBucketCreated: ITuple<[u64, Option<u64>, bool, u64, u64]>;
@@ -1212,7 +1280,7 @@ declare module '@polkadot/types/lookup' {
         readonly asDistributionOperatorRemarked: ITuple<[u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
         readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
     }
-    /** @name PalletStorageUploadParametersRecord (157) */
+    /** @name PalletStorageUploadParametersRecord (164) */
     interface PalletStorageUploadParametersRecord extends Struct {
         readonly bagId: PalletStorageBagIdType;
         readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1220,7 +1288,7 @@ declare module '@polkadot/types/lookup' {
         readonly expectedDataSizeFee: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletStorageBagIdType (158) */
+    /** @name PalletStorageBagIdType (165) */
     interface PalletStorageBagIdType extends Enum {
         readonly isStatic: boolean;
         readonly asStatic: PalletStorageStaticBagId;
@@ -1228,14 +1296,14 @@ declare module '@polkadot/types/lookup' {
         readonly asDynamic: PalletStorageDynamicBagIdType;
         readonly type: 'Static' | 'Dynamic';
     }
-    /** @name PalletStorageStaticBagId (159) */
+    /** @name PalletStorageStaticBagId (166) */
     interface PalletStorageStaticBagId extends Enum {
         readonly isCouncil: boolean;
         readonly isWorkingGroup: boolean;
         readonly asWorkingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
         readonly type: 'Council' | 'WorkingGroup';
     }
-    /** @name PalletStorageDynamicBagIdType (160) */
+    /** @name PalletStorageDynamicBagIdType (167) */
     interface PalletStorageDynamicBagIdType extends Enum {
         readonly isMember: boolean;
         readonly asMember: u64;
@@ -1243,7 +1311,7 @@ declare module '@polkadot/types/lookup' {
         readonly asChannel: u64;
         readonly type: 'Member' | 'Channel';
     }
-    /** @name PalletStorageDynBagCreationParametersRecord (161) */
+    /** @name PalletStorageDynBagCreationParametersRecord (168) */
     interface PalletStorageDynBagCreationParametersRecord extends Struct {
         readonly bagId: PalletStorageDynamicBagIdType;
         readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1253,20 +1321,20 @@ declare module '@polkadot/types/lookup' {
         readonly storageBuckets: BTreeSet<u64>;
         readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
     }
-    /** @name PalletStorageVoucher (164) */
+    /** @name PalletStorageVoucher (171) */
     interface PalletStorageVoucher extends Struct {
         readonly sizeLimit: u64;
         readonly objectsLimit: u64;
         readonly sizeUsed: u64;
         readonly objectsUsed: u64;
     }
-    /** @name PalletStorageDynamicBagType (165) */
+    /** @name PalletStorageDynamicBagType (172) */
     interface PalletStorageDynamicBagType extends Enum {
         readonly isMember: boolean;
         readonly isChannel: boolean;
         readonly type: 'Member' | 'Channel';
     }
-    /** @name PalletProjectTokenEventsRawEvent (169) */
+    /** @name PalletProjectTokenEventsRawEvent (176) */
     interface PalletProjectTokenEventsRawEvent extends Enum {
         readonly isTokenAmountTransferred: boolean;
         readonly asTokenAmountTransferred: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
@@ -1304,53 +1372,61 @@ declare module '@polkadot/types/lookup' {
         readonly asTransferPolicyChangedToPermissionless: u64;
         readonly isTokensBurned: boolean;
         readonly asTokensBurned: ITuple<[u64, u64, u128]>;
-        readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned';
-    }
-    /** @name PalletProjectTokenTransferPolicy (170) */
+        readonly isAmmActivated: boolean;
+        readonly asAmmActivated: ITuple<[u64, u64, PalletProjectTokenAmmCurve]>;
+        readonly isTokensBoughtOnAmm: boolean;
+        readonly asTokensBoughtOnAmm: ITuple<[u64, u64, u128, u128]>;
+        readonly isTokensSoldOnAmm: boolean;
+        readonly asTokensSoldOnAmm: ITuple<[u64, u64, u128, u128]>;
+        readonly isAmmDeactivated: boolean;
+        readonly asAmmDeactivated: ITuple<[u64, u64, u128]>;
+        readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned' | 'AmmActivated' | 'TokensBoughtOnAmm' | 'TokensSoldOnAmm' | 'AmmDeactivated';
+    }
+    /** @name PalletProjectTokenTransferPolicy (177) */
     interface PalletProjectTokenTransferPolicy extends Enum {
         readonly isPermissionless: boolean;
         readonly isPermissioned: boolean;
         readonly asPermissioned: H256;
         readonly type: 'Permissionless' | 'Permissioned';
     }
-    /** @name PalletProjectTokenTokenIssuanceParameters (171) */
+    /** @name PalletProjectTokenTokenIssuanceParameters (178) */
     interface PalletProjectTokenTokenIssuanceParameters extends Struct {
         readonly initialAllocation: BTreeMap<u64, PalletProjectTokenTokenAllocation>;
-        readonly symbol: H256;
         readonly transferPolicy: PalletProjectTokenTransferPolicyParams;
         readonly patronageRate: Permill;
         readonly revenueSplitRate: Permill;
+        readonly metadata: Bytes;
     }
-    /** @name PalletProjectTokenTokenAllocation (172) */
+    /** @name PalletProjectTokenTokenAllocation (179) */
     interface PalletProjectTokenTokenAllocation extends Struct {
         readonly amount: u128;
         readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
     }
-    /** @name PalletProjectTokenVestingScheduleParams (173) */
+    /** @name PalletProjectTokenVestingScheduleParams (180) */
     interface PalletProjectTokenVestingScheduleParams extends Struct {
         readonly linearVestingDuration: u32;
         readonly blocksBeforeCliff: u32;
         readonly cliffAmountPercentage: Permill;
     }
-    /** @name PalletProjectTokenTransferPolicyParams (176) */
+    /** @name PalletProjectTokenTransferPolicyParams (183) */
     interface PalletProjectTokenTransferPolicyParams extends Enum {
         readonly isPermissionless: boolean;
         readonly isPermissioned: boolean;
         readonly asPermissioned: PalletProjectTokenWhitelistParams;
         readonly type: 'Permissionless' | 'Permissioned';
     }
-    /** @name PalletProjectTokenWhitelistParams (177) */
+    /** @name PalletProjectTokenWhitelistParams (184) */
     interface PalletProjectTokenWhitelistParams extends Struct {
         readonly commitment: H256;
         readonly payload: Option<PalletProjectTokenSingleDataObjectUploadParams>;
     }
-    /** @name PalletProjectTokenSingleDataObjectUploadParams (178) */
+    /** @name PalletProjectTokenSingleDataObjectUploadParams (185) */
     interface PalletProjectTokenSingleDataObjectUploadParams extends Struct {
         readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
         readonly expectedDataSizeFee: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletProjectTokenValidated (185) */
+    /** @name PalletProjectTokenValidated (192) */
     interface PalletProjectTokenValidated extends Enum {
         readonly isExisting: boolean;
         readonly asExisting: u64;
@@ -1358,17 +1434,17 @@ declare module '@polkadot/types/lookup' {
         readonly asNonExisting: u64;
         readonly type: 'Existing' | 'NonExisting';
     }
-    /** @name PalletProjectTokenValidatedPayment (186) */
+    /** @name PalletProjectTokenValidatedPayment (193) */
     interface PalletProjectTokenValidatedPayment extends Struct {
         readonly payment: PalletProjectTokenPaymentWithVesting;
         readonly vestingCleanupCandidate: Option<PalletProjectTokenVestingSource>;
     }
-    /** @name PalletProjectTokenPaymentWithVesting (187) */
+    /** @name PalletProjectTokenPaymentWithVesting (194) */
     interface PalletProjectTokenPaymentWithVesting extends Struct {
         readonly amount: u128;
         readonly vestingSchedule: Option<PalletProjectTokenVestingScheduleParams>;
     }
-    /** @name PalletProjectTokenVestingSource (189) */
+    /** @name PalletProjectTokenVestingSource (196) */
     interface PalletProjectTokenVestingSource extends Enum {
         readonly isInitialIssuance: boolean;
         readonly isSale: boolean;
@@ -1377,7 +1453,7 @@ declare module '@polkadot/types/lookup' {
         readonly asIssuerTransfer: u64;
         readonly type: 'InitialIssuance' | 'Sale' | 'IssuerTransfer';
     }
-    /** @name PalletProjectTokenTokenSale (193) */
+    /** @name PalletProjectTokenTokenSale (200) */
     interface PalletProjectTokenTokenSale extends Struct {
         readonly unitPrice: u128;
         readonly quantityLeft: u128;
@@ -1390,7 +1466,13 @@ declare module '@polkadot/types/lookup' {
         readonly capPerMember: Option<u128>;
         readonly autoFinalize: bool;
     }
-    /** @name PalletProposalsEngineRawEvent (195) */
+    /** @name PalletProjectTokenAmmCurve (201) */
+    interface PalletProjectTokenAmmCurve extends Struct {
+        readonly slope: Permill;
+        readonly intercept: Permill;
+        readonly providedSupply: u128;
+    }
+    /** @name PalletProposalsEngineRawEvent (203) */
     interface PalletProposalsEngineRawEvent extends Enum {
         readonly isProposalStatusUpdated: boolean;
         readonly asProposalStatusUpdated: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
@@ -1406,7 +1488,7 @@ declare module '@polkadot/types/lookup' {
         readonly asProposerRemarked: ITuple<[u64, u32, Bytes]>;
         readonly type: 'ProposalStatusUpdated' | 'ProposalDecisionMade' | 'ProposalExecuted' | 'Voted' | 'ProposalCancelled' | 'ProposerRemarked';
     }
-    /** @name PalletProposalsEngineProposalStatusesProposalStatus (196) */
+    /** @name PalletProposalsEngineProposalStatusesProposalStatus (204) */
     interface PalletProposalsEngineProposalStatusesProposalStatus extends Enum {
         readonly isActive: boolean;
         readonly isPendingExecution: boolean;
@@ -1414,7 +1496,7 @@ declare module '@polkadot/types/lookup' {
         readonly isPendingConstitutionality: boolean;
         readonly type: 'Active' | 'PendingExecution' | 'PendingConstitutionality';
     }
-    /** @name PalletProposalsEngineProposalStatusesProposalDecision (197) */
+    /** @name PalletProposalsEngineProposalStatusesProposalDecision (205) */
     interface PalletProposalsEngineProposalStatusesProposalDecision extends Enum {
         readonly isCanceled: boolean;
         readonly isCanceledByRuntime: boolean;
@@ -1426,13 +1508,13 @@ declare module '@polkadot/types/lookup' {
         readonly asApproved: PalletProposalsEngineProposalStatusesApprovedProposalDecision;
         readonly type: 'Canceled' | 'CanceledByRuntime' | 'Vetoed' | 'Rejected' | 'Slashed' | 'Expired' | 'Approved';
     }
-    /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (198) */
+    /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (206) */
     interface PalletProposalsEngineProposalStatusesApprovedProposalDecision extends Enum {
         readonly isPendingExecution: boolean;
         readonly isPendingConstitutionality: boolean;
         readonly type: 'PendingExecution' | 'PendingConstitutionality';
     }
-    /** @name PalletProposalsEngineProposalStatusesExecutionStatus (199) */
+    /** @name PalletProposalsEngineProposalStatusesExecutionStatus (207) */
     interface PalletProposalsEngineProposalStatusesExecutionStatus extends Enum {
         readonly isExecuted: boolean;
         readonly isExecutionFailed: boolean;
@@ -1441,7 +1523,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Executed' | 'ExecutionFailed';
     }
-    /** @name PalletProposalsEngineVoteKind (200) */
+    /** @name PalletProposalsEngineVoteKind (208) */
     interface PalletProposalsEngineVoteKind extends Enum {
         readonly isApprove: boolean;
         readonly isReject: boolean;
@@ -1449,7 +1531,7 @@ declare module '@polkadot/types/lookup' {
         readonly isAbstain: boolean;
         readonly type: 'Approve' | 'Reject' | 'Slash' | 'Abstain';
     }
-    /** @name PalletProposalsDiscussionRawEvent (201) */
+    /** @name PalletProposalsDiscussionRawEvent (209) */
     interface PalletProposalsDiscussionRawEvent extends Enum {
         readonly isThreadCreated: boolean;
         readonly asThreadCreated: ITuple<[u64, u64]>;
@@ -1463,20 +1545,20 @@ declare module '@polkadot/types/lookup' {
         readonly asPostDeleted: ITuple<[u64, u64, u64, bool]>;
         readonly type: 'ThreadCreated' | 'PostCreated' | 'PostUpdated' | 'ThreadModeChanged' | 'PostDeleted';
     }
-    /** @name PalletProposalsDiscussionThreadModeBTreeSet (202) */
+    /** @name PalletProposalsDiscussionThreadModeBTreeSet (210) */
     interface PalletProposalsDiscussionThreadModeBTreeSet extends Enum {
         readonly isOpen: boolean;
         readonly isClosed: boolean;
         readonly asClosed: BTreeSet<u64>;
         readonly type: 'Open' | 'Closed';
     }
-    /** @name PalletProposalsCodexRawEvent (203) */
+    /** @name PalletProposalsCodexRawEvent (211) */
     interface PalletProposalsCodexRawEvent extends Enum {
         readonly isProposalCreated: boolean;
         readonly asProposalCreated: ITuple<[u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
         readonly type: 'ProposalCreated';
     }
-    /** @name PalletProposalsCodexGeneralProposalParams (204) */
+    /** @name PalletProposalsCodexGeneralProposalParams (212) */
     interface PalletProposalsCodexGeneralProposalParams extends Struct {
         readonly memberId: u64;
         readonly title: Bytes;
@@ -1484,7 +1566,7 @@ declare module '@polkadot/types/lookup' {
         readonly stakingAccountId: Option<AccountId32>;
         readonly exactExecutionBlock: Option<u32>;
     }
-    /** @name PalletProposalsCodexProposalDetails (205) */
+    /** @name PalletProposalsCodexProposalDetails (213) */
     interface PalletProposalsCodexProposalDetails extends Enum {
         readonly isSignal: boolean;
         readonly asSignal: Bytes;
@@ -1534,36 +1616,36 @@ declare module '@polkadot/types/lookup' {
         readonly asUpdateChannelPayouts: PalletContentUpdateChannelPayoutsParametersRecord;
         readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts';
     }
-    /** @name PalletCommonFundingRequestParameters (207) */
+    /** @name PalletCommonFundingRequestParameters (215) */
     interface PalletCommonFundingRequestParameters extends Struct {
         readonly account: AccountId32;
         readonly amount: u128;
     }
-    /** @name PalletProposalsCodexCreateOpeningParameters (208) */
+    /** @name PalletProposalsCodexCreateOpeningParameters (216) */
     interface PalletProposalsCodexCreateOpeningParameters extends Struct {
         readonly description: Bytes;
         readonly stakePolicy: PalletWorkingGroupStakePolicy;
         readonly rewardPerBlock: Option<u128>;
         readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
     }
-    /** @name PalletWorkingGroupStakePolicy (209) */
+    /** @name PalletWorkingGroupStakePolicy (217) */
     interface PalletWorkingGroupStakePolicy extends Struct {
         readonly stakeAmount: u128;
         readonly leavingUnstakingPeriod: u32;
     }
-    /** @name PalletProposalsCodexFillOpeningParameters (210) */
+    /** @name PalletProposalsCodexFillOpeningParameters (218) */
     interface PalletProposalsCodexFillOpeningParameters extends Struct {
         readonly openingId: u64;
         readonly applicationId: u64;
         readonly workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
     }
-    /** @name PalletProposalsCodexTerminateRoleParameters (211) */
+    /** @name PalletProposalsCodexTerminateRoleParameters (219) */
     interface PalletProposalsCodexTerminateRoleParameters extends Struct {
         readonly workerId: u64;
         readonly slashingAmount: Option<u128>;
         readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
     }
-    /** @name PalletWorkingGroupRawEventInstance1 (212) */
+    /** @name PalletWorkingGroupRawEventInstance1 (220) */
     interface PalletWorkingGroupRawEventInstance1 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1616,13 +1698,13 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupOpeningType (216) */
+    /** @name PalletWorkingGroupOpeningType (224) */
     interface PalletWorkingGroupOpeningType extends Enum {
         readonly isLeader: boolean;
         readonly isRegular: boolean;
         readonly type: 'Leader' | 'Regular';
     }
-    /** @name PalletWorkingGroupApplyOnOpeningParams (217) */
+    /** @name PalletWorkingGroupApplyOnOpeningParams (225) */
     interface PalletWorkingGroupApplyOnOpeningParams extends Struct {
         readonly memberId: u64;
         readonly openingId: u64;
@@ -1631,20 +1713,20 @@ declare module '@polkadot/types/lookup' {
         readonly description: Bytes;
         readonly stakeParameters: PalletWorkingGroupStakeParameters;
     }
-    /** @name PalletWorkingGroupStakeParameters (218) */
+    /** @name PalletWorkingGroupStakeParameters (226) */
     interface PalletWorkingGroupStakeParameters extends Struct {
         readonly stake: u128;
         readonly stakingAccountId: AccountId32;
     }
-    /** @name PalletWorkingGroupInstance1 (219) */
+    /** @name PalletWorkingGroupInstance1 (227) */
     type PalletWorkingGroupInstance1 = Null;
-    /** @name PalletWorkingGroupRewardPaymentType (220) */
+    /** @name PalletWorkingGroupRewardPaymentType (228) */
     interface PalletWorkingGroupRewardPaymentType extends Enum {
         readonly isMissedReward: boolean;
         readonly isRegularReward: boolean;
         readonly type: 'MissedReward' | 'RegularReward';
     }
-    /** @name PalletWorkingGroupRawEventInstance2 (221) */
+    /** @name PalletWorkingGroupRawEventInstance2 (229) */
     interface PalletWorkingGroupRawEventInstance2 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1697,9 +1779,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance2 (222) */
+    /** @name PalletWorkingGroupInstance2 (230) */
     type PalletWorkingGroupInstance2 = Null;
-    /** @name PalletWorkingGroupRawEventInstance3 (223) */
+    /** @name PalletWorkingGroupRawEventInstance3 (231) */
     interface PalletWorkingGroupRawEventInstance3 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1752,9 +1834,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance3 (224) */
+    /** @name PalletWorkingGroupInstance3 (232) */
     type PalletWorkingGroupInstance3 = Null;
-    /** @name PalletWorkingGroupRawEventInstance4 (225) */
+    /** @name PalletWorkingGroupRawEventInstance4 (233) */
     interface PalletWorkingGroupRawEventInstance4 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1807,9 +1889,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance4 (226) */
+    /** @name PalletWorkingGroupInstance4 (234) */
     type PalletWorkingGroupInstance4 = Null;
-    /** @name PalletWorkingGroupRawEventInstance5 (227) */
+    /** @name PalletWorkingGroupRawEventInstance5 (235) */
     interface PalletWorkingGroupRawEventInstance5 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1862,9 +1944,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance5 (228) */
+    /** @name PalletWorkingGroupInstance5 (236) */
     type PalletWorkingGroupInstance5 = Null;
-    /** @name PalletWorkingGroupRawEventInstance6 (229) */
+    /** @name PalletWorkingGroupRawEventInstance6 (237) */
     interface PalletWorkingGroupRawEventInstance6 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1917,9 +1999,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance6 (230) */
+    /** @name PalletWorkingGroupInstance6 (238) */
     type PalletWorkingGroupInstance6 = Null;
-    /** @name PalletWorkingGroupRawEventInstance7 (231) */
+    /** @name PalletWorkingGroupRawEventInstance7 (239) */
     interface PalletWorkingGroupRawEventInstance7 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1972,9 +2054,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance7 (232) */
+    /** @name PalletWorkingGroupInstance7 (240) */
     type PalletWorkingGroupInstance7 = Null;
-    /** @name PalletWorkingGroupRawEventInstance8 (233) */
+    /** @name PalletWorkingGroupRawEventInstance8 (241) */
     interface PalletWorkingGroupRawEventInstance8 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2027,9 +2109,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance8 (234) */
+    /** @name PalletWorkingGroupInstance8 (242) */
     type PalletWorkingGroupInstance8 = Null;
-    /** @name PalletWorkingGroupRawEventInstance9 (235) */
+    /** @name PalletWorkingGroupRawEventInstance9 (243) */
     interface PalletWorkingGroupRawEventInstance9 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2082,9 +2164,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance9 (236) */
+    /** @name PalletWorkingGroupInstance9 (244) */
     type PalletWorkingGroupInstance9 = Null;
-    /** @name FrameSystemPhase (237) */
+    /** @name FrameSystemPhase (245) */
     interface FrameSystemPhase extends Enum {
         readonly isApplyExtrinsic: boolean;
         readonly asApplyExtrinsic: u32;
@@ -2092,17 +2174,13 @@ declare module '@polkadot/types/lookup' {
         readonly isInitialization: boolean;
         readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
     }
-    /** @name FrameSystemLastRuntimeUpgradeInfo (241) */
+    /** @name FrameSystemLastRuntimeUpgradeInfo (249) */
     interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
         readonly specVersion: Compact<u32>;
         readonly specName: Text;
     }
-    /** @name FrameSystemCall (244) */
+    /** @name FrameSystemCall (252) */
     interface FrameSystemCall extends Enum {
-        readonly isFillBlock: boolean;
-        readonly asFillBlock: {
-            readonly ratio: Perbill;
-        } & Struct;
         readonly isRemark: boolean;
         readonly asRemark: {
             readonly remark: Bytes;
@@ -2136,43 +2214,43 @@ declare module '@polkadot/types/lookup' {
         readonly asRemarkWithEvent: {
             readonly remark: Bytes;
         } & Struct;
-        readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
+        readonly type: 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
     }
-    /** @name FrameSystemLimitsBlockWeights (247) */
+    /** @name FrameSystemLimitsBlockWeights (255) */
     interface FrameSystemLimitsBlockWeights extends Struct {
-        readonly baseBlock: u64;
-        readonly maxBlock: u64;
-        readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
+        readonly baseBlock: SpWeightsWeightV2Weight;
+        readonly maxBlock: SpWeightsWeightV2Weight;
+        readonly perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
     }
-    /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (248) */
-    interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
+    /** @name FrameSupportDispatchPerDispatchClassWeightsPerClass (256) */
+    interface FrameSupportDispatchPerDispatchClassWeightsPerClass extends Struct {
         readonly normal: FrameSystemLimitsWeightsPerClass;
         readonly operational: FrameSystemLimitsWeightsPerClass;
         readonly mandatory: FrameSystemLimitsWeightsPerClass;
     }
-    /** @name FrameSystemLimitsWeightsPerClass (249) */
+    /** @name FrameSystemLimitsWeightsPerClass (257) */
     interface FrameSystemLimitsWeightsPerClass extends Struct {
-        readonly baseExtrinsic: u64;
-        readonly maxExtrinsic: Option<u64>;
-        readonly maxTotal: Option<u64>;
-        readonly reserved: Option<u64>;
+        readonly baseExtrinsic: SpWeightsWeightV2Weight;
+        readonly maxExtrinsic: Option<SpWeightsWeightV2Weight>;
+        readonly maxTotal: Option<SpWeightsWeightV2Weight>;
+        readonly reserved: Option<SpWeightsWeightV2Weight>;
     }
-    /** @name FrameSystemLimitsBlockLength (250) */
+    /** @name FrameSystemLimitsBlockLength (259) */
     interface FrameSystemLimitsBlockLength extends Struct {
-        readonly max: FrameSupportWeightsPerDispatchClassU32;
+        readonly max: FrameSupportDispatchPerDispatchClassU32;
     }
-    /** @name FrameSupportWeightsPerDispatchClassU32 (251) */
-    interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
+    /** @name FrameSupportDispatchPerDispatchClassU32 (260) */
+    interface FrameSupportDispatchPerDispatchClassU32 extends Struct {
         readonly normal: u32;
         readonly operational: u32;
         readonly mandatory: u32;
     }
-    /** @name FrameSupportWeightsRuntimeDbWeight (252) */
-    interface FrameSupportWeightsRuntimeDbWeight extends Struct {
+    /** @name SpWeightsRuntimeDbWeight (261) */
+    interface SpWeightsRuntimeDbWeight extends Struct {
         readonly read: u64;
         readonly write: u64;
     }
-    /** @name SpVersionRuntimeVersion (253) */
+    /** @name SpVersionRuntimeVersion (262) */
     interface SpVersionRuntimeVersion extends Struct {
         readonly specName: Text;
         readonly implName: Text;
@@ -2183,7 +2261,7 @@ declare module '@polkadot/types/lookup' {
         readonly transactionVersion: u32;
         readonly stateVersion: u8;
     }
-    /** @name FrameSystemError (259) */
+    /** @name FrameSystemError (268) */
     interface FrameSystemError extends Enum {
         readonly isInvalidSpecName: boolean;
         readonly isSpecVersionNeedsToIncrease: boolean;
@@ -2193,7 +2271,7 @@ declare module '@polkadot/types/lookup' {
         readonly isCallFiltered: boolean;
         readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
     }
-    /** @name PalletUtilityCall (260) */
+    /** @name PalletUtilityCall (269) */
     interface PalletUtilityCall extends Enum {
         readonly isBatch: boolean;
         readonly asBatch: {
@@ -2217,9 +2295,14 @@ declare module '@polkadot/types/lookup' {
         readonly asForceBatch: {
             readonly calls: Vec<Call>;
         } & Struct;
-        readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
+        readonly isWithWeight: boolean;
+        readonly asWithWeight: {
+            readonly call: Call;
+            readonly weight: SpWeightsWeightV2Weight;
+        } & Struct;
+        readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch' | 'WithWeight';
     }
-    /** @name PalletBabeCall (263) */
+    /** @name PalletBabeCall (272) */
     interface PalletBabeCall extends Enum {
         readonly isReportEquivocation: boolean;
         readonly asReportEquivocation: {
@@ -2237,14 +2320,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'PlanConfigChange';
     }
-    /** @name SpConsensusSlotsEquivocationProof (264) */
+    /** @name SpConsensusSlotsEquivocationProof (273) */
     interface SpConsensusSlotsEquivocationProof extends Struct {
         readonly offender: SpConsensusBabeAppPublic;
         readonly slot: u64;
         readonly firstHeader: SpRuntimeHeader;
         readonly secondHeader: SpRuntimeHeader;
     }
-    /** @name SpRuntimeHeader (265) */
+    /** @name SpRuntimeHeader (274) */
     interface SpRuntimeHeader extends Struct {
         readonly parentHash: H256;
         readonly number: Compact<u32>;
@@ -2252,18 +2335,18 @@ declare module '@polkadot/types/lookup' {
         readonly extrinsicsRoot: H256;
         readonly digest: SpRuntimeDigest;
     }
-    /** @name SpRuntimeBlakeTwo256 (266) */
+    /** @name SpRuntimeBlakeTwo256 (275) */
     type SpRuntimeBlakeTwo256 = Null;
-    /** @name SpConsensusBabeAppPublic (267) */
+    /** @name SpConsensusBabeAppPublic (276) */
     interface SpConsensusBabeAppPublic extends SpCoreSr25519Public {
     }
-    /** @name SpSessionMembershipProof (269) */
+    /** @name SpSessionMembershipProof (278) */
     interface SpSessionMembershipProof extends Struct {
         readonly session: u32;
         readonly trieNodes: Vec<Bytes>;
         readonly validatorCount: u32;
     }
-    /** @name SpConsensusBabeDigestsNextConfigDescriptor (270) */
+    /** @name SpConsensusBabeDigestsNextConfigDescriptor (279) */
     interface SpConsensusBabeDigestsNextConfigDescriptor extends Enum {
         readonly isV1: boolean;
         readonly asV1: {
@@ -2272,14 +2355,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'V1';
     }
-    /** @name SpConsensusBabeAllowedSlots (271) */
+    /** @name SpConsensusBabeAllowedSlots (280) */
     interface SpConsensusBabeAllowedSlots extends Enum {
         readonly isPrimarySlots: boolean;
         readonly isPrimaryAndSecondaryPlainSlots: boolean;
         readonly isPrimaryAndSecondaryVRFSlots: boolean;
         readonly type: 'PrimarySlots' | 'PrimaryAndSecondaryPlainSlots' | 'PrimaryAndSecondaryVRFSlots';
     }
-    /** @name PalletTimestampCall (272) */
+    /** @name PalletTimestampCall (281) */
     interface PalletTimestampCall extends Enum {
         readonly isSet: boolean;
         readonly asSet: {
@@ -2287,15 +2370,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Set';
     }
-    /** @name PalletAuthorshipCall (274) */
-    interface PalletAuthorshipCall extends Enum {
-        readonly isSetUncles: boolean;
-        readonly asSetUncles: {
-            readonly newUncles: Vec<SpRuntimeHeader>;
-        } & Struct;
-        readonly type: 'SetUncles';
-    }
-    /** @name PalletBalancesCall (276) */
+    /** @name PalletBalancesCall (282) */
     interface PalletBalancesCall extends Enum {
         readonly isTransfer: boolean;
         readonly asTransfer: {
@@ -2331,7 +2406,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
     }
-    /** @name PalletElectionProviderMultiPhaseCall (277) */
+    /** @name PalletElectionProviderMultiPhaseCall (283) */
     interface PalletElectionProviderMultiPhaseCall extends Enum {
         readonly isSubmitUnsigned: boolean;
         readonly asSubmitUnsigned: {
@@ -2357,13 +2432,13 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'SubmitUnsigned' | 'SetMinimumUntrustedScore' | 'SetEmergencyElectionResult' | 'Submit' | 'GovernanceFallback';
     }
-    /** @name PalletElectionProviderMultiPhaseRawSolution (278) */
+    /** @name PalletElectionProviderMultiPhaseRawSolution (284) */
     interface PalletElectionProviderMultiPhaseRawSolution extends Struct {
         readonly solution: JoystreamNodeRuntimeNposSolution16;
         readonly score: SpNposElectionsElectionScore;
         readonly round: u32;
     }
-    /** @name JoystreamNodeRuntimeNposSolution16 (279) */
+    /** @name JoystreamNodeRuntimeNposSolution16 (285) */
     interface JoystreamNodeRuntimeNposSolution16 extends Struct {
         readonly votes1: Vec<ITuple<[Compact<u32>, Compact<u16>]>>;
         readonly votes2: Vec<ITuple<[Compact<u32>, ITuple<[Compact<u16>, Compact<PerU16>]>, Compact<u16>]>>;
@@ -2382,23 +2457,17 @@ declare module '@polkadot/types/lookup' {
         readonly votes15: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
         readonly votes16: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
     }
-    /** @name SpNposElectionsElectionScore (330) */
-    interface SpNposElectionsElectionScore extends Struct {
-        readonly minimalStake: u128;
-        readonly sumStake: u128;
-        readonly sumStakeSquared: u128;
-    }
-    /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (331) */
+    /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (336) */
     interface PalletElectionProviderMultiPhaseSolutionOrSnapshotSize extends Struct {
         readonly voters: Compact<u32>;
         readonly targets: Compact<u32>;
     }
-    /** @name SpNposElectionsSupport (335) */
+    /** @name SpNposElectionsSupport (340) */
     interface SpNposElectionsSupport extends Struct {
         readonly total: u128;
         readonly voters: Vec<ITuple<[AccountId32, u128]>>;
     }
-    /** @name PalletStakingPalletCall (338) */
+    /** @name PalletStakingPalletCall (342) */
     interface PalletStakingPalletCall extends Enum {
         readonly isBond: boolean;
         readonly asBond: {
@@ -2473,11 +2542,6 @@ declare module '@polkadot/types/lookup' {
         readonly asRebond: {
             readonly value: Compact<u128>;
         } & Struct;
-        readonly isSetHistoryDepth: boolean;
-        readonly asSetHistoryDepth: {
-            readonly newHistoryDepth: Compact<u32>;
-            readonly eraItemsDeleted: Compact<u32>;
-        } & Struct;
         readonly isReapStash: boolean;
         readonly asReapStash: {
             readonly stash: AccountId32;
@@ -2504,9 +2568,13 @@ declare module '@polkadot/types/lookup' {
         readonly asForceApplyMinCommission: {
             readonly validatorStash: AccountId32;
         } & Struct;
-        readonly type: 'Bond' | 'BondExtra' | 'Unbond' | 'WithdrawUnbonded' | 'Validate' | 'Nominate' | 'Chill' | 'SetPayee' | 'SetController' | 'SetValidatorCount' | 'IncreaseValidatorCount' | 'ScaleValidatorCount' | 'ForceNoEras' | 'ForceNewEra' | 'SetInvulnerables' | 'ForceUnstake' | 'ForceNewEraAlways' | 'CancelDeferredSlash' | 'PayoutStakers' | 'Rebond' | 'SetHistoryDepth' | 'ReapStash' | 'Kick' | 'SetStakingConfigs' | 'ChillOther' | 'ForceApplyMinCommission';
+        readonly isSetMinCommission: boolean;
+        readonly asSetMinCommission: {
+            readonly new_: Perbill;
+        } & Struct;
+        readonly type: 'Bond' | 'BondExtra' | 'Unbond' | 'WithdrawUnbonded' | 'Validate' | 'Nominate' | 'Chill' | 'SetPayee' | 'SetController' | 'SetValidatorCount' | 'IncreaseValidatorCount' | 'ScaleValidatorCount' | 'ForceNoEras' | 'ForceNewEra' | 'SetInvulnerables' | 'ForceUnstake' | 'ForceNewEraAlways' | 'CancelDeferredSlash' | 'PayoutStakers' | 'Rebond' | 'ReapStash' | 'Kick' | 'SetStakingConfigs' | 'ChillOther' | 'ForceApplyMinCommission' | 'SetMinCommission';
     }
-    /** @name PalletStakingRewardDestination (339) */
+    /** @name PalletStakingRewardDestination (343) */
     interface PalletStakingRewardDestination extends Enum {
         readonly isStaked: boolean;
         readonly isStash: boolean;
@@ -2516,7 +2584,7 @@ declare module '@polkadot/types/lookup' {
         readonly isNone: boolean;
         readonly type: 'Staked' | 'Stash' | 'Controller' | 'Account' | 'None';
     }
-    /** @name PalletStakingPalletConfigOpU128 (343) */
+    /** @name PalletStakingPalletConfigOpU128 (347) */
     interface PalletStakingPalletConfigOpU128 extends Enum {
         readonly isNoop: boolean;
         readonly isSet: boolean;
@@ -2524,7 +2592,7 @@ declare module '@polkadot/types/lookup' {
         readonly isRemove: boolean;
         readonly type: 'Noop' | 'Set' | 'Remove';
     }
-    /** @name PalletStakingPalletConfigOpU32 (344) */
+    /** @name PalletStakingPalletConfigOpU32 (348) */
     interface PalletStakingPalletConfigOpU32 extends Enum {
         readonly isNoop: boolean;
         readonly isSet: boolean;
@@ -2532,7 +2600,7 @@ declare module '@polkadot/types/lookup' {
         readonly isRemove: boolean;
         readonly type: 'Noop' | 'Set' | 'Remove';
     }
-    /** @name PalletStakingPalletConfigOpPercent (345) */
+    /** @name PalletStakingPalletConfigOpPercent (349) */
     interface PalletStakingPalletConfigOpPercent extends Enum {
         readonly isNoop: boolean;
         readonly isSet: boolean;
@@ -2540,7 +2608,7 @@ declare module '@polkadot/types/lookup' {
         readonly isRemove: boolean;
         readonly type: 'Noop' | 'Set' | 'Remove';
     }
-    /** @name PalletStakingPalletConfigOpPerbill (346) */
+    /** @name PalletStakingPalletConfigOpPerbill (350) */
     interface PalletStakingPalletConfigOpPerbill extends Enum {
         readonly isNoop: boolean;
         readonly isSet: boolean;
@@ -2548,7 +2616,7 @@ declare module '@polkadot/types/lookup' {
         readonly isRemove: boolean;
         readonly type: 'Noop' | 'Set' | 'Remove';
     }
-    /** @name PalletSessionCall (347) */
+    /** @name PalletSessionCall (351) */
     interface PalletSessionCall extends Enum {
         readonly isSetKeys: boolean;
         readonly asSetKeys: {
@@ -2558,17 +2626,17 @@ declare module '@polkadot/types/lookup' {
         readonly isPurgeKeys: boolean;
         readonly type: 'SetKeys' | 'PurgeKeys';
     }
-    /** @name JoystreamNodeRuntimeSessionKeys (348) */
+    /** @name JoystreamNodeRuntimeSessionKeys (352) */
     interface JoystreamNodeRuntimeSessionKeys extends Struct {
         readonly grandpa: SpFinalityGrandpaAppPublic;
         readonly babe: SpConsensusBabeAppPublic;
         readonly imOnline: PalletImOnlineSr25519AppSr25519Public;
         readonly authorityDiscovery: SpAuthorityDiscoveryAppPublic;
     }
-    /** @name SpAuthorityDiscoveryAppPublic (349) */
+    /** @name SpAuthorityDiscoveryAppPublic (353) */
     interface SpAuthorityDiscoveryAppPublic extends SpCoreSr25519Public {
     }
-    /** @name PalletGrandpaCall (350) */
+    /** @name PalletGrandpaCall (354) */
     interface PalletGrandpaCall extends Enum {
         readonly isReportEquivocation: boolean;
         readonly asReportEquivocation: {
@@ -2587,12 +2655,12 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'NoteStalled';
     }
-    /** @name SpFinalityGrandpaEquivocationProof (351) */
+    /** @name SpFinalityGrandpaEquivocationProof (355) */
     interface SpFinalityGrandpaEquivocationProof extends Struct {
         readonly setId: u64;
         readonly equivocation: SpFinalityGrandpaEquivocation;
     }
-    /** @name SpFinalityGrandpaEquivocation (352) */
+    /** @name SpFinalityGrandpaEquivocation (356) */
     interface SpFinalityGrandpaEquivocation extends Enum {
         readonly isPrevote: boolean;
         readonly asPrevote: FinalityGrandpaEquivocationPrevote;
@@ -2600,37 +2668,37 @@ declare module '@polkadot/types/lookup' {
         readonly asPrecommit: FinalityGrandpaEquivocationPrecommit;
         readonly type: 'Prevote' | 'Precommit';
     }
-    /** @name FinalityGrandpaEquivocationPrevote (353) */
+    /** @name FinalityGrandpaEquivocationPrevote (357) */
     interface FinalityGrandpaEquivocationPrevote extends Struct {
         readonly roundNumber: u64;
         readonly identity: SpFinalityGrandpaAppPublic;
         readonly first: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
         readonly second: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
     }
-    /** @name FinalityGrandpaPrevote (354) */
+    /** @name FinalityGrandpaPrevote (358) */
     interface FinalityGrandpaPrevote extends Struct {
         readonly targetHash: H256;
         readonly targetNumber: u32;
     }
-    /** @name SpFinalityGrandpaAppSignature (355) */
+    /** @name SpFinalityGrandpaAppSignature (359) */
     interface SpFinalityGrandpaAppSignature extends SpCoreEd25519Signature {
     }
-    /** @name SpCoreEd25519Signature (356) */
+    /** @name SpCoreEd25519Signature (360) */
     interface SpCoreEd25519Signature extends U8aFixed {
     }
-    /** @name FinalityGrandpaEquivocationPrecommit (359) */
+    /** @name FinalityGrandpaEquivocationPrecommit (363) */
     interface FinalityGrandpaEquivocationPrecommit extends Struct {
         readonly roundNumber: u64;
         readonly identity: SpFinalityGrandpaAppPublic;
         readonly first: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
         readonly second: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
     }
-    /** @name FinalityGrandpaPrecommit (360) */
+    /** @name FinalityGrandpaPrecommit (364) */
     interface FinalityGrandpaPrecommit extends Struct {
         readonly targetHash: H256;
         readonly targetNumber: u32;
     }
-    /** @name PalletImOnlineCall (362) */
+    /** @name PalletImOnlineCall (366) */
     interface PalletImOnlineCall extends Enum {
         readonly isHeartbeat: boolean;
         readonly asHeartbeat: {
@@ -2639,7 +2707,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Heartbeat';
     }
-    /** @name PalletImOnlineHeartbeat (363) */
+    /** @name PalletImOnlineHeartbeat (367) */
     interface PalletImOnlineHeartbeat extends Struct {
         readonly blockNumber: u32;
         readonly networkState: SpCoreOffchainOpaqueNetworkState;
@@ -2647,40 +2715,18 @@ declare module '@polkadot/types/lookup' {
         readonly authorityIndex: u32;
         readonly validatorsLen: u32;
     }
-    /** @name SpCoreOffchainOpaqueNetworkState (364) */
+    /** @name SpCoreOffchainOpaqueNetworkState (368) */
     interface SpCoreOffchainOpaqueNetworkState extends Struct {
         readonly peerId: Bytes;
         readonly externalAddresses: Vec<Bytes>;
     }
-    /** @name PalletImOnlineSr25519AppSr25519Signature (368) */
+    /** @name PalletImOnlineSr25519AppSr25519Signature (372) */
     interface PalletImOnlineSr25519AppSr25519Signature extends SpCoreSr25519Signature {
     }
-    /** @name SpCoreSr25519Signature (369) */
+    /** @name SpCoreSr25519Signature (373) */
     interface SpCoreSr25519Signature extends U8aFixed {
     }
-    /** @name PalletSudoCall (370) */
-    interface PalletSudoCall extends Enum {
-        readonly isSudo: boolean;
-        readonly asSudo: {
-            readonly call: Call;
-        } & Struct;
-        readonly isSudoUncheckedWeight: boolean;
-        readonly asSudoUncheckedWeight: {
-            readonly call: Call;
-            readonly weight: u64;
-        } & Struct;
-        readonly isSetKey: boolean;
-        readonly asSetKey: {
-            readonly new_: AccountId32;
-        } & Struct;
-        readonly isSudoAs: boolean;
-        readonly asSudoAs: {
-            readonly who: AccountId32;
-            readonly call: Call;
-        } & Struct;
-        readonly type: 'Sudo' | 'SudoUncheckedWeight' | 'SetKey' | 'SudoAs';
-    }
-    /** @name PalletBagsListCall (371) */
+    /** @name PalletBagsListCall (374) */
     interface PalletBagsListCall extends Enum {
         readonly isRebag: boolean;
         readonly asRebag: {
@@ -2692,7 +2738,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Rebag' | 'PutInFrontOf';
     }
-    /** @name PalletVestingCall (372) */
+    /** @name PalletVestingCall (375) */
     interface PalletVestingCall extends Enum {
         readonly isVest: boolean;
         readonly isVestOther: boolean;
@@ -2717,13 +2763,13 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Vest' | 'VestOther' | 'VestedTransfer' | 'ForceVestedTransfer' | 'MergeSchedules';
     }
-    /** @name PalletVestingVestingInfo (373) */
+    /** @name PalletVestingVestingInfo (376) */
     interface PalletVestingVestingInfo extends Struct {
         readonly locked: u128;
         readonly perBlock: u128;
         readonly startingBlock: u32;
     }
-    /** @name PalletMultisigCall (374) */
+    /** @name PalletMultisigCall (377) */
     interface PalletMultisigCall extends Enum {
         readonly isAsMultiThreshold1: boolean;
         readonly asAsMultiThreshold1: {
@@ -2735,9 +2781,8 @@ declare module '@polkadot/types/lookup' {
             readonly threshold: u16;
             readonly otherSignatories: Vec<AccountId32>;
             readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
-            readonly call: WrapperKeepOpaque<Call>;
-            readonly storeCall: bool;
-            readonly maxWeight: u64;
+            readonly call: Call;
+            readonly maxWeight: SpWeightsWeightV2Weight;
         } & Struct;
         readonly isApproveAsMulti: boolean;
         readonly asApproveAsMulti: {
@@ -2745,7 +2790,7 @@ declare module '@polkadot/types/lookup' {
             readonly otherSignatories: Vec<AccountId32>;
             readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
             readonly callHash: U8aFixed;
-            readonly maxWeight: u64;
+            readonly maxWeight: SpWeightsWeightV2Weight;
         } & Struct;
         readonly isCancelAsMulti: boolean;
         readonly asCancelAsMulti: {
@@ -2756,7 +2801,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
     }
-    /** @name PalletCouncilCall (377) */
+    /** @name PalletCouncilCall (379) */
     interface PalletCouncilCall extends Enum {
         readonly isAnnounceCandidacy: boolean;
         readonly asAnnounceCandidacy: {
@@ -2816,7 +2861,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AnnounceCandidacy' | 'ReleaseCandidacyStake' | 'WithdrawCandidacy' | 'SetCandidacyNote' | 'SetBudget' | 'PlanBudgetRefill' | 'SetBudgetIncrement' | 'SetCouncilorReward' | 'FundingRequest' | 'FundCouncilBudget' | 'CouncilorRemark' | 'CandidateRemark';
     }
-    /** @name PalletReferendumCall (378) */
+    /** @name PalletReferendumCall (380) */
     interface PalletReferendumCall extends Enum {
         readonly isVote: boolean;
         readonly asVote: {
@@ -2829,9 +2874,10 @@ declare module '@polkadot/types/lookup' {
             readonly voteOptionId: u64;
         } & Struct;
         readonly isReleaseVoteStake: boolean;
-        readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake';
+        readonly isOptOutOfVoting: boolean;
+        readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake' | 'OptOutOfVoting';
     }
-    /** @name PalletMembershipCall (379) */
+    /** @name PalletMembershipCall (381) */
     interface PalletMembershipCall extends Enum {
         readonly isBuyMembership: boolean;
         readonly asBuyMembership: {
@@ -2906,6 +2952,7 @@ declare module '@polkadot/types/lookup' {
         readonly asMemberRemark: {
             readonly memberId: u64;
             readonly msg: Bytes;
+            readonly payment: Option<ITuple<[AccountId32, u128]>>;
         } & Struct;
         readonly isCreateMember: boolean;
         readonly asCreateMember: {
@@ -2913,7 +2960,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'BuyMembership' | 'UpdateProfile' | 'UpdateAccounts' | 'UpdateProfileVerification' | 'SetReferralCut' | 'TransferInvites' | 'InviteMember' | 'GiftMembership' | 'SetMembershipPrice' | 'SetLeaderInvitationQuota' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'AddStakingAccountCandidate' | 'RemoveStakingAccount' | 'ConfirmStakingAccount' | 'MemberRemark' | 'CreateMember';
     }
-    /** @name PalletForumCall (380) */
+    /** @name PalletForumCall (382) */
     interface PalletForumCall extends Enum {
         readonly isUpdateCategoryMembershipOfModerator: boolean;
         readonly asUpdateCategoryMembershipOfModerator: {
@@ -3023,7 +3070,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
     }
-    /** @name PalletConstitutionCall (381) */
+    /** @name PalletConstitutionCall (383) */
     interface PalletConstitutionCall extends Enum {
         readonly isAmendConstitution: boolean;
         readonly asAmendConstitution: {
@@ -3031,7 +3078,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AmendConstitution';
     }
-    /** @name PalletBountyCall (382) */
+    /** @name PalletBountyCall (384) */
     interface PalletBountyCall extends Enum {
         readonly isCreateBounty: boolean;
         readonly asCreateBounty: {
@@ -3119,7 +3166,29 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'CreateBounty' | 'FundBounty' | 'TerminateBounty' | 'SwitchOracle' | 'WithdrawFunding' | 'AnnounceWorkEntry' | 'SubmitWork' | 'EndWorkingPeriod' | 'SubmitOracleJudgment' | 'WithdrawEntrantStake' | 'WithdrawOracleReward' | 'ContributorRemark' | 'OracleRemark' | 'EntrantRemark' | 'CreatorRemark';
     }
-    /** @name PalletContentCall (384) */
+    /** @name PalletJoystreamUtilityCall (385) */
+    interface PalletJoystreamUtilityCall extends Enum {
+        readonly isExecuteSignalProposal: boolean;
+        readonly asExecuteSignalProposal: {
+            readonly signal: Bytes;
+        } & Struct;
+        readonly isExecuteRuntimeUpgradeProposal: boolean;
+        readonly asExecuteRuntimeUpgradeProposal: {
+            readonly wasm: Bytes;
+        } & Struct;
+        readonly isUpdateWorkingGroupBudget: boolean;
+        readonly asUpdateWorkingGroupBudget: {
+            readonly workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+            readonly amount: u128;
+            readonly balanceKind: PalletCommonBalanceKind;
+        } & Struct;
+        readonly isBurnAccountTokens: boolean;
+        readonly asBurnAccountTokens: {
+            readonly amount: u128;
+        } & Struct;
+        readonly type: 'ExecuteSignalProposal' | 'ExecuteRuntimeUpgradeProposal' | 'UpdateWorkingGroupBudget' | 'BurnAccountTokens';
+    }
+    /** @name PalletContentCall (386) */
     interface PalletContentCall extends Enum {
         readonly isCreateCuratorGroup: boolean;
         readonly asCreateCuratorGroup: {
@@ -3185,14 +3254,6 @@ declare module '@polkadot/types/lookup' {
             readonly storageBucketsNumWitness: u32;
             readonly rationale: Bytes;
         } & Struct;
-        readonly isDeleteChannelAsModerator: boolean;
-        readonly asDeleteChannelAsModerator: {
-            readonly actor: PalletContentPermissionsContentActor;
-            readonly channelId: u64;
-            readonly channelBagWitness: PalletContentChannelBagWitness;
-            readonly numObjectsToDelete: u64;
-            readonly rationale: Bytes;
-        } & Struct;
         readonly isSetChannelVisibilityAsModerator: boolean;
         readonly asSetChannelVisibilityAsModerator: {
             readonly actor: PalletContentPermissionsContentActor;
@@ -3227,14 +3288,6 @@ declare module '@polkadot/types/lookup' {
             readonly assetsToRemove: BTreeSet<u64>;
             readonly rationale: Bytes;
         } & Struct;
-        readonly isDeleteVideoAsModerator: boolean;
-        readonly asDeleteVideoAsModerator: {
-            readonly actor: PalletContentPermissionsContentActor;
-            readonly videoId: u64;
-            readonly storageBucketsNumWitness: Option<u32>;
-            readonly numObjectsToDelete: u64;
-            readonly rationale: Bytes;
-        } & Struct;
         readonly isSetVideoVisibilityAsModerator: boolean;
         readonly asSetVideoVisibilityAsModerator: {
             readonly actor: PalletContentPermissionsContentActor;
@@ -3245,6 +3298,7 @@ declare module '@polkadot/types/lookup' {
         readonly isUpdateChannelPayouts: boolean;
         readonly asUpdateChannelPayouts: {
             readonly params: PalletContentUpdateChannelPayoutsParametersRecord;
+            readonly uploaderAccount: AccountId32;
         } & Struct;
         readonly isClaimChannelReward: boolean;
         readonly asClaimChannelReward: {
@@ -3266,12 +3320,6 @@ declare module '@polkadot/types/lookup' {
         readonly asUpdateVideoStateBloatBond: {
             readonly newVideoStateBloatBond: u128;
         } & Struct;
-        readonly isClaimAndWithdrawChannelReward: boolean;
-        readonly asClaimAndWithdrawChannelReward: {
-            readonly actor: PalletContentPermissionsContentActor;
-            readonly proof: Vec<PalletCommonMerkleTreeProofElementRecord>;
-            readonly item: PalletContentPullPaymentElement;
-        } & Struct;
         readonly isIssueNft: boolean;
         readonly asIssueNft: {
             readonly actor: PalletContentPermissionsContentActor;
@@ -3491,37 +3539,54 @@ declare module '@polkadot/types/lookup' {
             readonly actor: PalletContentPermissionsContentActor;
             readonly channelId: u64;
         } & Struct;
-        readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken';
+        readonly isActivateAmm: boolean;
+        readonly asActivateAmm: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly params: PalletProjectTokenAmmParams;
+        } & Struct;
+        readonly isDeactivateAmm: boolean;
+        readonly asDeactivateAmm: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+        } & Struct;
+        readonly isCreatorTokenIssuerRemark: boolean;
+        readonly asCreatorTokenIssuerRemark: {
+            readonly actor: PalletContentPermissionsContentActor;
+            readonly channelId: u64;
+            readonly remark: Bytes;
+        } & Struct;
+        readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken' | 'ActivateAmm' | 'DeactivateAmm' | 'CreatorTokenIssuerRemark';
     }
-    /** @name PalletContentChannelBagWitness (385) */
+    /** @name PalletContentChannelBagWitness (387) */
     interface PalletContentChannelBagWitness extends Struct {
         readonly storageBucketsNum: u32;
         readonly distributionBucketsNum: u32;
     }
-    /** @name PalletCommonMerkleTreeProofElementRecord (387) */
+    /** @name PalletCommonMerkleTreeProofElementRecord (389) */
     interface PalletCommonMerkleTreeProofElementRecord extends Struct {
         readonly hash_: H256;
         readonly side: PalletCommonMerkleTreeSide;
     }
-    /** @name PalletCommonMerkleTreeSide (388) */
+    /** @name PalletCommonMerkleTreeSide (390) */
     interface PalletCommonMerkleTreeSide extends Enum {
         readonly isLeft: boolean;
         readonly isRight: boolean;
         readonly type: 'Left' | 'Right';
     }
-    /** @name PalletContentPullPaymentElement (389) */
+    /** @name PalletContentPullPaymentElement (391) */
     interface PalletContentPullPaymentElement extends Struct {
         readonly channelId: u64;
         readonly cumulativeRewardEarned: u128;
         readonly reason: H256;
     }
-    /** @name PalletContentInitTransferParameters (390) */
+    /** @name PalletContentInitTransferParameters (392) */
     interface PalletContentInitTransferParameters extends Struct {
         readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
         readonly price: u128;
         readonly newOwner: PalletContentChannelOwner;
     }
-    /** @name PalletProjectTokenTokenSaleParams (391) */
+    /** @name PalletProjectTokenTokenSaleParams (393) */
     interface PalletProjectTokenTokenSaleParams extends Struct {
         readonly unitPrice: u128;
         readonly upperBoundQuantity: u128;
@@ -3531,10 +3596,15 @@ declare module '@polkadot/types/lookup' {
         readonly capPerMember: Option<u128>;
         readonly metadata: Option<Bytes>;
     }
-    /** @name PalletProjectTokenTransfersPaymentWithVesting (392) */
+    /** @name PalletProjectTokenTransfersPaymentWithVesting (394) */
     interface PalletProjectTokenTransfersPaymentWithVesting extends BTreeMap<u64, PalletProjectTokenPaymentWithVesting> {
     }
-    /** @name PalletStorageCall (396) */
+    /** @name PalletProjectTokenAmmParams (398) */
+    interface PalletProjectTokenAmmParams extends Struct {
+        readonly slope: Permill;
+        readonly intercept: Permill;
+    }
+    /** @name PalletStorageCall (399) */
     interface PalletStorageCall extends Enum {
         readonly isDeleteStorageBucket: boolean;
         readonly asDeleteStorageBucket: {
@@ -3698,10 +3768,6 @@ declare module '@polkadot/types/lookup' {
             readonly bucketId: PalletStorageDistributionBucketIdRecord;
             readonly metadata: Bytes;
         } & Struct;
-        readonly isSudoUploadDataObjects: boolean;
-        readonly asSudoUploadDataObjects: {
-            readonly params: PalletStorageUploadParametersRecord;
-        } & Struct;
         readonly isStorageOperatorRemark: boolean;
         readonly asStorageOperatorRemark: {
             readonly workerId: u64;
@@ -3714,9 +3780,9 @@ declare module '@polkadot/types/lookup' {
             readonly distributionBucketId: PalletStorageDistributionBucketIdRecord;
             readonly msg: Bytes;
         } & Struct;
-        readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'SudoUploadDataObjects' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
+        readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
     }
-    /** @name PalletProjectTokenCall (397) */
+    /** @name PalletProjectTokenCall (400) */
     interface PalletProjectTokenCall extends Enum {
         readonly isTransfer: boolean;
         readonly asTransfer: {
@@ -3759,25 +3825,39 @@ declare module '@polkadot/types/lookup' {
             readonly tokenId: u64;
             readonly memberId: u64;
         } & Struct;
-        readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit';
+        readonly isBuyOnAmm: boolean;
+        readonly asBuyOnAmm: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+            readonly amount: u128;
+            readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+        } & Struct;
+        readonly isSellOnAmm: boolean;
+        readonly asSellOnAmm: {
+            readonly tokenId: u64;
+            readonly memberId: u64;
+            readonly amount: u128;
+            readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+        } & Struct;
+        readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit' | 'BuyOnAmm' | 'SellOnAmm';
     }
-    /** @name PalletProjectTokenTransfersPayment (398) */
+    /** @name PalletProjectTokenTransfersPayment (401) */
     interface PalletProjectTokenTransfersPayment extends BTreeMap<u64, PalletProjectTokenPayment> {
     }
-    /** @name PalletProjectTokenPayment (399) */
+    /** @name PalletProjectTokenPayment (402) */
     interface PalletProjectTokenPayment extends Struct {
         readonly amount: u128;
     }
-    /** @name PalletProjectTokenMerkleProof (403) */
+    /** @name PalletProjectTokenMerkleProof (406) */
     interface PalletProjectTokenMerkleProof extends Vec<ITuple<[H256, PalletProjectTokenMerkleSide]>> {
     }
-    /** @name PalletProjectTokenMerkleSide (406) */
+    /** @name PalletProjectTokenMerkleSide (409) */
     interface PalletProjectTokenMerkleSide extends Enum {
         readonly isRight: boolean;
         readonly isLeft: boolean;
         readonly type: 'Right' | 'Left';
     }
-    /** @name PalletProposalsEngineCall (407) */
+    /** @name PalletProposalsEngineCall (412) */
     interface PalletProposalsEngineCall extends Enum {
         readonly isVote: boolean;
         readonly asVote: {
@@ -3803,7 +3883,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Vote' | 'CancelProposal' | 'VetoProposal' | 'ProposerRemark';
     }
-    /** @name PalletProposalsDiscussionCall (408) */
+    /** @name PalletProposalsDiscussionCall (413) */
     interface PalletProposalsDiscussionCall extends Enum {
         readonly isAddPost: boolean;
         readonly asAddPost: {
@@ -3833,7 +3913,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AddPost' | 'DeletePost' | 'UpdatePost' | 'ChangeThreadMode';
     }
-    /** @name PalletProposalsCodexCall (409) */
+    /** @name PalletProposalsCodexCall (414) */
     interface PalletProposalsCodexCall extends Enum {
         readonly isCreateProposal: boolean;
         readonly asCreateProposal: {
@@ -3842,7 +3922,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'CreateProposal';
     }
-    /** @name PalletWorkingGroupCall (410) */
+    /** @name PalletWorkingGroupCall (415) */
     interface PalletWorkingGroupCall extends Enum {
         readonly isAddOpening: boolean;
         readonly asAddOpening: {
@@ -3941,14 +4021,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AddOpening' | 'ApplyOnOpening' | 'FillOpening' | 'UpdateRoleAccount' | 'LeaveRole' | 'TerminateRole' | 'SlashStake' | 'DecreaseStake' | 'IncreaseStake' | 'WithdrawApplication' | 'CancelOpening' | 'SetBudget' | 'UpdateRewardAccount' | 'UpdateRewardAmount' | 'SetStatusText' | 'SpendFromBudget' | 'FundWorkingGroupBudget' | 'LeadRemark' | 'WorkerRemark';
     }
-    /** @name JoystreamNodeRuntimeOriginCaller (419) */
+    /** @name JoystreamNodeRuntimeOriginCaller (424) */
     interface JoystreamNodeRuntimeOriginCaller extends Enum {
         readonly isSystem: boolean;
         readonly asSystem: FrameSupportDispatchRawOrigin;
         readonly isVoid: boolean;
         readonly type: 'System' | 'Void';
     }
-    /** @name FrameSupportDispatchRawOrigin (420) */
+    /** @name FrameSupportDispatchRawOrigin (425) */
     interface FrameSupportDispatchRawOrigin extends Enum {
         readonly isRoot: boolean;
         readonly isSigned: boolean;
@@ -3956,14 +4036,14 @@ declare module '@polkadot/types/lookup' {
         readonly isNone: boolean;
         readonly type: 'Root' | 'Signed' | 'None';
     }
-    /** @name SpCoreVoid (421) */
+    /** @name SpCoreVoid (426) */
     type SpCoreVoid = Null;
-    /** @name PalletUtilityError (422) */
+    /** @name PalletUtilityError (427) */
     interface PalletUtilityError extends Enum {
         readonly isTooManyCalls: boolean;
         readonly type: 'TooManyCalls';
     }
-    /** @name SpConsensusBabeDigestsPreDigest (429) */
+    /** @name SpConsensusBabeDigestsPreDigest (434) */
     interface SpConsensusBabeDigestsPreDigest extends Enum {
         readonly isPrimary: boolean;
         readonly asPrimary: SpConsensusBabeDigestsPrimaryPreDigest;
@@ -3973,31 +4053,31 @@ declare module '@polkadot/types/lookup' {
         readonly asSecondaryVRF: SpConsensusBabeDigestsSecondaryVRFPreDigest;
         readonly type: 'Primary' | 'SecondaryPlain' | 'SecondaryVRF';
     }
-    /** @name SpConsensusBabeDigestsPrimaryPreDigest (430) */
+    /** @name SpConsensusBabeDigestsPrimaryPreDigest (435) */
     interface SpConsensusBabeDigestsPrimaryPreDigest extends Struct {
         readonly authorityIndex: u32;
         readonly slot: u64;
         readonly vrfOutput: U8aFixed;
         readonly vrfProof: U8aFixed;
     }
-    /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (431) */
+    /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (436) */
     interface SpConsensusBabeDigestsSecondaryPlainPreDigest extends Struct {
         readonly authorityIndex: u32;
         readonly slot: u64;
     }
-    /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (432) */
+    /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (437) */
     interface SpConsensusBabeDigestsSecondaryVRFPreDigest extends Struct {
         readonly authorityIndex: u32;
         readonly slot: u64;
         readonly vrfOutput: U8aFixed;
         readonly vrfProof: U8aFixed;
     }
-    /** @name SpConsensusBabeBabeEpochConfiguration (434) */
+    /** @name SpConsensusBabeBabeEpochConfiguration (439) */
     interface SpConsensusBabeBabeEpochConfiguration extends Struct {
         readonly c: ITuple<[u64, u64]>;
         readonly allowedSlots: SpConsensusBabeAllowedSlots;
     }
-    /** @name PalletBabeError (435) */
+    /** @name PalletBabeError (441) */
     interface PalletBabeError extends Enum {
         readonly isInvalidEquivocationProof: boolean;
         readonly isInvalidKeyOwnershipProof: boolean;
@@ -4005,50 +4085,25 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidConfiguration: boolean;
         readonly type: 'InvalidEquivocationProof' | 'InvalidKeyOwnershipProof' | 'DuplicateOffenceReport' | 'InvalidConfiguration';
     }
-    /** @name PalletAuthorshipUncleEntryItem (437) */
-    interface PalletAuthorshipUncleEntryItem extends Enum {
-        readonly isInclusionHeight: boolean;
-        readonly asInclusionHeight: u32;
-        readonly isUncle: boolean;
-        readonly asUncle: ITuple<[H256, Option<AccountId32>]>;
-        readonly type: 'InclusionHeight' | 'Uncle';
-    }
-    /** @name PalletAuthorshipError (438) */
-    interface PalletAuthorshipError extends Enum {
-        readonly isInvalidUncleParent: boolean;
-        readonly isUnclesAlreadySet: boolean;
-        readonly isTooManyUncles: boolean;
-        readonly isGenesisUncle: boolean;
-        readonly isTooHighUncle: boolean;
-        readonly isUncleAlreadyIncluded: boolean;
-        readonly isOldUncle: boolean;
-        readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
-    }
-    /** @name PalletBalancesBalanceLock (440) */
+    /** @name PalletBalancesBalanceLock (443) */
     interface PalletBalancesBalanceLock extends Struct {
         readonly id: U8aFixed;
         readonly amount: u128;
         readonly reasons: PalletBalancesReasons;
     }
-    /** @name PalletBalancesReasons (441) */
+    /** @name PalletBalancesReasons (444) */
     interface PalletBalancesReasons extends Enum {
         readonly isFee: boolean;
         readonly isMisc: boolean;
         readonly isAll: boolean;
         readonly type: 'Fee' | 'Misc' | 'All';
     }
-    /** @name PalletBalancesReserveData (444) */
+    /** @name PalletBalancesReserveData (447) */
     interface PalletBalancesReserveData extends Struct {
         readonly id: U8aFixed;
         readonly amount: u128;
     }
-    /** @name PalletBalancesReleases (446) */
-    interface PalletBalancesReleases extends Enum {
-        readonly isV100: boolean;
-        readonly isV200: boolean;
-        readonly type: 'V100' | 'V200';
-    }
-    /** @name PalletBalancesError (447) */
+    /** @name PalletBalancesError (449) */
     interface PalletBalancesError extends Enum {
         readonly isVestingBalance: boolean;
         readonly isLiquidityRestrictions: boolean;
@@ -4060,28 +4115,19 @@ declare module '@polkadot/types/lookup' {
         readonly isTooManyReserves: boolean;
         readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
     }
-    /** @name PalletTransactionPaymentReleases (449) */
+    /** @name PalletTransactionPaymentReleases (451) */
     interface PalletTransactionPaymentReleases extends Enum {
         readonly isV1Ancient: boolean;
         readonly isV2: boolean;
         readonly type: 'V1Ancient' | 'V2';
     }
-    /** @name PalletElectionProviderMultiPhasePhase (450) */
-    interface PalletElectionProviderMultiPhasePhase extends Enum {
-        readonly isOff: boolean;
-        readonly isSigned: boolean;
-        readonly isUnsigned: boolean;
-        readonly asUnsigned: ITuple<[bool, u32]>;
-        readonly isEmergency: boolean;
-        readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
-    }
     /** @name PalletElectionProviderMultiPhaseReadySolution (452) */
     interface PalletElectionProviderMultiPhaseReadySolution extends Struct {
         readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
         readonly score: SpNposElectionsElectionScore;
         readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
     }
-    /** @name PalletElectionProviderMultiPhaseRoundSnapshot (453) */
+    /** @name PalletElectionProviderMultiPhaseRoundSnapshot (454) */
     interface PalletElectionProviderMultiPhaseRoundSnapshot extends Struct {
         readonly voters: Vec<ITuple<[AccountId32, u64, Vec<AccountId32>]>>;
         readonly targets: Vec<AccountId32>;
@@ -4107,7 +4153,9 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidSubmissionIndex: boolean;
         readonly isCallNotAllowed: boolean;
         readonly isFallbackFailed: boolean;
-        readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed';
+        readonly isBoundNotMet: boolean;
+        readonly isTooManyWinners: boolean;
+        readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed' | 'BoundNotMet' | 'TooManyWinners';
     }
     /** @name PalletStakingStakingLedger (463) */
     interface PalletStakingStakingLedger extends Struct {
@@ -4122,30 +4170,22 @@ declare module '@polkadot/types/lookup' {
         readonly value: Compact<u128>;
         readonly era: Compact<u32>;
     }
-    /** @name PalletStakingNominations (467) */
+    /** @name PalletStakingNominations (468) */
     interface PalletStakingNominations extends Struct {
         readonly targets: Vec<AccountId32>;
         readonly submittedIn: u32;
         readonly suppressed: bool;
     }
-    /** @name PalletStakingActiveEraInfo (468) */
+    /** @name PalletStakingActiveEraInfo (469) */
     interface PalletStakingActiveEraInfo extends Struct {
         readonly index: u32;
         readonly start: Option<u64>;
     }
-    /** @name PalletStakingEraRewardPoints (470) */
+    /** @name PalletStakingEraRewardPoints (471) */
     interface PalletStakingEraRewardPoints extends Struct {
         readonly total: u32;
         readonly individual: BTreeMap<AccountId32, u32>;
     }
-    /** @name PalletStakingForcing (474) */
-    interface PalletStakingForcing extends Enum {
-        readonly isNotForcing: boolean;
-        readonly isForceNew: boolean;
-        readonly isForceNone: boolean;
-        readonly isForceAlways: boolean;
-        readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
-    }
     /** @name PalletStakingUnappliedSlash (476) */
     interface PalletStakingUnappliedSlash extends Struct {
         readonly validator: AccountId32;
@@ -4166,20 +4206,7 @@ declare module '@polkadot/types/lookup' {
         readonly slashed: u128;
         readonly paidOut: u128;
     }
-    /** @name PalletStakingReleases (482) */
-    interface PalletStakingReleases extends Enum {
-        readonly isV100Ancient: boolean;
-        readonly isV200: boolean;
-        readonly isV300: boolean;
-        readonly isV400: boolean;
-        readonly isV500: boolean;
-        readonly isV600: boolean;
-        readonly isV700: boolean;
-        readonly isV800: boolean;
-        readonly isV900: boolean;
-        readonly type: 'V100Ancient' | 'V200' | 'V300' | 'V400' | 'V500' | 'V600' | 'V700' | 'V800' | 'V900';
-    }
-    /** @name PalletStakingPalletError (483) */
+    /** @name PalletStakingPalletError (482) */
     interface PalletStakingPalletError extends Enum {
         readonly isNotController: boolean;
         readonly isNotStash: boolean;
@@ -4205,13 +4232,14 @@ declare module '@polkadot/types/lookup' {
         readonly isTooManyNominators: boolean;
         readonly isTooManyValidators: boolean;
         readonly isCommissionTooLow: boolean;
+        readonly isBoundNotMet: boolean;
         readonly isBondingRestricted: boolean;
-        readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BondingRestricted';
+        readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BoundNotMet' | 'BondingRestricted';
     }
-    /** @name SpCoreCryptoKeyTypeId (487) */
+    /** @name SpCoreCryptoKeyTypeId (486) */
     interface SpCoreCryptoKeyTypeId extends U8aFixed {
     }
-    /** @name PalletSessionError (488) */
+    /** @name PalletSessionError (487) */
     interface PalletSessionError extends Enum {
         readonly isInvalidProof: boolean;
         readonly isNoAssociatedValidatorId: boolean;
@@ -4220,7 +4248,7 @@ declare module '@polkadot/types/lookup' {
         readonly isNoAccount: boolean;
         readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
     }
-    /** @name PalletGrandpaStoredState (490) */
+    /** @name PalletGrandpaStoredState (489) */
     interface PalletGrandpaStoredState extends Enum {
         readonly isLive: boolean;
         readonly isPendingPause: boolean;
@@ -4236,14 +4264,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Live' | 'PendingPause' | 'Paused' | 'PendingResume';
     }
-    /** @name PalletGrandpaStoredPendingChange (491) */
+    /** @name PalletGrandpaStoredPendingChange (490) */
     interface PalletGrandpaStoredPendingChange extends Struct {
         readonly scheduledAt: u32;
         readonly delay: u32;
         readonly nextAuthorities: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
         readonly forced: Option<u32>;
     }
-    /** @name PalletGrandpaError (493) */
+    /** @name PalletGrandpaError (492) */
     interface PalletGrandpaError extends Enum {
         readonly isPauseFailed: boolean;
         readonly isResumeFailed: boolean;
@@ -4254,28 +4282,23 @@ declare module '@polkadot/types/lookup' {
         readonly isDuplicateOffenceReport: boolean;
         readonly type: 'PauseFailed' | 'ResumeFailed' | 'ChangePending' | 'TooSoon' | 'InvalidKeyOwnershipProof' | 'InvalidEquivocationProof' | 'DuplicateOffenceReport';
     }
-    /** @name PalletImOnlineBoundedOpaqueNetworkState (499) */
+    /** @name PalletImOnlineBoundedOpaqueNetworkState (498) */
     interface PalletImOnlineBoundedOpaqueNetworkState extends Struct {
         readonly peerId: Bytes;
         readonly externalAddresses: Vec<Bytes>;
     }
-    /** @name PalletImOnlineError (503) */
+    /** @name PalletImOnlineError (502) */
     interface PalletImOnlineError extends Enum {
         readonly isInvalidKey: boolean;
         readonly isDuplicatedHeartbeat: boolean;
         readonly type: 'InvalidKey' | 'DuplicatedHeartbeat';
     }
-    /** @name SpStakingOffenceOffenceDetails (504) */
+    /** @name SpStakingOffenceOffenceDetails (503) */
     interface SpStakingOffenceOffenceDetails extends Struct {
         readonly offender: ITuple<[AccountId32, PalletStakingExposure]>;
         readonly reporters: Vec<AccountId32>;
     }
-    /** @name PalletSudoError (507) */
-    interface PalletSudoError extends Enum {
-        readonly isRequireSudo: boolean;
-        readonly type: 'RequireSudo';
-    }
-    /** @name PalletBagsListListNode (508) */
+    /** @name PalletBagsListListNode (506) */
     interface PalletBagsListListNode extends Struct {
         readonly id: AccountId32;
         readonly prev: Option<AccountId32>;
@@ -4283,18 +4306,18 @@ declare module '@polkadot/types/lookup' {
         readonly bagUpper: u64;
         readonly score: u64;
     }
-    /** @name PalletBagsListListBag (509) */
+    /** @name PalletBagsListListBag (507) */
     interface PalletBagsListListBag extends Struct {
         readonly head: Option<AccountId32>;
         readonly tail: Option<AccountId32>;
     }
-    /** @name PalletBagsListError (510) */
+    /** @name PalletBagsListError (508) */
     interface PalletBagsListError extends Enum {
         readonly isList: boolean;
         readonly asList: PalletBagsListListListError;
         readonly type: 'List';
     }
-    /** @name PalletBagsListListListError (511) */
+    /** @name PalletBagsListListListError (509) */
     interface PalletBagsListListListError extends Enum {
         readonly isDuplicate: boolean;
         readonly isNotHeavier: boolean;
@@ -4302,13 +4325,13 @@ declare module '@polkadot/types/lookup' {
         readonly isNodeNotFound: boolean;
         readonly type: 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';
     }
-    /** @name PalletVestingReleases (514) */
+    /** @name PalletVestingReleases (512) */
     interface PalletVestingReleases extends Enum {
         readonly isV0: boolean;
         readonly isV1: boolean;
         readonly type: 'V0' | 'V1';
     }
-    /** @name PalletVestingError (515) */
+    /** @name PalletVestingError (513) */
     interface PalletVestingError extends Enum {
         readonly isNotVesting: boolean;
         readonly isAtMaxVestingSchedules: boolean;
@@ -4317,14 +4340,14 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidScheduleParams: boolean;
         readonly type: 'NotVesting' | 'AtMaxVestingSchedules' | 'AmountLow' | 'ScheduleIndexOutOfBounds' | 'InvalidScheduleParams';
     }
-    /** @name PalletMultisigMultisig (517) */
+    /** @name PalletMultisigMultisig (515) */
     interface PalletMultisigMultisig extends Struct {
         readonly when: PalletMultisigTimepoint;
         readonly deposit: u128;
         readonly depositor: AccountId32;
         readonly approvals: Vec<AccountId32>;
     }
-    /** @name PalletMultisigError (519) */
+    /** @name PalletMultisigError (517) */
     interface PalletMultisigError extends Enum {
         readonly isMinimumThreshold: boolean;
         readonly isAlreadyApproved: boolean;
@@ -4342,12 +4365,12 @@ declare module '@polkadot/types/lookup' {
         readonly isAlreadyStored: boolean;
         readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
     }
-    /** @name PalletCouncilCouncilStageUpdate (520) */
+    /** @name PalletCouncilCouncilStageUpdate (518) */
     interface PalletCouncilCouncilStageUpdate extends Struct {
         readonly stage: PalletCouncilCouncilStage;
         readonly changedAt: u32;
     }
-    /** @name PalletCouncilCouncilStage (521) */
+    /** @name PalletCouncilCouncilStage (519) */
     interface PalletCouncilCouncilStage extends Enum {
         readonly isAnnouncing: boolean;
         readonly asAnnouncing: PalletCouncilCouncilStageAnnouncing;
@@ -4357,20 +4380,20 @@ declare module '@polkadot/types/lookup' {
         readonly asIdle: PalletCouncilCouncilStageIdle;
         readonly type: 'Announcing' | 'Election' | 'Idle';
     }
-    /** @name PalletCouncilCouncilStageAnnouncing (522) */
+    /** @name PalletCouncilCouncilStageAnnouncing (520) */
     interface PalletCouncilCouncilStageAnnouncing extends Struct {
         readonly candidatesCount: u32;
         readonly endsAt: u32;
     }
-    /** @name PalletCouncilCouncilStageElection (523) */
+    /** @name PalletCouncilCouncilStageElection (521) */
     interface PalletCouncilCouncilStageElection extends Struct {
         readonly candidatesCount: u32;
     }
-    /** @name PalletCouncilCouncilStageIdle (524) */
+    /** @name PalletCouncilCouncilStageIdle (522) */
     interface PalletCouncilCouncilStageIdle extends Struct {
         readonly endsAt: u32;
     }
-    /** @name PalletCouncilCouncilMember (526) */
+    /** @name PalletCouncilCouncilMember (524) */
     interface PalletCouncilCouncilMember extends Struct {
         readonly stakingAccountId: AccountId32;
         readonly rewardAccountId: AccountId32;
@@ -4379,7 +4402,7 @@ declare module '@polkadot/types/lookup' {
         readonly lastPaymentBlock: u32;
         readonly unpaidReward: u128;
     }
-    /** @name PalletCouncilCandidate (528) */
+    /** @name PalletCouncilCandidate (526) */
     interface PalletCouncilCandidate extends Struct {
         readonly stakingAccountId: AccountId32;
         readonly rewardAccountId: AccountId32;
@@ -4388,7 +4411,7 @@ declare module '@polkadot/types/lookup' {
         readonly votePower: u128;
         readonly noteHash: Option<H256>;
     }
-    /** @name PalletCouncilError (529) */
+    /** @name PalletCouncilError (527) */
     interface PalletCouncilError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isBadOrigin: boolean;
@@ -4416,7 +4439,7 @@ declare module '@polkadot/types/lookup' {
         readonly isInsufficientBalanceForTransfer: boolean;
         readonly type: 'ArithmeticError' | 'BadOrigin' | 'CantCandidateNow' | 'CantReleaseStakeNow' | 'CandidacyStakeTooLow' | 'CantCandidateTwice' | 'ConflictingStake' | 'StakeStillNeeded' | 'NoStake' | 'InsufficientBalanceForStaking' | 'CantVoteForYourself' | 'MemberIdNotMatchAccount' | 'InvalidAccountToStakeReuse' | 'NotCandidatingNow' | 'CantWithdrawCandidacyNow' | 'NotCouncilor' | 'InsufficientFundsForFundingRequest' | 'ZeroBalanceFundRequest' | 'RepeatedFundRequestAccount' | 'EmptyFundingRequests' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'CandidateDoesNotExist' | 'InsufficientBalanceForTransfer';
     }
-    /** @name PalletReferendumReferendumStage (530) */
+    /** @name PalletReferendumReferendumStage (528) */
     interface PalletReferendumReferendumStage extends Enum {
         readonly isInactive: boolean;
         readonly isVoting: boolean;
@@ -4425,14 +4448,14 @@ declare module '@polkadot/types/lookup' {
         readonly asRevealing: PalletReferendumReferendumStageRevealing;
         readonly type: 'Inactive' | 'Voting' | 'Revealing';
     }
-    /** @name PalletReferendumReferendumStageVoting (532) */
+    /** @name PalletReferendumReferendumStageVoting (530) */
     interface PalletReferendumReferendumStageVoting extends Struct {
         readonly started: u32;
         readonly winningTargetCount: u32;
         readonly currentCycleId: u64;
         readonly endsAt: u32;
     }
-    /** @name PalletReferendumReferendumStageRevealing (533) */
+    /** @name PalletReferendumReferendumStageRevealing (531) */
     interface PalletReferendumReferendumStageRevealing extends Struct {
         readonly started: u32;
         readonly winningTargetCount: u32;
@@ -4440,14 +4463,14 @@ declare module '@polkadot/types/lookup' {
         readonly currentCycleId: u64;
         readonly endsAt: u32;
     }
-    /** @name PalletReferendumCastVote (534) */
+    /** @name PalletReferendumCastVote (532) */
     interface PalletReferendumCastVote extends Struct {
         readonly commitment: H256;
         readonly cycleId: u64;
         readonly stake: u128;
         readonly voteFor: Option<u64>;
     }
-    /** @name PalletReferendumError (535) */
+    /** @name PalletReferendumError (533) */
     interface PalletReferendumError extends Enum {
         readonly isBadOrigin: boolean;
         readonly isReferendumNotRunning: boolean;
@@ -4462,9 +4485,10 @@ declare module '@polkadot/types/lookup' {
         readonly isUnstakingVoteInSameCycle: boolean;
         readonly isSaltTooLong: boolean;
         readonly isUnstakingForbidden: boolean;
-        readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden';
+        readonly isAccountAlreadyOptedOutOfVoting: boolean;
+        readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden' | 'AccountAlreadyOptedOutOfVoting';
     }
-    /** @name PalletMembershipMembershipObject (536) */
+    /** @name PalletMembershipMembershipObject (534) */
     interface PalletMembershipMembershipObject extends Struct {
         readonly handleHash: H256;
         readonly rootAccount: AccountId32;
@@ -4472,12 +4496,12 @@ declare module '@polkadot/types/lookup' {
         readonly verified: bool;
         readonly invites: u32;
     }
-    /** @name PalletMembershipStakingAccountMemberBinding (537) */
+    /** @name PalletMembershipStakingAccountMemberBinding (535) */
     interface PalletMembershipStakingAccountMemberBinding extends Struct {
         readonly memberId: u64;
         readonly confirmed: bool;
     }
-    /** @name PalletMembershipError (538) */
+    /** @name PalletMembershipError (536) */
     interface PalletMembershipError extends Enum {
         readonly isNotEnoughBalanceToBuyMembership: boolean;
         readonly isControllerAccountRequired: boolean;
@@ -4500,9 +4524,10 @@ declare module '@polkadot/types/lookup' {
         readonly isInsufficientBalanceToCoverStake: boolean;
         readonly isGifLockExceedsCredit: boolean;
         readonly isInsufficientBalanceToGift: boolean;
-        readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift';
+        readonly isInsufficientBalanceToCoverPayment: boolean;
+        readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift' | 'InsufficientBalanceToCoverPayment';
     }
-    /** @name PalletForumCategory (539) */
+    /** @name PalletForumCategory (537) */
     interface PalletForumCategory extends Struct {
         readonly titleHash: H256;
         readonly descriptionHash: H256;
@@ -4513,14 +4538,14 @@ declare module '@polkadot/types/lookup' {
         readonly parentCategoryId: Option<u64>;
         readonly stickyThreadIds: BTreeSet<u64>;
     }
-    /** @name PalletForumThread (541) */
+    /** @name PalletForumThread (539) */
     interface PalletForumThread extends Struct {
         readonly categoryId: u64;
         readonly authorId: u64;
         readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
         readonly numberOfEditablePosts: u64;
     }
-    /** @name PalletForumPost (542) */
+    /** @name PalletForumPost (540) */
     interface PalletForumPost extends Struct {
         readonly threadId: u64;
         readonly textHash: H256;
@@ -4528,7 +4553,7 @@ declare module '@polkadot/types/lookup' {
         readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
         readonly lastEdited: u32;
     }
-    /** @name PalletForumError (543) */
+    /** @name PalletForumError (541) */
     interface PalletForumError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isOriginNotForumLead: boolean;
@@ -4559,11 +4584,11 @@ declare module '@polkadot/types/lookup' {
         readonly isMaxNumberOfStickiedThreadsExceeded: boolean;
         readonly type: 'ArithmeticError' | 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero' | 'MaxNumberOfStickiedThreadsExceeded';
     }
-    /** @name PalletConstitutionConstitutionInfo (544) */
+    /** @name PalletConstitutionConstitutionInfo (542) */
     interface PalletConstitutionConstitutionInfo extends Struct {
         readonly textHash: H256;
     }
-    /** @name PalletBountyBountyRecord (545) */
+    /** @name PalletBountyBountyRecord (543) */
     interface PalletBountyBountyRecord extends Struct {
         readonly creationParams: PalletBountyBountyParametersBoundedBTreeSet;
         readonly totalFunding: u128;
@@ -4571,7 +4596,7 @@ declare module '@polkadot/types/lookup' {
         readonly activeWorkEntryCount: u32;
         readonly hasUnpaidOracleReward: bool;
     }
-    /** @name PalletBountyBountyParametersBoundedBTreeSet (547) */
+    /** @name PalletBountyBountyParametersBoundedBTreeSet (545) */
     interface PalletBountyBountyParametersBoundedBTreeSet extends Struct {
         readonly oracle: PalletBountyBountyActor;
         readonly contractType: PalletBountyAssuranceContractTypeBoundedBTreeSet;
@@ -4581,14 +4606,14 @@ declare module '@polkadot/types/lookup' {
         readonly entrantStake: u128;
         readonly fundingType: PalletBountyFundingType;
     }
-    /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (548) */
+    /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (546) */
     interface PalletBountyAssuranceContractTypeBoundedBTreeSet extends Enum {
         readonly isOpen: boolean;
         readonly isClosed: boolean;
         readonly asClosed: BTreeSet<u64>;
         readonly type: 'Open' | 'Closed';
     }
-    /** @name PalletBountyBountyMilestone (549) */
+    /** @name PalletBountyBountyMilestone (547) */
     interface PalletBountyBountyMilestone extends Enum {
         readonly isCreated: boolean;
         readonly asCreated: {
@@ -4604,19 +4629,19 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Created' | 'BountyMaxFundingReached' | 'WorkSubmitted' | 'Terminated' | 'JudgmentSubmitted';
     }
-    /** @name PalletBountyContribution (551) */
+    /** @name PalletBountyContribution (549) */
     interface PalletBountyContribution extends Struct {
         readonly amount: u128;
         readonly funderStateBloatBondAmount: u128;
     }
-    /** @name PalletBountyEntryRecord (552) */
+    /** @name PalletBountyEntryRecord (550) */
     interface PalletBountyEntryRecord extends Struct {
         readonly memberId: u64;
         readonly stakingAccountId: AccountId32;
         readonly submittedAt: u32;
         readonly workSubmitted: bool;
     }
-    /** @name PalletBountyError (553) */
+    /** @name PalletBountyError (551) */
     interface PalletBountyError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isMinFundingAmountCannotBeGreaterThanMaxAmount: boolean;
@@ -4655,21 +4680,28 @@ declare module '@polkadot/types/lookup' {
         readonly isOracleRewardAlreadyWithdrawn: boolean;
         readonly type: 'ArithmeticError' | 'MinFundingAmountCannotBeGreaterThanMaxAmount' | 'BountyDoesntExist' | 'SwitchOracleOriginIsRoot' | 'InvalidStageUnexpectedFunding' | 'InvalidStageUnexpectedNoFundingContributed' | 'InvalidStageUnexpectedCancelled' | 'InvalidStageUnexpectedWorkSubmission' | 'InvalidStageUnexpectedJudgment' | 'InvalidStageUnexpectedSuccessfulBountyWithdrawal' | 'InvalidStageUnexpectedFailedBountyWithdrawal' | 'InsufficientBalanceForBounty' | 'NoBountyContributionFound' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'WorkEntryDoesntExist' | 'CherryLessThenMinimumAllowed' | 'CannotSubmitWorkToClosedContractBounty' | 'ClosedContractMemberListIsEmpty' | 'ClosedContractMemberListIsTooLarge' | 'ClosedContractMemberNotFound' | 'InvalidOracleMemberId' | 'InvalidStakingAccountForMember' | 'ZeroWinnerReward' | 'TotalRewardShouldBeEqualToTotalFunding' | 'EntrantStakeIsLessThanMininum' | 'FundingAmountCannotBeZero' | 'FundingPeriodCannotBeZero' | 'WinnerShouldHasWorkSubmission' | 'InvalidContributorActorSpecified' | 'InvalidOracleActorSpecified' | 'InvalidEntrantWorkerSpecified' | 'InvalidCreatorActorSpecified' | 'WorkEntryDoesntBelongToWorker' | 'OracleRewardAlreadyWithdrawn';
     }
-    /** @name PalletContentVideoRecord (555) */
+    /** @name PalletJoystreamUtilityError (552) */
+    interface PalletJoystreamUtilityError extends Enum {
+        readonly isInsufficientFundsForBudgetUpdate: boolean;
+        readonly isZeroTokensBurn: boolean;
+        readonly isInsufficientFundsForBurn: boolean;
+        readonly type: 'InsufficientFundsForBudgetUpdate' | 'ZeroTokensBurn' | 'InsufficientFundsForBurn';
+    }
+    /** @name PalletContentVideoRecord (553) */
     interface PalletContentVideoRecord extends Struct {
         readonly inChannel: u64;
         readonly nftStatus: Option<PalletContentNftTypesOwnedNft>;
         readonly dataObjects: BTreeSet<u64>;
         readonly videoStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
     }
-    /** @name PalletContentNftTypesOwnedNft (556) */
+    /** @name PalletContentNftTypesOwnedNft (554) */
     interface PalletContentNftTypesOwnedNft extends Struct {
         readonly owner: PalletContentNftTypesNftOwner;
         readonly transactionalStatus: PalletContentNftTypesTransactionalStatusRecord;
         readonly creatorRoyalty: Option<Perbill>;
         readonly openAuctionsNonce: u64;
     }
-    /** @name PalletContentNftTypesTransactionalStatusRecord (557) */
+    /** @name PalletContentNftTypesTransactionalStatusRecord (555) */
     interface PalletContentNftTypesTransactionalStatusRecord extends Enum {
         readonly isIdle: boolean;
         readonly isInitiatedOfferToMember: boolean;
@@ -4682,7 +4714,7 @@ declare module '@polkadot/types/lookup' {
         readonly asBuyNow: u128;
         readonly type: 'Idle' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction' | 'BuyNow';
     }
-    /** @name PalletContentNftTypesEnglishAuctionRecord (558) */
+    /** @name PalletContentNftTypesEnglishAuctionRecord (556) */
     interface PalletContentNftTypesEnglishAuctionRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -4693,12 +4725,12 @@ declare module '@polkadot/types/lookup' {
         readonly minBidStep: u128;
         readonly topBid: Option<PalletContentNftTypesEnglishAuctionBid>;
     }
-    /** @name PalletContentNftTypesEnglishAuctionBid (561) */
+    /** @name PalletContentNftTypesEnglishAuctionBid (559) */
     interface PalletContentNftTypesEnglishAuctionBid extends Struct {
         readonly amount: u128;
         readonly bidderId: u64;
     }
-    /** @name PalletContentNftTypesOpenAuctionRecord (562) */
+    /** @name PalletContentNftTypesOpenAuctionRecord (560) */
     interface PalletContentNftTypesOpenAuctionRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -4707,26 +4739,26 @@ declare module '@polkadot/types/lookup' {
         readonly auctionId: u64;
         readonly start: u32;
     }
-    /** @name PalletContentNftTypesNftOwner (563) */
+    /** @name PalletContentNftTypesNftOwner (561) */
     interface PalletContentNftTypesNftOwner extends Enum {
         readonly isChannelOwner: boolean;
         readonly isMember: boolean;
         readonly asMember: u64;
         readonly type: 'ChannelOwner' | 'Member';
     }
-    /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (566) */
+    /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (564) */
     interface PalletContentPermissionsCuratorGroupCuratorGroupRecord extends Struct {
         readonly curators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
         readonly active: bool;
         readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
     }
-    /** @name PalletContentNftTypesOpenAuctionBidRecord (573) */
+    /** @name PalletContentNftTypesOpenAuctionBidRecord (571) */
     interface PalletContentNftTypesOpenAuctionBidRecord extends Struct {
         readonly amount: u128;
         readonly madeAtBlock: u32;
         readonly auctionId: u64;
     }
-    /** @name PalletContentErrorsError (574) */
+    /** @name PalletContentErrorsError (572) */
     interface PalletContentErrorsError extends Enum {
         readonly isChannelStateBloatBondChanged: boolean;
         readonly isVideoStateBloatBondChanged: boolean;
@@ -4856,23 +4888,24 @@ declare module '@polkadot/types/lookup' {
         readonly isPatronageCanOnlyBeClaimedForMemberOwnedChannels: boolean;
         readonly isChannelTransfersBlockedDuringRevenueSplits: boolean;
         readonly isChannelTransfersBlockedDuringTokenSales: boolean;
-        readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales';
+        readonly isChannelTransfersBlockedDuringActiveAmm: boolean;
+        readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales' | 'ChannelTransfersBlockedDuringActiveAmm';
     }
-    /** @name PalletStorageBagRecord (575) */
+    /** @name PalletStorageBagRecord (573) */
     interface PalletStorageBagRecord extends Struct {
         readonly storedBy: BTreeSet<u64>;
         readonly distributedBy: BTreeSet<PalletStorageDistributionBucketIdRecord>;
         readonly objectsTotalSize: u64;
         readonly objectsNumber: u64;
     }
-    /** @name PalletStorageStorageBucketRecord (578) */
+    /** @name PalletStorageStorageBucketRecord (576) */
     interface PalletStorageStorageBucketRecord extends Struct {
         readonly operatorStatus: PalletStorageStorageBucketOperatorStatus;
         readonly acceptingNewBags: bool;
         readonly voucher: PalletStorageVoucher;
         readonly assignedBags: u64;
     }
-    /** @name PalletStorageStorageBucketOperatorStatus (579) */
+    /** @name PalletStorageStorageBucketOperatorStatus (577) */
     interface PalletStorageStorageBucketOperatorStatus extends Enum {
         readonly isMissing: boolean;
         readonly isInvitedStorageWorker: boolean;
@@ -4881,23 +4914,23 @@ declare module '@polkadot/types/lookup' {
         readonly asStorageWorker: ITuple<[u64, AccountId32]>;
         readonly type: 'Missing' | 'InvitedStorageWorker' | 'StorageWorker';
     }
-    /** @name PalletStorageDynamicBagCreationPolicy (581) */
+    /** @name PalletStorageDynamicBagCreationPolicy (579) */
     interface PalletStorageDynamicBagCreationPolicy extends Struct {
         readonly numberOfStorageBuckets: u32;
         readonly families: BTreeMap<u64, u32>;
     }
-    /** @name PalletStorageDataObject (584) */
+    /** @name PalletStorageDataObject (582) */
     interface PalletStorageDataObject extends Struct {
         readonly accepted: bool;
         readonly stateBloatBond: PalletCommonBloatBondRepayableBloatBond;
         readonly size_: u64;
         readonly ipfsContentId: Bytes;
     }
-    /** @name PalletStorageDistributionBucketFamilyRecord (585) */
+    /** @name PalletStorageDistributionBucketFamilyRecord (583) */
     interface PalletStorageDistributionBucketFamilyRecord extends Struct {
         readonly nextDistributionBucketIndex: u64;
     }
-    /** @name PalletStorageDistributionBucketRecord (586) */
+    /** @name PalletStorageDistributionBucketRecord (584) */
     interface PalletStorageDistributionBucketRecord extends Struct {
         readonly acceptingNewBags: bool;
         readonly distributing: bool;
@@ -4905,7 +4938,7 @@ declare module '@polkadot/types/lookup' {
         readonly operators: BTreeSet<u64>;
         readonly assignedBags: u64;
     }
-    /** @name PalletStorageError (589) */
+    /** @name PalletStorageError (587) */
     interface PalletStorageError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isInvalidCidLength: boolean;
@@ -4974,7 +5007,7 @@ declare module '@polkadot/types/lookup' {
         readonly isCallDisabled: boolean;
         readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'MaxNumberOfOperatorsPerDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints' | 'CallDisabled';
     }
-    /** @name PalletProjectTokenAccountData (590) */
+    /** @name PalletProjectTokenAccountData (588) */
     interface PalletProjectTokenAccountData extends Struct {
         readonly vestingSchedules: BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>;
         readonly amount: u128;
@@ -4983,12 +5016,12 @@ declare module '@polkadot/types/lookup' {
         readonly nextVestingTransferId: u64;
         readonly lastSaleTotalPurchasedAmount: Option<ITuple<[u32, u128]>>;
     }
-    /** @name PalletProjectTokenStakingStatus (591) */
+    /** @name PalletProjectTokenStakingStatus (589) */
     interface PalletProjectTokenStakingStatus extends Struct {
         readonly splitId: u32;
         readonly amount: u128;
     }
-    /** @name PalletProjectTokenVestingSchedule (593) */
+    /** @name PalletProjectTokenVestingSchedule (591) */
     interface PalletProjectTokenVestingSchedule extends Struct {
         readonly linearVestingStartBlock: u32;
         readonly linearVestingDuration: u32;
@@ -4996,56 +5029,56 @@ declare module '@polkadot/types/lookup' {
         readonly postCliffTotalAmount: u128;
         readonly burnedAmount: u128;
     }
-    /** @name PalletProjectTokenTokenData (600) */
+    /** @name PalletProjectTokenTokenData (598) */
     interface PalletProjectTokenTokenData extends Struct {
         readonly totalSupply: u128;
         readonly tokensIssued: u128;
         readonly nextSaleId: u32;
         readonly sale: Option<PalletProjectTokenTokenSale>;
         readonly transferPolicy: PalletProjectTokenTransferPolicy;
-        readonly symbol: H256;
         readonly patronageInfo: PalletProjectTokenPatronageData;
         readonly accountsNumber: u64;
         readonly revenueSplitRate: Permill;
         readonly revenueSplit: PalletProjectTokenRevenueSplitState;
         readonly nextRevenueSplitId: u32;
+        readonly ammCurve: Option<PalletProjectTokenAmmCurve>;
     }
-    /** @name PalletProjectTokenRevenueSplitState (601) */
+    /** @name PalletProjectTokenRevenueSplitState (599) */
     interface PalletProjectTokenRevenueSplitState extends Enum {
         readonly isInactive: boolean;
         readonly isActive: boolean;
         readonly asActive: PalletProjectTokenRevenueSplitInfo;
         readonly type: 'Inactive' | 'Active';
     }
-    /** @name PalletProjectTokenRevenueSplitInfo (602) */
+    /** @name PalletProjectTokenRevenueSplitInfo (600) */
     interface PalletProjectTokenRevenueSplitInfo extends Struct {
         readonly allocation: u128;
         readonly timeline: PalletProjectTokenTimeline;
         readonly dividendsClaimed: u128;
     }
-    /** @name PalletProjectTokenTimeline (603) */
+    /** @name PalletProjectTokenTimeline (601) */
     interface PalletProjectTokenTimeline extends Struct {
         readonly start: u32;
         readonly duration: u32;
     }
-    /** @name PalletProjectTokenPatronageData (605) */
+    /** @name PalletProjectTokenPatronageData (603) */
     interface PalletProjectTokenPatronageData extends Struct {
         readonly rate: Perquintill;
         readonly unclaimedPatronageTallyAmount: u128;
         readonly lastUnclaimedPatronageTallyBlock: u32;
     }
-    /** @name PalletProjectTokenErrorsError (607) */
+    /** @name PalletProjectTokenErrorsError (606) */
     interface PalletProjectTokenErrorsError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isInsufficientTransferrableBalance: boolean;
         readonly isTokenDoesNotExist: boolean;
         readonly isAccountInformationDoesNotExist: boolean;
+        readonly isTransferDestinationMemberDoesNotExist: boolean;
         readonly isMerkleProofVerificationFailure: boolean;
         readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
         readonly isTokenSymbolAlreadyInUse: boolean;
         readonly isInitialAllocationToNonExistingMember: boolean;
         readonly isAccountAlreadyExists: boolean;
-        readonly isTransferDestinationMemberDoesNotExist: boolean;
         readonly isTokenIssuanceNotInIdleState: boolean;
         readonly isInsufficientJoyBalance: boolean;
         readonly isJoyTransferSubjectToDusting: boolean;
@@ -5070,6 +5103,7 @@ declare module '@polkadot/types/lookup' {
         readonly isSaleCapPerMemberIsZero: boolean;
         readonly isSaleUnitPriceIsZero: boolean;
         readonly isSalePurchaseAmountIsZero: boolean;
+        readonly isCannotInitSaleIfAmmIsActive: boolean;
         readonly isRevenueSplitTimeToStartTooShort: boolean;
         readonly isRevenueSplitDurationTooShort: boolean;
         readonly isRevenueSplitAlreadyActiveForToken: boolean;
@@ -5085,9 +5119,15 @@ declare module '@polkadot/types/lookup' {
         readonly isRevenueSplitRateIsZero: boolean;
         readonly isBurnAmountIsZero: boolean;
         readonly isBurnAmountGreaterThanAccountTokensAmount: boolean;
-        readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TransferDestinationMemberDoesNotExist' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount';
-    }
-    /** @name PalletProposalsEngineProposal (608) */
+        readonly isNotInAmmState: boolean;
+        readonly isInvalidCurveParameters: boolean;
+        readonly isDeadlineExpired: boolean;
+        readonly isSlippageToleranceExceeded: boolean;
+        readonly isInsufficientTokenBalance: boolean;
+        readonly isOutstandingAmmProvidedSupplyTooLarge: boolean;
+        readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'TransferDestinationMemberDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'CannotInitSaleIfAmmIsActive' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount' | 'NotInAmmState' | 'InvalidCurveParameters' | 'DeadlineExpired' | 'SlippageToleranceExceeded' | 'InsufficientTokenBalance' | 'OutstandingAmmProvidedSupplyTooLarge';
+    }
+    /** @name PalletProposalsEngineProposal (607) */
     interface PalletProposalsEngineProposal extends Struct {
         readonly parameters: PalletProposalsEngineProposalParameters;
         readonly proposerId: u64;
@@ -5098,7 +5138,7 @@ declare module '@polkadot/types/lookup' {
         readonly nrOfCouncilConfirmations: u32;
         readonly stakingAccountId: Option<AccountId32>;
     }
-    /** @name PalletProposalsEngineProposalParameters (609) */
+    /** @name PalletProposalsEngineProposalParameters (608) */
     interface PalletProposalsEngineProposalParameters extends Struct {
         readonly votingPeriod: u32;
         readonly gracePeriod: u32;
@@ -5109,14 +5149,14 @@ declare module '@polkadot/types/lookup' {
         readonly requiredStake: Option<u128>;
         readonly constitutionality: u32;
     }
-    /** @name PalletProposalsEngineVotingResults (610) */
+    /** @name PalletProposalsEngineVotingResults (609) */
     interface PalletProposalsEngineVotingResults extends Struct {
         readonly abstentions: u32;
         readonly approvals: u32;
         readonly rejections: u32;
         readonly slashes: u32;
     }
-    /** @name PalletProposalsEngineError (613) */
+    /** @name PalletProposalsEngineError (612) */
     interface PalletProposalsEngineError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isEmptyTitleProvided: boolean;
@@ -5143,26 +5183,26 @@ declare module '@polkadot/types/lookup' {
         readonly isMaxDispatchableCallCodeSizeExceeded: boolean;
         readonly type: 'ArithmeticError' | 'EmptyTitleProvided' | 'EmptyDescriptionProvided' | 'TitleIsTooLong' | 'DescriptionIsTooLong' | 'ProposalNotFound' | 'ProposalFinalized' | 'AlreadyVoted' | 'NotAuthor' | 'MaxActiveProposalNumberExceeded' | 'EmptyStake' | 'StakeShouldBeEmpty' | 'StakeDiffersFromRequired' | 'InvalidParameterApprovalThreshold' | 'InvalidParameterSlashingThreshold' | 'RequireRootOrigin' | 'ProposalHasVotes' | 'ZeroExactExecutionBlock' | 'InvalidExactExecutionBlock' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'InvalidStakingAccountForMember' | 'MaxDispatchableCallCodeSizeExceeded';
     }
-    /** @name PalletProposalsDiscussionDiscussionThread (614) */
+    /** @name PalletProposalsDiscussionDiscussionThread (613) */
     interface PalletProposalsDiscussionDiscussionThread extends Struct {
         readonly activatedAt: u32;
         readonly authorId: u64;
         readonly mode: PalletProposalsDiscussionThreadModeBoundedBTreeSet;
     }
-    /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (616) */
+    /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (615) */
     interface PalletProposalsDiscussionThreadModeBoundedBTreeSet extends Enum {
         readonly isOpen: boolean;
         readonly isClosed: boolean;
         readonly asClosed: BTreeSet<u64>;
         readonly type: 'Open' | 'Closed';
     }
-    /** @name PalletProposalsDiscussionDiscussionPost (617) */
+    /** @name PalletProposalsDiscussionDiscussionPost (616) */
     interface PalletProposalsDiscussionDiscussionPost extends Struct {
         readonly authorId: u64;
         readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
         readonly lastEdited: u32;
     }
-    /** @name PalletProposalsDiscussionError (618) */
+    /** @name PalletProposalsDiscussionError (617) */
     interface PalletProposalsDiscussionError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isThreadDoesntExist: boolean;
@@ -5176,7 +5216,7 @@ declare module '@polkadot/types/lookup' {
         readonly isCannotDeletePost: boolean;
         readonly type: 'ArithmeticError' | 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'WhitelistedMemberDoesNotExist' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
     }
-    /** @name PalletProposalsCodexError (619) */
+    /** @name PalletProposalsCodexError (618) */
     interface PalletProposalsCodexError extends Enum {
         readonly isSignalProposalIsEmpty: boolean;
         readonly isRuntimeProposalIsEmpty: boolean;
@@ -5206,7 +5246,7 @@ declare module '@polkadot/types/lookup' {
         readonly isArithmeticError: boolean;
         readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId' | 'ArithmeticError';
     }
-    /** @name PalletWorkingGroupOpening (620) */
+    /** @name PalletWorkingGroupOpening (619) */
     interface PalletWorkingGroupOpening extends Struct {
         readonly openingType: PalletWorkingGroupOpeningType;
         readonly created: u32;
@@ -5215,7 +5255,7 @@ declare module '@polkadot/types/lookup' {
         readonly rewardPerBlock: Option<u128>;
         readonly creationStake: u128;
     }
-    /** @name PalletWorkingGroupJobApplication (621) */
+    /** @name PalletWorkingGroupJobApplication (620) */
     interface PalletWorkingGroupJobApplication extends Struct {
         readonly roleAccountId: AccountId32;
         readonly rewardAccountId: AccountId32;
@@ -5224,7 +5264,7 @@ declare module '@polkadot/types/lookup' {
         readonly descriptionHash: H256;
         readonly openingId: u64;
     }
-    /** @name PalletWorkingGroupGroupWorker (622) */
+    /** @name PalletWorkingGroupGroupWorker (621) */
     interface PalletWorkingGroupGroupWorker extends Struct {
         readonly memberId: u64;
         readonly roleAccountId: AccountId32;
@@ -5236,7 +5276,7 @@ declare module '@polkadot/types/lookup' {
         readonly missedReward: Option<u128>;
         readonly createdAt: u32;
     }
-    /** @name PalletWorkingGroupErrorsError (623) */
+    /** @name PalletWorkingGroupErrorsError (622) */
     interface PalletWorkingGroupErrorsError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isStakeBalanceCannotBeZero: boolean;
@@ -5272,7 +5312,7 @@ declare module '@polkadot/types/lookup' {
         readonly isInsufficientBalanceForTransfer: boolean;
         readonly type: 'ArithmeticError' | 'StakeBalanceCannotBeZero' | 'OpeningDoesNotExist' | 'CannotHireMultipleLeaders' | 'WorkerApplicationDoesNotExist' | 'MaxActiveWorkerNumberExceeded' | 'SuccessfulWorkerApplicationDoesNotExist' | 'CannotHireLeaderWhenLeaderExists' | 'IsNotLeadAccount' | 'CurrentLeadNotSet' | 'WorkerDoesNotExist' | 'InvalidMemberOrigin' | 'SignerIsNotWorkerRoleAccount' | 'BelowMinimumStakes' | 'InsufficientBalanceToCoverStake' | 'ApplicationStakeDoesntMatchOpening' | 'OriginIsNotApplicant' | 'WorkerIsLeaving' | 'CannotRewardWithZero' | 'InvalidStakingAccountForMember' | 'ConflictStakesOnAccount' | 'WorkerHasNoReward' | 'UnstakingPeriodLessThanMinimum' | 'CannotSpendZero' | 'InsufficientBudgetForSpending' | 'NoApplicationsProvided' | 'CannotDecreaseStakeDeltaGreaterThanStake' | 'ApplicationsNotForOpening' | 'WorkerStorageValueTooLong' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'InsufficientBalanceForTransfer';
     }
-    /** @name SpRuntimeMultiSignature (633) */
+    /** @name SpRuntimeMultiSignature (632) */
     interface SpRuntimeMultiSignature extends Enum {
         readonly isEd25519: boolean;
         readonly asEd25519: SpCoreEd25519Signature;
@@ -5282,25 +5322,25 @@ declare module '@polkadot/types/lookup' {
         readonly asEcdsa: SpCoreEcdsaSignature;
         readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
     }
-    /** @name SpCoreEcdsaSignature (634) */
+    /** @name SpCoreEcdsaSignature (633) */
     interface SpCoreEcdsaSignature extends U8aFixed {
     }
-    /** @name FrameSystemExtensionsCheckNonZeroSender (637) */
+    /** @name FrameSystemExtensionsCheckNonZeroSender (636) */
     type FrameSystemExtensionsCheckNonZeroSender = Null;
-    /** @name FrameSystemExtensionsCheckSpecVersion (638) */
+    /** @name FrameSystemExtensionsCheckSpecVersion (637) */
     type FrameSystemExtensionsCheckSpecVersion = Null;
-    /** @name FrameSystemExtensionsCheckTxVersion (639) */
+    /** @name FrameSystemExtensionsCheckTxVersion (638) */
     type FrameSystemExtensionsCheckTxVersion = Null;
-    /** @name FrameSystemExtensionsCheckGenesis (640) */
+    /** @name FrameSystemExtensionsCheckGenesis (639) */
     type FrameSystemExtensionsCheckGenesis = Null;
-    /** @name FrameSystemExtensionsCheckNonce (643) */
+    /** @name FrameSystemExtensionsCheckNonce (642) */
     interface FrameSystemExtensionsCheckNonce extends Compact<u32> {
     }
-    /** @name FrameSystemExtensionsCheckWeight (644) */
+    /** @name FrameSystemExtensionsCheckWeight (643) */
     type FrameSystemExtensionsCheckWeight = Null;
-    /** @name PalletTransactionPaymentChargeTransactionPayment (645) */
+    /** @name PalletTransactionPaymentChargeTransactionPayment (644) */
     interface PalletTransactionPaymentChargeTransactionPayment extends Compact<u128> {
     }
-    /** @name JoystreamNodeRuntimeRuntime (646) */
+    /** @name JoystreamNodeRuntimeRuntime (645) */
     type JoystreamNodeRuntimeRuntime = Null;
 }
diff --git a/node_modules/@joystream/types/lib/cjs/augment/lookup.js b/node_modules/@joystream/types/lib/cjs/augment/lookup.js
index b6fcc72..b8eae44 100644
--- a/node_modules/@joystream/types/lib/cjs/augment/lookup.js
+++ b/node_modules/@joystream/types/lib/cjs/augment/lookup.js
@@ -24,21 +24,28 @@ exports.default = {
         feeFrozen: 'u128'
     },
     /**
-     * Lookup7: frame_support::weights::PerDispatchClass<T>
+     * Lookup7: frame_support::dispatch::PerDispatchClass<sp_weights::weight_v2::Weight>
      **/
-    FrameSupportWeightsPerDispatchClassU64: {
-        normal: 'u64',
-        operational: 'u64',
-        mandatory: 'u64'
+    FrameSupportDispatchPerDispatchClassWeight: {
+        normal: 'SpWeightsWeightV2Weight',
+        operational: 'SpWeightsWeightV2Weight',
+        mandatory: 'SpWeightsWeightV2Weight'
     },
     /**
-     * Lookup11: sp_runtime::generic::digest::Digest
+     * Lookup8: sp_weights::weight_v2::Weight
+     **/
+    SpWeightsWeightV2Weight: {
+        refTime: 'Compact<u64>',
+        proofSize: 'Compact<u64>'
+    },
+    /**
+     * Lookup13: sp_runtime::generic::digest::Digest
      **/
     SpRuntimeDigest: {
         logs: 'Vec<SpRuntimeDigestDigestItem>'
     },
     /**
-     * Lookup13: sp_runtime::generic::digest::DigestItem
+     * Lookup15: sp_runtime::generic::digest::DigestItem
      **/
     SpRuntimeDigestDigestItem: {
         _enum: {
@@ -54,7 +61,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup16: frame_system::EventRecord<joystream_node_runtime::Event, primitive_types::H256>
+     * Lookup18: frame_system::EventRecord<joystream_node_runtime::RuntimeEvent, primitive_types::H256>
      **/
     FrameSystemEventRecord: {
         phase: 'FrameSystemPhase',
@@ -62,16 +69,16 @@ exports.default = {
         topics: 'Vec<H256>'
     },
     /**
-     * Lookup18: frame_system::pallet::Event<T>
+     * Lookup20: frame_system::pallet::Event<T>
      **/
     FrameSystemEvent: {
         _enum: {
             ExtrinsicSuccess: {
-                dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+                dispatchInfo: 'FrameSupportDispatchDispatchInfo',
             },
             ExtrinsicFailed: {
                 dispatchError: 'SpRuntimeDispatchError',
-                dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+                dispatchInfo: 'FrameSupportDispatchDispatchInfo',
             },
             CodeUpdated: 'Null',
             NewAccount: {
@@ -90,27 +97,27 @@ exports.default = {
         }
     },
     /**
-     * Lookup19: frame_support::weights::DispatchInfo
+     * Lookup21: frame_support::dispatch::DispatchInfo
      **/
-    FrameSupportWeightsDispatchInfo: {
-        weight: 'u64',
-        class: 'FrameSupportWeightsDispatchClass',
-        paysFee: 'FrameSupportWeightsPays'
+    FrameSupportDispatchDispatchInfo: {
+        weight: 'SpWeightsWeightV2Weight',
+        class: 'FrameSupportDispatchDispatchClass',
+        paysFee: 'FrameSupportDispatchPays'
     },
     /**
-     * Lookup20: frame_support::weights::DispatchClass
+     * Lookup22: frame_support::dispatch::DispatchClass
      **/
-    FrameSupportWeightsDispatchClass: {
+    FrameSupportDispatchDispatchClass: {
         _enum: ['Normal', 'Operational', 'Mandatory']
     },
     /**
-     * Lookup21: frame_support::weights::Pays
+     * Lookup23: frame_support::dispatch::Pays
      **/
-    FrameSupportWeightsPays: {
+    FrameSupportDispatchPays: {
         _enum: ['Yes', 'No']
     },
     /**
-     * Lookup22: sp_runtime::DispatchError
+     * Lookup24: sp_runtime::DispatchError
      **/
     SpRuntimeDispatchError: {
         _enum: {
@@ -122,37 +129,40 @@ exports.default = {
             NoProviders: 'Null',
             TooManyConsumers: 'Null',
             Token: 'SpRuntimeTokenError',
-            Arithmetic: 'SpRuntimeArithmeticError',
-            Transactional: 'SpRuntimeTransactionalError'
+            Arithmetic: 'SpArithmeticArithmeticError',
+            Transactional: 'SpRuntimeTransactionalError',
+            Exhausted: 'Null',
+            Corruption: 'Null',
+            Unavailable: 'Null'
         }
     },
     /**
-     * Lookup23: sp_runtime::ModuleError
+     * Lookup25: sp_runtime::ModuleError
      **/
     SpRuntimeModuleError: {
         index: 'u8',
         error: '[u8;4]'
     },
     /**
-     * Lookup24: sp_runtime::TokenError
+     * Lookup26: sp_runtime::TokenError
      **/
     SpRuntimeTokenError: {
         _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', 'Unsupported']
     },
     /**
-     * Lookup25: sp_runtime::ArithmeticError
+     * Lookup27: sp_arithmetic::ArithmeticError
      **/
-    SpRuntimeArithmeticError: {
+    SpArithmeticArithmeticError: {
         _enum: ['Underflow', 'Overflow', 'DivisionByZero']
     },
     /**
-     * Lookup26: sp_runtime::TransactionalError
+     * Lookup28: sp_runtime::TransactionalError
      **/
     SpRuntimeTransactionalError: {
         _enum: ['LimitReached', 'NoLayer']
     },
     /**
-     * Lookup27: pallet_utility::pallet::Event
+     * Lookup29: pallet_utility::pallet::Event
      **/
     PalletUtilityEvent: {
         _enum: {
@@ -172,7 +182,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup30: pallet_balances::pallet::Event<T, I>
+     * Lookup32: pallet_balances::pallet::Event<T, I>
      **/
     PalletBalancesEvent: {
         _enum: {
@@ -223,23 +233,38 @@ exports.default = {
         }
     },
     /**
-     * Lookup31: frame_support::traits::tokens::misc::BalanceStatus
+     * Lookup33: frame_support::traits::tokens::misc::BalanceStatus
      **/
     FrameSupportTokensMiscBalanceStatus: {
         _enum: ['Free', 'Reserved']
     },
     /**
-     * Lookup32: pallet_election_provider_multi_phase::pallet::Event<T>
+     * Lookup34: pallet_transaction_payment::pallet::Event<T>
+     **/
+    PalletTransactionPaymentEvent: {
+        _enum: {
+            TransactionFeePaid: {
+                who: 'AccountId32',
+                actualFee: 'u128',
+                tip: 'u128'
+            }
+        }
+    },
+    /**
+     * Lookup35: pallet_election_provider_multi_phase::pallet::Event<T>
      **/
     PalletElectionProviderMultiPhaseEvent: {
         _enum: {
             SolutionStored: {
-                electionCompute: 'PalletElectionProviderMultiPhaseElectionCompute',
+                compute: 'PalletElectionProviderMultiPhaseElectionCompute',
+                origin: 'Option<AccountId32>',
                 prevEjected: 'bool',
             },
             ElectionFinalized: {
-                electionCompute: 'Option<PalletElectionProviderMultiPhaseElectionCompute>',
+                compute: 'PalletElectionProviderMultiPhaseElectionCompute',
+                score: 'SpNposElectionsElectionScore',
             },
+            ElectionFailed: 'Null',
             Rewarded: {
                 account: 'AccountId32',
                 value: 'u128',
@@ -248,49 +273,113 @@ exports.default = {
                 account: 'AccountId32',
                 value: 'u128',
             },
-            SignedPhaseStarted: {
-                round: 'u32',
-            },
-            UnsignedPhaseStarted: {
+            PhaseTransitioned: {
+                from: 'PalletElectionProviderMultiPhasePhase',
+                to: 'PalletElectionProviderMultiPhasePhase',
                 round: 'u32'
             }
         }
     },
     /**
-     * Lookup33: pallet_election_provider_multi_phase::ElectionCompute
+     * Lookup36: pallet_election_provider_multi_phase::ElectionCompute
      **/
     PalletElectionProviderMultiPhaseElectionCompute: {
         _enum: ['OnChain', 'Signed', 'Unsigned', 'Fallback', 'Emergency']
     },
     /**
-     * Lookup36: pallet_staking::pallet::pallet::Event<T>
+     * Lookup39: sp_npos_elections::ElectionScore
+     **/
+    SpNposElectionsElectionScore: {
+        minimalStake: 'u128',
+        sumStake: 'u128',
+        sumStakeSquared: 'u128'
+    },
+    /**
+     * Lookup40: pallet_election_provider_multi_phase::Phase<Bn>
+     **/
+    PalletElectionProviderMultiPhasePhase: {
+        _enum: {
+            Off: 'Null',
+            Signed: 'Null',
+            Unsigned: '(bool,u32)',
+            Emergency: 'Null'
+        }
+    },
+    /**
+     * Lookup42: pallet_staking::pallet::pallet::Event<T>
      **/
     PalletStakingPalletEvent: {
         _enum: {
-            EraPaid: '(u32,u128,u128)',
-            Rewarded: '(AccountId32,u128)',
-            Slashed: '(AccountId32,u128)',
-            OldSlashingReportDiscarded: 'u32',
+            EraPaid: {
+                eraIndex: 'u32',
+                validatorPayout: 'u128',
+                remainder: 'u128',
+            },
+            Rewarded: {
+                stash: 'AccountId32',
+                amount: 'u128',
+            },
+            Slashed: {
+                staker: 'AccountId32',
+                amount: 'u128',
+            },
+            SlashReported: {
+                validator: 'AccountId32',
+                fraction: 'Perbill',
+                slashEra: 'u32',
+            },
+            OldSlashingReportDiscarded: {
+                sessionIndex: 'u32',
+            },
             StakersElected: 'Null',
-            Bonded: '(AccountId32,u128)',
-            Unbonded: '(AccountId32,u128)',
-            Withdrawn: '(AccountId32,u128)',
-            Kicked: '(AccountId32,AccountId32)',
+            Bonded: {
+                stash: 'AccountId32',
+                amount: 'u128',
+            },
+            Unbonded: {
+                stash: 'AccountId32',
+                amount: 'u128',
+            },
+            Withdrawn: {
+                stash: 'AccountId32',
+                amount: 'u128',
+            },
+            Kicked: {
+                nominator: 'AccountId32',
+                stash: 'AccountId32',
+            },
             StakingElectionFailed: 'Null',
-            Chilled: 'AccountId32',
-            PayoutStarted: '(u32,AccountId32)',
-            ValidatorPrefsSet: '(AccountId32,PalletStakingValidatorPrefs)'
+            Chilled: {
+                stash: 'AccountId32',
+            },
+            PayoutStarted: {
+                eraIndex: 'u32',
+                validatorStash: 'AccountId32',
+            },
+            ValidatorPrefsSet: {
+                stash: 'AccountId32',
+                prefs: 'PalletStakingValidatorPrefs',
+            },
+            ForceEra: {
+                mode: 'PalletStakingForcing'
+            }
         }
     },
     /**
-     * Lookup37: pallet_staking::ValidatorPrefs
+     * Lookup44: pallet_staking::ValidatorPrefs
      **/
     PalletStakingValidatorPrefs: {
         commission: 'Compact<Perbill>',
         blocked: 'bool'
     },
     /**
-     * Lookup40: pallet_session::pallet::Event
+     * Lookup46: pallet_staking::Forcing
+     **/
+    PalletStakingForcing: {
+        _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
+    },
+    /**
+     * Lookup47: pallet_session::pallet::Event
      **/
     PalletSessionEvent: {
         _enum: {
@@ -300,7 +389,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup41: pallet_grandpa::pallet::Event
+     * Lookup48: pallet_grandpa::pallet::Event
      **/
     PalletGrandpaEvent: {
         _enum: {
@@ -312,15 +401,15 @@ exports.default = {
         }
     },
     /**
-     * Lookup44: sp_finality_grandpa::app::Public
+     * Lookup51: sp_finality_grandpa::app::Public
      **/
     SpFinalityGrandpaAppPublic: 'SpCoreEd25519Public',
     /**
-     * Lookup45: sp_core::ed25519::Public
+     * Lookup52: sp_core::ed25519::Public
      **/
     SpCoreEd25519Public: '[u8;32]',
     /**
-     * Lookup46: pallet_im_online::pallet::Event<T>
+     * Lookup53: pallet_im_online::pallet::Event<T>
      **/
     PalletImOnlineEvent: {
         _enum: {
@@ -334,15 +423,15 @@ exports.default = {
         }
     },
     /**
-     * Lookup47: pallet_im_online::sr25519::app_sr25519::Public
+     * Lookup54: pallet_im_online::sr25519::app_sr25519::Public
      **/
     PalletImOnlineSr25519AppSr25519Public: 'SpCoreSr25519Public',
     /**
-     * Lookup48: sp_core::sr25519::Public
+     * Lookup55: sp_core::sr25519::Public
      **/
     SpCoreSr25519Public: '[u8;32]',
     /**
-     * Lookup51: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
+     * Lookup58: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingExposure: {
         total: 'Compact<u128>',
@@ -350,14 +439,14 @@ exports.default = {
         others: 'Vec<PalletStakingIndividualExposure>'
     },
     /**
-     * Lookup54: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
+     * Lookup61: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingIndividualExposure: {
         who: 'AccountId32',
         value: 'Compact<u128>'
     },
     /**
-     * Lookup55: pallet_offences::pallet::Event
+     * Lookup62: pallet_offences::pallet::Event
      **/
     PalletOffencesEvent: {
         _enum: {
@@ -368,23 +457,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup57: pallet_sudo::pallet::Event<T>
-     **/
-    PalletSudoEvent: {
-        _enum: {
-            Sudid: {
-                sudoResult: 'Result<Null, SpRuntimeDispatchError>',
-            },
-            KeyChanged: {
-                oldSudoer: 'Option<AccountId32>',
-            },
-            SudoAsDone: {
-                sudoResult: 'Result<Null, SpRuntimeDispatchError>'
-            }
-        }
-    },
-    /**
-     * Lookup59: pallet_bags_list::pallet::Event<T, I>
+     * Lookup64: pallet_bags_list::pallet::Event<T, I>
      **/
     PalletBagsListEvent: {
         _enum: {
@@ -400,7 +473,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup60: pallet_vesting::pallet::Event<T>
+     * Lookup65: pallet_vesting::pallet::Event<T>
      **/
     PalletVestingEvent: {
         _enum: {
@@ -414,7 +487,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup61: pallet_multisig::pallet::Event<T>
+     * Lookup66: pallet_multisig::pallet::Event<T>
      **/
     PalletMultisigEvent: {
         _enum: {
@@ -445,14 +518,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+     * Lookup67: pallet_multisig::Timepoint<BlockNumber>
      **/
     PalletMultisigTimepoint: {
         height: 'u32',
         index: 'u32'
     },
     /**
-     * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     * Lookup68: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletCouncilRawEvent: {
         _enum: {
@@ -478,7 +551,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     * Lookup70: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
      **/
     PalletReferendumRawEvent: {
         _enum: {
@@ -488,26 +561,27 @@ exports.default = {
             ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
             VoteCast: '(AccountId32,H256,u128)',
             VoteRevealed: '(AccountId32,u64,Bytes)',
-            StakeReleased: 'AccountId32'
+            StakeReleased: 'AccountId32',
+            AccountOptedOutOfVoting: 'AccountId32'
         }
     },
     /**
-     * Lookup66: pallet_referendum::Instance1
+     * Lookup71: pallet_referendum::Instance1
      **/
     PalletReferendumInstance1: 'Null',
     /**
-     * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
+     * Lookup73: pallet_referendum::OptionResult<MemberId, VotePower>
      **/
     PalletReferendumOptionResult: {
         optionId: 'u64',
         votePower: 'u128'
     },
     /**
-     * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     * Lookup74: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletMembershipRawEvent: {
         _enum: {
-            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters)',
+            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters,u128)',
             MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
             MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
             MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
@@ -522,12 +596,12 @@ exports.default = {
             StakingAccountAdded: '(AccountId32,u64)',
             StakingAccountRemoved: '(AccountId32,u64)',
             StakingAccountConfirmed: '(AccountId32,u64)',
-            MemberRemarked: '(u64,Bytes)',
+            MemberRemarked: '(u64,Bytes,Option<(AccountId32,u128)>)',
             MemberCreated: '(u64,PalletMembershipCreateMemberParameters,u32)'
         }
     },
     /**
-     * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup75: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipBuyMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -537,7 +611,7 @@ exports.default = {
         referrerId: 'Option<u64>'
     },
     /**
-     * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup78: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipInviteMembershipParameters: {
         invitingMemberId: 'u64',
@@ -547,7 +621,7 @@ exports.default = {
         metadata: 'Bytes'
     },
     /**
-     * Lookup74: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+     * Lookup79: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
      **/
     PalletMembershipCreateMemberParameters: {
         rootAccount: 'AccountId32',
@@ -557,7 +631,7 @@ exports.default = {
         isFoundingMember: 'bool'
     },
     /**
-     * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup80: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletMembershipGiftMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -570,7 +644,7 @@ exports.default = {
         applyRootAccountInvitationLock: 'Option<u128>'
     },
     /**
-     * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     * Lookup84: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
      **/
     PalletForumRawEvent: {
         _enum: {
@@ -594,7 +668,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup78: pallet_forum::PrivilegedActor<T>
+     * Lookup85: pallet_forum::PrivilegedActor<T>
      **/
     PalletForumPrivilegedActor: {
         _enum: {
@@ -603,7 +677,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     * Lookup86: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
      **/
     PalletForumExtendedPostIdObject: {
         categoryId: 'u64',
@@ -611,7 +685,7 @@ exports.default = {
         postId: 'u64'
     },
     /**
-     * Lookup84: pallet_constitution::RawEvent<primitive_types::H256>
+     * Lookup91: pallet_constitution::RawEvent<primitive_types::H256>
      **/
     PalletConstitutionRawEvent: {
         _enum: {
@@ -619,7 +693,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup85: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     * Lookup92: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
      **/
     PalletBountyRawEvent: {
         _enum: {
@@ -649,7 +723,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup86: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+     * Lookup93: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
      **/
     PalletBountyBountyParametersBTreeSet: {
         oracle: 'PalletBountyBountyActor',
@@ -661,7 +735,7 @@ exports.default = {
         fundingType: 'PalletBountyFundingType'
     },
     /**
-     * Lookup87: pallet_bounty::BountyActor<MemberId>
+     * Lookup94: pallet_bounty::BountyActor<MemberId>
      **/
     PalletBountyBountyActor: {
         _enum: {
@@ -670,7 +744,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup88: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+     * Lookup95: pallet_bounty::AssuranceContractType<BTreeSet<T>>
      **/
     PalletBountyAssuranceContractTypeBTreeSet: {
         _enum: {
@@ -679,7 +753,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+     * Lookup96: pallet_bounty::FundingType<BlockNumber, Balance>
      **/
     PalletBountyFundingType: {
         _enum: {
@@ -693,7 +767,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     * Lookup98: pallet_bounty::OracleWorkEntryJudgment<Balance>
      **/
     PalletBountyOracleWorkEntryJudgment: {
         _enum: {
@@ -707,9 +781,9 @@ exports.default = {
         }
     },
     /**
-     * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     * Lookup101: pallet_joystream_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
      **/
-    PalletUtilityRawEvent: {
+    PalletJoystreamUtilityRawEvent: {
         _enum: {
             Signaled: 'Bytes',
             RuntimeUpgraded: 'Bytes',
@@ -718,19 +792,19 @@ exports.default = {
         }
     },
     /**
-     * Lookup95: pallet_common::working_group::iterable_enums::WorkingGroup
+     * Lookup102: pallet_common::working_group::iterable_enums::WorkingGroup
      **/
     PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
         _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'App', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
     },
     /**
-     * Lookup96: pallet_common::BalanceKind
+     * Lookup103: pallet_common::BalanceKind
      **/
     PalletCommonBalanceKind: {
         _enum: ['Positive', 'Negative']
     },
     /**
-     * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     * Lookup104: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
      **/
     PalletContentRawEvent: {
         _enum: {
@@ -758,9 +832,8 @@ exports.default = {
             VideoDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
             VideoVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
             VideoAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,bool,Bytes)',
-            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>)',
-            ChannelRewardUpdated: '(u128,u64)',
-            CouncilRewardClaimed: '(u64,u128)',
+            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>,AccountId32)',
+            ChannelRewardUpdated: '(u128,u128,u64)',
             EnglishAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesEnglishAuctionParamsRecord)',
             OpenAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesOpenAuctionParamsRecord,u64)',
             NftIssued: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesNftIssuanceParametersRecord)',
@@ -788,11 +861,12 @@ exports.default = {
             GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
             ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
             ToggledNftLimits: 'bool',
-            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)'
+            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)',
+            CreatorTokenIssuerRemarked: '(u64,u64,Bytes)'
         }
     },
     /**
-     * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     * Lookup105: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
      **/
     PalletContentPermissionsContentActor: {
         _enum: {
@@ -802,7 +876,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup106: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentChannelRecord: {
         owner: 'PalletContentChannelOwner',
@@ -821,26 +895,26 @@ exports.default = {
         channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup103: pallet_content::types::iterable_enums::ChannelActionPermission
+     * Lookup110: pallet_content::types::iterable_enums::ChannelActionPermission
      **/
     PalletContentIterableEnumsChannelActionPermission: {
-        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
+        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken', 'AmmControl']
     },
     /**
-     * Lookup110: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+     * Lookup117: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
         _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
     },
     /**
-     * Lookup113: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     * Lookup120: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
      **/
     PalletCommonBloatBondRepayableBloatBond: {
         repaymentRestrictedTo: 'Option<AccountId32>',
         amount: 'u128'
     },
     /**
-     * Lookup114: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     * Lookup121: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
      **/
     PalletContentChannelOwner: {
         _enum: {
@@ -849,7 +923,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup115: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup122: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentChannelTransferStatus: {
         _enum: {
@@ -858,14 +932,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup116: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup123: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentPendingTransfer: {
         newOwner: 'PalletContentChannelOwner',
         transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
     },
     /**
-     * Lookup117: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+     * Lookup124: pallet_content::types::TransferCommitmentParameters<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBoundedBTreeMap: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -873,21 +947,21 @@ exports.default = {
         transferId: 'u64'
     },
     /**
-     * Lookup118: pallet_content::types::LimitPerPeriod<BlockNumber>
+     * Lookup125: pallet_content::types::LimitPerPeriod<BlockNumber>
      **/
     PalletContentLimitPerPeriod: {
         limit: 'u64',
         blockNumberPeriod: 'u32'
     },
     /**
-     * Lookup119: pallet_content::types::NftCounter<BlockNumber>
+     * Lookup126: pallet_content::types::NftCounter<BlockNumber>
      **/
     PalletContentNftCounter: {
         counter: 'u64',
         lastUpdated: 'u32'
     },
     /**
-     * Lookup120: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup127: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -899,7 +973,7 @@ exports.default = {
         minBidStep: 'u128'
     },
     /**
-     * Lookup122: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup129: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -909,7 +983,7 @@ exports.default = {
         bidLockDuration: 'u32'
     },
     /**
-     * Lookup123: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     * Lookup130: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
      **/
     PalletContentNftTypesNftIssuanceParametersRecord: {
         royalty: 'Option<Perbill>',
@@ -918,7 +992,7 @@ exports.default = {
         initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
     },
     /**
-     * Lookup124: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     * Lookup131: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
      **/
     PalletContentNftTypesInitTransactionalStatusRecord: {
         _enum: {
@@ -930,7 +1004,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup126: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     * Lookup133: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
      **/
     PalletContentChannelCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -942,14 +1016,14 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup127: pallet_content::types::StorageAssetsRecord<Balance>
+     * Lookup134: pallet_content::types::StorageAssetsRecord<Balance>
      **/
     PalletContentStorageAssetsRecord: {
         objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
         expectedDataSizeFee: 'u128'
     },
     /**
-     * Lookup129: pallet_storage::DataObjectCreationParameters
+     * Lookup136: pallet_storage::DataObjectCreationParameters
      **/
     PalletStorageDataObjectCreationParameters: {
         _alias: {
@@ -959,14 +1033,14 @@ exports.default = {
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup130: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     * Lookup137: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketIdRecord: {
         distributionBucketFamilyId: 'u64',
         distributionBucketIndex: 'u64'
     },
     /**
-     * Lookup137: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     * Lookup144: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
      **/
     PalletContentChannelUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -977,7 +1051,7 @@ exports.default = {
         storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup139: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup146: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -988,7 +1062,7 @@ exports.default = {
         storageBucketsNumWitness: 'u32'
     },
     /**
-     * Lookup141: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup148: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -999,22 +1073,20 @@ exports.default = {
         storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup144: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+     * Lookup151: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
         _enum: {
             HideVideo: 'Null',
             HideChannel: 'Null',
             ChangeChannelFeatureStatus: 'PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature',
-            DeleteVideo: 'Null',
-            DeleteChannel: 'Null',
             DeleteVideoAssets: 'bool',
             DeleteNonVideoChannelAssets: 'Null',
             UpdateChannelNftLimits: 'Null'
         }
     },
     /**
-     * Lookup148: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+     * Lookup155: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBTreeMap: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -1022,7 +1094,7 @@ exports.default = {
         transferId: 'u64'
     },
     /**
-     * Lookup149: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+     * Lookup156: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
      **/
     PalletContentUpdateChannelPayoutsParametersRecord: {
         commitment: 'Option<H256>',
@@ -1032,16 +1104,15 @@ exports.default = {
         channelCashoutsEnabled: 'Option<bool>'
     },
     /**
-     * Lookup150: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+     * Lookup157: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
      **/
     PalletContentChannelPayoutsPayloadParametersRecord: {
-        uploaderAccount: 'AccountId32',
         objectCreationParams: 'PalletStorageDataObjectCreationParameters',
         expectedDataSizeFee: 'u128',
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup154: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     * Lookup161: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
      **/
     PalletContentChannelFundsDestination: {
         _enum: {
@@ -1050,13 +1121,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup155: pallet_content::types::NftLimitPeriod
+     * Lookup162: pallet_content::types::NftLimitPeriod
      **/
     PalletContentNftLimitPeriod: {
         _enum: ['Daily', 'Weekly']
     },
     /**
-     * Lookup156: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+     * Lookup163: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
      **/
     PalletStorageRawEvent: {
         _enum: {
@@ -1105,7 +1176,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup157: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     * Lookup164: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
      **/
     PalletStorageUploadParametersRecord: {
         bagId: 'PalletStorageBagIdType',
@@ -1115,7 +1186,7 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup158: pallet_storage::BagIdType<MemberId, ChannelId>
+     * Lookup165: pallet_storage::BagIdType<MemberId, ChannelId>
      **/
     PalletStorageBagIdType: {
         _enum: {
@@ -1124,7 +1195,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup159: pallet_storage::StaticBagId
+     * Lookup166: pallet_storage::StaticBagId
      **/
     PalletStorageStaticBagId: {
         _enum: {
@@ -1133,7 +1204,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup160: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     * Lookup167: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
      **/
     PalletStorageDynamicBagIdType: {
         _enum: {
@@ -1142,7 +1213,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup161: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     * Lookup168: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
      **/
     PalletStorageDynBagCreationParametersRecord: {
         bagId: 'PalletStorageDynamicBagIdType',
@@ -1154,7 +1225,7 @@ exports.default = {
         distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
     },
     /**
-     * Lookup164: pallet_storage::Voucher
+     * Lookup171: pallet_storage::Voucher
      **/
     PalletStorageVoucher: {
         sizeLimit: 'u64',
@@ -1163,13 +1234,13 @@ exports.default = {
         objectsUsed: 'u64'
     },
     /**
-     * Lookup165: pallet_storage::DynamicBagType
+     * Lookup172: pallet_storage::DynamicBagType
      **/
     PalletStorageDynamicBagType: {
         _enum: ['Member', 'Channel']
     },
     /**
-     * Lookup169: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+     * Lookup176: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
      **/
     PalletProjectTokenEventsRawEvent: {
         _enum: {
@@ -1190,11 +1261,15 @@ exports.default = {
             TokensPurchasedOnSale: '(u64,u32,u128,u64)',
             TokenSaleFinalized: '(u64,u32,u128,u128)',
             TransferPolicyChangedToPermissionless: 'u64',
-            TokensBurned: '(u64,u64,u128)'
+            TokensBurned: '(u64,u64,u128)',
+            AmmActivated: '(u64,u64,PalletProjectTokenAmmCurve)',
+            TokensBoughtOnAmm: '(u64,u64,u128,u128)',
+            TokensSoldOnAmm: '(u64,u64,u128,u128)',
+            AmmDeactivated: '(u64,u64,u128)'
         }
     },
     /**
-     * Lookup170: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     * Lookup177: pallet_project_token::types::TransferPolicy<primitive_types::H256>
      **/
     PalletProjectTokenTransferPolicy: {
         _enum: {
@@ -1203,24 +1278,24 @@ exports.default = {
         }
     },
     /**
-     * Lookup171: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     * Lookup178: pallet_project_token::types::TokenIssuanceParameters<pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
      **/
     PalletProjectTokenTokenIssuanceParameters: {
         initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
-        symbol: 'H256',
         transferPolicy: 'PalletProjectTokenTransferPolicyParams',
         patronageRate: 'Permill',
-        revenueSplitRate: 'Permill'
+        revenueSplitRate: 'Permill',
+        metadata: 'Bytes'
     },
     /**
-     * Lookup172: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup179: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenAllocation: {
         amount: 'u128',
         vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup173: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     * Lookup180: pallet_project_token::types::VestingScheduleParams<BlockNumber>
      **/
     PalletProjectTokenVestingScheduleParams: {
         linearVestingDuration: 'u32',
@@ -1228,7 +1303,7 @@ exports.default = {
         cliffAmountPercentage: 'Permill'
     },
     /**
-     * Lookup176: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     * Lookup183: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
      **/
     PalletProjectTokenTransferPolicyParams: {
         _enum: {
@@ -1237,14 +1312,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup177: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     * Lookup184: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
      **/
     PalletProjectTokenWhitelistParams: {
         commitment: 'H256',
         payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
     },
     /**
-     * Lookup178: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     * Lookup185: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
      **/
     PalletProjectTokenSingleDataObjectUploadParams: {
         objectCreationParams: 'PalletStorageDataObjectCreationParameters',
@@ -1252,7 +1327,7 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup185: pallet_project_token::types::Validated<MemberId>
+     * Lookup192: pallet_project_token::types::Validated<MemberId>
      **/
     PalletProjectTokenValidated: {
         _enum: {
@@ -1261,21 +1336,21 @@ exports.default = {
         }
     },
     /**
-     * Lookup186: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup193: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenValidatedPayment: {
         payment: 'PalletProjectTokenPaymentWithVesting',
         vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
     },
     /**
-     * Lookup187: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup194: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenPaymentWithVesting: {
         amount: 'u128',
         vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup189: pallet_project_token::types::VestingSource
+     * Lookup196: pallet_project_token::types::VestingSource
      **/
     PalletProjectTokenVestingSource: {
         _enum: {
@@ -1285,7 +1360,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup193: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     * Lookup200: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletProjectTokenTokenSale: {
         unitPrice: 'u128',
@@ -1300,7 +1375,15 @@ exports.default = {
         autoFinalize: 'bool'
     },
     /**
-     * Lookup195: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     * Lookup201: pallet_project_token::types::AmmCurve<Balance>
+     **/
+    PalletProjectTokenAmmCurve: {
+        slope: 'Permill',
+        intercept: 'Permill',
+        providedSupply: 'u128'
+    },
+    /**
+     * Lookup203: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
      **/
     PalletProposalsEngineRawEvent: {
         _enum: {
@@ -1313,7 +1396,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup196: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     * Lookup204: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
      **/
     PalletProposalsEngineProposalStatusesProposalStatus: {
         _enum: {
@@ -1323,7 +1406,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     * Lookup205: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
      **/
     PalletProposalsEngineProposalStatusesProposalDecision: {
         _enum: {
@@ -1337,13 +1420,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     * Lookup206: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
      **/
     PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
         _enum: ['PendingExecution', 'PendingConstitutionality']
     },
     /**
-     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     * Lookup207: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
      **/
     PalletProposalsEngineProposalStatusesExecutionStatus: {
         _enum: {
@@ -1354,13 +1437,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup200: pallet_proposals_engine::types::VoteKind
+     * Lookup208: pallet_proposals_engine::types::VoteKind
      **/
     PalletProposalsEngineVoteKind: {
         _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
     },
     /**
-     * Lookup201: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     * Lookup209: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
      **/
     PalletProposalsDiscussionRawEvent: {
         _enum: {
@@ -1372,7 +1455,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup202: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+     * Lookup210: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
      **/
     PalletProposalsDiscussionThreadModeBTreeSet: {
         _enum: {
@@ -1381,7 +1464,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup203: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     * Lookup211: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
      **/
     PalletProposalsCodexRawEvent: {
         _enum: {
@@ -1389,7 +1472,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup204: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     * Lookup212: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
      **/
     PalletProposalsCodexGeneralProposalParams: {
         memberId: 'u64',
@@ -1399,7 +1482,7 @@ exports.default = {
         exactExecutionBlock: 'Option<u32>'
     },
     /**
-     * Lookup205: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+     * Lookup213: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
      **/
     PalletProposalsCodexProposalDetails: {
         _enum: {
@@ -1429,14 +1512,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup207: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     * Lookup215: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
      **/
     PalletCommonFundingRequestParameters: {
         account: 'AccountId32',
         amount: 'u128'
     },
     /**
-     * Lookup208: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     * Lookup216: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
      **/
     PalletProposalsCodexCreateOpeningParameters: {
         description: 'Bytes',
@@ -1445,14 +1528,14 @@ exports.default = {
         group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup209: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     * Lookup217: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
      **/
     PalletWorkingGroupStakePolicy: {
         stakeAmount: 'u128',
         leavingUnstakingPeriod: 'u32'
     },
     /**
-     * Lookup210: pallet_proposals_codex::types::FillOpeningParameters
+     * Lookup218: pallet_proposals_codex::types::FillOpeningParameters
      **/
     PalletProposalsCodexFillOpeningParameters: {
         openingId: 'u64',
@@ -1460,7 +1543,7 @@ exports.default = {
         workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup211: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     * Lookup219: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
      **/
     PalletProposalsCodexTerminateRoleParameters: {
         workerId: 'u64',
@@ -1468,7 +1551,7 @@ exports.default = {
         group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+     * Lookup220: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
      **/
     PalletWorkingGroupRawEventInstance1: {
         _enum: {
@@ -1500,13 +1583,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup216: pallet_working_group::types::OpeningType
+     * Lookup224: pallet_working_group::types::OpeningType
      **/
     PalletWorkingGroupOpeningType: {
         _enum: ['Leader', 'Regular']
     },
     /**
-     * Lookup217: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     * Lookup225: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupApplyOnOpeningParams: {
         memberId: 'u64',
@@ -1517,24 +1600,24 @@ exports.default = {
         stakeParameters: 'PalletWorkingGroupStakeParameters'
     },
     /**
-     * Lookup218: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup226: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupStakeParameters: {
         stake: 'u128',
         stakingAccountId: 'AccountId32'
     },
     /**
-     * Lookup219: pallet_working_group::Instance1
+     * Lookup227: pallet_working_group::Instance1
      **/
     PalletWorkingGroupInstance1: 'Null',
     /**
-     * Lookup220: pallet_working_group::types::RewardPaymentType
+     * Lookup228: pallet_working_group::types::RewardPaymentType
      **/
     PalletWorkingGroupRewardPaymentType: {
         _enum: ['MissedReward', 'RegularReward']
     },
     /**
-     * Lookup221: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+     * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
      **/
     PalletWorkingGroupRawEventInstance2: {
         _enum: {
@@ -1566,11 +1649,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup222: pallet_working_group::Instance2
+     * Lookup230: pallet_working_group::Instance2
      **/
     PalletWorkingGroupInstance2: 'Null',
     /**
-     * Lookup223: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+     * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
      **/
     PalletWorkingGroupRawEventInstance3: {
         _enum: {
@@ -1602,11 +1685,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup224: pallet_working_group::Instance3
+     * Lookup232: pallet_working_group::Instance3
      **/
     PalletWorkingGroupInstance3: 'Null',
     /**
-     * Lookup225: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+     * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
      **/
     PalletWorkingGroupRawEventInstance4: {
         _enum: {
@@ -1638,11 +1721,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup226: pallet_working_group::Instance4
+     * Lookup234: pallet_working_group::Instance4
      **/
     PalletWorkingGroupInstance4: 'Null',
     /**
-     * Lookup227: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+     * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
      **/
     PalletWorkingGroupRawEventInstance5: {
         _enum: {
@@ -1674,11 +1757,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup228: pallet_working_group::Instance5
+     * Lookup236: pallet_working_group::Instance5
      **/
     PalletWorkingGroupInstance5: 'Null',
     /**
-     * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+     * Lookup237: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
      **/
     PalletWorkingGroupRawEventInstance6: {
         _enum: {
@@ -1710,11 +1793,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup230: pallet_working_group::Instance6
+     * Lookup238: pallet_working_group::Instance6
      **/
     PalletWorkingGroupInstance6: 'Null',
     /**
-     * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+     * Lookup239: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
      **/
     PalletWorkingGroupRawEventInstance7: {
         _enum: {
@@ -1746,11 +1829,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup232: pallet_working_group::Instance7
+     * Lookup240: pallet_working_group::Instance7
      **/
     PalletWorkingGroupInstance7: 'Null',
     /**
-     * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+     * Lookup241: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
      **/
     PalletWorkingGroupRawEventInstance8: {
         _enum: {
@@ -1782,11 +1865,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup234: pallet_working_group::Instance8
+     * Lookup242: pallet_working_group::Instance8
      **/
     PalletWorkingGroupInstance8: 'Null',
     /**
-     * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+     * Lookup243: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
      **/
     PalletWorkingGroupRawEventInstance9: {
         _enum: {
@@ -1818,11 +1901,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup236: pallet_working_group::Instance9
+     * Lookup244: pallet_working_group::Instance9
      **/
     PalletWorkingGroupInstance9: 'Null',
     /**
-     * Lookup237: frame_system::Phase
+     * Lookup245: frame_system::Phase
      **/
     FrameSystemPhase: {
         _enum: {
@@ -1832,20 +1915,17 @@ exports.default = {
         }
     },
     /**
-     * Lookup241: frame_system::LastRuntimeUpgradeInfo
+     * Lookup249: frame_system::LastRuntimeUpgradeInfo
      **/
     FrameSystemLastRuntimeUpgradeInfo: {
         specVersion: 'Compact<u32>',
         specName: 'Text'
     },
     /**
-     * Lookup244: frame_system::pallet::Call<T>
+     * Lookup252: frame_system::pallet::Call<T>
      **/
     FrameSystemCall: {
         _enum: {
-            fill_block: {
-                ratio: 'Perbill',
-            },
             remark: {
                 remark: 'Bytes',
             },
@@ -1877,53 +1957,53 @@ exports.default = {
         }
     },
     /**
-     * Lookup247: frame_system::limits::BlockWeights
+     * Lookup255: frame_system::limits::BlockWeights
      **/
     FrameSystemLimitsBlockWeights: {
-        baseBlock: 'u64',
-        maxBlock: 'u64',
-        perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
+        baseBlock: 'SpWeightsWeightV2Weight',
+        maxBlock: 'SpWeightsWeightV2Weight',
+        perClass: 'FrameSupportDispatchPerDispatchClassWeightsPerClass'
     },
     /**
-     * Lookup248: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     * Lookup256: frame_support::dispatch::PerDispatchClass<frame_system::limits::WeightsPerClass>
      **/
-    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
+    FrameSupportDispatchPerDispatchClassWeightsPerClass: {
         normal: 'FrameSystemLimitsWeightsPerClass',
         operational: 'FrameSystemLimitsWeightsPerClass',
         mandatory: 'FrameSystemLimitsWeightsPerClass'
     },
     /**
-     * Lookup249: frame_system::limits::WeightsPerClass
+     * Lookup257: frame_system::limits::WeightsPerClass
      **/
     FrameSystemLimitsWeightsPerClass: {
-        baseExtrinsic: 'u64',
-        maxExtrinsic: 'Option<u64>',
-        maxTotal: 'Option<u64>',
-        reserved: 'Option<u64>'
+        baseExtrinsic: 'SpWeightsWeightV2Weight',
+        maxExtrinsic: 'Option<SpWeightsWeightV2Weight>',
+        maxTotal: 'Option<SpWeightsWeightV2Weight>',
+        reserved: 'Option<SpWeightsWeightV2Weight>'
     },
     /**
-     * Lookup250: frame_system::limits::BlockLength
+     * Lookup259: frame_system::limits::BlockLength
      **/
     FrameSystemLimitsBlockLength: {
-        max: 'FrameSupportWeightsPerDispatchClassU32'
+        max: 'FrameSupportDispatchPerDispatchClassU32'
     },
     /**
-     * Lookup251: frame_support::weights::PerDispatchClass<T>
+     * Lookup260: frame_support::dispatch::PerDispatchClass<T>
      **/
-    FrameSupportWeightsPerDispatchClassU32: {
+    FrameSupportDispatchPerDispatchClassU32: {
         normal: 'u32',
         operational: 'u32',
         mandatory: 'u32'
     },
     /**
-     * Lookup252: frame_support::weights::RuntimeDbWeight
+     * Lookup261: sp_weights::RuntimeDbWeight
      **/
-    FrameSupportWeightsRuntimeDbWeight: {
+    SpWeightsRuntimeDbWeight: {
         read: 'u64',
         write: 'u64'
     },
     /**
-     * Lookup253: sp_version::RuntimeVersion
+     * Lookup262: sp_version::RuntimeVersion
      **/
     SpVersionRuntimeVersion: {
         specName: 'Text',
@@ -1936,13 +2016,13 @@ exports.default = {
         stateVersion: 'u8'
     },
     /**
-     * Lookup259: frame_system::pallet::Error<T>
+     * Lookup268: frame_system::pallet::Error<T>
      **/
     FrameSystemError: {
         _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
     },
     /**
-     * Lookup260: pallet_utility::pallet::Call<T>
+     * Lookup269: pallet_utility::pallet::Call<T>
      **/
     PalletUtilityCall: {
         _enum: {
@@ -1961,12 +2041,16 @@ exports.default = {
                 call: 'Call',
             },
             force_batch: {
-                calls: 'Vec<Call>'
+                calls: 'Vec<Call>',
+            },
+            with_weight: {
+                call: 'Call',
+                weight: 'SpWeightsWeightV2Weight'
             }
         }
     },
     /**
-     * Lookup263: pallet_babe::pallet::Call<T>
+     * Lookup272: pallet_babe::pallet::Call<T>
      **/
     PalletBabeCall: {
         _enum: {
@@ -1984,7 +2068,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup264: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     * Lookup273: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
      **/
     SpConsensusSlotsEquivocationProof: {
         offender: 'SpConsensusBabeAppPublic',
@@ -1993,7 +2077,7 @@ exports.default = {
         secondHeader: 'SpRuntimeHeader'
     },
     /**
-     * Lookup265: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     * Lookup274: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
      **/
     SpRuntimeHeader: {
         parentHash: 'H256',
@@ -2003,15 +2087,15 @@ exports.default = {
         digest: 'SpRuntimeDigest'
     },
     /**
-     * Lookup266: sp_runtime::traits::BlakeTwo256
+     * Lookup275: sp_runtime::traits::BlakeTwo256
      **/
     SpRuntimeBlakeTwo256: 'Null',
     /**
-     * Lookup267: sp_consensus_babe::app::Public
+     * Lookup276: sp_consensus_babe::app::Public
      **/
     SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
     /**
-     * Lookup269: sp_session::MembershipProof
+     * Lookup278: sp_session::MembershipProof
      **/
     SpSessionMembershipProof: {
         session: 'u32',
@@ -2019,7 +2103,7 @@ exports.default = {
         validatorCount: 'u32'
     },
     /**
-     * Lookup270: sp_consensus_babe::digests::NextConfigDescriptor
+     * Lookup279: sp_consensus_babe::digests::NextConfigDescriptor
      **/
     SpConsensusBabeDigestsNextConfigDescriptor: {
         _enum: {
@@ -2031,13 +2115,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup271: sp_consensus_babe::AllowedSlots
+     * Lookup280: sp_consensus_babe::AllowedSlots
      **/
     SpConsensusBabeAllowedSlots: {
         _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
     },
     /**
-     * Lookup272: pallet_timestamp::pallet::Call<T>
+     * Lookup281: pallet_timestamp::pallet::Call<T>
      **/
     PalletTimestampCall: {
         _enum: {
@@ -2047,17 +2131,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup274: pallet_authorship::pallet::Call<T>
-     **/
-    PalletAuthorshipCall: {
-        _enum: {
-            set_uncles: {
-                newUncles: 'Vec<SpRuntimeHeader>'
-            }
-        }
-    },
-    /**
-     * Lookup276: pallet_balances::pallet::Call<T, I>
+     * Lookup282: pallet_balances::pallet::Call<T, I>
      **/
     PalletBalancesCall: {
         _enum: {
@@ -2090,7 +2164,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup277: pallet_election_provider_multi_phase::pallet::Call<T>
+     * Lookup283: pallet_election_provider_multi_phase::pallet::Call<T>
      **/
     PalletElectionProviderMultiPhaseCall: {
         _enum: {
@@ -2114,7 +2188,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup278: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     * Lookup284: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseRawSolution: {
         solution: 'JoystreamNodeRuntimeNposSolution16',
@@ -2122,7 +2196,7 @@ exports.default = {
         round: 'u32'
     },
     /**
-     * Lookup279: joystream_node_runtime::NposSolution16
+     * Lookup285: joystream_node_runtime::NposSolution16
      **/
     JoystreamNodeRuntimeNposSolution16: {
         votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
@@ -2143,29 +2217,21 @@ exports.default = {
         votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
     },
     /**
-     * Lookup330: sp_npos_elections::ElectionScore
-     **/
-    SpNposElectionsElectionScore: {
-        minimalStake: 'u128',
-        sumStake: 'u128',
-        sumStakeSquared: 'u128'
-    },
-    /**
-     * Lookup331: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     * Lookup336: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
      **/
     PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
         voters: 'Compact<u32>',
         targets: 'Compact<u32>'
     },
     /**
-     * Lookup335: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     * Lookup340: sp_npos_elections::Support<sp_core::crypto::AccountId32>
      **/
     SpNposElectionsSupport: {
         total: 'u128',
         voters: 'Vec<(AccountId32,u128)>'
     },
     /**
-     * Lookup338: pallet_staking::pallet::pallet::Call<T>
+     * Lookup342: pallet_staking::pallet::pallet::Call<T>
      **/
     PalletStakingPalletCall: {
         _enum: {
@@ -2229,10 +2295,6 @@ exports.default = {
             rebond: {
                 value: 'Compact<u128>',
             },
-            set_history_depth: {
-                newHistoryDepth: 'Compact<u32>',
-                eraItemsDeleted: 'Compact<u32>',
-            },
             reap_stash: {
                 stash: 'AccountId32',
                 numSlashingSpans: 'u32',
@@ -2252,12 +2314,18 @@ exports.default = {
                 controller: 'AccountId32',
             },
             force_apply_min_commission: {
-                validatorStash: 'AccountId32'
+                validatorStash: 'AccountId32',
+            },
+            set_min_commission: {
+                _alias: {
+                    new_: 'new',
+                },
+                new_: 'Perbill'
             }
         }
     },
     /**
-     * Lookup339: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+     * Lookup343: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
      **/
     PalletStakingRewardDestination: {
         _enum: {
@@ -2269,7 +2337,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup343: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup347: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU128: {
         _enum: {
@@ -2279,7 +2347,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup344: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup348: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU32: {
         _enum: {
@@ -2289,7 +2357,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup345: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+     * Lookup349: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
      **/
     PalletStakingPalletConfigOpPercent: {
         _enum: {
@@ -2299,7 +2367,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup346: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+     * Lookup350: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
      **/
     PalletStakingPalletConfigOpPerbill: {
         _enum: {
@@ -2309,7 +2377,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup347: pallet_session::pallet::Call<T>
+     * Lookup351: pallet_session::pallet::Call<T>
      **/
     PalletSessionCall: {
         _enum: {
@@ -2324,7 +2392,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup348: joystream_node_runtime::SessionKeys
+     * Lookup352: joystream_node_runtime::SessionKeys
      **/
     JoystreamNodeRuntimeSessionKeys: {
         grandpa: 'SpFinalityGrandpaAppPublic',
@@ -2333,11 +2401,11 @@ exports.default = {
         authorityDiscovery: 'SpAuthorityDiscoveryAppPublic'
     },
     /**
-     * Lookup349: sp_authority_discovery::app::Public
+     * Lookup353: sp_authority_discovery::app::Public
      **/
     SpAuthorityDiscoveryAppPublic: 'SpCoreSr25519Public',
     /**
-     * Lookup350: pallet_grandpa::pallet::Call<T>
+     * Lookup354: pallet_grandpa::pallet::Call<T>
      **/
     PalletGrandpaCall: {
         _enum: {
@@ -2356,14 +2424,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup351: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+     * Lookup355: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocationProof: {
         setId: 'u64',
         equivocation: 'SpFinalityGrandpaEquivocation'
     },
     /**
-     * Lookup352: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+     * Lookup356: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocation: {
         _enum: {
@@ -2372,7 +2440,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup353: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup357: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrevote: {
         roundNumber: 'u64',
@@ -2381,22 +2449,22 @@ exports.default = {
         second: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)'
     },
     /**
-     * Lookup354: finality_grandpa::Prevote<primitive_types::H256, N>
+     * Lookup358: finality_grandpa::Prevote<primitive_types::H256, N>
      **/
     FinalityGrandpaPrevote: {
         targetHash: 'H256',
         targetNumber: 'u32'
     },
     /**
-     * Lookup355: sp_finality_grandpa::app::Signature
+     * Lookup359: sp_finality_grandpa::app::Signature
      **/
     SpFinalityGrandpaAppSignature: 'SpCoreEd25519Signature',
     /**
-     * Lookup356: sp_core::ed25519::Signature
+     * Lookup360: sp_core::ed25519::Signature
      **/
     SpCoreEd25519Signature: '[u8;64]',
     /**
-     * Lookup359: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup363: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrecommit: {
         roundNumber: 'u64',
@@ -2405,14 +2473,14 @@ exports.default = {
         second: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)'
     },
     /**
-     * Lookup360: finality_grandpa::Precommit<primitive_types::H256, N>
+     * Lookup364: finality_grandpa::Precommit<primitive_types::H256, N>
      **/
     FinalityGrandpaPrecommit: {
         targetHash: 'H256',
         targetNumber: 'u32'
     },
     /**
-     * Lookup362: pallet_im_online::pallet::Call<T>
+     * Lookup366: pallet_im_online::pallet::Call<T>
      **/
     PalletImOnlineCall: {
         _enum: {
@@ -2423,7 +2491,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup363: pallet_im_online::Heartbeat<BlockNumber>
+     * Lookup367: pallet_im_online::Heartbeat<BlockNumber>
      **/
     PalletImOnlineHeartbeat: {
         blockNumber: 'u32',
@@ -2433,46 +2501,22 @@ exports.default = {
         validatorsLen: 'u32'
     },
     /**
-     * Lookup364: sp_core::offchain::OpaqueNetworkState
+     * Lookup368: sp_core::offchain::OpaqueNetworkState
      **/
     SpCoreOffchainOpaqueNetworkState: {
         peerId: 'Bytes',
         externalAddresses: 'Vec<Bytes>'
     },
     /**
-     * Lookup368: pallet_im_online::sr25519::app_sr25519::Signature
+     * Lookup372: pallet_im_online::sr25519::app_sr25519::Signature
      **/
     PalletImOnlineSr25519AppSr25519Signature: 'SpCoreSr25519Signature',
     /**
-     * Lookup369: sp_core::sr25519::Signature
+     * Lookup373: sp_core::sr25519::Signature
      **/
     SpCoreSr25519Signature: '[u8;64]',
     /**
-     * Lookup370: pallet_sudo::pallet::Call<T>
-     **/
-    PalletSudoCall: {
-        _enum: {
-            sudo: {
-                call: 'Call',
-            },
-            sudo_unchecked_weight: {
-                call: 'Call',
-                weight: 'u64',
-            },
-            set_key: {
-                _alias: {
-                    new_: 'new',
-                },
-                new_: 'AccountId32',
-            },
-            sudo_as: {
-                who: 'AccountId32',
-                call: 'Call'
-            }
-        }
-    },
-    /**
-     * Lookup371: pallet_bags_list::pallet::Call<T, I>
+     * Lookup374: pallet_bags_list::pallet::Call<T, I>
      **/
     PalletBagsListCall: {
         _enum: {
@@ -2485,7 +2529,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup372: pallet_vesting::pallet::Call<T>
+     * Lookup375: pallet_vesting::pallet::Call<T>
      **/
     PalletVestingCall: {
         _enum: {
@@ -2509,7 +2553,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup373: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     * Lookup376: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
      **/
     PalletVestingVestingInfo: {
         locked: 'u128',
@@ -2517,7 +2561,7 @@ exports.default = {
         startingBlock: 'u32'
     },
     /**
-     * Lookup374: pallet_multisig::pallet::Call<T>
+     * Lookup377: pallet_multisig::pallet::Call<T>
      **/
     PalletMultisigCall: {
         _enum: {
@@ -2529,16 +2573,15 @@ exports.default = {
                 threshold: 'u16',
                 otherSignatories: 'Vec<AccountId32>',
                 maybeTimepoint: 'Option<PalletMultisigTimepoint>',
-                call: 'WrapperKeepOpaque<Call>',
-                storeCall: 'bool',
-                maxWeight: 'u64',
+                call: 'Call',
+                maxWeight: 'SpWeightsWeightV2Weight',
             },
             approve_as_multi: {
                 threshold: 'u16',
                 otherSignatories: 'Vec<AccountId32>',
                 maybeTimepoint: 'Option<PalletMultisigTimepoint>',
                 callHash: '[u8;32]',
-                maxWeight: 'u64',
+                maxWeight: 'SpWeightsWeightV2Weight',
             },
             cancel_as_multi: {
                 threshold: 'u16',
@@ -2549,7 +2592,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup377: pallet_council::Call<T>
+     * Lookup379: pallet_council::Call<T>
      **/
     PalletCouncilCall: {
         _enum: {
@@ -2600,7 +2643,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup378: pallet_referendum::Call<T, I>
+     * Lookup380: pallet_referendum::Call<T, I>
      **/
     PalletReferendumCall: {
         _enum: {
@@ -2612,11 +2655,12 @@ exports.default = {
                 salt: 'Bytes',
                 voteOptionId: 'u64',
             },
-            release_vote_stake: 'Null'
+            release_vote_stake: 'Null',
+            opt_out_of_voting: 'Null'
         }
     },
     /**
-     * Lookup379: pallet_membership::Call<T>
+     * Lookup381: pallet_membership::Call<T>
      **/
     PalletMembershipCall: {
         _enum: {
@@ -2677,6 +2721,7 @@ exports.default = {
             member_remark: {
                 memberId: 'u64',
                 msg: 'Bytes',
+                payment: 'Option<(AccountId32,u128)>',
             },
             create_member: {
                 params: 'PalletMembershipCreateMemberParameters'
@@ -2684,7 +2729,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup380: pallet_forum::Call<T>
+     * Lookup382: pallet_forum::Call<T>
      **/
     PalletForumCall: {
         _enum: {
@@ -2781,7 +2826,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup381: pallet_constitution::Call<T>
+     * Lookup383: pallet_constitution::Call<T>
      **/
     PalletConstitutionCall: {
         _enum: {
@@ -2791,7 +2836,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup382: pallet_bounty::Call<T>
+     * Lookup384: pallet_bounty::Call<T>
      **/
     PalletBountyCall: {
         _enum: {
@@ -2867,7 +2912,28 @@ exports.default = {
         }
     },
     /**
-     * Lookup384: pallet_content::Call<T>
+     * Lookup385: pallet_joystream_utility::Call<T>
+     **/
+    PalletJoystreamUtilityCall: {
+        _enum: {
+            execute_signal_proposal: {
+                signal: 'Bytes',
+            },
+            execute_runtime_upgrade_proposal: {
+                wasm: 'Bytes',
+            },
+            update_working_group_budget: {
+                workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup',
+                amount: 'u128',
+                balanceKind: 'PalletCommonBalanceKind',
+            },
+            burn_account_tokens: {
+                amount: 'u128'
+            }
+        }
+    },
+    /**
+     * Lookup386: pallet_content::Call<T>
      **/
     PalletContentCall: {
         _enum: {
@@ -2924,13 +2990,6 @@ exports.default = {
                 storageBucketsNumWitness: 'u32',
                 rationale: 'Bytes',
             },
-            delete_channel_as_moderator: {
-                actor: 'PalletContentPermissionsContentActor',
-                channelId: 'u64',
-                channelBagWitness: 'PalletContentChannelBagWitness',
-                numObjectsToDelete: 'u64',
-                rationale: 'Bytes',
-            },
             set_channel_visibility_as_moderator: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
@@ -2960,13 +3019,6 @@ exports.default = {
                 assetsToRemove: 'BTreeSet<u64>',
                 rationale: 'Bytes',
             },
-            delete_video_as_moderator: {
-                actor: 'PalletContentPermissionsContentActor',
-                videoId: 'u64',
-                storageBucketsNumWitness: 'Option<u32>',
-                numObjectsToDelete: 'u64',
-                rationale: 'Bytes',
-            },
             set_video_visibility_as_moderator: {
                 actor: 'PalletContentPermissionsContentActor',
                 videoId: 'u64',
@@ -2975,6 +3027,7 @@ exports.default = {
             },
             update_channel_payouts: {
                 params: 'PalletContentUpdateChannelPayoutsParametersRecord',
+                uploaderAccount: 'AccountId32',
             },
             claim_channel_reward: {
                 actor: 'PalletContentPermissionsContentActor',
@@ -2992,11 +3045,6 @@ exports.default = {
             update_video_state_bloat_bond: {
                 newVideoStateBloatBond: 'u128',
             },
-            claim_and_withdraw_channel_reward: {
-                actor: 'PalletContentPermissionsContentActor',
-                proof: 'Vec<PalletCommonMerkleTreeProofElementRecord>',
-                item: 'PalletContentPullPaymentElement',
-            },
             issue_nft: {
                 actor: 'PalletContentPermissionsContentActor',
                 videoId: 'u64',
@@ -3175,19 +3223,33 @@ exports.default = {
             },
             deissue_creator_token: {
                 actor: 'PalletContentPermissionsContentActor',
-                channelId: 'u64'
+                channelId: 'u64',
+            },
+            activate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenAmmParams',
+            },
+            deactivate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            creator_token_issuer_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                remark: 'Bytes'
             }
         }
     },
     /**
-     * Lookup385: pallet_content::types::ChannelBagWitness
+     * Lookup387: pallet_content::types::ChannelBagWitness
      **/
     PalletContentChannelBagWitness: {
         storageBucketsNum: 'u32',
         distributionBucketsNum: 'u32'
     },
     /**
-     * Lookup387: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+     * Lookup389: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
      **/
     PalletCommonMerkleTreeProofElementRecord: {
         _alias: {
@@ -3197,13 +3259,13 @@ exports.default = {
         side: 'PalletCommonMerkleTreeSide'
     },
     /**
-     * Lookup388: pallet_common::merkle_tree::Side
+     * Lookup390: pallet_common::merkle_tree::Side
      **/
     PalletCommonMerkleTreeSide: {
         _enum: ['Left', 'Right']
     },
     /**
-     * Lookup389: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     * Lookup391: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
      **/
     PalletContentPullPaymentElement: {
         channelId: 'u64',
@@ -3211,7 +3273,7 @@ exports.default = {
         reason: 'H256'
     },
     /**
-     * Lookup390: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     * Lookup392: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
      **/
     PalletContentInitTransferParameters: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -3219,7 +3281,7 @@ exports.default = {
         newOwner: 'PalletContentChannelOwner'
     },
     /**
-     * Lookup391: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup393: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenSaleParams: {
         unitPrice: 'u128',
@@ -3231,11 +3293,18 @@ exports.default = {
         metadata: 'Option<Bytes>'
     },
     /**
-     * Lookup392: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup394: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenTransfersPaymentWithVesting: 'BTreeMap<u64, PalletProjectTokenPaymentWithVesting>',
     /**
-     * Lookup396: pallet_storage::Call<T>
+     * Lookup398: pallet_project_token::types::AmmParams
+     **/
+    PalletProjectTokenAmmParams: {
+        slope: 'Permill',
+        intercept: 'Permill'
+    },
+    /**
+     * Lookup399: pallet_storage::Call<T>
      **/
     PalletStorageCall: {
         _enum: {
@@ -3369,9 +3438,6 @@ exports.default = {
                 bucketId: 'PalletStorageDistributionBucketIdRecord',
                 metadata: 'Bytes',
             },
-            sudo_upload_data_objects: {
-                params: 'PalletStorageUploadParametersRecord',
-            },
             storage_operator_remark: {
                 workerId: 'u64',
                 storageBucketId: 'u64',
@@ -3385,7 +3451,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup397: pallet_project_token::Call<T>
+     * Lookup400: pallet_project_token::Call<T>
      **/
     PalletProjectTokenCall: {
         _enum: {
@@ -3421,32 +3487,44 @@ exports.default = {
             },
             exit_revenue_split: {
                 tokenId: 'u64',
-                memberId: 'u64'
+                memberId: 'u64',
+            },
+            buy_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            sell_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>'
             }
         }
     },
     /**
-     * Lookup398: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
+     * Lookup401: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
      **/
     PalletProjectTokenTransfersPayment: 'BTreeMap<u64, PalletProjectTokenPayment>',
     /**
-     * Lookup399: pallet_project_token::types::Payment<Balance>
+     * Lookup402: pallet_project_token::types::Payment<Balance>
      **/
     PalletProjectTokenPayment: {
         amount: 'u128'
     },
     /**
-     * Lookup403: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     * Lookup406: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
      **/
     PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
     /**
-     * Lookup406: pallet_project_token::types::MerkleSide
+     * Lookup409: pallet_project_token::types::MerkleSide
      **/
     PalletProjectTokenMerkleSide: {
         _enum: ['Right', 'Left']
     },
     /**
-     * Lookup407: pallet_proposals_engine::Call<T>
+     * Lookup412: pallet_proposals_engine::Call<T>
      **/
     PalletProposalsEngineCall: {
         _enum: {
@@ -3471,7 +3549,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup408: pallet_proposals_discussion::Call<T>
+     * Lookup413: pallet_proposals_discussion::Call<T>
      **/
     PalletProposalsDiscussionCall: {
         _enum: {
@@ -3500,7 +3578,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup409: pallet_proposals_codex::Call<T>
+     * Lookup414: pallet_proposals_codex::Call<T>
      **/
     PalletProposalsCodexCall: {
         _enum: {
@@ -3511,7 +3589,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup410: pallet_working_group::Call<T, I>
+     * Lookup415: pallet_working_group::Call<T, I>
      **/
     PalletWorkingGroupCall: {
         _enum: {
@@ -3594,7 +3672,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup419: joystream_node_runtime::OriginCaller
+     * Lookup424: joystream_node_runtime::OriginCaller
      **/
     JoystreamNodeRuntimeOriginCaller: {
         _enum: {
@@ -3603,7 +3681,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup420: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     * Lookup425: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
      **/
     FrameSupportDispatchRawOrigin: {
         _enum: {
@@ -3613,17 +3691,17 @@ exports.default = {
         }
     },
     /**
-     * Lookup421: sp_core::Void
+     * Lookup426: sp_core::Void
      **/
     SpCoreVoid: 'Null',
     /**
-     * Lookup422: pallet_utility::pallet::Error<T>
+     * Lookup427: pallet_utility::pallet::Error<T>
      **/
     PalletUtilityError: {
         _enum: ['TooManyCalls']
     },
     /**
-     * Lookup429: sp_consensus_babe::digests::PreDigest
+     * Lookup434: sp_consensus_babe::digests::PreDigest
      **/
     SpConsensusBabeDigestsPreDigest: {
         _enum: {
@@ -3634,7 +3712,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup430: sp_consensus_babe::digests::PrimaryPreDigest
+     * Lookup435: sp_consensus_babe::digests::PrimaryPreDigest
      **/
     SpConsensusBabeDigestsPrimaryPreDigest: {
         authorityIndex: 'u32',
@@ -3643,14 +3721,14 @@ exports.default = {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup431: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     * Lookup436: sp_consensus_babe::digests::SecondaryPlainPreDigest
      **/
     SpConsensusBabeDigestsSecondaryPlainPreDigest: {
         authorityIndex: 'u32',
         slot: 'u64'
     },
     /**
-     * Lookup432: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     * Lookup437: sp_consensus_babe::digests::SecondaryVRFPreDigest
      **/
     SpConsensusBabeDigestsSecondaryVRFPreDigest: {
         authorityIndex: 'u32',
@@ -3659,35 +3737,20 @@ exports.default = {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup434: sp_consensus_babe::BabeEpochConfiguration
+     * Lookup439: sp_consensus_babe::BabeEpochConfiguration
      **/
     SpConsensusBabeBabeEpochConfiguration: {
         c: '(u64,u64)',
         allowedSlots: 'SpConsensusBabeAllowedSlots'
     },
     /**
-     * Lookup435: pallet_babe::pallet::Error<T>
+     * Lookup441: pallet_babe::pallet::Error<T>
      **/
     PalletBabeError: {
         _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
     },
     /**
-     * Lookup437: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
-     **/
-    PalletAuthorshipUncleEntryItem: {
-        _enum: {
-            InclusionHeight: 'u32',
-            Uncle: '(H256,Option<AccountId32>)'
-        }
-    },
-    /**
-     * Lookup438: pallet_authorship::pallet::Error<T>
-     **/
-    PalletAuthorshipError: {
-        _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
-    },
-    /**
-     * Lookup440: pallet_balances::BalanceLock<Balance>
+     * Lookup443: pallet_balances::BalanceLock<Balance>
      **/
     PalletBalancesBalanceLock: {
         id: '[u8;8]',
@@ -3695,49 +3758,32 @@ exports.default = {
         reasons: 'PalletBalancesReasons'
     },
     /**
-     * Lookup441: pallet_balances::Reasons
+     * Lookup444: pallet_balances::Reasons
      **/
     PalletBalancesReasons: {
         _enum: ['Fee', 'Misc', 'All']
     },
     /**
-     * Lookup444: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     * Lookup447: pallet_balances::ReserveData<ReserveIdentifier, Balance>
      **/
     PalletBalancesReserveData: {
         id: '[u8;8]',
         amount: 'u128'
     },
     /**
-     * Lookup446: pallet_balances::Releases
-     **/
-    PalletBalancesReleases: {
-        _enum: ['V1_0_0', 'V2_0_0']
-    },
-    /**
-     * Lookup447: pallet_balances::pallet::Error<T, I>
+     * Lookup449: pallet_balances::pallet::Error<T, I>
      **/
     PalletBalancesError: {
         _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
     },
     /**
-     * Lookup449: pallet_transaction_payment::Releases
+     * Lookup451: pallet_transaction_payment::Releases
      **/
     PalletTransactionPaymentReleases: {
         _enum: ['V1Ancient', 'V2']
     },
     /**
-     * Lookup450: pallet_election_provider_multi_phase::Phase<Bn>
-     **/
-    PalletElectionProviderMultiPhasePhase: {
-        _enum: {
-            Off: 'Null',
-            Signed: 'Null',
-            Unsigned: '(bool,u32)',
-            Emergency: 'Null'
-        }
-    },
-    /**
-     * Lookup452: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     * Lookup452: pallet_election_provider_multi_phase::ReadySolution<T>
      **/
     PalletElectionProviderMultiPhaseReadySolution: {
         supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
@@ -3745,7 +3791,7 @@ exports.default = {
         compute: 'PalletElectionProviderMultiPhaseElectionCompute'
     },
     /**
-     * Lookup453: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     * Lookup454: pallet_election_provider_multi_phase::RoundSnapshot<T>
      **/
     PalletElectionProviderMultiPhaseRoundSnapshot: {
         voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
@@ -3764,7 +3810,7 @@ exports.default = {
      * Lookup462: pallet_election_provider_multi_phase::pallet::Error<T>
      **/
     PalletElectionProviderMultiPhaseError: {
-        _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
+        _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed', 'BoundNotMet', 'TooManyWinners']
     },
     /**
      * Lookup463: pallet_staking::StakingLedger<T>
@@ -3784,7 +3830,7 @@ exports.default = {
         era: 'Compact<u32>'
     },
     /**
-     * Lookup467: pallet_staking::Nominations<T>
+     * Lookup468: pallet_staking::Nominations<T>
      **/
     PalletStakingNominations: {
         targets: 'Vec<AccountId32>',
@@ -3792,25 +3838,19 @@ exports.default = {
         suppressed: 'bool'
     },
     /**
-     * Lookup468: pallet_staking::ActiveEraInfo
+     * Lookup469: pallet_staking::ActiveEraInfo
      **/
     PalletStakingActiveEraInfo: {
         index: 'u32',
         start: 'Option<u64>'
     },
     /**
-     * Lookup470: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     * Lookup471: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
      **/
     PalletStakingEraRewardPoints: {
         total: 'u32',
         individual: 'BTreeMap<AccountId32, u32>'
     },
-    /**
-     * Lookup474: pallet_staking::Forcing
-     **/
-    PalletStakingForcing: {
-        _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
-    },
     /**
      * Lookup476: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
      **/
@@ -3838,29 +3878,23 @@ exports.default = {
         paidOut: 'u128'
     },
     /**
-     * Lookup482: pallet_staking::Releases
-     **/
-    PalletStakingReleases: {
-        _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
-    },
-    /**
-     * Lookup483: pallet_staking::pallet::pallet::Error<T>
+     * Lookup482: pallet_staking::pallet::pallet::Error<T>
      **/
     PalletStakingPalletError: {
-        _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
+        _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BoundNotMet', 'BondingRestricted']
     },
     /**
-     * Lookup487: sp_core::crypto::KeyTypeId
+     * Lookup486: sp_core::crypto::KeyTypeId
      **/
     SpCoreCryptoKeyTypeId: '[u8;4]',
     /**
-     * Lookup488: pallet_session::pallet::Error<T>
+     * Lookup487: pallet_session::pallet::Error<T>
      **/
     PalletSessionError: {
         _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
     },
     /**
-     * Lookup490: pallet_grandpa::StoredState<N>
+     * Lookup489: pallet_grandpa::StoredState<N>
      **/
     PalletGrandpaStoredState: {
         _enum: {
@@ -3877,7 +3911,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup491: pallet_grandpa::StoredPendingChange<N, Limit>
+     * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
      **/
     PalletGrandpaStoredPendingChange: {
         scheduledAt: 'u32',
@@ -3886,39 +3920,33 @@ exports.default = {
         forced: 'Option<u32>'
     },
     /**
-     * Lookup493: pallet_grandpa::pallet::Error<T>
+     * Lookup492: pallet_grandpa::pallet::Error<T>
      **/
     PalletGrandpaError: {
         _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
     },
     /**
-     * Lookup499: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
      **/
     PalletImOnlineBoundedOpaqueNetworkState: {
         peerId: 'Bytes',
         externalAddresses: 'Vec<Bytes>'
     },
     /**
-     * Lookup503: pallet_im_online::pallet::Error<T>
+     * Lookup502: pallet_im_online::pallet::Error<T>
      **/
     PalletImOnlineError: {
         _enum: ['InvalidKey', 'DuplicatedHeartbeat']
     },
     /**
-     * Lookup504: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
      **/
     SpStakingOffenceOffenceDetails: {
         offender: '(AccountId32,PalletStakingExposure)',
         reporters: 'Vec<AccountId32>'
     },
     /**
-     * Lookup507: pallet_sudo::pallet::Error<T>
-     **/
-    PalletSudoError: {
-        _enum: ['RequireSudo']
-    },
-    /**
-     * Lookup508: pallet_bags_list::list::Node<T, I>
+     * Lookup506: pallet_bags_list::list::Node<T, I>
      **/
     PalletBagsListListNode: {
         id: 'AccountId32',
@@ -3928,14 +3956,14 @@ exports.default = {
         score: 'u64'
     },
     /**
-     * Lookup509: pallet_bags_list::list::Bag<T, I>
+     * Lookup507: pallet_bags_list::list::Bag<T, I>
      **/
     PalletBagsListListBag: {
         head: 'Option<AccountId32>',
         tail: 'Option<AccountId32>'
     },
     /**
-     * Lookup510: pallet_bags_list::pallet::Error<T, I>
+     * Lookup508: pallet_bags_list::pallet::Error<T, I>
      **/
     PalletBagsListError: {
         _enum: {
@@ -3943,25 +3971,25 @@ exports.default = {
         }
     },
     /**
-     * Lookup511: pallet_bags_list::list::ListError
+     * Lookup509: pallet_bags_list::list::ListError
      **/
     PalletBagsListListListError: {
         _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
     },
     /**
-     * Lookup514: pallet_vesting::Releases
+     * Lookup512: pallet_vesting::Releases
      **/
     PalletVestingReleases: {
         _enum: ['V0', 'V1']
     },
     /**
-     * Lookup515: pallet_vesting::pallet::Error<T>
+     * Lookup513: pallet_vesting::pallet::Error<T>
      **/
     PalletVestingError: {
         _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
     },
     /**
-     * Lookup517: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32, MaxApprovals>
      **/
     PalletMultisigMultisig: {
         when: 'PalletMultisigTimepoint',
@@ -3970,20 +3998,20 @@ exports.default = {
         approvals: 'Vec<AccountId32>'
     },
     /**
-     * Lookup519: pallet_multisig::pallet::Error<T>
+     * Lookup517: pallet_multisig::pallet::Error<T>
      **/
     PalletMultisigError: {
         _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
     },
     /**
-     * Lookup520: pallet_council::CouncilStageUpdate<BlockNumber>
+     * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
      **/
     PalletCouncilCouncilStageUpdate: {
         stage: 'PalletCouncilCouncilStage',
         changedAt: 'u32'
     },
     /**
-     * Lookup521: pallet_council::CouncilStage<BlockNumber>
+     * Lookup519: pallet_council::CouncilStage<BlockNumber>
      **/
     PalletCouncilCouncilStage: {
         _enum: {
@@ -3993,26 +4021,26 @@ exports.default = {
         }
     },
     /**
-     * Lookup522: pallet_council::CouncilStageAnnouncing<BlockNumber>
+     * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
      **/
     PalletCouncilCouncilStageAnnouncing: {
         candidatesCount: 'u32',
         endsAt: 'u32'
     },
     /**
-     * Lookup523: pallet_council::CouncilStageElection
+     * Lookup521: pallet_council::CouncilStageElection
      **/
     PalletCouncilCouncilStageElection: {
         candidatesCount: 'u32'
     },
     /**
-     * Lookup524: pallet_council::CouncilStageIdle<BlockNumber>
+     * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
      **/
     PalletCouncilCouncilStageIdle: {
         endsAt: 'u32'
     },
     /**
-     * Lookup526: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
      **/
     PalletCouncilCouncilMember: {
         stakingAccountId: 'AccountId32',
@@ -4023,7 +4051,7 @@ exports.default = {
         unpaidReward: 'u128'
     },
     /**
-     * Lookup528: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
      **/
     PalletCouncilCandidate: {
         stakingAccountId: 'AccountId32',
@@ -4034,13 +4062,13 @@ exports.default = {
         noteHash: 'Option<H256>'
     },
     /**
-     * Lookup529: pallet_council::Error<T>
+     * Lookup527: pallet_council::Error<T>
      **/
     PalletCouncilError: {
         _enum: ['ArithmeticError', 'BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup530: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, bounded_collections::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStage: {
         _enum: {
@@ -4050,7 +4078,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup532: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
      **/
     PalletReferendumReferendumStageVoting: {
         started: 'u32',
@@ -4059,7 +4087,7 @@ exports.default = {
         endsAt: 'u32'
     },
     /**
-     * Lookup533: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, bounded_collections::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStageRevealing: {
         started: 'u32',
@@ -4069,7 +4097,7 @@ exports.default = {
         endsAt: 'u32'
     },
     /**
-     * Lookup534: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
      **/
     PalletReferendumCastVote: {
         commitment: 'H256',
@@ -4078,13 +4106,13 @@ exports.default = {
         voteFor: 'Option<u64>'
     },
     /**
-     * Lookup535: pallet_referendum::Error<T, I>
+     * Lookup533: pallet_referendum::Error<T, I>
      **/
     PalletReferendumError: {
-        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden']
+        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden', 'AccountAlreadyOptedOutOfVoting']
     },
     /**
-     * Lookup536: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+     * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
      **/
     PalletMembershipMembershipObject: {
         handleHash: 'H256',
@@ -4094,20 +4122,20 @@ exports.default = {
         invites: 'u32'
     },
     /**
-     * Lookup537: pallet_membership::StakingAccountMemberBinding<MemberId>
+     * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
      **/
     PalletMembershipStakingAccountMemberBinding: {
         memberId: 'u64',
         confirmed: 'bool'
     },
     /**
-     * Lookup538: pallet_membership::Error<T>
+     * Lookup536: pallet_membership::Error<T>
      **/
     PalletMembershipError: {
-        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift']
+        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift', 'InsufficientBalanceToCoverPayment']
     },
     /**
-     * Lookup539: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletForumCategory: {
         titleHash: 'H256',
@@ -4120,7 +4148,7 @@ exports.default = {
         stickyThreadIds: 'BTreeSet<u64>'
     },
     /**
-     * Lookup541: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumThread: {
         categoryId: 'u64',
@@ -4129,7 +4157,7 @@ exports.default = {
         numberOfEditablePosts: 'u64'
     },
     /**
-     * Lookup542: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumPost: {
         threadId: 'u64',
@@ -4139,19 +4167,19 @@ exports.default = {
         lastEdited: 'u32'
     },
     /**
-     * Lookup543: pallet_forum::Error<T>
+     * Lookup541: pallet_forum::Error<T>
      **/
     PalletForumError: {
         _enum: ['ArithmeticError', 'OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero', 'MaxNumberOfStickiedThreadsExceeded']
     },
     /**
-     * Lookup544: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+     * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
      **/
     PalletConstitutionConstitutionInfo: {
         textHash: 'H256'
     },
     /**
-     * Lookup545: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyRecord: {
         creationParams: 'PalletBountyBountyParametersBoundedBTreeSet',
@@ -4161,7 +4189,7 @@ exports.default = {
         hasUnpaidOracleReward: 'bool'
     },
     /**
-     * Lookup547: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyParametersBoundedBTreeSet: {
         oracle: 'PalletBountyBountyActor',
@@ -4173,7 +4201,7 @@ exports.default = {
         fundingType: 'PalletBountyFundingType'
     },
     /**
-     * Lookup548: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup546: pallet_bounty::AssuranceContractType<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyAssuranceContractTypeBoundedBTreeSet: {
         _enum: {
@@ -4182,7 +4210,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup549: pallet_bounty::BountyMilestone<BlockNumber>
+     * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
      **/
     PalletBountyBountyMilestone: {
         _enum: {
@@ -4199,14 +4227,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup551: pallet_bounty::Contribution<T>
+     * Lookup549: pallet_bounty::Contribution<T>
      **/
     PalletBountyContribution: {
         amount: 'u128',
         funderStateBloatBondAmount: 'u128'
     },
     /**
-     * Lookup552: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
      **/
     PalletBountyEntryRecord: {
         memberId: 'u64',
@@ -4215,13 +4243,19 @@ exports.default = {
         workSubmitted: 'bool'
     },
     /**
-     * Lookup553: pallet_bounty::Error<T>
+     * Lookup551: pallet_bounty::Error<T>
      **/
     PalletBountyError: {
         _enum: ['ArithmeticError', 'MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
     },
     /**
-     * Lookup555: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup552: pallet_joystream_utility::Error<T>
+     **/
+    PalletJoystreamUtilityError: {
+        _enum: ['InsufficientFundsForBudgetUpdate', 'ZeroTokensBurn', 'InsufficientFundsForBurn']
+    },
+    /**
+     * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentVideoRecord: {
         inChannel: 'u64',
@@ -4230,7 +4264,7 @@ exports.default = {
         videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup556: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+     * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
      **/
     PalletContentNftTypesOwnedNft: {
         owner: 'PalletContentNftTypesNftOwner',
@@ -4239,7 +4273,7 @@ exports.default = {
         openAuctionsNonce: 'u64'
     },
     /**
-     * Lookup557: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+     * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>
      **/
     PalletContentNftTypesTransactionalStatusRecord: {
         _enum: {
@@ -4251,7 +4285,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup558: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesEnglishAuctionRecord: {
         startingPrice: 'u128',
@@ -4264,14 +4298,14 @@ exports.default = {
         topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
     },
     /**
-     * Lookup561: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionBid: {
         amount: 'u128',
         bidderId: 'u64'
     },
     /**
-     * Lookup562: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesOpenAuctionRecord: {
         startingPrice: 'u128',
@@ -4282,7 +4316,7 @@ exports.default = {
         start: 'u32'
     },
     /**
-     * Lookup563: pallet_content::nft::types::NftOwner<MemberId>
+     * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
      **/
     PalletContentNftTypesNftOwner: {
         _enum: {
@@ -4291,7 +4325,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup566: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+     * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
      **/
     PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
         curators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -4299,7 +4333,7 @@ exports.default = {
         permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>'
     },
     /**
-     * Lookup573: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
      **/
     PalletContentNftTypesOpenAuctionBidRecord: {
         amount: 'u128',
@@ -4307,13 +4341,13 @@ exports.default = {
         auctionId: 'u64'
     },
     /**
-     * Lookup574: pallet_content::errors::Error<T>
+     * Lookup572: pallet_content::errors::Error<T>
      **/
     PalletContentErrorsError: {
-        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
+        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales', 'ChannelTransfersBlockedDuringActiveAmm']
     },
     /**
-     * Lookup575: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+     * Lookup573: pallet_storage::BagRecord<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
      **/
     PalletStorageBagRecord: {
         storedBy: 'BTreeSet<u64>',
@@ -4322,7 +4356,7 @@ exports.default = {
         objectsNumber: 'u64'
     },
     /**
-     * Lookup578: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketRecord: {
         operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
@@ -4331,7 +4365,7 @@ exports.default = {
         assignedBags: 'u64'
     },
     /**
-     * Lookup579: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketOperatorStatus: {
         _enum: {
@@ -4341,14 +4375,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup581: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+     * Lookup579: pallet_storage::DynamicBagCreationPolicy<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, V, S>>
      **/
     PalletStorageDynamicBagCreationPolicy: {
         numberOfStorageBuckets: 'u32',
         families: 'BTreeMap<u64, u32>'
     },
     /**
-     * Lookup584: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletStorageDataObject: {
         _alias: {
@@ -4360,13 +4394,13 @@ exports.default = {
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup585: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketFamilyRecord: {
         nextDistributionBucketIndex: 'u64'
     },
     /**
-     * Lookup586: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup584: pallet_storage::DistributionBucketRecord<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletStorageDistributionBucketRecord: {
         acceptingNewBags: 'bool',
@@ -4376,13 +4410,13 @@ exports.default = {
         assignedBags: 'u64'
     },
     /**
-     * Lookup589: pallet_storage::Error<T>
+     * Lookup587: pallet_storage::Error<T>
      **/
     PalletStorageError: {
         _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'MaxNumberOfOperatorsPerDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
     },
     /**
-     * Lookup590: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+     * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, bounded_collections::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
      **/
     PalletProjectTokenAccountData: {
         vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
@@ -4393,14 +4427,14 @@ exports.default = {
         lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
     },
     /**
-     * Lookup591: pallet_project_token::types::StakingStatus<Balance>
+     * Lookup589: pallet_project_token::types::StakingStatus<Balance>
      **/
     PalletProjectTokenStakingStatus: {
         splitId: 'u32',
         amount: 'u128'
     },
     /**
-     * Lookup593: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
      **/
     PalletProjectTokenVestingSchedule: {
         linearVestingStartBlock: 'u32',
@@ -4410,7 +4444,7 @@ exports.default = {
         burnedAmount: 'u128'
     },
     /**
-     * Lookup600: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
      **/
     PalletProjectTokenTokenData: {
         totalSupply: 'u128',
@@ -4418,15 +4452,15 @@ exports.default = {
         nextSaleId: 'u32',
         sale: 'Option<PalletProjectTokenTokenSale>',
         transferPolicy: 'PalletProjectTokenTransferPolicy',
-        symbol: 'H256',
         patronageInfo: 'PalletProjectTokenPatronageData',
         accountsNumber: 'u64',
         revenueSplitRate: 'Permill',
         revenueSplit: 'PalletProjectTokenRevenueSplitState',
-        nextRevenueSplitId: 'u32'
+        nextRevenueSplitId: 'u32',
+        ammCurve: 'Option<PalletProjectTokenAmmCurve>'
     },
     /**
-     * Lookup601: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitState: {
         _enum: {
@@ -4435,7 +4469,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup602: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitInfo: {
         allocation: 'u128',
@@ -4443,14 +4477,14 @@ exports.default = {
         dividendsClaimed: 'u128'
     },
     /**
-     * Lookup603: pallet_project_token::types::Timeline<BlockNumber>
+     * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
      **/
     PalletProjectTokenTimeline: {
         start: 'u32',
         duration: 'u32'
     },
     /**
-     * Lookup605: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
      **/
     PalletProjectTokenPatronageData: {
         rate: 'Perquintill',
@@ -4458,13 +4492,13 @@ exports.default = {
         lastUnclaimedPatronageTallyBlock: 'u32'
     },
     /**
-     * Lookup607: pallet_project_token::errors::Error<T>
+     * Lookup606: pallet_project_token::errors::Error<T>
      **/
     PalletProjectTokenErrorsError: {
-        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
+        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'TransferDestinationMemberDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'CannotInitSaleIfAmmIsActive', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount', 'NotInAmmState', 'InvalidCurveParameters', 'DeadlineExpired', 'SlippageToleranceExceeded', 'InsufficientTokenBalance', 'OutstandingAmmProvidedSupplyTooLarge']
     },
     /**
-     * Lookup608: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     * Lookup607: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
      **/
     PalletProposalsEngineProposal: {
         parameters: 'PalletProposalsEngineProposalParameters',
@@ -4477,7 +4511,7 @@ exports.default = {
         stakingAccountId: 'Option<AccountId32>'
     },
     /**
-     * Lookup609: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     * Lookup608: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
      **/
     PalletProposalsEngineProposalParameters: {
         votingPeriod: 'u32',
@@ -4490,7 +4524,7 @@ exports.default = {
         constitutionality: 'u32'
     },
     /**
-     * Lookup610: pallet_proposals_engine::types::VotingResults
+     * Lookup609: pallet_proposals_engine::types::VotingResults
      **/
     PalletProposalsEngineVotingResults: {
         abstentions: 'u32',
@@ -4499,13 +4533,13 @@ exports.default = {
         slashes: 'u32'
     },
     /**
-     * Lookup613: pallet_proposals_engine::Error<T>
+     * Lookup612: pallet_proposals_engine::Error<T>
      **/
     PalletProposalsEngineError: {
         _enum: ['ArithmeticError', 'EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember', 'MaxDispatchableCallCodeSizeExceeded']
     },
     /**
-     * Lookup614: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup613: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionDiscussionThread: {
         activatedAt: 'u32',
@@ -4513,7 +4547,7 @@ exports.default = {
         mode: 'PalletProposalsDiscussionThreadModeBoundedBTreeSet'
     },
     /**
-     * Lookup616: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup615: pallet_proposals_discussion::types::ThreadMode<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
         _enum: {
@@ -4522,7 +4556,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup617: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup616: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProposalsDiscussionDiscussionPost: {
         authorId: 'u64',
@@ -4530,19 +4564,19 @@ exports.default = {
         lastEdited: 'u32'
     },
     /**
-     * Lookup618: pallet_proposals_discussion::Error<T>
+     * Lookup617: pallet_proposals_discussion::Error<T>
      **/
     PalletProposalsDiscussionError: {
         _enum: ['ArithmeticError', 'ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
     },
     /**
-     * Lookup619: pallet_proposals_codex::Error<T>
+     * Lookup618: pallet_proposals_codex::Error<T>
      **/
     PalletProposalsCodexError: {
         _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError']
     },
     /**
-     * Lookup620: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+     * Lookup619: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
      **/
     PalletWorkingGroupOpening: {
         openingType: 'PalletWorkingGroupOpeningType',
@@ -4553,7 +4587,7 @@ exports.default = {
         creationStake: 'u128'
     },
     /**
-     * Lookup621: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+     * Lookup620: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
      **/
     PalletWorkingGroupJobApplication: {
         roleAccountId: 'AccountId32',
@@ -4564,7 +4598,7 @@ exports.default = {
         openingId: 'u64'
     },
     /**
-     * Lookup622: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     * Lookup621: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
      **/
     PalletWorkingGroupGroupWorker: {
         memberId: 'u64',
@@ -4578,13 +4612,13 @@ exports.default = {
         createdAt: 'u32'
     },
     /**
-     * Lookup623: pallet_working_group::errors::Error<T, I>
+     * Lookup622: pallet_working_group::errors::Error<T, I>
      **/
     PalletWorkingGroupErrorsError: {
         _enum: ['ArithmeticError', 'StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup633: sp_runtime::MultiSignature
+     * Lookup632: sp_runtime::MultiSignature
      **/
     SpRuntimeMultiSignature: {
         _enum: {
@@ -4594,39 +4628,39 @@ exports.default = {
         }
     },
     /**
-     * Lookup634: sp_core::ecdsa::Signature
+     * Lookup633: sp_core::ecdsa::Signature
      **/
     SpCoreEcdsaSignature: '[u8;65]',
     /**
-     * Lookup637: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     * Lookup636: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
      **/
     FrameSystemExtensionsCheckNonZeroSender: 'Null',
     /**
-     * Lookup638: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     * Lookup637: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
      **/
     FrameSystemExtensionsCheckSpecVersion: 'Null',
     /**
-     * Lookup639: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     * Lookup638: frame_system::extensions::check_tx_version::CheckTxVersion<T>
      **/
     FrameSystemExtensionsCheckTxVersion: 'Null',
     /**
-     * Lookup640: frame_system::extensions::check_genesis::CheckGenesis<T>
+     * Lookup639: frame_system::extensions::check_genesis::CheckGenesis<T>
      **/
     FrameSystemExtensionsCheckGenesis: 'Null',
     /**
-     * Lookup643: frame_system::extensions::check_nonce::CheckNonce<T>
+     * Lookup642: frame_system::extensions::check_nonce::CheckNonce<T>
      **/
     FrameSystemExtensionsCheckNonce: 'Compact<u32>',
     /**
-     * Lookup644: frame_system::extensions::check_weight::CheckWeight<T>
+     * Lookup643: frame_system::extensions::check_weight::CheckWeight<T>
      **/
     FrameSystemExtensionsCheckWeight: 'Null',
     /**
-     * Lookup645: pallet_transaction_payment::ChargeTransactionPayment<T>
+     * Lookup644: pallet_transaction_payment::ChargeTransactionPayment<T>
      **/
     PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
     /**
-     * Lookup646: joystream_node_runtime::Runtime
+     * Lookup645: joystream_node_runtime::Runtime
      **/
     JoystreamNodeRuntimeRuntime: 'Null'
 };
diff --git a/node_modules/@joystream/types/lib/mjs/augment/lookup.js b/node_modules/@joystream/types/lib/mjs/augment/lookup.js
index b7d08da..e181ecd 100644
--- a/node_modules/@joystream/types/lib/mjs/augment/lookup.js
+++ b/node_modules/@joystream/types/lib/mjs/augment/lookup.js
@@ -22,21 +22,28 @@ export default {
         feeFrozen: 'u128'
     },
     /**
-     * Lookup7: frame_support::weights::PerDispatchClass<T>
+     * Lookup7: frame_support::dispatch::PerDispatchClass<sp_weights::weight_v2::Weight>
      **/
-    FrameSupportWeightsPerDispatchClassU64: {
-        normal: 'u64',
-        operational: 'u64',
-        mandatory: 'u64'
+    FrameSupportDispatchPerDispatchClassWeight: {
+        normal: 'SpWeightsWeightV2Weight',
+        operational: 'SpWeightsWeightV2Weight',
+        mandatory: 'SpWeightsWeightV2Weight'
     },
     /**
-     * Lookup11: sp_runtime::generic::digest::Digest
+     * Lookup8: sp_weights::weight_v2::Weight
+     **/
+    SpWeightsWeightV2Weight: {
+        refTime: 'Compact<u64>',
+        proofSize: 'Compact<u64>'
+    },
+    /**
+     * Lookup13: sp_runtime::generic::digest::Digest
      **/
     SpRuntimeDigest: {
         logs: 'Vec<SpRuntimeDigestDigestItem>'
     },
     /**
-     * Lookup13: sp_runtime::generic::digest::DigestItem
+     * Lookup15: sp_runtime::generic::digest::DigestItem
      **/
     SpRuntimeDigestDigestItem: {
         _enum: {
@@ -52,7 +59,7 @@ export default {
         }
     },
     /**
-     * Lookup16: frame_system::EventRecord<joystream_node_runtime::Event, primitive_types::H256>
+     * Lookup18: frame_system::EventRecord<joystream_node_runtime::RuntimeEvent, primitive_types::H256>
      **/
     FrameSystemEventRecord: {
         phase: 'FrameSystemPhase',
@@ -60,16 +67,16 @@ export default {
         topics: 'Vec<H256>'
     },
     /**
-     * Lookup18: frame_system::pallet::Event<T>
+     * Lookup20: frame_system::pallet::Event<T>
      **/
     FrameSystemEvent: {
         _enum: {
             ExtrinsicSuccess: {
-                dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+                dispatchInfo: 'FrameSupportDispatchDispatchInfo',
             },
             ExtrinsicFailed: {
                 dispatchError: 'SpRuntimeDispatchError',
-                dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+                dispatchInfo: 'FrameSupportDispatchDispatchInfo',
             },
             CodeUpdated: 'Null',
             NewAccount: {
@@ -88,27 +95,27 @@ export default {
         }
     },
     /**
-     * Lookup19: frame_support::weights::DispatchInfo
+     * Lookup21: frame_support::dispatch::DispatchInfo
      **/
-    FrameSupportWeightsDispatchInfo: {
-        weight: 'u64',
-        class: 'FrameSupportWeightsDispatchClass',
-        paysFee: 'FrameSupportWeightsPays'
+    FrameSupportDispatchDispatchInfo: {
+        weight: 'SpWeightsWeightV2Weight',
+        class: 'FrameSupportDispatchDispatchClass',
+        paysFee: 'FrameSupportDispatchPays'
     },
     /**
-     * Lookup20: frame_support::weights::DispatchClass
+     * Lookup22: frame_support::dispatch::DispatchClass
      **/
-    FrameSupportWeightsDispatchClass: {
+    FrameSupportDispatchDispatchClass: {
         _enum: ['Normal', 'Operational', 'Mandatory']
     },
     /**
-     * Lookup21: frame_support::weights::Pays
+     * Lookup23: frame_support::dispatch::Pays
      **/
-    FrameSupportWeightsPays: {
+    FrameSupportDispatchPays: {
         _enum: ['Yes', 'No']
     },
     /**
-     * Lookup22: sp_runtime::DispatchError
+     * Lookup24: sp_runtime::DispatchError
      **/
     SpRuntimeDispatchError: {
         _enum: {
@@ -120,37 +127,40 @@ export default {
             NoProviders: 'Null',
             TooManyConsumers: 'Null',
             Token: 'SpRuntimeTokenError',
-            Arithmetic: 'SpRuntimeArithmeticError',
-            Transactional: 'SpRuntimeTransactionalError'
+            Arithmetic: 'SpArithmeticArithmeticError',
+            Transactional: 'SpRuntimeTransactionalError',
+            Exhausted: 'Null',
+            Corruption: 'Null',
+            Unavailable: 'Null'
         }
     },
     /**
-     * Lookup23: sp_runtime::ModuleError
+     * Lookup25: sp_runtime::ModuleError
      **/
     SpRuntimeModuleError: {
         index: 'u8',
         error: '[u8;4]'
     },
     /**
-     * Lookup24: sp_runtime::TokenError
+     * Lookup26: sp_runtime::TokenError
      **/
     SpRuntimeTokenError: {
         _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', 'Unsupported']
     },
     /**
-     * Lookup25: sp_runtime::ArithmeticError
+     * Lookup27: sp_arithmetic::ArithmeticError
      **/
-    SpRuntimeArithmeticError: {
+    SpArithmeticArithmeticError: {
         _enum: ['Underflow', 'Overflow', 'DivisionByZero']
     },
     /**
-     * Lookup26: sp_runtime::TransactionalError
+     * Lookup28: sp_runtime::TransactionalError
      **/
     SpRuntimeTransactionalError: {
         _enum: ['LimitReached', 'NoLayer']
     },
     /**
-     * Lookup27: pallet_utility::pallet::Event
+     * Lookup29: pallet_utility::pallet::Event
      **/
     PalletUtilityEvent: {
         _enum: {
@@ -170,7 +180,7 @@ export default {
         }
     },
     /**
-     * Lookup30: pallet_balances::pallet::Event<T, I>
+     * Lookup32: pallet_balances::pallet::Event<T, I>
      **/
     PalletBalancesEvent: {
         _enum: {
@@ -221,23 +231,38 @@ export default {
         }
     },
     /**
-     * Lookup31: frame_support::traits::tokens::misc::BalanceStatus
+     * Lookup33: frame_support::traits::tokens::misc::BalanceStatus
      **/
     FrameSupportTokensMiscBalanceStatus: {
         _enum: ['Free', 'Reserved']
     },
     /**
-     * Lookup32: pallet_election_provider_multi_phase::pallet::Event<T>
+     * Lookup34: pallet_transaction_payment::pallet::Event<T>
+     **/
+    PalletTransactionPaymentEvent: {
+        _enum: {
+            TransactionFeePaid: {
+                who: 'AccountId32',
+                actualFee: 'u128',
+                tip: 'u128'
+            }
+        }
+    },
+    /**
+     * Lookup35: pallet_election_provider_multi_phase::pallet::Event<T>
      **/
     PalletElectionProviderMultiPhaseEvent: {
         _enum: {
             SolutionStored: {
-                electionCompute: 'PalletElectionProviderMultiPhaseElectionCompute',
+                compute: 'PalletElectionProviderMultiPhaseElectionCompute',
+                origin: 'Option<AccountId32>',
                 prevEjected: 'bool',
             },
             ElectionFinalized: {
-                electionCompute: 'Option<PalletElectionProviderMultiPhaseElectionCompute>',
+                compute: 'PalletElectionProviderMultiPhaseElectionCompute',
+                score: 'SpNposElectionsElectionScore',
             },
+            ElectionFailed: 'Null',
             Rewarded: {
                 account: 'AccountId32',
                 value: 'u128',
@@ -246,49 +271,113 @@ export default {
                 account: 'AccountId32',
                 value: 'u128',
             },
-            SignedPhaseStarted: {
-                round: 'u32',
-            },
-            UnsignedPhaseStarted: {
+            PhaseTransitioned: {
+                from: 'PalletElectionProviderMultiPhasePhase',
+                to: 'PalletElectionProviderMultiPhasePhase',
                 round: 'u32'
             }
         }
     },
     /**
-     * Lookup33: pallet_election_provider_multi_phase::ElectionCompute
+     * Lookup36: pallet_election_provider_multi_phase::ElectionCompute
      **/
     PalletElectionProviderMultiPhaseElectionCompute: {
         _enum: ['OnChain', 'Signed', 'Unsigned', 'Fallback', 'Emergency']
     },
     /**
-     * Lookup36: pallet_staking::pallet::pallet::Event<T>
+     * Lookup39: sp_npos_elections::ElectionScore
+     **/
+    SpNposElectionsElectionScore: {
+        minimalStake: 'u128',
+        sumStake: 'u128',
+        sumStakeSquared: 'u128'
+    },
+    /**
+     * Lookup40: pallet_election_provider_multi_phase::Phase<Bn>
+     **/
+    PalletElectionProviderMultiPhasePhase: {
+        _enum: {
+            Off: 'Null',
+            Signed: 'Null',
+            Unsigned: '(bool,u32)',
+            Emergency: 'Null'
+        }
+    },
+    /**
+     * Lookup42: pallet_staking::pallet::pallet::Event<T>
      **/
     PalletStakingPalletEvent: {
         _enum: {
-            EraPaid: '(u32,u128,u128)',
-            Rewarded: '(AccountId32,u128)',
-            Slashed: '(AccountId32,u128)',
-            OldSlashingReportDiscarded: 'u32',
+            EraPaid: {
+                eraIndex: 'u32',
+                validatorPayout: 'u128',
+                remainder: 'u128',
+            },
+            Rewarded: {
+                stash: 'AccountId32',
+                amount: 'u128',
+            },
+            Slashed: {
+                staker: 'AccountId32',
+                amount: 'u128',
+            },
+            SlashReported: {
+                validator: 'AccountId32',
+                fraction: 'Perbill',
+                slashEra: 'u32',
+            },
+            OldSlashingReportDiscarded: {
+                sessionIndex: 'u32',
+            },
             StakersElected: 'Null',
-            Bonded: '(AccountId32,u128)',
-            Unbonded: '(AccountId32,u128)',
-            Withdrawn: '(AccountId32,u128)',
-            Kicked: '(AccountId32,AccountId32)',
+            Bonded: {
+                stash: 'AccountId32',
+                amount: 'u128',
+            },
+            Unbonded: {
+                stash: 'AccountId32',
+                amount: 'u128',
+            },
+            Withdrawn: {
+                stash: 'AccountId32',
+                amount: 'u128',
+            },
+            Kicked: {
+                nominator: 'AccountId32',
+                stash: 'AccountId32',
+            },
             StakingElectionFailed: 'Null',
-            Chilled: 'AccountId32',
-            PayoutStarted: '(u32,AccountId32)',
-            ValidatorPrefsSet: '(AccountId32,PalletStakingValidatorPrefs)'
+            Chilled: {
+                stash: 'AccountId32',
+            },
+            PayoutStarted: {
+                eraIndex: 'u32',
+                validatorStash: 'AccountId32',
+            },
+            ValidatorPrefsSet: {
+                stash: 'AccountId32',
+                prefs: 'PalletStakingValidatorPrefs',
+            },
+            ForceEra: {
+                mode: 'PalletStakingForcing'
+            }
         }
     },
     /**
-     * Lookup37: pallet_staking::ValidatorPrefs
+     * Lookup44: pallet_staking::ValidatorPrefs
      **/
     PalletStakingValidatorPrefs: {
         commission: 'Compact<Perbill>',
         blocked: 'bool'
     },
     /**
-     * Lookup40: pallet_session::pallet::Event
+     * Lookup46: pallet_staking::Forcing
+     **/
+    PalletStakingForcing: {
+        _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
+    },
+    /**
+     * Lookup47: pallet_session::pallet::Event
      **/
     PalletSessionEvent: {
         _enum: {
@@ -298,7 +387,7 @@ export default {
         }
     },
     /**
-     * Lookup41: pallet_grandpa::pallet::Event
+     * Lookup48: pallet_grandpa::pallet::Event
      **/
     PalletGrandpaEvent: {
         _enum: {
@@ -310,15 +399,15 @@ export default {
         }
     },
     /**
-     * Lookup44: sp_finality_grandpa::app::Public
+     * Lookup51: sp_finality_grandpa::app::Public
      **/
     SpFinalityGrandpaAppPublic: 'SpCoreEd25519Public',
     /**
-     * Lookup45: sp_core::ed25519::Public
+     * Lookup52: sp_core::ed25519::Public
      **/
     SpCoreEd25519Public: '[u8;32]',
     /**
-     * Lookup46: pallet_im_online::pallet::Event<T>
+     * Lookup53: pallet_im_online::pallet::Event<T>
      **/
     PalletImOnlineEvent: {
         _enum: {
@@ -332,15 +421,15 @@ export default {
         }
     },
     /**
-     * Lookup47: pallet_im_online::sr25519::app_sr25519::Public
+     * Lookup54: pallet_im_online::sr25519::app_sr25519::Public
      **/
     PalletImOnlineSr25519AppSr25519Public: 'SpCoreSr25519Public',
     /**
-     * Lookup48: sp_core::sr25519::Public
+     * Lookup55: sp_core::sr25519::Public
      **/
     SpCoreSr25519Public: '[u8;32]',
     /**
-     * Lookup51: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
+     * Lookup58: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingExposure: {
         total: 'Compact<u128>',
@@ -348,14 +437,14 @@ export default {
         others: 'Vec<PalletStakingIndividualExposure>'
     },
     /**
-     * Lookup54: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
+     * Lookup61: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingIndividualExposure: {
         who: 'AccountId32',
         value: 'Compact<u128>'
     },
     /**
-     * Lookup55: pallet_offences::pallet::Event
+     * Lookup62: pallet_offences::pallet::Event
      **/
     PalletOffencesEvent: {
         _enum: {
@@ -366,23 +455,7 @@ export default {
         }
     },
     /**
-     * Lookup57: pallet_sudo::pallet::Event<T>
-     **/
-    PalletSudoEvent: {
-        _enum: {
-            Sudid: {
-                sudoResult: 'Result<Null, SpRuntimeDispatchError>',
-            },
-            KeyChanged: {
-                oldSudoer: 'Option<AccountId32>',
-            },
-            SudoAsDone: {
-                sudoResult: 'Result<Null, SpRuntimeDispatchError>'
-            }
-        }
-    },
-    /**
-     * Lookup59: pallet_bags_list::pallet::Event<T, I>
+     * Lookup64: pallet_bags_list::pallet::Event<T, I>
      **/
     PalletBagsListEvent: {
         _enum: {
@@ -398,7 +471,7 @@ export default {
         }
     },
     /**
-     * Lookup60: pallet_vesting::pallet::Event<T>
+     * Lookup65: pallet_vesting::pallet::Event<T>
      **/
     PalletVestingEvent: {
         _enum: {
@@ -412,7 +485,7 @@ export default {
         }
     },
     /**
-     * Lookup61: pallet_multisig::pallet::Event<T>
+     * Lookup66: pallet_multisig::pallet::Event<T>
      **/
     PalletMultisigEvent: {
         _enum: {
@@ -443,14 +516,14 @@ export default {
         }
     },
     /**
-     * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+     * Lookup67: pallet_multisig::Timepoint<BlockNumber>
      **/
     PalletMultisigTimepoint: {
         height: 'u32',
         index: 'u32'
     },
     /**
-     * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     * Lookup68: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletCouncilRawEvent: {
         _enum: {
@@ -476,7 +549,7 @@ export default {
         }
     },
     /**
-     * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     * Lookup70: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
      **/
     PalletReferendumRawEvent: {
         _enum: {
@@ -486,26 +559,27 @@ export default {
             ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
             VoteCast: '(AccountId32,H256,u128)',
             VoteRevealed: '(AccountId32,u64,Bytes)',
-            StakeReleased: 'AccountId32'
+            StakeReleased: 'AccountId32',
+            AccountOptedOutOfVoting: 'AccountId32'
         }
     },
     /**
-     * Lookup66: pallet_referendum::Instance1
+     * Lookup71: pallet_referendum::Instance1
      **/
     PalletReferendumInstance1: 'Null',
     /**
-     * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
+     * Lookup73: pallet_referendum::OptionResult<MemberId, VotePower>
      **/
     PalletReferendumOptionResult: {
         optionId: 'u64',
         votePower: 'u128'
     },
     /**
-     * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     * Lookup74: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletMembershipRawEvent: {
         _enum: {
-            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters)',
+            MemberInvited: '(u64,PalletMembershipInviteMembershipParameters,u128)',
             MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
             MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
             MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
@@ -520,12 +594,12 @@ export default {
             StakingAccountAdded: '(AccountId32,u64)',
             StakingAccountRemoved: '(AccountId32,u64)',
             StakingAccountConfirmed: '(AccountId32,u64)',
-            MemberRemarked: '(u64,Bytes)',
+            MemberRemarked: '(u64,Bytes,Option<(AccountId32,u128)>)',
             MemberCreated: '(u64,PalletMembershipCreateMemberParameters,u32)'
         }
     },
     /**
-     * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup75: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipBuyMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -535,7 +609,7 @@ export default {
         referrerId: 'Option<u64>'
     },
     /**
-     * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup78: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipInviteMembershipParameters: {
         invitingMemberId: 'u64',
@@ -545,7 +619,7 @@ export default {
         metadata: 'Bytes'
     },
     /**
-     * Lookup74: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+     * Lookup79: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
      **/
     PalletMembershipCreateMemberParameters: {
         rootAccount: 'AccountId32',
@@ -555,7 +629,7 @@ export default {
         isFoundingMember: 'bool'
     },
     /**
-     * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup80: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletMembershipGiftMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -568,7 +642,7 @@ export default {
         applyRootAccountInvitationLock: 'Option<u128>'
     },
     /**
-     * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     * Lookup84: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
      **/
     PalletForumRawEvent: {
         _enum: {
@@ -592,7 +666,7 @@ export default {
         }
     },
     /**
-     * Lookup78: pallet_forum::PrivilegedActor<T>
+     * Lookup85: pallet_forum::PrivilegedActor<T>
      **/
     PalletForumPrivilegedActor: {
         _enum: {
@@ -601,7 +675,7 @@ export default {
         }
     },
     /**
-     * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     * Lookup86: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
      **/
     PalletForumExtendedPostIdObject: {
         categoryId: 'u64',
@@ -609,7 +683,7 @@ export default {
         postId: 'u64'
     },
     /**
-     * Lookup84: pallet_constitution::RawEvent<primitive_types::H256>
+     * Lookup91: pallet_constitution::RawEvent<primitive_types::H256>
      **/
     PalletConstitutionRawEvent: {
         _enum: {
@@ -617,7 +691,7 @@ export default {
         }
     },
     /**
-     * Lookup85: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     * Lookup92: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
      **/
     PalletBountyRawEvent: {
         _enum: {
@@ -647,7 +721,7 @@ export default {
         }
     },
     /**
-     * Lookup86: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+     * Lookup93: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
      **/
     PalletBountyBountyParametersBTreeSet: {
         oracle: 'PalletBountyBountyActor',
@@ -659,7 +733,7 @@ export default {
         fundingType: 'PalletBountyFundingType'
     },
     /**
-     * Lookup87: pallet_bounty::BountyActor<MemberId>
+     * Lookup94: pallet_bounty::BountyActor<MemberId>
      **/
     PalletBountyBountyActor: {
         _enum: {
@@ -668,7 +742,7 @@ export default {
         }
     },
     /**
-     * Lookup88: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+     * Lookup95: pallet_bounty::AssuranceContractType<BTreeSet<T>>
      **/
     PalletBountyAssuranceContractTypeBTreeSet: {
         _enum: {
@@ -677,7 +751,7 @@ export default {
         }
     },
     /**
-     * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+     * Lookup96: pallet_bounty::FundingType<BlockNumber, Balance>
      **/
     PalletBountyFundingType: {
         _enum: {
@@ -691,7 +765,7 @@ export default {
         }
     },
     /**
-     * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     * Lookup98: pallet_bounty::OracleWorkEntryJudgment<Balance>
      **/
     PalletBountyOracleWorkEntryJudgment: {
         _enum: {
@@ -705,9 +779,9 @@ export default {
         }
     },
     /**
-     * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     * Lookup101: pallet_joystream_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
      **/
-    PalletUtilityRawEvent: {
+    PalletJoystreamUtilityRawEvent: {
         _enum: {
             Signaled: 'Bytes',
             RuntimeUpgraded: 'Bytes',
@@ -716,19 +790,19 @@ export default {
         }
     },
     /**
-     * Lookup95: pallet_common::working_group::iterable_enums::WorkingGroup
+     * Lookup102: pallet_common::working_group::iterable_enums::WorkingGroup
      **/
     PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
         _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'App', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
     },
     /**
-     * Lookup96: pallet_common::BalanceKind
+     * Lookup103: pallet_common::BalanceKind
      **/
     PalletCommonBalanceKind: {
         _enum: ['Positive', 'Negative']
     },
     /**
-     * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     * Lookup104: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
      **/
     PalletContentRawEvent: {
         _enum: {
@@ -756,9 +830,8 @@ export default {
             VideoDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
             VideoVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
             VideoAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,bool,Bytes)',
-            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>)',
-            ChannelRewardUpdated: '(u128,u64)',
-            CouncilRewardClaimed: '(u64,u128)',
+            ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>,AccountId32)',
+            ChannelRewardUpdated: '(u128,u128,u64)',
             EnglishAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesEnglishAuctionParamsRecord)',
             OpenAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesOpenAuctionParamsRecord,u64)',
             NftIssued: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesNftIssuanceParametersRecord)',
@@ -786,11 +859,12 @@ export default {
             GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
             ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
             ToggledNftLimits: 'bool',
-            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)'
+            CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)',
+            CreatorTokenIssuerRemarked: '(u64,u64,Bytes)'
         }
     },
     /**
-     * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     * Lookup105: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
      **/
     PalletContentPermissionsContentActor: {
         _enum: {
@@ -800,7 +874,7 @@ export default {
         }
     },
     /**
-     * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup106: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentChannelRecord: {
         owner: 'PalletContentChannelOwner',
@@ -819,26 +893,26 @@ export default {
         channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup103: pallet_content::types::iterable_enums::ChannelActionPermission
+     * Lookup110: pallet_content::types::iterable_enums::ChannelActionPermission
      **/
     PalletContentIterableEnumsChannelActionPermission: {
-        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
+        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken', 'AmmControl']
     },
     /**
-     * Lookup110: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+     * Lookup117: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
         _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
     },
     /**
-     * Lookup113: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     * Lookup120: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
      **/
     PalletCommonBloatBondRepayableBloatBond: {
         repaymentRestrictedTo: 'Option<AccountId32>',
         amount: 'u128'
     },
     /**
-     * Lookup114: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     * Lookup121: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
      **/
     PalletContentChannelOwner: {
         _enum: {
@@ -847,7 +921,7 @@ export default {
         }
     },
     /**
-     * Lookup115: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup122: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentChannelTransferStatus: {
         _enum: {
@@ -856,14 +930,14 @@ export default {
         }
     },
     /**
-     * Lookup116: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+     * Lookup123: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
      **/
     PalletContentPendingTransfer: {
         newOwner: 'PalletContentChannelOwner',
         transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
     },
     /**
-     * Lookup117: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+     * Lookup124: pallet_content::types::TransferCommitmentParameters<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBoundedBTreeMap: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -871,21 +945,21 @@ export default {
         transferId: 'u64'
     },
     /**
-     * Lookup118: pallet_content::types::LimitPerPeriod<BlockNumber>
+     * Lookup125: pallet_content::types::LimitPerPeriod<BlockNumber>
      **/
     PalletContentLimitPerPeriod: {
         limit: 'u64',
         blockNumberPeriod: 'u32'
     },
     /**
-     * Lookup119: pallet_content::types::NftCounter<BlockNumber>
+     * Lookup126: pallet_content::types::NftCounter<BlockNumber>
      **/
     PalletContentNftCounter: {
         counter: 'u64',
         lastUpdated: 'u32'
     },
     /**
-     * Lookup120: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup127: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -897,7 +971,7 @@ export default {
         minBidStep: 'u128'
     },
     /**
-     * Lookup122: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup129: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -907,7 +981,7 @@ export default {
         bidLockDuration: 'u32'
     },
     /**
-     * Lookup123: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     * Lookup130: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
      **/
     PalletContentNftTypesNftIssuanceParametersRecord: {
         royalty: 'Option<Perbill>',
@@ -916,7 +990,7 @@ export default {
         initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
     },
     /**
-     * Lookup124: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     * Lookup131: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
      **/
     PalletContentNftTypesInitTransactionalStatusRecord: {
         _enum: {
@@ -928,7 +1002,7 @@ export default {
         }
     },
     /**
-     * Lookup126: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     * Lookup133: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
      **/
     PalletContentChannelCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -940,14 +1014,14 @@ export default {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup127: pallet_content::types::StorageAssetsRecord<Balance>
+     * Lookup134: pallet_content::types::StorageAssetsRecord<Balance>
      **/
     PalletContentStorageAssetsRecord: {
         objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
         expectedDataSizeFee: 'u128'
     },
     /**
-     * Lookup129: pallet_storage::DataObjectCreationParameters
+     * Lookup136: pallet_storage::DataObjectCreationParameters
      **/
     PalletStorageDataObjectCreationParameters: {
         _alias: {
@@ -957,14 +1031,14 @@ export default {
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup130: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     * Lookup137: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketIdRecord: {
         distributionBucketFamilyId: 'u64',
         distributionBucketIndex: 'u64'
     },
     /**
-     * Lookup137: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     * Lookup144: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
      **/
     PalletContentChannelUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -975,7 +1049,7 @@ export default {
         storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup139: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup146: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -986,7 +1060,7 @@ export default {
         storageBucketsNumWitness: 'u32'
     },
     /**
-     * Lookup141: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup148: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -997,22 +1071,20 @@ export default {
         storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup144: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+     * Lookup151: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
      **/
     PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
         _enum: {
             HideVideo: 'Null',
             HideChannel: 'Null',
             ChangeChannelFeatureStatus: 'PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature',
-            DeleteVideo: 'Null',
-            DeleteChannel: 'Null',
             DeleteVideoAssets: 'bool',
             DeleteNonVideoChannelAssets: 'Null',
             UpdateChannelNftLimits: 'Null'
         }
     },
     /**
-     * Lookup148: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+     * Lookup155: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
      **/
     PalletContentTransferCommitmentParametersBTreeMap: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -1020,7 +1092,7 @@ export default {
         transferId: 'u64'
     },
     /**
-     * Lookup149: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+     * Lookup156: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
      **/
     PalletContentUpdateChannelPayoutsParametersRecord: {
         commitment: 'Option<H256>',
@@ -1030,16 +1102,15 @@ export default {
         channelCashoutsEnabled: 'Option<bool>'
     },
     /**
-     * Lookup150: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+     * Lookup157: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
      **/
     PalletContentChannelPayoutsPayloadParametersRecord: {
-        uploaderAccount: 'AccountId32',
         objectCreationParams: 'PalletStorageDataObjectCreationParameters',
         expectedDataSizeFee: 'u128',
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup154: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     * Lookup161: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
      **/
     PalletContentChannelFundsDestination: {
         _enum: {
@@ -1048,13 +1119,13 @@ export default {
         }
     },
     /**
-     * Lookup155: pallet_content::types::NftLimitPeriod
+     * Lookup162: pallet_content::types::NftLimitPeriod
      **/
     PalletContentNftLimitPeriod: {
         _enum: ['Daily', 'Weekly']
     },
     /**
-     * Lookup156: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+     * Lookup163: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
      **/
     PalletStorageRawEvent: {
         _enum: {
@@ -1103,7 +1174,7 @@ export default {
         }
     },
     /**
-     * Lookup157: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     * Lookup164: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
      **/
     PalletStorageUploadParametersRecord: {
         bagId: 'PalletStorageBagIdType',
@@ -1113,7 +1184,7 @@ export default {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup158: pallet_storage::BagIdType<MemberId, ChannelId>
+     * Lookup165: pallet_storage::BagIdType<MemberId, ChannelId>
      **/
     PalletStorageBagIdType: {
         _enum: {
@@ -1122,7 +1193,7 @@ export default {
         }
     },
     /**
-     * Lookup159: pallet_storage::StaticBagId
+     * Lookup166: pallet_storage::StaticBagId
      **/
     PalletStorageStaticBagId: {
         _enum: {
@@ -1131,7 +1202,7 @@ export default {
         }
     },
     /**
-     * Lookup160: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     * Lookup167: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
      **/
     PalletStorageDynamicBagIdType: {
         _enum: {
@@ -1140,7 +1211,7 @@ export default {
         }
     },
     /**
-     * Lookup161: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     * Lookup168: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
      **/
     PalletStorageDynBagCreationParametersRecord: {
         bagId: 'PalletStorageDynamicBagIdType',
@@ -1152,7 +1223,7 @@ export default {
         distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
     },
     /**
-     * Lookup164: pallet_storage::Voucher
+     * Lookup171: pallet_storage::Voucher
      **/
     PalletStorageVoucher: {
         sizeLimit: 'u64',
@@ -1161,13 +1232,13 @@ export default {
         objectsUsed: 'u64'
     },
     /**
-     * Lookup165: pallet_storage::DynamicBagType
+     * Lookup172: pallet_storage::DynamicBagType
      **/
     PalletStorageDynamicBagType: {
         _enum: ['Member', 'Channel']
     },
     /**
-     * Lookup169: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+     * Lookup176: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
      **/
     PalletProjectTokenEventsRawEvent: {
         _enum: {
@@ -1188,11 +1259,15 @@ export default {
             TokensPurchasedOnSale: '(u64,u32,u128,u64)',
             TokenSaleFinalized: '(u64,u32,u128,u128)',
             TransferPolicyChangedToPermissionless: 'u64',
-            TokensBurned: '(u64,u64,u128)'
+            TokensBurned: '(u64,u64,u128)',
+            AmmActivated: '(u64,u64,PalletProjectTokenAmmCurve)',
+            TokensBoughtOnAmm: '(u64,u64,u128,u128)',
+            TokensSoldOnAmm: '(u64,u64,u128,u128)',
+            AmmDeactivated: '(u64,u64,u128)'
         }
     },
     /**
-     * Lookup170: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     * Lookup177: pallet_project_token::types::TransferPolicy<primitive_types::H256>
      **/
     PalletProjectTokenTransferPolicy: {
         _enum: {
@@ -1201,24 +1276,24 @@ export default {
         }
     },
     /**
-     * Lookup171: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     * Lookup178: pallet_project_token::types::TokenIssuanceParameters<pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
      **/
     PalletProjectTokenTokenIssuanceParameters: {
         initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
-        symbol: 'H256',
         transferPolicy: 'PalletProjectTokenTransferPolicyParams',
         patronageRate: 'Permill',
-        revenueSplitRate: 'Permill'
+        revenueSplitRate: 'Permill',
+        metadata: 'Bytes'
     },
     /**
-     * Lookup172: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup179: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenAllocation: {
         amount: 'u128',
         vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup173: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     * Lookup180: pallet_project_token::types::VestingScheduleParams<BlockNumber>
      **/
     PalletProjectTokenVestingScheduleParams: {
         linearVestingDuration: 'u32',
@@ -1226,7 +1301,7 @@ export default {
         cliffAmountPercentage: 'Permill'
     },
     /**
-     * Lookup176: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     * Lookup183: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
      **/
     PalletProjectTokenTransferPolicyParams: {
         _enum: {
@@ -1235,14 +1310,14 @@ export default {
         }
     },
     /**
-     * Lookup177: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     * Lookup184: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
      **/
     PalletProjectTokenWhitelistParams: {
         commitment: 'H256',
         payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
     },
     /**
-     * Lookup178: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     * Lookup185: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
      **/
     PalletProjectTokenSingleDataObjectUploadParams: {
         objectCreationParams: 'PalletStorageDataObjectCreationParameters',
@@ -1250,7 +1325,7 @@ export default {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup185: pallet_project_token::types::Validated<MemberId>
+     * Lookup192: pallet_project_token::types::Validated<MemberId>
      **/
     PalletProjectTokenValidated: {
         _enum: {
@@ -1259,21 +1334,21 @@ export default {
         }
     },
     /**
-     * Lookup186: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup193: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenValidatedPayment: {
         payment: 'PalletProjectTokenPaymentWithVesting',
         vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
     },
     /**
-     * Lookup187: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup194: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenPaymentWithVesting: {
         amount: 'u128',
         vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup189: pallet_project_token::types::VestingSource
+     * Lookup196: pallet_project_token::types::VestingSource
      **/
     PalletProjectTokenVestingSource: {
         _enum: {
@@ -1283,7 +1358,7 @@ export default {
         }
     },
     /**
-     * Lookup193: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     * Lookup200: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletProjectTokenTokenSale: {
         unitPrice: 'u128',
@@ -1298,7 +1373,15 @@ export default {
         autoFinalize: 'bool'
     },
     /**
-     * Lookup195: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     * Lookup201: pallet_project_token::types::AmmCurve<Balance>
+     **/
+    PalletProjectTokenAmmCurve: {
+        slope: 'Permill',
+        intercept: 'Permill',
+        providedSupply: 'u128'
+    },
+    /**
+     * Lookup203: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
      **/
     PalletProposalsEngineRawEvent: {
         _enum: {
@@ -1311,7 +1394,7 @@ export default {
         }
     },
     /**
-     * Lookup196: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     * Lookup204: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
      **/
     PalletProposalsEngineProposalStatusesProposalStatus: {
         _enum: {
@@ -1321,7 +1404,7 @@ export default {
         }
     },
     /**
-     * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     * Lookup205: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
      **/
     PalletProposalsEngineProposalStatusesProposalDecision: {
         _enum: {
@@ -1335,13 +1418,13 @@ export default {
         }
     },
     /**
-     * Lookup198: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     * Lookup206: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
      **/
     PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
         _enum: ['PendingExecution', 'PendingConstitutionality']
     },
     /**
-     * Lookup199: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     * Lookup207: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
      **/
     PalletProposalsEngineProposalStatusesExecutionStatus: {
         _enum: {
@@ -1352,13 +1435,13 @@ export default {
         }
     },
     /**
-     * Lookup200: pallet_proposals_engine::types::VoteKind
+     * Lookup208: pallet_proposals_engine::types::VoteKind
      **/
     PalletProposalsEngineVoteKind: {
         _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
     },
     /**
-     * Lookup201: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     * Lookup209: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
      **/
     PalletProposalsDiscussionRawEvent: {
         _enum: {
@@ -1370,7 +1453,7 @@ export default {
         }
     },
     /**
-     * Lookup202: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+     * Lookup210: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
      **/
     PalletProposalsDiscussionThreadModeBTreeSet: {
         _enum: {
@@ -1379,7 +1462,7 @@ export default {
         }
     },
     /**
-     * Lookup203: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     * Lookup211: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
      **/
     PalletProposalsCodexRawEvent: {
         _enum: {
@@ -1387,7 +1470,7 @@ export default {
         }
     },
     /**
-     * Lookup204: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     * Lookup212: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
      **/
     PalletProposalsCodexGeneralProposalParams: {
         memberId: 'u64',
@@ -1397,7 +1480,7 @@ export default {
         exactExecutionBlock: 'Option<u32>'
     },
     /**
-     * Lookup205: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+     * Lookup213: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
      **/
     PalletProposalsCodexProposalDetails: {
         _enum: {
@@ -1427,14 +1510,14 @@ export default {
         }
     },
     /**
-     * Lookup207: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     * Lookup215: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
      **/
     PalletCommonFundingRequestParameters: {
         account: 'AccountId32',
         amount: 'u128'
     },
     /**
-     * Lookup208: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     * Lookup216: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
      **/
     PalletProposalsCodexCreateOpeningParameters: {
         description: 'Bytes',
@@ -1443,14 +1526,14 @@ export default {
         group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup209: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     * Lookup217: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
      **/
     PalletWorkingGroupStakePolicy: {
         stakeAmount: 'u128',
         leavingUnstakingPeriod: 'u32'
     },
     /**
-     * Lookup210: pallet_proposals_codex::types::FillOpeningParameters
+     * Lookup218: pallet_proposals_codex::types::FillOpeningParameters
      **/
     PalletProposalsCodexFillOpeningParameters: {
         openingId: 'u64',
@@ -1458,7 +1541,7 @@ export default {
         workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup211: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     * Lookup219: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
      **/
     PalletProposalsCodexTerminateRoleParameters: {
         workerId: 'u64',
@@ -1466,7 +1549,7 @@ export default {
         group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
     },
     /**
-     * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+     * Lookup220: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
      **/
     PalletWorkingGroupRawEventInstance1: {
         _enum: {
@@ -1498,13 +1581,13 @@ export default {
         }
     },
     /**
-     * Lookup216: pallet_working_group::types::OpeningType
+     * Lookup224: pallet_working_group::types::OpeningType
      **/
     PalletWorkingGroupOpeningType: {
         _enum: ['Leader', 'Regular']
     },
     /**
-     * Lookup217: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     * Lookup225: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupApplyOnOpeningParams: {
         memberId: 'u64',
@@ -1515,24 +1598,24 @@ export default {
         stakeParameters: 'PalletWorkingGroupStakeParameters'
     },
     /**
-     * Lookup218: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup226: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupStakeParameters: {
         stake: 'u128',
         stakingAccountId: 'AccountId32'
     },
     /**
-     * Lookup219: pallet_working_group::Instance1
+     * Lookup227: pallet_working_group::Instance1
      **/
     PalletWorkingGroupInstance1: 'Null',
     /**
-     * Lookup220: pallet_working_group::types::RewardPaymentType
+     * Lookup228: pallet_working_group::types::RewardPaymentType
      **/
     PalletWorkingGroupRewardPaymentType: {
         _enum: ['MissedReward', 'RegularReward']
     },
     /**
-     * Lookup221: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+     * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
      **/
     PalletWorkingGroupRawEventInstance2: {
         _enum: {
@@ -1564,11 +1647,11 @@ export default {
         }
     },
     /**
-     * Lookup222: pallet_working_group::Instance2
+     * Lookup230: pallet_working_group::Instance2
      **/
     PalletWorkingGroupInstance2: 'Null',
     /**
-     * Lookup223: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+     * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
      **/
     PalletWorkingGroupRawEventInstance3: {
         _enum: {
@@ -1600,11 +1683,11 @@ export default {
         }
     },
     /**
-     * Lookup224: pallet_working_group::Instance3
+     * Lookup232: pallet_working_group::Instance3
      **/
     PalletWorkingGroupInstance3: 'Null',
     /**
-     * Lookup225: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+     * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
      **/
     PalletWorkingGroupRawEventInstance4: {
         _enum: {
@@ -1636,11 +1719,11 @@ export default {
         }
     },
     /**
-     * Lookup226: pallet_working_group::Instance4
+     * Lookup234: pallet_working_group::Instance4
      **/
     PalletWorkingGroupInstance4: 'Null',
     /**
-     * Lookup227: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+     * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
      **/
     PalletWorkingGroupRawEventInstance5: {
         _enum: {
@@ -1672,11 +1755,11 @@ export default {
         }
     },
     /**
-     * Lookup228: pallet_working_group::Instance5
+     * Lookup236: pallet_working_group::Instance5
      **/
     PalletWorkingGroupInstance5: 'Null',
     /**
-     * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+     * Lookup237: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
      **/
     PalletWorkingGroupRawEventInstance6: {
         _enum: {
@@ -1708,11 +1791,11 @@ export default {
         }
     },
     /**
-     * Lookup230: pallet_working_group::Instance6
+     * Lookup238: pallet_working_group::Instance6
      **/
     PalletWorkingGroupInstance6: 'Null',
     /**
-     * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+     * Lookup239: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
      **/
     PalletWorkingGroupRawEventInstance7: {
         _enum: {
@@ -1744,11 +1827,11 @@ export default {
         }
     },
     /**
-     * Lookup232: pallet_working_group::Instance7
+     * Lookup240: pallet_working_group::Instance7
      **/
     PalletWorkingGroupInstance7: 'Null',
     /**
-     * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+     * Lookup241: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
      **/
     PalletWorkingGroupRawEventInstance8: {
         _enum: {
@@ -1780,11 +1863,11 @@ export default {
         }
     },
     /**
-     * Lookup234: pallet_working_group::Instance8
+     * Lookup242: pallet_working_group::Instance8
      **/
     PalletWorkingGroupInstance8: 'Null',
     /**
-     * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+     * Lookup243: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
      **/
     PalletWorkingGroupRawEventInstance9: {
         _enum: {
@@ -1816,11 +1899,11 @@ export default {
         }
     },
     /**
-     * Lookup236: pallet_working_group::Instance9
+     * Lookup244: pallet_working_group::Instance9
      **/
     PalletWorkingGroupInstance9: 'Null',
     /**
-     * Lookup237: frame_system::Phase
+     * Lookup245: frame_system::Phase
      **/
     FrameSystemPhase: {
         _enum: {
@@ -1830,20 +1913,17 @@ export default {
         }
     },
     /**
-     * Lookup241: frame_system::LastRuntimeUpgradeInfo
+     * Lookup249: frame_system::LastRuntimeUpgradeInfo
      **/
     FrameSystemLastRuntimeUpgradeInfo: {
         specVersion: 'Compact<u32>',
         specName: 'Text'
     },
     /**
-     * Lookup244: frame_system::pallet::Call<T>
+     * Lookup252: frame_system::pallet::Call<T>
      **/
     FrameSystemCall: {
         _enum: {
-            fill_block: {
-                ratio: 'Perbill',
-            },
             remark: {
                 remark: 'Bytes',
             },
@@ -1875,53 +1955,53 @@ export default {
         }
     },
     /**
-     * Lookup247: frame_system::limits::BlockWeights
+     * Lookup255: frame_system::limits::BlockWeights
      **/
     FrameSystemLimitsBlockWeights: {
-        baseBlock: 'u64',
-        maxBlock: 'u64',
-        perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
+        baseBlock: 'SpWeightsWeightV2Weight',
+        maxBlock: 'SpWeightsWeightV2Weight',
+        perClass: 'FrameSupportDispatchPerDispatchClassWeightsPerClass'
     },
     /**
-     * Lookup248: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     * Lookup256: frame_support::dispatch::PerDispatchClass<frame_system::limits::WeightsPerClass>
      **/
-    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
+    FrameSupportDispatchPerDispatchClassWeightsPerClass: {
         normal: 'FrameSystemLimitsWeightsPerClass',
         operational: 'FrameSystemLimitsWeightsPerClass',
         mandatory: 'FrameSystemLimitsWeightsPerClass'
     },
     /**
-     * Lookup249: frame_system::limits::WeightsPerClass
+     * Lookup257: frame_system::limits::WeightsPerClass
      **/
     FrameSystemLimitsWeightsPerClass: {
-        baseExtrinsic: 'u64',
-        maxExtrinsic: 'Option<u64>',
-        maxTotal: 'Option<u64>',
-        reserved: 'Option<u64>'
+        baseExtrinsic: 'SpWeightsWeightV2Weight',
+        maxExtrinsic: 'Option<SpWeightsWeightV2Weight>',
+        maxTotal: 'Option<SpWeightsWeightV2Weight>',
+        reserved: 'Option<SpWeightsWeightV2Weight>'
     },
     /**
-     * Lookup250: frame_system::limits::BlockLength
+     * Lookup259: frame_system::limits::BlockLength
      **/
     FrameSystemLimitsBlockLength: {
-        max: 'FrameSupportWeightsPerDispatchClassU32'
+        max: 'FrameSupportDispatchPerDispatchClassU32'
     },
     /**
-     * Lookup251: frame_support::weights::PerDispatchClass<T>
+     * Lookup260: frame_support::dispatch::PerDispatchClass<T>
      **/
-    FrameSupportWeightsPerDispatchClassU32: {
+    FrameSupportDispatchPerDispatchClassU32: {
         normal: 'u32',
         operational: 'u32',
         mandatory: 'u32'
     },
     /**
-     * Lookup252: frame_support::weights::RuntimeDbWeight
+     * Lookup261: sp_weights::RuntimeDbWeight
      **/
-    FrameSupportWeightsRuntimeDbWeight: {
+    SpWeightsRuntimeDbWeight: {
         read: 'u64',
         write: 'u64'
     },
     /**
-     * Lookup253: sp_version::RuntimeVersion
+     * Lookup262: sp_version::RuntimeVersion
      **/
     SpVersionRuntimeVersion: {
         specName: 'Text',
@@ -1934,13 +2014,13 @@ export default {
         stateVersion: 'u8'
     },
     /**
-     * Lookup259: frame_system::pallet::Error<T>
+     * Lookup268: frame_system::pallet::Error<T>
      **/
     FrameSystemError: {
         _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
     },
     /**
-     * Lookup260: pallet_utility::pallet::Call<T>
+     * Lookup269: pallet_utility::pallet::Call<T>
      **/
     PalletUtilityCall: {
         _enum: {
@@ -1959,12 +2039,16 @@ export default {
                 call: 'Call',
             },
             force_batch: {
-                calls: 'Vec<Call>'
+                calls: 'Vec<Call>',
+            },
+            with_weight: {
+                call: 'Call',
+                weight: 'SpWeightsWeightV2Weight'
             }
         }
     },
     /**
-     * Lookup263: pallet_babe::pallet::Call<T>
+     * Lookup272: pallet_babe::pallet::Call<T>
      **/
     PalletBabeCall: {
         _enum: {
@@ -1982,7 +2066,7 @@ export default {
         }
     },
     /**
-     * Lookup264: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     * Lookup273: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
      **/
     SpConsensusSlotsEquivocationProof: {
         offender: 'SpConsensusBabeAppPublic',
@@ -1991,7 +2075,7 @@ export default {
         secondHeader: 'SpRuntimeHeader'
     },
     /**
-     * Lookup265: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     * Lookup274: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
      **/
     SpRuntimeHeader: {
         parentHash: 'H256',
@@ -2001,15 +2085,15 @@ export default {
         digest: 'SpRuntimeDigest'
     },
     /**
-     * Lookup266: sp_runtime::traits::BlakeTwo256
+     * Lookup275: sp_runtime::traits::BlakeTwo256
      **/
     SpRuntimeBlakeTwo256: 'Null',
     /**
-     * Lookup267: sp_consensus_babe::app::Public
+     * Lookup276: sp_consensus_babe::app::Public
      **/
     SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
     /**
-     * Lookup269: sp_session::MembershipProof
+     * Lookup278: sp_session::MembershipProof
      **/
     SpSessionMembershipProof: {
         session: 'u32',
@@ -2017,7 +2101,7 @@ export default {
         validatorCount: 'u32'
     },
     /**
-     * Lookup270: sp_consensus_babe::digests::NextConfigDescriptor
+     * Lookup279: sp_consensus_babe::digests::NextConfigDescriptor
      **/
     SpConsensusBabeDigestsNextConfigDescriptor: {
         _enum: {
@@ -2029,13 +2113,13 @@ export default {
         }
     },
     /**
-     * Lookup271: sp_consensus_babe::AllowedSlots
+     * Lookup280: sp_consensus_babe::AllowedSlots
      **/
     SpConsensusBabeAllowedSlots: {
         _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
     },
     /**
-     * Lookup272: pallet_timestamp::pallet::Call<T>
+     * Lookup281: pallet_timestamp::pallet::Call<T>
      **/
     PalletTimestampCall: {
         _enum: {
@@ -2045,17 +2129,7 @@ export default {
         }
     },
     /**
-     * Lookup274: pallet_authorship::pallet::Call<T>
-     **/
-    PalletAuthorshipCall: {
-        _enum: {
-            set_uncles: {
-                newUncles: 'Vec<SpRuntimeHeader>'
-            }
-        }
-    },
-    /**
-     * Lookup276: pallet_balances::pallet::Call<T, I>
+     * Lookup282: pallet_balances::pallet::Call<T, I>
      **/
     PalletBalancesCall: {
         _enum: {
@@ -2088,7 +2162,7 @@ export default {
         }
     },
     /**
-     * Lookup277: pallet_election_provider_multi_phase::pallet::Call<T>
+     * Lookup283: pallet_election_provider_multi_phase::pallet::Call<T>
      **/
     PalletElectionProviderMultiPhaseCall: {
         _enum: {
@@ -2112,7 +2186,7 @@ export default {
         }
     },
     /**
-     * Lookup278: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     * Lookup284: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseRawSolution: {
         solution: 'JoystreamNodeRuntimeNposSolution16',
@@ -2120,7 +2194,7 @@ export default {
         round: 'u32'
     },
     /**
-     * Lookup279: joystream_node_runtime::NposSolution16
+     * Lookup285: joystream_node_runtime::NposSolution16
      **/
     JoystreamNodeRuntimeNposSolution16: {
         votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
@@ -2141,29 +2215,21 @@ export default {
         votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
     },
     /**
-     * Lookup330: sp_npos_elections::ElectionScore
-     **/
-    SpNposElectionsElectionScore: {
-        minimalStake: 'u128',
-        sumStake: 'u128',
-        sumStakeSquared: 'u128'
-    },
-    /**
-     * Lookup331: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     * Lookup336: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
      **/
     PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
         voters: 'Compact<u32>',
         targets: 'Compact<u32>'
     },
     /**
-     * Lookup335: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     * Lookup340: sp_npos_elections::Support<sp_core::crypto::AccountId32>
      **/
     SpNposElectionsSupport: {
         total: 'u128',
         voters: 'Vec<(AccountId32,u128)>'
     },
     /**
-     * Lookup338: pallet_staking::pallet::pallet::Call<T>
+     * Lookup342: pallet_staking::pallet::pallet::Call<T>
      **/
     PalletStakingPalletCall: {
         _enum: {
@@ -2227,10 +2293,6 @@ export default {
             rebond: {
                 value: 'Compact<u128>',
             },
-            set_history_depth: {
-                newHistoryDepth: 'Compact<u32>',
-                eraItemsDeleted: 'Compact<u32>',
-            },
             reap_stash: {
                 stash: 'AccountId32',
                 numSlashingSpans: 'u32',
@@ -2250,12 +2312,18 @@ export default {
                 controller: 'AccountId32',
             },
             force_apply_min_commission: {
-                validatorStash: 'AccountId32'
+                validatorStash: 'AccountId32',
+            },
+            set_min_commission: {
+                _alias: {
+                    new_: 'new',
+                },
+                new_: 'Perbill'
             }
         }
     },
     /**
-     * Lookup339: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+     * Lookup343: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
      **/
     PalletStakingRewardDestination: {
         _enum: {
@@ -2267,7 +2335,7 @@ export default {
         }
     },
     /**
-     * Lookup343: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup347: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU128: {
         _enum: {
@@ -2277,7 +2345,7 @@ export default {
         }
     },
     /**
-     * Lookup344: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup348: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU32: {
         _enum: {
@@ -2287,7 +2355,7 @@ export default {
         }
     },
     /**
-     * Lookup345: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+     * Lookup349: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
      **/
     PalletStakingPalletConfigOpPercent: {
         _enum: {
@@ -2297,7 +2365,7 @@ export default {
         }
     },
     /**
-     * Lookup346: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+     * Lookup350: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
      **/
     PalletStakingPalletConfigOpPerbill: {
         _enum: {
@@ -2307,7 +2375,7 @@ export default {
         }
     },
     /**
-     * Lookup347: pallet_session::pallet::Call<T>
+     * Lookup351: pallet_session::pallet::Call<T>
      **/
     PalletSessionCall: {
         _enum: {
@@ -2322,7 +2390,7 @@ export default {
         }
     },
     /**
-     * Lookup348: joystream_node_runtime::SessionKeys
+     * Lookup352: joystream_node_runtime::SessionKeys
      **/
     JoystreamNodeRuntimeSessionKeys: {
         grandpa: 'SpFinalityGrandpaAppPublic',
@@ -2331,11 +2399,11 @@ export default {
         authorityDiscovery: 'SpAuthorityDiscoveryAppPublic'
     },
     /**
-     * Lookup349: sp_authority_discovery::app::Public
+     * Lookup353: sp_authority_discovery::app::Public
      **/
     SpAuthorityDiscoveryAppPublic: 'SpCoreSr25519Public',
     /**
-     * Lookup350: pallet_grandpa::pallet::Call<T>
+     * Lookup354: pallet_grandpa::pallet::Call<T>
      **/
     PalletGrandpaCall: {
         _enum: {
@@ -2354,14 +2422,14 @@ export default {
         }
     },
     /**
-     * Lookup351: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+     * Lookup355: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocationProof: {
         setId: 'u64',
         equivocation: 'SpFinalityGrandpaEquivocation'
     },
     /**
-     * Lookup352: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+     * Lookup356: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocation: {
         _enum: {
@@ -2370,7 +2438,7 @@ export default {
         }
     },
     /**
-     * Lookup353: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup357: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrevote: {
         roundNumber: 'u64',
@@ -2379,22 +2447,22 @@ export default {
         second: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)'
     },
     /**
-     * Lookup354: finality_grandpa::Prevote<primitive_types::H256, N>
+     * Lookup358: finality_grandpa::Prevote<primitive_types::H256, N>
      **/
     FinalityGrandpaPrevote: {
         targetHash: 'H256',
         targetNumber: 'u32'
     },
     /**
-     * Lookup355: sp_finality_grandpa::app::Signature
+     * Lookup359: sp_finality_grandpa::app::Signature
      **/
     SpFinalityGrandpaAppSignature: 'SpCoreEd25519Signature',
     /**
-     * Lookup356: sp_core::ed25519::Signature
+     * Lookup360: sp_core::ed25519::Signature
      **/
     SpCoreEd25519Signature: '[u8;64]',
     /**
-     * Lookup359: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup363: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrecommit: {
         roundNumber: 'u64',
@@ -2403,14 +2471,14 @@ export default {
         second: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)'
     },
     /**
-     * Lookup360: finality_grandpa::Precommit<primitive_types::H256, N>
+     * Lookup364: finality_grandpa::Precommit<primitive_types::H256, N>
      **/
     FinalityGrandpaPrecommit: {
         targetHash: 'H256',
         targetNumber: 'u32'
     },
     /**
-     * Lookup362: pallet_im_online::pallet::Call<T>
+     * Lookup366: pallet_im_online::pallet::Call<T>
      **/
     PalletImOnlineCall: {
         _enum: {
@@ -2421,7 +2489,7 @@ export default {
         }
     },
     /**
-     * Lookup363: pallet_im_online::Heartbeat<BlockNumber>
+     * Lookup367: pallet_im_online::Heartbeat<BlockNumber>
      **/
     PalletImOnlineHeartbeat: {
         blockNumber: 'u32',
@@ -2431,46 +2499,22 @@ export default {
         validatorsLen: 'u32'
     },
     /**
-     * Lookup364: sp_core::offchain::OpaqueNetworkState
+     * Lookup368: sp_core::offchain::OpaqueNetworkState
      **/
     SpCoreOffchainOpaqueNetworkState: {
         peerId: 'Bytes',
         externalAddresses: 'Vec<Bytes>'
     },
     /**
-     * Lookup368: pallet_im_online::sr25519::app_sr25519::Signature
+     * Lookup372: pallet_im_online::sr25519::app_sr25519::Signature
      **/
     PalletImOnlineSr25519AppSr25519Signature: 'SpCoreSr25519Signature',
     /**
-     * Lookup369: sp_core::sr25519::Signature
+     * Lookup373: sp_core::sr25519::Signature
      **/
     SpCoreSr25519Signature: '[u8;64]',
     /**
-     * Lookup370: pallet_sudo::pallet::Call<T>
-     **/
-    PalletSudoCall: {
-        _enum: {
-            sudo: {
-                call: 'Call',
-            },
-            sudo_unchecked_weight: {
-                call: 'Call',
-                weight: 'u64',
-            },
-            set_key: {
-                _alias: {
-                    new_: 'new',
-                },
-                new_: 'AccountId32',
-            },
-            sudo_as: {
-                who: 'AccountId32',
-                call: 'Call'
-            }
-        }
-    },
-    /**
-     * Lookup371: pallet_bags_list::pallet::Call<T, I>
+     * Lookup374: pallet_bags_list::pallet::Call<T, I>
      **/
     PalletBagsListCall: {
         _enum: {
@@ -2483,7 +2527,7 @@ export default {
         }
     },
     /**
-     * Lookup372: pallet_vesting::pallet::Call<T>
+     * Lookup375: pallet_vesting::pallet::Call<T>
      **/
     PalletVestingCall: {
         _enum: {
@@ -2507,7 +2551,7 @@ export default {
         }
     },
     /**
-     * Lookup373: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     * Lookup376: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
      **/
     PalletVestingVestingInfo: {
         locked: 'u128',
@@ -2515,7 +2559,7 @@ export default {
         startingBlock: 'u32'
     },
     /**
-     * Lookup374: pallet_multisig::pallet::Call<T>
+     * Lookup377: pallet_multisig::pallet::Call<T>
      **/
     PalletMultisigCall: {
         _enum: {
@@ -2527,16 +2571,15 @@ export default {
                 threshold: 'u16',
                 otherSignatories: 'Vec<AccountId32>',
                 maybeTimepoint: 'Option<PalletMultisigTimepoint>',
-                call: 'WrapperKeepOpaque<Call>',
-                storeCall: 'bool',
-                maxWeight: 'u64',
+                call: 'Call',
+                maxWeight: 'SpWeightsWeightV2Weight',
             },
             approve_as_multi: {
                 threshold: 'u16',
                 otherSignatories: 'Vec<AccountId32>',
                 maybeTimepoint: 'Option<PalletMultisigTimepoint>',
                 callHash: '[u8;32]',
-                maxWeight: 'u64',
+                maxWeight: 'SpWeightsWeightV2Weight',
             },
             cancel_as_multi: {
                 threshold: 'u16',
@@ -2547,7 +2590,7 @@ export default {
         }
     },
     /**
-     * Lookup377: pallet_council::Call<T>
+     * Lookup379: pallet_council::Call<T>
      **/
     PalletCouncilCall: {
         _enum: {
@@ -2598,7 +2641,7 @@ export default {
         }
     },
     /**
-     * Lookup378: pallet_referendum::Call<T, I>
+     * Lookup380: pallet_referendum::Call<T, I>
      **/
     PalletReferendumCall: {
         _enum: {
@@ -2610,11 +2653,12 @@ export default {
                 salt: 'Bytes',
                 voteOptionId: 'u64',
             },
-            release_vote_stake: 'Null'
+            release_vote_stake: 'Null',
+            opt_out_of_voting: 'Null'
         }
     },
     /**
-     * Lookup379: pallet_membership::Call<T>
+     * Lookup381: pallet_membership::Call<T>
      **/
     PalletMembershipCall: {
         _enum: {
@@ -2675,6 +2719,7 @@ export default {
             member_remark: {
                 memberId: 'u64',
                 msg: 'Bytes',
+                payment: 'Option<(AccountId32,u128)>',
             },
             create_member: {
                 params: 'PalletMembershipCreateMemberParameters'
@@ -2682,7 +2727,7 @@ export default {
         }
     },
     /**
-     * Lookup380: pallet_forum::Call<T>
+     * Lookup382: pallet_forum::Call<T>
      **/
     PalletForumCall: {
         _enum: {
@@ -2779,7 +2824,7 @@ export default {
         }
     },
     /**
-     * Lookup381: pallet_constitution::Call<T>
+     * Lookup383: pallet_constitution::Call<T>
      **/
     PalletConstitutionCall: {
         _enum: {
@@ -2789,7 +2834,7 @@ export default {
         }
     },
     /**
-     * Lookup382: pallet_bounty::Call<T>
+     * Lookup384: pallet_bounty::Call<T>
      **/
     PalletBountyCall: {
         _enum: {
@@ -2865,7 +2910,28 @@ export default {
         }
     },
     /**
-     * Lookup384: pallet_content::Call<T>
+     * Lookup385: pallet_joystream_utility::Call<T>
+     **/
+    PalletJoystreamUtilityCall: {
+        _enum: {
+            execute_signal_proposal: {
+                signal: 'Bytes',
+            },
+            execute_runtime_upgrade_proposal: {
+                wasm: 'Bytes',
+            },
+            update_working_group_budget: {
+                workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup',
+                amount: 'u128',
+                balanceKind: 'PalletCommonBalanceKind',
+            },
+            burn_account_tokens: {
+                amount: 'u128'
+            }
+        }
+    },
+    /**
+     * Lookup386: pallet_content::Call<T>
      **/
     PalletContentCall: {
         _enum: {
@@ -2922,13 +2988,6 @@ export default {
                 storageBucketsNumWitness: 'u32',
                 rationale: 'Bytes',
             },
-            delete_channel_as_moderator: {
-                actor: 'PalletContentPermissionsContentActor',
-                channelId: 'u64',
-                channelBagWitness: 'PalletContentChannelBagWitness',
-                numObjectsToDelete: 'u64',
-                rationale: 'Bytes',
-            },
             set_channel_visibility_as_moderator: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
@@ -2958,13 +3017,6 @@ export default {
                 assetsToRemove: 'BTreeSet<u64>',
                 rationale: 'Bytes',
             },
-            delete_video_as_moderator: {
-                actor: 'PalletContentPermissionsContentActor',
-                videoId: 'u64',
-                storageBucketsNumWitness: 'Option<u32>',
-                numObjectsToDelete: 'u64',
-                rationale: 'Bytes',
-            },
             set_video_visibility_as_moderator: {
                 actor: 'PalletContentPermissionsContentActor',
                 videoId: 'u64',
@@ -2973,6 +3025,7 @@ export default {
             },
             update_channel_payouts: {
                 params: 'PalletContentUpdateChannelPayoutsParametersRecord',
+                uploaderAccount: 'AccountId32',
             },
             claim_channel_reward: {
                 actor: 'PalletContentPermissionsContentActor',
@@ -2990,11 +3043,6 @@ export default {
             update_video_state_bloat_bond: {
                 newVideoStateBloatBond: 'u128',
             },
-            claim_and_withdraw_channel_reward: {
-                actor: 'PalletContentPermissionsContentActor',
-                proof: 'Vec<PalletCommonMerkleTreeProofElementRecord>',
-                item: 'PalletContentPullPaymentElement',
-            },
             issue_nft: {
                 actor: 'PalletContentPermissionsContentActor',
                 videoId: 'u64',
@@ -3173,19 +3221,33 @@ export default {
             },
             deissue_creator_token: {
                 actor: 'PalletContentPermissionsContentActor',
-                channelId: 'u64'
+                channelId: 'u64',
+            },
+            activate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                params: 'PalletProjectTokenAmmParams',
+            },
+            deactivate_amm: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+            },
+            creator_token_issuer_remark: {
+                actor: 'PalletContentPermissionsContentActor',
+                channelId: 'u64',
+                remark: 'Bytes'
             }
         }
     },
     /**
-     * Lookup385: pallet_content::types::ChannelBagWitness
+     * Lookup387: pallet_content::types::ChannelBagWitness
      **/
     PalletContentChannelBagWitness: {
         storageBucketsNum: 'u32',
         distributionBucketsNum: 'u32'
     },
     /**
-     * Lookup387: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+     * Lookup389: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
      **/
     PalletCommonMerkleTreeProofElementRecord: {
         _alias: {
@@ -3195,13 +3257,13 @@ export default {
         side: 'PalletCommonMerkleTreeSide'
     },
     /**
-     * Lookup388: pallet_common::merkle_tree::Side
+     * Lookup390: pallet_common::merkle_tree::Side
      **/
     PalletCommonMerkleTreeSide: {
         _enum: ['Left', 'Right']
     },
     /**
-     * Lookup389: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     * Lookup391: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
      **/
     PalletContentPullPaymentElement: {
         channelId: 'u64',
@@ -3209,7 +3271,7 @@ export default {
         reason: 'H256'
     },
     /**
-     * Lookup390: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     * Lookup392: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
      **/
     PalletContentInitTransferParameters: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -3217,7 +3279,7 @@ export default {
         newOwner: 'PalletContentChannelOwner'
     },
     /**
-     * Lookup391: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup393: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenSaleParams: {
         unitPrice: 'u128',
@@ -3229,11 +3291,18 @@ export default {
         metadata: 'Option<Bytes>'
     },
     /**
-     * Lookup392: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup394: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenTransfersPaymentWithVesting: 'BTreeMap<u64, PalletProjectTokenPaymentWithVesting>',
     /**
-     * Lookup396: pallet_storage::Call<T>
+     * Lookup398: pallet_project_token::types::AmmParams
+     **/
+    PalletProjectTokenAmmParams: {
+        slope: 'Permill',
+        intercept: 'Permill'
+    },
+    /**
+     * Lookup399: pallet_storage::Call<T>
      **/
     PalletStorageCall: {
         _enum: {
@@ -3367,9 +3436,6 @@ export default {
                 bucketId: 'PalletStorageDistributionBucketIdRecord',
                 metadata: 'Bytes',
             },
-            sudo_upload_data_objects: {
-                params: 'PalletStorageUploadParametersRecord',
-            },
             storage_operator_remark: {
                 workerId: 'u64',
                 storageBucketId: 'u64',
@@ -3383,7 +3449,7 @@ export default {
         }
     },
     /**
-     * Lookup397: pallet_project_token::Call<T>
+     * Lookup400: pallet_project_token::Call<T>
      **/
     PalletProjectTokenCall: {
         _enum: {
@@ -3419,32 +3485,44 @@ export default {
             },
             exit_revenue_split: {
                 tokenId: 'u64',
-                memberId: 'u64'
+                memberId: 'u64',
+            },
+            buy_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>',
+            },
+            sell_on_amm: {
+                tokenId: 'u64',
+                memberId: 'u64',
+                amount: 'u128',
+                slippageTolerance: 'Option<(Permill,u128)>'
             }
         }
     },
     /**
-     * Lookup398: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
+     * Lookup401: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
      **/
     PalletProjectTokenTransfersPayment: 'BTreeMap<u64, PalletProjectTokenPayment>',
     /**
-     * Lookup399: pallet_project_token::types::Payment<Balance>
+     * Lookup402: pallet_project_token::types::Payment<Balance>
      **/
     PalletProjectTokenPayment: {
         amount: 'u128'
     },
     /**
-     * Lookup403: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     * Lookup406: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
      **/
     PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
     /**
-     * Lookup406: pallet_project_token::types::MerkleSide
+     * Lookup409: pallet_project_token::types::MerkleSide
      **/
     PalletProjectTokenMerkleSide: {
         _enum: ['Right', 'Left']
     },
     /**
-     * Lookup407: pallet_proposals_engine::Call<T>
+     * Lookup412: pallet_proposals_engine::Call<T>
      **/
     PalletProposalsEngineCall: {
         _enum: {
@@ -3469,7 +3547,7 @@ export default {
         }
     },
     /**
-     * Lookup408: pallet_proposals_discussion::Call<T>
+     * Lookup413: pallet_proposals_discussion::Call<T>
      **/
     PalletProposalsDiscussionCall: {
         _enum: {
@@ -3498,7 +3576,7 @@ export default {
         }
     },
     /**
-     * Lookup409: pallet_proposals_codex::Call<T>
+     * Lookup414: pallet_proposals_codex::Call<T>
      **/
     PalletProposalsCodexCall: {
         _enum: {
@@ -3509,7 +3587,7 @@ export default {
         }
     },
     /**
-     * Lookup410: pallet_working_group::Call<T, I>
+     * Lookup415: pallet_working_group::Call<T, I>
      **/
     PalletWorkingGroupCall: {
         _enum: {
@@ -3592,7 +3670,7 @@ export default {
         }
     },
     /**
-     * Lookup419: joystream_node_runtime::OriginCaller
+     * Lookup424: joystream_node_runtime::OriginCaller
      **/
     JoystreamNodeRuntimeOriginCaller: {
         _enum: {
@@ -3601,7 +3679,7 @@ export default {
         }
     },
     /**
-     * Lookup420: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     * Lookup425: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
      **/
     FrameSupportDispatchRawOrigin: {
         _enum: {
@@ -3611,17 +3689,17 @@ export default {
         }
     },
     /**
-     * Lookup421: sp_core::Void
+     * Lookup426: sp_core::Void
      **/
     SpCoreVoid: 'Null',
     /**
-     * Lookup422: pallet_utility::pallet::Error<T>
+     * Lookup427: pallet_utility::pallet::Error<T>
      **/
     PalletUtilityError: {
         _enum: ['TooManyCalls']
     },
     /**
-     * Lookup429: sp_consensus_babe::digests::PreDigest
+     * Lookup434: sp_consensus_babe::digests::PreDigest
      **/
     SpConsensusBabeDigestsPreDigest: {
         _enum: {
@@ -3632,7 +3710,7 @@ export default {
         }
     },
     /**
-     * Lookup430: sp_consensus_babe::digests::PrimaryPreDigest
+     * Lookup435: sp_consensus_babe::digests::PrimaryPreDigest
      **/
     SpConsensusBabeDigestsPrimaryPreDigest: {
         authorityIndex: 'u32',
@@ -3641,14 +3719,14 @@ export default {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup431: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     * Lookup436: sp_consensus_babe::digests::SecondaryPlainPreDigest
      **/
     SpConsensusBabeDigestsSecondaryPlainPreDigest: {
         authorityIndex: 'u32',
         slot: 'u64'
     },
     /**
-     * Lookup432: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     * Lookup437: sp_consensus_babe::digests::SecondaryVRFPreDigest
      **/
     SpConsensusBabeDigestsSecondaryVRFPreDigest: {
         authorityIndex: 'u32',
@@ -3657,35 +3735,20 @@ export default {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup434: sp_consensus_babe::BabeEpochConfiguration
+     * Lookup439: sp_consensus_babe::BabeEpochConfiguration
      **/
     SpConsensusBabeBabeEpochConfiguration: {
         c: '(u64,u64)',
         allowedSlots: 'SpConsensusBabeAllowedSlots'
     },
     /**
-     * Lookup435: pallet_babe::pallet::Error<T>
+     * Lookup441: pallet_babe::pallet::Error<T>
      **/
     PalletBabeError: {
         _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
     },
     /**
-     * Lookup437: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
-     **/
-    PalletAuthorshipUncleEntryItem: {
-        _enum: {
-            InclusionHeight: 'u32',
-            Uncle: '(H256,Option<AccountId32>)'
-        }
-    },
-    /**
-     * Lookup438: pallet_authorship::pallet::Error<T>
-     **/
-    PalletAuthorshipError: {
-        _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
-    },
-    /**
-     * Lookup440: pallet_balances::BalanceLock<Balance>
+     * Lookup443: pallet_balances::BalanceLock<Balance>
      **/
     PalletBalancesBalanceLock: {
         id: '[u8;8]',
@@ -3693,49 +3756,32 @@ export default {
         reasons: 'PalletBalancesReasons'
     },
     /**
-     * Lookup441: pallet_balances::Reasons
+     * Lookup444: pallet_balances::Reasons
      **/
     PalletBalancesReasons: {
         _enum: ['Fee', 'Misc', 'All']
     },
     /**
-     * Lookup444: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     * Lookup447: pallet_balances::ReserveData<ReserveIdentifier, Balance>
      **/
     PalletBalancesReserveData: {
         id: '[u8;8]',
         amount: 'u128'
     },
     /**
-     * Lookup446: pallet_balances::Releases
-     **/
-    PalletBalancesReleases: {
-        _enum: ['V1_0_0', 'V2_0_0']
-    },
-    /**
-     * Lookup447: pallet_balances::pallet::Error<T, I>
+     * Lookup449: pallet_balances::pallet::Error<T, I>
      **/
     PalletBalancesError: {
         _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
     },
     /**
-     * Lookup449: pallet_transaction_payment::Releases
+     * Lookup451: pallet_transaction_payment::Releases
      **/
     PalletTransactionPaymentReleases: {
         _enum: ['V1Ancient', 'V2']
     },
     /**
-     * Lookup450: pallet_election_provider_multi_phase::Phase<Bn>
-     **/
-    PalletElectionProviderMultiPhasePhase: {
-        _enum: {
-            Off: 'Null',
-            Signed: 'Null',
-            Unsigned: '(bool,u32)',
-            Emergency: 'Null'
-        }
-    },
-    /**
-     * Lookup452: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     * Lookup452: pallet_election_provider_multi_phase::ReadySolution<T>
      **/
     PalletElectionProviderMultiPhaseReadySolution: {
         supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
@@ -3743,7 +3789,7 @@ export default {
         compute: 'PalletElectionProviderMultiPhaseElectionCompute'
     },
     /**
-     * Lookup453: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     * Lookup454: pallet_election_provider_multi_phase::RoundSnapshot<T>
      **/
     PalletElectionProviderMultiPhaseRoundSnapshot: {
         voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
@@ -3762,7 +3808,7 @@ export default {
      * Lookup462: pallet_election_provider_multi_phase::pallet::Error<T>
      **/
     PalletElectionProviderMultiPhaseError: {
-        _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
+        _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed', 'BoundNotMet', 'TooManyWinners']
     },
     /**
      * Lookup463: pallet_staking::StakingLedger<T>
@@ -3782,7 +3828,7 @@ export default {
         era: 'Compact<u32>'
     },
     /**
-     * Lookup467: pallet_staking::Nominations<T>
+     * Lookup468: pallet_staking::Nominations<T>
      **/
     PalletStakingNominations: {
         targets: 'Vec<AccountId32>',
@@ -3790,25 +3836,19 @@ export default {
         suppressed: 'bool'
     },
     /**
-     * Lookup468: pallet_staking::ActiveEraInfo
+     * Lookup469: pallet_staking::ActiveEraInfo
      **/
     PalletStakingActiveEraInfo: {
         index: 'u32',
         start: 'Option<u64>'
     },
     /**
-     * Lookup470: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     * Lookup471: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
      **/
     PalletStakingEraRewardPoints: {
         total: 'u32',
         individual: 'BTreeMap<AccountId32, u32>'
     },
-    /**
-     * Lookup474: pallet_staking::Forcing
-     **/
-    PalletStakingForcing: {
-        _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
-    },
     /**
      * Lookup476: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
      **/
@@ -3836,29 +3876,23 @@ export default {
         paidOut: 'u128'
     },
     /**
-     * Lookup482: pallet_staking::Releases
-     **/
-    PalletStakingReleases: {
-        _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
-    },
-    /**
-     * Lookup483: pallet_staking::pallet::pallet::Error<T>
+     * Lookup482: pallet_staking::pallet::pallet::Error<T>
      **/
     PalletStakingPalletError: {
-        _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
+        _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BoundNotMet', 'BondingRestricted']
     },
     /**
-     * Lookup487: sp_core::crypto::KeyTypeId
+     * Lookup486: sp_core::crypto::KeyTypeId
      **/
     SpCoreCryptoKeyTypeId: '[u8;4]',
     /**
-     * Lookup488: pallet_session::pallet::Error<T>
+     * Lookup487: pallet_session::pallet::Error<T>
      **/
     PalletSessionError: {
         _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
     },
     /**
-     * Lookup490: pallet_grandpa::StoredState<N>
+     * Lookup489: pallet_grandpa::StoredState<N>
      **/
     PalletGrandpaStoredState: {
         _enum: {
@@ -3875,7 +3909,7 @@ export default {
         }
     },
     /**
-     * Lookup491: pallet_grandpa::StoredPendingChange<N, Limit>
+     * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
      **/
     PalletGrandpaStoredPendingChange: {
         scheduledAt: 'u32',
@@ -3884,39 +3918,33 @@ export default {
         forced: 'Option<u32>'
     },
     /**
-     * Lookup493: pallet_grandpa::pallet::Error<T>
+     * Lookup492: pallet_grandpa::pallet::Error<T>
      **/
     PalletGrandpaError: {
         _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
     },
     /**
-     * Lookup499: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
      **/
     PalletImOnlineBoundedOpaqueNetworkState: {
         peerId: 'Bytes',
         externalAddresses: 'Vec<Bytes>'
     },
     /**
-     * Lookup503: pallet_im_online::pallet::Error<T>
+     * Lookup502: pallet_im_online::pallet::Error<T>
      **/
     PalletImOnlineError: {
         _enum: ['InvalidKey', 'DuplicatedHeartbeat']
     },
     /**
-     * Lookup504: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
      **/
     SpStakingOffenceOffenceDetails: {
         offender: '(AccountId32,PalletStakingExposure)',
         reporters: 'Vec<AccountId32>'
     },
     /**
-     * Lookup507: pallet_sudo::pallet::Error<T>
-     **/
-    PalletSudoError: {
-        _enum: ['RequireSudo']
-    },
-    /**
-     * Lookup508: pallet_bags_list::list::Node<T, I>
+     * Lookup506: pallet_bags_list::list::Node<T, I>
      **/
     PalletBagsListListNode: {
         id: 'AccountId32',
@@ -3926,14 +3954,14 @@ export default {
         score: 'u64'
     },
     /**
-     * Lookup509: pallet_bags_list::list::Bag<T, I>
+     * Lookup507: pallet_bags_list::list::Bag<T, I>
      **/
     PalletBagsListListBag: {
         head: 'Option<AccountId32>',
         tail: 'Option<AccountId32>'
     },
     /**
-     * Lookup510: pallet_bags_list::pallet::Error<T, I>
+     * Lookup508: pallet_bags_list::pallet::Error<T, I>
      **/
     PalletBagsListError: {
         _enum: {
@@ -3941,25 +3969,25 @@ export default {
         }
     },
     /**
-     * Lookup511: pallet_bags_list::list::ListError
+     * Lookup509: pallet_bags_list::list::ListError
      **/
     PalletBagsListListListError: {
         _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
     },
     /**
-     * Lookup514: pallet_vesting::Releases
+     * Lookup512: pallet_vesting::Releases
      **/
     PalletVestingReleases: {
         _enum: ['V0', 'V1']
     },
     /**
-     * Lookup515: pallet_vesting::pallet::Error<T>
+     * Lookup513: pallet_vesting::pallet::Error<T>
      **/
     PalletVestingError: {
         _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
     },
     /**
-     * Lookup517: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32, MaxApprovals>
      **/
     PalletMultisigMultisig: {
         when: 'PalletMultisigTimepoint',
@@ -3968,20 +3996,20 @@ export default {
         approvals: 'Vec<AccountId32>'
     },
     /**
-     * Lookup519: pallet_multisig::pallet::Error<T>
+     * Lookup517: pallet_multisig::pallet::Error<T>
      **/
     PalletMultisigError: {
         _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
     },
     /**
-     * Lookup520: pallet_council::CouncilStageUpdate<BlockNumber>
+     * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
      **/
     PalletCouncilCouncilStageUpdate: {
         stage: 'PalletCouncilCouncilStage',
         changedAt: 'u32'
     },
     /**
-     * Lookup521: pallet_council::CouncilStage<BlockNumber>
+     * Lookup519: pallet_council::CouncilStage<BlockNumber>
      **/
     PalletCouncilCouncilStage: {
         _enum: {
@@ -3991,26 +4019,26 @@ export default {
         }
     },
     /**
-     * Lookup522: pallet_council::CouncilStageAnnouncing<BlockNumber>
+     * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
      **/
     PalletCouncilCouncilStageAnnouncing: {
         candidatesCount: 'u32',
         endsAt: 'u32'
     },
     /**
-     * Lookup523: pallet_council::CouncilStageElection
+     * Lookup521: pallet_council::CouncilStageElection
      **/
     PalletCouncilCouncilStageElection: {
         candidatesCount: 'u32'
     },
     /**
-     * Lookup524: pallet_council::CouncilStageIdle<BlockNumber>
+     * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
      **/
     PalletCouncilCouncilStageIdle: {
         endsAt: 'u32'
     },
     /**
-     * Lookup526: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
      **/
     PalletCouncilCouncilMember: {
         stakingAccountId: 'AccountId32',
@@ -4021,7 +4049,7 @@ export default {
         unpaidReward: 'u128'
     },
     /**
-     * Lookup528: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
      **/
     PalletCouncilCandidate: {
         stakingAccountId: 'AccountId32',
@@ -4032,13 +4060,13 @@ export default {
         noteHash: 'Option<H256>'
     },
     /**
-     * Lookup529: pallet_council::Error<T>
+     * Lookup527: pallet_council::Error<T>
      **/
     PalletCouncilError: {
         _enum: ['ArithmeticError', 'BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup530: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, bounded_collections::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStage: {
         _enum: {
@@ -4048,7 +4076,7 @@ export default {
         }
     },
     /**
-     * Lookup532: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
      **/
     PalletReferendumReferendumStageVoting: {
         started: 'u32',
@@ -4057,7 +4085,7 @@ export default {
         endsAt: 'u32'
     },
     /**
-     * Lookup533: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+     * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, bounded_collections::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
      **/
     PalletReferendumReferendumStageRevealing: {
         started: 'u32',
@@ -4067,7 +4095,7 @@ export default {
         endsAt: 'u32'
     },
     /**
-     * Lookup534: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
      **/
     PalletReferendumCastVote: {
         commitment: 'H256',
@@ -4076,13 +4104,13 @@ export default {
         voteFor: 'Option<u64>'
     },
     /**
-     * Lookup535: pallet_referendum::Error<T, I>
+     * Lookup533: pallet_referendum::Error<T, I>
      **/
     PalletReferendumError: {
-        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden']
+        _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden', 'AccountAlreadyOptedOutOfVoting']
     },
     /**
-     * Lookup536: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+     * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
      **/
     PalletMembershipMembershipObject: {
         handleHash: 'H256',
@@ -4092,20 +4120,20 @@ export default {
         invites: 'u32'
     },
     /**
-     * Lookup537: pallet_membership::StakingAccountMemberBinding<MemberId>
+     * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
      **/
     PalletMembershipStakingAccountMemberBinding: {
         memberId: 'u64',
         confirmed: 'bool'
     },
     /**
-     * Lookup538: pallet_membership::Error<T>
+     * Lookup536: pallet_membership::Error<T>
      **/
     PalletMembershipError: {
-        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift']
+        _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift', 'InsufficientBalanceToCoverPayment']
     },
     /**
-     * Lookup539: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletForumCategory: {
         titleHash: 'H256',
@@ -4118,7 +4146,7 @@ export default {
         stickyThreadIds: 'BTreeSet<u64>'
     },
     /**
-     * Lookup541: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumThread: {
         categoryId: 'u64',
@@ -4127,7 +4155,7 @@ export default {
         numberOfEditablePosts: 'u64'
     },
     /**
-     * Lookup542: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumPost: {
         threadId: 'u64',
@@ -4137,19 +4165,19 @@ export default {
         lastEdited: 'u32'
     },
     /**
-     * Lookup543: pallet_forum::Error<T>
+     * Lookup541: pallet_forum::Error<T>
      **/
     PalletForumError: {
         _enum: ['ArithmeticError', 'OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero', 'MaxNumberOfStickiedThreadsExceeded']
     },
     /**
-     * Lookup544: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+     * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
      **/
     PalletConstitutionConstitutionInfo: {
         textHash: 'H256'
     },
     /**
-     * Lookup545: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyRecord: {
         creationParams: 'PalletBountyBountyParametersBoundedBTreeSet',
@@ -4159,7 +4187,7 @@ export default {
         hasUnpaidOracleReward: 'bool'
     },
     /**
-     * Lookup547: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyBountyParametersBoundedBTreeSet: {
         oracle: 'PalletBountyBountyActor',
@@ -4171,7 +4199,7 @@ export default {
         fundingType: 'PalletBountyFundingType'
     },
     /**
-     * Lookup548: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup546: pallet_bounty::AssuranceContractType<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletBountyAssuranceContractTypeBoundedBTreeSet: {
         _enum: {
@@ -4180,7 +4208,7 @@ export default {
         }
     },
     /**
-     * Lookup549: pallet_bounty::BountyMilestone<BlockNumber>
+     * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
      **/
     PalletBountyBountyMilestone: {
         _enum: {
@@ -4197,14 +4225,14 @@ export default {
         }
     },
     /**
-     * Lookup551: pallet_bounty::Contribution<T>
+     * Lookup549: pallet_bounty::Contribution<T>
      **/
     PalletBountyContribution: {
         amount: 'u128',
         funderStateBloatBondAmount: 'u128'
     },
     /**
-     * Lookup552: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
      **/
     PalletBountyEntryRecord: {
         memberId: 'u64',
@@ -4213,13 +4241,19 @@ export default {
         workSubmitted: 'bool'
     },
     /**
-     * Lookup553: pallet_bounty::Error<T>
+     * Lookup551: pallet_bounty::Error<T>
      **/
     PalletBountyError: {
         _enum: ['ArithmeticError', 'MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
     },
     /**
-     * Lookup555: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup552: pallet_joystream_utility::Error<T>
+     **/
+    PalletJoystreamUtilityError: {
+        _enum: ['InsufficientFundsForBudgetUpdate', 'ZeroTokensBurn', 'InsufficientFundsForBurn']
+    },
+    /**
+     * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentVideoRecord: {
         inChannel: 'u64',
@@ -4228,7 +4262,7 @@ export default {
         videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup556: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+     * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
      **/
     PalletContentNftTypesOwnedNft: {
         owner: 'PalletContentNftTypesNftOwner',
@@ -4237,7 +4271,7 @@ export default {
         openAuctionsNonce: 'u64'
     },
     /**
-     * Lookup557: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+     * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>
      **/
     PalletContentNftTypesTransactionalStatusRecord: {
         _enum: {
@@ -4249,7 +4283,7 @@ export default {
         }
     },
     /**
-     * Lookup558: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesEnglishAuctionRecord: {
         startingPrice: 'u128',
@@ -4262,14 +4296,14 @@ export default {
         topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
     },
     /**
-     * Lookup561: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionBid: {
         amount: 'u128',
         bidderId: 'u64'
     },
     /**
-     * Lookup562: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletContentNftTypesOpenAuctionRecord: {
         startingPrice: 'u128',
@@ -4280,7 +4314,7 @@ export default {
         start: 'u32'
     },
     /**
-     * Lookup563: pallet_content::nft::types::NftOwner<MemberId>
+     * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
      **/
     PalletContentNftTypesNftOwner: {
         _enum: {
@@ -4289,7 +4323,7 @@ export default {
         }
     },
     /**
-     * Lookup566: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+     * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
      **/
     PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
         curators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -4297,7 +4331,7 @@ export default {
         permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>'
     },
     /**
-     * Lookup573: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
      **/
     PalletContentNftTypesOpenAuctionBidRecord: {
         amount: 'u128',
@@ -4305,13 +4339,13 @@ export default {
         auctionId: 'u64'
     },
     /**
-     * Lookup574: pallet_content::errors::Error<T>
+     * Lookup572: pallet_content::errors::Error<T>
      **/
     PalletContentErrorsError: {
-        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
+        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales', 'ChannelTransfersBlockedDuringActiveAmm']
     },
     /**
-     * Lookup575: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+     * Lookup573: pallet_storage::BagRecord<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
      **/
     PalletStorageBagRecord: {
         storedBy: 'BTreeSet<u64>',
@@ -4320,7 +4354,7 @@ export default {
         objectsNumber: 'u64'
     },
     /**
-     * Lookup578: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketRecord: {
         operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
@@ -4329,7 +4363,7 @@ export default {
         assignedBags: 'u64'
     },
     /**
-     * Lookup579: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketOperatorStatus: {
         _enum: {
@@ -4339,14 +4373,14 @@ export default {
         }
     },
     /**
-     * Lookup581: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+     * Lookup579: pallet_storage::DynamicBagCreationPolicy<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, V, S>>
      **/
     PalletStorageDynamicBagCreationPolicy: {
         numberOfStorageBuckets: 'u32',
         families: 'BTreeMap<u64, u32>'
     },
     /**
-     * Lookup584: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletStorageDataObject: {
         _alias: {
@@ -4358,13 +4392,13 @@ export default {
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup585: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketFamilyRecord: {
         nextDistributionBucketIndex: 'u64'
     },
     /**
-     * Lookup586: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup584: pallet_storage::DistributionBucketRecord<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletStorageDistributionBucketRecord: {
         acceptingNewBags: 'bool',
@@ -4374,13 +4408,13 @@ export default {
         assignedBags: 'u64'
     },
     /**
-     * Lookup589: pallet_storage::Error<T>
+     * Lookup587: pallet_storage::Error<T>
      **/
     PalletStorageError: {
         _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'MaxNumberOfOperatorsPerDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
     },
     /**
-     * Lookup590: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+     * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, bounded_collections::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
      **/
     PalletProjectTokenAccountData: {
         vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
@@ -4391,14 +4425,14 @@ export default {
         lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
     },
     /**
-     * Lookup591: pallet_project_token::types::StakingStatus<Balance>
+     * Lookup589: pallet_project_token::types::StakingStatus<Balance>
      **/
     PalletProjectTokenStakingStatus: {
         splitId: 'u32',
         amount: 'u128'
     },
     /**
-     * Lookup593: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
      **/
     PalletProjectTokenVestingSchedule: {
         linearVestingStartBlock: 'u32',
@@ -4408,7 +4442,7 @@ export default {
         burnedAmount: 'u128'
     },
     /**
-     * Lookup600: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
      **/
     PalletProjectTokenTokenData: {
         totalSupply: 'u128',
@@ -4416,15 +4450,15 @@ export default {
         nextSaleId: 'u32',
         sale: 'Option<PalletProjectTokenTokenSale>',
         transferPolicy: 'PalletProjectTokenTransferPolicy',
-        symbol: 'H256',
         patronageInfo: 'PalletProjectTokenPatronageData',
         accountsNumber: 'u64',
         revenueSplitRate: 'Permill',
         revenueSplit: 'PalletProjectTokenRevenueSplitState',
-        nextRevenueSplitId: 'u32'
+        nextRevenueSplitId: 'u32',
+        ammCurve: 'Option<PalletProjectTokenAmmCurve>'
     },
     /**
-     * Lookup601: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitState: {
         _enum: {
@@ -4433,7 +4467,7 @@ export default {
         }
     },
     /**
-     * Lookup602: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitInfo: {
         allocation: 'u128',
@@ -4441,14 +4475,14 @@ export default {
         dividendsClaimed: 'u128'
     },
     /**
-     * Lookup603: pallet_project_token::types::Timeline<BlockNumber>
+     * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
      **/
     PalletProjectTokenTimeline: {
         start: 'u32',
         duration: 'u32'
     },
     /**
-     * Lookup605: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
      **/
     PalletProjectTokenPatronageData: {
         rate: 'Perquintill',
@@ -4456,13 +4490,13 @@ export default {
         lastUnclaimedPatronageTallyBlock: 'u32'
     },
     /**
-     * Lookup607: pallet_project_token::errors::Error<T>
+     * Lookup606: pallet_project_token::errors::Error<T>
      **/
     PalletProjectTokenErrorsError: {
-        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
+        _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'TransferDestinationMemberDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'CannotInitSaleIfAmmIsActive', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount', 'NotInAmmState', 'InvalidCurveParameters', 'DeadlineExpired', 'SlippageToleranceExceeded', 'InsufficientTokenBalance', 'OutstandingAmmProvidedSupplyTooLarge']
     },
     /**
-     * Lookup608: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     * Lookup607: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
      **/
     PalletProposalsEngineProposal: {
         parameters: 'PalletProposalsEngineProposalParameters',
@@ -4475,7 +4509,7 @@ export default {
         stakingAccountId: 'Option<AccountId32>'
     },
     /**
-     * Lookup609: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     * Lookup608: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
      **/
     PalletProposalsEngineProposalParameters: {
         votingPeriod: 'u32',
@@ -4488,7 +4522,7 @@ export default {
         constitutionality: 'u32'
     },
     /**
-     * Lookup610: pallet_proposals_engine::types::VotingResults
+     * Lookup609: pallet_proposals_engine::types::VotingResults
      **/
     PalletProposalsEngineVotingResults: {
         abstentions: 'u32',
@@ -4497,13 +4531,13 @@ export default {
         slashes: 'u32'
     },
     /**
-     * Lookup613: pallet_proposals_engine::Error<T>
+     * Lookup612: pallet_proposals_engine::Error<T>
      **/
     PalletProposalsEngineError: {
         _enum: ['ArithmeticError', 'EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember', 'MaxDispatchableCallCodeSizeExceeded']
     },
     /**
-     * Lookup614: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup613: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionDiscussionThread: {
         activatedAt: 'u32',
@@ -4511,7 +4545,7 @@ export default {
         mode: 'PalletProposalsDiscussionThreadModeBoundedBTreeSet'
     },
     /**
-     * Lookup616: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+     * Lookup615: pallet_proposals_discussion::types::ThreadMode<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
      **/
     PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
         _enum: {
@@ -4520,7 +4554,7 @@ export default {
         }
     },
     /**
-     * Lookup617: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+     * Lookup616: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProposalsDiscussionDiscussionPost: {
         authorId: 'u64',
@@ -4528,19 +4562,19 @@ export default {
         lastEdited: 'u32'
     },
     /**
-     * Lookup618: pallet_proposals_discussion::Error<T>
+     * Lookup617: pallet_proposals_discussion::Error<T>
      **/
     PalletProposalsDiscussionError: {
         _enum: ['ArithmeticError', 'ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
     },
     /**
-     * Lookup619: pallet_proposals_codex::Error<T>
+     * Lookup618: pallet_proposals_codex::Error<T>
      **/
     PalletProposalsCodexError: {
         _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError']
     },
     /**
-     * Lookup620: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+     * Lookup619: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
      **/
     PalletWorkingGroupOpening: {
         openingType: 'PalletWorkingGroupOpeningType',
@@ -4551,7 +4585,7 @@ export default {
         creationStake: 'u128'
     },
     /**
-     * Lookup621: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+     * Lookup620: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
      **/
     PalletWorkingGroupJobApplication: {
         roleAccountId: 'AccountId32',
@@ -4562,7 +4596,7 @@ export default {
         openingId: 'u64'
     },
     /**
-     * Lookup622: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     * Lookup621: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
      **/
     PalletWorkingGroupGroupWorker: {
         memberId: 'u64',
@@ -4576,13 +4610,13 @@ export default {
         createdAt: 'u32'
     },
     /**
-     * Lookup623: pallet_working_group::errors::Error<T, I>
+     * Lookup622: pallet_working_group::errors::Error<T, I>
      **/
     PalletWorkingGroupErrorsError: {
         _enum: ['ArithmeticError', 'StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup633: sp_runtime::MultiSignature
+     * Lookup632: sp_runtime::MultiSignature
      **/
     SpRuntimeMultiSignature: {
         _enum: {
@@ -4592,39 +4626,39 @@ export default {
         }
     },
     /**
-     * Lookup634: sp_core::ecdsa::Signature
+     * Lookup633: sp_core::ecdsa::Signature
      **/
     SpCoreEcdsaSignature: '[u8;65]',
     /**
-     * Lookup637: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     * Lookup636: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
      **/
     FrameSystemExtensionsCheckNonZeroSender: 'Null',
     /**
-     * Lookup638: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     * Lookup637: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
      **/
     FrameSystemExtensionsCheckSpecVersion: 'Null',
     /**
-     * Lookup639: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     * Lookup638: frame_system::extensions::check_tx_version::CheckTxVersion<T>
      **/
     FrameSystemExtensionsCheckTxVersion: 'Null',
     /**
-     * Lookup640: frame_system::extensions::check_genesis::CheckGenesis<T>
+     * Lookup639: frame_system::extensions::check_genesis::CheckGenesis<T>
      **/
     FrameSystemExtensionsCheckGenesis: 'Null',
     /**
-     * Lookup643: frame_system::extensions::check_nonce::CheckNonce<T>
+     * Lookup642: frame_system::extensions::check_nonce::CheckNonce<T>
      **/
     FrameSystemExtensionsCheckNonce: 'Compact<u32>',
     /**
-     * Lookup644: frame_system::extensions::check_weight::CheckWeight<T>
+     * Lookup643: frame_system::extensions::check_weight::CheckWeight<T>
      **/
     FrameSystemExtensionsCheckWeight: 'Null',
     /**
-     * Lookup645: pallet_transaction_payment::ChargeTransactionPayment<T>
+     * Lookup644: pallet_transaction_payment::ChargeTransactionPayment<T>
      **/
     PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
     /**
-     * Lookup646: joystream_node_runtime::Runtime
+     * Lookup645: joystream_node_runtime::Runtime
      **/
     JoystreamNodeRuntimeRuntime: 'Null'
 };
diff --git a/node_modules/@joystream/types/src/augment/augment-api-consts.ts b/node_modules/@joystream/types/src/augment/augment-api-consts.ts
index d0ba2e8..9096fa4 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-consts.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-consts.ts
@@ -4,7 +4,7 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
 import type { U8aFixed, Vec, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { Perbill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportWeightsRuntimeDbWeight, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, PalletContentLimitPerPeriod, PalletProposalsEngineProposalParameters, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+import type { FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, PalletContentLimitPerPeriod, PalletProposalsEngineProposalParameters, SpVersionRuntimeVersion, SpWeightsRuntimeDbWeight, SpWeightsWeightV2Weight } from '@polkadot/types/lookup';
 
 declare module '@polkadot/api-base/types/consts' {
   export interface AugmentedConsts<ApiType extends ApiTypes> {
@@ -35,14 +35,6 @@ declare module '@polkadot/api-base/types/consts' {
        **/
       stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
     };
-    authorship: {
-      /**
-       * The number of blocks back we should accept uncles.
-       * This means that we will deal with uncle-parents that are
-       * `UncleGenerations + 1` before `now`.
-       **/
-      uncleGenerations: u32 & AugmentedConst<ApiType>;
-    };
     babe: {
       /**
        * The amount of time, in slots, that each epoch should last.
@@ -161,6 +153,10 @@ declare module '@polkadot/api-base/types/consts' {
        * Exports const - default global weekly NFT limit.
        **/
       defaultGlobalWeeklyNftLimit: PalletContentLimitPerPeriod & AugmentedConst<ApiType>;
+      /**
+       * Export const - max cashout allowed limits
+       **/
+      maximumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
       /**
        * Exports const - max number of keys per curator_group.permissions_by_level map instance
        **/
@@ -173,6 +169,10 @@ declare module '@polkadot/api-base/types/consts' {
        * Exports const - max number of curators per group
        **/
       maxNumberOfCuratorsPerGroup: u32 & AugmentedConst<ApiType>;
+      /**
+       * Export const - min cashout allowed limits
+       **/
+      minimumCashoutAllowedLimit: u128 & AugmentedConst<ApiType>;
     };
     contentWorkingGroup: {
       /**
@@ -288,6 +288,16 @@ declare module '@polkadot/api-base/types/consts' {
        * take place over multiple blocks.
        **/
       maxElectingVoters: u32 & AugmentedConst<ApiType>;
+      /**
+       * The maximum number of winners that can be elected by this `ElectionProvider`
+       * implementation.
+       * 
+       * Note: This must always be greater or equal to `T::DataProvider::desired_targets()`.
+       **/
+      maxWinners: u32 & AugmentedConst<ApiType>;
+      minerMaxLength: u32 & AugmentedConst<ApiType>;
+      minerMaxVotesPerVoter: u32 & AugmentedConst<ApiType>;
+      minerMaxWeight: SpWeightsWeightV2Weight & AugmentedConst<ApiType>;
       /**
        * The priority of the unsigned transaction submitted in the unsigned-phase
        **/
@@ -332,7 +342,7 @@ declare module '@polkadot/api-base/types/consts' {
        * this pallet), then [`MinerConfig::solution_weight`] is used to compare against
        * this value.
        **/
-      signedMaxWeight: u64 & AugmentedConst<ApiType>;
+      signedMaxWeight: SpWeightsWeightV2Weight & AugmentedConst<ApiType>;
       /**
        * Duration of the signed phase.
        **/
@@ -397,6 +407,15 @@ declare module '@polkadot/api-base/types/consts' {
        * Max Authorities in use
        **/
       maxAuthorities: u32 & AugmentedConst<ApiType>;
+      /**
+       * The maximum number of entries to keep in the set id to session index mapping.
+       * 
+       * Since the `SetIdSession` map is only used for validating equivocations this
+       * value should relate to the bonding duration of whatever staking system is
+       * being used (if any). If equivocation handling is not enabled then this value
+       * can be zero.
+       **/
+      maxSetIdSessionEntries: u64 & AugmentedConst<ApiType>;
     };
     imOnline: {
       /**
@@ -479,7 +498,7 @@ declare module '@polkadot/api-base/types/consts' {
       /**
        * The maximum amount of signatories allowed in the multisig.
        **/
-      maxSignatories: u16 & AugmentedConst<ApiType>;
+      maxSignatories: u32 & AugmentedConst<ApiType>;
     };
     operationsWorkingGroupAlpha: {
       /**
@@ -719,6 +738,29 @@ declare module '@polkadot/api-base/types/consts' {
        * Number of eras that staked funds must remain bonded for.
        **/
       bondingDuration: u32 & AugmentedConst<ApiType>;
+      /**
+       * Number of eras to keep in history.
+       * 
+       * Following information is kept for eras in `[current_era -
+       * HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,
+       * `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,
+       * `ErasTotalStake`, `ErasStartSessionIndex`,
+       * `StakingLedger.claimed_rewards`.
+       * 
+       * Must be more than the number of eras delayed by session.
+       * I.e. active era must always be in history. I.e. `active_era >
+       * current_era - history_depth` must be guaranteed.
+       * 
+       * If migrating an existing pallet from storage value to config value,
+       * this should be set to same value or greater as in storage.
+       * 
+       * Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`
+       * item `StakingLedger.claimed_rewards`. Setting this value lower than
+       * the existing value can lead to inconsistencies in the
+       * `StakingLedger` and will need to be handled properly in a migration.
+       * The test `reducing_history_depth_abrupt` shows this effect.
+       **/
+      historyDepth: u32 & AugmentedConst<ApiType>;
       /**
        * Maximum number of nominations per nominator.
        **/
@@ -731,8 +773,16 @@ declare module '@polkadot/api-base/types/consts' {
        **/
       maxNominatorRewardedPerValidator: u32 & AugmentedConst<ApiType>;
       /**
-       * The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively
-       * determines how many unique eras a staker may be unbonding in.
+       * The maximum number of `unlocking` chunks a [`StakingLedger`] can
+       * have. Effectively determines how many unique eras a staker may be
+       * unbonding in.
+       * 
+       * Note: `MaxUnlockingChunks` is used as the upper bound for the
+       * `BoundedVec` item `StakingLedger.unlocking`. Setting this value
+       * lower than the existing value can lead to inconsistencies in the
+       * `StakingLedger` and will need to be handled properly in a runtime
+       * migration. The test `reducing_max_unlocking_chunks_abrupt` shows
+       * this effect.
        **/
       maxUnlockingChunks: u32 & AugmentedConst<ApiType>;
       /**
@@ -838,9 +888,9 @@ declare module '@polkadot/api-base/types/consts' {
       /**
        * The weight of runtime database operations the runtime can invoke.
        **/
-      dbWeight: FrameSupportWeightsRuntimeDbWeight & AugmentedConst<ApiType>;
+      dbWeight: SpWeightsRuntimeDbWeight & AugmentedConst<ApiType>;
       /**
-       * The designated SS85 prefix of this chain.
+       * The designated SS58 prefix of this chain.
        * 
        * This replaces the "ss58Format" property declared in the chain spec. Reason is
        * that the runtime should know about the prefix in order to make use of it as
diff --git a/node_modules/@joystream/types/src/augment/augment-api-errors.ts b/node_modules/@joystream/types/src/augment/augment-api-errors.ts
index 465e8ae..cd0b417 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-errors.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-errors.ts
@@ -135,36 +135,6 @@ declare module '@polkadot/api-base/types/errors' {
        **/
       ZeroTokensFunding: AugmentedError<ApiType>;
     };
-    authorship: {
-      /**
-       * The uncle is genesis.
-       **/
-      GenesisUncle: AugmentedError<ApiType>;
-      /**
-       * The uncle parent not in the chain.
-       **/
-      InvalidUncleParent: AugmentedError<ApiType>;
-      /**
-       * The uncle isn't recent enough to be included.
-       **/
-      OldUncle: AugmentedError<ApiType>;
-      /**
-       * The uncle is too high in chain.
-       **/
-      TooHighUncle: AugmentedError<ApiType>;
-      /**
-       * Too many uncles.
-       **/
-      TooManyUncles: AugmentedError<ApiType>;
-      /**
-       * The uncle is already included.
-       **/
-      UncleAlreadyIncluded: AugmentedError<ApiType>;
-      /**
-       * Uncles already set in the block.
-       **/
-      UnclesAlreadySet: AugmentedError<ApiType>;
-    };
     babe: {
       /**
        * A given equivocation report is valid but already previously reported.
@@ -203,7 +173,7 @@ declare module '@polkadot/api-base/types/errors' {
        **/
       ExistingVestingSchedule: AugmentedError<ApiType>;
       /**
-       * Balance too low to send value
+       * Balance too low to send value.
        **/
       InsufficientBalance: AugmentedError<ApiType>;
       /**
@@ -513,6 +483,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Invalid extrinsic call: Channel state bloat bond changed.
        **/
       ChannelStateBloatBondChanged: AugmentedError<ApiType>;
+      /**
+       * Channel Transfers are blocked during active AMM
+       **/
+      ChannelTransfersBlockedDuringActiveAmm: AugmentedError<ApiType>;
       /**
        * Channel Transfers are blocked during revenue splits
        **/
@@ -1233,6 +1207,10 @@ declare module '@polkadot/api-base/types/errors' {
       ZeroTokensFunding: AugmentedError<ApiType>;
     };
     electionProviderMultiPhase: {
+      /**
+       * Some bound not met
+       **/
+      BoundNotMet: AugmentedError<ApiType>;
       /**
        * The call is not allowed at this point.
        **/
@@ -1281,6 +1259,10 @@ declare module '@polkadot/api-base/types/errors' {
        * The signed submission consumes too much weight
        **/
       SignedTooMuchWeight: AugmentedError<ApiType>;
+      /**
+       * Submitted solution has too many winners
+       **/
+      TooManyWinners: AugmentedError<ApiType>;
     };
     forum: {
       /**
@@ -1611,6 +1593,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Handle must be provided during registration.
        **/
       HandleMustBeProvidedDuringRegistration: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance to cover payment.
+       **/
+      InsufficientBalanceToCoverPayment: AugmentedError<ApiType>;
       /**
        * Insufficient balance to cover stake.
        **/
@@ -2276,6 +2262,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Cannot Deissue Token with outstanding accounts
        **/
       CannotDeissueTokenWithOutstandingAccounts: AugmentedError<ApiType>;
+      /**
+       * No Sale if Amm is active
+       **/
+      CannotInitSaleIfAmmIsActive: AugmentedError<ApiType>;
       /**
        * Attempt to issue in a split with zero allocation amount
        **/
@@ -2292,6 +2282,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Attempt to participate in a split with zero token to stake
        **/
       CannotParticipateInSplitWithZeroAmount: AugmentedError<ApiType>;
+      /**
+       * Deadline constraint not satisfied
+       **/
+      DeadlineExpired: AugmentedError<ApiType>;
       /**
        * At least one of the members provided as part of InitialAllocation does not exist
        **/
@@ -2308,10 +2302,18 @@ declare module '@polkadot/api-base/types/errors' {
        * Insufficient JOY Balance to cover the transaction costs
        **/
       InsufficientJoyBalance: AugmentedError<ApiType>;
+      /**
+       * Creator token balance is insufficient
+       **/
+      InsufficientTokenBalance: AugmentedError<ApiType>;
       /**
        * Account's transferrable balance is insufficient to perform the transfer or initialize token sale
        **/
       InsufficientTransferrableBalance: AugmentedError<ApiType>;
+      /**
+       * Invalid bonding curve construction parameters
+       **/
+      InvalidCurveParameters: AugmentedError<ApiType>;
       /**
        * The amount of JOY to be transferred is not enough to keep the destination account alive
        **/
@@ -2333,6 +2335,11 @@ declare module '@polkadot/api-base/types/errors' {
        * Amount of tokens to purchase on sale exceeds the quantity of tokens still available on the sale
        **/
       NotEnoughTokensOnSale: AugmentedError<ApiType>;
+      /**
+       * ------ AMM ---------------------------------------------------------
+       * not in AMM state
+       **/
+      NotInAmmState: AugmentedError<ApiType>;
       /**
        * There are no remaining tokes to recover from the previous token sale.
        **/
@@ -2341,6 +2348,10 @@ declare module '@polkadot/api-base/types/errors' {
        * The token has no upcoming sale
        **/
       NoUpcomingSale: AugmentedError<ApiType>;
+      /**
+       * Oustanding AMM-provided supply constitutes too large percentage of the token's total supply
+       **/
+      OutstandingAmmProvidedSupplyTooLarge: AugmentedError<ApiType>;
       /**
        * Previous sale was still not finalized, finalize it first.
        **/
@@ -2415,6 +2426,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Upper bound quantity cannot be zero
        **/
       SaleUpperBoundQuantityIsZero: AugmentedError<ApiType>;
+      /**
+       * Slippage tolerance constraint tolerance not satisfied
+       **/
+      SlippageToleranceExceeded: AugmentedError<ApiType>;
       /**
        * Target Rate is higher than current patronage rate
        **/
@@ -2432,7 +2447,7 @@ declare module '@polkadot/api-base/types/errors' {
        **/
       TokenSymbolAlreadyInUse: AugmentedError<ApiType>;
       /**
-       * Transfer destination member id invalid
+       * At least one of the transfer destinations is not an existing member id
        **/
       TransferDestinationMemberDoesNotExist: AugmentedError<ApiType>;
       /**
@@ -2688,6 +2703,10 @@ declare module '@polkadot/api-base/types/errors' {
       ZeroExactExecutionBlock: AugmentedError<ApiType>;
     };
     referendum: {
+      /**
+       * A vote cannot be cast from an account that already opted out of voting.
+       **/
+      AccountAlreadyOptedOutOfVoting: AugmentedError<ApiType>;
       /**
        * Trying to vote multiple time in the same cycle
        **/
@@ -2788,6 +2807,10 @@ declare module '@polkadot/api-base/types/errors' {
        * External restriction prevents bonding with given account
        **/
       BondingRestricted: AugmentedError<ApiType>;
+      /**
+       * Some bound is not met.
+       **/
+      BoundNotMet: AugmentedError<ApiType>;
       /**
        * The user has enough bond and thus cannot be chilled forcefully by an external person.
        **/
@@ -2864,8 +2887,8 @@ declare module '@polkadot/api-base/types/errors' {
        **/
       TooManyTargets: AugmentedError<ApiType>;
       /**
-       * There are too many validators in the system. Governance needs to adjust the staking
-       * settings to keep things safe for the runtime.
+       * There are too many validator candidates in the system. Governance needs to adjust the
+       * staking settings to keep things safe for the runtime.
        **/
       TooManyValidators: AugmentedError<ApiType>;
     };
@@ -3263,12 +3286,6 @@ declare module '@polkadot/api-base/types/errors' {
        **/
       ZeroTokensFunding: AugmentedError<ApiType>;
     };
-    sudo: {
-      /**
-       * Sender must be the Sudo account
-       **/
-      RequireSudo: AugmentedError<ApiType>;
-    };
     system: {
       /**
        * The origin filter prevent the call to be dispatched.
diff --git a/node_modules/@joystream/types/src/augment/augment-api-events.ts b/node_modules/@joystream/types/src/augment/augment-api-events.ts
index bdddefb..c5273a4 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-events.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-events.ts
@@ -4,8 +4,8 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
 import type { BTreeMap, BTreeSet, Bytes, Null, Option, Result, U8aFixed, Vec, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
 import type { ITuple } from '@polkadot/types-codec/types';
-import type { AccountId32, H256, Perquintill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
+import type { AccountId32, H256, Perbill, Perquintill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportDispatchDispatchInfo, FrameSupportTokensMiscBalanceStatus, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhasePhase, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmCurve, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingForcing, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpNposElectionsElectionScore, SpRuntimeDispatchError } from '@polkadot/types/lookup';
 
 declare module '@polkadot/api-base/types/events' {
   export interface AugmentedEvents<ApiType extends ApiTypes> {
@@ -460,16 +460,16 @@ declare module '@polkadot/api-base/types/events' {
        **/
       ChannelOwnerRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
       ChannelPausedFeaturesUpdatedByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature>, Bytes]>;
-      ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>]>;
+      ChannelPayoutsUpdated: AugmentedEvent<ApiType, [PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
       ChannelPrivilegeLevelUpdated: AugmentedEvent<ApiType, [u64, u8]>;
       ChannelRewardClaimedAndWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
-      ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u64]>;
+      ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u128, u64]>;
       ChannelStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
       ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
       ChannelUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
       ChannelVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
-      CouncilRewardClaimed: AugmentedEvent<ApiType, [u64, u128]>;
       CreatorTokenIssued: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u64]>;
+      CreatorTokenIssuerRemarked: AugmentedEvent<ApiType, [u64, u64, Bytes]>;
       CuratorAdded: AugmentedEvent<ApiType, [u64, u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>]>;
       CuratorGroupCreated: AugmentedEvent<ApiType, [u64]>;
       CuratorGroupPermissionsUpdated: AugmentedEvent<ApiType, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>]>;
@@ -945,18 +945,23 @@ declare module '@polkadot/api-base/types/events' {
     };
     electionProviderMultiPhase: {
       /**
-       * The election has been finalized, with `Some` of the given computation, or else if the
-       * election failed, `None`.
+       * An election failed.
+       * 
+       * Not much can be said about which computes failed in the process.
        **/
-      ElectionFinalized: AugmentedEvent<ApiType, [electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>], { electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute> }>;
+      ElectionFailed: AugmentedEvent<ApiType, []>;
       /**
-       * An account has been rewarded for their signed submission being finalized.
+       * The election has been finalized, with the given computation and score.
        **/
-      Rewarded: AugmentedEvent<ApiType, [account: AccountId32, value: u128], { account: AccountId32, value: u128 }>;
+      ElectionFinalized: AugmentedEvent<ApiType, [compute: PalletElectionProviderMultiPhaseElectionCompute, score: SpNposElectionsElectionScore], { compute: PalletElectionProviderMultiPhaseElectionCompute, score: SpNposElectionsElectionScore }>;
       /**
-       * The signed phase of the given round has started.
+       * There was a phase transition in a given round.
+       **/
+      PhaseTransitioned: AugmentedEvent<ApiType, [from: PalletElectionProviderMultiPhasePhase, to: PalletElectionProviderMultiPhasePhase, round: u32], { from: PalletElectionProviderMultiPhasePhase, to: PalletElectionProviderMultiPhasePhase, round: u32 }>;
+      /**
+       * An account has been rewarded for their signed submission being finalized.
        **/
-      SignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], { round: u32 }>;
+      Rewarded: AugmentedEvent<ApiType, [account: AccountId32, value: u128], { account: AccountId32, value: u128 }>;
       /**
        * An account has been slashed for submitting an invalid signed submission.
        **/
@@ -964,16 +969,13 @@ declare module '@polkadot/api-base/types/events' {
       /**
        * A solution was stored with the given compute.
        * 
-       * If the solution is signed, this means that it hasn't yet been processed. If the
-       * solution is unsigned, this means that it has also been processed.
-       * 
-       * The `bool` is `true` when a previous solution was ejected to make room for this one.
-       **/
-      SolutionStored: AugmentedEvent<ApiType, [electionCompute: PalletElectionProviderMultiPhaseElectionCompute, prevEjected: bool], { electionCompute: PalletElectionProviderMultiPhaseElectionCompute, prevEjected: bool }>;
-      /**
-       * The unsigned phase of the given round has started.
+       * The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,
+       * the stored solution was submited in the signed phase by a miner with the `AccountId`.
+       * Otherwise, the solution was stored either during the unsigned phase or by
+       * `T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make
+       * room for this one.
        **/
-      UnsignedPhaseStarted: AugmentedEvent<ApiType, [round: u32], { round: u32 }>;
+      SolutionStored: AugmentedEvent<ApiType, [compute: PalletElectionProviderMultiPhaseElectionCompute, origin: Option<AccountId32>, prevEjected: bool], { compute: PalletElectionProviderMultiPhaseElectionCompute, origin: Option<AccountId32>, prevEjected: bool }>;
     };
     forum: {
       /**
@@ -1297,9 +1299,9 @@ declare module '@polkadot/api-base/types/events' {
       LeaderInvitationQuotaUpdated: AugmentedEvent<ApiType, [u32]>;
       MemberAccountsUpdated: AugmentedEvent<ApiType, [u64, Option<AccountId32>, Option<AccountId32>]>;
       MemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateMemberParameters, u32]>;
-      MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters]>;
+      MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters, u128]>;
       MemberProfileUpdated: AugmentedEvent<ApiType, [u64, Option<Bytes>, Option<Bytes>]>;
-      MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
+      MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
       MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters, u32]>;
       MembershipGifted: AugmentedEvent<ApiType, [u64, PalletMembershipGiftMembershipParameters]>;
       MembershipPriceUpdated: AugmentedEvent<ApiType, [u128]>;
@@ -2069,6 +2071,22 @@ declare module '@polkadot/api-base/types/events' {
        * - ongoing policy
        **/
       AccountDustedBy: AugmentedEvent<ApiType, [u64, u64, AccountId32, PalletProjectTokenTransferPolicy]>;
+      /**
+       * AMM activated
+       * Params:
+       * - token id
+       * - member id
+       * - params for the bonding curve
+       **/
+      AmmActivated: AugmentedEvent<ApiType, [u64, u64, PalletProjectTokenAmmCurve]>;
+      /**
+       * AMM deactivated
+       * Params:
+       * - token id
+       * - member id
+       * - amm treasury amount burned upon deactivation
+       **/
+      AmmDeactivated: AugmentedEvent<ApiType, [u64, u64, u128]>;
       /**
        * Member joined whitelist
        * Params:
@@ -2168,6 +2186,15 @@ declare module '@polkadot/api-base/types/events' {
        * - token sale metadata
        **/
       TokenSaleInitialized: AugmentedEvent<ApiType, [u64, u32, PalletProjectTokenTokenSale, Option<Bytes>]>;
+      /**
+       * Tokens Bought on AMM
+       * Params:
+       * - token id
+       * - member id
+       * - amount of CRT minted
+       * - amount of JOY deposited into curve treasury
+       **/
+      TokensBoughtOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
       /**
        * Tokens Burned
        * Params:
@@ -2185,6 +2212,15 @@ declare module '@polkadot/api-base/types/events' {
        * - buyer's member id
        **/
       TokensPurchasedOnSale: AugmentedEvent<ApiType, [u64, u32, u128, u64]>;
+      /**
+       * Tokens Sold on AMM
+       * Params:
+       * - token id
+       * - member id
+       * - amount of CRT burned
+       * - amount of JOY withdrawn from curve treasury
+       **/
+      TokensSoldOnAmm: AugmentedEvent<ApiType, [u64, u64, u128, u128]>;
       /**
        * Transfer Policy Changed To Permissionless
        * Params:
@@ -2291,6 +2327,10 @@ declare module '@polkadot/api-base/types/events' {
       Voted: AugmentedEvent<ApiType, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
     };
     referendum: {
+      /**
+       * Account permanently opted out of voting in referendum.
+       **/
+      AccountOptedOutOfVoting: AugmentedEvent<ApiType, [AccountId32]>;
       /**
        * Referendum ended and winning option was selected
        **/
@@ -2334,40 +2374,46 @@ declare module '@polkadot/api-base/types/events' {
        * NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
        * it will not be emitted for staking rewards when they are added to stake.
        **/
-      Bonded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      Bonded: AugmentedEvent<ApiType, [stash: AccountId32, amount: u128], { stash: AccountId32, amount: u128 }>;
       /**
        * An account has stopped participating as either a validator or nominator.
-       * \[stash\]
        **/
-      Chilled: AugmentedEvent<ApiType, [AccountId32]>;
+      Chilled: AugmentedEvent<ApiType, [stash: AccountId32], { stash: AccountId32 }>;
       /**
        * The era payout has been set; the first balance is the validator-payout; the second is
        * the remainder from the maximum amount of reward.
-       * \[era_index, validator_payout, remainder\]
        **/
-      EraPaid: AugmentedEvent<ApiType, [u32, u128, u128]>;
+      EraPaid: AugmentedEvent<ApiType, [eraIndex: u32, validatorPayout: u128, remainder: u128], { eraIndex: u32, validatorPayout: u128, remainder: u128 }>;
       /**
-       * A nominator has been kicked from a validator. \[nominator, stash\]
+       * A new force era mode was set.
        **/
-      Kicked: AugmentedEvent<ApiType, [AccountId32, AccountId32]>;
+      ForceEra: AugmentedEvent<ApiType, [mode: PalletStakingForcing], { mode: PalletStakingForcing }>;
+      /**
+       * A nominator has been kicked from a validator.
+       **/
+      Kicked: AugmentedEvent<ApiType, [nominator: AccountId32, stash: AccountId32], { nominator: AccountId32, stash: AccountId32 }>;
       /**
        * An old slashing report from a prior era was discarded because it could
-       * not be processed. \[session_index\]
+       * not be processed.
        **/
-      OldSlashingReportDiscarded: AugmentedEvent<ApiType, [u32]>;
+      OldSlashingReportDiscarded: AugmentedEvent<ApiType, [sessionIndex: u32], { sessionIndex: u32 }>;
       /**
-       * The stakers' rewards are getting paid. \[era_index, validator_stash\]
+       * The stakers' rewards are getting paid.
        **/
-      PayoutStarted: AugmentedEvent<ApiType, [u32, AccountId32]>;
+      PayoutStarted: AugmentedEvent<ApiType, [eraIndex: u32, validatorStash: AccountId32], { eraIndex: u32, validatorStash: AccountId32 }>;
       /**
-       * The nominator has been rewarded by this amount. \[stash, amount\]
+       * The nominator has been rewarded by this amount.
        **/
-      Rewarded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      Rewarded: AugmentedEvent<ApiType, [stash: AccountId32, amount: u128], { stash: AccountId32, amount: u128 }>;
       /**
-       * One validator (and its nominators) has been slashed by the given amount.
-       * \[validator, amount\]
+       * A staker (validator or nominator) has been slashed by the given amount.
        **/
-      Slashed: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      Slashed: AugmentedEvent<ApiType, [staker: AccountId32, amount: u128], { staker: AccountId32, amount: u128 }>;
+      /**
+       * A slash for the given validator, for the given percentage of their stake, at the given
+       * era as been reported.
+       **/
+      SlashReported: AugmentedEvent<ApiType, [validator: AccountId32, fraction: Perbill, slashEra: u32], { validator: AccountId32, fraction: Perbill, slashEra: u32 }>;
       /**
        * A new set of stakers was elected.
        **/
@@ -2377,18 +2423,18 @@ declare module '@polkadot/api-base/types/events' {
        **/
       StakingElectionFailed: AugmentedEvent<ApiType, []>;
       /**
-       * An account has unbonded this amount. \[stash, amount\]
+       * An account has unbonded this amount.
        **/
-      Unbonded: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      Unbonded: AugmentedEvent<ApiType, [stash: AccountId32, amount: u128], { stash: AccountId32, amount: u128 }>;
       /**
        * A validator has set their preferences.
        **/
-      ValidatorPrefsSet: AugmentedEvent<ApiType, [AccountId32, PalletStakingValidatorPrefs]>;
+      ValidatorPrefsSet: AugmentedEvent<ApiType, [stash: AccountId32, prefs: PalletStakingValidatorPrefs], { stash: AccountId32, prefs: PalletStakingValidatorPrefs }>;
       /**
        * An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
-       * from the unlocking queue. \[stash, amount\]
+       * from the unlocking queue.
        **/
-      Withdrawn: AugmentedEvent<ApiType, [AccountId32, u128]>;
+      Withdrawn: AugmentedEvent<ApiType, [stash: AccountId32, amount: u128], { stash: AccountId32, amount: u128 }>;
     };
     storage: {
       /**
@@ -2873,20 +2919,6 @@ declare module '@polkadot/api-base/types/events' {
        **/
       WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
     };
-    sudo: {
-      /**
-       * The \[sudoer\] just switched identity; the old key is supplied if one existed.
-       **/
-      KeyChanged: AugmentedEvent<ApiType, [oldSudoer: Option<AccountId32>], { oldSudoer: Option<AccountId32> }>;
-      /**
-       * A sudo just took place. \[result\]
-       **/
-      Sudid: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], { sudoResult: Result<Null, SpRuntimeDispatchError> }>;
-      /**
-       * A sudo just took place. \[result\]
-       **/
-      SudoAsDone: AugmentedEvent<ApiType, [sudoResult: Result<Null, SpRuntimeDispatchError>], { sudoResult: Result<Null, SpRuntimeDispatchError> }>;
-    };
     system: {
       /**
        * `:code` was updated.
@@ -2895,11 +2927,11 @@ declare module '@polkadot/api-base/types/events' {
       /**
        * An extrinsic failed.
        **/
-      ExtrinsicFailed: AugmentedEvent<ApiType, [dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportWeightsDispatchInfo], { dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportWeightsDispatchInfo }>;
+      ExtrinsicFailed: AugmentedEvent<ApiType, [dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportDispatchDispatchInfo], { dispatchError: SpRuntimeDispatchError, dispatchInfo: FrameSupportDispatchDispatchInfo }>;
       /**
        * An extrinsic completed successfully.
        **/
-      ExtrinsicSuccess: AugmentedEvent<ApiType, [dispatchInfo: FrameSupportWeightsDispatchInfo], { dispatchInfo: FrameSupportWeightsDispatchInfo }>;
+      ExtrinsicSuccess: AugmentedEvent<ApiType, [dispatchInfo: FrameSupportDispatchDispatchInfo], { dispatchInfo: FrameSupportDispatchDispatchInfo }>;
       /**
        * An account was reaped.
        **/
@@ -2913,6 +2945,13 @@ declare module '@polkadot/api-base/types/events' {
        **/
       Remarked: AugmentedEvent<ApiType, [sender: AccountId32, hash_: H256], { sender: AccountId32, hash_: H256 }>;
     };
+    transactionPayment: {
+      /**
+       * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
+       * has been paid by `who`.
+       **/
+      TransactionFeePaid: AugmentedEvent<ApiType, [who: AccountId32, actualFee: u128, tip: u128], { who: AccountId32, actualFee: u128, tip: u128 }>;
+    };
     utility: {
       /**
        * Batch of dispatches completed fully with no error.
diff --git a/node_modules/@joystream/types/src/augment/augment-api-query.ts b/node_modules/@joystream/types/src/augment/augment-api-query.ts
index e4b6b80..3ee9cfd 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-query.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-query.ts
@@ -2,10 +2,10 @@
 /* eslint-disable */
 
 import type { ApiTypes } from '@polkadot/api-base/types';
-import type { BTreeMap, Bytes, Null, Option, U8aFixed, Vec, WrapperKeepOpaque, WrapperOpaque, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
+import type { Bytes, Null, Option, U8aFixed, Vec, WrapperOpaque, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, ITuple } from '@polkadot/types-codec/types';
-import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportWeightsPerDispatchClassU64, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipUncleEntryItem, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyBountyActor, PalletBountyBountyRecord, PalletBountyContribution, PalletBountyEntryRecord, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletMultisigMultisig, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
+import type { AccountId32, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportDispatchPerDispatchClassWeight, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReserveData, PalletBountyBountyActor, PalletBountyBountyRecord, PalletBountyContribution, PalletBountyEntryRecord, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletMultisigMultisig, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
 import type { Observable } from '@polkadot/types/types';
 
 declare module '@polkadot/api-base/types/storage' {
@@ -67,14 +67,6 @@ declare module '@polkadot/api-base/types/storage' {
        * Author of current block.
        **/
       author: AugmentedQuery<ApiType, () => Observable<Option<AccountId32>>, []>;
-      /**
-       * Whether uncles were already set in this block.
-       **/
-      didSetUncles: AugmentedQuery<ApiType, () => Observable<bool>, []>;
-      /**
-       * Uncles
-       **/
-      uncles: AugmentedQuery<ApiType, () => Observable<Vec<PalletAuthorshipUncleEntryItem>>, []>;
     };
     babe: {
       /**
@@ -169,6 +161,17 @@ declare module '@polkadot/api-base/types/storage' {
        * epoch.
        **/
       segmentIndex: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * A list of the last 100 skipped epochs and the corresponding session index
+       * when the epoch was skipped.
+       * 
+       * This is only used for validating equivocation proofs. An equivocation proof
+       * must contains a key-ownership proof for a given session, therefore we need a
+       * way to tie together sessions and epoch indices, i.e. we need to validate that
+       * a validator was the owner of a given key on a given session, and what the
+       * active epoch index was during that session.
+       **/
+      skippedEpochs: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[u64, u32]>>>, []>;
       /**
        * TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
        **/
@@ -220,6 +223,10 @@ declare module '@polkadot/api-base/types/storage' {
        * NOTE: This is only used in the case that this pallet is used to store balances.
        **/
       account: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletBalancesAccountData>, [AccountId32]>;
+      /**
+       * The total units of outstanding deactivated balance in the system.
+       **/
+      inactiveIssuance: AugmentedQuery<ApiType, () => Observable<u128>, []>;
       /**
        * Any liquidity locks on some account balances.
        * NOTE: Should only be accessed when setting, changing and freeing a lock.
@@ -229,12 +236,6 @@ declare module '@polkadot/api-base/types/storage' {
        * Named reserves on some account balances.
        **/
       reserves: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Vec<PalletBalancesReserveData>>, [AccountId32]>;
-      /**
-       * Storage version of the pallet.
-       * 
-       * This is set to v2.0.0 for new networks.
-       **/
-      storageVersion: AugmentedQuery<ApiType, () => Observable<PalletBalancesReleases>, []>;
       /**
        * The total units issued in the system.
        **/
@@ -522,14 +523,14 @@ declare module '@polkadot/api-base/types/storage' {
        **/
       round: AugmentedQuery<ApiType, () => Observable<u32>, []>;
       /**
-       * A sorted, bounded set of `(score, index)`, where each `index` points to a value in
-       * `SignedSubmissions`.
+       * A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a
+       * value in `SignedSubmissions`.
        * 
        * We never need to process more than a single signed submission at a time. Signed submissions
        * can be quite large, so we're willing to pay the cost of multiple database accesses to access
        * them one at a time instead of reading and decoding all of them at once.
        **/
-      signedSubmissionIndices: AugmentedQuery<ApiType, () => Observable<BTreeMap<SpNposElectionsElectionScore, u32>>, []>;
+      signedSubmissionIndices: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[SpNposElectionsElectionScore, u32, u32]>>>, []>;
       /**
        * The next index to be assigned to an incoming signed submission.
        * 
@@ -659,6 +660,12 @@ declare module '@polkadot/api-base/types/storage' {
        * A mapping from grandpa set ID to the index of the *most recent* session for which its
        * members were responsible.
        * 
+       * This is only used for validating equivocation proofs. An equivocation proof must
+       * contains a key-ownership proof for a given session, therefore we need a way to tie
+       * together sessions and GRANDPA set ids, i.e. we need to validate that a validator
+       * was the owner of a given key on a given session, and what the active set ID was
+       * during that session.
+       * 
        * TWOX-NOTE: `SetId` is not under user control.
        **/
       setIdSession: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<u32>>, [u64]>;
@@ -791,7 +798,6 @@ declare module '@polkadot/api-base/types/storage' {
       workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
     };
     multisig: {
-      calls: AugmentedQuery<ApiType, (arg: U8aFixed | string | Uint8Array) => Observable<Option<ITuple<[WrapperKeepOpaque<Call>, AccountId32, u128]>>>, [U8aFixed]>;
       /**
        * The set of open multisig operations.
        **/
@@ -947,6 +953,18 @@ declare module '@polkadot/api-base/types/storage' {
        * Double map TokenId x MemberId => AccountData for managing account data
        **/
       accountInfoByTokenAndMember: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<PalletProjectTokenAccountData>, [u64, u64]>;
+      /**
+       * AMM buy transaction fee percentage
+       **/
+      ammBuyTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * Percentage threshold for deactivating the amm functionality
+       **/
+      ammDeactivationThreshold: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
+      /**
+       * AMM sell transaction fee percentage
+       **/
+      ammSellTxFees: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
       /**
        * Bloat Bond value used during account creation
        **/
@@ -971,10 +989,6 @@ declare module '@polkadot/api-base/types/storage' {
        * Platform fee (percentage) charged on top of each sale purchase (in JOY) and burned
        **/
       salePlatformFee: AugmentedQuery<ApiType, () => Observable<Permill>, []>;
-      /**
-       * Set for the tokens symbols
-       **/
-      symbolsUsed: AugmentedQuery<ApiType, (arg: H256 | string | Uint8Array) => Observable<Null>, [H256]>;
       /**
        * map TokenId => TokenData to retrieve token information
        **/
@@ -1035,6 +1049,10 @@ declare module '@polkadot/api-base/types/storage' {
       randomMaterial: AugmentedQuery<ApiType, () => Observable<Vec<H256>>, []>;
     };
     referendum: {
+      /**
+       * Accounts that permanently opted out of voting in referendum.
+       **/
+      accountsOptedOut: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Null>, [AccountId32]>;
       /**
        * Current referendum stage.
        **/
@@ -1095,6 +1113,8 @@ declare module '@polkadot/api-base/types/storage' {
       activeEra: AugmentedQuery<ApiType, () => Observable<Option<PalletStakingActiveEraInfo>>, []>;
       /**
        * Map from all locked "stash" accounts to the controller account.
+       * 
+       * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        **/
       bonded: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<AccountId32>>, [AccountId32]>;
       /**
@@ -1136,10 +1156,6 @@ declare module '@polkadot/api-base/types/storage' {
        * This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
        **/
       currentPlannedSession: AugmentedQuery<ApiType, () => Observable<u32>, []>;
-      /**
-       * The earliest era for which we have a pending, unapplied slash.
-       **/
-      earliestUnappliedSlash: AugmentedQuery<ApiType, () => Observable<Option<u32>>, []>;
       /**
        * Rewards for the last `HISTORY_DEPTH` eras.
        * If reward hasn't been set or has been removed then 0 reward is returned.
@@ -1198,16 +1214,6 @@ declare module '@polkadot/api-base/types/storage' {
        * Mode of era forcing.
        **/
       forceEra: AugmentedQuery<ApiType, () => Observable<PalletStakingForcing>, []>;
-      /**
-       * Number of eras to keep in history.
-       * 
-       * Information is kept for eras in `[current_era - history_depth; current_era]`.
-       * 
-       * Must be more than the number of eras delayed by session otherwise. I.e. active era must
-       * always be in history. I.e. `active_era > current_era - history_depth` must be
-       * guaranteed.
-       **/
-      historyDepth: AugmentedQuery<ApiType, () => Observable<u32>, []>;
       /**
        * Any validators that may never be slashed or forcibly kicked. It's a Vec since they're
        * easy to initialize and the performance hit is minimal (we expect no more than four
@@ -1236,6 +1242,10 @@ declare module '@polkadot/api-base/types/storage' {
        * If set to `0`, no limit exists.
        **/
       minCommission: AugmentedQuery<ApiType, () => Observable<Perbill>, []>;
+      /**
+       * The minimum active nominator stake of the last successful election.
+       **/
+      minimumActiveStake: AugmentedQuery<ApiType, () => Observable<u128>, []>;
       /**
        * Minimum number of staking participants before emergency conditions are imposed.
        **/
@@ -1265,6 +1275,8 @@ declare module '@polkadot/api-base/types/storage' {
        * 
        * Lastly, if any of the nominators become non-decodable, they can be chilled immediately via
        * [`Call::chill_other`] dispatchable by anyone.
+       * 
+       * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        **/
       nominators: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<Option<PalletStakingNominations>>, [AccountId32]>;
       /**
@@ -1285,6 +1297,8 @@ declare module '@polkadot/api-base/types/storage' {
       offendingValidators: AugmentedQuery<ApiType, () => Observable<Vec<ITuple<[u32, bool]>>>, []>;
       /**
        * Where the reward payment should be made. Keyed by stash.
+       * 
+       * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        **/
       payee: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletStakingRewardDestination>, [AccountId32]>;
       /**
@@ -1302,23 +1316,18 @@ declare module '@polkadot/api-base/types/storage' {
        * as well as how much reward has been paid out.
        **/
       spanSlash: AugmentedQuery<ApiType, (arg: ITuple<[AccountId32, u32]> | [AccountId32 | string | Uint8Array, u32 | AnyNumber | Uint8Array]) => Observable<PalletStakingSlashingSpanRecord>, [ITuple<[AccountId32, u32]>]>;
-      /**
-       * True if network has been upgraded to this version.
-       * Storage version of the pallet.
-       * 
-       * This is set to v7.0.0 for new networks.
-       **/
-      storageVersion: AugmentedQuery<ApiType, () => Observable<PalletStakingReleases>, []>;
       /**
        * All unapplied slashes that are queued for later.
        **/
       unappliedSlashes: AugmentedQuery<ApiType, (arg: u32 | AnyNumber | Uint8Array) => Observable<Vec<PalletStakingUnappliedSlash>>, [u32]>;
       /**
-       * The ideal number of staking participants.
+       * The ideal number of active validators.
        **/
       validatorCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
       /**
        * The map from (wannabe) validator stash key to the preferences of that validator.
+       * 
+       * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        **/
       validators: AugmentedQuery<ApiType, (arg: AccountId32 | string | Uint8Array) => Observable<PalletStakingValidatorPrefs>, [AccountId32]>;
       /**
@@ -1447,12 +1456,6 @@ declare module '@polkadot/api-base/types/storage' {
        **/
       workerById: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletWorkingGroupGroupWorker>>, [u64]>;
     };
-    sudo: {
-      /**
-       * The `AccountId` of the sudo key.
-       **/
-      key: AugmentedQuery<ApiType, () => Observable<Option<AccountId32>>, []>;
-    };
     system: {
       /**
        * The full account information for a particular account ID.
@@ -1469,7 +1472,7 @@ declare module '@polkadot/api-base/types/storage' {
       /**
        * The current weight for the block.
        **/
-      blockWeight: AugmentedQuery<ApiType, () => Observable<FrameSupportWeightsPerDispatchClassU64>, []>;
+      blockWeight: AugmentedQuery<ApiType, () => Observable<FrameSupportDispatchPerDispatchClassWeight>, []>;
       /**
        * Digest of the current block, also part of the block header.
        **/
diff --git a/node_modules/@joystream/types/src/augment/augment-api-tx.ts b/node_modules/@joystream/types/src/augment/augment-api-tx.ts
index d9b72b5..c2ecb6e 100644
--- a/node_modules/@joystream/types/src/augment/augment-api-tx.ts
+++ b/node_modules/@joystream/types/src/augment/augment-api-tx.ts
@@ -2,10 +2,10 @@
 /* eslint-disable */
 
 import type { ApiTypes } from '@polkadot/api-base/types';
-import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, IMethod, ITuple } from '@polkadot/types-codec/types';
 import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
+import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParametersBTreeSet, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenAmmParams, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpSessionMembershipProof, SpWeightsWeightV2Weight } from '@polkadot/types/lookup';
 
 declare module '@polkadot/api-base/types/submittable' {
   export interface AugmentedSubmittables<ApiType extends ApiTypes> {
@@ -258,12 +258,6 @@ declare module '@polkadot/api-base/types/submittable' {
        **/
       workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
     };
-    authorship: {
-      /**
-       * Provide a set of uncles.
-       **/
-      setUncles: AugmentedSubmittable<(newUncles: Vec<SpRuntimeHeader> | (SpRuntimeHeader | { parentHash?: any; number?: any; stateRoot?: any; extrinsicsRoot?: any; digest?: any } | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<SpRuntimeHeader>]>;
-    };
     babe: {
       /**
        * Plan an epoch config change. The epoch config change is recorded and will be enacted on
@@ -321,10 +315,9 @@ declare module '@polkadot/api-base/types/submittable' {
       /**
        * Exactly as `transfer`, except the origin must be root and the source account may be
        * specified.
-       * # <weight>
+       * ## Complexity
        * - Same as transfer, but additional read and write because the source account is not
        * assumed to be in the overlay.
-       * # </weight>
        **/
       forceTransfer: AugmentedSubmittable<(source: AccountId32 | string | Uint8Array, dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, AccountId32, Compact<u128>]>;
       /**
@@ -353,7 +346,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin for this call must be `Signed` by the transactor.
        * 
-       * # <weight>
+       * ## Complexity
        * - Dependent on arguments but not critical, given proper implementations for input config
        * types. See related functions below.
        * - It contains a limited number of reads and writes internally and no complex
@@ -367,9 +360,6 @@ declare module '@polkadot/api-base/types/submittable' {
        * - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.
        * - `transfer_keep_alive` works the same way as `transfer`, but has an additional check
        * that the transfer will not kill the origin account.
-       * ---------------------------------
-       * - Origin account is already in memory, so no DB operations for them.
-       * # </weight>
        **/
       transfer: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>]>;
       /**
@@ -387,9 +377,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
        * of the funds the account has, causing the sender account to be killed (false), or
        * transfer everything except at least the existential deposit, which will guarantee to
-       * keep the sender account alive (true). # <weight>
+       * keep the sender account alive (true). ## Complexity
        * - O(1). Just like transfer, but reading the user's transferable balance first.
-       * #</weight>
        **/
       transferAll: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, keepAlive: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, bool]>;
       /**
@@ -632,6 +621,10 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       acceptIncomingOffer: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, witnessPrice: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
+      /**
+       * Activate Amm functionality for token
+       **/
+      activateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenAmmParams | { slope?: any; intercept?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenAmmParams]>;
       /**
        * Add curator to curator group under given `curator_group_id`
        * 
@@ -751,19 +744,6 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       channelOwnerRemark: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
-      /**
-       * Claim and withdraw reward in JOY from channel account
-       * 
-       * <weight>
-       * 
-       * ## Weight
-       * `O (H)` where:
-       * - `H` is the lenght of the provided merkle `proof`
-       * - DB:
-       * - O(1)
-       * # </weight>
-       **/
-      claimAndWithdrawChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, proof: Vec<PalletCommonMerkleTreeProofElementRecord> | (PalletCommonMerkleTreeProofElementRecord | { hash_?: any; side?: any } | string | Uint8Array)[], item: PalletContentPullPaymentElement | { channelId?: any; cumulativeRewardEarned?: any; reason?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonMerkleTreeProofElementRecord>, PalletContentPullPaymentElement]>;
       /**
        * Claim reward in JOY from channel account
        * 
@@ -831,6 +811,10 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       createVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoCreationParametersRecord | { assets?: any; meta?: any; autoIssueNft?: any; expectedVideoStateBloatBond?: any; expectedDataObjectStateBloatBond?: any; storageBucketsNumWitness?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoCreationParametersRecord]>;
+      /**
+       * Allow crt issuer to update metadata for an existing token
+       **/
+      creatorTokenIssuerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, remark: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
       /**
        * Perform transfer of tokens as creator token issuer
        * 
@@ -845,6 +829,10 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       creatorTokenIssuerTransfer: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPaymentWithVesting, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTransfersPaymentWithVesting, Bytes]>;
+      /**
+       * Deactivate Amm functionality for token
+       **/
+      deactivateAmm: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
       /**
        * Deissue channel's creator token
        * 
@@ -870,7 +858,6 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       deleteChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | { storageBucketsNum?: any; distributionBucketsNum?: any } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64]>;
-      deleteChannelAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | { storageBucketsNum?: any; distributionBucketsNum?: any } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64, Bytes]>;
       /**
        * <weight>
        * 
@@ -896,19 +883,6 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       deleteVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Option<u32>]>;
-      /**
-       * <weight>
-       * 
-       * ## Weight
-       * `O (A + B + C)` where:
-       * - `A` is the value of `num_objects_to_delete`
-       * - `B` is the value of `storage_buckets_num_witness`
-       * - `C` is the size of `rationale` in kilobytes
-       * - DB:
-       * - `O(A + B)` - from the the generated weights
-       * # </weight>
-       **/
-      deleteVideoAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u64, Bytes]>;
       /**
        * <weight>
        * 
@@ -996,7 +970,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * - `O(A)` - from the the generated weights
        * # </weight>
        **/
-      issueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenTokenIssuanceParameters | { initialAllocation?: any; symbol?: any; transferPolicy?: any; patronageRate?: any; revenueSplitRate?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenIssuanceParameters]>;
+      issueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenTokenIssuanceParameters | { initialAllocation?: any; transferPolicy?: any; patronageRate?: any; revenueSplitRate?: any; metadata?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenIssuanceParameters]>;
       /**
        * Issue NFT
        * 
@@ -1289,7 +1263,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * - O(1)
        * # </weight>
        **/
-      updateChannelPayouts: AugmentedSubmittable<(params: PalletContentUpdateChannelPayoutsParametersRecord | { commitment?: any; payload?: any; minCashoutAllowed?: any; maxCashoutAllowed?: any; channelCashoutsEnabled?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord]>;
+      updateChannelPayouts: AugmentedSubmittable<(params: PalletContentUpdateChannelPayoutsParametersRecord | { commitment?: any; payload?: any; minCashoutAllowed?: any; maxCashoutAllowed?: any; channelCashoutsEnabled?: any } | string | Uint8Array, uploaderAccount: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord, AccountId32]>;
       /**
        * Extrinsic for updating channel privilege level (requires lead access)
        * 
@@ -2570,12 +2544,17 @@ declare module '@polkadot/api-base/types/submittable' {
     };
     grandpa: {
       /**
-       * Note that the current authority set of the GRANDPA finality gadget has
-       * stalled. This will trigger a forced authority set change at the beginning
-       * of the next session, to be enacted `delay` blocks after that. The delay
-       * should be high enough to safely assume that the block signalling the
-       * forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters
-       * will start the new authority set using the given finalized block as base.
+       * Note that the current authority set of the GRANDPA finality gadget has stalled.
+       * 
+       * This will trigger a forced authority set change at the beginning of the next session, to
+       * be enacted `delay` blocks after that. The `delay` should be high enough to safely assume
+       * that the block signalling the forced change will not be re-orged e.g. 1000 blocks.
+       * The block production rate (which may be slowed down because of finality lagging) should
+       * be taken into account when choosing the `delay`. The GRANDPA voters based on the new
+       * authority will start voting on top of `best_finalized_block_number` for new finalized
+       * blocks. `best_finalized_block_number` should be the highest of the latest finalized
+       * block of all validators of the new authority set.
+       * 
        * Only callable by root.
        **/
       noteStalled: AugmentedSubmittable<(delay: u32 | AnyNumber | Uint8Array, bestFinalizedBlockNumber: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32, u32]>;
@@ -2601,15 +2580,11 @@ declare module '@polkadot/api-base/types/submittable' {
     };
     imOnline: {
       /**
-       * # <weight>
-       * - Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is
-       * length of `heartbeat.network_state.external_address`
+       * ## Complexity:
+       * - `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is length of
+       * `heartbeat.network_state.external_address`
        * - `O(K)`: decoding of length `K`
        * - `O(E)`: decoding/encoding of length `E`
-       * - DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,
-       * `ReceivedHeartbeats`
-       * - DbWrites: `ReceivedHeartbeats`
-       * # </weight>
        **/
       heartbeat: AugmentedSubmittable<(heartbeat: PalletImOnlineHeartbeat | { blockNumber?: any; networkState?: any; sessionIndex?: any; authorityIndex?: any; validatorsLen?: any } | string | Uint8Array, signature: PalletImOnlineSr25519AppSr25519Signature | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature]>;
     };
@@ -2748,7 +2723,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * - O(1) doesn't depend on the state or parameters
        * # </weight>
        **/
-      memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+      memberRemark: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array, payment: Option<ITuple<[AccountId32, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
       /**
        * Remove staking account for a member.
        * 
@@ -3145,7 +3120,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * NOTE: If this is the final approval, you will want to use `as_multi` instead.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(S)`.
        * - Up to one balance-reserve or unreserve operation.
        * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
@@ -3156,13 +3131,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * - One event.
        * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
        * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
-       * ----------------------------------
-       * - DB Weight:
-       * - Read: Multisig Storage, [Caller Account]
-       * - Write: Multisig Storage, [Caller Account]
-       * # </weight>
        **/
-      approveAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, callHash: U8aFixed | string | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, U8aFixed, u64]>;
+      approveAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, callHash: U8aFixed | string | Uint8Array, maxWeight: SpWeightsWeightV2Weight | { refTime?: any; proofSize?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, U8aFixed, SpWeightsWeightV2Weight]>;
       /**
        * Register approval for a dispatch to be made from a deterministic composite account if
        * approved by a total of `threshold - 1` of `other_signatories`.
@@ -3190,7 +3160,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * on success, result is `Ok` and the result from the interior call, if it was executed,
        * may be found in the deposited `MultisigExecuted` event.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(S + Z + Call)`.
        * - Up to one balance-reserve or unreserve operation.
        * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
@@ -3203,14 +3173,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * - The weight of the `call`.
        * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
        * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
-       * -------------------------------
-       * - DB Weight:
-       * - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)
-       * - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)
-       * - Plus Call Weight
-       * # </weight>
        **/
-      asMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, call: WrapperKeepOpaque<Call> | object | string | Uint8Array, storeCall: bool | boolean | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, WrapperKeepOpaque<Call>, bool, u64]>;
+      asMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, call: Call | IMethod | string | Uint8Array, maxWeight: SpWeightsWeightV2Weight | { refTime?: any; proofSize?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, Call, SpWeightsWeightV2Weight]>;
       /**
        * Immediately dispatch a multi-signature call using a single approval from the caller.
        * 
@@ -3222,12 +3186,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * Result is equivalent to the dispatched result.
        * 
-       * # <weight>
+       * ## Complexity
        * O(Z + C) where Z is the length of the call and C its execution weight.
-       * -------------------------------
-       * - DB Weight: None
-       * - Plus Call Weight
-       * # </weight>
        **/
       asMultiThreshold1: AugmentedSubmittable<(otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>, Call]>;
       /**
@@ -3243,7 +3203,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * transaction for this dispatch.
        * - `call_hash`: The hash of the call to be executed.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(S)`.
        * - Up to one balance-reserve or unreserve operation.
        * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
@@ -3252,11 +3212,6 @@ declare module '@polkadot/api-base/types/submittable' {
        * - One event.
        * - I/O: 1 read `O(S)`, one remove.
        * - Storage: removes one item.
-       * ----------------------------------
-       * - DB Weight:
-       * - Read: Multisig Storage, [Caller Account], Refund Account, Calls
-       * - Write: Multisig Storage, [Caller Account], Refund Account, Calls
-       * # </weight>
        **/
       cancelAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], timepoint: PalletMultisigTimepoint | { height?: any; index?: any } | string | Uint8Array, callHash: U8aFixed | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, PalletMultisigTimepoint, U8aFixed]>;
     };
@@ -4041,6 +3996,21 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       burn: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * Mint desired `token_id` amount into user account via JOY exchnage
+       * Preconditions
+       * - origin, member_id pair must be a valid authentication pair
+       * - token_id must exist
+       * - user usable JOY balance must be enough for buying (+ existential deposit)
+       * - slippage tolerance constraints respected if provided
+       * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+       * 
+       * Postconditions
+       * - `amount` CRT minted into account (which is created if necessary with existential deposit transferred to it)
+       * - respective JOY amount transferred from user balance to amm treasury account
+       * - event deposited
+       **/
+      buyOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
       /**
        * Allow any user to remove an account
        * 
@@ -4199,6 +4169,24 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       purchaseTokensOnSale: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
+      /**
+       * Burn desired `token_id` amount from user account and get JOY from treasury account
+       * Preconditions
+       * - origin, member_id pair must be a valid authentication pair
+       * - token_id must exist
+       * - token_id, member_id must be valid account coordinates
+       * - user usable CRT balance must be at least `amount`
+       * - slippage tolerance constraints respected if provided
+       * - token total supply and amount value must be s.t. `eval` function doesn't overflow
+       * - amm treasury account must have sufficient JOYs for the operation
+       * 
+       * Postconditions
+       * - `amount` burned from user account
+       * - total supply decreased by amount
+       * - respective JOY amount transferred from amm treasury account to user account
+       * - event deposited
+       **/
+      sellOnAmm: AugmentedSubmittable<(tokenId: u64 | AnyNumber | Uint8Array, memberId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array, slippageTolerance: Option<ITuple<[Permill, u128]>> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128, Option<ITuple<[Permill, u128]>>]>;
       /**
        * Allow to transfer from `src_member_id` account to the various `outputs` beneficiaries
        * in the specified amounts.
@@ -4354,6 +4342,18 @@ declare module '@polkadot/api-base/types/submittable' {
       vote: AugmentedSubmittable<(voterId: u64 | AnyNumber | Uint8Array, proposalId: u32 | AnyNumber | Uint8Array, vote: PalletProposalsEngineVoteKind | 'Approve' | 'Reject' | 'Slash' | 'Abstain' | number | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u32, PalletProposalsEngineVoteKind, Bytes]>;
     };
     referendum: {
+      /**
+       * Permanently opt out of voting from a given account.
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      optOutOfVoting: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
       /**
        * Release a locked stake.
        * # <weight>
@@ -4403,13 +4403,9 @@ declare module '@polkadot/api-base/types/submittable' {
        * means being a controller account) or directly convertible into a validator ID (which
        * usually means being a stash account).
        * 
-       * # <weight>
-       * - Complexity: `O(1)` in number of key types. Actual cost depends on the number of length
-       * of `T::Keys::key_ids()` which is fixed.
-       * - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`
-       * - DbWrites: `NextKeys`, `origin account`
-       * - DbWrites per key id: `KeyOwner`
-       * # </weight>
+       * ## Complexity
+       * - `O(1)` in number of key types. Actual cost depends on the number of length of
+       * `T::Keys::key_ids()` which is fixed.
        **/
       purgeKeys: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
       /**
@@ -4419,14 +4415,9 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin of this function must be signed.
        * 
-       * # <weight>
-       * - Complexity: `O(1)`. Actual cost depends on the number of length of
-       * `T::Keys::key_ids()` which is fixed.
-       * - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`
-       * - DbWrites: `origin account`, `NextKeys`
-       * - DbReads per key id: `KeyOwner`
-       * - DbWrites per key id: `KeyOwner`
-       * # </weight>
+       * ## Complexity
+       * - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
+       * fixed.
        **/
       setKeys: AugmentedSubmittable<(keys: JoystreamNodeRuntimeSessionKeys | { grandpa?: any; babe?: any; imOnline?: any; authorityDiscovery?: any } | string | Uint8Array, proof: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [JoystreamNodeRuntimeSessionKeys, Bytes]>;
     };
@@ -4440,15 +4431,13 @@ declare module '@polkadot/api-base/types/submittable' {
        * The dispatch origin for this call must be _Signed_ by the stash account.
        * 
        * Emits `Bonded`.
-       * # <weight>
+       * ## Complexity
        * - Independent of the arguments. Moderate complexity.
        * - O(1).
        * - Three extra DB entries.
        * 
        * NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned
        * unless the `origin` falls below _existential deposit_ and gets removed as dust.
-       * ------------------
-       * # </weight>
        **/
       bond: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array, payee: PalletStakingRewardDestination | { Staked: any } | { Stash: any } | { Controller: any } | { Account: any } | { None: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>, PalletStakingRewardDestination]>;
       /**
@@ -4463,16 +4452,15 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * Emits `Bonded`.
        * 
-       * # <weight>
+       * ## Complexity
        * - Independent of the arguments. Insignificant complexity.
        * - O(1).
-       * # </weight>
        **/
       bondExtra: AugmentedSubmittable<(maxAdditional: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
       /**
        * Cancel enactment of a deferred slash.
        * 
-       * Can be called by the `T::SlashCancelOrigin`.
+       * Can be called by the `T::AdminOrigin`.
        * 
        * Parameters: era and indices of the slashes for that era to kill.
        **/
@@ -4484,11 +4472,10 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
        * 
-       * # <weight>
+       * ## Complexity
        * - Independent of the arguments. Insignificant complexity.
        * - Contains one read.
        * - Writes are limited to the `origin` account key.
-       * # </weight>
        **/
       chill: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
       /**
@@ -4538,11 +4525,9 @@ declare module '@polkadot/api-base/types/submittable' {
        * If this is called just before a new era is triggered, the election process may not
        * have enough blocks to get a result.
        * 
-       * # <weight>
+       * ## Complexity
        * - No arguments.
        * - Weight: O(1)
-       * - Write ForceEra
-       * # </weight>
        **/
       forceNewEra: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
       /**
@@ -4568,11 +4553,9 @@ declare module '@polkadot/api-base/types/submittable' {
        * Thus the election process may be ongoing when this is called. In this case the
        * election will continue until the next era is triggered.
        * 
-       * # <weight>
+       * ## Complexity
        * - No arguments.
        * - Weight: O(1)
-       * - Write: ForceEra
-       * # </weight>
        **/
       forceNoEras: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
       /**
@@ -4582,13 +4565,13 @@ declare module '@polkadot/api-base/types/submittable' {
        **/
       forceUnstake: AugmentedSubmittable<(stash: AccountId32 | string | Uint8Array, numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
       /**
-       * Increments the ideal number of validators.
+       * Increments the ideal number of validators upto maximum of
+       * `ElectionProviderBase::MaxWinners`.
        * 
        * The dispatch origin must be Root.
        * 
-       * # <weight>
+       * ## Complexity
        * Same as [`Self::set_validator_count`].
-       * # </weight>
        **/
       increaseValidatorCount: AugmentedSubmittable<(additional: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>]>;
       /**
@@ -4612,11 +4595,10 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
        * 
-       * # <weight>
+       * ## Complexity
        * - The transaction's complexity is proportional to the size of `targets` (N)
        * which is capped at CompactAssignments::LIMIT (T::MaxNominations).
        * - Both the reads and writes follow a similar pattern.
-       * # </weight>
        **/
       nominate: AugmentedSubmittable<(targets: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
       /**
@@ -4629,18 +4611,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * The origin of this call must be _Signed_. Any account can call this function, even if
        * it is not one of the stakers.
        * 
-       * # <weight>
-       * - Time complexity: at most O(MaxNominatorRewardedPerValidator).
-       * - Contains a limited number of reads and writes.
-       * -----------
-       * N is the Number of payouts for the validator (including the validator)
-       * Weight:
-       * - Reward Destination Staked: O(N)
-       * - Reward Destination Controller (Creating): O(N)
-       * 
-       * NOTE: weights are assuming that payouts are made to alive stash account (Staked).
-       * Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.
-       * # </weight>
+       * ## Complexity
+       * - At most O(MaxNominatorRewardedPerValidator).
        **/
       payoutStakers: AugmentedSubmittable<(validatorStash: AccountId32 | string | Uint8Array, era: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, u32]>;
       /**
@@ -4663,21 +4635,19 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin must be signed by the controller.
        * 
-       * # <weight>
+       * ## Complexity
        * - Time complexity: O(L), where L is unlocking chunks
        * - Bounded by `MaxUnlockingChunks`.
-       * - Storage changes: Can't increase storage, only decrease it.
-       * # </weight>
        **/
       rebond: AugmentedSubmittable<(value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u128>]>;
       /**
-       * Scale up the ideal number of validators by a factor.
+       * Scale up the ideal number of validators by a factor upto maximum of
+       * `ElectionProviderBase::MaxWinners`.
        * 
        * The dispatch origin must be Root.
        * 
-       * # <weight>
+       * ## Complexity
        * Same as [`Self::set_validator_count`].
-       * # </weight>
        **/
       scaleValidatorCount: AugmentedSubmittable<(factor: Percent | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Percent]>;
       /**
@@ -4687,49 +4657,26 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin for this call must be _Signed_ by the stash, not the controller.
        * 
-       * # <weight>
+       * ## Complexity
+       * O(1)
        * - Independent of the arguments. Insignificant complexity.
        * - Contains a limited number of reads.
        * - Writes are limited to the `origin` account key.
-       * ----------
-       * Weight: O(1)
-       * DB Weight:
-       * - Read: Bonded, Ledger New Controller, Ledger Old Controller
-       * - Write: Bonded, Ledger New Controller, Ledger Old Controller
-       * # </weight>
        **/
       setController: AugmentedSubmittable<(controller: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
-      /**
-       * Set `HistoryDepth` value. This function will delete any history information
-       * when `HistoryDepth` is reduced.
-       * 
-       * Parameters:
-       * - `new_history_depth`: The new history depth you would like to set.
-       * - `era_items_deleted`: The number of items that will be deleted by this dispatch. This
-       * should report all the storage items that will be deleted by clearing old era history.
-       * Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an
-       * accurate number.
-       * 
-       * Origin must be root.
-       * 
-       * # <weight>
-       * - E: Number of history depths removed, i.e. 10 -> 7 = 3
-       * - Weight: O(E)
-       * - DB Weight:
-       * - Reads: Current Era, History Depth
-       * - Writes: History Depth
-       * - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs
-       * - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,
-       * ErasStartSessionIndex
-       * # </weight>
-       **/
-      setHistoryDepth: AugmentedSubmittable<(newHistoryDepth: Compact<u32> | AnyNumber | Uint8Array, eraItemsDeleted: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>, Compact<u32>]>;
       /**
        * Set the validators who cannot be slashed (if any).
        * 
        * The dispatch origin must be Root.
        **/
       setInvulnerables: AugmentedSubmittable<(invulnerables: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>]>;
+      /**
+       * Sets the minimum amount of commission that each validators must maintain.
+       * 
+       * This call has lower privilege requirements than `set_staking_config` and can be called
+       * by the `T::AdminOrigin`. Root can always call this.
+       **/
+      setMinCommission: AugmentedSubmittable<(updated: Perbill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Perbill]>;
       /**
        * (Re-)set the payment target for a controller.
        * 
@@ -4737,16 +4684,12 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin for this call must be _Signed_ by the controller, not the stash.
        * 
-       * # <weight>
+       * ## Complexity
+       * - O(1)
        * - Independent of the arguments. Insignificant complexity.
        * - Contains a limited number of reads.
        * - Writes are limited to the `origin` account key.
        * ---------
-       * - Weight: O(1)
-       * - DB Weight:
-       * - Read: Ledger
-       * - Write: Payee
-       * # </weight>
        **/
       setPayee: AugmentedSubmittable<(payee: PalletStakingRewardDestination | { Staked: any } | { Stash: any } | { Controller: any } | { Account: any } | { None: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStakingRewardDestination]>;
       /**
@@ -4763,7 +4706,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * * `min_commission`: The minimum amount of commission that each validators must maintain.
        * This is checked only upon calling `validate`. Existing validators are not affected.
        * 
-       * Origin must be Root to call this function.
+       * RuntimeOrigin must be Root to call this function.
        * 
        * NOTE: Existing nominators and validators will not be affected by this update.
        * to kick people under the new limits, `chill_other` should be called.
@@ -4774,10 +4717,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin must be Root.
        * 
-       * # <weight>
-       * Weight: O(1)
-       * Write: Validator Count
-       * # </weight>
+       * ## Complexity
+       * O(1)
        **/
       setValidatorCount: AugmentedSubmittable<(updated: Compact<u32> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u32>]>;
       /**
@@ -4791,8 +4732,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * the funds out of management ready for transfer.
        * 
        * No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)
-       * can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need
-       * to be called first to remove some of the chunks (if possible).
+       * can co-exists at the same time. If there are no unlocking chunks slots available
+       * [`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).
        * 
        * If a user encounters the `InsufficientBond` error when calling this extrinsic,
        * they should call `chill` first in order to free up their bonded funds.
@@ -4822,10 +4763,9 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * See also [`Call::unbond`].
        * 
-       * # <weight>
-       * Complexity O(S) where S is the number of slashing spans to remove
+       * ## Complexity
+       * O(S) where S is the number of slashing spans to remove
        * NOTE: Weight annotation is the kill scenario, we refund otherwise.
-       * # </weight>
        **/
       withdrawUnbonded: AugmentedSubmittable<(numSlashingSpans: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u32]>;
     };
@@ -5058,7 +4998,8 @@ declare module '@polkadot/api-base/types/submittable' {
        **/
       setStorageOperatorMetadata: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
       /**
-       * Create a dynamic bag. Development mode.
+       * Deposit a StorageOperatorRemarked event
+       * containing a generic message.
        * <weight>
        * 
        * ## Weight
@@ -5069,10 +5010,6 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       storageOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
-      /**
-       * Upload new data objects. Development mode.
-       **/
-      sudoUploadDataObjects: AugmentedSubmittable<(params: PalletStorageUploadParametersRecord | { bagId?: any; objectCreationList?: any; stateBloatBondSourceAccountId?: any; expectedDataSizeFee?: any; expectedDataObjectStateBloatBond?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageUploadParametersRecord]>;
       /**
        * Add and remove hashes to the current blacklist.
        * <weight>
@@ -5485,66 +5422,7 @@ declare module '@polkadot/api-base/types/submittable' {
        **/
       workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
     };
-    sudo: {
-      /**
-       * Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
-       * key.
-       * 
-       * The dispatch origin for this call must be _Signed_.
-       * 
-       * # <weight>
-       * - O(1).
-       * - Limited storage reads.
-       * - One DB change.
-       * # </weight>
-       **/
-      setKey: AugmentedSubmittable<(updated: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
-      /**
-       * Authenticates the sudo key and dispatches a function call with `Root` origin.
-       * 
-       * The dispatch origin for this call must be _Signed_.
-       * 
-       * # <weight>
-       * - O(1).
-       * - Limited storage reads.
-       * - One DB write (event).
-       * - Weight of derivative `call` execution + 10,000.
-       * # </weight>
-       **/
-      sudo: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call]>;
-      /**
-       * Authenticates the sudo key and dispatches a function call with `Signed` origin from
-       * a given account.
-       * 
-       * The dispatch origin for this call must be _Signed_.
-       * 
-       * # <weight>
-       * - O(1).
-       * - Limited storage reads.
-       * - One DB write (event).
-       * - Weight of derivative `call` execution + 10,000.
-       * # </weight>
-       **/
-      sudoAs: AugmentedSubmittable<(who: AccountId32 | string | Uint8Array, call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Call]>;
-      /**
-       * Authenticates the sudo key and dispatches a function call with `Root` origin.
-       * This function does not check the weight of the call, and instead allows the
-       * Sudo user to specify the weight of the call.
-       * 
-       * The dispatch origin for this call must be _Signed_.
-       * 
-       * # <weight>
-       * - O(1).
-       * - The weight of this call is defined by the caller.
-       * # </weight>
-       **/
-      sudoUncheckedWeight: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array, weight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call, u64]>;
-    };
     system: {
-      /**
-       * A dispatch that will fill the block weight up to the given ratio.
-       **/
-      fillBlock: AugmentedSubmittable<(ratio: Perbill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Perbill]>;
       /**
        * Kill all storage items with a key that starts with the given prefix.
        * 
@@ -5559,9 +5437,8 @@ declare module '@polkadot/api-base/types/submittable' {
       /**
        * Make some on-chain remark.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(1)`
-       * # </weight>
        **/
       remark: AugmentedSubmittable<(remark: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
       /**
@@ -5571,28 +5448,15 @@ declare module '@polkadot/api-base/types/submittable' {
       /**
        * Set the new runtime code.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`
-       * - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is
-       * expensive).
-       * - 1 storage write (codec `O(C)`).
-       * - 1 digest item.
-       * - 1 event.
-       * The weight of this function is dependent on the runtime, but generally this is very
-       * expensive. We will treat this as a full block.
-       * # </weight>
        **/
       setCode: AugmentedSubmittable<(code: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
       /**
        * Set the new runtime code without doing any checks of the given `code`.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(C)` where `C` length of `code`
-       * - 1 storage write (codec `O(C)`).
-       * - 1 digest item.
-       * - 1 event.
-       * The weight of this function is dependent on the runtime. We will treat this as a full
-       * block. # </weight>
        **/
       setCodeWithoutChecks: AugmentedSubmittable<(code: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Bytes]>;
       /**
@@ -5616,12 +5480,11 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin for this call must be `Inherent`.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
        * - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in
        * `on_finalize`)
        * - 1 event handler `on_timestamp_set`. Must be `O(1)`.
-       * # </weight>
        **/
       set: AugmentedSubmittable<(now: Compact<u64> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [Compact<u64>]>;
     };
@@ -5645,17 +5508,16 @@ declare module '@polkadot/api-base/types/submittable' {
       /**
        * Send a batch of dispatch calls.
        * 
-       * May be called from any origin.
+       * May be called from any origin except `None`.
        * 
        * - `calls`: The calls to be dispatched from the same origin. The number of call must not
        * exceed the constant: `batched_calls_limit` (available in constant metadata).
        * 
-       * If origin is root then call are dispatch without checking origin filter. (This includes
-       * bypassing `frame_system::Config::BaseCallFilter`).
+       * If origin is root then the calls are dispatched without checking origin filter. (This
+       * includes bypassing `frame_system::Config::BaseCallFilter`).
        * 
-       * # <weight>
-       * - Complexity: O(C) where C is the number of calls to be batched.
-       * # </weight>
+       * ## Complexity
+       * - O(C) where C is the number of calls to be batched.
        * 
        * This will return `Ok` in all circumstances. To determine the success of the batch, an
        * event is deposited. If a call failed and the batch was interrupted, then the
@@ -5668,17 +5530,16 @@ declare module '@polkadot/api-base/types/submittable' {
        * Send a batch of dispatch calls and atomically execute them.
        * The whole transaction will rollback and fail if any of the calls failed.
        * 
-       * May be called from any origin.
+       * May be called from any origin except `None`.
        * 
        * - `calls`: The calls to be dispatched from the same origin. The number of call must not
        * exceed the constant: `batched_calls_limit` (available in constant metadata).
        * 
-       * If origin is root then call are dispatch without checking origin filter. (This includes
-       * bypassing `frame_system::Config::BaseCallFilter`).
+       * If origin is root then the calls are dispatched without checking origin filter. (This
+       * includes bypassing `frame_system::Config::BaseCallFilter`).
        * 
-       * # <weight>
-       * - Complexity: O(C) where C is the number of calls to be batched.
-       * # </weight>
+       * ## Complexity
+       * - O(C) where C is the number of calls to be batched.
        **/
       batchAll: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
       /**
@@ -5686,31 +5547,35 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * The dispatch origin for this call must be _Root_.
        * 
-       * # <weight>
+       * ## Complexity
        * - O(1).
-       * - Limited storage reads.
-       * - One DB write (event).
-       * - Weight of derivative `call` execution + T::WeightInfo::dispatch_as().
-       * # </weight>
        **/
       dispatchAs: AugmentedSubmittable<(asOrigin: JoystreamNodeRuntimeOriginCaller | { system: any } | { Void: any } | string | Uint8Array, call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [JoystreamNodeRuntimeOriginCaller, Call]>;
       /**
        * Send a batch of dispatch calls.
        * Unlike `batch`, it allows errors and won't interrupt.
        * 
-       * May be called from any origin.
+       * May be called from any origin except `None`.
        * 
        * - `calls`: The calls to be dispatched from the same origin. The number of call must not
        * exceed the constant: `batched_calls_limit` (available in constant metadata).
        * 
-       * If origin is root then call are dispatch without checking origin filter. (This includes
-       * bypassing `frame_system::Config::BaseCallFilter`).
+       * If origin is root then the calls are dispatch without checking origin filter. (This
+       * includes bypassing `frame_system::Config::BaseCallFilter`).
        * 
-       * # <weight>
-       * - Complexity: O(C) where C is the number of calls to be batched.
-       * # </weight>
+       * ## Complexity
+       * - O(C) where C is the number of calls to be batched.
        **/
       forceBatch: AugmentedSubmittable<(calls: Vec<Call> | (Call | IMethod | string | Uint8Array)[]) => SubmittableExtrinsic<ApiType>, [Vec<Call>]>;
+      /**
+       * Dispatch a function call with a specified weight.
+       * 
+       * This function does not check the weight of the call, and instead allows the
+       * Root origin to specify the weight of the call.
+       * 
+       * The dispatch origin for this call must be _Root_.
+       **/
+      withWeight: AugmentedSubmittable<(call: Call | IMethod | string | Uint8Array, weight: SpWeightsWeightV2Weight | { refTime?: any; proofSize?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Call, SpWeightsWeightV2Weight]>;
     };
     vesting: {
       /**
@@ -5726,12 +5591,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * NOTE: This will unlock all schedules through the current block.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(1)`.
-       * - DbWeight: 4 Reads, 4 Writes
-       * - Reads: Vesting Storage, Balances Locks, Target Account, Source Account
-       * - Writes: Vesting Storage, Balances Locks, Target Account, Source Account
-       * # </weight>
        **/
       forceVestedTransfer: AugmentedSubmittable<(source: AccountId32 | string | Uint8Array, target: AccountId32 | string | Uint8Array, schedule: PalletVestingVestingInfo | { locked?: any; perBlock?: any; startingBlock?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, AccountId32, PalletVestingVestingInfo]>;
       /**
@@ -5766,12 +5627,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * Emits either `VestingCompleted` or `VestingUpdated`.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(1)`.
-       * - DbWeight: 2 Reads, 2 Writes
-       * - Reads: Vesting Storage, Balances Locks, [Sender Account]
-       * - Writes: Vesting Storage, Balances Locks, [Sender Account]
-       * # </weight>
        **/
       vest: AugmentedSubmittable<() => SubmittableExtrinsic<ApiType>, []>;
       /**
@@ -5786,12 +5643,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * NOTE: This will unlock all schedules through the current block.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(1)`.
-       * - DbWeight: 3 Reads, 3 Writes
-       * - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]
-       * - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]
-       * # </weight>
        **/
       vestedTransfer: AugmentedSubmittable<(target: AccountId32 | string | Uint8Array, schedule: PalletVestingVestingInfo | { locked?: any; perBlock?: any; startingBlock?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, PalletVestingVestingInfo]>;
       /**
@@ -5804,12 +5657,8 @@ declare module '@polkadot/api-base/types/submittable' {
        * 
        * Emits either `VestingCompleted` or `VestingUpdated`.
        * 
-       * # <weight>
+       * ## Complexity
        * - `O(1)`.
-       * - DbWeight: 3 Reads, 3 Writes
-       * - Reads: Vesting Storage, Balances Locks, Target Account
-       * - Writes: Vesting Storage, Balances Locks, Target Account
-       * # </weight>
        **/
       vestOther: AugmentedSubmittable<(target: AccountId32 | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32]>;
     };
diff --git a/node_modules/@joystream/types/src/augment/lookup.ts b/node_modules/@joystream/types/src/augment/lookup.ts
index 58896db..98cf167 100644
--- a/node_modules/@joystream/types/src/augment/lookup.ts
+++ b/node_modules/@joystream/types/src/augment/lookup.ts
@@ -24,21 +24,28 @@ export default {
     feeFrozen: 'u128'
   },
   /**
-   * Lookup7: frame_support::weights::PerDispatchClass<T>
+   * Lookup7: frame_support::dispatch::PerDispatchClass<sp_weights::weight_v2::Weight>
    **/
-  FrameSupportWeightsPerDispatchClassU64: {
-    normal: 'u64',
-    operational: 'u64',
-    mandatory: 'u64'
+  FrameSupportDispatchPerDispatchClassWeight: {
+    normal: 'SpWeightsWeightV2Weight',
+    operational: 'SpWeightsWeightV2Weight',
+    mandatory: 'SpWeightsWeightV2Weight'
   },
   /**
-   * Lookup11: sp_runtime::generic::digest::Digest
+   * Lookup8: sp_weights::weight_v2::Weight
+   **/
+  SpWeightsWeightV2Weight: {
+    refTime: 'Compact<u64>',
+    proofSize: 'Compact<u64>'
+  },
+  /**
+   * Lookup13: sp_runtime::generic::digest::Digest
    **/
   SpRuntimeDigest: {
     logs: 'Vec<SpRuntimeDigestDigestItem>'
   },
   /**
-   * Lookup13: sp_runtime::generic::digest::DigestItem
+   * Lookup15: sp_runtime::generic::digest::DigestItem
    **/
   SpRuntimeDigestDigestItem: {
     _enum: {
@@ -54,7 +61,7 @@ export default {
     }
   },
   /**
-   * Lookup16: frame_system::EventRecord<joystream_node_runtime::Event, primitive_types::H256>
+   * Lookup18: frame_system::EventRecord<joystream_node_runtime::RuntimeEvent, primitive_types::H256>
    **/
   FrameSystemEventRecord: {
     phase: 'FrameSystemPhase',
@@ -62,16 +69,16 @@ export default {
     topics: 'Vec<H256>'
   },
   /**
-   * Lookup18: frame_system::pallet::Event<T>
+   * Lookup20: frame_system::pallet::Event<T>
    **/
   FrameSystemEvent: {
     _enum: {
       ExtrinsicSuccess: {
-        dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+        dispatchInfo: 'FrameSupportDispatchDispatchInfo',
       },
       ExtrinsicFailed: {
         dispatchError: 'SpRuntimeDispatchError',
-        dispatchInfo: 'FrameSupportWeightsDispatchInfo',
+        dispatchInfo: 'FrameSupportDispatchDispatchInfo',
       },
       CodeUpdated: 'Null',
       NewAccount: {
@@ -90,27 +97,27 @@ export default {
     }
   },
   /**
-   * Lookup19: frame_support::weights::DispatchInfo
+   * Lookup21: frame_support::dispatch::DispatchInfo
    **/
-  FrameSupportWeightsDispatchInfo: {
-    weight: 'u64',
-    class: 'FrameSupportWeightsDispatchClass',
-    paysFee: 'FrameSupportWeightsPays'
+  FrameSupportDispatchDispatchInfo: {
+    weight: 'SpWeightsWeightV2Weight',
+    class: 'FrameSupportDispatchDispatchClass',
+    paysFee: 'FrameSupportDispatchPays'
   },
   /**
-   * Lookup20: frame_support::weights::DispatchClass
+   * Lookup22: frame_support::dispatch::DispatchClass
    **/
-  FrameSupportWeightsDispatchClass: {
+  FrameSupportDispatchDispatchClass: {
     _enum: ['Normal', 'Operational', 'Mandatory']
   },
   /**
-   * Lookup21: frame_support::weights::Pays
+   * Lookup23: frame_support::dispatch::Pays
    **/
-  FrameSupportWeightsPays: {
+  FrameSupportDispatchPays: {
     _enum: ['Yes', 'No']
   },
   /**
-   * Lookup22: sp_runtime::DispatchError
+   * Lookup24: sp_runtime::DispatchError
    **/
   SpRuntimeDispatchError: {
     _enum: {
@@ -122,37 +129,40 @@ export default {
       NoProviders: 'Null',
       TooManyConsumers: 'Null',
       Token: 'SpRuntimeTokenError',
-      Arithmetic: 'SpRuntimeArithmeticError',
-      Transactional: 'SpRuntimeTransactionalError'
+      Arithmetic: 'SpArithmeticArithmeticError',
+      Transactional: 'SpRuntimeTransactionalError',
+      Exhausted: 'Null',
+      Corruption: 'Null',
+      Unavailable: 'Null'
     }
   },
   /**
-   * Lookup23: sp_runtime::ModuleError
+   * Lookup25: sp_runtime::ModuleError
    **/
   SpRuntimeModuleError: {
     index: 'u8',
     error: '[u8;4]'
   },
   /**
-   * Lookup24: sp_runtime::TokenError
+   * Lookup26: sp_runtime::TokenError
    **/
   SpRuntimeTokenError: {
     _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', 'Unsupported']
   },
   /**
-   * Lookup25: sp_runtime::ArithmeticError
+   * Lookup27: sp_arithmetic::ArithmeticError
    **/
-  SpRuntimeArithmeticError: {
+  SpArithmeticArithmeticError: {
     _enum: ['Underflow', 'Overflow', 'DivisionByZero']
   },
   /**
-   * Lookup26: sp_runtime::TransactionalError
+   * Lookup28: sp_runtime::TransactionalError
    **/
   SpRuntimeTransactionalError: {
     _enum: ['LimitReached', 'NoLayer']
   },
   /**
-   * Lookup27: pallet_utility::pallet::Event
+   * Lookup29: pallet_utility::pallet::Event
    **/
   PalletUtilityEvent: {
     _enum: {
@@ -172,7 +182,7 @@ export default {
     }
   },
   /**
-   * Lookup30: pallet_balances::pallet::Event<T, I>
+   * Lookup32: pallet_balances::pallet::Event<T, I>
    **/
   PalletBalancesEvent: {
     _enum: {
@@ -223,23 +233,38 @@ export default {
     }
   },
   /**
-   * Lookup31: frame_support::traits::tokens::misc::BalanceStatus
+   * Lookup33: frame_support::traits::tokens::misc::BalanceStatus
    **/
   FrameSupportTokensMiscBalanceStatus: {
     _enum: ['Free', 'Reserved']
   },
   /**
-   * Lookup32: pallet_election_provider_multi_phase::pallet::Event<T>
+   * Lookup34: pallet_transaction_payment::pallet::Event<T>
+   **/
+  PalletTransactionPaymentEvent: {
+    _enum: {
+      TransactionFeePaid: {
+        who: 'AccountId32',
+        actualFee: 'u128',
+        tip: 'u128'
+      }
+    }
+  },
+  /**
+   * Lookup35: pallet_election_provider_multi_phase::pallet::Event<T>
    **/
   PalletElectionProviderMultiPhaseEvent: {
     _enum: {
       SolutionStored: {
-        electionCompute: 'PalletElectionProviderMultiPhaseElectionCompute',
+        compute: 'PalletElectionProviderMultiPhaseElectionCompute',
+        origin: 'Option<AccountId32>',
         prevEjected: 'bool',
       },
       ElectionFinalized: {
-        electionCompute: 'Option<PalletElectionProviderMultiPhaseElectionCompute>',
+        compute: 'PalletElectionProviderMultiPhaseElectionCompute',
+        score: 'SpNposElectionsElectionScore',
       },
+      ElectionFailed: 'Null',
       Rewarded: {
         account: 'AccountId32',
         value: 'u128',
@@ -248,49 +273,113 @@ export default {
         account: 'AccountId32',
         value: 'u128',
       },
-      SignedPhaseStarted: {
-        round: 'u32',
-      },
-      UnsignedPhaseStarted: {
+      PhaseTransitioned: {
+        from: 'PalletElectionProviderMultiPhasePhase',
+        to: 'PalletElectionProviderMultiPhasePhase',
         round: 'u32'
       }
     }
   },
   /**
-   * Lookup33: pallet_election_provider_multi_phase::ElectionCompute
+   * Lookup36: pallet_election_provider_multi_phase::ElectionCompute
    **/
   PalletElectionProviderMultiPhaseElectionCompute: {
     _enum: ['OnChain', 'Signed', 'Unsigned', 'Fallback', 'Emergency']
   },
   /**
-   * Lookup36: pallet_staking::pallet::pallet::Event<T>
+   * Lookup39: sp_npos_elections::ElectionScore
+   **/
+  SpNposElectionsElectionScore: {
+    minimalStake: 'u128',
+    sumStake: 'u128',
+    sumStakeSquared: 'u128'
+  },
+  /**
+   * Lookup40: pallet_election_provider_multi_phase::Phase<Bn>
+   **/
+  PalletElectionProviderMultiPhasePhase: {
+    _enum: {
+      Off: 'Null',
+      Signed: 'Null',
+      Unsigned: '(bool,u32)',
+      Emergency: 'Null'
+    }
+  },
+  /**
+   * Lookup42: pallet_staking::pallet::pallet::Event<T>
    **/
   PalletStakingPalletEvent: {
     _enum: {
-      EraPaid: '(u32,u128,u128)',
-      Rewarded: '(AccountId32,u128)',
-      Slashed: '(AccountId32,u128)',
-      OldSlashingReportDiscarded: 'u32',
+      EraPaid: {
+        eraIndex: 'u32',
+        validatorPayout: 'u128',
+        remainder: 'u128',
+      },
+      Rewarded: {
+        stash: 'AccountId32',
+        amount: 'u128',
+      },
+      Slashed: {
+        staker: 'AccountId32',
+        amount: 'u128',
+      },
+      SlashReported: {
+        validator: 'AccountId32',
+        fraction: 'Perbill',
+        slashEra: 'u32',
+      },
+      OldSlashingReportDiscarded: {
+        sessionIndex: 'u32',
+      },
       StakersElected: 'Null',
-      Bonded: '(AccountId32,u128)',
-      Unbonded: '(AccountId32,u128)',
-      Withdrawn: '(AccountId32,u128)',
-      Kicked: '(AccountId32,AccountId32)',
+      Bonded: {
+        stash: 'AccountId32',
+        amount: 'u128',
+      },
+      Unbonded: {
+        stash: 'AccountId32',
+        amount: 'u128',
+      },
+      Withdrawn: {
+        stash: 'AccountId32',
+        amount: 'u128',
+      },
+      Kicked: {
+        nominator: 'AccountId32',
+        stash: 'AccountId32',
+      },
       StakingElectionFailed: 'Null',
-      Chilled: 'AccountId32',
-      PayoutStarted: '(u32,AccountId32)',
-      ValidatorPrefsSet: '(AccountId32,PalletStakingValidatorPrefs)'
+      Chilled: {
+        stash: 'AccountId32',
+      },
+      PayoutStarted: {
+        eraIndex: 'u32',
+        validatorStash: 'AccountId32',
+      },
+      ValidatorPrefsSet: {
+        stash: 'AccountId32',
+        prefs: 'PalletStakingValidatorPrefs',
+      },
+      ForceEra: {
+        mode: 'PalletStakingForcing'
+      }
     }
   },
   /**
-   * Lookup37: pallet_staking::ValidatorPrefs
+   * Lookup44: pallet_staking::ValidatorPrefs
    **/
   PalletStakingValidatorPrefs: {
     commission: 'Compact<Perbill>',
     blocked: 'bool'
   },
   /**
-   * Lookup40: pallet_session::pallet::Event
+   * Lookup46: pallet_staking::Forcing
+   **/
+  PalletStakingForcing: {
+    _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
+  },
+  /**
+   * Lookup47: pallet_session::pallet::Event
    **/
   PalletSessionEvent: {
     _enum: {
@@ -300,7 +389,7 @@ export default {
     }
   },
   /**
-   * Lookup41: pallet_grandpa::pallet::Event
+   * Lookup48: pallet_grandpa::pallet::Event
    **/
   PalletGrandpaEvent: {
     _enum: {
@@ -312,15 +401,15 @@ export default {
     }
   },
   /**
-   * Lookup44: sp_finality_grandpa::app::Public
+   * Lookup51: sp_finality_grandpa::app::Public
    **/
   SpFinalityGrandpaAppPublic: 'SpCoreEd25519Public',
   /**
-   * Lookup45: sp_core::ed25519::Public
+   * Lookup52: sp_core::ed25519::Public
    **/
   SpCoreEd25519Public: '[u8;32]',
   /**
-   * Lookup46: pallet_im_online::pallet::Event<T>
+   * Lookup53: pallet_im_online::pallet::Event<T>
    **/
   PalletImOnlineEvent: {
     _enum: {
@@ -334,15 +423,15 @@ export default {
     }
   },
   /**
-   * Lookup47: pallet_im_online::sr25519::app_sr25519::Public
+   * Lookup54: pallet_im_online::sr25519::app_sr25519::Public
    **/
   PalletImOnlineSr25519AppSr25519Public: 'SpCoreSr25519Public',
   /**
-   * Lookup48: sp_core::sr25519::Public
+   * Lookup55: sp_core::sr25519::Public
    **/
   SpCoreSr25519Public: '[u8;32]',
   /**
-   * Lookup51: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
+   * Lookup58: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
    **/
   PalletStakingExposure: {
     total: 'Compact<u128>',
@@ -350,14 +439,14 @@ export default {
     others: 'Vec<PalletStakingIndividualExposure>'
   },
   /**
-   * Lookup54: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
+   * Lookup61: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
    **/
   PalletStakingIndividualExposure: {
     who: 'AccountId32',
     value: 'Compact<u128>'
   },
   /**
-   * Lookup55: pallet_offences::pallet::Event
+   * Lookup62: pallet_offences::pallet::Event
    **/
   PalletOffencesEvent: {
     _enum: {
@@ -368,23 +457,7 @@ export default {
     }
   },
   /**
-   * Lookup57: pallet_sudo::pallet::Event<T>
-   **/
-  PalletSudoEvent: {
-    _enum: {
-      Sudid: {
-        sudoResult: 'Result<Null, SpRuntimeDispatchError>',
-      },
-      KeyChanged: {
-        oldSudoer: 'Option<AccountId32>',
-      },
-      SudoAsDone: {
-        sudoResult: 'Result<Null, SpRuntimeDispatchError>'
-      }
-    }
-  },
-  /**
-   * Lookup59: pallet_bags_list::pallet::Event<T, I>
+   * Lookup64: pallet_bags_list::pallet::Event<T, I>
    **/
   PalletBagsListEvent: {
     _enum: {
@@ -400,7 +473,7 @@ export default {
     }
   },
   /**
-   * Lookup60: pallet_vesting::pallet::Event<T>
+   * Lookup65: pallet_vesting::pallet::Event<T>
    **/
   PalletVestingEvent: {
     _enum: {
@@ -414,7 +487,7 @@ export default {
     }
   },
   /**
-   * Lookup61: pallet_multisig::pallet::Event<T>
+   * Lookup66: pallet_multisig::pallet::Event<T>
    **/
   PalletMultisigEvent: {
     _enum: {
@@ -445,14 +518,14 @@ export default {
     }
   },
   /**
-   * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+   * Lookup67: pallet_multisig::Timepoint<BlockNumber>
    **/
   PalletMultisigTimepoint: {
     height: 'u32',
     index: 'u32'
   },
   /**
-   * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+   * Lookup68: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
    **/
   PalletCouncilRawEvent: {
     _enum: {
@@ -478,7 +551,7 @@ export default {
     }
   },
   /**
-   * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+   * Lookup70: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
    **/
   PalletReferendumRawEvent: {
     _enum: {
@@ -488,26 +561,27 @@ export default {
       ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
       VoteCast: '(AccountId32,H256,u128)',
       VoteRevealed: '(AccountId32,u64,Bytes)',
-      StakeReleased: 'AccountId32'
+      StakeReleased: 'AccountId32',
+      AccountOptedOutOfVoting: 'AccountId32'
     }
   },
   /**
-   * Lookup66: pallet_referendum::Instance1
+   * Lookup71: pallet_referendum::Instance1
    **/
   PalletReferendumInstance1: 'Null',
   /**
-   * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
+   * Lookup73: pallet_referendum::OptionResult<MemberId, VotePower>
    **/
   PalletReferendumOptionResult: {
     optionId: 'u64',
     votePower: 'u128'
   },
   /**
-   * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+   * Lookup74: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletMembershipRawEvent: {
     _enum: {
-      MemberInvited: '(u64,PalletMembershipInviteMembershipParameters)',
+      MemberInvited: '(u64,PalletMembershipInviteMembershipParameters,u128)',
       MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
       MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
       MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
@@ -522,12 +596,12 @@ export default {
       StakingAccountAdded: '(AccountId32,u64)',
       StakingAccountRemoved: '(AccountId32,u64)',
       StakingAccountConfirmed: '(AccountId32,u64)',
-      MemberRemarked: '(u64,Bytes)',
+      MemberRemarked: '(u64,Bytes,Option<(AccountId32,u128)>)',
       MemberCreated: '(u64,PalletMembershipCreateMemberParameters,u32)'
     }
   },
   /**
-   * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+   * Lookup75: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
    **/
   PalletMembershipBuyMembershipParameters: {
     rootAccount: 'AccountId32',
@@ -537,7 +611,7 @@ export default {
     referrerId: 'Option<u64>'
   },
   /**
-   * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+   * Lookup78: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
    **/
   PalletMembershipInviteMembershipParameters: {
     invitingMemberId: 'u64',
@@ -547,7 +621,7 @@ export default {
     metadata: 'Bytes'
   },
   /**
-   * Lookup74: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
+   * Lookup79: pallet_membership::CreateMemberParameters<sp_core::crypto::AccountId32>
    **/
   PalletMembershipCreateMemberParameters: {
     rootAccount: 'AccountId32',
@@ -557,7 +631,7 @@ export default {
     isFoundingMember: 'bool'
   },
   /**
-   * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+   * Lookup80: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
    **/
   PalletMembershipGiftMembershipParameters: {
     rootAccount: 'AccountId32',
@@ -570,7 +644,7 @@ export default {
     applyRootAccountInvitationLock: 'Option<u128>'
   },
   /**
-   * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+   * Lookup84: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
    **/
   PalletForumRawEvent: {
     _enum: {
@@ -594,7 +668,7 @@ export default {
     }
   },
   /**
-   * Lookup78: pallet_forum::PrivilegedActor<T>
+   * Lookup85: pallet_forum::PrivilegedActor<T>
    **/
   PalletForumPrivilegedActor: {
     _enum: {
@@ -603,7 +677,7 @@ export default {
     }
   },
   /**
-   * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+   * Lookup86: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
    **/
   PalletForumExtendedPostIdObject: {
     categoryId: 'u64',
@@ -611,7 +685,7 @@ export default {
     postId: 'u64'
   },
   /**
-   * Lookup84: pallet_constitution::RawEvent<primitive_types::H256>
+   * Lookup91: pallet_constitution::RawEvent<primitive_types::H256>
    **/
   PalletConstitutionRawEvent: {
     _enum: {
@@ -619,7 +693,7 @@ export default {
     }
   },
   /**
-   * Lookup85: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+   * Lookup92: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
    **/
   PalletBountyRawEvent: {
     _enum: {
@@ -649,7 +723,7 @@ export default {
     }
   },
   /**
-   * Lookup86: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
+   * Lookup93: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, BTreeSet<T>>
    **/
   PalletBountyBountyParametersBTreeSet: {
     oracle: 'PalletBountyBountyActor',
@@ -661,7 +735,7 @@ export default {
     fundingType: 'PalletBountyFundingType'
   },
   /**
-   * Lookup87: pallet_bounty::BountyActor<MemberId>
+   * Lookup94: pallet_bounty::BountyActor<MemberId>
    **/
   PalletBountyBountyActor: {
     _enum: {
@@ -670,7 +744,7 @@ export default {
     }
   },
   /**
-   * Lookup88: pallet_bounty::AssuranceContractType<BTreeSet<T>>
+   * Lookup95: pallet_bounty::AssuranceContractType<BTreeSet<T>>
    **/
   PalletBountyAssuranceContractTypeBTreeSet: {
     _enum: {
@@ -679,7 +753,7 @@ export default {
     }
   },
   /**
-   * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+   * Lookup96: pallet_bounty::FundingType<BlockNumber, Balance>
    **/
   PalletBountyFundingType: {
     _enum: {
@@ -693,7 +767,7 @@ export default {
     }
   },
   /**
-   * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+   * Lookup98: pallet_bounty::OracleWorkEntryJudgment<Balance>
    **/
   PalletBountyOracleWorkEntryJudgment: {
     _enum: {
@@ -707,9 +781,9 @@ export default {
     }
   },
   /**
-   * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+   * Lookup101: pallet_joystream_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
    **/
-  PalletUtilityRawEvent: {
+  PalletJoystreamUtilityRawEvent: {
     _enum: {
       Signaled: 'Bytes',
       RuntimeUpgraded: 'Bytes',
@@ -718,19 +792,19 @@ export default {
     }
   },
   /**
-   * Lookup95: pallet_common::working_group::iterable_enums::WorkingGroup
+   * Lookup102: pallet_common::working_group::iterable_enums::WorkingGroup
    **/
   PalletCommonWorkingGroupIterableEnumsWorkingGroup: {
     _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'App', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
   },
   /**
-   * Lookup96: pallet_common::BalanceKind
+   * Lookup103: pallet_common::BalanceKind
    **/
   PalletCommonBalanceKind: {
     _enum: ['Positive', 'Negative']
   },
   /**
-   * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+   * Lookup104: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
    **/
   PalletContentRawEvent: {
     _enum: {
@@ -758,9 +832,8 @@ export default {
       VideoDeletedByModerator: '(PalletContentPermissionsContentActor,u64,Bytes)',
       VideoVisibilitySetByModerator: '(PalletContentPermissionsContentActor,u64,bool,Bytes)',
       VideoAssetsDeletedByModerator: '(PalletContentPermissionsContentActor,u64,BTreeSet<u64>,bool,Bytes)',
-      ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>)',
-      ChannelRewardUpdated: '(u128,u64)',
-      CouncilRewardClaimed: '(u64,u128)',
+      ChannelPayoutsUpdated: '(PalletContentUpdateChannelPayoutsParametersRecord,Option<u64>,AccountId32)',
+      ChannelRewardUpdated: '(u128,u128,u64)',
       EnglishAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesEnglishAuctionParamsRecord)',
       OpenAuctionStarted: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesOpenAuctionParamsRecord,u64)',
       NftIssued: '(PalletContentPermissionsContentActor,u64,PalletContentNftTypesNftIssuanceParametersRecord)',
@@ -788,11 +861,12 @@ export default {
       GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
       ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
       ToggledNftLimits: 'bool',
-      CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)'
+      CreatorTokenIssued: '(PalletContentPermissionsContentActor,u64,u64)',
+      CreatorTokenIssuerRemarked: '(u64,u64,Bytes)'
     }
   },
   /**
-   * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+   * Lookup105: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
    **/
   PalletContentPermissionsContentActor: {
     _enum: {
@@ -802,7 +876,7 @@ export default {
     }
   },
   /**
-   * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup106: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletContentChannelRecord: {
     owner: 'PalletContentChannelOwner',
@@ -821,26 +895,26 @@ export default {
     channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
   },
   /**
-   * Lookup103: pallet_content::types::iterable_enums::ChannelActionPermission
+   * Lookup110: pallet_content::types::iterable_enums::ChannelActionPermission
    **/
   PalletContentIterableEnumsChannelActionPermission: {
-    _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
+    _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken', 'AmmControl']
   },
   /**
-   * Lookup110: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
+   * Lookup117: pallet_content::permissions::curator_group::iterable_enums::PausableChannelFeature
    **/
   PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature: {
     _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
   },
   /**
-   * Lookup113: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+   * Lookup120: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
    **/
   PalletCommonBloatBondRepayableBloatBond: {
     repaymentRestrictedTo: 'Option<AccountId32>',
     amount: 'u128'
   },
   /**
-   * Lookup114: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+   * Lookup121: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
    **/
   PalletContentChannelOwner: {
     _enum: {
@@ -849,7 +923,7 @@ export default {
     }
   },
   /**
-   * Lookup115: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+   * Lookup122: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
    **/
   PalletContentChannelTransferStatus: {
     _enum: {
@@ -858,14 +932,14 @@ export default {
     }
   },
   /**
-   * Lookup116: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
+   * Lookup123: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>>
    **/
   PalletContentPendingTransfer: {
     newOwner: 'PalletContentChannelOwner',
     transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
   },
   /**
-   * Lookup117: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
+   * Lookup124: pallet_content::types::TransferCommitmentParameters<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, Balance, TransferId>
    **/
   PalletContentTransferCommitmentParametersBoundedBTreeMap: {
     newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -873,21 +947,21 @@ export default {
     transferId: 'u64'
   },
   /**
-   * Lookup118: pallet_content::types::LimitPerPeriod<BlockNumber>
+   * Lookup125: pallet_content::types::LimitPerPeriod<BlockNumber>
    **/
   PalletContentLimitPerPeriod: {
     limit: 'u64',
     blockNumberPeriod: 'u32'
   },
   /**
-   * Lookup119: pallet_content::types::NftCounter<BlockNumber>
+   * Lookup126: pallet_content::types::NftCounter<BlockNumber>
    **/
   PalletContentNftCounter: {
     counter: 'u64',
     lastUpdated: 'u32'
   },
   /**
-   * Lookup120: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+   * Lookup127: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
    **/
   PalletContentNftTypesEnglishAuctionParamsRecord: {
     startingPrice: 'u128',
@@ -899,7 +973,7 @@ export default {
     minBidStep: 'u128'
   },
   /**
-   * Lookup122: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+   * Lookup129: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
    **/
   PalletContentNftTypesOpenAuctionParamsRecord: {
     startingPrice: 'u128',
@@ -909,7 +983,7 @@ export default {
     bidLockDuration: 'u32'
   },
   /**
-   * Lookup123: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+   * Lookup130: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
    **/
   PalletContentNftTypesNftIssuanceParametersRecord: {
     royalty: 'Option<Perbill>',
@@ -918,7 +992,7 @@ export default {
     initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
   },
   /**
-   * Lookup124: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+   * Lookup131: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
    **/
   PalletContentNftTypesInitTransactionalStatusRecord: {
     _enum: {
@@ -930,7 +1004,7 @@ export default {
     }
   },
   /**
-   * Lookup126: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+   * Lookup133: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
    **/
   PalletContentChannelCreationParametersRecord: {
     assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -942,14 +1016,14 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup127: pallet_content::types::StorageAssetsRecord<Balance>
+   * Lookup134: pallet_content::types::StorageAssetsRecord<Balance>
    **/
   PalletContentStorageAssetsRecord: {
     objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
     expectedDataSizeFee: 'u128'
   },
   /**
-   * Lookup129: pallet_storage::DataObjectCreationParameters
+   * Lookup136: pallet_storage::DataObjectCreationParameters
    **/
   PalletStorageDataObjectCreationParameters: {
     _alias: {
@@ -959,14 +1033,14 @@ export default {
     ipfsContentId: 'Bytes'
   },
   /**
-   * Lookup130: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+   * Lookup137: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
    **/
   PalletStorageDistributionBucketIdRecord: {
     distributionBucketFamilyId: 'u64',
     distributionBucketIndex: 'u64'
   },
   /**
-   * Lookup137: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+   * Lookup144: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
    **/
   PalletContentChannelUpdateParametersRecord: {
     assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -977,7 +1051,7 @@ export default {
     storageBucketsNumWitness: 'Option<u32>'
   },
   /**
-   * Lookup139: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+   * Lookup146: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
    **/
   PalletContentVideoCreationParametersRecord: {
     assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -988,7 +1062,7 @@ export default {
     storageBucketsNumWitness: 'u32'
   },
   /**
-   * Lookup141: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+   * Lookup148: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
    **/
   PalletContentVideoUpdateParametersRecord: {
     assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
@@ -999,22 +1073,20 @@ export default {
     storageBucketsNumWitness: 'Option<u32>'
   },
   /**
-   * Lookup144: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
+   * Lookup151: pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction
    **/
   PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction: {
     _enum: {
       HideVideo: 'Null',
       HideChannel: 'Null',
       ChangeChannelFeatureStatus: 'PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature',
-      DeleteVideo: 'Null',
-      DeleteChannel: 'Null',
       DeleteVideoAssets: 'bool',
       DeleteNonVideoChannelAssets: 'Null',
       UpdateChannelNftLimits: 'Null'
     }
   },
   /**
-   * Lookup148: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
+   * Lookup155: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission>>, Balance, TransferId>
    **/
   PalletContentTransferCommitmentParametersBTreeMap: {
     newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -1022,7 +1094,7 @@ export default {
     transferId: 'u64'
   },
   /**
-   * Lookup149: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+   * Lookup156: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>
    **/
   PalletContentUpdateChannelPayoutsParametersRecord: {
     commitment: 'Option<H256>',
@@ -1032,16 +1104,15 @@ export default {
     channelCashoutsEnabled: 'Option<bool>'
   },
   /**
-   * Lookup150: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+   * Lookup157: pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>
    **/
   PalletContentChannelPayoutsPayloadParametersRecord: {
-    uploaderAccount: 'AccountId32',
     objectCreationParams: 'PalletStorageDataObjectCreationParameters',
     expectedDataSizeFee: 'u128',
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup154: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+   * Lookup161: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
    **/
   PalletContentChannelFundsDestination: {
     _enum: {
@@ -1050,13 +1121,13 @@ export default {
     }
   },
   /**
-   * Lookup155: pallet_content::types::NftLimitPeriod
+   * Lookup162: pallet_content::types::NftLimitPeriod
    **/
   PalletContentNftLimitPeriod: {
     _enum: ['Daily', 'Weekly']
   },
   /**
-   * Lookup156: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
+   * Lookup163: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
    **/
   PalletStorageRawEvent: {
     _enum: {
@@ -1105,7 +1176,7 @@ export default {
     }
   },
   /**
-   * Lookup157: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+   * Lookup164: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
    **/
   PalletStorageUploadParametersRecord: {
     bagId: 'PalletStorageBagIdType',
@@ -1115,7 +1186,7 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup158: pallet_storage::BagIdType<MemberId, ChannelId>
+   * Lookup165: pallet_storage::BagIdType<MemberId, ChannelId>
    **/
   PalletStorageBagIdType: {
     _enum: {
@@ -1124,7 +1195,7 @@ export default {
     }
   },
   /**
-   * Lookup159: pallet_storage::StaticBagId
+   * Lookup166: pallet_storage::StaticBagId
    **/
   PalletStorageStaticBagId: {
     _enum: {
@@ -1133,7 +1204,7 @@ export default {
     }
   },
   /**
-   * Lookup160: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+   * Lookup167: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
    **/
   PalletStorageDynamicBagIdType: {
     _enum: {
@@ -1142,7 +1213,7 @@ export default {
     }
   },
   /**
-   * Lookup161: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+   * Lookup168: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
    **/
   PalletStorageDynBagCreationParametersRecord: {
     bagId: 'PalletStorageDynamicBagIdType',
@@ -1154,7 +1225,7 @@ export default {
     distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
   },
   /**
-   * Lookup164: pallet_storage::Voucher
+   * Lookup171: pallet_storage::Voucher
    **/
   PalletStorageVoucher: {
     sizeLimit: 'u64',
@@ -1163,13 +1234,13 @@ export default {
     objectsUsed: 'u64'
   },
   /**
-   * Lookup165: pallet_storage::DynamicBagType
+   * Lookup172: pallet_storage::DynamicBagType
    **/
   PalletStorageDynamicBagType: {
     _enum: ['Member', 'Channel']
   },
   /**
-   * Lookup169: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+   * Lookup176: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::AmmCurve<Balance>>
    **/
   PalletProjectTokenEventsRawEvent: {
     _enum: {
@@ -1190,11 +1261,15 @@ export default {
       TokensPurchasedOnSale: '(u64,u32,u128,u64)',
       TokenSaleFinalized: '(u64,u32,u128,u128)',
       TransferPolicyChangedToPermissionless: 'u64',
-      TokensBurned: '(u64,u64,u128)'
+      TokensBurned: '(u64,u64,u128)',
+      AmmActivated: '(u64,u64,PalletProjectTokenAmmCurve)',
+      TokensBoughtOnAmm: '(u64,u64,u128,u128)',
+      TokensSoldOnAmm: '(u64,u64,u128,u128)',
+      AmmDeactivated: '(u64,u64,u128)'
     }
   },
   /**
-   * Lookup170: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+   * Lookup177: pallet_project_token::types::TransferPolicy<primitive_types::H256>
    **/
   PalletProjectTokenTransferPolicy: {
     _enum: {
@@ -1203,24 +1278,24 @@ export default {
     }
   },
   /**
-   * Lookup171: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+   * Lookup178: pallet_project_token::types::TokenIssuanceParameters<pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
    **/
   PalletProjectTokenTokenIssuanceParameters: {
     initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
-    symbol: 'H256',
     transferPolicy: 'PalletProjectTokenTransferPolicyParams',
     patronageRate: 'Permill',
-    revenueSplitRate: 'Permill'
+    revenueSplitRate: 'Permill',
+    metadata: 'Bytes'
   },
   /**
-   * Lookup172: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   * Lookup179: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
    **/
   PalletProjectTokenTokenAllocation: {
     amount: 'u128',
     vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
   },
   /**
-   * Lookup173: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+   * Lookup180: pallet_project_token::types::VestingScheduleParams<BlockNumber>
    **/
   PalletProjectTokenVestingScheduleParams: {
     linearVestingDuration: 'u32',
@@ -1228,7 +1303,7 @@ export default {
     cliffAmountPercentage: 'Permill'
   },
   /**
-   * Lookup176: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+   * Lookup183: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
    **/
   PalletProjectTokenTransferPolicyParams: {
     _enum: {
@@ -1237,14 +1312,14 @@ export default {
     }
   },
   /**
-   * Lookup177: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+   * Lookup184: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
    **/
   PalletProjectTokenWhitelistParams: {
     commitment: 'H256',
     payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
   },
   /**
-   * Lookup178: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+   * Lookup185: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
    **/
   PalletProjectTokenSingleDataObjectUploadParams: {
     objectCreationParams: 'PalletStorageDataObjectCreationParameters',
@@ -1252,7 +1327,7 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup185: pallet_project_token::types::Validated<MemberId>
+   * Lookup192: pallet_project_token::types::Validated<MemberId>
    **/
   PalletProjectTokenValidated: {
     _enum: {
@@ -1261,21 +1336,21 @@ export default {
     }
   },
   /**
-   * Lookup186: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+   * Lookup193: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
    **/
   PalletProjectTokenValidatedPayment: {
     payment: 'PalletProjectTokenPaymentWithVesting',
     vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
   },
   /**
-   * Lookup187: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   * Lookup194: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
    **/
   PalletProjectTokenPaymentWithVesting: {
     amount: 'u128',
     vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
   },
   /**
-   * Lookup189: pallet_project_token::types::VestingSource
+   * Lookup196: pallet_project_token::types::VestingSource
    **/
   PalletProjectTokenVestingSource: {
     _enum: {
@@ -1285,7 +1360,7 @@ export default {
     }
   },
   /**
-   * Lookup193: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+   * Lookup200: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
    **/
   PalletProjectTokenTokenSale: {
     unitPrice: 'u128',
@@ -1300,7 +1375,15 @@ export default {
     autoFinalize: 'bool'
   },
   /**
-   * Lookup195: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+   * Lookup201: pallet_project_token::types::AmmCurve<Balance>
+   **/
+  PalletProjectTokenAmmCurve: {
+    slope: 'Permill',
+    intercept: 'Permill',
+    providedSupply: 'u128'
+  },
+  /**
+   * Lookup203: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
    **/
   PalletProposalsEngineRawEvent: {
     _enum: {
@@ -1313,7 +1396,7 @@ export default {
     }
   },
   /**
-   * Lookup196: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+   * Lookup204: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
    **/
   PalletProposalsEngineProposalStatusesProposalStatus: {
     _enum: {
@@ -1323,7 +1406,7 @@ export default {
     }
   },
   /**
-   * Lookup197: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+   * Lookup205: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
    **/
   PalletProposalsEngineProposalStatusesProposalDecision: {
     _enum: {
@@ -1337,13 +1420,13 @@ export default {
     }
   },
   /**
-   * Lookup198: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+   * Lookup206: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
    **/
   PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
     _enum: ['PendingExecution', 'PendingConstitutionality']
   },
   /**
-   * Lookup199: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+   * Lookup207: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
    **/
   PalletProposalsEngineProposalStatusesExecutionStatus: {
     _enum: {
@@ -1354,13 +1437,13 @@ export default {
     }
   },
   /**
-   * Lookup200: pallet_proposals_engine::types::VoteKind
+   * Lookup208: pallet_proposals_engine::types::VoteKind
    **/
   PalletProposalsEngineVoteKind: {
     _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
   },
   /**
-   * Lookup201: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+   * Lookup209: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
    **/
   PalletProposalsDiscussionRawEvent: {
     _enum: {
@@ -1372,7 +1455,7 @@ export default {
     }
   },
   /**
-   * Lookup202: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
+   * Lookup210: pallet_proposals_discussion::types::ThreadMode<BTreeSet<T>>
    **/
   PalletProposalsDiscussionThreadModeBTreeSet: {
     _enum: {
@@ -1381,7 +1464,7 @@ export default {
     }
   },
   /**
-   * Lookup203: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+   * Lookup211: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
    **/
   PalletProposalsCodexRawEvent: {
     _enum: {
@@ -1389,7 +1472,7 @@ export default {
     }
   },
   /**
-   * Lookup204: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+   * Lookup212: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
    **/
   PalletProposalsCodexGeneralProposalParams: {
     memberId: 'u64',
@@ -1399,7 +1482,7 @@ export default {
     exactExecutionBlock: 'Option<u32>'
   },
   /**
-   * Lookup205: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+   * Lookup213: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<Balance>, Balance, primitive_types::H256>>
    **/
   PalletProposalsCodexProposalDetails: {
     _enum: {
@@ -1429,14 +1512,14 @@ export default {
     }
   },
   /**
-   * Lookup207: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+   * Lookup215: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
    **/
   PalletCommonFundingRequestParameters: {
     account: 'AccountId32',
     amount: 'u128'
   },
   /**
-   * Lookup208: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+   * Lookup216: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
    **/
   PalletProposalsCodexCreateOpeningParameters: {
     description: 'Bytes',
@@ -1445,14 +1528,14 @@ export default {
     group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
   },
   /**
-   * Lookup209: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+   * Lookup217: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
    **/
   PalletWorkingGroupStakePolicy: {
     stakeAmount: 'u128',
     leavingUnstakingPeriod: 'u32'
   },
   /**
-   * Lookup210: pallet_proposals_codex::types::FillOpeningParameters
+   * Lookup218: pallet_proposals_codex::types::FillOpeningParameters
    **/
   PalletProposalsCodexFillOpeningParameters: {
     openingId: 'u64',
@@ -1460,7 +1543,7 @@ export default {
     workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
   },
   /**
-   * Lookup211: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+   * Lookup219: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
    **/
   PalletProposalsCodexTerminateRoleParameters: {
     workerId: 'u64',
@@ -1468,7 +1551,7 @@ export default {
     group: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup'
   },
   /**
-   * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
+   * Lookup220: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance1>
    **/
   PalletWorkingGroupRawEventInstance1: {
     _enum: {
@@ -1500,13 +1583,13 @@ export default {
     }
   },
   /**
-   * Lookup216: pallet_working_group::types::OpeningType
+   * Lookup224: pallet_working_group::types::OpeningType
    **/
   PalletWorkingGroupOpeningType: {
     _enum: ['Leader', 'Regular']
   },
   /**
-   * Lookup217: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+   * Lookup225: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
    **/
   PalletWorkingGroupApplyOnOpeningParams: {
     memberId: 'u64',
@@ -1517,24 +1600,24 @@ export default {
     stakeParameters: 'PalletWorkingGroupStakeParameters'
   },
   /**
-   * Lookup218: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+   * Lookup226: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
    **/
   PalletWorkingGroupStakeParameters: {
     stake: 'u128',
     stakingAccountId: 'AccountId32'
   },
   /**
-   * Lookup219: pallet_working_group::Instance1
+   * Lookup227: pallet_working_group::Instance1
    **/
   PalletWorkingGroupInstance1: 'Null',
   /**
-   * Lookup220: pallet_working_group::types::RewardPaymentType
+   * Lookup228: pallet_working_group::types::RewardPaymentType
    **/
   PalletWorkingGroupRewardPaymentType: {
     _enum: ['MissedReward', 'RegularReward']
   },
   /**
-   * Lookup221: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
+   * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance2>
    **/
   PalletWorkingGroupRawEventInstance2: {
     _enum: {
@@ -1566,11 +1649,11 @@ export default {
     }
   },
   /**
-   * Lookup222: pallet_working_group::Instance2
+   * Lookup230: pallet_working_group::Instance2
    **/
   PalletWorkingGroupInstance2: 'Null',
   /**
-   * Lookup223: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
+   * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance3>
    **/
   PalletWorkingGroupRawEventInstance3: {
     _enum: {
@@ -1602,11 +1685,11 @@ export default {
     }
   },
   /**
-   * Lookup224: pallet_working_group::Instance3
+   * Lookup232: pallet_working_group::Instance3
    **/
   PalletWorkingGroupInstance3: 'Null',
   /**
-   * Lookup225: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
+   * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance4>
    **/
   PalletWorkingGroupRawEventInstance4: {
     _enum: {
@@ -1638,11 +1721,11 @@ export default {
     }
   },
   /**
-   * Lookup226: pallet_working_group::Instance4
+   * Lookup234: pallet_working_group::Instance4
    **/
   PalletWorkingGroupInstance4: 'Null',
   /**
-   * Lookup227: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
+   * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance5>
    **/
   PalletWorkingGroupRawEventInstance5: {
     _enum: {
@@ -1674,11 +1757,11 @@ export default {
     }
   },
   /**
-   * Lookup228: pallet_working_group::Instance5
+   * Lookup236: pallet_working_group::Instance5
    **/
   PalletWorkingGroupInstance5: 'Null',
   /**
-   * Lookup229: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
+   * Lookup237: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance6>
    **/
   PalletWorkingGroupRawEventInstance6: {
     _enum: {
@@ -1710,11 +1793,11 @@ export default {
     }
   },
   /**
-   * Lookup230: pallet_working_group::Instance6
+   * Lookup238: pallet_working_group::Instance6
    **/
   PalletWorkingGroupInstance6: 'Null',
   /**
-   * Lookup231: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
+   * Lookup239: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance7>
    **/
   PalletWorkingGroupRawEventInstance7: {
     _enum: {
@@ -1746,11 +1829,11 @@ export default {
     }
   },
   /**
-   * Lookup232: pallet_working_group::Instance7
+   * Lookup240: pallet_working_group::Instance7
    **/
   PalletWorkingGroupInstance7: 'Null',
   /**
-   * Lookup233: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
+   * Lookup241: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance8>
    **/
   PalletWorkingGroupRawEventInstance8: {
     _enum: {
@@ -1782,11 +1865,11 @@ export default {
     }
   },
   /**
-   * Lookup234: pallet_working_group::Instance8
+   * Lookup242: pallet_working_group::Instance8
    **/
   PalletWorkingGroupInstance8: 'Null',
   /**
-   * Lookup235: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
+   * Lookup243: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, primitive_types::H256, pallet_working_group::Instance9>
    **/
   PalletWorkingGroupRawEventInstance9: {
     _enum: {
@@ -1818,11 +1901,11 @@ export default {
     }
   },
   /**
-   * Lookup236: pallet_working_group::Instance9
+   * Lookup244: pallet_working_group::Instance9
    **/
   PalletWorkingGroupInstance9: 'Null',
   /**
-   * Lookup237: frame_system::Phase
+   * Lookup245: frame_system::Phase
    **/
   FrameSystemPhase: {
     _enum: {
@@ -1832,20 +1915,17 @@ export default {
     }
   },
   /**
-   * Lookup241: frame_system::LastRuntimeUpgradeInfo
+   * Lookup249: frame_system::LastRuntimeUpgradeInfo
    **/
   FrameSystemLastRuntimeUpgradeInfo: {
     specVersion: 'Compact<u32>',
     specName: 'Text'
   },
   /**
-   * Lookup244: frame_system::pallet::Call<T>
+   * Lookup252: frame_system::pallet::Call<T>
    **/
   FrameSystemCall: {
     _enum: {
-      fill_block: {
-        ratio: 'Perbill',
-      },
       remark: {
         remark: 'Bytes',
       },
@@ -1877,53 +1957,53 @@ export default {
     }
   },
   /**
-   * Lookup247: frame_system::limits::BlockWeights
+   * Lookup255: frame_system::limits::BlockWeights
    **/
   FrameSystemLimitsBlockWeights: {
-    baseBlock: 'u64',
-    maxBlock: 'u64',
-    perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
+    baseBlock: 'SpWeightsWeightV2Weight',
+    maxBlock: 'SpWeightsWeightV2Weight',
+    perClass: 'FrameSupportDispatchPerDispatchClassWeightsPerClass'
   },
   /**
-   * Lookup248: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+   * Lookup256: frame_support::dispatch::PerDispatchClass<frame_system::limits::WeightsPerClass>
    **/
-  FrameSupportWeightsPerDispatchClassWeightsPerClass: {
+  FrameSupportDispatchPerDispatchClassWeightsPerClass: {
     normal: 'FrameSystemLimitsWeightsPerClass',
     operational: 'FrameSystemLimitsWeightsPerClass',
     mandatory: 'FrameSystemLimitsWeightsPerClass'
   },
   /**
-   * Lookup249: frame_system::limits::WeightsPerClass
+   * Lookup257: frame_system::limits::WeightsPerClass
    **/
   FrameSystemLimitsWeightsPerClass: {
-    baseExtrinsic: 'u64',
-    maxExtrinsic: 'Option<u64>',
-    maxTotal: 'Option<u64>',
-    reserved: 'Option<u64>'
+    baseExtrinsic: 'SpWeightsWeightV2Weight',
+    maxExtrinsic: 'Option<SpWeightsWeightV2Weight>',
+    maxTotal: 'Option<SpWeightsWeightV2Weight>',
+    reserved: 'Option<SpWeightsWeightV2Weight>'
   },
   /**
-   * Lookup250: frame_system::limits::BlockLength
+   * Lookup259: frame_system::limits::BlockLength
    **/
   FrameSystemLimitsBlockLength: {
-    max: 'FrameSupportWeightsPerDispatchClassU32'
+    max: 'FrameSupportDispatchPerDispatchClassU32'
   },
   /**
-   * Lookup251: frame_support::weights::PerDispatchClass<T>
+   * Lookup260: frame_support::dispatch::PerDispatchClass<T>
    **/
-  FrameSupportWeightsPerDispatchClassU32: {
+  FrameSupportDispatchPerDispatchClassU32: {
     normal: 'u32',
     operational: 'u32',
     mandatory: 'u32'
   },
   /**
-   * Lookup252: frame_support::weights::RuntimeDbWeight
+   * Lookup261: sp_weights::RuntimeDbWeight
    **/
-  FrameSupportWeightsRuntimeDbWeight: {
+  SpWeightsRuntimeDbWeight: {
     read: 'u64',
     write: 'u64'
   },
   /**
-   * Lookup253: sp_version::RuntimeVersion
+   * Lookup262: sp_version::RuntimeVersion
    **/
   SpVersionRuntimeVersion: {
     specName: 'Text',
@@ -1936,13 +2016,13 @@ export default {
     stateVersion: 'u8'
   },
   /**
-   * Lookup259: frame_system::pallet::Error<T>
+   * Lookup268: frame_system::pallet::Error<T>
    **/
   FrameSystemError: {
     _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
   },
   /**
-   * Lookup260: pallet_utility::pallet::Call<T>
+   * Lookup269: pallet_utility::pallet::Call<T>
    **/
   PalletUtilityCall: {
     _enum: {
@@ -1961,12 +2041,16 @@ export default {
         call: 'Call',
       },
       force_batch: {
-        calls: 'Vec<Call>'
+        calls: 'Vec<Call>',
+      },
+      with_weight: {
+        call: 'Call',
+        weight: 'SpWeightsWeightV2Weight'
       }
     }
   },
   /**
-   * Lookup263: pallet_babe::pallet::Call<T>
+   * Lookup272: pallet_babe::pallet::Call<T>
    **/
   PalletBabeCall: {
     _enum: {
@@ -1984,7 +2068,7 @@ export default {
     }
   },
   /**
-   * Lookup264: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+   * Lookup273: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
    **/
   SpConsensusSlotsEquivocationProof: {
     offender: 'SpConsensusBabeAppPublic',
@@ -1993,7 +2077,7 @@ export default {
     secondHeader: 'SpRuntimeHeader'
   },
   /**
-   * Lookup265: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+   * Lookup274: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
    **/
   SpRuntimeHeader: {
     parentHash: 'H256',
@@ -2003,15 +2087,15 @@ export default {
     digest: 'SpRuntimeDigest'
   },
   /**
-   * Lookup266: sp_runtime::traits::BlakeTwo256
+   * Lookup275: sp_runtime::traits::BlakeTwo256
    **/
   SpRuntimeBlakeTwo256: 'Null',
   /**
-   * Lookup267: sp_consensus_babe::app::Public
+   * Lookup276: sp_consensus_babe::app::Public
    **/
   SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
   /**
-   * Lookup269: sp_session::MembershipProof
+   * Lookup278: sp_session::MembershipProof
    **/
   SpSessionMembershipProof: {
     session: 'u32',
@@ -2019,7 +2103,7 @@ export default {
     validatorCount: 'u32'
   },
   /**
-   * Lookup270: sp_consensus_babe::digests::NextConfigDescriptor
+   * Lookup279: sp_consensus_babe::digests::NextConfigDescriptor
    **/
   SpConsensusBabeDigestsNextConfigDescriptor: {
     _enum: {
@@ -2031,13 +2115,13 @@ export default {
     }
   },
   /**
-   * Lookup271: sp_consensus_babe::AllowedSlots
+   * Lookup280: sp_consensus_babe::AllowedSlots
    **/
   SpConsensusBabeAllowedSlots: {
     _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
   },
   /**
-   * Lookup272: pallet_timestamp::pallet::Call<T>
+   * Lookup281: pallet_timestamp::pallet::Call<T>
    **/
   PalletTimestampCall: {
     _enum: {
@@ -2047,17 +2131,7 @@ export default {
     }
   },
   /**
-   * Lookup274: pallet_authorship::pallet::Call<T>
-   **/
-  PalletAuthorshipCall: {
-    _enum: {
-      set_uncles: {
-        newUncles: 'Vec<SpRuntimeHeader>'
-      }
-    }
-  },
-  /**
-   * Lookup276: pallet_balances::pallet::Call<T, I>
+   * Lookup282: pallet_balances::pallet::Call<T, I>
    **/
   PalletBalancesCall: {
     _enum: {
@@ -2090,7 +2164,7 @@ export default {
     }
   },
   /**
-   * Lookup277: pallet_election_provider_multi_phase::pallet::Call<T>
+   * Lookup283: pallet_election_provider_multi_phase::pallet::Call<T>
    **/
   PalletElectionProviderMultiPhaseCall: {
     _enum: {
@@ -2114,7 +2188,7 @@ export default {
     }
   },
   /**
-   * Lookup278: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+   * Lookup284: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
    **/
   PalletElectionProviderMultiPhaseRawSolution: {
     solution: 'JoystreamNodeRuntimeNposSolution16',
@@ -2122,7 +2196,7 @@ export default {
     round: 'u32'
   },
   /**
-   * Lookup279: joystream_node_runtime::NposSolution16
+   * Lookup285: joystream_node_runtime::NposSolution16
    **/
   JoystreamNodeRuntimeNposSolution16: {
     votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
@@ -2143,29 +2217,21 @@ export default {
     votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
   },
   /**
-   * Lookup330: sp_npos_elections::ElectionScore
-   **/
-  SpNposElectionsElectionScore: {
-    minimalStake: 'u128',
-    sumStake: 'u128',
-    sumStakeSquared: 'u128'
-  },
-  /**
-   * Lookup331: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+   * Lookup336: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
    **/
   PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
     voters: 'Compact<u32>',
     targets: 'Compact<u32>'
   },
   /**
-   * Lookup335: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+   * Lookup340: sp_npos_elections::Support<sp_core::crypto::AccountId32>
    **/
   SpNposElectionsSupport: {
     total: 'u128',
     voters: 'Vec<(AccountId32,u128)>'
   },
   /**
-   * Lookup338: pallet_staking::pallet::pallet::Call<T>
+   * Lookup342: pallet_staking::pallet::pallet::Call<T>
    **/
   PalletStakingPalletCall: {
     _enum: {
@@ -2229,10 +2295,6 @@ export default {
       rebond: {
         value: 'Compact<u128>',
       },
-      set_history_depth: {
-        newHistoryDepth: 'Compact<u32>',
-        eraItemsDeleted: 'Compact<u32>',
-      },
       reap_stash: {
         stash: 'AccountId32',
         numSlashingSpans: 'u32',
@@ -2252,12 +2314,18 @@ export default {
         controller: 'AccountId32',
       },
       force_apply_min_commission: {
-        validatorStash: 'AccountId32'
+        validatorStash: 'AccountId32',
+      },
+      set_min_commission: {
+        _alias: {
+          new_: 'new',
+        },
+        new_: 'Perbill'
       }
     }
   },
   /**
-   * Lookup339: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+   * Lookup343: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
    **/
   PalletStakingRewardDestination: {
     _enum: {
@@ -2269,7 +2337,7 @@ export default {
     }
   },
   /**
-   * Lookup343: pallet_staking::pallet::pallet::ConfigOp<T>
+   * Lookup347: pallet_staking::pallet::pallet::ConfigOp<T>
    **/
   PalletStakingPalletConfigOpU128: {
     _enum: {
@@ -2279,7 +2347,7 @@ export default {
     }
   },
   /**
-   * Lookup344: pallet_staking::pallet::pallet::ConfigOp<T>
+   * Lookup348: pallet_staking::pallet::pallet::ConfigOp<T>
    **/
   PalletStakingPalletConfigOpU32: {
     _enum: {
@@ -2289,7 +2357,7 @@ export default {
     }
   },
   /**
-   * Lookup345: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+   * Lookup349: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
    **/
   PalletStakingPalletConfigOpPercent: {
     _enum: {
@@ -2299,7 +2367,7 @@ export default {
     }
   },
   /**
-   * Lookup346: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+   * Lookup350: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
    **/
   PalletStakingPalletConfigOpPerbill: {
     _enum: {
@@ -2309,7 +2377,7 @@ export default {
     }
   },
   /**
-   * Lookup347: pallet_session::pallet::Call<T>
+   * Lookup351: pallet_session::pallet::Call<T>
    **/
   PalletSessionCall: {
     _enum: {
@@ -2324,7 +2392,7 @@ export default {
     }
   },
   /**
-   * Lookup348: joystream_node_runtime::SessionKeys
+   * Lookup352: joystream_node_runtime::SessionKeys
    **/
   JoystreamNodeRuntimeSessionKeys: {
     grandpa: 'SpFinalityGrandpaAppPublic',
@@ -2333,11 +2401,11 @@ export default {
     authorityDiscovery: 'SpAuthorityDiscoveryAppPublic'
   },
   /**
-   * Lookup349: sp_authority_discovery::app::Public
+   * Lookup353: sp_authority_discovery::app::Public
    **/
   SpAuthorityDiscoveryAppPublic: 'SpCoreSr25519Public',
   /**
-   * Lookup350: pallet_grandpa::pallet::Call<T>
+   * Lookup354: pallet_grandpa::pallet::Call<T>
    **/
   PalletGrandpaCall: {
     _enum: {
@@ -2356,14 +2424,14 @@ export default {
     }
   },
   /**
-   * Lookup351: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+   * Lookup355: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
    **/
   SpFinalityGrandpaEquivocationProof: {
     setId: 'u64',
     equivocation: 'SpFinalityGrandpaEquivocation'
   },
   /**
-   * Lookup352: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+   * Lookup356: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
    **/
   SpFinalityGrandpaEquivocation: {
     _enum: {
@@ -2372,7 +2440,7 @@ export default {
     }
   },
   /**
-   * Lookup353: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+   * Lookup357: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
    **/
   FinalityGrandpaEquivocationPrevote: {
     roundNumber: 'u64',
@@ -2381,22 +2449,22 @@ export default {
     second: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)'
   },
   /**
-   * Lookup354: finality_grandpa::Prevote<primitive_types::H256, N>
+   * Lookup358: finality_grandpa::Prevote<primitive_types::H256, N>
    **/
   FinalityGrandpaPrevote: {
     targetHash: 'H256',
     targetNumber: 'u32'
   },
   /**
-   * Lookup355: sp_finality_grandpa::app::Signature
+   * Lookup359: sp_finality_grandpa::app::Signature
    **/
   SpFinalityGrandpaAppSignature: 'SpCoreEd25519Signature',
   /**
-   * Lookup356: sp_core::ed25519::Signature
+   * Lookup360: sp_core::ed25519::Signature
    **/
   SpCoreEd25519Signature: '[u8;64]',
   /**
-   * Lookup359: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+   * Lookup363: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
    **/
   FinalityGrandpaEquivocationPrecommit: {
     roundNumber: 'u64',
@@ -2405,14 +2473,14 @@ export default {
     second: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)'
   },
   /**
-   * Lookup360: finality_grandpa::Precommit<primitive_types::H256, N>
+   * Lookup364: finality_grandpa::Precommit<primitive_types::H256, N>
    **/
   FinalityGrandpaPrecommit: {
     targetHash: 'H256',
     targetNumber: 'u32'
   },
   /**
-   * Lookup362: pallet_im_online::pallet::Call<T>
+   * Lookup366: pallet_im_online::pallet::Call<T>
    **/
   PalletImOnlineCall: {
     _enum: {
@@ -2423,7 +2491,7 @@ export default {
     }
   },
   /**
-   * Lookup363: pallet_im_online::Heartbeat<BlockNumber>
+   * Lookup367: pallet_im_online::Heartbeat<BlockNumber>
    **/
   PalletImOnlineHeartbeat: {
     blockNumber: 'u32',
@@ -2433,46 +2501,22 @@ export default {
     validatorsLen: 'u32'
   },
   /**
-   * Lookup364: sp_core::offchain::OpaqueNetworkState
+   * Lookup368: sp_core::offchain::OpaqueNetworkState
    **/
   SpCoreOffchainOpaqueNetworkState: {
     peerId: 'Bytes',
     externalAddresses: 'Vec<Bytes>'
   },
   /**
-   * Lookup368: pallet_im_online::sr25519::app_sr25519::Signature
+   * Lookup372: pallet_im_online::sr25519::app_sr25519::Signature
    **/
   PalletImOnlineSr25519AppSr25519Signature: 'SpCoreSr25519Signature',
   /**
-   * Lookup369: sp_core::sr25519::Signature
+   * Lookup373: sp_core::sr25519::Signature
    **/
   SpCoreSr25519Signature: '[u8;64]',
   /**
-   * Lookup370: pallet_sudo::pallet::Call<T>
-   **/
-  PalletSudoCall: {
-    _enum: {
-      sudo: {
-        call: 'Call',
-      },
-      sudo_unchecked_weight: {
-        call: 'Call',
-        weight: 'u64',
-      },
-      set_key: {
-        _alias: {
-          new_: 'new',
-        },
-        new_: 'AccountId32',
-      },
-      sudo_as: {
-        who: 'AccountId32',
-        call: 'Call'
-      }
-    }
-  },
-  /**
-   * Lookup371: pallet_bags_list::pallet::Call<T, I>
+   * Lookup374: pallet_bags_list::pallet::Call<T, I>
    **/
   PalletBagsListCall: {
     _enum: {
@@ -2485,7 +2529,7 @@ export default {
     }
   },
   /**
-   * Lookup372: pallet_vesting::pallet::Call<T>
+   * Lookup375: pallet_vesting::pallet::Call<T>
    **/
   PalletVestingCall: {
     _enum: {
@@ -2509,7 +2553,7 @@ export default {
     }
   },
   /**
-   * Lookup373: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+   * Lookup376: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
    **/
   PalletVestingVestingInfo: {
     locked: 'u128',
@@ -2517,7 +2561,7 @@ export default {
     startingBlock: 'u32'
   },
   /**
-   * Lookup374: pallet_multisig::pallet::Call<T>
+   * Lookup377: pallet_multisig::pallet::Call<T>
    **/
   PalletMultisigCall: {
     _enum: {
@@ -2529,16 +2573,15 @@ export default {
         threshold: 'u16',
         otherSignatories: 'Vec<AccountId32>',
         maybeTimepoint: 'Option<PalletMultisigTimepoint>',
-        call: 'WrapperKeepOpaque<Call>',
-        storeCall: 'bool',
-        maxWeight: 'u64',
+        call: 'Call',
+        maxWeight: 'SpWeightsWeightV2Weight',
       },
       approve_as_multi: {
         threshold: 'u16',
         otherSignatories: 'Vec<AccountId32>',
         maybeTimepoint: 'Option<PalletMultisigTimepoint>',
         callHash: '[u8;32]',
-        maxWeight: 'u64',
+        maxWeight: 'SpWeightsWeightV2Weight',
       },
       cancel_as_multi: {
         threshold: 'u16',
@@ -2549,7 +2592,7 @@ export default {
     }
   },
   /**
-   * Lookup377: pallet_council::Call<T>
+   * Lookup379: pallet_council::Call<T>
    **/
   PalletCouncilCall: {
     _enum: {
@@ -2600,7 +2643,7 @@ export default {
     }
   },
   /**
-   * Lookup378: pallet_referendum::Call<T, I>
+   * Lookup380: pallet_referendum::Call<T, I>
    **/
   PalletReferendumCall: {
     _enum: {
@@ -2612,11 +2655,12 @@ export default {
         salt: 'Bytes',
         voteOptionId: 'u64',
       },
-      release_vote_stake: 'Null'
+      release_vote_stake: 'Null',
+      opt_out_of_voting: 'Null'
     }
   },
   /**
-   * Lookup379: pallet_membership::Call<T>
+   * Lookup381: pallet_membership::Call<T>
    **/
   PalletMembershipCall: {
     _enum: {
@@ -2677,6 +2721,7 @@ export default {
       member_remark: {
         memberId: 'u64',
         msg: 'Bytes',
+        payment: 'Option<(AccountId32,u128)>',
       },
       create_member: {
         params: 'PalletMembershipCreateMemberParameters'
@@ -2684,7 +2729,7 @@ export default {
     }
   },
   /**
-   * Lookup380: pallet_forum::Call<T>
+   * Lookup382: pallet_forum::Call<T>
    **/
   PalletForumCall: {
     _enum: {
@@ -2781,7 +2826,7 @@ export default {
     }
   },
   /**
-   * Lookup381: pallet_constitution::Call<T>
+   * Lookup383: pallet_constitution::Call<T>
    **/
   PalletConstitutionCall: {
     _enum: {
@@ -2791,7 +2836,7 @@ export default {
     }
   },
   /**
-   * Lookup382: pallet_bounty::Call<T>
+   * Lookup384: pallet_bounty::Call<T>
    **/
   PalletBountyCall: {
     _enum: {
@@ -2867,7 +2912,28 @@ export default {
     }
   },
   /**
-   * Lookup384: pallet_content::Call<T>
+   * Lookup385: pallet_joystream_utility::Call<T>
+   **/
+  PalletJoystreamUtilityCall: {
+    _enum: {
+      execute_signal_proposal: {
+        signal: 'Bytes',
+      },
+      execute_runtime_upgrade_proposal: {
+        wasm: 'Bytes',
+      },
+      update_working_group_budget: {
+        workingGroup: 'PalletCommonWorkingGroupIterableEnumsWorkingGroup',
+        amount: 'u128',
+        balanceKind: 'PalletCommonBalanceKind',
+      },
+      burn_account_tokens: {
+        amount: 'u128'
+      }
+    }
+  },
+  /**
+   * Lookup386: pallet_content::Call<T>
    **/
   PalletContentCall: {
     _enum: {
@@ -2924,13 +2990,6 @@ export default {
         storageBucketsNumWitness: 'u32',
         rationale: 'Bytes',
       },
-      delete_channel_as_moderator: {
-        actor: 'PalletContentPermissionsContentActor',
-        channelId: 'u64',
-        channelBagWitness: 'PalletContentChannelBagWitness',
-        numObjectsToDelete: 'u64',
-        rationale: 'Bytes',
-      },
       set_channel_visibility_as_moderator: {
         actor: 'PalletContentPermissionsContentActor',
         channelId: 'u64',
@@ -2960,13 +3019,6 @@ export default {
         assetsToRemove: 'BTreeSet<u64>',
         rationale: 'Bytes',
       },
-      delete_video_as_moderator: {
-        actor: 'PalletContentPermissionsContentActor',
-        videoId: 'u64',
-        storageBucketsNumWitness: 'Option<u32>',
-        numObjectsToDelete: 'u64',
-        rationale: 'Bytes',
-      },
       set_video_visibility_as_moderator: {
         actor: 'PalletContentPermissionsContentActor',
         videoId: 'u64',
@@ -2975,6 +3027,7 @@ export default {
       },
       update_channel_payouts: {
         params: 'PalletContentUpdateChannelPayoutsParametersRecord',
+        uploaderAccount: 'AccountId32',
       },
       claim_channel_reward: {
         actor: 'PalletContentPermissionsContentActor',
@@ -2992,11 +3045,6 @@ export default {
       update_video_state_bloat_bond: {
         newVideoStateBloatBond: 'u128',
       },
-      claim_and_withdraw_channel_reward: {
-        actor: 'PalletContentPermissionsContentActor',
-        proof: 'Vec<PalletCommonMerkleTreeProofElementRecord>',
-        item: 'PalletContentPullPaymentElement',
-      },
       issue_nft: {
         actor: 'PalletContentPermissionsContentActor',
         videoId: 'u64',
@@ -3175,19 +3223,33 @@ export default {
       },
       deissue_creator_token: {
         actor: 'PalletContentPermissionsContentActor',
-        channelId: 'u64'
+        channelId: 'u64',
+      },
+      activate_amm: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        params: 'PalletProjectTokenAmmParams',
+      },
+      deactivate_amm: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+      },
+      creator_token_issuer_remark: {
+        actor: 'PalletContentPermissionsContentActor',
+        channelId: 'u64',
+        remark: 'Bytes'
       }
     }
   },
   /**
-   * Lookup385: pallet_content::types::ChannelBagWitness
+   * Lookup387: pallet_content::types::ChannelBagWitness
    **/
   PalletContentChannelBagWitness: {
     storageBucketsNum: 'u32',
     distributionBucketsNum: 'u32'
   },
   /**
-   * Lookup387: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
+   * Lookup389: pallet_common::merkle_tree::ProofElementRecord<primitive_types::H256, pallet_common::merkle_tree::Side>
    **/
   PalletCommonMerkleTreeProofElementRecord: {
     _alias: {
@@ -3197,13 +3259,13 @@ export default {
     side: 'PalletCommonMerkleTreeSide'
   },
   /**
-   * Lookup388: pallet_common::merkle_tree::Side
+   * Lookup390: pallet_common::merkle_tree::Side
    **/
   PalletCommonMerkleTreeSide: {
     _enum: ['Left', 'Right']
   },
   /**
-   * Lookup389: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+   * Lookup391: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
    **/
   PalletContentPullPaymentElement: {
     channelId: 'u64',
@@ -3211,7 +3273,7 @@ export default {
     reason: 'H256'
   },
   /**
-   * Lookup390: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+   * Lookup392: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
    **/
   PalletContentInitTransferParameters: {
     newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -3219,7 +3281,7 @@ export default {
     newOwner: 'PalletContentChannelOwner'
   },
   /**
-   * Lookup391: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   * Lookup393: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
    **/
   PalletProjectTokenTokenSaleParams: {
     unitPrice: 'u128',
@@ -3231,11 +3293,18 @@ export default {
     metadata: 'Option<Bytes>'
   },
   /**
-   * Lookup392: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+   * Lookup394: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
    **/
   PalletProjectTokenTransfersPaymentWithVesting: 'BTreeMap<u64, PalletProjectTokenPaymentWithVesting>',
   /**
-   * Lookup396: pallet_storage::Call<T>
+   * Lookup398: pallet_project_token::types::AmmParams
+   **/
+  PalletProjectTokenAmmParams: {
+    slope: 'Permill',
+    intercept: 'Permill'
+  },
+  /**
+   * Lookup399: pallet_storage::Call<T>
    **/
   PalletStorageCall: {
     _enum: {
@@ -3369,9 +3438,6 @@ export default {
         bucketId: 'PalletStorageDistributionBucketIdRecord',
         metadata: 'Bytes',
       },
-      sudo_upload_data_objects: {
-        params: 'PalletStorageUploadParametersRecord',
-      },
       storage_operator_remark: {
         workerId: 'u64',
         storageBucketId: 'u64',
@@ -3385,7 +3451,7 @@ export default {
     }
   },
   /**
-   * Lookup397: pallet_project_token::Call<T>
+   * Lookup400: pallet_project_token::Call<T>
    **/
   PalletProjectTokenCall: {
     _enum: {
@@ -3421,32 +3487,44 @@ export default {
       },
       exit_revenue_split: {
         tokenId: 'u64',
-        memberId: 'u64'
+        memberId: 'u64',
+      },
+      buy_on_amm: {
+        tokenId: 'u64',
+        memberId: 'u64',
+        amount: 'u128',
+        slippageTolerance: 'Option<(Permill,u128)>',
+      },
+      sell_on_amm: {
+        tokenId: 'u64',
+        memberId: 'u64',
+        amount: 'u128',
+        slippageTolerance: 'Option<(Permill,u128)>'
       }
     }
   },
   /**
-   * Lookup398: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
+   * Lookup401: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
    **/
   PalletProjectTokenTransfersPayment: 'BTreeMap<u64, PalletProjectTokenPayment>',
   /**
-   * Lookup399: pallet_project_token::types::Payment<Balance>
+   * Lookup402: pallet_project_token::types::Payment<Balance>
    **/
   PalletProjectTokenPayment: {
     amount: 'u128'
   },
   /**
-   * Lookup403: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+   * Lookup406: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
    **/
   PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
   /**
-   * Lookup406: pallet_project_token::types::MerkleSide
+   * Lookup409: pallet_project_token::types::MerkleSide
    **/
   PalletProjectTokenMerkleSide: {
     _enum: ['Right', 'Left']
   },
   /**
-   * Lookup407: pallet_proposals_engine::Call<T>
+   * Lookup412: pallet_proposals_engine::Call<T>
    **/
   PalletProposalsEngineCall: {
     _enum: {
@@ -3471,7 +3549,7 @@ export default {
     }
   },
   /**
-   * Lookup408: pallet_proposals_discussion::Call<T>
+   * Lookup413: pallet_proposals_discussion::Call<T>
    **/
   PalletProposalsDiscussionCall: {
     _enum: {
@@ -3500,7 +3578,7 @@ export default {
     }
   },
   /**
-   * Lookup409: pallet_proposals_codex::Call<T>
+   * Lookup414: pallet_proposals_codex::Call<T>
    **/
   PalletProposalsCodexCall: {
     _enum: {
@@ -3511,7 +3589,7 @@ export default {
     }
   },
   /**
-   * Lookup410: pallet_working_group::Call<T, I>
+   * Lookup415: pallet_working_group::Call<T, I>
    **/
   PalletWorkingGroupCall: {
     _enum: {
@@ -3594,7 +3672,7 @@ export default {
     }
   },
   /**
-   * Lookup419: joystream_node_runtime::OriginCaller
+   * Lookup424: joystream_node_runtime::OriginCaller
    **/
   JoystreamNodeRuntimeOriginCaller: {
     _enum: {
@@ -3603,7 +3681,7 @@ export default {
     }
   },
   /**
-   * Lookup420: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+   * Lookup425: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
    **/
   FrameSupportDispatchRawOrigin: {
     _enum: {
@@ -3613,17 +3691,17 @@ export default {
     }
   },
   /**
-   * Lookup421: sp_core::Void
+   * Lookup426: sp_core::Void
    **/
   SpCoreVoid: 'Null',
   /**
-   * Lookup422: pallet_utility::pallet::Error<T>
+   * Lookup427: pallet_utility::pallet::Error<T>
    **/
   PalletUtilityError: {
     _enum: ['TooManyCalls']
   },
   /**
-   * Lookup429: sp_consensus_babe::digests::PreDigest
+   * Lookup434: sp_consensus_babe::digests::PreDigest
    **/
   SpConsensusBabeDigestsPreDigest: {
     _enum: {
@@ -3634,7 +3712,7 @@ export default {
     }
   },
   /**
-   * Lookup430: sp_consensus_babe::digests::PrimaryPreDigest
+   * Lookup435: sp_consensus_babe::digests::PrimaryPreDigest
    **/
   SpConsensusBabeDigestsPrimaryPreDigest: {
     authorityIndex: 'u32',
@@ -3643,14 +3721,14 @@ export default {
     vrfProof: '[u8;64]'
   },
   /**
-   * Lookup431: sp_consensus_babe::digests::SecondaryPlainPreDigest
+   * Lookup436: sp_consensus_babe::digests::SecondaryPlainPreDigest
    **/
   SpConsensusBabeDigestsSecondaryPlainPreDigest: {
     authorityIndex: 'u32',
     slot: 'u64'
   },
   /**
-   * Lookup432: sp_consensus_babe::digests::SecondaryVRFPreDigest
+   * Lookup437: sp_consensus_babe::digests::SecondaryVRFPreDigest
    **/
   SpConsensusBabeDigestsSecondaryVRFPreDigest: {
     authorityIndex: 'u32',
@@ -3659,35 +3737,20 @@ export default {
     vrfProof: '[u8;64]'
   },
   /**
-   * Lookup434: sp_consensus_babe::BabeEpochConfiguration
+   * Lookup439: sp_consensus_babe::BabeEpochConfiguration
    **/
   SpConsensusBabeBabeEpochConfiguration: {
     c: '(u64,u64)',
     allowedSlots: 'SpConsensusBabeAllowedSlots'
   },
   /**
-   * Lookup435: pallet_babe::pallet::Error<T>
+   * Lookup441: pallet_babe::pallet::Error<T>
    **/
   PalletBabeError: {
     _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
   },
   /**
-   * Lookup437: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
-   **/
-  PalletAuthorshipUncleEntryItem: {
-    _enum: {
-      InclusionHeight: 'u32',
-      Uncle: '(H256,Option<AccountId32>)'
-    }
-  },
-  /**
-   * Lookup438: pallet_authorship::pallet::Error<T>
-   **/
-  PalletAuthorshipError: {
-    _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
-  },
-  /**
-   * Lookup440: pallet_balances::BalanceLock<Balance>
+   * Lookup443: pallet_balances::BalanceLock<Balance>
    **/
   PalletBalancesBalanceLock: {
     id: '[u8;8]',
@@ -3695,49 +3758,32 @@ export default {
     reasons: 'PalletBalancesReasons'
   },
   /**
-   * Lookup441: pallet_balances::Reasons
+   * Lookup444: pallet_balances::Reasons
    **/
   PalletBalancesReasons: {
     _enum: ['Fee', 'Misc', 'All']
   },
   /**
-   * Lookup444: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+   * Lookup447: pallet_balances::ReserveData<ReserveIdentifier, Balance>
    **/
   PalletBalancesReserveData: {
     id: '[u8;8]',
     amount: 'u128'
   },
   /**
-   * Lookup446: pallet_balances::Releases
-   **/
-  PalletBalancesReleases: {
-    _enum: ['V1_0_0', 'V2_0_0']
-  },
-  /**
-   * Lookup447: pallet_balances::pallet::Error<T, I>
+   * Lookup449: pallet_balances::pallet::Error<T, I>
    **/
   PalletBalancesError: {
     _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
   },
   /**
-   * Lookup449: pallet_transaction_payment::Releases
+   * Lookup451: pallet_transaction_payment::Releases
    **/
   PalletTransactionPaymentReleases: {
     _enum: ['V1Ancient', 'V2']
   },
   /**
-   * Lookup450: pallet_election_provider_multi_phase::Phase<Bn>
-   **/
-  PalletElectionProviderMultiPhasePhase: {
-    _enum: {
-      Off: 'Null',
-      Signed: 'Null',
-      Unsigned: '(bool,u32)',
-      Emergency: 'Null'
-    }
-  },
-  /**
-   * Lookup452: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+   * Lookup452: pallet_election_provider_multi_phase::ReadySolution<T>
    **/
   PalletElectionProviderMultiPhaseReadySolution: {
     supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
@@ -3745,7 +3791,7 @@ export default {
     compute: 'PalletElectionProviderMultiPhaseElectionCompute'
   },
   /**
-   * Lookup453: pallet_election_provider_multi_phase::RoundSnapshot<T>
+   * Lookup454: pallet_election_provider_multi_phase::RoundSnapshot<T>
    **/
   PalletElectionProviderMultiPhaseRoundSnapshot: {
     voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
@@ -3764,7 +3810,7 @@ export default {
    * Lookup462: pallet_election_provider_multi_phase::pallet::Error<T>
    **/
   PalletElectionProviderMultiPhaseError: {
-    _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
+    _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed', 'BoundNotMet', 'TooManyWinners']
   },
   /**
    * Lookup463: pallet_staking::StakingLedger<T>
@@ -3784,7 +3830,7 @@ export default {
     era: 'Compact<u32>'
   },
   /**
-   * Lookup467: pallet_staking::Nominations<T>
+   * Lookup468: pallet_staking::Nominations<T>
    **/
   PalletStakingNominations: {
     targets: 'Vec<AccountId32>',
@@ -3792,25 +3838,19 @@ export default {
     suppressed: 'bool'
   },
   /**
-   * Lookup468: pallet_staking::ActiveEraInfo
+   * Lookup469: pallet_staking::ActiveEraInfo
    **/
   PalletStakingActiveEraInfo: {
     index: 'u32',
     start: 'Option<u64>'
   },
   /**
-   * Lookup470: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+   * Lookup471: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
    **/
   PalletStakingEraRewardPoints: {
     total: 'u32',
     individual: 'BTreeMap<AccountId32, u32>'
   },
-  /**
-   * Lookup474: pallet_staking::Forcing
-   **/
-  PalletStakingForcing: {
-    _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
-  },
   /**
    * Lookup476: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
    **/
@@ -3838,29 +3878,23 @@ export default {
     paidOut: 'u128'
   },
   /**
-   * Lookup482: pallet_staking::Releases
-   **/
-  PalletStakingReleases: {
-    _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
-  },
-  /**
-   * Lookup483: pallet_staking::pallet::pallet::Error<T>
+   * Lookup482: pallet_staking::pallet::pallet::Error<T>
    **/
   PalletStakingPalletError: {
-    _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
+    _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BoundNotMet', 'BondingRestricted']
   },
   /**
-   * Lookup487: sp_core::crypto::KeyTypeId
+   * Lookup486: sp_core::crypto::KeyTypeId
    **/
   SpCoreCryptoKeyTypeId: '[u8;4]',
   /**
-   * Lookup488: pallet_session::pallet::Error<T>
+   * Lookup487: pallet_session::pallet::Error<T>
    **/
   PalletSessionError: {
     _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
   },
   /**
-   * Lookup490: pallet_grandpa::StoredState<N>
+   * Lookup489: pallet_grandpa::StoredState<N>
    **/
   PalletGrandpaStoredState: {
     _enum: {
@@ -3877,7 +3911,7 @@ export default {
     }
   },
   /**
-   * Lookup491: pallet_grandpa::StoredPendingChange<N, Limit>
+   * Lookup490: pallet_grandpa::StoredPendingChange<N, Limit>
    **/
   PalletGrandpaStoredPendingChange: {
     scheduledAt: 'u32',
@@ -3886,39 +3920,33 @@ export default {
     forced: 'Option<u32>'
   },
   /**
-   * Lookup493: pallet_grandpa::pallet::Error<T>
+   * Lookup492: pallet_grandpa::pallet::Error<T>
    **/
   PalletGrandpaError: {
     _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
   },
   /**
-   * Lookup499: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+   * Lookup498: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
    **/
   PalletImOnlineBoundedOpaqueNetworkState: {
     peerId: 'Bytes',
     externalAddresses: 'Vec<Bytes>'
   },
   /**
-   * Lookup503: pallet_im_online::pallet::Error<T>
+   * Lookup502: pallet_im_online::pallet::Error<T>
    **/
   PalletImOnlineError: {
     _enum: ['InvalidKey', 'DuplicatedHeartbeat']
   },
   /**
-   * Lookup504: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+   * Lookup503: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
    **/
   SpStakingOffenceOffenceDetails: {
     offender: '(AccountId32,PalletStakingExposure)',
     reporters: 'Vec<AccountId32>'
   },
   /**
-   * Lookup507: pallet_sudo::pallet::Error<T>
-   **/
-  PalletSudoError: {
-    _enum: ['RequireSudo']
-  },
-  /**
-   * Lookup508: pallet_bags_list::list::Node<T, I>
+   * Lookup506: pallet_bags_list::list::Node<T, I>
    **/
   PalletBagsListListNode: {
     id: 'AccountId32',
@@ -3928,14 +3956,14 @@ export default {
     score: 'u64'
   },
   /**
-   * Lookup509: pallet_bags_list::list::Bag<T, I>
+   * Lookup507: pallet_bags_list::list::Bag<T, I>
    **/
   PalletBagsListListBag: {
     head: 'Option<AccountId32>',
     tail: 'Option<AccountId32>'
   },
   /**
-   * Lookup510: pallet_bags_list::pallet::Error<T, I>
+   * Lookup508: pallet_bags_list::pallet::Error<T, I>
    **/
   PalletBagsListError: {
     _enum: {
@@ -3943,25 +3971,25 @@ export default {
     }
   },
   /**
-   * Lookup511: pallet_bags_list::list::ListError
+   * Lookup509: pallet_bags_list::list::ListError
    **/
   PalletBagsListListListError: {
     _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
   },
   /**
-   * Lookup514: pallet_vesting::Releases
+   * Lookup512: pallet_vesting::Releases
    **/
   PalletVestingReleases: {
     _enum: ['V0', 'V1']
   },
   /**
-   * Lookup515: pallet_vesting::pallet::Error<T>
+   * Lookup513: pallet_vesting::pallet::Error<T>
    **/
   PalletVestingError: {
     _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
   },
   /**
-   * Lookup517: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+   * Lookup515: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32, MaxApprovals>
    **/
   PalletMultisigMultisig: {
     when: 'PalletMultisigTimepoint',
@@ -3970,20 +3998,20 @@ export default {
     approvals: 'Vec<AccountId32>'
   },
   /**
-   * Lookup519: pallet_multisig::pallet::Error<T>
+   * Lookup517: pallet_multisig::pallet::Error<T>
    **/
   PalletMultisigError: {
     _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
   },
   /**
-   * Lookup520: pallet_council::CouncilStageUpdate<BlockNumber>
+   * Lookup518: pallet_council::CouncilStageUpdate<BlockNumber>
    **/
   PalletCouncilCouncilStageUpdate: {
     stage: 'PalletCouncilCouncilStage',
     changedAt: 'u32'
   },
   /**
-   * Lookup521: pallet_council::CouncilStage<BlockNumber>
+   * Lookup519: pallet_council::CouncilStage<BlockNumber>
    **/
   PalletCouncilCouncilStage: {
     _enum: {
@@ -3993,26 +4021,26 @@ export default {
     }
   },
   /**
-   * Lookup522: pallet_council::CouncilStageAnnouncing<BlockNumber>
+   * Lookup520: pallet_council::CouncilStageAnnouncing<BlockNumber>
    **/
   PalletCouncilCouncilStageAnnouncing: {
     candidatesCount: 'u32',
     endsAt: 'u32'
   },
   /**
-   * Lookup523: pallet_council::CouncilStageElection
+   * Lookup521: pallet_council::CouncilStageElection
    **/
   PalletCouncilCouncilStageElection: {
     candidatesCount: 'u32'
   },
   /**
-   * Lookup524: pallet_council::CouncilStageIdle<BlockNumber>
+   * Lookup522: pallet_council::CouncilStageIdle<BlockNumber>
    **/
   PalletCouncilCouncilStageIdle: {
     endsAt: 'u32'
   },
   /**
-   * Lookup526: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+   * Lookup524: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
    **/
   PalletCouncilCouncilMember: {
     stakingAccountId: 'AccountId32',
@@ -4023,7 +4051,7 @@ export default {
     unpaidReward: 'u128'
   },
   /**
-   * Lookup528: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+   * Lookup526: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
    **/
   PalletCouncilCandidate: {
     stakingAccountId: 'AccountId32',
@@ -4034,13 +4062,13 @@ export default {
     noteHash: 'Option<H256>'
   },
   /**
-   * Lookup529: pallet_council::Error<T>
+   * Lookup527: pallet_council::Error<T>
    **/
   PalletCouncilError: {
     _enum: ['ArithmeticError', 'BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
   },
   /**
-   * Lookup530: pallet_referendum::ReferendumStage<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+   * Lookup528: pallet_referendum::ReferendumStage<BlockNumber, bounded_collections::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
    **/
   PalletReferendumReferendumStage: {
     _enum: {
@@ -4050,7 +4078,7 @@ export default {
     }
   },
   /**
-   * Lookup532: pallet_referendum::ReferendumStageVoting<BlockNumber>
+   * Lookup530: pallet_referendum::ReferendumStageVoting<BlockNumber>
    **/
   PalletReferendumReferendumStageVoting: {
     started: 'u32',
@@ -4059,7 +4087,7 @@ export default {
     endsAt: 'u32'
   },
   /**
-   * Lookup533: pallet_referendum::ReferendumStageRevealing<BlockNumber, frame_support::storage::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
+   * Lookup531: pallet_referendum::ReferendumStageRevealing<BlockNumber, bounded_collections::weak_bounded_vec::WeakBoundedVec<pallet_referendum::OptionResult<MemberId, VotePower>, S>>
    **/
   PalletReferendumReferendumStageRevealing: {
     started: 'u32',
@@ -4069,7 +4097,7 @@ export default {
     endsAt: 'u32'
   },
   /**
-   * Lookup534: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+   * Lookup532: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
    **/
   PalletReferendumCastVote: {
     commitment: 'H256',
@@ -4078,13 +4106,13 @@ export default {
     voteFor: 'Option<u64>'
   },
   /**
-   * Lookup535: pallet_referendum::Error<T, I>
+   * Lookup533: pallet_referendum::Error<T, I>
    **/
   PalletReferendumError: {
-    _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden']
+    _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden', 'AccountAlreadyOptedOutOfVoting']
   },
   /**
-   * Lookup536: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
+   * Lookup534: pallet_membership::MembershipObject<sp_core::crypto::AccountId32, primitive_types::H256>
    **/
   PalletMembershipMembershipObject: {
     handleHash: 'H256',
@@ -4094,20 +4122,20 @@ export default {
     invites: 'u32'
   },
   /**
-   * Lookup537: pallet_membership::StakingAccountMemberBinding<MemberId>
+   * Lookup535: pallet_membership::StakingAccountMemberBinding<MemberId>
    **/
   PalletMembershipStakingAccountMemberBinding: {
     memberId: 'u64',
     confirmed: 'bool'
   },
   /**
-   * Lookup538: pallet_membership::Error<T>
+   * Lookup536: pallet_membership::Error<T>
    **/
   PalletMembershipError: {
-    _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift']
+    _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift', 'InsufficientBalanceToCoverPayment']
   },
   /**
-   * Lookup539: pallet_forum::Category<CategoryId, primitive_types::H256, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup537: pallet_forum::Category<CategoryId, primitive_types::H256, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletForumCategory: {
     titleHash: 'H256',
@@ -4120,7 +4148,7 @@ export default {
     stickyThreadIds: 'BTreeSet<u64>'
   },
   /**
-   * Lookup541: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup539: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletForumThread: {
     categoryId: 'u64',
@@ -4129,7 +4157,7 @@ export default {
     numberOfEditablePosts: 'u64'
   },
   /**
-   * Lookup542: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup540: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletForumPost: {
     threadId: 'u64',
@@ -4139,19 +4167,19 @@ export default {
     lastEdited: 'u32'
   },
   /**
-   * Lookup543: pallet_forum::Error<T>
+   * Lookup541: pallet_forum::Error<T>
    **/
   PalletForumError: {
     _enum: ['ArithmeticError', 'OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero', 'MaxNumberOfStickiedThreadsExceeded']
   },
   /**
-   * Lookup544: pallet_constitution::ConstitutionInfo<primitive_types::H256>
+   * Lookup542: pallet_constitution::ConstitutionInfo<primitive_types::H256>
    **/
   PalletConstitutionConstitutionInfo: {
     textHash: 'H256'
   },
   /**
-   * Lookup545: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup543: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletBountyBountyRecord: {
     creationParams: 'PalletBountyBountyParametersBoundedBTreeSet',
@@ -4161,7 +4189,7 @@ export default {
     hasUnpaidOracleReward: 'bool'
   },
   /**
-   * Lookup547: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup545: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletBountyBountyParametersBoundedBTreeSet: {
     oracle: 'PalletBountyBountyActor',
@@ -4173,7 +4201,7 @@ export default {
     fundingType: 'PalletBountyFundingType'
   },
   /**
-   * Lookup548: pallet_bounty::AssuranceContractType<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup546: pallet_bounty::AssuranceContractType<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletBountyAssuranceContractTypeBoundedBTreeSet: {
     _enum: {
@@ -4182,7 +4210,7 @@ export default {
     }
   },
   /**
-   * Lookup549: pallet_bounty::BountyMilestone<BlockNumber>
+   * Lookup547: pallet_bounty::BountyMilestone<BlockNumber>
    **/
   PalletBountyBountyMilestone: {
     _enum: {
@@ -4199,14 +4227,14 @@ export default {
     }
   },
   /**
-   * Lookup551: pallet_bounty::Contribution<T>
+   * Lookup549: pallet_bounty::Contribution<T>
    **/
   PalletBountyContribution: {
     amount: 'u128',
     funderStateBloatBondAmount: 'u128'
   },
   /**
-   * Lookup552: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+   * Lookup550: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
    **/
   PalletBountyEntryRecord: {
     memberId: 'u64',
@@ -4215,13 +4243,19 @@ export default {
     workSubmitted: 'bool'
   },
   /**
-   * Lookup553: pallet_bounty::Error<T>
+   * Lookup551: pallet_bounty::Error<T>
    **/
   PalletBountyError: {
     _enum: ['ArithmeticError', 'MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
   },
   /**
-   * Lookup555: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup552: pallet_joystream_utility::Error<T>
+   **/
+  PalletJoystreamUtilityError: {
+    _enum: ['InsufficientFundsForBudgetUpdate', 'ZeroTokensBurn', 'InsufficientFundsForBurn']
+  },
+  /**
+   * Lookup553: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletContentVideoRecord: {
     inChannel: 'u64',
@@ -4230,7 +4264,7 @@ export default {
     videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
   },
   /**
-   * Lookup556: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
+   * Lookup554: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>, MemberId, AuctionId>
    **/
   PalletContentNftTypesOwnedNft: {
     owner: 'PalletContentNftTypesNftOwner',
@@ -4239,7 +4273,7 @@ export default {
     openAuctionsNonce: 'u64'
   },
   /**
-   * Lookup557: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>>
+   * Lookup555: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>>
    **/
   PalletContentNftTypesTransactionalStatusRecord: {
     _enum: {
@@ -4251,7 +4285,7 @@ export default {
     }
   },
   /**
-   * Lookup558: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup556: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletContentNftTypesEnglishAuctionRecord: {
     startingPrice: 'u128',
@@ -4264,14 +4298,14 @@ export default {
     topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
   },
   /**
-   * Lookup561: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+   * Lookup559: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
    **/
   PalletContentNftTypesEnglishAuctionBid: {
     amount: 'u128',
     bidderId: 'u64'
   },
   /**
-   * Lookup562: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup560: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletContentNftTypesOpenAuctionRecord: {
     startingPrice: 'u128',
@@ -4282,7 +4316,7 @@ export default {
     start: 'u32'
   },
   /**
-   * Lookup563: pallet_content::nft::types::NftOwner<MemberId>
+   * Lookup561: pallet_content::nft::types::NftOwner<MemberId>
    **/
   PalletContentNftTypesNftOwner: {
     _enum: {
@@ -4291,7 +4325,7 @@ export default {
     }
   },
   /**
-   * Lookup566: pallet_content::permissions::curator_group::CuratorGroupRecord<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
+   * Lookup564: pallet_content::permissions::curator_group::CuratorGroupRecord<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::types::iterable_enums::ChannelActionPermission, S>, S>, bounded_collections::bounded_btree_map::BoundedBTreeMap<K, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_content::permissions::curator_group::iterable_enums::ContentModerationAction, S>, S>>
    **/
   PalletContentPermissionsCuratorGroupCuratorGroupRecord: {
     curators: 'BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>',
@@ -4299,7 +4333,7 @@ export default {
     permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>'
   },
   /**
-   * Lookup573: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+   * Lookup571: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
    **/
   PalletContentNftTypesOpenAuctionBidRecord: {
     amount: 'u128',
@@ -4307,13 +4341,13 @@ export default {
     auctionId: 'u64'
   },
   /**
-   * Lookup574: pallet_content::errors::Error<T>
+   * Lookup572: pallet_content::errors::Error<T>
    **/
   PalletContentErrorsError: {
-    _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
+    _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'MaxNumberOfChannelAgentPermissionsExceeded', 'MaxNumberOfPausedFeaturesPerChannelExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'MaxCuratorPermissionsPerLevelExceeded', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales', 'ChannelTransfersBlockedDuringActiveAmm']
   },
   /**
-   * Lookup575: pallet_storage::BagRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
+   * Lookup573: pallet_storage::BagRecord<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, S>>
    **/
   PalletStorageBagRecord: {
     storedBy: 'BTreeSet<u64>',
@@ -4322,7 +4356,7 @@ export default {
     objectsNumber: 'u64'
   },
   /**
-   * Lookup578: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+   * Lookup576: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
    **/
   PalletStorageStorageBucketRecord: {
     operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
@@ -4331,7 +4365,7 @@ export default {
     assignedBags: 'u64'
   },
   /**
-   * Lookup579: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+   * Lookup577: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
    **/
   PalletStorageStorageBucketOperatorStatus: {
     _enum: {
@@ -4341,14 +4375,14 @@ export default {
     }
   },
   /**
-   * Lookup581: pallet_storage::DynamicBagCreationPolicy<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, V, S>>
+   * Lookup579: pallet_storage::DynamicBagCreationPolicy<bounded_collections::bounded_btree_map::BoundedBTreeMap<K, V, S>>
    **/
   PalletStorageDynamicBagCreationPolicy: {
     numberOfStorageBuckets: 'u32',
     families: 'BTreeMap<u64, u32>'
   },
   /**
-   * Lookup584: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup582: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletStorageDataObject: {
     _alias: {
@@ -4360,13 +4394,13 @@ export default {
     ipfsContentId: 'Bytes'
   },
   /**
-   * Lookup585: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+   * Lookup583: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
    **/
   PalletStorageDistributionBucketFamilyRecord: {
     nextDistributionBucketIndex: 'u64'
   },
   /**
-   * Lookup586: pallet_storage::DistributionBucketRecord<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup584: pallet_storage::DistributionBucketRecord<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletStorageDistributionBucketRecord: {
     acceptingNewBags: 'bool',
@@ -4376,13 +4410,13 @@ export default {
     assignedBags: 'u64'
   },
   /**
-   * Lookup589: pallet_storage::Error<T>
+   * Lookup587: pallet_storage::Error<T>
    **/
   PalletStorageError: {
     _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'MaxNumberOfOperatorsPerDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
   },
   /**
-   * Lookup590: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
+   * Lookup588: pallet_project_token::types::AccountData<Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>, bounded_collections::bounded_btree_map::BoundedBTreeMap<pallet_project_token::types::VestingSource, pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, S>>
    **/
   PalletProjectTokenAccountData: {
     vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
@@ -4393,14 +4427,14 @@ export default {
     lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
   },
   /**
-   * Lookup591: pallet_project_token::types::StakingStatus<Balance>
+   * Lookup589: pallet_project_token::types::StakingStatus<Balance>
    **/
   PalletProjectTokenStakingStatus: {
     splitId: 'u32',
     amount: 'u128'
   },
   /**
-   * Lookup593: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+   * Lookup591: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
    **/
   PalletProjectTokenVestingSchedule: {
     linearVestingStartBlock: 'u32',
@@ -4410,7 +4444,7 @@ export default {
     burnedAmount: 'u128'
   },
   /**
-   * Lookup600: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+   * Lookup598: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
    **/
   PalletProjectTokenTokenData: {
     totalSupply: 'u128',
@@ -4418,15 +4452,15 @@ export default {
     nextSaleId: 'u32',
     sale: 'Option<PalletProjectTokenTokenSale>',
     transferPolicy: 'PalletProjectTokenTransferPolicy',
-    symbol: 'H256',
     patronageInfo: 'PalletProjectTokenPatronageData',
     accountsNumber: 'u64',
     revenueSplitRate: 'Permill',
     revenueSplit: 'PalletProjectTokenRevenueSplitState',
-    nextRevenueSplitId: 'u32'
+    nextRevenueSplitId: 'u32',
+    ammCurve: 'Option<PalletProjectTokenAmmCurve>'
   },
   /**
-   * Lookup601: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+   * Lookup599: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
    **/
   PalletProjectTokenRevenueSplitState: {
     _enum: {
@@ -4435,7 +4469,7 @@ export default {
     }
   },
   /**
-   * Lookup602: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+   * Lookup600: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
    **/
   PalletProjectTokenRevenueSplitInfo: {
     allocation: 'u128',
@@ -4443,14 +4477,14 @@ export default {
     dividendsClaimed: 'u128'
   },
   /**
-   * Lookup603: pallet_project_token::types::Timeline<BlockNumber>
+   * Lookup601: pallet_project_token::types::Timeline<BlockNumber>
    **/
   PalletProjectTokenTimeline: {
     start: 'u32',
     duration: 'u32'
   },
   /**
-   * Lookup605: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+   * Lookup603: pallet_project_token::types::PatronageData<Balance, BlockNumber>
    **/
   PalletProjectTokenPatronageData: {
     rate: 'Perquintill',
@@ -4458,13 +4492,13 @@ export default {
     lastUnclaimedPatronageTallyBlock: 'u32'
   },
   /**
-   * Lookup607: pallet_project_token::errors::Error<T>
+   * Lookup606: pallet_project_token::errors::Error<T>
    **/
   PalletProjectTokenErrorsError: {
-    _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
+    _enum: ['ArithmeticError', 'InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'TransferDestinationMemberDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'CannotInitSaleIfAmmIsActive', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount', 'NotInAmmState', 'InvalidCurveParameters', 'DeadlineExpired', 'SlippageToleranceExceeded', 'InsufficientTokenBalance', 'OutstandingAmmProvidedSupplyTooLarge']
   },
   /**
-   * Lookup608: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+   * Lookup607: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
    **/
   PalletProposalsEngineProposal: {
     parameters: 'PalletProposalsEngineProposalParameters',
@@ -4477,7 +4511,7 @@ export default {
     stakingAccountId: 'Option<AccountId32>'
   },
   /**
-   * Lookup609: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+   * Lookup608: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
    **/
   PalletProposalsEngineProposalParameters: {
     votingPeriod: 'u32',
@@ -4490,7 +4524,7 @@ export default {
     constitutionality: 'u32'
   },
   /**
-   * Lookup610: pallet_proposals_engine::types::VotingResults
+   * Lookup609: pallet_proposals_engine::types::VotingResults
    **/
   PalletProposalsEngineVotingResults: {
     abstentions: 'u32',
@@ -4499,13 +4533,13 @@ export default {
     slashes: 'u32'
   },
   /**
-   * Lookup613: pallet_proposals_engine::Error<T>
+   * Lookup612: pallet_proposals_engine::Error<T>
    **/
   PalletProposalsEngineError: {
     _enum: ['ArithmeticError', 'EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember', 'MaxDispatchableCallCodeSizeExceeded']
   },
   /**
-   * Lookup614: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup613: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber, bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletProposalsDiscussionDiscussionThread: {
     activatedAt: 'u32',
@@ -4513,7 +4547,7 @@ export default {
     mode: 'PalletProposalsDiscussionThreadModeBoundedBTreeSet'
   },
   /**
-   * Lookup616: pallet_proposals_discussion::types::ThreadMode<frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>>
+   * Lookup615: pallet_proposals_discussion::types::ThreadMode<bounded_collections::bounded_btree_set::BoundedBTreeSet<T, S>>
    **/
   PalletProposalsDiscussionThreadModeBoundedBTreeSet: {
     _enum: {
@@ -4522,7 +4556,7 @@ export default {
     }
   },
   /**
-   * Lookup617: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
+   * Lookup616: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletProposalsDiscussionDiscussionPost: {
     authorId: 'u64',
@@ -4530,19 +4564,19 @@ export default {
     lastEdited: 'u32'
   },
   /**
-   * Lookup618: pallet_proposals_discussion::Error<T>
+   * Lookup617: pallet_proposals_discussion::Error<T>
    **/
   PalletProposalsDiscussionError: {
     _enum: ['ArithmeticError', 'ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
   },
   /**
-   * Lookup619: pallet_proposals_codex::Error<T>
+   * Lookup618: pallet_proposals_codex::Error<T>
    **/
   PalletProposalsCodexError: {
     _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId', 'ArithmeticError']
   },
   /**
-   * Lookup620: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
+   * Lookup619: pallet_working_group::types::Opening<BlockNumber, Balance, primitive_types::H256>
    **/
   PalletWorkingGroupOpening: {
     openingType: 'PalletWorkingGroupOpeningType',
@@ -4553,7 +4587,7 @@ export default {
     creationStake: 'u128'
   },
   /**
-   * Lookup621: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
+   * Lookup620: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId, primitive_types::H256>
    **/
   PalletWorkingGroupJobApplication: {
     roleAccountId: 'AccountId32',
@@ -4564,7 +4598,7 @@ export default {
     openingId: 'u64'
   },
   /**
-   * Lookup622: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+   * Lookup621: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
    **/
   PalletWorkingGroupGroupWorker: {
     memberId: 'u64',
@@ -4578,13 +4612,13 @@ export default {
     createdAt: 'u32'
   },
   /**
-   * Lookup623: pallet_working_group::errors::Error<T, I>
+   * Lookup622: pallet_working_group::errors::Error<T, I>
    **/
   PalletWorkingGroupErrorsError: {
     _enum: ['ArithmeticError', 'StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
   },
   /**
-   * Lookup633: sp_runtime::MultiSignature
+   * Lookup632: sp_runtime::MultiSignature
    **/
   SpRuntimeMultiSignature: {
     _enum: {
@@ -4594,39 +4628,39 @@ export default {
     }
   },
   /**
-   * Lookup634: sp_core::ecdsa::Signature
+   * Lookup633: sp_core::ecdsa::Signature
    **/
   SpCoreEcdsaSignature: '[u8;65]',
   /**
-   * Lookup637: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+   * Lookup636: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
    **/
   FrameSystemExtensionsCheckNonZeroSender: 'Null',
   /**
-   * Lookup638: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+   * Lookup637: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
    **/
   FrameSystemExtensionsCheckSpecVersion: 'Null',
   /**
-   * Lookup639: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+   * Lookup638: frame_system::extensions::check_tx_version::CheckTxVersion<T>
    **/
   FrameSystemExtensionsCheckTxVersion: 'Null',
   /**
-   * Lookup640: frame_system::extensions::check_genesis::CheckGenesis<T>
+   * Lookup639: frame_system::extensions::check_genesis::CheckGenesis<T>
    **/
   FrameSystemExtensionsCheckGenesis: 'Null',
   /**
-   * Lookup643: frame_system::extensions::check_nonce::CheckNonce<T>
+   * Lookup642: frame_system::extensions::check_nonce::CheckNonce<T>
    **/
   FrameSystemExtensionsCheckNonce: 'Compact<u32>',
   /**
-   * Lookup644: frame_system::extensions::check_weight::CheckWeight<T>
+   * Lookup643: frame_system::extensions::check_weight::CheckWeight<T>
    **/
   FrameSystemExtensionsCheckWeight: 'Null',
   /**
-   * Lookup645: pallet_transaction_payment::ChargeTransactionPayment<T>
+   * Lookup644: pallet_transaction_payment::ChargeTransactionPayment<T>
    **/
   PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
   /**
-   * Lookup646: joystream_node_runtime::Runtime
+   * Lookup645: joystream_node_runtime::Runtime
    **/
   JoystreamNodeRuntimeRuntime: 'Null'
 };
diff --git a/node_modules/@joystream/types/src/augment/registry.ts b/node_modules/@joystream/types/src/augment/registry.ts
index cdcf544..a4d96c1 100644
--- a/node_modules/@joystream/types/src/augment/registry.ts
+++ b/node_modules/@joystream/types/src/augment/registry.ts
@@ -1,7 +1,7 @@
 // Auto-generated via `yarn polkadot-types-from-defs`, do not edit
 /* eslint-disable */
 
-import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletSudoCall, PalletSudoError, PalletSudoEvent, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchDispatchClass, FrameSupportDispatchDispatchInfo, FrameSupportDispatchPays, FrameSupportDispatchPerDispatchClassU32, FrameSupportDispatchPerDispatchClassWeight, FrameSupportDispatchPerDispatchClassWeightsPerClass, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReserveData, PalletBountyAssuranceContractTypeBTreeSet, PalletBountyAssuranceContractTypeBoundedBTreeSet, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParametersBTreeSet, PalletBountyBountyParametersBoundedBTreeSet, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonFundingRequestParameters, PalletCommonMerkleTreeProofElementRecord, PalletCommonMerkleTreeSide, PalletCommonWorkingGroupIterableEnumsWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionRawEvent, PalletContentCall, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentIterableEnumsChannelActionPermission, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupCuratorGroupRecord, PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction, PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletJoystreamUtilityCall, PalletJoystreamUtilityError, PalletJoystreamUtilityRawEvent, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenAmmCurve, PalletProjectTokenAmmParams, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadModeBTreeSet, PalletProposalsDiscussionThreadModeBoundedBTreeSet, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentEvent, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpArithmeticArithmeticError, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion, SpWeightsRuntimeDbWeight, SpWeightsWeightV2Weight } from '@polkadot/types/lookup';
 
 declare module '@polkadot/types/types/registry' {
   export interface InterfaceTypes {
@@ -9,15 +9,14 @@ declare module '@polkadot/types/types/registry' {
     FinalityGrandpaEquivocationPrevote: FinalityGrandpaEquivocationPrevote;
     FinalityGrandpaPrecommit: FinalityGrandpaPrecommit;
     FinalityGrandpaPrevote: FinalityGrandpaPrevote;
+    FrameSupportDispatchDispatchClass: FrameSupportDispatchDispatchClass;
+    FrameSupportDispatchDispatchInfo: FrameSupportDispatchDispatchInfo;
+    FrameSupportDispatchPays: FrameSupportDispatchPays;
+    FrameSupportDispatchPerDispatchClassU32: FrameSupportDispatchPerDispatchClassU32;
+    FrameSupportDispatchPerDispatchClassWeight: FrameSupportDispatchPerDispatchClassWeight;
+    FrameSupportDispatchPerDispatchClassWeightsPerClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
     FrameSupportDispatchRawOrigin: FrameSupportDispatchRawOrigin;
     FrameSupportTokensMiscBalanceStatus: FrameSupportTokensMiscBalanceStatus;
-    FrameSupportWeightsDispatchClass: FrameSupportWeightsDispatchClass;
-    FrameSupportWeightsDispatchInfo: FrameSupportWeightsDispatchInfo;
-    FrameSupportWeightsPays: FrameSupportWeightsPays;
-    FrameSupportWeightsPerDispatchClassU32: FrameSupportWeightsPerDispatchClassU32;
-    FrameSupportWeightsPerDispatchClassU64: FrameSupportWeightsPerDispatchClassU64;
-    FrameSupportWeightsPerDispatchClassWeightsPerClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
-    FrameSupportWeightsRuntimeDbWeight: FrameSupportWeightsRuntimeDbWeight;
     FrameSystemAccountInfo: FrameSystemAccountInfo;
     FrameSystemCall: FrameSystemCall;
     FrameSystemError: FrameSystemError;
@@ -38,9 +37,6 @@ declare module '@polkadot/types/types/registry' {
     JoystreamNodeRuntimeOriginCaller: JoystreamNodeRuntimeOriginCaller;
     JoystreamNodeRuntimeRuntime: JoystreamNodeRuntimeRuntime;
     JoystreamNodeRuntimeSessionKeys: JoystreamNodeRuntimeSessionKeys;
-    PalletAuthorshipCall: PalletAuthorshipCall;
-    PalletAuthorshipError: PalletAuthorshipError;
-    PalletAuthorshipUncleEntryItem: PalletAuthorshipUncleEntryItem;
     PalletBabeCall: PalletBabeCall;
     PalletBabeError: PalletBabeError;
     PalletBagsListCall: PalletBagsListCall;
@@ -55,7 +51,6 @@ declare module '@polkadot/types/types/registry' {
     PalletBalancesError: PalletBalancesError;
     PalletBalancesEvent: PalletBalancesEvent;
     PalletBalancesReasons: PalletBalancesReasons;
-    PalletBalancesReleases: PalletBalancesReleases;
     PalletBalancesReserveData: PalletBalancesReserveData;
     PalletBountyAssuranceContractTypeBTreeSet: PalletBountyAssuranceContractTypeBTreeSet;
     PalletBountyAssuranceContractTypeBoundedBTreeSet: PalletBountyAssuranceContractTypeBoundedBTreeSet;
@@ -160,6 +155,9 @@ declare module '@polkadot/types/types/registry' {
     PalletImOnlineHeartbeat: PalletImOnlineHeartbeat;
     PalletImOnlineSr25519AppSr25519Public: PalletImOnlineSr25519AppSr25519Public;
     PalletImOnlineSr25519AppSr25519Signature: PalletImOnlineSr25519AppSr25519Signature;
+    PalletJoystreamUtilityCall: PalletJoystreamUtilityCall;
+    PalletJoystreamUtilityError: PalletJoystreamUtilityError;
+    PalletJoystreamUtilityRawEvent: PalletJoystreamUtilityRawEvent;
     PalletMembershipBuyMembershipParameters: PalletMembershipBuyMembershipParameters;
     PalletMembershipCall: PalletMembershipCall;
     PalletMembershipCreateMemberParameters: PalletMembershipCreateMemberParameters;
@@ -176,6 +174,8 @@ declare module '@polkadot/types/types/registry' {
     PalletMultisigTimepoint: PalletMultisigTimepoint;
     PalletOffencesEvent: PalletOffencesEvent;
     PalletProjectTokenAccountData: PalletProjectTokenAccountData;
+    PalletProjectTokenAmmCurve: PalletProjectTokenAmmCurve;
+    PalletProjectTokenAmmParams: PalletProjectTokenAmmParams;
     PalletProjectTokenCall: PalletProjectTokenCall;
     PalletProjectTokenErrorsError: PalletProjectTokenErrorsError;
     PalletProjectTokenEventsRawEvent: PalletProjectTokenEventsRawEvent;
@@ -255,7 +255,6 @@ declare module '@polkadot/types/types/registry' {
     PalletStakingPalletConfigOpU32: PalletStakingPalletConfigOpU32;
     PalletStakingPalletError: PalletStakingPalletError;
     PalletStakingPalletEvent: PalletStakingPalletEvent;
-    PalletStakingReleases: PalletStakingReleases;
     PalletStakingRewardDestination: PalletStakingRewardDestination;
     PalletStakingSlashingSlashingSpans: PalletStakingSlashingSlashingSpans;
     PalletStakingSlashingSpanRecord: PalletStakingSlashingSpanRecord;
@@ -282,16 +281,13 @@ declare module '@polkadot/types/types/registry' {
     PalletStorageStorageBucketRecord: PalletStorageStorageBucketRecord;
     PalletStorageUploadParametersRecord: PalletStorageUploadParametersRecord;
     PalletStorageVoucher: PalletStorageVoucher;
-    PalletSudoCall: PalletSudoCall;
-    PalletSudoError: PalletSudoError;
-    PalletSudoEvent: PalletSudoEvent;
     PalletTimestampCall: PalletTimestampCall;
     PalletTransactionPaymentChargeTransactionPayment: PalletTransactionPaymentChargeTransactionPayment;
+    PalletTransactionPaymentEvent: PalletTransactionPaymentEvent;
     PalletTransactionPaymentReleases: PalletTransactionPaymentReleases;
     PalletUtilityCall: PalletUtilityCall;
     PalletUtilityError: PalletUtilityError;
     PalletUtilityEvent: PalletUtilityEvent;
-    PalletUtilityRawEvent: PalletUtilityRawEvent;
     PalletVestingCall: PalletVestingCall;
     PalletVestingError: PalletVestingError;
     PalletVestingEvent: PalletVestingEvent;
@@ -325,6 +321,7 @@ declare module '@polkadot/types/types/registry' {
     PalletWorkingGroupRewardPaymentType: PalletWorkingGroupRewardPaymentType;
     PalletWorkingGroupStakeParameters: PalletWorkingGroupStakeParameters;
     PalletWorkingGroupStakePolicy: PalletWorkingGroupStakePolicy;
+    SpArithmeticArithmeticError: SpArithmeticArithmeticError;
     SpAuthorityDiscoveryAppPublic: SpAuthorityDiscoveryAppPublic;
     SpConsensusBabeAllowedSlots: SpConsensusBabeAllowedSlots;
     SpConsensusBabeAppPublic: SpConsensusBabeAppPublic;
@@ -349,7 +346,6 @@ declare module '@polkadot/types/types/registry' {
     SpFinalityGrandpaEquivocationProof: SpFinalityGrandpaEquivocationProof;
     SpNposElectionsElectionScore: SpNposElectionsElectionScore;
     SpNposElectionsSupport: SpNposElectionsSupport;
-    SpRuntimeArithmeticError: SpRuntimeArithmeticError;
     SpRuntimeBlakeTwo256: SpRuntimeBlakeTwo256;
     SpRuntimeDigest: SpRuntimeDigest;
     SpRuntimeDigestDigestItem: SpRuntimeDigestDigestItem;
@@ -362,5 +358,7 @@ declare module '@polkadot/types/types/registry' {
     SpSessionMembershipProof: SpSessionMembershipProof;
     SpStakingOffenceOffenceDetails: SpStakingOffenceOffenceDetails;
     SpVersionRuntimeVersion: SpVersionRuntimeVersion;
+    SpWeightsRuntimeDbWeight: SpWeightsRuntimeDbWeight;
+    SpWeightsWeightV2Weight: SpWeightsWeightV2Weight;
   } // InterfaceTypes
 } // declare module
diff --git a/node_modules/@joystream/types/src/augment/types-lookup.ts b/node_modules/@joystream/types/src/augment/types-lookup.ts
index c035e7d..4af54c4 100644
--- a/node_modules/@joystream/types/src/augment/types-lookup.ts
+++ b/node_modules/@joystream/types/src/augment/types-lookup.ts
@@ -2,7 +2,7 @@
 /* eslint-disable */
 
 declare module '@polkadot/types/lookup' {
-  import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+  import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
   import type { ITuple } from '@polkadot/types-codec/types';
   import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill, Perquintill } from '@polkadot/types/interfaces/runtime';
   import type { Event } from '@polkadot/types/interfaces/system';
@@ -24,19 +24,25 @@ declare module '@polkadot/types/lookup' {
     readonly feeFrozen: u128;
   }
 
-  /** @name FrameSupportWeightsPerDispatchClassU64 (7) */
-  export interface FrameSupportWeightsPerDispatchClassU64 extends Struct {
-    readonly normal: u64;
-    readonly operational: u64;
-    readonly mandatory: u64;
+  /** @name FrameSupportDispatchPerDispatchClassWeight (7) */
+  export interface FrameSupportDispatchPerDispatchClassWeight extends Struct {
+    readonly normal: SpWeightsWeightV2Weight;
+    readonly operational: SpWeightsWeightV2Weight;
+    readonly mandatory: SpWeightsWeightV2Weight;
   }
 
-  /** @name SpRuntimeDigest (11) */
+  /** @name SpWeightsWeightV2Weight (8) */
+  export interface SpWeightsWeightV2Weight extends Struct {
+    readonly refTime: Compact<u64>;
+    readonly proofSize: Compact<u64>;
+  }
+
+  /** @name SpRuntimeDigest (13) */
   export interface SpRuntimeDigest extends Struct {
     readonly logs: Vec<SpRuntimeDigestDigestItem>;
   }
 
-  /** @name SpRuntimeDigestDigestItem (13) */
+  /** @name SpRuntimeDigestDigestItem (15) */
   export interface SpRuntimeDigestDigestItem extends Enum {
     readonly isOther: boolean;
     readonly asOther: Bytes;
@@ -50,23 +56,23 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Other' | 'Consensus' | 'Seal' | 'PreRuntime' | 'RuntimeEnvironmentUpdated';
   }
 
-  /** @name FrameSystemEventRecord (16) */
+  /** @name FrameSystemEventRecord (18) */
   export interface FrameSystemEventRecord extends Struct {
     readonly phase: FrameSystemPhase;
     readonly event: Event;
     readonly topics: Vec<H256>;
   }
 
-  /** @name FrameSystemEvent (18) */
+  /** @name FrameSystemEvent (20) */
   export interface FrameSystemEvent extends Enum {
     readonly isExtrinsicSuccess: boolean;
     readonly asExtrinsicSuccess: {
-      readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
+      readonly dispatchInfo: FrameSupportDispatchDispatchInfo;
     } & Struct;
     readonly isExtrinsicFailed: boolean;
     readonly asExtrinsicFailed: {
       readonly dispatchError: SpRuntimeDispatchError;
-      readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
+      readonly dispatchInfo: FrameSupportDispatchDispatchInfo;
     } & Struct;
     readonly isCodeUpdated: boolean;
     readonly isNewAccount: boolean;
@@ -85,29 +91,29 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ExtrinsicSuccess' | 'ExtrinsicFailed' | 'CodeUpdated' | 'NewAccount' | 'KilledAccount' | 'Remarked';
   }
 
-  /** @name FrameSupportWeightsDispatchInfo (19) */
-  export interface FrameSupportWeightsDispatchInfo extends Struct {
-    readonly weight: u64;
-    readonly class: FrameSupportWeightsDispatchClass;
-    readonly paysFee: FrameSupportWeightsPays;
+  /** @name FrameSupportDispatchDispatchInfo (21) */
+  export interface FrameSupportDispatchDispatchInfo extends Struct {
+    readonly weight: SpWeightsWeightV2Weight;
+    readonly class: FrameSupportDispatchDispatchClass;
+    readonly paysFee: FrameSupportDispatchPays;
   }
 
-  /** @name FrameSupportWeightsDispatchClass (20) */
-  export interface FrameSupportWeightsDispatchClass extends Enum {
+  /** @name FrameSupportDispatchDispatchClass (22) */
+  export interface FrameSupportDispatchDispatchClass extends Enum {
     readonly isNormal: boolean;
     readonly isOperational: boolean;
     readonly isMandatory: boolean;
     readonly type: 'Normal' | 'Operational' | 'Mandatory';
   }
 
-  /** @name FrameSupportWeightsPays (21) */
-  export interface FrameSupportWeightsPays extends Enum {
+  /** @name FrameSupportDispatchPays (23) */
+  export interface FrameSupportDispatchPays extends Enum {
     readonly isYes: boolean;
     readonly isNo: boolean;
     readonly type: 'Yes' | 'No';
   }
 
-  /** @name SpRuntimeDispatchError (22) */
+  /** @name SpRuntimeDispatchError (24) */
   export interface SpRuntimeDispatchError extends Enum {
     readonly isOther: boolean;
     readonly isCannotLookup: boolean;
@@ -120,19 +126,22 @@ declare module '@polkadot/types/lookup' {
     readonly isToken: boolean;
     readonly asToken: SpRuntimeTokenError;
     readonly isArithmetic: boolean;
-    readonly asArithmetic: SpRuntimeArithmeticError;
+    readonly asArithmetic: SpArithmeticArithmeticError;
     readonly isTransactional: boolean;
     readonly asTransactional: SpRuntimeTransactionalError;
-    readonly type: 'Other' | 'CannotLookup' | 'BadOrigin' | 'Module' | 'ConsumerRemaining' | 'NoProviders' | 'TooManyConsumers' | 'Token' | 'Arithmetic' | 'Transactional';
+    readonly isExhausted: boolean;
+    readonly isCorruption: boolean;
+    readonly isUnavailable: boolean;
+    readonly type: 'Other' | 'CannotLookup' | 'BadOrigin' | 'Module' | 'ConsumerRemaining' | 'NoProviders' | 'TooManyConsumers' | 'Token' | 'Arithmetic' | 'Transactional' | 'Exhausted' | 'Corruption' | 'Unavailable';
   }
 
-  /** @name SpRuntimeModuleError (23) */
+  /** @name SpRuntimeModuleError (25) */
   export interface SpRuntimeModuleError extends Struct {
     readonly index: u8;
     readonly error: U8aFixed;
   }
 
-  /** @name SpRuntimeTokenError (24) */
+  /** @name SpRuntimeTokenError (26) */
   export interface SpRuntimeTokenError extends Enum {
     readonly isNoFunds: boolean;
     readonly isWouldDie: boolean;
@@ -144,22 +153,22 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NoFunds' | 'WouldDie' | 'BelowMinimum' | 'CannotCreate' | 'UnknownAsset' | 'Frozen' | 'Unsupported';
   }
 
-  /** @name SpRuntimeArithmeticError (25) */
-  export interface SpRuntimeArithmeticError extends Enum {
+  /** @name SpArithmeticArithmeticError (27) */
+  export interface SpArithmeticArithmeticError extends Enum {
     readonly isUnderflow: boolean;
     readonly isOverflow: boolean;
     readonly isDivisionByZero: boolean;
     readonly type: 'Underflow' | 'Overflow' | 'DivisionByZero';
   }
 
-  /** @name SpRuntimeTransactionalError (26) */
+  /** @name SpRuntimeTransactionalError (28) */
   export interface SpRuntimeTransactionalError extends Enum {
     readonly isLimitReached: boolean;
     readonly isNoLayer: boolean;
     readonly type: 'LimitReached' | 'NoLayer';
   }
 
-  /** @name PalletUtilityEvent (27) */
+  /** @name PalletUtilityEvent (29) */
   export interface PalletUtilityEvent extends Enum {
     readonly isBatchInterrupted: boolean;
     readonly asBatchInterrupted: {
@@ -180,7 +189,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'BatchInterrupted' | 'BatchCompleted' | 'BatchCompletedWithErrors' | 'ItemCompleted' | 'ItemFailed' | 'DispatchedAs';
   }
 
-  /** @name PalletBalancesEvent (30) */
+  /** @name PalletBalancesEvent (32) */
   export interface PalletBalancesEvent extends Enum {
     readonly isEndowed: boolean;
     readonly asEndowed: {
@@ -239,24 +248,38 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Endowed' | 'DustLost' | 'Transfer' | 'BalanceSet' | 'Reserved' | 'Unreserved' | 'ReserveRepatriated' | 'Deposit' | 'Withdraw' | 'Slashed';
   }
 
-  /** @name FrameSupportTokensMiscBalanceStatus (31) */
+  /** @name FrameSupportTokensMiscBalanceStatus (33) */
   export interface FrameSupportTokensMiscBalanceStatus extends Enum {
     readonly isFree: boolean;
     readonly isReserved: boolean;
     readonly type: 'Free' | 'Reserved';
   }
 
-  /** @name PalletElectionProviderMultiPhaseEvent (32) */
+  /** @name PalletTransactionPaymentEvent (34) */
+  export interface PalletTransactionPaymentEvent extends Enum {
+    readonly isTransactionFeePaid: boolean;
+    readonly asTransactionFeePaid: {
+      readonly who: AccountId32;
+      readonly actualFee: u128;
+      readonly tip: u128;
+    } & Struct;
+    readonly type: 'TransactionFeePaid';
+  }
+
+  /** @name PalletElectionProviderMultiPhaseEvent (35) */
   export interface PalletElectionProviderMultiPhaseEvent extends Enum {
     readonly isSolutionStored: boolean;
     readonly asSolutionStored: {
-      readonly electionCompute: PalletElectionProviderMultiPhaseElectionCompute;
+      readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
+      readonly origin: Option<AccountId32>;
       readonly prevEjected: bool;
     } & Struct;
     readonly isElectionFinalized: boolean;
     readonly asElectionFinalized: {
-      readonly electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>;
+      readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
+      readonly score: SpNposElectionsElectionScore;
     } & Struct;
+    readonly isElectionFailed: boolean;
     readonly isRewarded: boolean;
     readonly asRewarded: {
       readonly account: AccountId32;
@@ -267,18 +290,16 @@ declare module '@polkadot/types/lookup' {
       readonly account: AccountId32;
       readonly value: u128;
     } & Struct;
-    readonly isSignedPhaseStarted: boolean;
-    readonly asSignedPhaseStarted: {
+    readonly isPhaseTransitioned: boolean;
+    readonly asPhaseTransitioned: {
+      readonly from: PalletElectionProviderMultiPhasePhase;
+      readonly to: PalletElectionProviderMultiPhasePhase;
       readonly round: u32;
     } & Struct;
-    readonly isUnsignedPhaseStarted: boolean;
-    readonly asUnsignedPhaseStarted: {
-      readonly round: u32;
-    } & Struct;
-    readonly type: 'SolutionStored' | 'ElectionFinalized' | 'Rewarded' | 'Slashed' | 'SignedPhaseStarted' | 'UnsignedPhaseStarted';
+    readonly type: 'SolutionStored' | 'ElectionFinalized' | 'ElectionFailed' | 'Rewarded' | 'Slashed' | 'PhaseTransitioned';
   }
 
-  /** @name PalletElectionProviderMultiPhaseElectionCompute (33) */
+  /** @name PalletElectionProviderMultiPhaseElectionCompute (36) */
   export interface PalletElectionProviderMultiPhaseElectionCompute extends Enum {
     readonly isOnChain: boolean;
     readonly isSigned: boolean;
@@ -288,42 +309,110 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OnChain' | 'Signed' | 'Unsigned' | 'Fallback' | 'Emergency';
   }
 
-  /** @name PalletStakingPalletEvent (36) */
+  /** @name SpNposElectionsElectionScore (39) */
+  export interface SpNposElectionsElectionScore extends Struct {
+    readonly minimalStake: u128;
+    readonly sumStake: u128;
+    readonly sumStakeSquared: u128;
+  }
+
+  /** @name PalletElectionProviderMultiPhasePhase (40) */
+  export interface PalletElectionProviderMultiPhasePhase extends Enum {
+    readonly isOff: boolean;
+    readonly isSigned: boolean;
+    readonly isUnsigned: boolean;
+    readonly asUnsigned: ITuple<[bool, u32]>;
+    readonly isEmergency: boolean;
+    readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
+  }
+
+  /** @name PalletStakingPalletEvent (42) */
   export interface PalletStakingPalletEvent extends Enum {
     readonly isEraPaid: boolean;
-    readonly asEraPaid: ITuple<[u32, u128, u128]>;
+    readonly asEraPaid: {
+      readonly eraIndex: u32;
+      readonly validatorPayout: u128;
+      readonly remainder: u128;
+    } & Struct;
     readonly isRewarded: boolean;
-    readonly asRewarded: ITuple<[AccountId32, u128]>;
+    readonly asRewarded: {
+      readonly stash: AccountId32;
+      readonly amount: u128;
+    } & Struct;
     readonly isSlashed: boolean;
-    readonly asSlashed: ITuple<[AccountId32, u128]>;
+    readonly asSlashed: {
+      readonly staker: AccountId32;
+      readonly amount: u128;
+    } & Struct;
+    readonly isSlashReported: boolean;
+    readonly asSlashReported: {
+      readonly validator: AccountId32;
+      readonly fraction: Perbill;
+      readonly slashEra: u32;
+    } & Struct;
     readonly isOldSlashingReportDiscarded: boolean;
-    readonly asOldSlashingReportDiscarded: u32;
+    readonly asOldSlashingReportDiscarded: {
+      readonly sessionIndex: u32;
+    } & Struct;
     readonly isStakersElected: boolean;
     readonly isBonded: boolean;
-    readonly asBonded: ITuple<[AccountId32, u128]>;
+    readonly asBonded: {
+      readonly stash: AccountId32;
+      readonly amount: u128;
+    } & Struct;
     readonly isUnbonded: boolean;
-    readonly asUnbonded: ITuple<[AccountId32, u128]>;
+    readonly asUnbonded: {
+      readonly stash: AccountId32;
+      readonly amount: u128;
+    } & Struct;
     readonly isWithdrawn: boolean;
-    readonly asWithdrawn: ITuple<[AccountId32, u128]>;
+    readonly asWithdrawn: {
+      readonly stash: AccountId32;
+      readonly amount: u128;
+    } & Struct;
     readonly isKicked: boolean;
-    readonly asKicked: ITuple<[AccountId32, AccountId32]>;
+    readonly asKicked: {
+      readonly nominator: AccountId32;
+      readonly stash: AccountId32;
+    } & Struct;
     readonly isStakingElectionFailed: boolean;
     readonly isChilled: boolean;
-    readonly asChilled: AccountId32;
+    readonly asChilled: {
+      readonly stash: AccountId32;
+    } & Struct;
     readonly isPayoutStarted: boolean;
-    readonly asPayoutStarted: ITuple<[u32, AccountId32]>;
+    readonly asPayoutStarted: {
+      readonly eraIndex: u32;
+      readonly validatorStash: AccountId32;
+    } & Struct;
     readonly isValidatorPrefsSet: boolean;
-    readonly asValidatorPrefsSet: ITuple<[AccountId32, PalletStakingValidatorPrefs]>;
-    readonly type: 'EraPaid' | 'Rewarded' | 'Slashed' | 'OldSlashingReportDiscarded' | 'StakersElected' | 'Bonded' | 'Unbonded' | 'Withdrawn' | 'Kicked' | 'StakingElectionFailed' | 'Chilled' | 'PayoutStarted' | 'ValidatorPrefsSet';
+    readonly asValidatorPrefsSet: {
+      readonly stash: AccountId32;
+      readonly prefs: PalletStakingValidatorPrefs;
+    } & Struct;
+    readonly isForceEra: boolean;
+    readonly asForceEra: {
+      readonly mode: PalletStakingForcing;
+    } & Struct;
+    readonly type: 'EraPaid' | 'Rewarded' | 'Slashed' | 'SlashReported' | 'OldSlashingReportDiscarded' | 'StakersElected' | 'Bonded' | 'Unbonded' | 'Withdrawn' | 'Kicked' | 'StakingElectionFailed' | 'Chilled' | 'PayoutStarted' | 'ValidatorPrefsSet' | 'ForceEra';
   }
 
-  /** @name PalletStakingValidatorPrefs (37) */
+  /** @name PalletStakingValidatorPrefs (44) */
   export interface PalletStakingValidatorPrefs extends Struct {
     readonly commission: Compact<Perbill>;
     readonly blocked: bool;
   }
 
-  /** @name PalletSessionEvent (40) */
+  /** @name PalletStakingForcing (46) */
+  export interface PalletStakingForcing extends Enum {
+    readonly isNotForcing: boolean;
+    readonly isForceNew: boolean;
+    readonly isForceNone: boolean;
+    readonly isForceAlways: boolean;
+    readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
+  }
+
+  /** @name PalletSessionEvent (47) */
   export interface PalletSessionEvent extends Enum {
     readonly isNewSession: boolean;
     readonly asNewSession: {
@@ -332,7 +421,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NewSession';
   }
 
-  /** @name PalletGrandpaEvent (41) */
+  /** @name PalletGrandpaEvent (48) */
   export interface PalletGrandpaEvent extends Enum {
     readonly isNewAuthorities: boolean;
     readonly asNewAuthorities: {
@@ -343,13 +432,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NewAuthorities' | 'Paused' | 'Resumed';
   }
 
-  /** @name SpFinalityGrandpaAppPublic (44) */
+  /** @name SpFinalityGrandpaAppPublic (51) */
   export interface SpFinalityGrandpaAppPublic extends SpCoreEd25519Public {}
 
-  /** @name SpCoreEd25519Public (45) */
+  /** @name SpCoreEd25519Public (52) */
   export interface SpCoreEd25519Public extends U8aFixed {}
 
-  /** @name PalletImOnlineEvent (46) */
+  /** @name PalletImOnlineEvent (53) */
   export interface PalletImOnlineEvent extends Enum {
     readonly isHeartbeatReceived: boolean;
     readonly asHeartbeatReceived: {
@@ -363,26 +452,26 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'HeartbeatReceived' | 'AllGood' | 'SomeOffline';
   }
 
-  /** @name PalletImOnlineSr25519AppSr25519Public (47) */
+  /** @name PalletImOnlineSr25519AppSr25519Public (54) */
   export interface PalletImOnlineSr25519AppSr25519Public extends SpCoreSr25519Public {}
 
-  /** @name SpCoreSr25519Public (48) */
+  /** @name SpCoreSr25519Public (55) */
   export interface SpCoreSr25519Public extends U8aFixed {}
 
-  /** @name PalletStakingExposure (51) */
+  /** @name PalletStakingExposure (58) */
   export interface PalletStakingExposure extends Struct {
     readonly total: Compact<u128>;
     readonly own: Compact<u128>;
     readonly others: Vec<PalletStakingIndividualExposure>;
   }
 
-  /** @name PalletStakingIndividualExposure (54) */
+  /** @name PalletStakingIndividualExposure (61) */
   export interface PalletStakingIndividualExposure extends Struct {
     readonly who: AccountId32;
     readonly value: Compact<u128>;
   }
 
-  /** @name PalletOffencesEvent (55) */
+  /** @name PalletOffencesEvent (62) */
   export interface PalletOffencesEvent extends Enum {
     readonly isOffence: boolean;
     readonly asOffence: {
@@ -392,24 +481,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Offence';
   }
 
-  /** @name PalletSudoEvent (57) */
-  export interface PalletSudoEvent extends Enum {
-    readonly isSudid: boolean;
-    readonly asSudid: {
-      readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
-    } & Struct;
-    readonly isKeyChanged: boolean;
-    readonly asKeyChanged: {
-      readonly oldSudoer: Option<AccountId32>;
-    } & Struct;
-    readonly isSudoAsDone: boolean;
-    readonly asSudoAsDone: {
-      readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
-    } & Struct;
-    readonly type: 'Sudid' | 'KeyChanged' | 'SudoAsDone';
-  }
-
-  /** @name PalletBagsListEvent (59) */
+  /** @name PalletBagsListEvent (64) */
   export interface PalletBagsListEvent extends Enum {
     readonly isRebagged: boolean;
     readonly asRebagged: {
@@ -425,7 +497,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Rebagged' | 'ScoreUpdated';
   }
 
-  /** @name PalletVestingEvent (60) */
+  /** @name PalletVestingEvent (65) */
   export interface PalletVestingEvent extends Enum {
     readonly isVestingUpdated: boolean;
     readonly asVestingUpdated: {
@@ -439,7 +511,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'VestingUpdated' | 'VestingCompleted';
   }
 
-  /** @name PalletMultisigEvent (61) */
+  /** @name PalletMultisigEvent (66) */
   export interface PalletMultisigEvent extends Enum {
     readonly isNewMultisig: boolean;
     readonly asNewMultisig: {
@@ -472,13 +544,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
   }
 
-  /** @name PalletMultisigTimepoint (62) */
+  /** @name PalletMultisigTimepoint (67) */
   export interface PalletMultisigTimepoint extends Struct {
     readonly height: u32;
     readonly index: u32;
   }
 
-  /** @name PalletCouncilRawEvent (63) */
+  /** @name PalletCouncilRawEvent (68) */
   export interface PalletCouncilRawEvent extends Enum {
     readonly isAnnouncingPeriodStarted: boolean;
     readonly asAnnouncingPeriodStarted: u32;
@@ -521,7 +593,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AnnouncingPeriodStarted' | 'NotEnoughCandidates' | 'VotingPeriodStarted' | 'NewCandidate' | 'NewCouncilElected' | 'NewCouncilNotElected' | 'CandidacyStakeRelease' | 'CandidacyWithdraw' | 'CandidacyNoteSet' | 'RewardPayment' | 'BudgetBalanceSet' | 'BudgetRefill' | 'BudgetRefillPlanned' | 'BudgetIncrementUpdated' | 'CouncilorRewardUpdated' | 'RequestFunded' | 'CouncilBudgetFunded' | 'CouncilorRemarked' | 'CandidateRemarked';
   }
 
-  /** @name PalletReferendumRawEvent (65) */
+  /** @name PalletReferendumRawEvent (70) */
   export interface PalletReferendumRawEvent extends Enum {
     readonly isReferendumStarted: boolean;
     readonly asReferendumStarted: ITuple<[u32, u32]>;
@@ -537,22 +609,24 @@ declare module '@polkadot/types/lookup' {
     readonly asVoteRevealed: ITuple<[AccountId32, u64, Bytes]>;
     readonly isStakeReleased: boolean;
     readonly asStakeReleased: AccountId32;
-    readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased';
+    readonly isAccountOptedOutOfVoting: boolean;
+    readonly asAccountOptedOutOfVoting: AccountId32;
+    readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased' | 'AccountOptedOutOfVoting';
   }
 
-  /** @name PalletReferendumInstance1 (66) */
+  /** @name PalletReferendumInstance1 (71) */
   export type PalletReferendumInstance1 = Null;
 
-  /** @name PalletReferendumOptionResult (68) */
+  /** @name PalletReferendumOptionResult (73) */
   export interface PalletReferendumOptionResult extends Struct {
     readonly optionId: u64;
     readonly votePower: u128;
   }
 
-  /** @name PalletMembershipRawEvent (69) */
+  /** @name PalletMembershipRawEvent (74) */
   export interface PalletMembershipRawEvent extends Enum {
     readonly isMemberInvited: boolean;
-    readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters]>;
+    readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters, u128]>;
     readonly isMembershipGifted: boolean;
     readonly asMembershipGifted: ITuple<[u64, PalletMembershipGiftMembershipParameters]>;
     readonly isMembershipBought: boolean;
@@ -582,13 +656,13 @@ declare module '@polkadot/types/lookup' {
     readonly isStakingAccountConfirmed: boolean;
     readonly asStakingAccountConfirmed: ITuple<[AccountId32, u64]>;
     readonly isMemberRemarked: boolean;
-    readonly asMemberRemarked: ITuple<[u64, Bytes]>;
+    readonly asMemberRemarked: ITuple<[u64, Bytes, Option<ITuple<[AccountId32, u128]>>]>;
     readonly isMemberCreated: boolean;
     readonly asMemberCreated: ITuple<[u64, PalletMembershipCreateMemberParameters, u32]>;
     readonly type: 'MemberInvited' | 'MembershipGifted' | 'MembershipBought' | 'MemberProfileUpdated' | 'MemberAccountsUpdated' | 'MemberVerificationStatusUpdated' | 'ReferralCutUpdated' | 'InvitesTransferred' | 'MembershipPriceUpdated' | 'InitialInvitationBalanceUpdated' | 'LeaderInvitationQuotaUpdated' | 'InitialInvitationCountUpdated' | 'StakingAccountAdded' | 'StakingAccountRemoved' | 'StakingAccountConfirmed' | 'MemberRemarked' | 'MemberCreated';
   }
 
-  /** @name PalletMembershipBuyMembershipParameters (70) */
+  /** @name PalletMembershipBuyMembershipParameters (75) */
   export interface PalletMembershipBuyMembershipParameters extends Struct {
     readonly rootAccount: AccountId32;
     readonly controllerAccount: AccountId32;
@@ -597,7 +671,7 @@ declare module '@polkadot/types/lookup' {
     readonly referrerId: Option<u64>;
   }
 
-  /** @name PalletMembershipInviteMembershipParameters (73) */
+  /** @name PalletMembershipInviteMembershipParameters (78) */
   export interface PalletMembershipInviteMembershipParameters extends Struct {
     readonly invitingMemberId: u64;
     readonly rootAccount: AccountId32;
@@ -606,7 +680,7 @@ declare module '@polkadot/types/lookup' {
     readonly metadata: Bytes;
   }
 
-  /** @name PalletMembershipCreateMemberParameters (74) */
+  /** @name PalletMembershipCreateMemberParameters (79) */
   export interface PalletMembershipCreateMemberParameters extends Struct {
     readonly rootAccount: AccountId32;
     readonly controllerAccount: AccountId32;
@@ -615,7 +689,7 @@ declare module '@polkadot/types/lookup' {
     readonly isFoundingMember: bool;
   }
 
-  /** @name PalletMembershipGiftMembershipParameters (75) */
+  /** @name PalletMembershipGiftMembershipParameters (80) */
   export interface PalletMembershipGiftMembershipParameters extends Struct {
     readonly rootAccount: AccountId32;
     readonly controllerAccount: AccountId32;
@@ -627,7 +701,7 @@ declare module '@polkadot/types/lookup' {
     readonly applyRootAccountInvitationLock: Option<u128>;
   }
 
-  /** @name PalletForumRawEvent (77) */
+  /** @name PalletForumRawEvent (84) */
   export interface PalletForumRawEvent extends Enum {
     readonly isCategoryCreated: boolean;
     readonly asCategoryCreated: ITuple<[u64, Option<u64>, Bytes, Bytes]>;
@@ -666,7 +740,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
   }
 
-  /** @name PalletForumPrivilegedActor (78) */
+  /** @name PalletForumPrivilegedActor (85) */
   export interface PalletForumPrivilegedActor extends Enum {
     readonly isLead: boolean;
     readonly isModerator: boolean;
@@ -674,21 +748,21 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Lead' | 'Moderator';
   }
 
-  /** @name PalletForumExtendedPostIdObject (79) */
+  /** @name PalletForumExtendedPostIdObject (86) */
   export interface PalletForumExtendedPostIdObject extends Struct {
     readonly categoryId: u64;
     readonly threadId: u64;
     readonly postId: u64;
   }
 
-  /** @name PalletConstitutionRawEvent (84) */
+  /** @name PalletConstitutionRawEvent (91) */
   export interface PalletConstitutionRawEvent extends Enum {
     readonly isConstutionAmended: boolean;
     readonly asConstutionAmended: ITuple<[H256, Bytes]>;
     readonly type: 'ConstutionAmended';
   }
 
-  /** @name PalletBountyRawEvent (85) */
+  /** @name PalletBountyRawEvent (92) */
   export interface PalletBountyRawEvent extends Enum {
     readonly isBountyCreated: boolean;
     readonly asBountyCreated: ITuple<[u64, PalletBountyBountyParametersBTreeSet, Bytes]>;
@@ -739,7 +813,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'BountyCreated' | 'BountyOracleSwitched' | 'BountyTerminated' | 'BountyFunded' | 'BountyMaxFundingReached' | 'BountyFundingWithdrawal' | 'BountyCreatorCherryWithdrawal' | 'BountyCreatorOracleRewardWithdrawal' | 'BountyOracleRewardWithdrawal' | 'BountyRemoved' | 'WorkEntryAnnounced' | 'WorkSubmitted' | 'OracleJudgmentSubmitted' | 'WorkEntrantFundsWithdrawn' | 'BountyContributorRemarked' | 'BountyOracleRemarked' | 'BountyEntrantRemarked' | 'BountyCreatorRemarked' | 'WorkSubmissionPeriodEnded' | 'WorkEntrantStakeUnlocked' | 'WorkEntrantStakeSlashed' | 'FunderStateBloatBondWithdrawn' | 'CreatorStateBloatBondWithdrawn';
   }
 
-  /** @name PalletBountyBountyParametersBTreeSet (86) */
+  /** @name PalletBountyBountyParametersBTreeSet (93) */
   export interface PalletBountyBountyParametersBTreeSet extends Struct {
     readonly oracle: PalletBountyBountyActor;
     readonly contractType: PalletBountyAssuranceContractTypeBTreeSet;
@@ -750,7 +824,7 @@ declare module '@polkadot/types/lookup' {
     readonly fundingType: PalletBountyFundingType;
   }
 
-  /** @name PalletBountyBountyActor (87) */
+  /** @name PalletBountyBountyActor (94) */
   export interface PalletBountyBountyActor extends Enum {
     readonly isCouncil: boolean;
     readonly isMember: boolean;
@@ -758,7 +832,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Council' | 'Member';
   }
 
-  /** @name PalletBountyAssuranceContractTypeBTreeSet (88) */
+  /** @name PalletBountyAssuranceContractTypeBTreeSet (95) */
   export interface PalletBountyAssuranceContractTypeBTreeSet extends Enum {
     readonly isOpen: boolean;
     readonly isClosed: boolean;
@@ -766,7 +840,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Open' | 'Closed';
   }
 
-  /** @name PalletBountyFundingType (89) */
+  /** @name PalletBountyFundingType (96) */
   export interface PalletBountyFundingType extends Enum {
     readonly isPerpetual: boolean;
     readonly asPerpetual: {
@@ -780,7 +854,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Perpetual' | 'Limited';
   }
 
-  /** @name PalletBountyOracleWorkEntryJudgment (91) */
+  /** @name PalletBountyOracleWorkEntryJudgment (98) */
   export interface PalletBountyOracleWorkEntryJudgment extends Enum {
     readonly isWinner: boolean;
     readonly asWinner: {
@@ -794,8 +868,8 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Winner' | 'Rejected';
   }
 
-  /** @name PalletUtilityRawEvent (94) */
-  export interface PalletUtilityRawEvent extends Enum {
+  /** @name PalletJoystreamUtilityRawEvent (101) */
+  export interface PalletJoystreamUtilityRawEvent extends Enum {
     readonly isSignaled: boolean;
     readonly asSignaled: Bytes;
     readonly isRuntimeUpgraded: boolean;
@@ -807,7 +881,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Signaled' | 'RuntimeUpgraded' | 'UpdatedWorkingGroupBudget' | 'TokensBurned';
   }
 
-  /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (95) */
+  /** @name PalletCommonWorkingGroupIterableEnumsWorkingGroup (102) */
   export interface PalletCommonWorkingGroupIterableEnumsWorkingGroup extends Enum {
     readonly isForum: boolean;
     readonly isStorage: boolean;
@@ -821,14 +895,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'App' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership';
   }
 
-  /** @name PalletCommonBalanceKind (96) */
+  /** @name PalletCommonBalanceKind (103) */
   export interface PalletCommonBalanceKind extends Enum {
     readonly isPositive: boolean;
     readonly isNegative: boolean;
     readonly type: 'Positive' | 'Negative';
   }
 
-  /** @name PalletContentRawEvent (97) */
+  /** @name PalletContentRawEvent (104) */
   export interface PalletContentRawEvent extends Enum {
     readonly isCuratorGroupCreated: boolean;
     readonly asCuratorGroupCreated: u64;
@@ -879,11 +953,9 @@ declare module '@polkadot/types/lookup' {
     readonly isVideoAssetsDeletedByModerator: boolean;
     readonly asVideoAssetsDeletedByModerator: ITuple<[PalletContentPermissionsContentActor, u64, BTreeSet<u64>, bool, Bytes]>;
     readonly isChannelPayoutsUpdated: boolean;
-    readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>]>;
+    readonly asChannelPayoutsUpdated: ITuple<[PalletContentUpdateChannelPayoutsParametersRecord, Option<u64>, AccountId32]>;
     readonly isChannelRewardUpdated: boolean;
-    readonly asChannelRewardUpdated: ITuple<[u128, u64]>;
-    readonly isCouncilRewardClaimed: boolean;
-    readonly asCouncilRewardClaimed: ITuple<[u64, u128]>;
+    readonly asChannelRewardUpdated: ITuple<[u128, u128, u64]>;
     readonly isEnglishAuctionStarted: boolean;
     readonly asEnglishAuctionStarted: ITuple<[PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
     readonly isOpenAuctionStarted: boolean;
@@ -940,10 +1012,12 @@ declare module '@polkadot/types/lookup' {
     readonly asToggledNftLimits: bool;
     readonly isCreatorTokenIssued: boolean;
     readonly asCreatorTokenIssued: ITuple<[PalletContentPermissionsContentActor, u64, u64]>;
-    readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'CouncilRewardClaimed' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued';
+    readonly isCreatorTokenIssuerRemarked: boolean;
+    readonly asCreatorTokenIssuerRemarked: ITuple<[u64, u64, Bytes]>;
+    readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued' | 'CreatorTokenIssuerRemarked';
   }
 
-  /** @name PalletContentPermissionsContentActor (98) */
+  /** @name PalletContentPermissionsContentActor (105) */
   export interface PalletContentPermissionsContentActor extends Enum {
     readonly isCurator: boolean;
     readonly asCurator: ITuple<[u64, u64]>;
@@ -953,7 +1027,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Curator' | 'Member' | 'Lead';
   }
 
-  /** @name PalletContentChannelRecord (99) */
+  /** @name PalletContentChannelRecord (106) */
   export interface PalletContentChannelRecord extends Struct {
     readonly owner: PalletContentChannelOwner;
     readonly numVideos: u64;
@@ -971,7 +1045,7 @@ declare module '@polkadot/types/lookup' {
     readonly channelStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
   }
 
-  /** @name PalletContentIterableEnumsChannelActionPermission (103) */
+  /** @name PalletContentIterableEnumsChannelActionPermission (110) */
   export interface PalletContentIterableEnumsChannelActionPermission extends Enum {
     readonly isUpdateChannelMetadata: boolean;
     readonly isManageNonVideoChannelAssets: boolean;
@@ -994,10 +1068,11 @@ declare module '@polkadot/types/lookup' {
     readonly isReduceCreatorTokenPatronageRate: boolean;
     readonly isManageRevenueSplits: boolean;
     readonly isDeissueCreatorToken: boolean;
-    readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken';
+    readonly isAmmControl: boolean;
+    readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken' | 'AmmControl';
   }
 
-  /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (110) */
+  /** @name PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature (117) */
   export interface PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature extends Enum {
     readonly isChannelFundsTransfer: boolean;
     readonly isCreatorCashout: boolean;
@@ -1009,13 +1084,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ChannelFundsTransfer' | 'CreatorCashout' | 'VideoNftIssuance' | 'VideoCreation' | 'VideoUpdate' | 'ChannelUpdate' | 'CreatorTokenIssuance';
   }
 
-  /** @name PalletCommonBloatBondRepayableBloatBond (113) */
+  /** @name PalletCommonBloatBondRepayableBloatBond (120) */
   export interface PalletCommonBloatBondRepayableBloatBond extends Struct {
     readonly repaymentRestrictedTo: Option<AccountId32>;
     readonly amount: u128;
   }
 
-  /** @name PalletContentChannelOwner (114) */
+  /** @name PalletContentChannelOwner (121) */
   export interface PalletContentChannelOwner extends Enum {
     readonly isMember: boolean;
     readonly asMember: u64;
@@ -1024,7 +1099,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Member' | 'CuratorGroup';
   }
 
-  /** @name PalletContentChannelTransferStatus (115) */
+  /** @name PalletContentChannelTransferStatus (122) */
   export interface PalletContentChannelTransferStatus extends Enum {
     readonly isNoActiveTransfer: boolean;
     readonly isPendingTransfer: boolean;
@@ -1032,32 +1107,32 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NoActiveTransfer' | 'PendingTransfer';
   }
 
-  /** @name PalletContentPendingTransfer (116) */
+  /** @name PalletContentPendingTransfer (123) */
   export interface PalletContentPendingTransfer extends Struct {
     readonly newOwner: PalletContentChannelOwner;
     readonly transferParams: PalletContentTransferCommitmentParametersBoundedBTreeMap;
   }
 
-  /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (117) */
+  /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (124) */
   export interface PalletContentTransferCommitmentParametersBoundedBTreeMap extends Struct {
     readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
     readonly price: u128;
     readonly transferId: u64;
   }
 
-  /** @name PalletContentLimitPerPeriod (118) */
+  /** @name PalletContentLimitPerPeriod (125) */
   export interface PalletContentLimitPerPeriod extends Struct {
     readonly limit: u64;
     readonly blockNumberPeriod: u32;
   }
 
-  /** @name PalletContentNftCounter (119) */
+  /** @name PalletContentNftCounter (126) */
   export interface PalletContentNftCounter extends Struct {
     readonly counter: u64;
     readonly lastUpdated: u32;
   }
 
-  /** @name PalletContentNftTypesEnglishAuctionParamsRecord (120) */
+  /** @name PalletContentNftTypesEnglishAuctionParamsRecord (127) */
   export interface PalletContentNftTypesEnglishAuctionParamsRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -1068,7 +1143,7 @@ declare module '@polkadot/types/lookup' {
     readonly minBidStep: u128;
   }
 
-  /** @name PalletContentNftTypesOpenAuctionParamsRecord (122) */
+  /** @name PalletContentNftTypesOpenAuctionParamsRecord (129) */
   export interface PalletContentNftTypesOpenAuctionParamsRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -1077,7 +1152,7 @@ declare module '@polkadot/types/lookup' {
     readonly bidLockDuration: u32;
   }
 
-  /** @name PalletContentNftTypesNftIssuanceParametersRecord (123) */
+  /** @name PalletContentNftTypesNftIssuanceParametersRecord (130) */
   export interface PalletContentNftTypesNftIssuanceParametersRecord extends Struct {
     readonly royalty: Option<Perbill>;
     readonly nftMetadata: Bytes;
@@ -1085,7 +1160,7 @@ declare module '@polkadot/types/lookup' {
     readonly initTransactionalStatus: PalletContentNftTypesInitTransactionalStatusRecord;
   }
 
-  /** @name PalletContentNftTypesInitTransactionalStatusRecord (124) */
+  /** @name PalletContentNftTypesInitTransactionalStatusRecord (131) */
   export interface PalletContentNftTypesInitTransactionalStatusRecord extends Enum {
     readonly isIdle: boolean;
     readonly isBuyNow: boolean;
@@ -1099,7 +1174,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Idle' | 'BuyNow' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction';
   }
 
-  /** @name PalletContentChannelCreationParametersRecord (126) */
+  /** @name PalletContentChannelCreationParametersRecord (133) */
   export interface PalletContentChannelCreationParametersRecord extends Struct {
     readonly assets: Option<PalletContentStorageAssetsRecord>;
     readonly meta: Option<Bytes>;
@@ -1110,25 +1185,25 @@ declare module '@polkadot/types/lookup' {
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletContentStorageAssetsRecord (127) */
+  /** @name PalletContentStorageAssetsRecord (134) */
   export interface PalletContentStorageAssetsRecord extends Struct {
     readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
     readonly expectedDataSizeFee: u128;
   }
 
-  /** @name PalletStorageDataObjectCreationParameters (129) */
+  /** @name PalletStorageDataObjectCreationParameters (136) */
   export interface PalletStorageDataObjectCreationParameters extends Struct {
     readonly size_: u64;
     readonly ipfsContentId: Bytes;
   }
 
-  /** @name PalletStorageDistributionBucketIdRecord (130) */
+  /** @name PalletStorageDistributionBucketIdRecord (137) */
   export interface PalletStorageDistributionBucketIdRecord extends Struct {
     readonly distributionBucketFamilyId: u64;
     readonly distributionBucketIndex: u64;
   }
 
-  /** @name PalletContentChannelUpdateParametersRecord (137) */
+  /** @name PalletContentChannelUpdateParametersRecord (144) */
   export interface PalletContentChannelUpdateParametersRecord extends Struct {
     readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
     readonly newMeta: Option<Bytes>;
@@ -1138,7 +1213,7 @@ declare module '@polkadot/types/lookup' {
     readonly storageBucketsNumWitness: Option<u32>;
   }
 
-  /** @name PalletContentVideoCreationParametersRecord (139) */
+  /** @name PalletContentVideoCreationParametersRecord (146) */
   export interface PalletContentVideoCreationParametersRecord extends Struct {
     readonly assets: Option<PalletContentStorageAssetsRecord>;
     readonly meta: Option<Bytes>;
@@ -1148,7 +1223,7 @@ declare module '@polkadot/types/lookup' {
     readonly storageBucketsNumWitness: u32;
   }
 
-  /** @name PalletContentVideoUpdateParametersRecord (141) */
+  /** @name PalletContentVideoUpdateParametersRecord (148) */
   export interface PalletContentVideoUpdateParametersRecord extends Struct {
     readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
     readonly newMeta: Option<Bytes>;
@@ -1158,29 +1233,27 @@ declare module '@polkadot/types/lookup' {
     readonly storageBucketsNumWitness: Option<u32>;
   }
 
-  /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (144) */
+  /** @name PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction (151) */
   export interface PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction extends Enum {
     readonly isHideVideo: boolean;
     readonly isHideChannel: boolean;
     readonly isChangeChannelFeatureStatus: boolean;
     readonly asChangeChannelFeatureStatus: PalletContentPermissionsCuratorGroupIterableEnumsPausableChannelFeature;
-    readonly isDeleteVideo: boolean;
-    readonly isDeleteChannel: boolean;
     readonly isDeleteVideoAssets: boolean;
     readonly asDeleteVideoAssets: bool;
     readonly isDeleteNonVideoChannelAssets: boolean;
     readonly isUpdateChannelNftLimits: boolean;
-    readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideo' | 'DeleteChannel' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
+    readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
   }
 
-  /** @name PalletContentTransferCommitmentParametersBTreeMap (148) */
+  /** @name PalletContentTransferCommitmentParametersBTreeMap (155) */
   export interface PalletContentTransferCommitmentParametersBTreeMap extends Struct {
     readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
     readonly price: u128;
     readonly transferId: u64;
   }
 
-  /** @name PalletContentUpdateChannelPayoutsParametersRecord (149) */
+  /** @name PalletContentUpdateChannelPayoutsParametersRecord (156) */
   export interface PalletContentUpdateChannelPayoutsParametersRecord extends Struct {
     readonly commitment: Option<H256>;
     readonly payload: Option<PalletContentChannelPayoutsPayloadParametersRecord>;
@@ -1189,15 +1262,14 @@ declare module '@polkadot/types/lookup' {
     readonly channelCashoutsEnabled: Option<bool>;
   }
 
-  /** @name PalletContentChannelPayoutsPayloadParametersRecord (150) */
+  /** @name PalletContentChannelPayoutsPayloadParametersRecord (157) */
   export interface PalletContentChannelPayoutsPayloadParametersRecord extends Struct {
-    readonly uploaderAccount: AccountId32;
     readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
     readonly expectedDataSizeFee: u128;
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletContentChannelFundsDestination (154) */
+  /** @name PalletContentChannelFundsDestination (161) */
   export interface PalletContentChannelFundsDestination extends Enum {
     readonly isAccountId: boolean;
     readonly asAccountId: AccountId32;
@@ -1205,14 +1277,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AccountId' | 'CouncilBudget';
   }
 
-  /** @name PalletContentNftLimitPeriod (155) */
+  /** @name PalletContentNftLimitPeriod (162) */
   export interface PalletContentNftLimitPeriod extends Enum {
     readonly isDaily: boolean;
     readonly isWeekly: boolean;
     readonly type: 'Daily' | 'Weekly';
   }
 
-  /** @name PalletStorageRawEvent (156) */
+  /** @name PalletStorageRawEvent (163) */
   export interface PalletStorageRawEvent extends Enum {
     readonly isStorageBucketCreated: boolean;
     readonly asStorageBucketCreated: ITuple<[u64, Option<u64>, bool, u64, u64]>;
@@ -1301,7 +1373,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
   }
 
-  /** @name PalletStorageUploadParametersRecord (157) */
+  /** @name PalletStorageUploadParametersRecord (164) */
   export interface PalletStorageUploadParametersRecord extends Struct {
     readonly bagId: PalletStorageBagIdType;
     readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1310,7 +1382,7 @@ declare module '@polkadot/types/lookup' {
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletStorageBagIdType (158) */
+  /** @name PalletStorageBagIdType (165) */
   export interface PalletStorageBagIdType extends Enum {
     readonly isStatic: boolean;
     readonly asStatic: PalletStorageStaticBagId;
@@ -1319,7 +1391,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Static' | 'Dynamic';
   }
 
-  /** @name PalletStorageStaticBagId (159) */
+  /** @name PalletStorageStaticBagId (166) */
   export interface PalletStorageStaticBagId extends Enum {
     readonly isCouncil: boolean;
     readonly isWorkingGroup: boolean;
@@ -1327,7 +1399,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Council' | 'WorkingGroup';
   }
 
-  /** @name PalletStorageDynamicBagIdType (160) */
+  /** @name PalletStorageDynamicBagIdType (167) */
   export interface PalletStorageDynamicBagIdType extends Enum {
     readonly isMember: boolean;
     readonly asMember: u64;
@@ -1336,7 +1408,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Member' | 'Channel';
   }
 
-  /** @name PalletStorageDynBagCreationParametersRecord (161) */
+  /** @name PalletStorageDynBagCreationParametersRecord (168) */
   export interface PalletStorageDynBagCreationParametersRecord extends Struct {
     readonly bagId: PalletStorageDynamicBagIdType;
     readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1347,7 +1419,7 @@ declare module '@polkadot/types/lookup' {
     readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
   }
 
-  /** @name PalletStorageVoucher (164) */
+  /** @name PalletStorageVoucher (171) */
   export interface PalletStorageVoucher extends Struct {
     readonly sizeLimit: u64;
     readonly objectsLimit: u64;
@@ -1355,14 +1427,14 @@ declare module '@polkadot/types/lookup' {
     readonly objectsUsed: u64;
   }
 
-  /** @name PalletStorageDynamicBagType (165) */
+  /** @name PalletStorageDynamicBagType (172) */
   export interface PalletStorageDynamicBagType extends Enum {
     readonly isMember: boolean;
     readonly isChannel: boolean;
     readonly type: 'Member' | 'Channel';
   }
 
-  /** @name PalletProjectTokenEventsRawEvent (169) */
+  /** @name PalletProjectTokenEventsRawEvent (176) */
   export interface PalletProjectTokenEventsRawEvent extends Enum {
     readonly isTokenAmountTransferred: boolean;
     readonly asTokenAmountTransferred: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
@@ -1400,10 +1472,18 @@ declare module '@polkadot/types/lookup' {
     readonly asTransferPolicyChangedToPermissionless: u64;
     readonly isTokensBurned: boolean;
     readonly asTokensBurned: ITuple<[u64, u64, u128]>;
-    readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned';
-  }
-
-  /** @name PalletProjectTokenTransferPolicy (170) */
+    readonly isAmmActivated: boolean;
+    readonly asAmmActivated: ITuple<[u64, u64, PalletProjectTokenAmmCurve]>;
+    readonly isTokensBoughtOnAmm: boolean;
+    readonly asTokensBoughtOnAmm: ITuple<[u64, u64, u128, u128]>;
+    readonly isTokensSoldOnAmm: boolean;
+    readonly asTokensSoldOnAmm: ITuple<[u64, u64, u128, u128]>;
+    readonly isAmmDeactivated: boolean;
+    readonly asAmmDeactivated: ITuple<[u64, u64, u128]>;
+    readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned' | 'AmmActivated' | 'TokensBoughtOnAmm' | 'TokensSoldOnAmm' | 'AmmDeactivated';
+  }
+
+  /** @name PalletProjectTokenTransferPolicy (177) */
   export interface PalletProjectTokenTransferPolicy extends Enum {
     readonly isPermissionless: boolean;
     readonly isPermissioned: boolean;
@@ -1411,29 +1491,29 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Permissionless' | 'Permissioned';
   }
 
-  /** @name PalletProjectTokenTokenIssuanceParameters (171) */
+  /** @name PalletProjectTokenTokenIssuanceParameters (178) */
   export interface PalletProjectTokenTokenIssuanceParameters extends Struct {
     readonly initialAllocation: BTreeMap<u64, PalletProjectTokenTokenAllocation>;
-    readonly symbol: H256;
     readonly transferPolicy: PalletProjectTokenTransferPolicyParams;
     readonly patronageRate: Permill;
     readonly revenueSplitRate: Permill;
+    readonly metadata: Bytes;
   }
 
-  /** @name PalletProjectTokenTokenAllocation (172) */
+  /** @name PalletProjectTokenTokenAllocation (179) */
   export interface PalletProjectTokenTokenAllocation extends Struct {
     readonly amount: u128;
     readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
   }
 
-  /** @name PalletProjectTokenVestingScheduleParams (173) */
+  /** @name PalletProjectTokenVestingScheduleParams (180) */
   export interface PalletProjectTokenVestingScheduleParams extends Struct {
     readonly linearVestingDuration: u32;
     readonly blocksBeforeCliff: u32;
     readonly cliffAmountPercentage: Permill;
   }
 
-  /** @name PalletProjectTokenTransferPolicyParams (176) */
+  /** @name PalletProjectTokenTransferPolicyParams (183) */
   export interface PalletProjectTokenTransferPolicyParams extends Enum {
     readonly isPermissionless: boolean;
     readonly isPermissioned: boolean;
@@ -1441,20 +1521,20 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Permissionless' | 'Permissioned';
   }
 
-  /** @name PalletProjectTokenWhitelistParams (177) */
+  /** @name PalletProjectTokenWhitelistParams (184) */
   export interface PalletProjectTokenWhitelistParams extends Struct {
     readonly commitment: H256;
     readonly payload: Option<PalletProjectTokenSingleDataObjectUploadParams>;
   }
 
-  /** @name PalletProjectTokenSingleDataObjectUploadParams (178) */
+  /** @name PalletProjectTokenSingleDataObjectUploadParams (185) */
   export interface PalletProjectTokenSingleDataObjectUploadParams extends Struct {
     readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
     readonly expectedDataSizeFee: u128;
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletProjectTokenValidated (185) */
+  /** @name PalletProjectTokenValidated (192) */
   export interface PalletProjectTokenValidated extends Enum {
     readonly isExisting: boolean;
     readonly asExisting: u64;
@@ -1463,19 +1543,19 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Existing' | 'NonExisting';
   }
 
-  /** @name PalletProjectTokenValidatedPayment (186) */
+  /** @name PalletProjectTokenValidatedPayment (193) */
   export interface PalletProjectTokenValidatedPayment extends Struct {
     readonly payment: PalletProjectTokenPaymentWithVesting;
     readonly vestingCleanupCandidate: Option<PalletProjectTokenVestingSource>;
   }
 
-  /** @name PalletProjectTokenPaymentWithVesting (187) */
+  /** @name PalletProjectTokenPaymentWithVesting (194) */
   export interface PalletProjectTokenPaymentWithVesting extends Struct {
     readonly amount: u128;
     readonly vestingSchedule: Option<PalletProjectTokenVestingScheduleParams>;
   }
 
-  /** @name PalletProjectTokenVestingSource (189) */
+  /** @name PalletProjectTokenVestingSource (196) */
   export interface PalletProjectTokenVestingSource extends Enum {
     readonly isInitialIssuance: boolean;
     readonly isSale: boolean;
@@ -1485,7 +1565,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InitialIssuance' | 'Sale' | 'IssuerTransfer';
   }
 
-  /** @name PalletProjectTokenTokenSale (193) */
+  /** @name PalletProjectTokenTokenSale (200) */
   export interface PalletProjectTokenTokenSale extends Struct {
     readonly unitPrice: u128;
     readonly quantityLeft: u128;
@@ -1499,7 +1579,14 @@ declare module '@polkadot/types/lookup' {
     readonly autoFinalize: bool;
   }
 
-  /** @name PalletProposalsEngineRawEvent (195) */
+  /** @name PalletProjectTokenAmmCurve (201) */
+  export interface PalletProjectTokenAmmCurve extends Struct {
+    readonly slope: Permill;
+    readonly intercept: Permill;
+    readonly providedSupply: u128;
+  }
+
+  /** @name PalletProposalsEngineRawEvent (203) */
   export interface PalletProposalsEngineRawEvent extends Enum {
     readonly isProposalStatusUpdated: boolean;
     readonly asProposalStatusUpdated: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
@@ -1516,7 +1603,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ProposalStatusUpdated' | 'ProposalDecisionMade' | 'ProposalExecuted' | 'Voted' | 'ProposalCancelled' | 'ProposerRemarked';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesProposalStatus (196) */
+  /** @name PalletProposalsEngineProposalStatusesProposalStatus (204) */
   export interface PalletProposalsEngineProposalStatusesProposalStatus extends Enum {
     readonly isActive: boolean;
     readonly isPendingExecution: boolean;
@@ -1525,7 +1612,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Active' | 'PendingExecution' | 'PendingConstitutionality';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesProposalDecision (197) */
+  /** @name PalletProposalsEngineProposalStatusesProposalDecision (205) */
   export interface PalletProposalsEngineProposalStatusesProposalDecision extends Enum {
     readonly isCanceled: boolean;
     readonly isCanceledByRuntime: boolean;
@@ -1538,14 +1625,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Canceled' | 'CanceledByRuntime' | 'Vetoed' | 'Rejected' | 'Slashed' | 'Expired' | 'Approved';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (198) */
+  /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (206) */
   export interface PalletProposalsEngineProposalStatusesApprovedProposalDecision extends Enum {
     readonly isPendingExecution: boolean;
     readonly isPendingConstitutionality: boolean;
     readonly type: 'PendingExecution' | 'PendingConstitutionality';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesExecutionStatus (199) */
+  /** @name PalletProposalsEngineProposalStatusesExecutionStatus (207) */
   export interface PalletProposalsEngineProposalStatusesExecutionStatus extends Enum {
     readonly isExecuted: boolean;
     readonly isExecutionFailed: boolean;
@@ -1555,7 +1642,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Executed' | 'ExecutionFailed';
   }
 
-  /** @name PalletProposalsEngineVoteKind (200) */
+  /** @name PalletProposalsEngineVoteKind (208) */
   export interface PalletProposalsEngineVoteKind extends Enum {
     readonly isApprove: boolean;
     readonly isReject: boolean;
@@ -1564,7 +1651,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Approve' | 'Reject' | 'Slash' | 'Abstain';
   }
 
-  /** @name PalletProposalsDiscussionRawEvent (201) */
+  /** @name PalletProposalsDiscussionRawEvent (209) */
   export interface PalletProposalsDiscussionRawEvent extends Enum {
     readonly isThreadCreated: boolean;
     readonly asThreadCreated: ITuple<[u64, u64]>;
@@ -1579,7 +1666,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ThreadCreated' | 'PostCreated' | 'PostUpdated' | 'ThreadModeChanged' | 'PostDeleted';
   }
 
-  /** @name PalletProposalsDiscussionThreadModeBTreeSet (202) */
+  /** @name PalletProposalsDiscussionThreadModeBTreeSet (210) */
   export interface PalletProposalsDiscussionThreadModeBTreeSet extends Enum {
     readonly isOpen: boolean;
     readonly isClosed: boolean;
@@ -1587,14 +1674,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Open' | 'Closed';
   }
 
-  /** @name PalletProposalsCodexRawEvent (203) */
+  /** @name PalletProposalsCodexRawEvent (211) */
   export interface PalletProposalsCodexRawEvent extends Enum {
     readonly isProposalCreated: boolean;
     readonly asProposalCreated: ITuple<[u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
     readonly type: 'ProposalCreated';
   }
 
-  /** @name PalletProposalsCodexGeneralProposalParams (204) */
+  /** @name PalletProposalsCodexGeneralProposalParams (212) */
   export interface PalletProposalsCodexGeneralProposalParams extends Struct {
     readonly memberId: u64;
     readonly title: Bytes;
@@ -1603,7 +1690,7 @@ declare module '@polkadot/types/lookup' {
     readonly exactExecutionBlock: Option<u32>;
   }
 
-  /** @name PalletProposalsCodexProposalDetails (205) */
+  /** @name PalletProposalsCodexProposalDetails (213) */
   export interface PalletProposalsCodexProposalDetails extends Enum {
     readonly isSignal: boolean;
     readonly asSignal: Bytes;
@@ -1654,13 +1741,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts';
   }
 
-  /** @name PalletCommonFundingRequestParameters (207) */
+  /** @name PalletCommonFundingRequestParameters (215) */
   export interface PalletCommonFundingRequestParameters extends Struct {
     readonly account: AccountId32;
     readonly amount: u128;
   }
 
-  /** @name PalletProposalsCodexCreateOpeningParameters (208) */
+  /** @name PalletProposalsCodexCreateOpeningParameters (216) */
   export interface PalletProposalsCodexCreateOpeningParameters extends Struct {
     readonly description: Bytes;
     readonly stakePolicy: PalletWorkingGroupStakePolicy;
@@ -1668,27 +1755,27 @@ declare module '@polkadot/types/lookup' {
     readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
   }
 
-  /** @name PalletWorkingGroupStakePolicy (209) */
+  /** @name PalletWorkingGroupStakePolicy (217) */
   export interface PalletWorkingGroupStakePolicy extends Struct {
     readonly stakeAmount: u128;
     readonly leavingUnstakingPeriod: u32;
   }
 
-  /** @name PalletProposalsCodexFillOpeningParameters (210) */
+  /** @name PalletProposalsCodexFillOpeningParameters (218) */
   export interface PalletProposalsCodexFillOpeningParameters extends Struct {
     readonly openingId: u64;
     readonly applicationId: u64;
     readonly workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
   }
 
-  /** @name PalletProposalsCodexTerminateRoleParameters (211) */
+  /** @name PalletProposalsCodexTerminateRoleParameters (219) */
   export interface PalletProposalsCodexTerminateRoleParameters extends Struct {
     readonly workerId: u64;
     readonly slashingAmount: Option<u128>;
     readonly group: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
   }
 
-  /** @name PalletWorkingGroupRawEventInstance1 (212) */
+  /** @name PalletWorkingGroupRawEventInstance1 (220) */
   export interface PalletWorkingGroupRawEventInstance1 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1742,14 +1829,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupOpeningType (216) */
+  /** @name PalletWorkingGroupOpeningType (224) */
   export interface PalletWorkingGroupOpeningType extends Enum {
     readonly isLeader: boolean;
     readonly isRegular: boolean;
     readonly type: 'Leader' | 'Regular';
   }
 
-  /** @name PalletWorkingGroupApplyOnOpeningParams (217) */
+  /** @name PalletWorkingGroupApplyOnOpeningParams (225) */
   export interface PalletWorkingGroupApplyOnOpeningParams extends Struct {
     readonly memberId: u64;
     readonly openingId: u64;
@@ -1759,23 +1846,23 @@ declare module '@polkadot/types/lookup' {
     readonly stakeParameters: PalletWorkingGroupStakeParameters;
   }
 
-  /** @name PalletWorkingGroupStakeParameters (218) */
+  /** @name PalletWorkingGroupStakeParameters (226) */
   export interface PalletWorkingGroupStakeParameters extends Struct {
     readonly stake: u128;
     readonly stakingAccountId: AccountId32;
   }
 
-  /** @name PalletWorkingGroupInstance1 (219) */
+  /** @name PalletWorkingGroupInstance1 (227) */
   export type PalletWorkingGroupInstance1 = Null;
 
-  /** @name PalletWorkingGroupRewardPaymentType (220) */
+  /** @name PalletWorkingGroupRewardPaymentType (228) */
   export interface PalletWorkingGroupRewardPaymentType extends Enum {
     readonly isMissedReward: boolean;
     readonly isRegularReward: boolean;
     readonly type: 'MissedReward' | 'RegularReward';
   }
 
-  /** @name PalletWorkingGroupRawEventInstance2 (221) */
+  /** @name PalletWorkingGroupRawEventInstance2 (229) */
   export interface PalletWorkingGroupRawEventInstance2 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1829,10 +1916,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance2 (222) */
+  /** @name PalletWorkingGroupInstance2 (230) */
   export type PalletWorkingGroupInstance2 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance3 (223) */
+  /** @name PalletWorkingGroupRawEventInstance3 (231) */
   export interface PalletWorkingGroupRawEventInstance3 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1886,10 +1973,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance3 (224) */
+  /** @name PalletWorkingGroupInstance3 (232) */
   export type PalletWorkingGroupInstance3 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance4 (225) */
+  /** @name PalletWorkingGroupRawEventInstance4 (233) */
   export interface PalletWorkingGroupRawEventInstance4 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1943,10 +2030,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance4 (226) */
+  /** @name PalletWorkingGroupInstance4 (234) */
   export type PalletWorkingGroupInstance4 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance5 (227) */
+  /** @name PalletWorkingGroupRawEventInstance5 (235) */
   export interface PalletWorkingGroupRawEventInstance5 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2000,10 +2087,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance5 (228) */
+  /** @name PalletWorkingGroupInstance5 (236) */
   export type PalletWorkingGroupInstance5 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance6 (229) */
+  /** @name PalletWorkingGroupRawEventInstance6 (237) */
   export interface PalletWorkingGroupRawEventInstance6 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2057,10 +2144,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance6 (230) */
+  /** @name PalletWorkingGroupInstance6 (238) */
   export type PalletWorkingGroupInstance6 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance7 (231) */
+  /** @name PalletWorkingGroupRawEventInstance7 (239) */
   export interface PalletWorkingGroupRawEventInstance7 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2114,10 +2201,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance7 (232) */
+  /** @name PalletWorkingGroupInstance7 (240) */
   export type PalletWorkingGroupInstance7 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance8 (233) */
+  /** @name PalletWorkingGroupRawEventInstance8 (241) */
   export interface PalletWorkingGroupRawEventInstance8 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2171,10 +2258,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance8 (234) */
+  /** @name PalletWorkingGroupInstance8 (242) */
   export type PalletWorkingGroupInstance8 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance9 (235) */
+  /** @name PalletWorkingGroupRawEventInstance9 (243) */
   export interface PalletWorkingGroupRawEventInstance9 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2228,10 +2315,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance9 (236) */
+  /** @name PalletWorkingGroupInstance9 (244) */
   export type PalletWorkingGroupInstance9 = Null;
 
-  /** @name FrameSystemPhase (237) */
+  /** @name FrameSystemPhase (245) */
   export interface FrameSystemPhase extends Enum {
     readonly isApplyExtrinsic: boolean;
     readonly asApplyExtrinsic: u32;
@@ -2240,18 +2327,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
   }
 
-  /** @name FrameSystemLastRuntimeUpgradeInfo (241) */
+  /** @name FrameSystemLastRuntimeUpgradeInfo (249) */
   export interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
     readonly specVersion: Compact<u32>;
     readonly specName: Text;
   }
 
-  /** @name FrameSystemCall (244) */
+  /** @name FrameSystemCall (252) */
   export interface FrameSystemCall extends Enum {
-    readonly isFillBlock: boolean;
-    readonly asFillBlock: {
-      readonly ratio: Perbill;
-    } & Struct;
     readonly isRemark: boolean;
     readonly asRemark: {
       readonly remark: Bytes;
@@ -2285,50 +2368,50 @@ declare module '@polkadot/types/lookup' {
     readonly asRemarkWithEvent: {
       readonly remark: Bytes;
     } & Struct;
-    readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
+    readonly type: 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
   }
 
-  /** @name FrameSystemLimitsBlockWeights (247) */
+  /** @name FrameSystemLimitsBlockWeights (255) */
   export interface FrameSystemLimitsBlockWeights extends Struct {
-    readonly baseBlock: u64;
-    readonly maxBlock: u64;
-    readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
+    readonly baseBlock: SpWeightsWeightV2Weight;
+    readonly maxBlock: SpWeightsWeightV2Weight;
+    readonly perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
   }
 
-  /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (248) */
-  export interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
+  /** @name FrameSupportDispatchPerDispatchClassWeightsPerClass (256) */
+  export interface FrameSupportDispatchPerDispatchClassWeightsPerClass extends Struct {
     readonly normal: FrameSystemLimitsWeightsPerClass;
     readonly operational: FrameSystemLimitsWeightsPerClass;
     readonly mandatory: FrameSystemLimitsWeightsPerClass;
   }
 
-  /** @name FrameSystemLimitsWeightsPerClass (249) */
+  /** @name FrameSystemLimitsWeightsPerClass (257) */
   export interface FrameSystemLimitsWeightsPerClass extends Struct {
-    readonly baseExtrinsic: u64;
-    readonly maxExtrinsic: Option<u64>;
-    readonly maxTotal: Option<u64>;
-    readonly reserved: Option<u64>;
+    readonly baseExtrinsic: SpWeightsWeightV2Weight;
+    readonly maxExtrinsic: Option<SpWeightsWeightV2Weight>;
+    readonly maxTotal: Option<SpWeightsWeightV2Weight>;
+    readonly reserved: Option<SpWeightsWeightV2Weight>;
   }
 
-  /** @name FrameSystemLimitsBlockLength (250) */
+  /** @name FrameSystemLimitsBlockLength (259) */
   export interface FrameSystemLimitsBlockLength extends Struct {
-    readonly max: FrameSupportWeightsPerDispatchClassU32;
+    readonly max: FrameSupportDispatchPerDispatchClassU32;
   }
 
-  /** @name FrameSupportWeightsPerDispatchClassU32 (251) */
-  export interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
+  /** @name FrameSupportDispatchPerDispatchClassU32 (260) */
+  export interface FrameSupportDispatchPerDispatchClassU32 extends Struct {
     readonly normal: u32;
     readonly operational: u32;
     readonly mandatory: u32;
   }
 
-  /** @name FrameSupportWeightsRuntimeDbWeight (252) */
-  export interface FrameSupportWeightsRuntimeDbWeight extends Struct {
+  /** @name SpWeightsRuntimeDbWeight (261) */
+  export interface SpWeightsRuntimeDbWeight extends Struct {
     readonly read: u64;
     readonly write: u64;
   }
 
-  /** @name SpVersionRuntimeVersion (253) */
+  /** @name SpVersionRuntimeVersion (262) */
   export interface SpVersionRuntimeVersion extends Struct {
     readonly specName: Text;
     readonly implName: Text;
@@ -2340,7 +2423,7 @@ declare module '@polkadot/types/lookup' {
     readonly stateVersion: u8;
   }
 
-  /** @name FrameSystemError (259) */
+  /** @name FrameSystemError (268) */
   export interface FrameSystemError extends Enum {
     readonly isInvalidSpecName: boolean;
     readonly isSpecVersionNeedsToIncrease: boolean;
@@ -2351,7 +2434,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
   }
 
-  /** @name PalletUtilityCall (260) */
+  /** @name PalletUtilityCall (269) */
   export interface PalletUtilityCall extends Enum {
     readonly isBatch: boolean;
     readonly asBatch: {
@@ -2375,10 +2458,15 @@ declare module '@polkadot/types/lookup' {
     readonly asForceBatch: {
       readonly calls: Vec<Call>;
     } & Struct;
-    readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
+    readonly isWithWeight: boolean;
+    readonly asWithWeight: {
+      readonly call: Call;
+      readonly weight: SpWeightsWeightV2Weight;
+    } & Struct;
+    readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch' | 'WithWeight';
   }
 
-  /** @name PalletBabeCall (263) */
+  /** @name PalletBabeCall (272) */
   export interface PalletBabeCall extends Enum {
     readonly isReportEquivocation: boolean;
     readonly asReportEquivocation: {
@@ -2397,7 +2485,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'PlanConfigChange';
   }
 
-  /** @name SpConsensusSlotsEquivocationProof (264) */
+  /** @name SpConsensusSlotsEquivocationProof (273) */
   export interface SpConsensusSlotsEquivocationProof extends Struct {
     readonly offender: SpConsensusBabeAppPublic;
     readonly slot: u64;
@@ -2405,7 +2493,7 @@ declare module '@polkadot/types/lookup' {
     readonly secondHeader: SpRuntimeHeader;
   }
 
-  /** @name SpRuntimeHeader (265) */
+  /** @name SpRuntimeHeader (274) */
   export interface SpRuntimeHeader extends Struct {
     readonly parentHash: H256;
     readonly number: Compact<u32>;
@@ -2414,20 +2502,20 @@ declare module '@polkadot/types/lookup' {
     readonly digest: SpRuntimeDigest;
   }
 
-  /** @name SpRuntimeBlakeTwo256 (266) */
+  /** @name SpRuntimeBlakeTwo256 (275) */
   export type SpRuntimeBlakeTwo256 = Null;
 
-  /** @name SpConsensusBabeAppPublic (267) */
+  /** @name SpConsensusBabeAppPublic (276) */
   export interface SpConsensusBabeAppPublic extends SpCoreSr25519Public {}
 
-  /** @name SpSessionMembershipProof (269) */
+  /** @name SpSessionMembershipProof (278) */
   export interface SpSessionMembershipProof extends Struct {
     readonly session: u32;
     readonly trieNodes: Vec<Bytes>;
     readonly validatorCount: u32;
   }
 
-  /** @name SpConsensusBabeDigestsNextConfigDescriptor (270) */
+  /** @name SpConsensusBabeDigestsNextConfigDescriptor (279) */
   export interface SpConsensusBabeDigestsNextConfigDescriptor extends Enum {
     readonly isV1: boolean;
     readonly asV1: {
@@ -2437,7 +2525,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'V1';
   }
 
-  /** @name SpConsensusBabeAllowedSlots (271) */
+  /** @name SpConsensusBabeAllowedSlots (280) */
   export interface SpConsensusBabeAllowedSlots extends Enum {
     readonly isPrimarySlots: boolean;
     readonly isPrimaryAndSecondaryPlainSlots: boolean;
@@ -2445,7 +2533,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'PrimarySlots' | 'PrimaryAndSecondaryPlainSlots' | 'PrimaryAndSecondaryVRFSlots';
   }
 
-  /** @name PalletTimestampCall (272) */
+  /** @name PalletTimestampCall (281) */
   export interface PalletTimestampCall extends Enum {
     readonly isSet: boolean;
     readonly asSet: {
@@ -2454,16 +2542,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Set';
   }
 
-  /** @name PalletAuthorshipCall (274) */
-  export interface PalletAuthorshipCall extends Enum {
-    readonly isSetUncles: boolean;
-    readonly asSetUncles: {
-      readonly newUncles: Vec<SpRuntimeHeader>;
-    } & Struct;
-    readonly type: 'SetUncles';
-  }
-
-  /** @name PalletBalancesCall (276) */
+  /** @name PalletBalancesCall (282) */
   export interface PalletBalancesCall extends Enum {
     readonly isTransfer: boolean;
     readonly asTransfer: {
@@ -2500,7 +2579,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
   }
 
-  /** @name PalletElectionProviderMultiPhaseCall (277) */
+  /** @name PalletElectionProviderMultiPhaseCall (283) */
   export interface PalletElectionProviderMultiPhaseCall extends Enum {
     readonly isSubmitUnsigned: boolean;
     readonly asSubmitUnsigned: {
@@ -2527,14 +2606,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'SubmitUnsigned' | 'SetMinimumUntrustedScore' | 'SetEmergencyElectionResult' | 'Submit' | 'GovernanceFallback';
   }
 
-  /** @name PalletElectionProviderMultiPhaseRawSolution (278) */
+  /** @name PalletElectionProviderMultiPhaseRawSolution (284) */
   export interface PalletElectionProviderMultiPhaseRawSolution extends Struct {
     readonly solution: JoystreamNodeRuntimeNposSolution16;
     readonly score: SpNposElectionsElectionScore;
     readonly round: u32;
   }
 
-  /** @name JoystreamNodeRuntimeNposSolution16 (279) */
+  /** @name JoystreamNodeRuntimeNposSolution16 (285) */
   export interface JoystreamNodeRuntimeNposSolution16 extends Struct {
     readonly votes1: Vec<ITuple<[Compact<u32>, Compact<u16>]>>;
     readonly votes2: Vec<ITuple<[Compact<u32>, ITuple<[Compact<u16>, Compact<PerU16>]>, Compact<u16>]>>;
@@ -2554,26 +2633,19 @@ declare module '@polkadot/types/lookup' {
     readonly votes16: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
   }
 
-  /** @name SpNposElectionsElectionScore (330) */
-  export interface SpNposElectionsElectionScore extends Struct {
-    readonly minimalStake: u128;
-    readonly sumStake: u128;
-    readonly sumStakeSquared: u128;
-  }
-
-  /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (331) */
+  /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (336) */
   export interface PalletElectionProviderMultiPhaseSolutionOrSnapshotSize extends Struct {
     readonly voters: Compact<u32>;
     readonly targets: Compact<u32>;
   }
 
-  /** @name SpNposElectionsSupport (335) */
+  /** @name SpNposElectionsSupport (340) */
   export interface SpNposElectionsSupport extends Struct {
     readonly total: u128;
     readonly voters: Vec<ITuple<[AccountId32, u128]>>;
   }
 
-  /** @name PalletStakingPalletCall (338) */
+  /** @name PalletStakingPalletCall (342) */
   export interface PalletStakingPalletCall extends Enum {
     readonly isBond: boolean;
     readonly asBond: {
@@ -2648,11 +2720,6 @@ declare module '@polkadot/types/lookup' {
     readonly asRebond: {
       readonly value: Compact<u128>;
     } & Struct;
-    readonly isSetHistoryDepth: boolean;
-    readonly asSetHistoryDepth: {
-      readonly newHistoryDepth: Compact<u32>;
-      readonly eraItemsDeleted: Compact<u32>;
-    } & Struct;
     readonly isReapStash: boolean;
     readonly asReapStash: {
       readonly stash: AccountId32;
@@ -2679,10 +2746,14 @@ declare module '@polkadot/types/lookup' {
     readonly asForceApplyMinCommission: {
       readonly validatorStash: AccountId32;
     } & Struct;
-    readonly type: 'Bond' | 'BondExtra' | 'Unbond' | 'WithdrawUnbonded' | 'Validate' | 'Nominate' | 'Chill' | 'SetPayee' | 'SetController' | 'SetValidatorCount' | 'IncreaseValidatorCount' | 'ScaleValidatorCount' | 'ForceNoEras' | 'ForceNewEra' | 'SetInvulnerables' | 'ForceUnstake' | 'ForceNewEraAlways' | 'CancelDeferredSlash' | 'PayoutStakers' | 'Rebond' | 'SetHistoryDepth' | 'ReapStash' | 'Kick' | 'SetStakingConfigs' | 'ChillOther' | 'ForceApplyMinCommission';
+    readonly isSetMinCommission: boolean;
+    readonly asSetMinCommission: {
+      readonly new_: Perbill;
+    } & Struct;
+    readonly type: 'Bond' | 'BondExtra' | 'Unbond' | 'WithdrawUnbonded' | 'Validate' | 'Nominate' | 'Chill' | 'SetPayee' | 'SetController' | 'SetValidatorCount' | 'IncreaseValidatorCount' | 'ScaleValidatorCount' | 'ForceNoEras' | 'ForceNewEra' | 'SetInvulnerables' | 'ForceUnstake' | 'ForceNewEraAlways' | 'CancelDeferredSlash' | 'PayoutStakers' | 'Rebond' | 'ReapStash' | 'Kick' | 'SetStakingConfigs' | 'ChillOther' | 'ForceApplyMinCommission' | 'SetMinCommission';
   }
 
-  /** @name PalletStakingRewardDestination (339) */
+  /** @name PalletStakingRewardDestination (343) */
   export interface PalletStakingRewardDestination extends Enum {
     readonly isStaked: boolean;
     readonly isStash: boolean;
@@ -2693,7 +2764,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Staked' | 'Stash' | 'Controller' | 'Account' | 'None';
   }
 
-  /** @name PalletStakingPalletConfigOpU128 (343) */
+  /** @name PalletStakingPalletConfigOpU128 (347) */
   export interface PalletStakingPalletConfigOpU128 extends Enum {
     readonly isNoop: boolean;
     readonly isSet: boolean;
@@ -2702,7 +2773,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Noop' | 'Set' | 'Remove';
   }
 
-  /** @name PalletStakingPalletConfigOpU32 (344) */
+  /** @name PalletStakingPalletConfigOpU32 (348) */
   export interface PalletStakingPalletConfigOpU32 extends Enum {
     readonly isNoop: boolean;
     readonly isSet: boolean;
@@ -2711,7 +2782,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Noop' | 'Set' | 'Remove';
   }
 
-  /** @name PalletStakingPalletConfigOpPercent (345) */
+  /** @name PalletStakingPalletConfigOpPercent (349) */
   export interface PalletStakingPalletConfigOpPercent extends Enum {
     readonly isNoop: boolean;
     readonly isSet: boolean;
@@ -2720,7 +2791,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Noop' | 'Set' | 'Remove';
   }
 
-  /** @name PalletStakingPalletConfigOpPerbill (346) */
+  /** @name PalletStakingPalletConfigOpPerbill (350) */
   export interface PalletStakingPalletConfigOpPerbill extends Enum {
     readonly isNoop: boolean;
     readonly isSet: boolean;
@@ -2729,7 +2800,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Noop' | 'Set' | 'Remove';
   }
 
-  /** @name PalletSessionCall (347) */
+  /** @name PalletSessionCall (351) */
   export interface PalletSessionCall extends Enum {
     readonly isSetKeys: boolean;
     readonly asSetKeys: {
@@ -2740,7 +2811,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'SetKeys' | 'PurgeKeys';
   }
 
-  /** @name JoystreamNodeRuntimeSessionKeys (348) */
+  /** @name JoystreamNodeRuntimeSessionKeys (352) */
   export interface JoystreamNodeRuntimeSessionKeys extends Struct {
     readonly grandpa: SpFinalityGrandpaAppPublic;
     readonly babe: SpConsensusBabeAppPublic;
@@ -2748,10 +2819,10 @@ declare module '@polkadot/types/lookup' {
     readonly authorityDiscovery: SpAuthorityDiscoveryAppPublic;
   }
 
-  /** @name SpAuthorityDiscoveryAppPublic (349) */
+  /** @name SpAuthorityDiscoveryAppPublic (353) */
   export interface SpAuthorityDiscoveryAppPublic extends SpCoreSr25519Public {}
 
-  /** @name PalletGrandpaCall (350) */
+  /** @name PalletGrandpaCall (354) */
   export interface PalletGrandpaCall extends Enum {
     readonly isReportEquivocation: boolean;
     readonly asReportEquivocation: {
@@ -2771,13 +2842,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'NoteStalled';
   }
 
-  /** @name SpFinalityGrandpaEquivocationProof (351) */
+  /** @name SpFinalityGrandpaEquivocationProof (355) */
   export interface SpFinalityGrandpaEquivocationProof extends Struct {
     readonly setId: u64;
     readonly equivocation: SpFinalityGrandpaEquivocation;
   }
 
-  /** @name SpFinalityGrandpaEquivocation (352) */
+  /** @name SpFinalityGrandpaEquivocation (356) */
   export interface SpFinalityGrandpaEquivocation extends Enum {
     readonly isPrevote: boolean;
     readonly asPrevote: FinalityGrandpaEquivocationPrevote;
@@ -2786,7 +2857,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Prevote' | 'Precommit';
   }
 
-  /** @name FinalityGrandpaEquivocationPrevote (353) */
+  /** @name FinalityGrandpaEquivocationPrevote (357) */
   export interface FinalityGrandpaEquivocationPrevote extends Struct {
     readonly roundNumber: u64;
     readonly identity: SpFinalityGrandpaAppPublic;
@@ -2794,19 +2865,19 @@ declare module '@polkadot/types/lookup' {
     readonly second: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
   }
 
-  /** @name FinalityGrandpaPrevote (354) */
+  /** @name FinalityGrandpaPrevote (358) */
   export interface FinalityGrandpaPrevote extends Struct {
     readonly targetHash: H256;
     readonly targetNumber: u32;
   }
 
-  /** @name SpFinalityGrandpaAppSignature (355) */
+  /** @name SpFinalityGrandpaAppSignature (359) */
   export interface SpFinalityGrandpaAppSignature extends SpCoreEd25519Signature {}
 
-  /** @name SpCoreEd25519Signature (356) */
+  /** @name SpCoreEd25519Signature (360) */
   export interface SpCoreEd25519Signature extends U8aFixed {}
 
-  /** @name FinalityGrandpaEquivocationPrecommit (359) */
+  /** @name FinalityGrandpaEquivocationPrecommit (363) */
   export interface FinalityGrandpaEquivocationPrecommit extends Struct {
     readonly roundNumber: u64;
     readonly identity: SpFinalityGrandpaAppPublic;
@@ -2814,13 +2885,13 @@ declare module '@polkadot/types/lookup' {
     readonly second: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
   }
 
-  /** @name FinalityGrandpaPrecommit (360) */
+  /** @name FinalityGrandpaPrecommit (364) */
   export interface FinalityGrandpaPrecommit extends Struct {
     readonly targetHash: H256;
     readonly targetNumber: u32;
   }
 
-  /** @name PalletImOnlineCall (362) */
+  /** @name PalletImOnlineCall (366) */
   export interface PalletImOnlineCall extends Enum {
     readonly isHeartbeat: boolean;
     readonly asHeartbeat: {
@@ -2830,7 +2901,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Heartbeat';
   }
 
-  /** @name PalletImOnlineHeartbeat (363) */
+  /** @name PalletImOnlineHeartbeat (367) */
   export interface PalletImOnlineHeartbeat extends Struct {
     readonly blockNumber: u32;
     readonly networkState: SpCoreOffchainOpaqueNetworkState;
@@ -2839,42 +2910,19 @@ declare module '@polkadot/types/lookup' {
     readonly validatorsLen: u32;
   }
 
-  /** @name SpCoreOffchainOpaqueNetworkState (364) */
+  /** @name SpCoreOffchainOpaqueNetworkState (368) */
   export interface SpCoreOffchainOpaqueNetworkState extends Struct {
     readonly peerId: Bytes;
     readonly externalAddresses: Vec<Bytes>;
   }
 
-  /** @name PalletImOnlineSr25519AppSr25519Signature (368) */
+  /** @name PalletImOnlineSr25519AppSr25519Signature (372) */
   export interface PalletImOnlineSr25519AppSr25519Signature extends SpCoreSr25519Signature {}
 
-  /** @name SpCoreSr25519Signature (369) */
+  /** @name SpCoreSr25519Signature (373) */
   export interface SpCoreSr25519Signature extends U8aFixed {}
 
-  /** @name PalletSudoCall (370) */
-  export interface PalletSudoCall extends Enum {
-    readonly isSudo: boolean;
-    readonly asSudo: {
-      readonly call: Call;
-    } & Struct;
-    readonly isSudoUncheckedWeight: boolean;
-    readonly asSudoUncheckedWeight: {
-      readonly call: Call;
-      readonly weight: u64;
-    } & Struct;
-    readonly isSetKey: boolean;
-    readonly asSetKey: {
-      readonly new_: AccountId32;
-    } & Struct;
-    readonly isSudoAs: boolean;
-    readonly asSudoAs: {
-      readonly who: AccountId32;
-      readonly call: Call;
-    } & Struct;
-    readonly type: 'Sudo' | 'SudoUncheckedWeight' | 'SetKey' | 'SudoAs';
-  }
-
-  /** @name PalletBagsListCall (371) */
+  /** @name PalletBagsListCall (374) */
   export interface PalletBagsListCall extends Enum {
     readonly isRebag: boolean;
     readonly asRebag: {
@@ -2887,7 +2935,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Rebag' | 'PutInFrontOf';
   }
 
-  /** @name PalletVestingCall (372) */
+  /** @name PalletVestingCall (375) */
   export interface PalletVestingCall extends Enum {
     readonly isVest: boolean;
     readonly isVestOther: boolean;
@@ -2913,14 +2961,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Vest' | 'VestOther' | 'VestedTransfer' | 'ForceVestedTransfer' | 'MergeSchedules';
   }
 
-  /** @name PalletVestingVestingInfo (373) */
+  /** @name PalletVestingVestingInfo (376) */
   export interface PalletVestingVestingInfo extends Struct {
     readonly locked: u128;
     readonly perBlock: u128;
     readonly startingBlock: u32;
   }
 
-  /** @name PalletMultisigCall (374) */
+  /** @name PalletMultisigCall (377) */
   export interface PalletMultisigCall extends Enum {
     readonly isAsMultiThreshold1: boolean;
     readonly asAsMultiThreshold1: {
@@ -2932,9 +2980,8 @@ declare module '@polkadot/types/lookup' {
       readonly threshold: u16;
       readonly otherSignatories: Vec<AccountId32>;
       readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
-      readonly call: WrapperKeepOpaque<Call>;
-      readonly storeCall: bool;
-      readonly maxWeight: u64;
+      readonly call: Call;
+      readonly maxWeight: SpWeightsWeightV2Weight;
     } & Struct;
     readonly isApproveAsMulti: boolean;
     readonly asApproveAsMulti: {
@@ -2942,7 +2989,7 @@ declare module '@polkadot/types/lookup' {
       readonly otherSignatories: Vec<AccountId32>;
       readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
       readonly callHash: U8aFixed;
-      readonly maxWeight: u64;
+      readonly maxWeight: SpWeightsWeightV2Weight;
     } & Struct;
     readonly isCancelAsMulti: boolean;
     readonly asCancelAsMulti: {
@@ -2954,7 +3001,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
   }
 
-  /** @name PalletCouncilCall (377) */
+  /** @name PalletCouncilCall (379) */
   export interface PalletCouncilCall extends Enum {
     readonly isAnnounceCandidacy: boolean;
     readonly asAnnounceCandidacy: {
@@ -3015,7 +3062,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AnnounceCandidacy' | 'ReleaseCandidacyStake' | 'WithdrawCandidacy' | 'SetCandidacyNote' | 'SetBudget' | 'PlanBudgetRefill' | 'SetBudgetIncrement' | 'SetCouncilorReward' | 'FundingRequest' | 'FundCouncilBudget' | 'CouncilorRemark' | 'CandidateRemark';
   }
 
-  /** @name PalletReferendumCall (378) */
+  /** @name PalletReferendumCall (380) */
   export interface PalletReferendumCall extends Enum {
     readonly isVote: boolean;
     readonly asVote: {
@@ -3028,10 +3075,11 @@ declare module '@polkadot/types/lookup' {
       readonly voteOptionId: u64;
     } & Struct;
     readonly isReleaseVoteStake: boolean;
-    readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake';
+    readonly isOptOutOfVoting: boolean;
+    readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake' | 'OptOutOfVoting';
   }
 
-  /** @name PalletMembershipCall (379) */
+  /** @name PalletMembershipCall (381) */
   export interface PalletMembershipCall extends Enum {
     readonly isBuyMembership: boolean;
     readonly asBuyMembership: {
@@ -3106,6 +3154,7 @@ declare module '@polkadot/types/lookup' {
     readonly asMemberRemark: {
       readonly memberId: u64;
       readonly msg: Bytes;
+      readonly payment: Option<ITuple<[AccountId32, u128]>>;
     } & Struct;
     readonly isCreateMember: boolean;
     readonly asCreateMember: {
@@ -3114,7 +3163,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'BuyMembership' | 'UpdateProfile' | 'UpdateAccounts' | 'UpdateProfileVerification' | 'SetReferralCut' | 'TransferInvites' | 'InviteMember' | 'GiftMembership' | 'SetMembershipPrice' | 'SetLeaderInvitationQuota' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'AddStakingAccountCandidate' | 'RemoveStakingAccount' | 'ConfirmStakingAccount' | 'MemberRemark' | 'CreateMember';
   }
 
-  /** @name PalletForumCall (380) */
+  /** @name PalletForumCall (382) */
   export interface PalletForumCall extends Enum {
     readonly isUpdateCategoryMembershipOfModerator: boolean;
     readonly asUpdateCategoryMembershipOfModerator: {
@@ -3225,7 +3274,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
   }
 
-  /** @name PalletConstitutionCall (381) */
+  /** @name PalletConstitutionCall (383) */
   export interface PalletConstitutionCall extends Enum {
     readonly isAmendConstitution: boolean;
     readonly asAmendConstitution: {
@@ -3234,7 +3283,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AmendConstitution';
   }
 
-  /** @name PalletBountyCall (382) */
+  /** @name PalletBountyCall (384) */
   export interface PalletBountyCall extends Enum {
     readonly isCreateBounty: boolean;
     readonly asCreateBounty: {
@@ -3323,7 +3372,30 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'CreateBounty' | 'FundBounty' | 'TerminateBounty' | 'SwitchOracle' | 'WithdrawFunding' | 'AnnounceWorkEntry' | 'SubmitWork' | 'EndWorkingPeriod' | 'SubmitOracleJudgment' | 'WithdrawEntrantStake' | 'WithdrawOracleReward' | 'ContributorRemark' | 'OracleRemark' | 'EntrantRemark' | 'CreatorRemark';
   }
 
-  /** @name PalletContentCall (384) */
+  /** @name PalletJoystreamUtilityCall (385) */
+  export interface PalletJoystreamUtilityCall extends Enum {
+    readonly isExecuteSignalProposal: boolean;
+    readonly asExecuteSignalProposal: {
+      readonly signal: Bytes;
+    } & Struct;
+    readonly isExecuteRuntimeUpgradeProposal: boolean;
+    readonly asExecuteRuntimeUpgradeProposal: {
+      readonly wasm: Bytes;
+    } & Struct;
+    readonly isUpdateWorkingGroupBudget: boolean;
+    readonly asUpdateWorkingGroupBudget: {
+      readonly workingGroup: PalletCommonWorkingGroupIterableEnumsWorkingGroup;
+      readonly amount: u128;
+      readonly balanceKind: PalletCommonBalanceKind;
+    } & Struct;
+    readonly isBurnAccountTokens: boolean;
+    readonly asBurnAccountTokens: {
+      readonly amount: u128;
+    } & Struct;
+    readonly type: 'ExecuteSignalProposal' | 'ExecuteRuntimeUpgradeProposal' | 'UpdateWorkingGroupBudget' | 'BurnAccountTokens';
+  }
+
+  /** @name PalletContentCall (386) */
   export interface PalletContentCall extends Enum {
     readonly isCreateCuratorGroup: boolean;
     readonly asCreateCuratorGroup: {
@@ -3389,14 +3461,6 @@ declare module '@polkadot/types/lookup' {
       readonly storageBucketsNumWitness: u32;
       readonly rationale: Bytes;
     } & Struct;
-    readonly isDeleteChannelAsModerator: boolean;
-    readonly asDeleteChannelAsModerator: {
-      readonly actor: PalletContentPermissionsContentActor;
-      readonly channelId: u64;
-      readonly channelBagWitness: PalletContentChannelBagWitness;
-      readonly numObjectsToDelete: u64;
-      readonly rationale: Bytes;
-    } & Struct;
     readonly isSetChannelVisibilityAsModerator: boolean;
     readonly asSetChannelVisibilityAsModerator: {
       readonly actor: PalletContentPermissionsContentActor;
@@ -3431,14 +3495,6 @@ declare module '@polkadot/types/lookup' {
       readonly assetsToRemove: BTreeSet<u64>;
       readonly rationale: Bytes;
     } & Struct;
-    readonly isDeleteVideoAsModerator: boolean;
-    readonly asDeleteVideoAsModerator: {
-      readonly actor: PalletContentPermissionsContentActor;
-      readonly videoId: u64;
-      readonly storageBucketsNumWitness: Option<u32>;
-      readonly numObjectsToDelete: u64;
-      readonly rationale: Bytes;
-    } & Struct;
     readonly isSetVideoVisibilityAsModerator: boolean;
     readonly asSetVideoVisibilityAsModerator: {
       readonly actor: PalletContentPermissionsContentActor;
@@ -3449,6 +3505,7 @@ declare module '@polkadot/types/lookup' {
     readonly isUpdateChannelPayouts: boolean;
     readonly asUpdateChannelPayouts: {
       readonly params: PalletContentUpdateChannelPayoutsParametersRecord;
+      readonly uploaderAccount: AccountId32;
     } & Struct;
     readonly isClaimChannelReward: boolean;
     readonly asClaimChannelReward: {
@@ -3470,12 +3527,6 @@ declare module '@polkadot/types/lookup' {
     readonly asUpdateVideoStateBloatBond: {
       readonly newVideoStateBloatBond: u128;
     } & Struct;
-    readonly isClaimAndWithdrawChannelReward: boolean;
-    readonly asClaimAndWithdrawChannelReward: {
-      readonly actor: PalletContentPermissionsContentActor;
-      readonly proof: Vec<PalletCommonMerkleTreeProofElementRecord>;
-      readonly item: PalletContentPullPaymentElement;
-    } & Struct;
     readonly isIssueNft: boolean;
     readonly asIssueNft: {
       readonly actor: PalletContentPermissionsContentActor;
@@ -3695,43 +3746,60 @@ declare module '@polkadot/types/lookup' {
       readonly actor: PalletContentPermissionsContentActor;
       readonly channelId: u64;
     } & Struct;
-    readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken';
+    readonly isActivateAmm: boolean;
+    readonly asActivateAmm: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly params: PalletProjectTokenAmmParams;
+    } & Struct;
+    readonly isDeactivateAmm: boolean;
+    readonly asDeactivateAmm: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+    } & Struct;
+    readonly isCreatorTokenIssuerRemark: boolean;
+    readonly asCreatorTokenIssuerRemark: {
+      readonly actor: PalletContentPermissionsContentActor;
+      readonly channelId: u64;
+      readonly remark: Bytes;
+    } & Struct;
+    readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken' | 'ActivateAmm' | 'DeactivateAmm' | 'CreatorTokenIssuerRemark';
   }
 
-  /** @name PalletContentChannelBagWitness (385) */
+  /** @name PalletContentChannelBagWitness (387) */
   export interface PalletContentChannelBagWitness extends Struct {
     readonly storageBucketsNum: u32;
     readonly distributionBucketsNum: u32;
   }
 
-  /** @name PalletCommonMerkleTreeProofElementRecord (387) */
+  /** @name PalletCommonMerkleTreeProofElementRecord (389) */
   export interface PalletCommonMerkleTreeProofElementRecord extends Struct {
     readonly hash_: H256;
     readonly side: PalletCommonMerkleTreeSide;
   }
 
-  /** @name PalletCommonMerkleTreeSide (388) */
+  /** @name PalletCommonMerkleTreeSide (390) */
   export interface PalletCommonMerkleTreeSide extends Enum {
     readonly isLeft: boolean;
     readonly isRight: boolean;
     readonly type: 'Left' | 'Right';
   }
 
-  /** @name PalletContentPullPaymentElement (389) */
+  /** @name PalletContentPullPaymentElement (391) */
   export interface PalletContentPullPaymentElement extends Struct {
     readonly channelId: u64;
     readonly cumulativeRewardEarned: u128;
     readonly reason: H256;
   }
 
-  /** @name PalletContentInitTransferParameters (390) */
+  /** @name PalletContentInitTransferParameters (392) */
   export interface PalletContentInitTransferParameters extends Struct {
     readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
     readonly price: u128;
     readonly newOwner: PalletContentChannelOwner;
   }
 
-  /** @name PalletProjectTokenTokenSaleParams (391) */
+  /** @name PalletProjectTokenTokenSaleParams (393) */
   export interface PalletProjectTokenTokenSaleParams extends Struct {
     readonly unitPrice: u128;
     readonly upperBoundQuantity: u128;
@@ -3742,10 +3810,16 @@ declare module '@polkadot/types/lookup' {
     readonly metadata: Option<Bytes>;
   }
 
-  /** @name PalletProjectTokenTransfersPaymentWithVesting (392) */
+  /** @name PalletProjectTokenTransfersPaymentWithVesting (394) */
   export interface PalletProjectTokenTransfersPaymentWithVesting extends BTreeMap<u64, PalletProjectTokenPaymentWithVesting> {}
 
-  /** @name PalletStorageCall (396) */
+  /** @name PalletProjectTokenAmmParams (398) */
+  export interface PalletProjectTokenAmmParams extends Struct {
+    readonly slope: Permill;
+    readonly intercept: Permill;
+  }
+
+  /** @name PalletStorageCall (399) */
   export interface PalletStorageCall extends Enum {
     readonly isDeleteStorageBucket: boolean;
     readonly asDeleteStorageBucket: {
@@ -3909,10 +3983,6 @@ declare module '@polkadot/types/lookup' {
       readonly bucketId: PalletStorageDistributionBucketIdRecord;
       readonly metadata: Bytes;
     } & Struct;
-    readonly isSudoUploadDataObjects: boolean;
-    readonly asSudoUploadDataObjects: {
-      readonly params: PalletStorageUploadParametersRecord;
-    } & Struct;
     readonly isStorageOperatorRemark: boolean;
     readonly asStorageOperatorRemark: {
       readonly workerId: u64;
@@ -3925,10 +3995,10 @@ declare module '@polkadot/types/lookup' {
       readonly distributionBucketId: PalletStorageDistributionBucketIdRecord;
       readonly msg: Bytes;
     } & Struct;
-    readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'SudoUploadDataObjects' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
+    readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
   }
 
-  /** @name PalletProjectTokenCall (397) */
+  /** @name PalletProjectTokenCall (400) */
   export interface PalletProjectTokenCall extends Enum {
     readonly isTransfer: boolean;
     readonly asTransfer: {
@@ -3971,28 +4041,42 @@ declare module '@polkadot/types/lookup' {
       readonly tokenId: u64;
       readonly memberId: u64;
     } & Struct;
-    readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit';
+    readonly isBuyOnAmm: boolean;
+    readonly asBuyOnAmm: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+      readonly amount: u128;
+      readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+    } & Struct;
+    readonly isSellOnAmm: boolean;
+    readonly asSellOnAmm: {
+      readonly tokenId: u64;
+      readonly memberId: u64;
+      readonly amount: u128;
+      readonly slippageTolerance: Option<ITuple<[Permill, u128]>>;
+    } & Struct;
+    readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit' | 'BuyOnAmm' | 'SellOnAmm';
   }
 
-  /** @name PalletProjectTokenTransfersPayment (398) */
+  /** @name PalletProjectTokenTransfersPayment (401) */
   export interface PalletProjectTokenTransfersPayment extends BTreeMap<u64, PalletProjectTokenPayment> {}
 
-  /** @name PalletProjectTokenPayment (399) */
+  /** @name PalletProjectTokenPayment (402) */
   export interface PalletProjectTokenPayment extends Struct {
     readonly amount: u128;
   }
 
-  /** @name PalletProjectTokenMerkleProof (403) */
+  /** @name PalletProjectTokenMerkleProof (406) */
   export interface PalletProjectTokenMerkleProof extends Vec<ITuple<[H256, PalletProjectTokenMerkleSide]>> {}
 
-  /** @name PalletProjectTokenMerkleSide (406) */
+  /** @name PalletProjectTokenMerkleSide (409) */
   export interface PalletProjectTokenMerkleSide extends Enum {
     readonly isRight: boolean;
     readonly isLeft: boolean;
     readonly type: 'Right' | 'Left';
   }
 
-  /** @name PalletProposalsEngineCall (407) */
+  /** @name PalletProposalsEngineCall (412) */
   export interface PalletProposalsEngineCall extends Enum {
     readonly isVote: boolean;
     readonly asVote: {
@@ -4019,7 +4103,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Vote' | 'CancelProposal' | 'VetoProposal' | 'ProposerRemark';
   }
 
-  /** @name PalletProposalsDiscussionCall (408) */
+  /** @name PalletProposalsDiscussionCall (413) */
   export interface PalletProposalsDiscussionCall extends Enum {
     readonly isAddPost: boolean;
     readonly asAddPost: {
@@ -4050,7 +4134,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AddPost' | 'DeletePost' | 'UpdatePost' | 'ChangeThreadMode';
   }
 
-  /** @name PalletProposalsCodexCall (409) */
+  /** @name PalletProposalsCodexCall (414) */
   export interface PalletProposalsCodexCall extends Enum {
     readonly isCreateProposal: boolean;
     readonly asCreateProposal: {
@@ -4060,7 +4144,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'CreateProposal';
   }
 
-  /** @name PalletWorkingGroupCall (410) */
+  /** @name PalletWorkingGroupCall (415) */
   export interface PalletWorkingGroupCall extends Enum {
     readonly isAddOpening: boolean;
     readonly asAddOpening: {
@@ -4160,7 +4244,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AddOpening' | 'ApplyOnOpening' | 'FillOpening' | 'UpdateRoleAccount' | 'LeaveRole' | 'TerminateRole' | 'SlashStake' | 'DecreaseStake' | 'IncreaseStake' | 'WithdrawApplication' | 'CancelOpening' | 'SetBudget' | 'UpdateRewardAccount' | 'UpdateRewardAmount' | 'SetStatusText' | 'SpendFromBudget' | 'FundWorkingGroupBudget' | 'LeadRemark' | 'WorkerRemark';
   }
 
-  /** @name JoystreamNodeRuntimeOriginCaller (419) */
+  /** @name JoystreamNodeRuntimeOriginCaller (424) */
   export interface JoystreamNodeRuntimeOriginCaller extends Enum {
     readonly isSystem: boolean;
     readonly asSystem: FrameSupportDispatchRawOrigin;
@@ -4168,7 +4252,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'System' | 'Void';
   }
 
-  /** @name FrameSupportDispatchRawOrigin (420) */
+  /** @name FrameSupportDispatchRawOrigin (425) */
   export interface FrameSupportDispatchRawOrigin extends Enum {
     readonly isRoot: boolean;
     readonly isSigned: boolean;
@@ -4177,16 +4261,16 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Root' | 'Signed' | 'None';
   }
 
-  /** @name SpCoreVoid (421) */
+  /** @name SpCoreVoid (426) */
   export type SpCoreVoid = Null;
 
-  /** @name PalletUtilityError (422) */
+  /** @name PalletUtilityError (427) */
   export interface PalletUtilityError extends Enum {
     readonly isTooManyCalls: boolean;
     readonly type: 'TooManyCalls';
   }
 
-  /** @name SpConsensusBabeDigestsPreDigest (429) */
+  /** @name SpConsensusBabeDigestsPreDigest (434) */
   export interface SpConsensusBabeDigestsPreDigest extends Enum {
     readonly isPrimary: boolean;
     readonly asPrimary: SpConsensusBabeDigestsPrimaryPreDigest;
@@ -4197,7 +4281,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Primary' | 'SecondaryPlain' | 'SecondaryVRF';
   }
 
-  /** @name SpConsensusBabeDigestsPrimaryPreDigest (430) */
+  /** @name SpConsensusBabeDigestsPrimaryPreDigest (435) */
   export interface SpConsensusBabeDigestsPrimaryPreDigest extends Struct {
     readonly authorityIndex: u32;
     readonly slot: u64;
@@ -4205,13 +4289,13 @@ declare module '@polkadot/types/lookup' {
     readonly vrfProof: U8aFixed;
   }
 
-  /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (431) */
+  /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (436) */
   export interface SpConsensusBabeDigestsSecondaryPlainPreDigest extends Struct {
     readonly authorityIndex: u32;
     readonly slot: u64;
   }
 
-  /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (432) */
+  /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (437) */
   export interface SpConsensusBabeDigestsSecondaryVRFPreDigest extends Struct {
     readonly authorityIndex: u32;
     readonly slot: u64;
@@ -4219,13 +4303,13 @@ declare module '@polkadot/types/lookup' {
     readonly vrfProof: U8aFixed;
   }
 
-  /** @name SpConsensusBabeBabeEpochConfiguration (434) */
+  /** @name SpConsensusBabeBabeEpochConfiguration (439) */
   export interface SpConsensusBabeBabeEpochConfiguration extends Struct {
     readonly c: ITuple<[u64, u64]>;
     readonly allowedSlots: SpConsensusBabeAllowedSlots;
   }
 
-  /** @name PalletBabeError (435) */
+  /** @name PalletBabeError (441) */
   export interface PalletBabeError extends Enum {
     readonly isInvalidEquivocationProof: boolean;
     readonly isInvalidKeyOwnershipProof: boolean;
@@ -4234,35 +4318,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidEquivocationProof' | 'InvalidKeyOwnershipProof' | 'DuplicateOffenceReport' | 'InvalidConfiguration';
   }
 
-  /** @name PalletAuthorshipUncleEntryItem (437) */
-  export interface PalletAuthorshipUncleEntryItem extends Enum {
-    readonly isInclusionHeight: boolean;
-    readonly asInclusionHeight: u32;
-    readonly isUncle: boolean;
-    readonly asUncle: ITuple<[H256, Option<AccountId32>]>;
-    readonly type: 'InclusionHeight' | 'Uncle';
-  }
-
-  /** @name PalletAuthorshipError (438) */
-  export interface PalletAuthorshipError extends Enum {
-    readonly isInvalidUncleParent: boolean;
-    readonly isUnclesAlreadySet: boolean;
-    readonly isTooManyUncles: boolean;
-    readonly isGenesisUncle: boolean;
-    readonly isTooHighUncle: boolean;
-    readonly isUncleAlreadyIncluded: boolean;
-    readonly isOldUncle: boolean;
-    readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
-  }
-
-  /** @name PalletBalancesBalanceLock (440) */
+  /** @name PalletBalancesBalanceLock (443) */
   export interface PalletBalancesBalanceLock extends Struct {
     readonly id: U8aFixed;
     readonly amount: u128;
     readonly reasons: PalletBalancesReasons;
   }
 
-  /** @name PalletBalancesReasons (441) */
+  /** @name PalletBalancesReasons (444) */
   export interface PalletBalancesReasons extends Enum {
     readonly isFee: boolean;
     readonly isMisc: boolean;
@@ -4270,20 +4333,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Fee' | 'Misc' | 'All';
   }
 
-  /** @name PalletBalancesReserveData (444) */
+  /** @name PalletBalancesReserveData (447) */
   export interface PalletBalancesReserveData extends Struct {
     readonly id: U8aFixed;
     readonly amount: u128;
   }
 
-  /** @name PalletBalancesReleases (446) */
-  export interface PalletBalancesReleases extends Enum {
-    readonly isV100: boolean;
-    readonly isV200: boolean;
-    readonly type: 'V100' | 'V200';
-  }
-
-  /** @name PalletBalancesError (447) */
+  /** @name PalletBalancesError (449) */
   export interface PalletBalancesError extends Enum {
     readonly isVestingBalance: boolean;
     readonly isLiquidityRestrictions: boolean;
@@ -4296,23 +4352,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
   }
 
-  /** @name PalletTransactionPaymentReleases (449) */
+  /** @name PalletTransactionPaymentReleases (451) */
   export interface PalletTransactionPaymentReleases extends Enum {
     readonly isV1Ancient: boolean;
     readonly isV2: boolean;
     readonly type: 'V1Ancient' | 'V2';
   }
 
-  /** @name PalletElectionProviderMultiPhasePhase (450) */
-  export interface PalletElectionProviderMultiPhasePhase extends Enum {
-    readonly isOff: boolean;
-    readonly isSigned: boolean;
-    readonly isUnsigned: boolean;
-    readonly asUnsigned: ITuple<[bool, u32]>;
-    readonly isEmergency: boolean;
-    readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
-  }
-
   /** @name PalletElectionProviderMultiPhaseReadySolution (452) */
   export interface PalletElectionProviderMultiPhaseReadySolution extends Struct {
     readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
@@ -4320,7 +4366,7 @@ declare module '@polkadot/types/lookup' {
     readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
   }
 
-  /** @name PalletElectionProviderMultiPhaseRoundSnapshot (453) */
+  /** @name PalletElectionProviderMultiPhaseRoundSnapshot (454) */
   export interface PalletElectionProviderMultiPhaseRoundSnapshot extends Struct {
     readonly voters: Vec<ITuple<[AccountId32, u64, Vec<AccountId32>]>>;
     readonly targets: Vec<AccountId32>;
@@ -4348,7 +4394,9 @@ declare module '@polkadot/types/lookup' {
     readonly isInvalidSubmissionIndex: boolean;
     readonly isCallNotAllowed: boolean;
     readonly isFallbackFailed: boolean;
-    readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed';
+    readonly isBoundNotMet: boolean;
+    readonly isTooManyWinners: boolean;
+    readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed' | 'BoundNotMet' | 'TooManyWinners';
   }
 
   /** @name PalletStakingStakingLedger (463) */
@@ -4366,34 +4414,25 @@ declare module '@polkadot/types/lookup' {
     readonly era: Compact<u32>;
   }
 
-  /** @name PalletStakingNominations (467) */
+  /** @name PalletStakingNominations (468) */
   export interface PalletStakingNominations extends Struct {
     readonly targets: Vec<AccountId32>;
     readonly submittedIn: u32;
     readonly suppressed: bool;
   }
 
-  /** @name PalletStakingActiveEraInfo (468) */
+  /** @name PalletStakingActiveEraInfo (469) */
   export interface PalletStakingActiveEraInfo extends Struct {
     readonly index: u32;
     readonly start: Option<u64>;
   }
 
-  /** @name PalletStakingEraRewardPoints (470) */
+  /** @name PalletStakingEraRewardPoints (471) */
   export interface PalletStakingEraRewardPoints extends Struct {
     readonly total: u32;
     readonly individual: BTreeMap<AccountId32, u32>;
   }
 
-  /** @name PalletStakingForcing (474) */
-  export interface PalletStakingForcing extends Enum {
-    readonly isNotForcing: boolean;
-    readonly isForceNew: boolean;
-    readonly isForceNone: boolean;
-    readonly isForceAlways: boolean;
-    readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
-  }
-
   /** @name PalletStakingUnappliedSlash (476) */
   export interface PalletStakingUnappliedSlash extends Struct {
     readonly validator: AccountId32;
@@ -4417,21 +4456,7 @@ declare module '@polkadot/types/lookup' {
     readonly paidOut: u128;
   }
 
-  /** @name PalletStakingReleases (482) */
-  export interface PalletStakingReleases extends Enum {
-    readonly isV100Ancient: boolean;
-    readonly isV200: boolean;
-    readonly isV300: boolean;
-    readonly isV400: boolean;
-    readonly isV500: boolean;
-    readonly isV600: boolean;
-    readonly isV700: boolean;
-    readonly isV800: boolean;
-    readonly isV900: boolean;
-    readonly type: 'V100Ancient' | 'V200' | 'V300' | 'V400' | 'V500' | 'V600' | 'V700' | 'V800' | 'V900';
-  }
-
-  /** @name PalletStakingPalletError (483) */
+  /** @name PalletStakingPalletError (482) */
   export interface PalletStakingPalletError extends Enum {
     readonly isNotController: boolean;
     readonly isNotStash: boolean;
@@ -4457,14 +4482,15 @@ declare module '@polkadot/types/lookup' {
     readonly isTooManyNominators: boolean;
     readonly isTooManyValidators: boolean;
     readonly isCommissionTooLow: boolean;
+    readonly isBoundNotMet: boolean;
     readonly isBondingRestricted: boolean;
-    readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BondingRestricted';
+    readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BoundNotMet' | 'BondingRestricted';
   }
 
-  /** @name SpCoreCryptoKeyTypeId (487) */
+  /** @name SpCoreCryptoKeyTypeId (486) */
   export interface SpCoreCryptoKeyTypeId extends U8aFixed {}
 
-  /** @name PalletSessionError (488) */
+  /** @name PalletSessionError (487) */
   export interface PalletSessionError extends Enum {
     readonly isInvalidProof: boolean;
     readonly isNoAssociatedValidatorId: boolean;
@@ -4474,7 +4500,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
   }
 
-  /** @name PalletGrandpaStoredState (490) */
+  /** @name PalletGrandpaStoredState (489) */
   export interface PalletGrandpaStoredState extends Enum {
     readonly isLive: boolean;
     readonly isPendingPause: boolean;
@@ -4491,7 +4517,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Live' | 'PendingPause' | 'Paused' | 'PendingResume';
   }
 
-  /** @name PalletGrandpaStoredPendingChange (491) */
+  /** @name PalletGrandpaStoredPendingChange (490) */
   export interface PalletGrandpaStoredPendingChange extends Struct {
     readonly scheduledAt: u32;
     readonly delay: u32;
@@ -4499,7 +4525,7 @@ declare module '@polkadot/types/lookup' {
     readonly forced: Option<u32>;
   }
 
-  /** @name PalletGrandpaError (493) */
+  /** @name PalletGrandpaError (492) */
   export interface PalletGrandpaError extends Enum {
     readonly isPauseFailed: boolean;
     readonly isResumeFailed: boolean;
@@ -4511,32 +4537,26 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'PauseFailed' | 'ResumeFailed' | 'ChangePending' | 'TooSoon' | 'InvalidKeyOwnershipProof' | 'InvalidEquivocationProof' | 'DuplicateOffenceReport';
   }
 
-  /** @name PalletImOnlineBoundedOpaqueNetworkState (499) */
+  /** @name PalletImOnlineBoundedOpaqueNetworkState (498) */
   export interface PalletImOnlineBoundedOpaqueNetworkState extends Struct {
     readonly peerId: Bytes;
     readonly externalAddresses: Vec<Bytes>;
   }
 
-  /** @name PalletImOnlineError (503) */
+  /** @name PalletImOnlineError (502) */
   export interface PalletImOnlineError extends Enum {
     readonly isInvalidKey: boolean;
     readonly isDuplicatedHeartbeat: boolean;
     readonly type: 'InvalidKey' | 'DuplicatedHeartbeat';
   }
 
-  /** @name SpStakingOffenceOffenceDetails (504) */
+  /** @name SpStakingOffenceOffenceDetails (503) */
   export interface SpStakingOffenceOffenceDetails extends Struct {
     readonly offender: ITuple<[AccountId32, PalletStakingExposure]>;
     readonly reporters: Vec<AccountId32>;
   }
 
-  /** @name PalletSudoError (507) */
-  export interface PalletSudoError extends Enum {
-    readonly isRequireSudo: boolean;
-    readonly type: 'RequireSudo';
-  }
-
-  /** @name PalletBagsListListNode (508) */
+  /** @name PalletBagsListListNode (506) */
   export interface PalletBagsListListNode extends Struct {
     readonly id: AccountId32;
     readonly prev: Option<AccountId32>;
@@ -4545,20 +4565,20 @@ declare module '@polkadot/types/lookup' {
     readonly score: u64;
   }
 
-  /** @name PalletBagsListListBag (509) */
+  /** @name PalletBagsListListBag (507) */
   export interface PalletBagsListListBag extends Struct {
     readonly head: Option<AccountId32>;
     readonly tail: Option<AccountId32>;
   }
 
-  /** @name PalletBagsListError (510) */
+  /** @name PalletBagsListError (508) */
   export interface PalletBagsListError extends Enum {
     readonly isList: boolean;
     readonly asList: PalletBagsListListListError;
     readonly type: 'List';
   }
 
-  /** @name PalletBagsListListListError (511) */
+  /** @name PalletBagsListListListError (509) */
   export interface PalletBagsListListListError extends Enum {
     readonly isDuplicate: boolean;
     readonly isNotHeavier: boolean;
@@ -4567,14 +4587,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';
   }
 
-  /** @name PalletVestingReleases (514) */
+  /** @name PalletVestingReleases (512) */
   export interface PalletVestingReleases extends Enum {
     readonly isV0: boolean;
     readonly isV1: boolean;
     readonly type: 'V0' | 'V1';
   }
 
-  /** @name PalletVestingError (515) */
+  /** @name PalletVestingError (513) */
   export interface PalletVestingError extends Enum {
     readonly isNotVesting: boolean;
     readonly isAtMaxVestingSchedules: boolean;
@@ -4584,7 +4604,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NotVesting' | 'AtMaxVestingSchedules' | 'AmountLow' | 'ScheduleIndexOutOfBounds' | 'InvalidScheduleParams';
   }
 
-  /** @name PalletMultisigMultisig (517) */
+  /** @name PalletMultisigMultisig (515) */
   export interface PalletMultisigMultisig extends Struct {
     readonly when: PalletMultisigTimepoint;
     readonly deposit: u128;
@@ -4592,7 +4612,7 @@ declare module '@polkadot/types/lookup' {
     readonly approvals: Vec<AccountId32>;
   }
 
-  /** @name PalletMultisigError (519) */
+  /** @name PalletMultisigError (517) */
   export interface PalletMultisigError extends Enum {
     readonly isMinimumThreshold: boolean;
     readonly isAlreadyApproved: boolean;
@@ -4611,13 +4631,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
   }
 
-  /** @name PalletCouncilCouncilStageUpdate (520) */
+  /** @name PalletCouncilCouncilStageUpdate (518) */
   export interface PalletCouncilCouncilStageUpdate extends Struct {
     readonly stage: PalletCouncilCouncilStage;
     readonly changedAt: u32;
   }
 
-  /** @name PalletCouncilCouncilStage (521) */
+  /** @name PalletCouncilCouncilStage (519) */
   export interface PalletCouncilCouncilStage extends Enum {
     readonly isAnnouncing: boolean;
     readonly asAnnouncing: PalletCouncilCouncilStageAnnouncing;
@@ -4628,23 +4648,23 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Announcing' | 'Election' | 'Idle';
   }
 
-  /** @name PalletCouncilCouncilStageAnnouncing (522) */
+  /** @name PalletCouncilCouncilStageAnnouncing (520) */
   export interface PalletCouncilCouncilStageAnnouncing extends Struct {
     readonly candidatesCount: u32;
     readonly endsAt: u32;
   }
 
-  /** @name PalletCouncilCouncilStageElection (523) */
+  /** @name PalletCouncilCouncilStageElection (521) */
   export interface PalletCouncilCouncilStageElection extends Struct {
     readonly candidatesCount: u32;
   }
 
-  /** @name PalletCouncilCouncilStageIdle (524) */
+  /** @name PalletCouncilCouncilStageIdle (522) */
   export interface PalletCouncilCouncilStageIdle extends Struct {
     readonly endsAt: u32;
   }
 
-  /** @name PalletCouncilCouncilMember (526) */
+  /** @name PalletCouncilCouncilMember (524) */
   export interface PalletCouncilCouncilMember extends Struct {
     readonly stakingAccountId: AccountId32;
     readonly rewardAccountId: AccountId32;
@@ -4654,7 +4674,7 @@ declare module '@polkadot/types/lookup' {
     readonly unpaidReward: u128;
   }
 
-  /** @name PalletCouncilCandidate (528) */
+  /** @name PalletCouncilCandidate (526) */
   export interface PalletCouncilCandidate extends Struct {
     readonly stakingAccountId: AccountId32;
     readonly rewardAccountId: AccountId32;
@@ -4664,7 +4684,7 @@ declare module '@polkadot/types/lookup' {
     readonly noteHash: Option<H256>;
   }
 
-  /** @name PalletCouncilError (529) */
+  /** @name PalletCouncilError (527) */
   export interface PalletCouncilError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isBadOrigin: boolean;
@@ -4693,7 +4713,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'BadOrigin' | 'CantCandidateNow' | 'CantReleaseStakeNow' | 'CandidacyStakeTooLow' | 'CantCandidateTwice' | 'ConflictingStake' | 'StakeStillNeeded' | 'NoStake' | 'InsufficientBalanceForStaking' | 'CantVoteForYourself' | 'MemberIdNotMatchAccount' | 'InvalidAccountToStakeReuse' | 'NotCandidatingNow' | 'CantWithdrawCandidacyNow' | 'NotCouncilor' | 'InsufficientFundsForFundingRequest' | 'ZeroBalanceFundRequest' | 'RepeatedFundRequestAccount' | 'EmptyFundingRequests' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'CandidateDoesNotExist' | 'InsufficientBalanceForTransfer';
   }
 
-  /** @name PalletReferendumReferendumStage (530) */
+  /** @name PalletReferendumReferendumStage (528) */
   export interface PalletReferendumReferendumStage extends Enum {
     readonly isInactive: boolean;
     readonly isVoting: boolean;
@@ -4703,7 +4723,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Inactive' | 'Voting' | 'Revealing';
   }
 
-  /** @name PalletReferendumReferendumStageVoting (532) */
+  /** @name PalletReferendumReferendumStageVoting (530) */
   export interface PalletReferendumReferendumStageVoting extends Struct {
     readonly started: u32;
     readonly winningTargetCount: u32;
@@ -4711,7 +4731,7 @@ declare module '@polkadot/types/lookup' {
     readonly endsAt: u32;
   }
 
-  /** @name PalletReferendumReferendumStageRevealing (533) */
+  /** @name PalletReferendumReferendumStageRevealing (531) */
   export interface PalletReferendumReferendumStageRevealing extends Struct {
     readonly started: u32;
     readonly winningTargetCount: u32;
@@ -4720,7 +4740,7 @@ declare module '@polkadot/types/lookup' {
     readonly endsAt: u32;
   }
 
-  /** @name PalletReferendumCastVote (534) */
+  /** @name PalletReferendumCastVote (532) */
   export interface PalletReferendumCastVote extends Struct {
     readonly commitment: H256;
     readonly cycleId: u64;
@@ -4728,7 +4748,7 @@ declare module '@polkadot/types/lookup' {
     readonly voteFor: Option<u64>;
   }
 
-  /** @name PalletReferendumError (535) */
+  /** @name PalletReferendumError (533) */
   export interface PalletReferendumError extends Enum {
     readonly isBadOrigin: boolean;
     readonly isReferendumNotRunning: boolean;
@@ -4743,10 +4763,11 @@ declare module '@polkadot/types/lookup' {
     readonly isUnstakingVoteInSameCycle: boolean;
     readonly isSaltTooLong: boolean;
     readonly isUnstakingForbidden: boolean;
-    readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden';
+    readonly isAccountAlreadyOptedOutOfVoting: boolean;
+    readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden' | 'AccountAlreadyOptedOutOfVoting';
   }
 
-  /** @name PalletMembershipMembershipObject (536) */
+  /** @name PalletMembershipMembershipObject (534) */
   export interface PalletMembershipMembershipObject extends Struct {
     readonly handleHash: H256;
     readonly rootAccount: AccountId32;
@@ -4755,13 +4776,13 @@ declare module '@polkadot/types/lookup' {
     readonly invites: u32;
   }
 
-  /** @name PalletMembershipStakingAccountMemberBinding (537) */
+  /** @name PalletMembershipStakingAccountMemberBinding (535) */
   export interface PalletMembershipStakingAccountMemberBinding extends Struct {
     readonly memberId: u64;
     readonly confirmed: bool;
   }
 
-  /** @name PalletMembershipError (538) */
+  /** @name PalletMembershipError (536) */
   export interface PalletMembershipError extends Enum {
     readonly isNotEnoughBalanceToBuyMembership: boolean;
     readonly isControllerAccountRequired: boolean;
@@ -4784,10 +4805,11 @@ declare module '@polkadot/types/lookup' {
     readonly isInsufficientBalanceToCoverStake: boolean;
     readonly isGifLockExceedsCredit: boolean;
     readonly isInsufficientBalanceToGift: boolean;
-    readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift';
+    readonly isInsufficientBalanceToCoverPayment: boolean;
+    readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift' | 'InsufficientBalanceToCoverPayment';
   }
 
-  /** @name PalletForumCategory (539) */
+  /** @name PalletForumCategory (537) */
   export interface PalletForumCategory extends Struct {
     readonly titleHash: H256;
     readonly descriptionHash: H256;
@@ -4799,7 +4821,7 @@ declare module '@polkadot/types/lookup' {
     readonly stickyThreadIds: BTreeSet<u64>;
   }
 
-  /** @name PalletForumThread (541) */
+  /** @name PalletForumThread (539) */
   export interface PalletForumThread extends Struct {
     readonly categoryId: u64;
     readonly authorId: u64;
@@ -4807,7 +4829,7 @@ declare module '@polkadot/types/lookup' {
     readonly numberOfEditablePosts: u64;
   }
 
-  /** @name PalletForumPost (542) */
+  /** @name PalletForumPost (540) */
   export interface PalletForumPost extends Struct {
     readonly threadId: u64;
     readonly textHash: H256;
@@ -4816,7 +4838,7 @@ declare module '@polkadot/types/lookup' {
     readonly lastEdited: u32;
   }
 
-  /** @name PalletForumError (543) */
+  /** @name PalletForumError (541) */
   export interface PalletForumError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isOriginNotForumLead: boolean;
@@ -4848,12 +4870,12 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero' | 'MaxNumberOfStickiedThreadsExceeded';
   }
 
-  /** @name PalletConstitutionConstitutionInfo (544) */
+  /** @name PalletConstitutionConstitutionInfo (542) */
   export interface PalletConstitutionConstitutionInfo extends Struct {
     readonly textHash: H256;
   }
 
-  /** @name PalletBountyBountyRecord (545) */
+  /** @name PalletBountyBountyRecord (543) */
   export interface PalletBountyBountyRecord extends Struct {
     readonly creationParams: PalletBountyBountyParametersBoundedBTreeSet;
     readonly totalFunding: u128;
@@ -4862,7 +4884,7 @@ declare module '@polkadot/types/lookup' {
     readonly hasUnpaidOracleReward: bool;
   }
 
-  /** @name PalletBountyBountyParametersBoundedBTreeSet (547) */
+  /** @name PalletBountyBountyParametersBoundedBTreeSet (545) */
   export interface PalletBountyBountyParametersBoundedBTreeSet extends Struct {
     readonly oracle: PalletBountyBountyActor;
     readonly contractType: PalletBountyAssuranceContractTypeBoundedBTreeSet;
@@ -4873,7 +4895,7 @@ declare module '@polkadot/types/lookup' {
     readonly fundingType: PalletBountyFundingType;
   }
 
-  /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (548) */
+  /** @name PalletBountyAssuranceContractTypeBoundedBTreeSet (546) */
   export interface PalletBountyAssuranceContractTypeBoundedBTreeSet extends Enum {
     readonly isOpen: boolean;
     readonly isClosed: boolean;
@@ -4881,7 +4903,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Open' | 'Closed';
   }
 
-  /** @name PalletBountyBountyMilestone (549) */
+  /** @name PalletBountyBountyMilestone (547) */
   export interface PalletBountyBountyMilestone extends Enum {
     readonly isCreated: boolean;
     readonly asCreated: {
@@ -4898,13 +4920,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Created' | 'BountyMaxFundingReached' | 'WorkSubmitted' | 'Terminated' | 'JudgmentSubmitted';
   }
 
-  /** @name PalletBountyContribution (551) */
+  /** @name PalletBountyContribution (549) */
   export interface PalletBountyContribution extends Struct {
     readonly amount: u128;
     readonly funderStateBloatBondAmount: u128;
   }
 
-  /** @name PalletBountyEntryRecord (552) */
+  /** @name PalletBountyEntryRecord (550) */
   export interface PalletBountyEntryRecord extends Struct {
     readonly memberId: u64;
     readonly stakingAccountId: AccountId32;
@@ -4912,7 +4934,7 @@ declare module '@polkadot/types/lookup' {
     readonly workSubmitted: bool;
   }
 
-  /** @name PalletBountyError (553) */
+  /** @name PalletBountyError (551) */
   export interface PalletBountyError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isMinFundingAmountCannotBeGreaterThanMaxAmount: boolean;
@@ -4952,7 +4974,15 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'MinFundingAmountCannotBeGreaterThanMaxAmount' | 'BountyDoesntExist' | 'SwitchOracleOriginIsRoot' | 'InvalidStageUnexpectedFunding' | 'InvalidStageUnexpectedNoFundingContributed' | 'InvalidStageUnexpectedCancelled' | 'InvalidStageUnexpectedWorkSubmission' | 'InvalidStageUnexpectedJudgment' | 'InvalidStageUnexpectedSuccessfulBountyWithdrawal' | 'InvalidStageUnexpectedFailedBountyWithdrawal' | 'InsufficientBalanceForBounty' | 'NoBountyContributionFound' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'WorkEntryDoesntExist' | 'CherryLessThenMinimumAllowed' | 'CannotSubmitWorkToClosedContractBounty' | 'ClosedContractMemberListIsEmpty' | 'ClosedContractMemberListIsTooLarge' | 'ClosedContractMemberNotFound' | 'InvalidOracleMemberId' | 'InvalidStakingAccountForMember' | 'ZeroWinnerReward' | 'TotalRewardShouldBeEqualToTotalFunding' | 'EntrantStakeIsLessThanMininum' | 'FundingAmountCannotBeZero' | 'FundingPeriodCannotBeZero' | 'WinnerShouldHasWorkSubmission' | 'InvalidContributorActorSpecified' | 'InvalidOracleActorSpecified' | 'InvalidEntrantWorkerSpecified' | 'InvalidCreatorActorSpecified' | 'WorkEntryDoesntBelongToWorker' | 'OracleRewardAlreadyWithdrawn';
   }
 
-  /** @name PalletContentVideoRecord (555) */
+  /** @name PalletJoystreamUtilityError (552) */
+  export interface PalletJoystreamUtilityError extends Enum {
+    readonly isInsufficientFundsForBudgetUpdate: boolean;
+    readonly isZeroTokensBurn: boolean;
+    readonly isInsufficientFundsForBurn: boolean;
+    readonly type: 'InsufficientFundsForBudgetUpdate' | 'ZeroTokensBurn' | 'InsufficientFundsForBurn';
+  }
+
+  /** @name PalletContentVideoRecord (553) */
   export interface PalletContentVideoRecord extends Struct {
     readonly inChannel: u64;
     readonly nftStatus: Option<PalletContentNftTypesOwnedNft>;
@@ -4960,7 +4990,7 @@ declare module '@polkadot/types/lookup' {
     readonly videoStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
   }
 
-  /** @name PalletContentNftTypesOwnedNft (556) */
+  /** @name PalletContentNftTypesOwnedNft (554) */
   export interface PalletContentNftTypesOwnedNft extends Struct {
     readonly owner: PalletContentNftTypesNftOwner;
     readonly transactionalStatus: PalletContentNftTypesTransactionalStatusRecord;
@@ -4968,7 +4998,7 @@ declare module '@polkadot/types/lookup' {
     readonly openAuctionsNonce: u64;
   }
 
-  /** @name PalletContentNftTypesTransactionalStatusRecord (557) */
+  /** @name PalletContentNftTypesTransactionalStatusRecord (555) */
   export interface PalletContentNftTypesTransactionalStatusRecord extends Enum {
     readonly isIdle: boolean;
     readonly isInitiatedOfferToMember: boolean;
@@ -4982,7 +5012,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Idle' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction' | 'BuyNow';
   }
 
-  /** @name PalletContentNftTypesEnglishAuctionRecord (558) */
+  /** @name PalletContentNftTypesEnglishAuctionRecord (556) */
   export interface PalletContentNftTypesEnglishAuctionRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -4994,13 +5024,13 @@ declare module '@polkadot/types/lookup' {
     readonly topBid: Option<PalletContentNftTypesEnglishAuctionBid>;
   }
 
-  /** @name PalletContentNftTypesEnglishAuctionBid (561) */
+  /** @name PalletContentNftTypesEnglishAuctionBid (559) */
   export interface PalletContentNftTypesEnglishAuctionBid extends Struct {
     readonly amount: u128;
     readonly bidderId: u64;
   }
 
-  /** @name PalletContentNftTypesOpenAuctionRecord (562) */
+  /** @name PalletContentNftTypesOpenAuctionRecord (560) */
   export interface PalletContentNftTypesOpenAuctionRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -5010,7 +5040,7 @@ declare module '@polkadot/types/lookup' {
     readonly start: u32;
   }
 
-  /** @name PalletContentNftTypesNftOwner (563) */
+  /** @name PalletContentNftTypesNftOwner (561) */
   export interface PalletContentNftTypesNftOwner extends Enum {
     readonly isChannelOwner: boolean;
     readonly isMember: boolean;
@@ -5018,21 +5048,21 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ChannelOwner' | 'Member';
   }
 
-  /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (566) */
+  /** @name PalletContentPermissionsCuratorGroupCuratorGroupRecord (564) */
   export interface PalletContentPermissionsCuratorGroupCuratorGroupRecord extends Struct {
     readonly curators: BTreeMap<u64, BTreeSet<PalletContentIterableEnumsChannelActionPermission>>;
     readonly active: bool;
     readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupIterableEnumsContentModerationAction>>;
   }
 
-  /** @name PalletContentNftTypesOpenAuctionBidRecord (573) */
+  /** @name PalletContentNftTypesOpenAuctionBidRecord (571) */
   export interface PalletContentNftTypesOpenAuctionBidRecord extends Struct {
     readonly amount: u128;
     readonly madeAtBlock: u32;
     readonly auctionId: u64;
   }
 
-  /** @name PalletContentErrorsError (574) */
+  /** @name PalletContentErrorsError (572) */
   export interface PalletContentErrorsError extends Enum {
     readonly isChannelStateBloatBondChanged: boolean;
     readonly isVideoStateBloatBondChanged: boolean;
@@ -5162,10 +5192,11 @@ declare module '@polkadot/types/lookup' {
     readonly isPatronageCanOnlyBeClaimedForMemberOwnedChannels: boolean;
     readonly isChannelTransfersBlockedDuringRevenueSplits: boolean;
     readonly isChannelTransfersBlockedDuringTokenSales: boolean;
-    readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales';
+    readonly isChannelTransfersBlockedDuringActiveAmm: boolean;
+    readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'MaxNumberOfChannelAgentPermissionsExceeded' | 'MaxNumberOfPausedFeaturesPerChannelExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'MaxCuratorPermissionsPerLevelExceeded' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales' | 'ChannelTransfersBlockedDuringActiveAmm';
   }
 
-  /** @name PalletStorageBagRecord (575) */
+  /** @name PalletStorageBagRecord (573) */
   export interface PalletStorageBagRecord extends Struct {
     readonly storedBy: BTreeSet<u64>;
     readonly distributedBy: BTreeSet<PalletStorageDistributionBucketIdRecord>;
@@ -5173,7 +5204,7 @@ declare module '@polkadot/types/lookup' {
     readonly objectsNumber: u64;
   }
 
-  /** @name PalletStorageStorageBucketRecord (578) */
+  /** @name PalletStorageStorageBucketRecord (576) */
   export interface PalletStorageStorageBucketRecord extends Struct {
     readonly operatorStatus: PalletStorageStorageBucketOperatorStatus;
     readonly acceptingNewBags: bool;
@@ -5181,7 +5212,7 @@ declare module '@polkadot/types/lookup' {
     readonly assignedBags: u64;
   }
 
-  /** @name PalletStorageStorageBucketOperatorStatus (579) */
+  /** @name PalletStorageStorageBucketOperatorStatus (577) */
   export interface PalletStorageStorageBucketOperatorStatus extends Enum {
     readonly isMissing: boolean;
     readonly isInvitedStorageWorker: boolean;
@@ -5191,13 +5222,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Missing' | 'InvitedStorageWorker' | 'StorageWorker';
   }
 
-  /** @name PalletStorageDynamicBagCreationPolicy (581) */
+  /** @name PalletStorageDynamicBagCreationPolicy (579) */
   export interface PalletStorageDynamicBagCreationPolicy extends Struct {
     readonly numberOfStorageBuckets: u32;
     readonly families: BTreeMap<u64, u32>;
   }
 
-  /** @name PalletStorageDataObject (584) */
+  /** @name PalletStorageDataObject (582) */
   export interface PalletStorageDataObject extends Struct {
     readonly accepted: bool;
     readonly stateBloatBond: PalletCommonBloatBondRepayableBloatBond;
@@ -5205,12 +5236,12 @@ declare module '@polkadot/types/lookup' {
     readonly ipfsContentId: Bytes;
   }
 
-  /** @name PalletStorageDistributionBucketFamilyRecord (585) */
+  /** @name PalletStorageDistributionBucketFamilyRecord (583) */
   export interface PalletStorageDistributionBucketFamilyRecord extends Struct {
     readonly nextDistributionBucketIndex: u64;
   }
 
-  /** @name PalletStorageDistributionBucketRecord (586) */
+  /** @name PalletStorageDistributionBucketRecord (584) */
   export interface PalletStorageDistributionBucketRecord extends Struct {
     readonly acceptingNewBags: bool;
     readonly distributing: bool;
@@ -5219,7 +5250,7 @@ declare module '@polkadot/types/lookup' {
     readonly assignedBags: u64;
   }
 
-  /** @name PalletStorageError (589) */
+  /** @name PalletStorageError (587) */
   export interface PalletStorageError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isInvalidCidLength: boolean;
@@ -5289,7 +5320,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'MaxNumberOfOperatorsPerDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints' | 'CallDisabled';
   }
 
-  /** @name PalletProjectTokenAccountData (590) */
+  /** @name PalletProjectTokenAccountData (588) */
   export interface PalletProjectTokenAccountData extends Struct {
     readonly vestingSchedules: BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>;
     readonly amount: u128;
@@ -5299,13 +5330,13 @@ declare module '@polkadot/types/lookup' {
     readonly lastSaleTotalPurchasedAmount: Option<ITuple<[u32, u128]>>;
   }
 
-  /** @name PalletProjectTokenStakingStatus (591) */
+  /** @name PalletProjectTokenStakingStatus (589) */
   export interface PalletProjectTokenStakingStatus extends Struct {
     readonly splitId: u32;
     readonly amount: u128;
   }
 
-  /** @name PalletProjectTokenVestingSchedule (593) */
+  /** @name PalletProjectTokenVestingSchedule (591) */
   export interface PalletProjectTokenVestingSchedule extends Struct {
     readonly linearVestingStartBlock: u32;
     readonly linearVestingDuration: u32;
@@ -5314,22 +5345,22 @@ declare module '@polkadot/types/lookup' {
     readonly burnedAmount: u128;
   }
 
-  /** @name PalletProjectTokenTokenData (600) */
+  /** @name PalletProjectTokenTokenData (598) */
   export interface PalletProjectTokenTokenData extends Struct {
     readonly totalSupply: u128;
     readonly tokensIssued: u128;
     readonly nextSaleId: u32;
     readonly sale: Option<PalletProjectTokenTokenSale>;
     readonly transferPolicy: PalletProjectTokenTransferPolicy;
-    readonly symbol: H256;
     readonly patronageInfo: PalletProjectTokenPatronageData;
     readonly accountsNumber: u64;
     readonly revenueSplitRate: Permill;
     readonly revenueSplit: PalletProjectTokenRevenueSplitState;
     readonly nextRevenueSplitId: u32;
+    readonly ammCurve: Option<PalletProjectTokenAmmCurve>;
   }
 
-  /** @name PalletProjectTokenRevenueSplitState (601) */
+  /** @name PalletProjectTokenRevenueSplitState (599) */
   export interface PalletProjectTokenRevenueSplitState extends Enum {
     readonly isInactive: boolean;
     readonly isActive: boolean;
@@ -5337,38 +5368,38 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Inactive' | 'Active';
   }
 
-  /** @name PalletProjectTokenRevenueSplitInfo (602) */
+  /** @name PalletProjectTokenRevenueSplitInfo (600) */
   export interface PalletProjectTokenRevenueSplitInfo extends Struct {
     readonly allocation: u128;
     readonly timeline: PalletProjectTokenTimeline;
     readonly dividendsClaimed: u128;
   }
 
-  /** @name PalletProjectTokenTimeline (603) */
+  /** @name PalletProjectTokenTimeline (601) */
   export interface PalletProjectTokenTimeline extends Struct {
     readonly start: u32;
     readonly duration: u32;
   }
 
-  /** @name PalletProjectTokenPatronageData (605) */
+  /** @name PalletProjectTokenPatronageData (603) */
   export interface PalletProjectTokenPatronageData extends Struct {
     readonly rate: Perquintill;
     readonly unclaimedPatronageTallyAmount: u128;
     readonly lastUnclaimedPatronageTallyBlock: u32;
   }
 
-  /** @name PalletProjectTokenErrorsError (607) */
+  /** @name PalletProjectTokenErrorsError (606) */
   export interface PalletProjectTokenErrorsError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isInsufficientTransferrableBalance: boolean;
     readonly isTokenDoesNotExist: boolean;
     readonly isAccountInformationDoesNotExist: boolean;
+    readonly isTransferDestinationMemberDoesNotExist: boolean;
     readonly isMerkleProofVerificationFailure: boolean;
     readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
     readonly isTokenSymbolAlreadyInUse: boolean;
     readonly isInitialAllocationToNonExistingMember: boolean;
     readonly isAccountAlreadyExists: boolean;
-    readonly isTransferDestinationMemberDoesNotExist: boolean;
     readonly isTokenIssuanceNotInIdleState: boolean;
     readonly isInsufficientJoyBalance: boolean;
     readonly isJoyTransferSubjectToDusting: boolean;
@@ -5393,6 +5424,7 @@ declare module '@polkadot/types/lookup' {
     readonly isSaleCapPerMemberIsZero: boolean;
     readonly isSaleUnitPriceIsZero: boolean;
     readonly isSalePurchaseAmountIsZero: boolean;
+    readonly isCannotInitSaleIfAmmIsActive: boolean;
     readonly isRevenueSplitTimeToStartTooShort: boolean;
     readonly isRevenueSplitDurationTooShort: boolean;
     readonly isRevenueSplitAlreadyActiveForToken: boolean;
@@ -5408,10 +5440,16 @@ declare module '@polkadot/types/lookup' {
     readonly isRevenueSplitRateIsZero: boolean;
     readonly isBurnAmountIsZero: boolean;
     readonly isBurnAmountGreaterThanAccountTokensAmount: boolean;
-    readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TransferDestinationMemberDoesNotExist' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount';
+    readonly isNotInAmmState: boolean;
+    readonly isInvalidCurveParameters: boolean;
+    readonly isDeadlineExpired: boolean;
+    readonly isSlippageToleranceExceeded: boolean;
+    readonly isInsufficientTokenBalance: boolean;
+    readonly isOutstandingAmmProvidedSupplyTooLarge: boolean;
+    readonly type: 'ArithmeticError' | 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'TransferDestinationMemberDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'CannotInitSaleIfAmmIsActive' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount' | 'NotInAmmState' | 'InvalidCurveParameters' | 'DeadlineExpired' | 'SlippageToleranceExceeded' | 'InsufficientTokenBalance' | 'OutstandingAmmProvidedSupplyTooLarge';
   }
 
-  /** @name PalletProposalsEngineProposal (608) */
+  /** @name PalletProposalsEngineProposal (607) */
   export interface PalletProposalsEngineProposal extends Struct {
     readonly parameters: PalletProposalsEngineProposalParameters;
     readonly proposerId: u64;
@@ -5423,7 +5461,7 @@ declare module '@polkadot/types/lookup' {
     readonly stakingAccountId: Option<AccountId32>;
   }
 
-  /** @name PalletProposalsEngineProposalParameters (609) */
+  /** @name PalletProposalsEngineProposalParameters (608) */
   export interface PalletProposalsEngineProposalParameters extends Struct {
     readonly votingPeriod: u32;
     readonly gracePeriod: u32;
@@ -5435,7 +5473,7 @@ declare module '@polkadot/types/lookup' {
     readonly constitutionality: u32;
   }
 
-  /** @name PalletProposalsEngineVotingResults (610) */
+  /** @name PalletProposalsEngineVotingResults (609) */
   export interface PalletProposalsEngineVotingResults extends Struct {
     readonly abstentions: u32;
     readonly approvals: u32;
@@ -5443,7 +5481,7 @@ declare module '@polkadot/types/lookup' {
     readonly slashes: u32;
   }
 
-  /** @name PalletProposalsEngineError (613) */
+  /** @name PalletProposalsEngineError (612) */
   export interface PalletProposalsEngineError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isEmptyTitleProvided: boolean;
@@ -5471,14 +5509,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'EmptyTitleProvided' | 'EmptyDescriptionProvided' | 'TitleIsTooLong' | 'DescriptionIsTooLong' | 'ProposalNotFound' | 'ProposalFinalized' | 'AlreadyVoted' | 'NotAuthor' | 'MaxActiveProposalNumberExceeded' | 'EmptyStake' | 'StakeShouldBeEmpty' | 'StakeDiffersFromRequired' | 'InvalidParameterApprovalThreshold' | 'InvalidParameterSlashingThreshold' | 'RequireRootOrigin' | 'ProposalHasVotes' | 'ZeroExactExecutionBlock' | 'InvalidExactExecutionBlock' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'InvalidStakingAccountForMember' | 'MaxDispatchableCallCodeSizeExceeded';
   }
 
-  /** @name PalletProposalsDiscussionDiscussionThread (614) */
+  /** @name PalletProposalsDiscussionDiscussionThread (613) */
   export interface PalletProposalsDiscussionDiscussionThread extends Struct {
     readonly activatedAt: u32;
     readonly authorId: u64;
     readonly mode: PalletProposalsDiscussionThreadModeBoundedBTreeSet;
   }
 
-  /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (616) */
+  /** @name PalletProposalsDiscussionThreadModeBoundedBTreeSet (615) */
   export interface PalletProposalsDiscussionThreadModeBoundedBTreeSet extends Enum {
     readonly isOpen: boolean;
     readonly isClosed: boolean;
@@ -5486,14 +5524,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Open' | 'Closed';
   }
 
-  /** @name PalletProposalsDiscussionDiscussionPost (617) */
+  /** @name PalletProposalsDiscussionDiscussionPost (616) */
   export interface PalletProposalsDiscussionDiscussionPost extends Struct {
     readonly authorId: u64;
     readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
     readonly lastEdited: u32;
   }
 
-  /** @name PalletProposalsDiscussionError (618) */
+  /** @name PalletProposalsDiscussionError (617) */
   export interface PalletProposalsDiscussionError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isThreadDoesntExist: boolean;
@@ -5508,7 +5546,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'WhitelistedMemberDoesNotExist' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
   }
 
-  /** @name PalletProposalsCodexError (619) */
+  /** @name PalletProposalsCodexError (618) */
   export interface PalletProposalsCodexError extends Enum {
     readonly isSignalProposalIsEmpty: boolean;
     readonly isRuntimeProposalIsEmpty: boolean;
@@ -5539,7 +5577,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId' | 'ArithmeticError';
   }
 
-  /** @name PalletWorkingGroupOpening (620) */
+  /** @name PalletWorkingGroupOpening (619) */
   export interface PalletWorkingGroupOpening extends Struct {
     readonly openingType: PalletWorkingGroupOpeningType;
     readonly created: u32;
@@ -5549,7 +5587,7 @@ declare module '@polkadot/types/lookup' {
     readonly creationStake: u128;
   }
 
-  /** @name PalletWorkingGroupJobApplication (621) */
+  /** @name PalletWorkingGroupJobApplication (620) */
   export interface PalletWorkingGroupJobApplication extends Struct {
     readonly roleAccountId: AccountId32;
     readonly rewardAccountId: AccountId32;
@@ -5559,7 +5597,7 @@ declare module '@polkadot/types/lookup' {
     readonly openingId: u64;
   }
 
-  /** @name PalletWorkingGroupGroupWorker (622) */
+  /** @name PalletWorkingGroupGroupWorker (621) */
   export interface PalletWorkingGroupGroupWorker extends Struct {
     readonly memberId: u64;
     readonly roleAccountId: AccountId32;
@@ -5572,7 +5610,7 @@ declare module '@polkadot/types/lookup' {
     readonly createdAt: u32;
   }
 
-  /** @name PalletWorkingGroupErrorsError (623) */
+  /** @name PalletWorkingGroupErrorsError (622) */
   export interface PalletWorkingGroupErrorsError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isStakeBalanceCannotBeZero: boolean;
@@ -5609,7 +5647,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ArithmeticError' | 'StakeBalanceCannotBeZero' | 'OpeningDoesNotExist' | 'CannotHireMultipleLeaders' | 'WorkerApplicationDoesNotExist' | 'MaxActiveWorkerNumberExceeded' | 'SuccessfulWorkerApplicationDoesNotExist' | 'CannotHireLeaderWhenLeaderExists' | 'IsNotLeadAccount' | 'CurrentLeadNotSet' | 'WorkerDoesNotExist' | 'InvalidMemberOrigin' | 'SignerIsNotWorkerRoleAccount' | 'BelowMinimumStakes' | 'InsufficientBalanceToCoverStake' | 'ApplicationStakeDoesntMatchOpening' | 'OriginIsNotApplicant' | 'WorkerIsLeaving' | 'CannotRewardWithZero' | 'InvalidStakingAccountForMember' | 'ConflictStakesOnAccount' | 'WorkerHasNoReward' | 'UnstakingPeriodLessThanMinimum' | 'CannotSpendZero' | 'InsufficientBudgetForSpending' | 'NoApplicationsProvided' | 'CannotDecreaseStakeDeltaGreaterThanStake' | 'ApplicationsNotForOpening' | 'WorkerStorageValueTooLong' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'InsufficientBalanceForTransfer';
   }
 
-  /** @name SpRuntimeMultiSignature (633) */
+  /** @name SpRuntimeMultiSignature (632) */
   export interface SpRuntimeMultiSignature extends Enum {
     readonly isEd25519: boolean;
     readonly asEd25519: SpCoreEd25519Signature;
@@ -5620,31 +5658,31 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
   }
 
-  /** @name SpCoreEcdsaSignature (634) */
+  /** @name SpCoreEcdsaSignature (633) */
   export interface SpCoreEcdsaSignature extends U8aFixed {}
 
-  /** @name FrameSystemExtensionsCheckNonZeroSender (637) */
+  /** @name FrameSystemExtensionsCheckNonZeroSender (636) */
   export type FrameSystemExtensionsCheckNonZeroSender = Null;
 
-  /** @name FrameSystemExtensionsCheckSpecVersion (638) */
+  /** @name FrameSystemExtensionsCheckSpecVersion (637) */
   export type FrameSystemExtensionsCheckSpecVersion = Null;
 
-  /** @name FrameSystemExtensionsCheckTxVersion (639) */
+  /** @name FrameSystemExtensionsCheckTxVersion (638) */
   export type FrameSystemExtensionsCheckTxVersion = Null;
 
-  /** @name FrameSystemExtensionsCheckGenesis (640) */
+  /** @name FrameSystemExtensionsCheckGenesis (639) */
   export type FrameSystemExtensionsCheckGenesis = Null;
 
-  /** @name FrameSystemExtensionsCheckNonce (643) */
+  /** @name FrameSystemExtensionsCheckNonce (642) */
   export interface FrameSystemExtensionsCheckNonce extends Compact<u32> {}
 
-  /** @name FrameSystemExtensionsCheckWeight (644) */
+  /** @name FrameSystemExtensionsCheckWeight (643) */
   export type FrameSystemExtensionsCheckWeight = Null;
 
-  /** @name PalletTransactionPaymentChargeTransactionPayment (645) */
+  /** @name PalletTransactionPaymentChargeTransactionPayment (644) */
   export interface PalletTransactionPaymentChargeTransactionPayment extends Compact<u128> {}
 
-  /** @name JoystreamNodeRuntimeRuntime (646) */
+  /** @name JoystreamNodeRuntimeRuntime (645) */
   export type JoystreamNodeRuntimeRuntime = Null;
 
 } // declare module
