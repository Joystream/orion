diff --git a/node_modules/@subsquid/openreader/lib/context.d.ts b/node_modules/@subsquid/openreader/lib/context.d.ts
index ccb64b5..faa6199 100644
--- a/node_modules/@subsquid/openreader/lib/context.d.ts
+++ b/node_modules/@subsquid/openreader/lib/context.d.ts
@@ -1,7 +1,9 @@
 import { Dialect } from './dialect';
 import { Query } from './sql/query';
 import { Limit } from './util/limit';
+import { Request } from 'express'
 export interface Context {
+    req: Request;
     openreader: OpenreaderContext;
 }
 export interface OpenreaderContext {
@@ -10,5 +12,6 @@ export interface OpenreaderContext {
     subscription<T>(query: Query<T>): AsyncIterable<T>;
     responseSizeLimit?: Limit;
     subscriptionResponseSizeLimit?: Limit;
+    req: Request
 }
 //# sourceMappingURL=context.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@subsquid/openreader/lib/model.schema.js b/node_modules/@subsquid/openreader/lib/model.schema.js
index 25be2da..74f14da 100644
--- a/node_modules/@subsquid/openreader/lib/model.schema.js
+++ b/node_modules/@subsquid/openreader/lib/model.schema.js
@@ -11,6 +11,7 @@ const model_tools_1 = require("./model.tools");
 const scalars_1 = require("./scalars");
 const baseSchema = (0, graphql_1.buildASTSchema)((0, graphql_1.parse)(`
     directive @entity on OBJECT
+    directive @schema(name: String!) on OBJECT
     directive @query on INTERFACE
     directive @derivedFrom(field: String!) on FIELD_DEFINITION
     directive @unique on FIELD_DEFINITION
@@ -57,11 +58,12 @@ function addEntityOrJsonObjectOrInterface(model, type) {
     let properties = {};
     let interfaces = [];
     let indexes = type instanceof graphql_1.GraphQLObjectType ? checkEntityIndexes(type) : [];
+    let schema = type instanceof graphql_1.GraphQLObjectType ? checkEntitySchema(type) : undefined;
     let cardinality = checkEntityCardinality(type);
     let description = type.description || undefined;
     switch (kind) {
         case 'entity':
-            model[type.name] = { kind, properties, description, interfaces, indexes, ...cardinality };
+            model[type.name] = {kind, properties, description, interfaces, indexes, schema, ...cardinality}
             break;
         case 'object':
             model[type.name] = { kind, properties, description, interfaces };
@@ -393,6 +395,21 @@ function checkEntityIndexes(type) {
     });
     return indexes;
 }
+function checkEntitySchema(type) {
+    let schema;
+    type.astNode?.directives?.forEach(d => {
+        if (d.name.value != 'schema')
+            return;
+        if (!isEntityType(type))
+            throw new SchemaError(`@schema was applied to ${type.name}, but only entities can have base schema`);
+        let fieldsArg = d.arguments?.find(arg => arg.name.value == 'name');
+        if (fieldsArg == null)
+            throw new SchemaError(`@schema was applied to ${type.name}, but no name were specified`);
+        (0, assert_1.default)(fieldsArg.value.kind == 'StringValue');
+        schema = fieldsArg.value.value;
+    });
+    return schema;
+}
 function checkDerivedFrom(type, f) {
     let directives = f.astNode?.directives?.filter(d => d.name.value == 'derivedFrom') || [];
     if (directives.length == 0)
diff --git a/node_modules/@subsquid/openreader/lib/server.d.ts b/node_modules/@subsquid/openreader/lib/server.d.ts
index da31a85..3691776 100644
--- a/node_modules/@subsquid/openreader/lib/server.d.ts
+++ b/node_modules/@subsquid/openreader/lib/server.d.ts
@@ -7,6 +7,7 @@ import type { Pool } from 'pg';
 import { Context } from './context';
 import type { Dialect } from './dialect';
 import type { Model } from './model';
+import { ExpressContext } from 'apollo-server-express'
 export interface ServerOptions {
     port: number | string;
     model: Model;
@@ -28,7 +29,7 @@ export type Dispose = () => Promise<void>;
 export interface ApolloOptions {
     port: number | string;
     disposals: Dispose[];
-    context: () => Context;
+    context: (ctx: ExpressContext) => Context;
     schema: GraphQLSchema;
     plugins?: PluginDefinition[];
     subscriptions?: boolean;
diff --git a/node_modules/@subsquid/openreader/lib/server.js b/node_modules/@subsquid/openreader/lib/server.js
index 6fb0711..89e3d3d 100644
--- a/node_modules/@subsquid/openreader/lib/server.js
+++ b/node_modules/@subsquid/openreader/lib/server.js
@@ -17,11 +17,13 @@ const schema_1 = require("./opencrud/schema");
 const error_handling_1 = require("./util/error-handling");
 const execute_1 = require("./util/execute");
 const limit_1 = require("./util/limit");
+const cookieParser = require('cookie-parser')
+const cors = require('cors')
 async function serve(options) {
     let { connection, subscriptionConnection, subscriptionPollInterval, maxResponseNodes, subscriptionMaxResponseNodes } = options;
     let dialect = options.dialect ?? 'postgres';
     let schema = new schema_1.SchemaBuilder(options).build();
-    let context = () => {
+    let context = ({ req }) => {
         let openreader = new db_1.PoolOpenreaderContext(dialect, connection, subscriptionConnection, subscriptionPollInterval);
         if (maxResponseNodes) {
             openreader.responseSizeLimit = new limit_1.ResponseSizeLimit(maxResponseNodes);
@@ -31,6 +33,7 @@ async function serve(options) {
             openreader.subscriptionResponseSizeLimit = new limit_1.ResponseSizeLimit(subscriptionMaxResponseNodes);
         }
         return {
+            req,
             openreader
         };
     };
@@ -53,6 +56,14 @@ async function runApollo(options) {
     const { disposals, context, schema, log, maxRootFields } = options;
     let maxRequestSizeBytes = options.maxRequestSizeBytes ?? 256 * 1024;
     let app = (0, express_1.default)();
+    // CUSTOM CONFIG START
+    app.set('trust proxy', process.env.TRUST_PROXY || false)
+    app.use(cookieParser(process.env.COOKIE_SECRET))
+    app.use(cors({
+        origin: require(path_1.default.resolve(__dirname, '../../../../lib/utils/auth.js')).getCorsOrigin(),
+        credentials: true
+    }))
+    // CUSTOM CONFIG END
     let server = http_1.default.createServer(app);
     const execute = maxRootFields
         ? (args) => (0, execute_1.executeWithLimit)(maxRootFields, args)
@@ -127,7 +138,8 @@ async function runApollo(options) {
         app,
         bodyParserConfig: {
             limit: maxRequestSizeBytes
-        }
+        },
+        cors: false,
     });
     return (0, util_internal_http_server_1.listen)(server, options.port);
 }
