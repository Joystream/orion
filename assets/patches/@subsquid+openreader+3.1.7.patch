diff --git a/node_modules/@subsquid/openreader/lib/context.d.ts b/node_modules/@subsquid/openreader/lib/context.d.ts
index ccb64b5..faa6199 100644
--- a/node_modules/@subsquid/openreader/lib/context.d.ts
+++ b/node_modules/@subsquid/openreader/lib/context.d.ts
@@ -1,7 +1,9 @@
 import { Dialect } from './dialect';
 import { Query } from './sql/query';
 import { Limit } from './util/limit';
+import { Request } from 'express'
 export interface Context {
+    req: Request;
     openreader: OpenreaderContext;
 }
 export interface OpenreaderContext {
@@ -10,5 +12,6 @@ export interface OpenreaderContext {
     subscription<T>(query: Query<T>): AsyncIterable<T>;
     responseSizeLimit?: Limit;
     subscriptionResponseSizeLimit?: Limit;
+    req: Request
 }
 //# sourceMappingURL=context.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@subsquid/openreader/lib/server.d.ts b/node_modules/@subsquid/openreader/lib/server.d.ts
index da31a85..3691776 100644
--- a/node_modules/@subsquid/openreader/lib/server.d.ts
+++ b/node_modules/@subsquid/openreader/lib/server.d.ts
@@ -7,6 +7,7 @@ import type { Pool } from 'pg';
 import { Context } from './context';
 import type { Dialect } from './dialect';
 import type { Model } from './model';
+import { ExpressContext } from 'apollo-server-express'
 export interface ServerOptions {
     port: number | string;
     model: Model;
@@ -28,7 +29,7 @@ export type Dispose = () => Promise<void>;
 export interface ApolloOptions {
     port: number | string;
     disposals: Dispose[];
-    context: () => Context;
+    context: (ctx: ExpressContext) => Context;
     schema: GraphQLSchema;
     plugins?: PluginDefinition[];
     subscriptions?: boolean;
diff --git a/node_modules/@subsquid/openreader/lib/server.js b/node_modules/@subsquid/openreader/lib/server.js
index 6fb0711..89e3d3d 100644
--- a/node_modules/@subsquid/openreader/lib/server.js
+++ b/node_modules/@subsquid/openreader/lib/server.js
@@ -17,11 +17,13 @@ const schema_1 = require("./opencrud/schema");
 const error_handling_1 = require("./util/error-handling");
 const execute_1 = require("./util/execute");
 const limit_1 = require("./util/limit");
+const cookieParser = require('cookie-parser')
+const cors = require('cors')
 async function serve(options) {
     let { connection, subscriptionConnection, subscriptionPollInterval, maxResponseNodes, subscriptionMaxResponseNodes } = options;
     let dialect = options.dialect ?? 'postgres';
     let schema = new schema_1.SchemaBuilder(options).build();
-    let context = () => {
+    let context = ({ req }) => {
         let openreader = new db_1.PoolOpenreaderContext(dialect, connection, subscriptionConnection, subscriptionPollInterval);
         if (maxResponseNodes) {
             openreader.responseSizeLimit = new limit_1.ResponseSizeLimit(maxResponseNodes);
@@ -31,6 +33,7 @@ async function serve(options) {
             openreader.subscriptionResponseSizeLimit = new limit_1.ResponseSizeLimit(subscriptionMaxResponseNodes);
         }
         return {
+            req,
             openreader
         };
     };
@@ -53,6 +56,14 @@ async function runApollo(options) {
     const { disposals, context, schema, log, maxRootFields } = options;
     let maxRequestSizeBytes = options.maxRequestSizeBytes ?? 256 * 1024;
     let app = (0, express_1.default)();
+    // CUSTOM CONFIG START
+    app.set('trust proxy', process.env.TRUST_PROXY || false)
+    app.use(cookieParser(process.env.COOKIE_SECRET))
+    app.use(cors({
+        origin: require(path_1.default.resolve(__dirname, '../../../../lib/utils/auth.js')).getCorsOrigin(),
+        credentials: true
+    }))
+    // CUSTOM CONFIG END
     let server = http_1.default.createServer(app);
     const execute = maxRootFields
         ? (args) => (0, execute_1.executeWithLimit)(maxRootFields, args)
@@ -127,7 +138,8 @@ async function runApollo(options) {
         app,
         bodyParserConfig: {
             limit: maxRequestSizeBytes
-        }
+        },
+        cors: false,
     });
     return (0, util_internal_http_server_1.listen)(server, options.port);
 }
diff --git a/node_modules/@subsquid/openreader/lib/sql/query.d.ts.map b/node_modules/@subsquid/openreader/lib/sql/query.d.ts.map
index 7f7c281..ad39c31 100644
--- a/node_modules/@subsquid/openreader/lib/sql/query.d.ts.map
+++ b/node_modules/@subsquid/openreader/lib/sql/query.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"query.d.ts","sourceRoot":"","sources":["../../src/sql/query.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAC,OAAO,EAAC,MAAM,YAAY,CAAA;AACvC,OAAO,KAAK,EAAC,YAAY,EAAE,KAAK,EAAC,MAAM,YAAY,CAAA;AACnD,OAAO,EAKH,sBAAsB,EACtB,uBAAuB,EAC1B,MAAM,kBAAkB,CAAA;AACzB,OAAO,KAAK,EAAC,SAAS,EAAE,YAAY,EAAC,MAAM,cAAc,CAAA;AACzD,OAAO,KAAK,EAAC,KAAK,EAAC,MAAM,UAAU,CAAA;AAMnC,MAAM,WAAW,KAAK,CAAC,CAAC;IACpB,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAA;IACpB,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,CAAA;IAC1B,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,CAAA;CACxB;AAGD,qBAAa,SAAU,YAAW,KAAK,CAAC,GAAG,EAAE,CAAC;IAQtC,OAAO,CAAC,MAAM;IAPlB,SAAgB,GAAG,EAAE,MAAM,CAAA;IAC3B,SAAgB,MAAM,EAAE,OAAO,EAAE,CAAK;gBAGlC,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,MAAM,EACR,MAAM,EAAE,SAAS,EACzB,IAAI,EAAE,YAAY;IAWtB,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE;CAO5B;AAGD,qBAAa,eAAe;IAQpB,OAAO,CAAC,MAAM;IAPlB,SAAgB,GAAG,EAAE,MAAM,CAAA;IAC3B,SAAgB,MAAM,EAAE,OAAO,EAAE,CAAK;gBAGlC,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,MAAM,EACV,MAAM,EAAE,YAAY,EAAE,EAC9B,EAAE,EAAE,MAAM;IAYd,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG;CAI1B;AAGD,qBAAa,UAAW,YAAW,KAAK,CAAC,MAAM,CAAC;IAC5C,SAAgB,GAAG,EAAE,MAAM,CAAA;IAC3B,SAAgB,MAAM,EAAE,OAAO,EAAE,CAAK;gBAGlC,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,MAAM,EAChB,KAAK,CAAC,EAAE,KAAK;IAMjB,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,MAAM;CAG7B;AAGD,qBAAa,eAAgB,YAAW,KAAK,CAAC,uBAAuB,CAAC;IAClE,SAAgB,GAAG,EAAE,MAAM,CAAA;IAC3B,SAAgB,MAAM,EAAE,OAAO,EAAE,CAAK;IACtC,OAAO,CAAC,MAAM,CAAI;IAClB,OAAO,CAAC,KAAK,CAAM;IACnB,OAAO,CAAC,QAAQ,CAAC,CAAW;IAC5B,OAAO,CAAC,UAAU,CAAC,CAAS;IAC5B,OAAO,CAAC,QAAQ,CAAC,CAAS;IAC1B,OAAO,CAAC,UAAU,CAAC,CAAS;gBAGxB,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,MAAM,EAChB,GAAG,EAAE,sBAAsB,CAAC,SAAS,CAAC;IA+B1C,OAAO,CAAC,iBAAiB;IAUzB,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,uBAAuB;IA8B3C,OAAO,CAAC,WAAW;IAUnB,OAAO,CAAC,aAAa;CAQxB"}
\ No newline at end of file
+{"version":3,"file":"query.d.ts","sourceRoot":"","sources":["../../src/sql/query.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAC,OAAO,EAAC,MAAM,YAAY,CAAA;AACvC,OAAO,KAAK,EAAC,YAAY,EAAE,KAAK,EAAC,MAAM,YAAY,CAAA;AACnD,OAAO,EAKH,sBAAsB,EACtB,uBAAuB,EAC1B,MAAM,kBAAkB,CAAA;AACzB,OAAO,KAAK,EAAC,SAAS,EAAE,YAAY,EAAC,MAAM,cAAc,CAAA;AACzD,OAAO,KAAK,EAAC,KAAK,EAAC,MAAM,UAAU,CAAA;AAMnC,MAAM,WAAW,KAAK,CAAC,CAAC;IACpB,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAA;IACpB,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,CAAA;IAC1B,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,CAAA;CACxB;AAGD,qBAAa,SAAU,YAAW,KAAK,CAAC,GAAG,EAAE,CAAC;IAQtC,OAAO,CAAC,MAAM;IAPlB,SAAgB,GAAG,EAAE,MAAM,CAAA;IAC3B,SAAgB,MAAM,EAAE,OAAO,EAAE,CAAK;gBAGlC,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,MAAM,EACR,MAAM,EAAE,SAAS,EACzB,IAAI,EAAE,YAAY;IAWtB,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE;CAO5B;AAGD,qBAAa,eAAe;IAQpB,OAAO,CAAC,MAAM;IAPlB,SAAgB,GAAG,EAAE,MAAM,CAAA;IAC3B,SAAgB,MAAM,EAAE,OAAO,EAAE,CAAK;gBAGlC,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,MAAM,EACV,MAAM,EAAE,YAAY,EAAE,EAC9B,EAAE,EAAE,MAAM;IAYd,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG;CAI1B;AAGD,qBAAa,UAAW,YAAW,KAAK,CAAC,MAAM,CAAC;IAC5C,SAAgB,GAAG,EAAE,MAAM,CAAA;IAC3B,SAAgB,MAAM,EAAE,OAAO,EAAE,CAAK;gBAGlC,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,MAAM,EAChB,KAAK,CAAC,EAAE,KAAK;IAMjB,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,MAAM;CAG7B;AAGD,qBAAa,eAAgB,YAAW,KAAK,CAAC,uBAAuB,CAAC;IAClE,SAAgB,GAAG,EAAE,MAAM,CAAA;IAC3B,SAAgB,MAAM,EAAE,OAAO,EAAE,CAAK;IACtC,OAAO,CAAC,MAAM,CAAI;IAClB,OAAO,CAAC,KAAK,CAAM;IACnB,OAAO,CAAC,QAAQ,CAAC,CAAW;IAC5B,OAAO,CAAC,UAAU,CAAC,CAAS;IAC5B,OAAO,CAAC,QAAQ,CAAC,CAAS;IAC1B,OAAO,CAAC,UAAU,CAAC,CAAS;gBAGxB,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,MAAM,EAChB,GAAG,EAAE,sBAAsB,CAAC,SAAS,CAAC;IA8C1C,OAAO,CAAC,iBAAiB;IAUzB,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,GAAG,uBAAuB;IA8B3C,OAAO,CAAC,WAAW;IAUnB,OAAO,CAAC,aAAa;CAQxB"}
\ No newline at end of file
diff --git a/node_modules/@subsquid/openreader/lib/sql/query.js b/node_modules/@subsquid/openreader/lib/sql/query.js
index c00a15f..2623b28 100644
--- a/node_modules/@subsquid/openreader/lib/sql/query.js
+++ b/node_modules/@subsquid/openreader/lib/sql/query.js
@@ -72,9 +72,14 @@ class ConnectionQuery {
             limit: this.limit + 1
         };
         let printer;
+        let wherePrinter;
         if (model[typeName].kind == 'entity') {
             (0, assert_1.default)(req.edgeNode == null || Array.isArray(req.edgeNode));
-            printer = new printer_1.EntitySqlPrinter(model, dialect, typeName, this.params, args, req.edgeNode);
+            const idField = req.edgeNode?.find(eN => eN.field === 'id');
+            if (idField) {
+                wherePrinter = new printer_1.EntitySqlPrinter(model, dialect, typeName, this.params, args, [idField]);
+            }
+            printer = new printer_1.EntitySqlPrinter(model, dialect, typeName, this.params, idField ? {} : args, req.edgeNode);
         }
         else {
             (0, assert_1.default)(req.edgeNode == null || !Array.isArray(req.edgeNode));
@@ -82,7 +87,12 @@ class ConnectionQuery {
         }
         if (req.edgeNode) {
             this.edgeNode = req.edgeNode;
-            this.sql = printer.print();
+            if (wherePrinter) {
+                this.sql = `WITH id_list AS (${wherePrinter.print()}) ${printer.print()} JOIN id_list ON "${(0, util_1.toTable)(typeName)}"."id" = id_list._c0;`;
+            }
+            else {
+                this.sql = printer.print();
+            }
         }
         else {
             this.sql = printer.printAsCount();
