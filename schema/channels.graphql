type Channel @entity @schema(name: "curator") {
  "Runtime entity identifier (EntityId)"
  id: ID!

  "Timestamp of the block the channel was created at"
  createdAt: DateTime!

  "Current member-owner of the channel (if owned by a member)"
  ownerMember: Membership

  "The title of the Channel"
  title: String

  "The description of a Channel"
  description: String

  "Channel's cover (background) photo asset. Recommended ratio: 16:9."
  coverPhoto: StorageDataObject

  "Channel's avatar photo asset."
  avatarPhoto: StorageDataObject

  "Flag signaling whether a channel is public."
  isPublic: Boolean

  "Flag signaling whether a channel is censored."
  isCensored: Boolean!

  "Whether a channel has been excluded/hidden (by the gateway operator)"
  isExcluded: Boolean!

  "The primary langauge of the channel's content"
  language: String

  "List of videos that belong to the channel"
  videos: [Video!]! @derivedFrom(field: "channel")

  "Number of the block the channel was created in"
  createdInBlock: Int!

  "Channel's reward account, storing the income from the nft sales and channel payouts."
  rewardAccount: String!

  "Value of channel state bloat bond fee paid by channel creator"
  channelStateBloatBond: BigInt!

  "Number of active follows (to speed up orderBy queries by avoiding COUNT aggregation)"
  followsNum: Int!

  "Number of total video views (to speed up orderBy queries by avoiding COUNT aggregation)"
  videoViewsNum: Int!

  "List of members blocked from commenting/reacting on any video of the channel."
  bannedMembers: [BannedMember!] @derivedFrom(field: "channel")

  "Application used for channel creation"
  entryApp: App

  "Number of videos ever created in this channel"
  totalVideosCreated: Int!

  "% of channel balance that the creator devotes to revenue shares"
  revenueShareRatioPercent: Int

  "Cumulative rewards claimed by this channel"
  cumulativeRewardClaimed: BigInt!

  "Token issued by channel if any"
  creatorToken: TokenChannel @derivedFrom(field: "channel")

  "Cumulative total revenue coming from nft sales + member payments + council payouts"
  cumulativeRevenue: BigInt!

  "Cumulative rewards paid to this channel"
  cumulativeReward: BigInt!

  "Weight/Bias of the channel affecting video relevance in the Homepage"
  channelWeight: Float

  "Channel Ypp Status (if exists): either unverified, verified or suspended"
  yppStatus: ChannelYppStatus

  "Whether YouTube sync is enabled for this channel"
  isYtSyncEnabled: Boolean!
}

enum ChannelTier {
  BRONZE
  SILVER
  GOLD
  DIAMOND
}

union ChannelYppStatus = YppUnverified | YppVerified | YppSuspended

type YppUnverified {
  timestamp: DateTime!
}

type YppVerified {
  tier: ChannelTier!
  timestamp: DateTime!
}

type YppSuspended {
  timestamp: DateTime!
}

type BannedMember
  @entity
  @schema(name: "curator")
  @index(fields: ["member", "channel"], unique: true) {
  "{memberId}-{channelId}"
  id: ID!
  member: Membership!
  channel: Channel!
}
