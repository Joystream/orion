enum OperatorPermission {
  GRANT_OPERATOR_PERMISSIONS
  REVOKE_OPERATOR_PERMISSIONS
  SET_VIDEO_WEIGHTS
  SET_CHANNEL_WEIGHTS
  SET_KILL_SWITCH
  SET_VIDEO_VIEW_PER_USER_TIME_LIMIT
  SET_VIDEO_HERO
  SET_CATEGORY_FEATURED_VIDEOS
  SET_SUPPORTED_CATEGORIES
  SET_FEATURED_NFTS
  EXCLUDE_CONTENT
  RESTORE_CONTENT
  SET_PUBLIC_FEED_VIDEOS
  SET_FEATURED_CRTS
}

type User @entity @schema(name: "admin") {
  "Unique identifier (32-byte string, securely random)"
  id: ID!

  "Whether the user has root (gateway operator) privileges"
  isRoot: Boolean!

  "List of all the gateway operator permissions that this user has"
  permissions: [OperatorPermission!]

  "The account associated with the user (if any)"
  account: Account @derivedFrom(field: "user")

  "User's channel follows"
  channelFollows: [ChannelFollow!]! @derivedFrom(field: "user")

  "Video views associated with the user"
  videoViewEvents: [VideoViewEvent!]! @derivedFrom(field: "user")

  "Reports associated with the user"
  reports: [Report!]! @derivedFrom(field: "user")

  "NFT featuring requests associated with the user"
  nftFeaturingRequests: [NftFeaturingRequest!]! @derivedFrom(field: "user")
}

type EncryptionArtifacts @entity {
  "ID / lookupKey"
  id: ID!

  "The account the encryption artifacts are associated with"
  account: Account! @unique

  "The IV used to encrypt the wallet seed with user credentials"
  cipherIv: String!

  "Wallet seed encrypted with user credentials"
  encryptedSeed: String!
}

type SessionEncryptionArtifacts @entity {
  "Unique identifier"
  id: ID!

  "The session the encryption artifacts are associated with"
  session: Session! @unique

  "The IV used to encrypt the seed with cipherKey"
  cipherIv: String!

  "cipherKey used to encrypt the seed stored client-side for the duration of the session"
  cipherKey: String!
}

type Session @entity @schema(name: "admin") {
  "Unique identifier (32-byte string, securely random)"
  id: ID!

  "Browser (as deterimned based on user-agent header)"
  browser: String!

  "Operating system (as deterimned based on user-agent header)"
  os: String!

  "Device (as deterimned based on user-agent header)"
  device: String!

  "Device type (as deterimned based on user-agent header)"
  deviceType: String

  "User associated with the session"
  user: User!

  "Account associated with the session (if any)"
  account: Account

  "IP address associated with the session"
  ip: String! @index

  "Time when the session started"
  startedAt: DateTime!

  "Time when the session expires or did expire"
  expiry: DateTime!
}

"A Gateway Account"
type Account @entity @schema(name: "admin") {
  "Unique identifier (can be sequential)"
  id: ID!

  "The user associated with the gateway account (the Gateway Account Owner)"
  user: User! @unique

  "Gateway account's e-mail address"
  email: String! @unique

  """
  Indicates whether the gateway account's e-mail has been confirmed or not.
  """
  isEmailConfirmed: Boolean!

  "Indicates whether the access to the gateway account is blocked"
  isBlocked: Boolean!

  "Time when the gateway account was registered"
  registeredAt: DateTime!

  "On-chain membership associated with the gateway account"
  membership: Membership! @unique

  "Blockchain (joystream) account associated with the gateway account"
  joystreamAccount: String! @unique

  "runtime notifications"
  notifications: [Notification!]! @derivedFrom(field: "account")

  "notification preferences for the account"
  notificationPreferences: AccountNotificationPreferences!

  "ID of the channel which referred the user to the platform"
  referrerChannelId: String
}

type AccountNotificationPreferences {
  # channel notifications: https://www.figma.com/file/zi5siPUXme0Fivq2i40XBd/My-channel?type=design&node-id=1721-82420&mode=design:
  channelExcludedFromApp: NotificationPreference!
  videoExcludedFromApp: NotificationPreference!
  nftFeaturedOnMarketPlace: NotificationPreference!
  newChannelFollower: NotificationPreference!
  videoCommentCreated: NotificationPreference!
  videoLiked: NotificationPreference!
  videoDisliked: NotificationPreference!
  yppChannelVerified: NotificationPreference!
  yppSignupSuccessful: NotificationPreference! #v2
  yppChannelSuspended: NotificationPreference!
  nftBought: NotificationPreference!
  creatorTimedAuctionExpired: NotificationPreference! #v2
  bidMadeOnNft: NotificationPreference!
  royaltyReceived: NotificationPreference!
  channelPaymentReceived: NotificationPreference!
  channelReceivedFundsFromWg: NotificationPreference!
  newPayoutUpdatedByCouncil: NotificationPreference! #v2
  channelFundsWithdrawn: NotificationPreference!

  # member notifications: https://www.figma.com/file/yhZpTHdf1sxJx13uRZ71GV/Membership-profile?type=design&node-id=2977-58785&mode=design
  channelCreated: NotificationPreference!
  replyToComment: NotificationPreference!
  reactionToComment: NotificationPreference!
  videoPosted: NotificationPreference!
  newNftOnAuction: NotificationPreference!
  newNftOnSale: NotificationPreference!
  timedAuctionExpired: NotificationPreference! #v2
  higherBidThanYoursMade: NotificationPreference!
  auctionWon: NotificationPreference!
  auctionLost: NotificationPreference!
  openAuctionBidCanBeWithdrawn: NotificationPreference! #v2
  fundsFromCouncilReceived: NotificationPreference! #v2
  fundsToExternalWalletSent: NotificationPreference! #v2
  fundsFromWgReceived: NotificationPreference! # v2
  crtIssued: NotificationPreference!
  crtMarketStarted: NotificationPreference!
  crtMarketMint: NotificationPreference!
  crtMarketBurn: NotificationPreference!
  crtSaleStarted: NotificationPreference!
  crtSaleMint: NotificationPreference!
  crtRevenueShareStarted: NotificationPreference!
  crtRevenueSharePlanned: NotificationPreference!
  crtRevenueShareEnded: NotificationPreference!
}

type NotificationPreference {
  "Notification is enabled in the app"
  inAppEnabled: Boolean!

  "Allows to send email for the notification"
  emailEnabled: Boolean!
}

enum TokenType {
  EMAIL_CONFIRMATION
}

type Token @entity @schema(name: "admin") {
  "The token itself (32-byte string, securely random)"
  id: ID!

  "Type of the token (its intended purpose)"
  type: TokenType!

  "When was the token issued"
  issuedAt: DateTime!

  "When does the token expire or when has it expired"
  expiry: DateTime!

  "The account the token was issued for"
  issuedFor: Account!
}
