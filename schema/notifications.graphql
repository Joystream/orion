# timestamp for in app delivery is not needed, since it is the same as the notification creation timestamp
type NotificationInAppDelivery @entity {
  "Autoincremented"
  id: ID!

  "the notification being delivered"
  notification: Notification!
}

type NotificationEmailDelivery @entity {
  "Autoincremented"
  id: ID!

  "the notification being delivered"
  notification: Notification!

  "attempted delivery"
  deliveryAttemptAt: DateTime!

  "notification delivery status"
  deliveryStatus: EmailDeliveryStatus!
}

enum EmailDeliveryStatus {
  Success
  Failure
}

type NotificationData {
  "text to display"
  text: String!

  "page link"
  linkPage: String!
}

type Read {
  "timestamp"
  readAt: DateTime!
}

type Unread {
  phantom: Int
}

union ReadOrUnread = Read | Unread

type Notification @entity {
  # id is computed as follows
  # - id = 'offchain' ++ '-' ++ 'offchainGlobalCounter' for offchain notifications "
  # - id = 'onchain' ++ '-' ++ 'onchainGlobalCounter' for runtime related notifications "
  # to avoid conflicts during migration
  id: ID!

  "Member that should recieve the notification"
  account: Account!

  "type of the notification, used for"
  notificationType: NotificationType!

  "related event for on chain notifications"
  event: Event

  "status"
  status: ReadOrUnread!

  "timestamp"
  createdAt: DateTime!
}

union RecipientType = MemberRecipient | ChannelRecipient

type MemberRecipient {
  "member handle"
  memberHandle: String!
}

type ChannelRecipient {
  "channel title"
  channelTitle: String!
}

union NotificationType =
    ChannelSuspended
  | ChannelVerified
  | ChannelExcluded
  | VideoExcluded
  | NewChannelFollower
  | VideoFeaturedOnCategoryPage
  | VideoFeaturedAsCategoryHero
  | NftFeaturedOnMarketPlace
  | CommentPostedToVideo
  | VideoLiked
  | VideoDisliked
  | NftPurchased
  | CreatorReceivesAuctionBid
  | RoyaltyPaid
  | DirectChannelPaymentByMember
  | EnglishAuctionSettled
  | ChannelFundsWithdrawn
  | ChannelCreated
  | CommentReply
  | ReactionToComment
  | VideoPosted
  | NewAuctionBid
  | NewAuction
  | NewNftOnSale
  | HigherBidPlaced
  | EnglishAuctionWon
  | EnglishAuctionLost
  | OpenAuctionWon
  | OpenAuctionLost
  | NftOffered
  | BidMadeCompletingAuction

type ChannelSuspended @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type NftFeaturedOnMarketPlace @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type VideoFeaturedOnCategoryPage @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type VideoFeaturedAsCategoryHero @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type ChannelVerified @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type ChannelExcluded @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type VideoExcluded @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type NewChannelFollower @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type CommentPostedToVideo @variant {
  "notification data"
  data: NotificationData!

  "member that comments"
  member: Membership!

  "recipient"
  recipient: RecipientType!
}

type VideoLiked @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type VideoDisliked @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type NftPurchased @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type CreatorReceivesAuctionBid @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type RoyaltyPaid @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type NftOffered @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type DirectChannelPaymentByMember @variant {
  "notification data"
  data: NotificationData!

  "amount paid"
  amount: BigInt!

  "recipient"
  recipient: RecipientType!
}

type EnglishAuctionSettled @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type ChannelFundsWithdrawn @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type ChannelCreated @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type CommentReply @variant {
  "notification data"
  data: NotificationData!

  "member who replied"
  member: Membership!

  "recipient"
  recipient: RecipientType!
}

type ReactionToComment @variant {
  "notification data"
  data: NotificationData!

  "member who reacted"
  member: Membership!

  "recipient"
  recipient: RecipientType!
}

type VideoPosted @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type NewAuction @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type NewAuctionBid @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type NewNftOnSale @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type HigherBidPlaced @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type EnglishAuctionWon @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type EnglishAuctionLost @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type OpenAuctionWon @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type OpenAuctionLost @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

# design addition: for bid made completing auction so that channel owner is properly notified
type BidMadeCompletingAuction @variant {
  "notification data"
  data: NotificationData!

  "recipient"
  recipient: RecipientType!
}

type NftRoyaltyPaid @variant {
  "notification data"
  data: NotificationData!

  "bid amount"
  amount: BigInt!

  "bidder"
  bidder: Membership!

  "recipient"
  recipient: RecipientType!
}
