type Read {
  "timestamp"
  readAt: DateTime!
}

type Unread {
  phantom: Int
}

union ReadOrUnread = Read | Unread

type OffChainNotification @entity {
  "Autoincremented"
  id: ID!

  "Member that should recieve the notification"
  account: Account!

  "type of the notification, used for"
  notificationType: OffChainNotificationType!

  "text of the notification"
  text: String!

  "app page where the notification should link to"
  linkPage: String!

  "recipient type of the notification"
  recipientType: RecipientType!
}

union RecipientType = MemberRecipient | ChannelRecipient

type MemberRecipient {
  "member handle"
  memberHandle: String!
}

type ChannelRecipient {
  "channel title"
  channelTitle: String!
}

# convert the union into an enum
enum OffChainNotificationType {
  YppSignupSuccessful
  ChannelVerified
  ChannelExcluded
  VideoExcluded
  NewChannelFollower
  VideoFeaturedOnCategoryPage
  VideoFeaturedAsCategoryHero
  NftFeaturedOnMarketPlace
}

type RuntimeNotification @entity {
  "Autoincremented"
  id: ID!

  "Member that should recieve the notification"
  account: Account!

  "The notification event"
  event: Event!

  "in-app read or not (to migrate)"
  status: ReadOrUnread!

  "type of the notification, used for"
  notificationType: RuntimeNotificationType!

  "creation timestamp (to migrate)"
  createdAt: DateTime!

  "text of the notification"
  text: String!

  "app page where the notification should link to"
  linkPage: String!
}

# convert the union below into an enum
enum RuntimeNotificationType {
  CommentPostedToVideo
  VideoLiked
  VideoDisliked
  NftPurchased
  CreatorReceivesAuctionBid
  RoyaltyPaid
  DirectChannelPaymentByMember
  EnglishAuctionSettled
  ChannelFundsWithdrawn
  ChannelCreated
  CommentReply
  ReactionToComment
  VideoPosted
  NewAuction
  NewNftOnSale
  HigherBidPlaced
  EnglishAuctionWon
  EnglishAuctionLost
  OpenAuctionWon
  OpenAuctionLost
}

type RuntimeNotificationMailDelivery @entity {
  "Autoincremented"
  id: ID!

  "the runtime notification"
  notification: RuntimeNotification!

  "when was this delivered according to server time"
  deliveredAt: DateTime!
}

type OffChainNotificationMailDelivery @entity {
  "Autoincremented"
  id: ID!

  "the offchain notification"
  notification: OffChainNotification!

  "when was this delivered according to server time"
  deliveredAt: DateTime!
}

# timestamp for in app delivery is not needed, since it is the same as the notification creation timestamp
type RuntimeNotificationInAppDelivery @entity {
  "Autoincremented"
  id: ID!

  "the runtime notification"
  notification: RuntimeNotification!
}

# timestamp for in app delivery is not needed, since it is the same as the notification creation timestamp
type OffChainNotificationInAppDelivery @entity {
  "Autoincremented"
  id: ID!

  "the runtime notification"
  notification: OffChainNotification!
}
