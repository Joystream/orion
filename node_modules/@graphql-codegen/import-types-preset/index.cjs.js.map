{"version":3,"file":"index.cjs.js","sources":["../../../dist/presets/import-types/src/index.js"],"sourcesContent":["import { isUsingTypes } from '@graphql-codegen/plugin-helpers';\nimport addPlugin from '@graphql-codegen/add';\nexport const preset = {\n    buildGeneratesSection: options => {\n        if (!options.presetConfig.typesPath) {\n            throw new Error(`Preset \"import-types\" requires you to specify \"typesPath\" configuration and point it to your base types file (generated by \"typescript\" plugin)!`);\n        }\n        const importTypesNamespace = options.presetConfig.importTypesNamespace || 'Types';\n        const pluginMap = {\n            ...options.pluginMap,\n            add: addPlugin,\n        };\n        const plugins = [...options.plugins];\n        const config = {\n            ...options.config,\n            // This is for the operations plugin\n            namespacedImportName: importTypesNamespace,\n            // This is for the client-side runtime plugins\n            importOperationTypesFrom: importTypesNamespace,\n            externalFragments: [],\n        };\n        options.documents.map(documentFile => {\n            if (isUsingTypes(documentFile.document, config.externalFragments.map(m => m.name), options.schemaAst)) {\n                const importType = options.config.useTypeImports ? 'import type' : 'import';\n                plugins.unshift({\n                    add: {\n                        content: `${importType} * as ${importTypesNamespace} from '${options.presetConfig.typesPath}';\\n`,\n                    },\n                });\n            }\n        });\n        return [\n            {\n                filename: options.baseOutputDir,\n                plugins,\n                pluginMap,\n                config,\n                schema: options.schema,\n                schemaAst: options.schemaAst,\n                documents: options.documents,\n            },\n        ];\n    },\n};\nexport default preset;\n//# sourceMappingURL=index.js.map"],"names":["isUsingTypes"],"mappings":";;;;;;;;;AAEY,MAAC,MAAM,GAAG;AACtB,IAAI,qBAAqB,EAAE,OAAO,IAAI;AACtC,QAAQ,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE;AAC7C,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,gJAAgJ,CAAC,CAAC,CAAC;AAChL,SAAS;AACT,QAAQ,MAAM,oBAAoB,GAAG,OAAO,CAAC,YAAY,CAAC,oBAAoB,IAAI,OAAO,CAAC;AAC1F,QAAQ,MAAM,SAAS,GAAG;AAC1B,YAAY,GAAG,OAAO,CAAC,SAAS;AAChC,YAAY,GAAG,EAAE,SAAS;AAC1B,SAAS,CAAC;AACV,QAAQ,MAAM,OAAO,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC7C,QAAQ,MAAM,MAAM,GAAG;AACvB,YAAY,GAAG,OAAO,CAAC,MAAM;AAC7B;AACA,YAAY,oBAAoB,EAAE,oBAAoB;AACtD;AACA,YAAY,wBAAwB,EAAE,oBAAoB;AAC1D,YAAY,iBAAiB,EAAE,EAAE;AACjC,SAAS,CAAC;AACV,QAAQ,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,IAAI;AAC9C,YAAY,IAAIA,0BAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,SAAS,CAAC,EAAE;AACnH,gBAAgB,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,cAAc,GAAG,aAAa,GAAG,QAAQ,CAAC;AAC5F,gBAAgB,OAAO,CAAC,OAAO,CAAC;AAChC,oBAAoB,GAAG,EAAE;AACzB,wBAAwB,OAAO,EAAE,CAAC,EAAE,UAAU,CAAC,MAAM,EAAE,oBAAoB,CAAC,OAAO,EAAE,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;AACzH,qBAAqB;AACrB,iBAAiB,CAAC,CAAC;AACnB,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,OAAO;AACf,YAAY;AACZ,gBAAgB,QAAQ,EAAE,OAAO,CAAC,aAAa;AAC/C,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,MAAM;AACtB,gBAAgB,MAAM,EAAE,OAAO,CAAC,MAAM;AACtC,gBAAgB,SAAS,EAAE,OAAO,CAAC,SAAS;AAC5C,gBAAgB,SAAS,EAAE,OAAO,CAAC,SAAS;AAC5C,aAAa;AACb,SAAS,CAAC;AACV,KAAK;AACL;;;;;"}