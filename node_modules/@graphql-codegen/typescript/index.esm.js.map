{"version":3,"file":"index.esm.js","sources":["../../../dist/plugins/typescript/typescript/src/typescript-variables-to-object.js","../../../dist/plugins/typescript/typescript/src/visitor.js","../../../dist/plugins/typescript/typescript/src/introspection-visitor.js","../../../packages/plugins/other/schema-ast/dist/index.esm.js","../../../dist/plugins/typescript/typescript/src/index.js"],"sourcesContent":["import { OperationVariablesToObject, normalizeAvoidOptionals, } from '@graphql-codegen/visitor-plugin-common';\nimport { Kind } from 'graphql';\nexport class TypeScriptOperationVariablesToObject extends OperationVariablesToObject {\n    constructor(_scalars, _convertName, _avoidOptionals, _immutableTypes, _namespacedImportName = null, _enumNames = [], _enumPrefix = true, _enumValues = {}, _applyCoercion = false) {\n        super(_scalars, _convertName, _namespacedImportName, _enumNames, _enumPrefix, _enumValues, _applyCoercion);\n        this._avoidOptionals = _avoidOptionals;\n        this._immutableTypes = _immutableTypes;\n    }\n    clearOptional(str) {\n        const prefix = this._namespacedImportName ? `${this._namespacedImportName}.` : '';\n        const rgx = new RegExp(`^${this.wrapMaybe(`(.*?)`)}$`, 'i');\n        if (str.startsWith(`${prefix}Maybe`)) {\n            return str.replace(rgx, '$1');\n        }\n        return str;\n    }\n    wrapAstTypeWithModifiers(baseType, typeNode, applyCoercion = false) {\n        if (typeNode.kind === Kind.NON_NULL_TYPE) {\n            const type = this.wrapAstTypeWithModifiers(baseType, typeNode.type, applyCoercion);\n            return this.clearOptional(type);\n        }\n        else if (typeNode.kind === Kind.LIST_TYPE) {\n            const innerType = this.wrapAstTypeWithModifiers(baseType, typeNode.type, applyCoercion);\n            const listInputCoercionExtension = applyCoercion ? ` | ${innerType}` : '';\n            return this.wrapMaybe(`${this._immutableTypes ? 'ReadonlyArray' : 'Array'}<${innerType}>${listInputCoercionExtension}`);\n        }\n        else {\n            return this.wrapMaybe(baseType);\n        }\n    }\n    formatFieldString(fieldName, isNonNullType, hasDefaultValue) {\n        return `${fieldName}${this.getAvoidOption(isNonNullType, hasDefaultValue) ? '?' : ''}`;\n    }\n    formatTypeString(fieldType, isNonNullType, hasDefaultValue) {\n        if (!hasDefaultValue && isNonNullType) {\n            return this.clearOptional(fieldType);\n        }\n        return fieldType;\n    }\n    wrapMaybe(type) {\n        const prefix = this._namespacedImportName ? `${this._namespacedImportName}.` : '';\n        return `${prefix}Maybe${type ? `<${type}>` : ''}`;\n    }\n    getAvoidOption(isNonNullType, hasDefaultValue) {\n        const options = normalizeAvoidOptionals(this._avoidOptionals);\n        return ((options.object || !options.defaultValue) && hasDefaultValue) || (!options.object && !isNonNullType);\n    }\n    getPunctuation() {\n        return ';';\n    }\n}\n//# sourceMappingURL=typescript-variables-to-object.js.map","import { transformComment, wrapWithSingleQuotes, DeclarationBlock, indent, BaseTypesVisitor, getConfigValue, normalizeAvoidOptionals, } from '@graphql-codegen/visitor-plugin-common';\nimport autoBind from 'auto-bind';\nimport { Kind, isEnumType, GraphQLObjectType, } from 'graphql';\nimport { TypeScriptOperationVariablesToObject } from './typescript-variables-to-object';\nexport const EXACT_SIGNATURE = `type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };`;\nexport const MAKE_OPTIONAL_SIGNATURE = `type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };`;\nexport const MAKE_MAYBE_SIGNATURE = `type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };`;\nexport class TsVisitor extends BaseTypesVisitor {\n    constructor(schema, pluginConfig, additionalConfig = {}) {\n        super(schema, pluginConfig, {\n            noExport: getConfigValue(pluginConfig.noExport, false),\n            avoidOptionals: normalizeAvoidOptionals(getConfigValue(pluginConfig.avoidOptionals, false)),\n            maybeValue: getConfigValue(pluginConfig.maybeValue, 'T | null'),\n            constEnums: getConfigValue(pluginConfig.constEnums, false),\n            enumsAsTypes: getConfigValue(pluginConfig.enumsAsTypes, false),\n            futureProofEnums: getConfigValue(pluginConfig.futureProofEnums, false),\n            futureProofUnions: getConfigValue(pluginConfig.futureProofUnions, false),\n            enumsAsConst: getConfigValue(pluginConfig.enumsAsConst, false),\n            numericEnums: getConfigValue(pluginConfig.numericEnums, false),\n            onlyOperationTypes: getConfigValue(pluginConfig.onlyOperationTypes, false),\n            immutableTypes: getConfigValue(pluginConfig.immutableTypes, false),\n            useImplementingTypes: getConfigValue(pluginConfig.useImplementingTypes, false),\n            entireFieldWrapperValue: getConfigValue(pluginConfig.entireFieldWrapperValue, 'T'),\n            wrapEntireDefinitions: getConfigValue(pluginConfig.wrapEntireFieldDefinitions, false),\n            ...(additionalConfig || {}),\n        });\n        autoBind(this);\n        const enumNames = Object.values(schema.getTypeMap())\n            .filter(isEnumType)\n            .map(type => type.name);\n        this.setArgumentsTransformer(new TypeScriptOperationVariablesToObject(this.scalars, this.convertName, this.config.avoidOptionals, this.config.immutableTypes, null, enumNames, pluginConfig.enumPrefix, this.config.enumValues));\n        this.setDeclarationBlockConfig({\n            enumNameValueSeparator: ' =',\n            ignoreExport: this.config.noExport,\n        });\n    }\n    _getTypeForNode(node) {\n        const typeAsString = node.name;\n        if (this.config.useImplementingTypes) {\n            const allTypesMap = this._schema.getTypeMap();\n            const implementingTypes = [];\n            // TODO: Move this to a better place, since we are using this logic in some other places as well.\n            for (const graphqlType of Object.values(allTypesMap)) {\n                if (graphqlType instanceof GraphQLObjectType) {\n                    const allInterfaces = graphqlType.getInterfaces();\n                    if (allInterfaces.some(int => typeAsString === int.name)) {\n                        implementingTypes.push(this.convertName(graphqlType.name));\n                    }\n                }\n            }\n            if (implementingTypes.length > 0) {\n                return implementingTypes.join(' | ');\n            }\n        }\n        const typeString = super._getTypeForNode(node);\n        if (this.config.allowEnumStringTypes === true) {\n            const schemaType = this._schema.getType(node.name);\n            if (isEnumType(schemaType)) {\n                return `${typeString} | ` + '`${' + typeString + '}`';\n            }\n        }\n        return typeString;\n    }\n    getWrapperDefinitions() {\n        const definitions = [\n            this.getMaybeValue(),\n            this.getExactDefinition(),\n            this.getMakeOptionalDefinition(),\n            this.getMakeMaybeDefinition(),\n        ];\n        if (this.config.wrapFieldDefinitions) {\n            definitions.push(this.getFieldWrapperValue());\n        }\n        if (this.config.wrapEntireDefinitions) {\n            definitions.push(this.getEntireFieldWrapperValue());\n        }\n        return definitions;\n    }\n    getExactDefinition() {\n        return `${this.getExportPrefix()}${EXACT_SIGNATURE}`;\n    }\n    getMakeOptionalDefinition() {\n        return `${this.getExportPrefix()}${MAKE_OPTIONAL_SIGNATURE}`;\n    }\n    getMakeMaybeDefinition() {\n        return `${this.getExportPrefix()}${MAKE_MAYBE_SIGNATURE}`;\n    }\n    getMaybeValue() {\n        return `${this.getExportPrefix()}type Maybe<T> = ${this.config.maybeValue};`;\n    }\n    clearOptional(str) {\n        if (str.startsWith('Maybe')) {\n            return str.replace(/Maybe<(.*?)>$/, '$1');\n        }\n        return str;\n    }\n    getExportPrefix() {\n        if (this.config.noExport) {\n            return '';\n        }\n        return super.getExportPrefix();\n    }\n    NamedType(node, key, parent, path, ancestors) {\n        return `Maybe<${super.NamedType(node, key, parent, path, ancestors)}>`;\n    }\n    ListType(node) {\n        return `Maybe<${super.ListType(node)}>`;\n    }\n    UnionTypeDefinition(node, key, parent) {\n        if (this.config.onlyOperationTypes)\n            return '';\n        let withFutureAddedValue = [];\n        if (this.config.futureProofUnions) {\n            withFutureAddedValue = [\n                this.config.immutableTypes ? `{ readonly __typename?: \"%other\" }` : `{ __typename?: \"%other\" }`,\n            ];\n        }\n        const originalNode = parent[key];\n        const possibleTypes = originalNode.types\n            .map(t => (this.scalars[t.name.value] ? this._getScalar(t.name.value) : this.convertName(t)))\n            .concat(...withFutureAddedValue)\n            .join(' | ');\n        return new DeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind('type')\n            .withName(this.convertName(node))\n            .withComment(node.description)\n            .withContent(possibleTypes).string;\n        // return super.UnionTypeDefinition(node, key, parent).concat(withFutureAddedValue).join(\"\");\n    }\n    wrapWithListType(str) {\n        return `${this.config.immutableTypes ? 'ReadonlyArray' : 'Array'}<${str}>`;\n    }\n    NonNullType(node) {\n        const baseValue = super.NonNullType(node);\n        return this.clearOptional(baseValue);\n    }\n    FieldDefinition(node, key, parent) {\n        const typeString = this.config.wrapEntireDefinitions\n            ? `EntireFieldWrapper<${node.type}>`\n            : node.type;\n        const originalFieldNode = parent[key];\n        const addOptionalSign = !this.config.avoidOptionals.field && originalFieldNode.type.kind !== Kind.NON_NULL_TYPE;\n        const comment = this.getFieldComment(node);\n        const { type } = this.config.declarationKind;\n        return (comment +\n            indent(`${this.config.immutableTypes ? 'readonly ' : ''}${node.name}${addOptionalSign ? '?' : ''}: ${typeString}${this.getPunctuation(type)}`));\n    }\n    InputValueDefinition(node, key, parent) {\n        const originalFieldNode = parent[key];\n        const addOptionalSign = !this.config.avoidOptionals.inputValue &&\n            (originalFieldNode.type.kind !== Kind.NON_NULL_TYPE ||\n                (!this.config.avoidOptionals.defaultValue && node.defaultValue !== undefined));\n        const comment = transformComment(node.description, 1);\n        const { type } = this.config.declarationKind;\n        return (comment +\n            indent(`${this.config.immutableTypes ? 'readonly ' : ''}${node.name}${addOptionalSign ? '?' : ''}: ${node.type}${this.getPunctuation(type)}`));\n    }\n    EnumTypeDefinition(node) {\n        const enumName = node.name;\n        // In case of mapped external enum string\n        if (this.config.enumValues[enumName] && this.config.enumValues[enumName].sourceFile) {\n            return `export { ${this.config.enumValues[enumName].typeIdentifier} };\\n`;\n        }\n        const getValueFromConfig = (enumValue) => {\n            if (this.config.enumValues[enumName] &&\n                this.config.enumValues[enumName].mappedValues &&\n                typeof this.config.enumValues[enumName].mappedValues[enumValue] !== 'undefined') {\n                return this.config.enumValues[enumName].mappedValues[enumValue];\n            }\n            return null;\n        };\n        const withFutureAddedValue = [\n            this.config.futureProofEnums ? [indent('| ' + wrapWithSingleQuotes('%future added value'))] : [],\n        ];\n        const enumTypeName = this.convertName(node, { useTypesPrefix: this.config.enumPrefix });\n        if (this.config.enumsAsTypes) {\n            return new DeclarationBlock(this._declarationBlockConfig)\n                .export()\n                .asKind('type')\n                .withComment(node.description)\n                .withName(enumTypeName)\n                .withContent('\\n' +\n                node.values\n                    .map(enumOption => {\n                    var _a;\n                    const name = enumOption.name;\n                    const enumValue = (_a = getValueFromConfig(name)) !== null && _a !== void 0 ? _a : name;\n                    const comment = transformComment(enumOption.description, 1);\n                    return comment + indent('| ' + wrapWithSingleQuotes(enumValue));\n                })\n                    .concat(...withFutureAddedValue)\n                    .join('\\n')).string;\n        }\n        if (this.config.numericEnums) {\n            const block = new DeclarationBlock(this._declarationBlockConfig)\n                .export()\n                .withComment(node.description)\n                .withName(enumTypeName)\n                .asKind('enum')\n                .withBlock(node.values\n                .map((enumOption, i) => {\n                const valueFromConfig = getValueFromConfig(enumOption.name);\n                const enumValue = valueFromConfig !== null && valueFromConfig !== void 0 ? valueFromConfig : i;\n                const comment = transformComment(enumOption.description, 1);\n                return comment + indent(enumOption.name) + ` = ${enumValue}`;\n            })\n                .concat(...withFutureAddedValue)\n                .join(',\\n')).string;\n            return block;\n        }\n        if (this.config.enumsAsConst) {\n            const typeName = `export type ${enumTypeName} = typeof ${enumTypeName}[keyof typeof ${enumTypeName}];`;\n            const enumAsConst = new DeclarationBlock({\n                ...this._declarationBlockConfig,\n                blockTransformer: block => {\n                    return block + ' as const';\n                },\n            })\n                .export()\n                .asKind('const')\n                .withName(enumTypeName)\n                .withComment(node.description)\n                .withBlock(node.values\n                .map(enumOption => {\n                var _a;\n                const optionName = this.convertName(enumOption, { useTypesPrefix: false, transformUnderscore: true });\n                const comment = transformComment(enumOption.description, 1);\n                const name = enumOption.name;\n                const enumValue = (_a = getValueFromConfig(name)) !== null && _a !== void 0 ? _a : name;\n                return comment + indent(`${optionName}: ${wrapWithSingleQuotes(enumValue)}`);\n            })\n                .join(',\\n')).string;\n            return [enumAsConst, typeName].join('\\n');\n        }\n        return new DeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind(this.config.constEnums ? 'const enum' : 'enum')\n            .withName(enumTypeName)\n            .withComment(node.description)\n            .withBlock(this.buildEnumValuesBlock(enumName, node.values)).string;\n    }\n    getPunctuation(_declarationKind) {\n        return ';';\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { TsVisitor } from './visitor';\nimport autoBind from 'auto-bind';\nexport class TsIntrospectionVisitor extends TsVisitor {\n    constructor(schema, pluginConfig = {}, typesToInclude) {\n        super(schema, pluginConfig);\n        this.typesToInclude = [];\n        this.typesToInclude = typesToInclude;\n        autoBind(this);\n    }\n    DirectiveDefinition() {\n        return null;\n    }\n    ObjectTypeDefinition(node, key, parent) {\n        const name = node.name;\n        if (this.typesToInclude.some(type => type.name === name)) {\n            return super.ObjectTypeDefinition(node, key, parent);\n        }\n        return null;\n    }\n    EnumTypeDefinition(node) {\n        const name = node.name;\n        if (this.typesToInclude.some(type => type.name === name)) {\n            return super.EnumTypeDefinition(node);\n        }\n        return null;\n    }\n}\n//# sourceMappingURL=introspection-visitor.js.map","import { lexicographicSortSchema, printSchema, parse, visit, buildASTSchema } from 'graphql';\nimport { removeFederation } from '@graphql-codegen/plugin-helpers';\nimport { extname } from 'path';\nimport { printSchemaWithDirectives } from '@graphql-tools/utils';\n\nconst plugin = async (schema, _documents, { commentDescriptions = false, includeDirectives = false, sort = false, federation }) => {\n    let outputSchema = federation ? removeFederation(schema) : schema;\n    outputSchema = sort ? lexicographicSortSchema(outputSchema) : outputSchema;\n    if (includeDirectives) {\n        return printSchemaWithDirectives(outputSchema);\n    }\n    return printSchema(outputSchema, { commentDescriptions: commentDescriptions });\n};\nconst validate = async (_schema, _documents, _config, outputFile, allPlugins) => {\n    const singlePlugin = allPlugins.length === 1;\n    if (singlePlugin && extname(outputFile) !== '.graphql') {\n        throw new Error(`Plugin \"schema-ast\" requires extension to be \".graphql\"!`);\n    }\n};\nfunction transformSchemaAST(schema, config) {\n    const printedSchema = printSchema(schema);\n    const astNode = parse(printedSchema);\n    const transformedAST = config.disableDescriptions\n        ? visit(astNode, {\n            leave: node => ({\n                ...node,\n                description: undefined,\n            }),\n        })\n        : astNode;\n    const transformedSchema = config.disableDescriptions ? buildASTSchema(transformedAST) : schema;\n    return {\n        schema: transformedSchema,\n        ast: transformedAST,\n    };\n}\n\nexport { plugin, transformSchemaAST, validate };\n//# sourceMappingURL=index.esm.js.map\n","import { parse, visit, TypeInfo, visitWithTypeInfo, getNamedType, isIntrospectionType, printIntrospectionSchema, isObjectType, } from 'graphql';\nimport { TsVisitor } from './visitor';\nimport { TsIntrospectionVisitor } from './introspection-visitor';\nimport { transformSchemaAST } from '@graphql-codegen/schema-ast';\nexport * from './typescript-variables-to-object';\nexport * from './visitor';\nexport * from './config';\nexport * from './introspection-visitor';\nexport const plugin = (schema, documents, config) => {\n    const { schema: _schema, ast } = transformSchemaAST(schema, config);\n    const visitor = new TsVisitor(_schema, config);\n    const visitorResult = visit(ast, { leave: visitor });\n    const introspectionDefinitions = includeIntrospectionDefinitions(_schema, documents, config);\n    const scalars = visitor.scalarsDefinition;\n    return {\n        prepend: [...visitor.getEnumsImports(), ...visitor.getScalarsImports(), ...visitor.getWrapperDefinitions()],\n        content: [scalars, ...visitorResult.definitions, ...introspectionDefinitions].join('\\n'),\n    };\n};\nexport function includeIntrospectionDefinitions(schema, documents, config) {\n    const typeInfo = new TypeInfo(schema);\n    const usedTypes = [];\n    const documentsVisitor = visitWithTypeInfo(typeInfo, {\n        Field() {\n            const type = getNamedType(typeInfo.getType());\n            if (isIntrospectionType(type) && !usedTypes.includes(type)) {\n                usedTypes.push(type);\n            }\n        },\n    });\n    documents.forEach(doc => visit(doc.document, documentsVisitor));\n    const typesToInclude = [];\n    usedTypes.forEach(type => {\n        collectTypes(type);\n    });\n    const visitor = new TsIntrospectionVisitor(schema, config, typesToInclude);\n    const result = visit(parse(printIntrospectionSchema(schema)), { leave: visitor });\n    // recursively go through each `usedTypes` and their children and collect all used types\n    // we don't care about Interfaces, Unions and others, but Objects and Enums\n    function collectTypes(type) {\n        if (typesToInclude.includes(type)) {\n            return;\n        }\n        typesToInclude.push(type);\n        if (isObjectType(type)) {\n            const fields = type.getFields();\n            Object.keys(fields).forEach(key => {\n                const field = fields[key];\n                const type = getNamedType(field.type);\n                collectTypes(type);\n            });\n        }\n    }\n    return result.definitions;\n}\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":";;;;;;;AAEO,MAAM,oCAAoC,SAAS,0BAA0B,CAAC;AACrF,IAAI,WAAW,CAAC,QAAQ,EAAE,YAAY,EAAE,eAAe,EAAE,eAAe,EAAE,qBAAqB,GAAG,IAAI,EAAE,UAAU,GAAG,EAAE,EAAE,WAAW,GAAG,IAAI,EAAE,WAAW,GAAG,EAAE,EAAE,cAAc,GAAG,KAAK,EAAE;AACvL,QAAQ,KAAK,CAAC,QAAQ,EAAE,YAAY,EAAE,qBAAqB,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;AACnH,QAAQ,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;AAC/C,QAAQ,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;AAC/C,KAAK;AACL,IAAI,aAAa,CAAC,GAAG,EAAE;AACvB,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,GAAG,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAC1F,QAAQ,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AACpE,QAAQ,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;AAC9C,YAAY,OAAO,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC1C,SAAS;AACT,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,GAAG,KAAK,EAAE;AACxE,QAAQ,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,EAAE;AAClD,YAAY,MAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AAC/F,YAAY,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC5C,SAAS;AACT,aAAa,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,EAAE;AACnD,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AACpG,YAAY,MAAM,0BAA0B,GAAG,aAAa,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;AACtF,YAAY,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,GAAG,eAAe,GAAG,OAAO,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,EAAE,0BAA0B,CAAC,CAAC,CAAC,CAAC;AACpI,SAAS;AACT,aAAa;AACb,YAAY,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAC5C,SAAS;AACT,KAAK;AACL,IAAI,iBAAiB,CAAC,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE;AACjE,QAAQ,OAAO,CAAC,EAAE,SAAS,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,eAAe,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;AAC/F,KAAK;AACL,IAAI,gBAAgB,CAAC,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE;AAChE,QAAQ,IAAI,CAAC,eAAe,IAAI,aAAa,EAAE;AAC/C,YAAY,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACjD,SAAS;AACT,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL,IAAI,SAAS,CAAC,IAAI,EAAE;AACpB,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,GAAG,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAC1F,QAAQ,OAAO,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAC1D,KAAK;AACL,IAAI,cAAc,CAAC,aAAa,EAAE,eAAe,EAAE;AACnD,QAAQ,MAAM,OAAO,GAAG,uBAAuB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AACtE,QAAQ,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,KAAK,eAAe,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,CAAC;AACrH,KAAK;AACL,IAAI,cAAc,GAAG;AACrB,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL;;AC9CY,MAAC,eAAe,GAAG,CAAC,4EAA4E,EAAE;AAClG,MAAC,uBAAuB,GAAG,CAAC,4FAA4F,EAAE;AAC1H,MAAC,oBAAoB,GAAG,CAAC,wFAAwF,EAAE;AACxH,MAAM,SAAS,SAAS,gBAAgB,CAAC;AAChD,IAAI,WAAW,CAAC,MAAM,EAAE,YAAY,EAAE,gBAAgB,GAAG,EAAE,EAAE;AAC7D,QAAQ,KAAK,CAAC,MAAM,EAAE,YAAY,EAAE;AACpC,YAAY,QAAQ,EAAE,cAAc,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC;AAClE,YAAY,cAAc,EAAE,uBAAuB,CAAC,cAAc,CAAC,YAAY,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;AACvG,YAAY,UAAU,EAAE,cAAc,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC;AAC3E,YAAY,UAAU,EAAE,cAAc,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC;AACtE,YAAY,YAAY,EAAE,cAAc,CAAC,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC;AAC1E,YAAY,gBAAgB,EAAE,cAAc,CAAC,YAAY,CAAC,gBAAgB,EAAE,KAAK,CAAC;AAClF,YAAY,iBAAiB,EAAE,cAAc,CAAC,YAAY,CAAC,iBAAiB,EAAE,KAAK,CAAC;AACpF,YAAY,YAAY,EAAE,cAAc,CAAC,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC;AAC1E,YAAY,YAAY,EAAE,cAAc,CAAC,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC;AAC1E,YAAY,kBAAkB,EAAE,cAAc,CAAC,YAAY,CAAC,kBAAkB,EAAE,KAAK,CAAC;AACtF,YAAY,cAAc,EAAE,cAAc,CAAC,YAAY,CAAC,cAAc,EAAE,KAAK,CAAC;AAC9E,YAAY,oBAAoB,EAAE,cAAc,CAAC,YAAY,CAAC,oBAAoB,EAAE,KAAK,CAAC;AAC1F,YAAY,uBAAuB,EAAE,cAAc,CAAC,YAAY,CAAC,uBAAuB,EAAE,GAAG,CAAC;AAC9F,YAAY,qBAAqB,EAAE,cAAc,CAAC,YAAY,CAAC,0BAA0B,EAAE,KAAK,CAAC;AACjG,YAAY,IAAI,gBAAgB,IAAI,EAAE,CAAC;AACvC,SAAS,CAAC,CAAC;AACX,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,QAAQ,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;AAC5D,aAAa,MAAM,CAAC,UAAU,CAAC;AAC/B,aAAa,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AACpC,QAAQ,IAAI,CAAC,uBAAuB,CAAC,IAAI,oCAAoC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;AACzO,QAAQ,IAAI,CAAC,yBAAyB,CAAC;AACvC,YAAY,sBAAsB,EAAE,IAAI;AACxC,YAAY,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;AAC9C,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,eAAe,CAAC,IAAI,EAAE;AAC1B,QAAQ,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC;AACvC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;AAC9C,YAAY,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;AAC1D,YAAY,MAAM,iBAAiB,GAAG,EAAE,CAAC;AACzC;AACA,YAAY,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;AAClE,gBAAgB,IAAI,WAAW,YAAY,iBAAiB,EAAE;AAC9D,oBAAoB,MAAM,aAAa,GAAG,WAAW,CAAC,aAAa,EAAE,CAAC;AACtE,oBAAoB,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,YAAY,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE;AAC9E,wBAAwB,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;AACnF,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,YAAY,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;AAC9C,gBAAgB,OAAO,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACrD,aAAa;AACb,SAAS;AACT,QAAQ,MAAM,UAAU,GAAG,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AACvD,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,KAAK,IAAI,EAAE;AACvD,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/D,YAAY,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;AACxC,gBAAgB,OAAO,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,UAAU,GAAG,IAAI,CAAC;AACtE,aAAa;AACb,SAAS;AACT,QAAQ,OAAO,UAAU,CAAC;AAC1B,KAAK;AACL,IAAI,qBAAqB,GAAG;AAC5B,QAAQ,MAAM,WAAW,GAAG;AAC5B,YAAY,IAAI,CAAC,aAAa,EAAE;AAChC,YAAY,IAAI,CAAC,kBAAkB,EAAE;AACrC,YAAY,IAAI,CAAC,yBAAyB,EAAE;AAC5C,YAAY,IAAI,CAAC,sBAAsB,EAAE;AACzC,SAAS,CAAC;AACV,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;AAC9C,YAAY,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;AAC1D,SAAS;AACT,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE;AAC/C,YAAY,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE,CAAC,CAAC;AAChE,SAAS;AACT,QAAQ,OAAO,WAAW,CAAC;AAC3B,KAAK;AACL,IAAI,kBAAkB,GAAG;AACzB,QAAQ,OAAO,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC;AAC7D,KAAK;AACL,IAAI,yBAAyB,GAAG;AAChC,QAAQ,OAAO,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,uBAAuB,CAAC,CAAC,CAAC;AACrE,KAAK;AACL,IAAI,sBAAsB,GAAG;AAC7B,QAAQ,OAAO,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,oBAAoB,CAAC,CAAC,CAAC;AAClE,KAAK;AACL,IAAI,aAAa,GAAG;AACpB,QAAQ,OAAO,CAAC,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACrF,KAAK;AACL,IAAI,aAAa,CAAC,GAAG,EAAE;AACvB,QAAQ,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AACrC,YAAY,OAAO,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AACtD,SAAS;AACT,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,eAAe,GAAG;AACtB,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;AAClC,YAAY,OAAO,EAAE,CAAC;AACtB,SAAS;AACT,QAAQ,OAAO,KAAK,CAAC,eAAe,EAAE,CAAC;AACvC,KAAK;AACL,IAAI,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE;AAClD,QAAQ,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/E,KAAK;AACL,IAAI,QAAQ,CAAC,IAAI,EAAE;AACnB,QAAQ,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,KAAK;AACL,IAAI,mBAAmB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE;AAC3C,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB;AAC1C,YAAY,OAAO,EAAE,CAAC;AACtB,QAAQ,IAAI,oBAAoB,GAAG,EAAE,CAAC;AACtC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;AAC3C,YAAY,oBAAoB,GAAG;AACnC,gBAAgB,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,CAAC,kCAAkC,CAAC,GAAG,CAAC,yBAAyB,CAAC;AAC/G,aAAa,CAAC;AACd,SAAS;AACT,QAAQ,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACzC,QAAQ,MAAM,aAAa,GAAG,YAAY,CAAC,KAAK;AAChD,aAAa,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AACzG,aAAa,MAAM,CAAC,GAAG,oBAAoB,CAAC;AAC5C,aAAa,IAAI,CAAC,KAAK,CAAC,CAAC;AACzB,QAAQ,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC;AACjE,aAAa,MAAM,EAAE;AACrB,aAAa,MAAM,CAAC,MAAM,CAAC;AAC3B,aAAa,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC7C,aAAa,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;AAC1C,aAAa,WAAW,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC;AAC/C;AACA,KAAK;AACL,IAAI,gBAAgB,CAAC,GAAG,EAAE;AAC1B,QAAQ,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,eAAe,GAAG,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACnF,KAAK;AACL,IAAI,WAAW,CAAC,IAAI,EAAE;AACtB,QAAQ,MAAM,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAClD,QAAQ,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAC7C,KAAK;AACL,IAAI,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE;AACvC,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB;AAC5D,cAAc,CAAC,mBAAmB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAChD,cAAc,IAAI,CAAC,IAAI,CAAC;AACxB,QAAQ,MAAM,iBAAiB,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAC9C,QAAQ,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC;AACxH,QAAQ,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AACnD,QAAQ,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;AACrD,QAAQ,QAAQ,OAAO;AACvB,YAAY,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,WAAW,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,eAAe,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AAC5J,KAAK;AACL,IAAI,oBAAoB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE;AAC5C,QAAQ,MAAM,iBAAiB,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAC9C,QAAQ,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU;AACtE,aAAa,iBAAiB,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa;AAC/D,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;AAC/F,QAAQ,MAAM,OAAO,GAAG,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAC9D,QAAQ,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;AACrD,QAAQ,QAAQ,OAAO;AACvB,YAAY,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,WAAW,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,eAAe,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AAC3J,KAAK;AACL,IAAI,kBAAkB,CAAC,IAAI,EAAE;AAC7B,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;AACnC;AACA,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE;AAC7F,YAAY,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AACtF,SAAS;AACT,QAAQ,MAAM,kBAAkB,GAAG,CAAC,SAAS,KAAK;AAClD,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;AAChD,gBAAgB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,YAAY;AAC7D,gBAAgB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,WAAW,EAAE;AACjG,gBAAgB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AAChF,aAAa;AACb,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS,CAAC;AACV,QAAQ,MAAM,oBAAoB,GAAG;AACrC,YAAY,IAAI,CAAC,MAAM,CAAC,gBAAgB,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,oBAAoB,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,EAAE;AAC5G,SAAS,CAAC;AACV,QAAQ,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;AAChG,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;AACtC,YAAY,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC;AACrE,iBAAiB,MAAM,EAAE;AACzB,iBAAiB,MAAM,CAAC,MAAM,CAAC;AAC/B,iBAAiB,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;AAC9C,iBAAiB,QAAQ,CAAC,YAAY,CAAC;AACvC,iBAAiB,WAAW,CAAC,IAAI;AACjC,gBAAgB,IAAI,CAAC,MAAM;AAC3B,qBAAqB,GAAG,CAAC,UAAU,IAAI;AACvC,oBAAoB,IAAI,EAAE,CAAC;AAC3B,oBAAoB,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;AACjD,oBAAoB,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AAC5G,oBAAoB,MAAM,OAAO,GAAG,gBAAgB,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAChF,oBAAoB,OAAO,OAAO,GAAG,MAAM,CAAC,IAAI,GAAG,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC;AACpF,iBAAiB,CAAC;AAClB,qBAAqB,MAAM,CAAC,GAAG,oBAAoB,CAAC;AACpD,qBAAqB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;AACxC,SAAS;AACT,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;AACtC,YAAY,MAAM,KAAK,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC;AAC5E,iBAAiB,MAAM,EAAE;AACzB,iBAAiB,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;AAC9C,iBAAiB,QAAQ,CAAC,YAAY,CAAC;AACvC,iBAAiB,MAAM,CAAC,MAAM,CAAC;AAC/B,iBAAiB,SAAS,CAAC,IAAI,CAAC,MAAM;AACtC,iBAAiB,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC,KAAK;AACxC,gBAAgB,MAAM,eAAe,GAAG,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC5E,gBAAgB,MAAM,SAAS,GAAG,eAAe,KAAK,IAAI,IAAI,eAAe,KAAK,KAAK,CAAC,GAAG,eAAe,GAAG,CAAC,CAAC;AAC/G,gBAAgB,MAAM,OAAO,GAAG,gBAAgB,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAC5E,gBAAgB,OAAO,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC;AAC7E,aAAa,CAAC;AACd,iBAAiB,MAAM,CAAC,GAAG,oBAAoB,CAAC;AAChD,iBAAiB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;AACrC,YAAY,OAAO,KAAK,CAAC;AACzB,SAAS;AACT,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;AACtC,YAAY,MAAM,QAAQ,GAAG,CAAC,YAAY,EAAE,YAAY,CAAC,UAAU,EAAE,YAAY,CAAC,cAAc,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;AACnH,YAAY,MAAM,WAAW,GAAG,IAAI,gBAAgB,CAAC;AACrD,gBAAgB,GAAG,IAAI,CAAC,uBAAuB;AAC/C,gBAAgB,gBAAgB,EAAE,KAAK,IAAI;AAC3C,oBAAoB,OAAO,KAAK,GAAG,WAAW,CAAC;AAC/C,iBAAiB;AACjB,aAAa,CAAC;AACd,iBAAiB,MAAM,EAAE;AACzB,iBAAiB,MAAM,CAAC,OAAO,CAAC;AAChC,iBAAiB,QAAQ,CAAC,YAAY,CAAC;AACvC,iBAAiB,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;AAC9C,iBAAiB,SAAS,CAAC,IAAI,CAAC,MAAM;AACtC,iBAAiB,GAAG,CAAC,UAAU,IAAI;AACnC,gBAAgB,IAAI,EAAE,CAAC;AACvB,gBAAgB,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,CAAC;AACtH,gBAAgB,MAAM,OAAO,GAAG,gBAAgB,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAC5E,gBAAgB,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;AAC7C,gBAAgB,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AACxG,gBAAgB,OAAO,OAAO,GAAG,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,EAAE,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7F,aAAa,CAAC;AACd,iBAAiB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;AACrC,YAAY,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtD,SAAS;AACT,QAAQ,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC;AACjE,aAAa,MAAM,EAAE;AACrB,aAAa,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,YAAY,GAAG,MAAM,CAAC;AACnE,aAAa,QAAQ,CAAC,YAAY,CAAC;AACnC,aAAa,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;AAC1C,aAAa,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;AAChF,KAAK;AACL,IAAI,cAAc,CAAC,gBAAgB,EAAE;AACrC,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL;;ACnPO,MAAM,sBAAsB,SAAS,SAAS,CAAC;AACtD,IAAI,WAAW,CAAC,MAAM,EAAE,YAAY,GAAG,EAAE,EAAE,cAAc,EAAE;AAC3D,QAAQ,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AACpC,QAAQ,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AACjC,QAAQ,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;AAC7C,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,KAAK;AACL,IAAI,mBAAmB,GAAG;AAC1B,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,oBAAoB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE;AAC5C,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC/B,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE;AAClE,YAAY,OAAO,KAAK,CAAC,oBAAoB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;AACjE,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,kBAAkB,CAAC,IAAI,EAAE;AAC7B,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC/B,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE;AAClE,YAAY,OAAO,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAClD,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL;;ACPA,SAAS,kBAAkB,CAAC,MAAM,EAAE,MAAM,EAAE;AAC5C,IAAI,MAAM,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;AAC9C,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;AACzC,IAAI,MAAM,cAAc,GAAG,MAAM,CAAC,mBAAmB;AACrD,UAAU,KAAK,CAAC,OAAO,EAAE;AACzB,YAAY,KAAK,EAAE,IAAI,KAAK;AAC5B,gBAAgB,GAAG,IAAI;AACvB,gBAAgB,WAAW,EAAE,SAAS;AACtC,aAAa,CAAC;AACd,SAAS,CAAC;AACV,UAAU,OAAO,CAAC;AAClB,IAAI,MAAM,iBAAiB,GAAG,MAAM,CAAC,mBAAmB,GAAG,cAAc,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC;AACnG,IAAI,OAAO;AACX,QAAQ,MAAM,EAAE,iBAAiB;AACjC,QAAQ,GAAG,EAAE,cAAc;AAC3B,KAAK,CAAC;AACN;;AC3BY,MAAC,MAAM,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,KAAK;AACrD,IAAI,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACxE,IAAI,MAAM,OAAO,GAAG,IAAI,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AACnD,IAAI,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;AACzD,IAAI,MAAM,wBAAwB,GAAG,+BAA+B,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AACjG,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAI,OAAO;AACX,QAAQ,OAAO,EAAE,CAAC,GAAG,OAAO,CAAC,eAAe,EAAE,EAAE,GAAG,OAAO,CAAC,iBAAiB,EAAE,EAAE,GAAG,OAAO,CAAC,qBAAqB,EAAE,CAAC;AACnH,QAAQ,OAAO,EAAE,CAAC,OAAO,EAAE,GAAG,aAAa,CAAC,WAAW,EAAE,GAAG,wBAAwB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;AAChG,KAAK,CAAC;AACN,EAAE;AACK,SAAS,+BAA+B,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE;AAC3E,IAAI,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC1C,IAAI,MAAM,SAAS,GAAG,EAAE,CAAC;AACzB,IAAI,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,QAAQ,EAAE;AACzD,QAAQ,KAAK,GAAG;AAChB,YAAY,MAAM,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;AAC1D,YAAY,IAAI,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AACxE,gBAAgB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrC,aAAa;AACb,SAAS;AACT,KAAK,CAAC,CAAC;AACP,IAAI,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,CAAC;AACpE,IAAI,MAAM,cAAc,GAAG,EAAE,CAAC;AAC9B,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI;AAC9B,QAAQ,YAAY,CAAC,IAAI,CAAC,CAAC;AAC3B,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,OAAO,GAAG,IAAI,sBAAsB,CAAC,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;AAC/E,IAAI,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;AACtF;AACA;AACA,IAAI,SAAS,YAAY,CAAC,IAAI,EAAE;AAChC,QAAQ,IAAI,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AAC3C,YAAY,OAAO;AACnB,SAAS;AACT,QAAQ,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,QAAQ,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;AAChC,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAC5C,YAAY,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI;AAC/C,gBAAgB,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAC1C,gBAAgB,MAAM,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACtD,gBAAgB,YAAY,CAAC,IAAI,CAAC,CAAC;AACnC,aAAa,CAAC,CAAC;AACf,SAAS;AACT,KAAK;AACL,IAAI,OAAO,MAAM,CAAC,WAAW,CAAC;AAC9B;;;;"}