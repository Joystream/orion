import Ajv from 'ajv';
import axios from 'axios';
import fs from 'fs';
/**
 * Read sequence of bytes from the file or remote host
 * provided path. Both `start` and `end` are inclusive
 * @param context path to the file
 * @param pathOrUrl
 * @param start starting index of the range
 * @param end ending index of the range
 * @returns byte sequence
 */
export async function readBytesFromFile(context, pathOrUrl, start, end) {
    try {
        if (context === 'PATH') {
            return new Promise((resolve) => {
                const a = fs.createReadStream(pathOrUrl, { start, end }).on('data', (data) => {
                    resolve(data);
                    a.close();
                });
            });
        }
        const response = await axios.get(pathOrUrl, {
            responseType: 'arraybuffer',
            headers: {
                range: `bytes=${start}-${end}`,
            },
        });
        return new Uint8Array(response.data);
    }
    catch (error) {
        throw new Error(`Failed to read input stream`);
    }
}
export async function getInputJson(inputPath, schema) {
    let content, jsonObj;
    try {
        content = fs.readFileSync(inputPath).toString();
    }
    catch (e) {
        throw new Error(`Cannot access the input file at: ${inputPath}`);
    }
    try {
        jsonObj = JSON.parse(content);
    }
    catch (e) {
        throw new Error(`JSON parsing failed for file: ${inputPath}`);
    }
    if (schema) {
        await validateInput(jsonObj, schema);
    }
    return jsonObj;
}
export async function validateInput(input, schema) {
    const ajv = new Ajv({ allErrors: true });
    const valid = ajv.validate(schema, input);
    if (!valid) {
        throw new Error(`Input JSON file is not valid:\n` +
            ajv.errors?.map((e) => `${e.dataPath}: ${e.message} (${JSON.stringify(e.params)})`).join('\n'));
    }
}
