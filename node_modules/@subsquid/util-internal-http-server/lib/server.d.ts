/// <reference types="node" />
import * as http from "http";
import { RequestListener } from "http";
export interface ListeningServer {
    readonly port: number;
    close(): Promise<void>;
}
export interface HttpRequest extends http.IncomingMessage {
    method: string;
    url: string;
}
export declare class HttpContext {
    readonly request: HttpRequest;
    readonly response: http.ServerResponse;
    private _url?;
    constructor(request: HttpRequest, response: http.ServerResponse);
    get url(): URL;
    send(status: number, body?: string | Uint8Array | object, contentType?: string): void;
}
export interface RequestHandler {
    (ctx: HttpContext): Promise<void>;
}
export declare function createHttpServer(handler: RequestHandler, port?: number | string): Promise<ListeningServer>;
export declare function createNodeHttpServer(handler: RequestListener, port?: number | string): Promise<ListeningServer>;
export declare function listen(server: http.Server, port?: number | string): Promise<ListeningServer>;
export declare function waitForInterruption(server: ListeningServer): Promise<void>;
//# sourceMappingURL=server.d.ts.map