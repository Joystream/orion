"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigError = exports.read = exports.SchemaError = exports.validate = exports.JsonSyntaxError = exports.parse = void 0;
const fs = __importStar(require("fs/promises"));
const parse_1 = require("./parse");
Object.defineProperty(exports, "JsonSyntaxError", { enumerable: true, get: function () { return parse_1.JsonSyntaxError; } });
Object.defineProperty(exports, "parse", { enumerable: true, get: function () { return parse_1.parse; } });
const validate_1 = require("./validate");
Object.defineProperty(exports, "SchemaError", { enumerable: true, get: function () { return validate_1.SchemaError; } });
Object.defineProperty(exports, "validate", { enumerable: true, get: function () { return validate_1.validate; } });
async function read(file, schema) {
    let content = await fs.readFile(file, 'utf-8');
    try {
        let value = (0, parse_1.parse)(content);
        if (schema) {
            (0, validate_1.validate)(value, schema);
        }
        return value;
    }
    catch (err) {
        if (err instanceof parse_1.JsonSyntaxError) {
            throw new ConfigError(file, `json syntax error: ${err.code}`);
        }
        else if (err instanceof validate_1.SchemaError) {
            throw new ConfigError(file, err.message);
        }
        else {
            throw err;
        }
    }
}
exports.read = read;
class ConfigError extends Error {
    constructor(file, error) {
        super(`invalid ${file}: ${error}`);
        this.file = file;
        this.error = error;
    }
    get name() {
        return 'ConfigError';
    }
}
exports.ConfigError = ConfigError;
//# sourceMappingURL=index.js.map