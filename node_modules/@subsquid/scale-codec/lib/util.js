"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isObject = exports.unsignedIntByteLength = exports.UTF8_ENCODER = exports.UTF8_DECODER = exports.toUnsignedBigInt = exports.toSignedBigInt = exports.checkUnsignedBigInt = exports.checkUnsignedInt = exports.checkSignedBigInt = exports.checkSignedInt = exports.throwUnexpectedCase = exports.assertNotNull = void 0;
const assert_1 = __importDefault(require("assert"));
function assertNotNull(val, msg) {
    (0, assert_1.default)(val != null, msg);
    return val;
}
exports.assertNotNull = assertNotNull;
function throwUnexpectedCase(val) {
    throw new Error(val ? `Unexpected case: ${val}` : `Unexpected case`);
}
exports.throwUnexpectedCase = throwUnexpectedCase;
function checkInt(val, sign, bitSize, min, max) {
    let ok = Number.isInteger(val) && min <= val && max >= val;
    if (!ok)
        throw new Error(`Invalid ${sign}${bitSize}: ${val}`);
}
function checkBigInt(val, sign, bitSize, min, max) {
    let ok = typeof val == 'bigint' && min <= val && max >= val;
    if (!ok)
        throw new Error(`Invalid ${sign}${bitSize}: ${val}`);
}
function checkSignedInt(val, bitSize) {
    let min;
    let max;
    switch (bitSize) {
        case 8:
            min = -0x80;
            max = 0x7f;
            break;
        case 16:
            min = -0x8000;
            max = 0x7fff;
            break;
        case 32:
            min = -0x80000000;
            max = 0x7fffffff;
            break;
        default:
            throwUnexpectedCase(bitSize);
    }
    checkInt(val, 'I', bitSize, min, max);
}
exports.checkSignedInt = checkSignedInt;
function checkSignedBigInt(val, bitSize) {
    let min;
    let max;
    switch (bitSize) {
        case 64:
            min = -(2n ** 63n);
            max = 2n ** 63n - 1n;
            break;
        case 128:
            min = -(2n ** 127n);
            max = 2n ** 127n - 1n;
            break;
        case 256:
            min = -(2n ** 255n);
            max = 2n ** 255n - 1n;
            break;
        default:
            throwUnexpectedCase(bitSize);
    }
    checkBigInt(val, 'I', bitSize, min, max);
}
exports.checkSignedBigInt = checkSignedBigInt;
function checkUnsignedInt(val, bitSize) {
    let max;
    switch (bitSize) {
        case 8:
            max = 0xff;
            break;
        case 16:
            max = 0xffff;
            break;
        case 32:
            max = 0xffffffff;
            break;
        default:
            throwUnexpectedCase(bitSize);
    }
    checkInt(val, 'U', bitSize, 0, max);
}
exports.checkUnsignedInt = checkUnsignedInt;
function checkUnsignedBigInt(val, bitSize) {
    let max;
    switch (bitSize) {
        case 64:
            max = 0xffffffffffffffffn;
            break;
        case 128:
            max = 2n ** 128n - 1n;
            break;
        case 256:
            max = 2n ** 256n - 1n;
            break;
        default:
            throwUnexpectedCase(bitSize);
    }
    checkBigInt(val, 'U', bitSize, 0n, max);
}
exports.checkUnsignedBigInt = checkUnsignedBigInt;
function toSignedBigInt(val, bitSize) {
    (0, assert_1.default)(typeof val == 'string' || typeof val == 'number');
    val = BigInt(val);
    checkSignedBigInt(val, bitSize);
    return val;
}
exports.toSignedBigInt = toSignedBigInt;
function toUnsignedBigInt(val, bitSize) {
    (0, assert_1.default)(typeof val == 'string' || typeof val == 'number');
    val = BigInt(val);
    checkUnsignedBigInt(val, bitSize);
    return val;
}
exports.toUnsignedBigInt = toUnsignedBigInt;
exports.UTF8_DECODER = new TextDecoder("utf-8", {
    fatal: true,
    ignoreBOM: false
});
exports.UTF8_ENCODER = new TextEncoder();
function unsignedIntByteLength(val) {
    let len = 0;
    while (val > 0n) {
        val = val >> 8n;
        len += 1;
    }
    return len;
}
exports.unsignedIntByteLength = unsignedIntByteLength;
function isObject(value) {
    return value != null && typeof value == 'object';
}
exports.isObject = isObject;
//# sourceMappingURL=util.js.map