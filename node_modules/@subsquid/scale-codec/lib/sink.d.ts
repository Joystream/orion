export declare abstract class Sink {
    protected abstract write(byte: number): void;
    abstract bytes(b: Uint8Array): void;
    private uncheckedU16;
    private uncheckedU32;
    private uncheckedU64;
    private uncheckedU128;
    private uncheckedU256;
    u8(val: number): void;
    u16(val: number): void;
    u32(val: number): void;
    u64(val: bigint): void;
    u128(val: bigint): void;
    u256(val: bigint): void;
    i8(val: number): void;
    i16(val: number): void;
    i32(val: number): void;
    i64(val: bigint): void;
    i128(val: bigint): void;
    i256(val: bigint): void;
    str(val: string): void;
    bool(val: boolean): void;
    compact(val: number | bigint): void;
}
export declare class HexSink extends Sink {
    private hex;
    protected write(byte: number): void;
    bytes(b: Uint8Array): void;
    toHex(): string;
}
export declare class ByteSink extends Sink {
    private buf;
    private pos;
    private alloc;
    protected write(byte: number): void;
    bytes(b: Uint8Array): void;
    toBytes(): Uint8Array;
}
//# sourceMappingURL=sink.d.ts.map