"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GqlResponseError = exports.GqlHttpError = exports.graphqlRequest = void 0;
const assert_1 = __importDefault(require("assert"));
const node_fetch_1 = __importStar(require("node-fetch"));
async function graphqlRequest(req) {
    let url = req.url;
    let method = req.method || 'POST';
    let headers = {
        'accept': 'application/json',
        'accept-encoding': 'gzip, br',
        ...req.headers
    };
    let body;
    if (method == 'GET') {
        url = addUrlParameter(url, 'query', req.query);
    }
    else {
        headers['content-type'] = 'application/json; charset=UTF-8';
        body = JSON.stringify({ query: req.query });
    }
    let options = { method, headers, body, timeout: req.timeout };
    if (!req.retry)
        return performFetch(url, options);
    let retry = typeof req.retry == 'boolean' ? {} : req.retry;
    let retryMaxCount = retry.maxCount || Infinity;
    let backoff = [100, 500, 2000, 5000, 10000, 20000];
    let errors = 0;
    while (true) {
        let result = await performFetch(url, options).catch(err => {
            (0, assert_1.default)(err instanceof Error);
            return err;
        });
        if (errors < retryMaxCount && isRetryableError(result)) {
            let timeout = backoff[Math.min(errors, backoff.length - 1)];
            errors += 1;
            retry.log?.(result, errors, timeout);
            await wait(timeout);
        }
        else if (result instanceof Error) {
            throw result;
        }
        else {
            return result;
        }
    }
}
exports.graphqlRequest = graphqlRequest;
async function performFetch(url, init) {
    let response = await (0, node_fetch_1.default)(url, init);
    if (!response.ok) {
        let body = await response.text();
        throw new GqlHttpError(response.status, body);
    }
    let result = await response.json();
    if (result.errors?.length) {
        throw new GqlResponseError(result.errors);
    }
    (0, assert_1.default)(result.data != null);
    return result.data;
}
function isRetryableError(err) {
    if (err instanceof GqlHttpError) {
        switch (err.status) {
            case 429:
            case 502:
            case 503:
            case 504:
                return true;
            default:
                return false;
        }
    }
    if (err instanceof node_fetch_1.FetchError) {
        switch (err.type) {
            case 'body-timeout':
            case 'request-timeout':
                return true;
            case 'system':
                return err.message.startsWith('request to');
            default:
                return false;
        }
    }
    return false;
}
class GqlHttpError extends Error {
    constructor(status, body) {
        super(`Got http ${status}`);
        this.status = status;
        this.body = body;
    }
}
exports.GqlHttpError = GqlHttpError;
class GqlResponseError extends Error {
    constructor(errors) {
        super(`GraphQL error: ${errors[0].message}`);
        this.errors = errors;
    }
}
exports.GqlResponseError = GqlResponseError;
function addUrlParameter(url, name, val) {
    if (url.includes('?')) {
        url += '&';
    }
    else {
        url += '?';
    }
    return url + name + '=' + encodeURIComponent(val);
}
function wait(ms) {
    return new Promise(resolve => {
        setTimeout(resolve, ms);
    });
}
//# sourceMappingURL=gql-request.js.map