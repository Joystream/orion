"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readLines = void 0;
const fs = __importStar(require("fs"));
const string_decoder_1 = require("string_decoder");
function* readLines(file) {
    let decoder = new string_decoder_1.StringDecoder();
    let prev = '';
    let pos = 0;
    let len = 0;
    let buf = Buffer.alloc(1024 * 1024);
    while (len = read(file, buf, pos)) {
        pos += len;
        let text = decoder.write(buf.subarray(0, len));
        let lines = text.split(/[\r\n]/);
        lines[0] = prev + lines[0];
        for (let i = 0; i < lines.length - 1; i++) {
            if (!isWhiteSpace(lines[i])) {
                yield lines[i];
            }
        }
        prev = lines[lines.length - 1];
    }
    {
        let text = decoder.end();
        let lines = text.split(/[\r\n]/);
        lines[0] = prev + lines[0];
        for (let line of lines) {
            if (!isWhiteSpace(line)) {
                yield line;
            }
        }
    }
}
exports.readLines = readLines;
function read(file, buf, pos) {
    let fd = fs.openSync(file, 'r');
    try {
        let offset = 0;
        let len = 0;
        while (buf.length - offset > 0 && (len = fs.readSync(fd, buf, offset, buf.length - offset, pos))) {
            pos += len;
            offset += len;
        }
        return offset;
    }
    finally {
        fs.closeSync(fd);
    }
}
function isWhiteSpace(text) {
    return /^\s*$/.test(text);
}
//# sourceMappingURL=lines.js.map