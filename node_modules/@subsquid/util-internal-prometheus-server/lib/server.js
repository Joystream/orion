"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPrometheusServer = void 0;
const util_internal_http_server_1 = require("@subsquid/util-internal-http-server");
function createPrometheusServer(registry, port) {
    return (0, util_internal_http_server_1.createHttpServer)(ctx => requestHandler(registry, ctx), port);
}
exports.createPrometheusServer = createPrometheusServer;
async function requestHandler(registry, ctx) {
    let path = ctx.url.pathname.slice(1).split('/');
    if (path[0] != 'metrics')
        return ctx.send(404);
    let metricName = path[1];
    if (metricName) {
        if (registry.getSingleMetric(metricName)) {
            let value = await registry.getSingleMetricAsString(metricName);
            return ctx.send(200, value);
        }
        else {
            return ctx.send(404, 'requested metric not found');
        }
    }
    else if (ctx.url.searchParams.get('json') == 'true') {
        let value = await registry.getMetricsAsJSON();
        return ctx.send(200, value);
    }
    else {
        let value = await registry.metrics();
        return ctx.send(200, value, registry.contentType);
    }
}
//# sourceMappingURL=server.js.map