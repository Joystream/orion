"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecFileError = exports.readSpecVersions = void 0;
const util_internal_read_lines_1 = require("@subsquid/util-internal-read-lines");
const fs = __importStar(require("fs"));
const path_1 = require("path");
const specVersion_schema_json_1 = __importDefault(require("./specVersion.schema.json"));
const util_1 = require("./util");
const validateSpecVersion = (0, util_1.makeValidator)(specVersion_schema_json_1.default);
const validateSpecVersionArray = (0, util_1.makeValidator)({
    type: 'array',
    items: specVersion_schema_json_1.default
});
function readSpecVersions(file) {
    if ((0, path_1.extname)(file) === '.json') {
        return readJson(file);
    }
    else {
        return readJsonLines(file);
    }
}
exports.readSpecVersions = readSpecVersions;
function readJsonLines(file) {
    let result = [];
    for (let line of (0, util_internal_read_lines_1.readLines)(file)) {
        let json;
        try {
            json = JSON.parse(line);
        }
        catch (e) {
            throw new SpecFileError(`Failed to parse record #${result.length + 1} of ${file}: ${e.message}`);
        }
        if (validateSpecVersion(json)) {
            result.push(json);
        }
        else {
            throw new SpecFileError(`Failed to extract chain version from record #${result.length} of ${file}:\n  ${(0, util_1.printValidationErrors)(validateSpecVersion, '\n  ')}`);
        }
    }
    return result;
}
function readJson(file) {
    let content;
    try {
        content = fs.readFileSync(file, 'utf-8');
    }
    catch (e) {
        throw new SpecFileError(`Failed to read ${file}: ${e}`);
    }
    let json;
    try {
        json = JSON.parse(content);
    }
    catch (e) {
        throw new SpecFileError(`Failed to parse ${file}: ${e}`);
    }
    if (validateSpecVersionArray(json)) {
        return json;
    }
    else {
        throw new SpecFileError(`Failed to extract chain versions from ${file}:\n  ${(0, util_1.printValidationErrors)(validateSpecVersionArray, '\n  ')}`);
    }
}
class SpecFileError extends Error {
}
exports.SpecFileError = SpecFileError;
//# sourceMappingURL=specVersion.js.map