"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArchiveApi = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_gql_request_1 = require("@subsquid/util-internal-gql-request");
const util_1 = require("./util");
class ArchiveApi {
    constructor(url, log) {
        this.url = url;
        this.log = log;
    }
    getVersion(rec) {
        return this.request(`query {
            metadataById(id: "${rec.specName}@${rec.specVersion}") {
                specName
                specVersion
                blockNumber: blockHeight
                blockHash
                metadata: hex
            }
        }`).then(res => (0, util_internal_1.assertNotNull)(res?.metadataById));
    }
    async getVersionRecord(blockNumber) {
        let versions = await this.versionRecords();
        return versions.find(v => v.blockNumber === blockNumber);
    }
    async getVersionRecords(fromBlock) {
        let versions = await this.versionRecords();
        if (fromBlock) {
            versions = versions.filter(v => v.blockNumber >= fromBlock);
        }
        return versions;
    }
    async getSingleVersionRecord() {
        let versions = await this.versionRecords();
        if (versions.length == 1)
            return versions[0];
    }
    versionRecords() {
        return this.request(`query {
            metadata {
                specName
                specVersion
                blockNumber: blockHeight
                blockHash
            }
        }`).then(res => res.metadata.sort((a, b) => a.blockNumber - b.blockNumber));
    }
    request(query) {
        return (0, util_internal_gql_request_1.graphqlRequest)({
            headers: {
                'x-squid-id': 'metadata-explorer'
            },
            url: this.url,
            query,
            retry: {
                maxCount: 3,
                log: (err, errorsInRow, backoff) => {
                    this.log?.warn({
                        archiveQuery: this.url,
                        backoff,
                        reason: err.message
                    }, 'retry');
                }
            }
        }).catch((0, util_1.withErrorContext)({
            archiveUrl: this.url,
            archiveQuery: query
        }));
    }
    fetchVersions() {
        return this.request(`query {
            metadata {
                specName
                specVersion
                blockNumber: blockHeight
                blockHash
                metadata: hex
            }
        }`).then(res => res.metadata.sort((a, b) => a.blockNumber - b.blockNumber));
    }
}
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ArchiveApi.prototype, "versionRecords", null);
exports.ArchiveApi = ArchiveApi;
//# sourceMappingURL=archiveApi.js.map