"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainApi = void 0;
const binarySearch_1 = require("./binarySearch");
class ChainApi {
    constructor(client, log) {
        this.client = client;
        this.log = log;
    }
    async getHeight() {
        let head = await this.client.call('chain_getFinalizedHead');
        let header = await this.client.call('chain_getHeader', [head]);
        return parseInt(header.number);
    }
    async getVersionRecord(height) {
        let blockHash = await this.client.call('chain_getBlockHash', [height]);
        let rt = await this.client.call('chain_getRuntimeVersion', [blockHash]);
        return {
            specName: rt.specName,
            specVersion: rt.specVersion,
            blockNumber: height,
            blockHash
        };
    }
    async getVersionRecords(fromBlock) {
        let firstBlock = fromBlock || 0;
        let lastBlock = await this.getHeight();
        return (0, binarySearch_1.findSpecVersions)({
            firstBlock,
            lastBlock,
            fetch: this.getVersionRecordArray.bind(this),
            progress: info => {
                if (firstBlock > 0) {
                    this.log?.info(`step: ${info.step}, ${info.versions - 1} new version${info.versions - 1 == 1 ? '' : 's'} found so far`);
                }
                else {
                    this.log?.info(`step: ${info.step}, ${info.versions} version${info.versions == 1 ? '' : 's'} found so far`);
                }
            }
        });
    }
    async getVersionRecordArray(heights) {
        let result = new Array(heights.length);
        for (let i = 0; i < heights.length; i++) {
            result[i] = await this.getVersionRecord(heights[i]);
        }
        return result;
    }
    async getVersion(rec) {
        let metadata = await this.client.call('state_getMetadata', [rec.blockHash]);
        return { ...rec, metadata };
    }
    async getSingleVersionRecord() {
        let genesis = await this.getVersionRecord(0);
        let height = await this.getHeight();
        let last = await this.getVersionRecord(height);
        if (genesis.specName == last.specName && genesis.specVersion == last.specVersion) {
            return genesis;
        }
    }
}
exports.ChainApi = ChainApi;
//# sourceMappingURL=chainApi.js.map