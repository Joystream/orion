"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlainBatchRequest = void 0;
class PlainBatchRequest {
    constructor() {
        this.events = [];
        this.calls = [];
        this.evmLogs = [];
        this.ethereumTransactions = [];
        this.contractsEvents = [];
        this.gearMessagesEnqueued = [];
        this.gearUserMessagesSent = [];
        this.acalaEvmExecuted = [];
        this.acalaEvmExecutedFailed = [];
        this.includeAllBlocks = false;
    }
    getEvents() {
        return this.events;
    }
    getCalls() {
        return this.calls;
    }
    getEvmLogs() {
        return this.evmLogs;
    }
    getEthereumTransactions() {
        return this.ethereumTransactions;
    }
    getContractsEvents() {
        return this.contractsEvents;
    }
    getGearMessagesEnqueued() {
        return this.gearMessagesEnqueued;
    }
    getGearUserMessagesSent() {
        return this.gearUserMessagesSent;
    }
    getIncludeAllBlocks() {
        return this.includeAllBlocks;
    }
    getAcalaEvmExecuted() {
        return this.acalaEvmExecuted;
    }
    getAcalaEvmExecutedFailed() {
        return this.acalaEvmExecutedFailed;
    }
    merge(other) {
        let result = new PlainBatchRequest();
        result.includeAllBlocks = this.includeAllBlocks || other.includeAllBlocks;
        result.events = this.events.concat(other.events);
        result.calls = this.calls.concat(other.calls);
        result.evmLogs = this.evmLogs.concat(other.evmLogs);
        result.ethereumTransactions = this.ethereumTransactions.concat(other.ethereumTransactions);
        result.contractsEvents = this.contractsEvents.concat(other.contractsEvents);
        result.gearMessagesEnqueued = this.gearMessagesEnqueued.concat(other.gearMessagesEnqueued);
        result.gearUserMessagesSent = this.gearUserMessagesSent.concat(other.gearUserMessagesSent);
        result.acalaEvmExecuted = this.acalaEvmExecuted.concat(other.acalaEvmExecuted);
        result.acalaEvmExecutedFailed = this.acalaEvmExecutedFailed.concat(other.acalaEvmExecutedFailed);
        return result;
    }
}
exports.PlainBatchRequest = PlainBatchRequest;
//# sourceMappingURL=request.js.map