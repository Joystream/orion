import type { BlockHandler, BlockHandlerDataRequest, CallHandler, ContractsContractEmittedHandler, EventHandler, EvmLogHandler, EvmTopicSet, GearMessageEnqueuedHandler, GearUserMessageSentHandler } from '../interfaces/dataHandlers';
import type { CallDataRequest, EventDataRequest } from '../interfaces/dataSelection';
import type { QualifiedName } from '../interfaces/substrate';
import type { BatchRequest } from './request';
declare type ContractAddress = string;
declare type ProgramId = string;
declare type Sighash = string;
interface HandlerList<H, R = any> {
    handlers: H[];
    data?: R;
}
export interface CallHandlerEntry {
    handler: CallHandler<any>;
    triggerForFailedCalls?: boolean;
}
export declare class DataHandlers implements BatchRequest {
    pre: HandlerList<BlockHandler<any>, BlockHandlerDataRequest>;
    post: HandlerList<BlockHandler<any>, BlockHandlerDataRequest>;
    events: Record<QualifiedName, HandlerList<EventHandler<any>, EventDataRequest>>;
    calls: Record<QualifiedName, HandlerList<CallHandlerEntry, CallDataRequest>>;
    evmLogs: Record<ContractAddress, {
        filter?: EvmTopicSet[];
        data?: EventDataRequest;
        handler: EvmLogHandler<any>;
    }[]>;
    ethereumTransactions: Record<ContractAddress, Record<Sighash, HandlerList<CallHandlerEntry, CallDataRequest>>>;
    contractsContractEmitted: Record<ContractAddress, HandlerList<ContractsContractEmittedHandler<any>>>;
    gearMessageEnqueued: Record<ProgramId, HandlerList<GearMessageEnqueuedHandler<any>>>;
    gearUserMessageSent: Record<ProgramId, HandlerList<GearUserMessageSentHandler<any>>>;
    merge(other: DataHandlers): DataHandlers;
    getIncludeAllBlocks(): boolean;
    getEvents(): {
        name: string;
        data: EventDataRequest | undefined;
    }[];
    getCalls(): {
        name: string;
        data: CallDataRequest | undefined;
    }[];
    getEvmLogs(): {
        contract: string;
        filter: EvmTopicSet[] | undefined;
        data: EventDataRequest | undefined;
    }[];
    getEthereumTransactions(): {
        contract: string;
        sighash: string | undefined;
        data: CallDataRequest | undefined;
    }[];
    getContractsEvents(): {
        contract: string;
        data: any;
    }[];
    getGearMessagesEnqueued(): {
        program: string;
        data: any;
    }[];
    getGearUserMessagesSent(): {
        program: string;
        data: any;
    }[];
    getAcalaEvmExecuted(): never[];
    getAcalaEvmExecutedFailed(): never[];
}
export {};
//# sourceMappingURL=handlers.d.ts.map