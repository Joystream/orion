import { ResilientRpcClient } from '@subsquid/rpc-client/lib/resilient';
import { ChainDescription, OldTypes, QualifiedName } from '@subsquid/substrate-metadata';
import type { SpecId } from './interfaces/substrate';
/**
 * Subset of SubstrateBlock properties required for getting
 * chain metadata for a given block
 */
interface BlockInfo {
    height: number;
    specId: SpecId;
}
interface SpecMetadata {
    id: SpecId;
    specName: string;
    specVersion: number;
    blockHeight: number;
    hex: string;
}
export interface ChainManagerOptions {
    archiveRequest<T>(query: string): Promise<T>;
    getChainClient: () => ResilientRpcClient;
    getTypes: (meta: SpecMetadata) => OldTypes;
}
export declare class ChainManager {
    private options;
    private versions;
    constructor(options: ChainManagerOptions);
    getChainForBlock(block: BlockInfo): Promise<Chain>;
    private createChain;
    private getSpecId;
    private getSpecMetadata;
}
export declare class Chain {
    readonly description: ChainDescription;
    private getClient;
    private jsonCodec;
    private scaleCodec;
    private events;
    private calls;
    private storageHashCache;
    private constantValueCache;
    constructor(description: ChainDescription, getClient: () => ResilientRpcClient);
    get client(): ResilientRpcClient;
    getEventHash(eventName: QualifiedName): string;
    getCallHash(callName: QualifiedName): string;
    decodeEvent(event: {
        name: string;
        args: any;
    }): any;
    decodeCall(call: {
        name: string;
        args: any;
    }): any;
    private decode;
    private decodeTuple;
    getStorage(blockHash: string, prefix: string, name: string, ...keys: any[]): Promise<any>;
    queryStorage(blockHash: string, prefix: string, name: string, keyList?: any[][]): Promise<any[]>;
    queryStorage2(blockHash: string, prefix: string, name: string, keys?: any[]): Promise<any[]>;
    private fetchValues;
    getKeys(blockHash: string, prefix: string, name: string, ...args: any[]): Promise<any[]>;
    getRawKeys(blockHash: string, prefix: string, name: string, ...args: any[]): Promise<string[]>;
    getKeysPaged(pageSize: number, blockHash: string, prefix: string, name: string, ...args: any[]): AsyncIterable<any[]>;
    getPairs(blockHash: string, prefix: string, name: string, ...args: any[]): Promise<[key: any, value: any][]>;
    getPairsPaged(pageSize: number, blockHash: string, prefix: string, name: string, ...args: any[]): AsyncIterable<[key: any, value: any][]>;
    private decodeStoragePair;
    private decodeStorageValue;
    private decodeStorageKey;
    private getStorageItemKeysHash;
    private getStorageItem;
    getStorageItemTypeHash(prefix: string, name: string): string | undefined;
    getConstant(pallet: string, name: string): any;
    getConstantTypeHash(pallet: string, name: string): string | undefined;
}
export {};
//# sourceMappingURL=chain.d.ts.map