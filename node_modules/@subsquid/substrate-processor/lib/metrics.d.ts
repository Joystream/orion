import { ListeningServer } from "@subsquid/util-internal-prometheus-server";
export declare class Metrics {
    private chainHeight;
    private ingestSpeed;
    private mappingSpeed;
    private mappingItemSpeed;
    private blockProgress;
    private rpcSpeed;
    private registry;
    private lastBlockGauge;
    private chainHeightGauge;
    private mappingSpeedGauge;
    private ingestSpeedGauge;
    private syncEtaGauge;
    private syncRatioGauge;
    private archiveHttpErrorsCounter;
    private archiveHttpErrorsInRowGauge;
    private chainRpcErrorsCounter;
    private chainRpcErrorsInRowGauge;
    private chainRpcAvgResponseTime;
    private collect;
    constructor();
    setLastProcessedBlock(height: number): void;
    setChainHeight(height: number): void;
    updateProgress(chainHeight: number, estimatedTotalBlocksCount: number, estimatedBlocksLeft: number, time?: bigint): void;
    registerBatch(batchSize: number, batchItemSize: number, batchFetchStartTime: bigint, batchFetchEndTime: bigint, batchMappingStartTime: bigint, batchMappingEndTime: bigint): void;
    registerArchiveRetry(url: string, errorsInRow: number): void;
    registerArchiveResponse(url: string): void;
    registerChainRpcRetry(url: string, errorsInRow: number): void;
    registerChainRpcResponse(url: string, method: string, beg: bigint, end: bigint): void;
    getChainHeight(): number;
    getSyncSpeed(): number;
    getSyncEtaSeconds(): number;
    getSyncRatio(): number;
    getIngestSpeed(): number;
    getMappingSpeed(): number;
    getMappingItemSpeed(): number;
    serve(port: number | string): Promise<ListeningServer>;
}
//# sourceMappingURL=metrics.d.ts.map