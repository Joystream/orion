import { Logger } from "@subsquid/logger";
import { ResilientRpcClient } from "@subsquid/rpc-client/lib/resilient";
import { OldTypes } from "@subsquid/substrate-metadata";
import { Batch } from "../batch/generic";
import { BatchRequest } from "../batch/request";
import { Chain, ChainManager } from "../chain";
import { BlockData } from "../ingest";
import { Database } from "../interfaces/db";
import { Range } from "../util/range";
export interface Options {
    blockRange?: Range;
    prometheusPort?: number | string;
}
export interface Config<S, R> {
    getLogger(): Logger;
    getDatabase(): Database<S>;
    getOptions(): Options;
    getTypes(specName: string, specVersion: number): OldTypes;
    getChainEndpoint(): string;
    getArchiveEndpoint(): string;
    createBatches(blockRange: Range): Batch<R>[];
}
export declare class Runner<S, R extends BatchRequest> {
    protected config: Config<S, R>;
    private metrics;
    private _lastBlock;
    constructor(config: Config<S, R>);
    protected chainClient(): ResilientRpcClient;
    protected archiveRequest(): (query: string) => Promise<any>;
    protected chainManager(): ChainManager;
    protected getWholeBlockRange(): Range;
    protected wholeRange(): {
        range: Range;
    }[];
    protected get lastBlock(): number;
    protected set lastBlock(height: number);
    run(): Promise<void>;
    private process;
    private splitBySpec;
    processBatch(request: R, chain: Chain, blocks: BlockData[], isHead: boolean): Promise<void>;
    private getPrometheusPort;
    private getId;
}
//# sourceMappingURL=runner.d.ts.map