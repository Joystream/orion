"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printGqlArguments = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const assert_1 = __importDefault(require("assert"));
function printGqlArguments(args) {
    let exp = print(args);
    (0, assert_1.default)(exp[0] == '{' && exp[exp.length - 1] == '}');
    return exp.slice(1, exp.length - 1);
}
exports.printGqlArguments = printGqlArguments;
function print(args) {
    if (args == null)
        return '';
    switch (typeof args) {
        case 'string':
            return `"${args}"`;
        case 'number':
        case 'boolean':
            return '' + args;
        case 'object':
            if (Array.isArray(args)) {
                if (args.length == 0)
                    return '';
                return `[${args.map(i => print(i)).filter(e => !!e).join(', ')}]`;
            }
            else if (args.$) {
                return args.$;
            }
            else {
                let fields = [];
                for (let key in args) {
                    let exp = print(args[key]);
                    if (exp) {
                        fields.push(`${key}: ${exp}`);
                    }
                }
                return fields.length ? `{${fields.join(', ')}}` : '';
            }
        default:
            throw (0, util_internal_1.unexpectedCase)(typeof args);
    }
}
//# sourceMappingURL=gql.js.map