{
  "name": "@subsquid/util-internal-binary-heap",
  "version": "0.0.0",
  "description": "Classical implementation of binary heap data structure",
  "license": "GPL-3.0-or-later",
  "repository": "git@github.com:subsquid/squid.git",
  "publishConfig": {
    "access": "public"
  },
  "main": "heap.js",
  "scripts": {
    "build": ""
  },
  "readme": "# @subsquid/util-internal-binary-heap\n\nClassical implementation of [binary heap](https://en.wikipedia.org/wiki/Binary_heap) data structure.\n\n## Usage\n\n```typescript\nimport {Heap} from \"@subsquid/util-internal-binary-heap\"\n\nconst h = new Heap(function compare(a, b) {\n  return a - b\n})\n\nh.push(5)\nh.push(0)\nh.push(10)\n\nh.pop() // => 0\nh.pop() // => 5\nh.pop() // => 10\n\nh.init([5, 2, 3, 1, 4]) // will modify array in-place and use it as a storage\nh.pop() // => 1\n\nh.peek() // => 2\nh.size() // => 4\n\nh.resort() // When you have mutable objects,\n           // call this to restore heap property after changes\n```\n"
}