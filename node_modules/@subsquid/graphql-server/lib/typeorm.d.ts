import type { OpenreaderContext } from "@subsquid/openreader/lib/context";
import type { Database } from "@subsquid/openreader/lib/db";
import type { Dialect } from "@subsquid/openreader/lib/dialect";
import type { Query } from "@subsquid/openreader/lib/sql/query";
import type { DataSource, EntityManager } from "typeorm";
export declare class EMDatabase implements Database {
    private em;
    constructor(em: EntityManager);
    query(sql: string, parameters?: any[]): Promise<any[][]>;
}
export declare class TypeormOpenreaderContext implements OpenreaderContext {
    readonly dialect: Dialect;
    private connection;
    private subscriptionPollInterval;
    private tx;
    private subscriptionConnection;
    constructor(dialect: Dialect, connection: DataSource, subscriptionConnection?: DataSource, subscriptionPollInterval?: number);
    executeQuery<T>(query: Query<T>): Promise<T>;
    subscription<T>(query: Query<T>): AsyncIterable<T>;
    getEntityManager(): Promise<EntityManager>;
    close(): Promise<void>;
}
//# sourceMappingURL=typeorm.d.ts.map