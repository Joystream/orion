"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@subsquid/logger");
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_commander_1 = require("@subsquid/util-internal-commander");
const util_internal_http_server_1 = require("@subsquid/util-internal-http-server");
const assert_1 = __importDefault(require("assert"));
const commander_1 = require("commander");
const server_1 = require("./server");
const LOG = (0, logger_1.createLogger)('sqd:graphql-server');
(0, util_internal_1.runProgram)(async () => {
    let program = new commander_1.Command();
    program.description(`GraphQL server for squids`);
    program.option('--no-squid-status', 'disable .squidStatus query');
    program.option('--max-request-size <kb>', 'max request size in kilobytes', util_internal_commander_1.nat, 256);
    program.option('--max-root-fields <count>', 'max number of root fields in a query', util_internal_commander_1.nat);
    program.option('--max-response-size <nodes>', 'max response size measured in nodes', util_internal_commander_1.nat);
    program.option('--sql-statement-timeout <ms>', 'sql statement timeout in ms', util_internal_commander_1.nat);
    program.option('--subscriptions', 'enable gql subscriptions');
    program.option('--subscription-poll-interval <ms>', 'subscription poll interval in ms', util_internal_commander_1.nat, 5000);
    program.option('--subscription-max-response-size <nodes>', 'max response size measured in nodes', util_internal_commander_1.nat);
    program.addOption(new commander_1.Option('--dumb-cache <type>', 'enable dumb caching').choices(['in-memory', 'redis']));
    program.option('--dumb-cache-max-age <ms>', 'cache-control max-age in milliseconds', util_internal_commander_1.nat, 5000);
    program.option('--dumb-cache-ttl <ms>', 'in-memory cached item TTL in milliseconds', util_internal_commander_1.nat, 5000);
    program.option('--dumb-cache-size <mb>', 'max in-memory cache size in megabytes', util_internal_commander_1.nat, 50);
    let opts = program.parse().opts();
    let { maxRequestSize, maxResponseSize, subscriptionMaxResponseSize, dumbCache: dumbCacheType, ...rest } = opts;
    let dumbCache;
    if (dumbCacheType === "redis") {
        (0, assert_1.default)(process.env.REDIS_URL, "REDIS_URL env variable must be set to enable Redis cache");
        dumbCache = {
            kind: 'redis',
            url: process.env.REDIS_URL,
            maxAgeMs: opts.dumbCacheMaxAge
        };
    }
    else if (dumbCacheType === 'in-memory') {
        dumbCache = {
            kind: 'in-memory',
            maxSizeMb: opts.dumbCacheSize,
            ttlMs: opts.dumbCacheTtl,
            maxAgeMs: opts.dumbCacheMaxAge
        };
    }
    else {
        dumbCache = undefined;
    }
    let server = await new server_1.Server({
        log: LOG,
        maxRequestSizeBytes: maxRequestSize * 1024,
        maxResponseNodes: maxResponseSize,
        subscriptionMaxResponseNodes: subscriptionMaxResponseSize,
        dumbCache,
        ...rest
    }).start();
    LOG.info(`listening on port ${server.port}`);
    return (0, util_internal_http_server_1.waitForInterruption)(server);
}, err => LOG.fatal(err));
//# sourceMappingURL=main.js.map