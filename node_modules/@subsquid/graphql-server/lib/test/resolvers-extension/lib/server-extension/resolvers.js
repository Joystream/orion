"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalarResolver = exports.ScalarRow = void 0;
const big_decimal_1 = require("@subsquid/big-decimal");
const type_graphql_1 = require("type-graphql");
const index_1 = require("../../../../index");
const model_1 = require("../model");
let ScalarRow = class ScalarRow {
};
__decorate([
    (0, type_graphql_1.Field)({ nullable: false }),
    __metadata("design:type", String)
], ScalarRow.prototype, "id", void 0);
__decorate([
    (0, type_graphql_1.Field)(),
    __metadata("design:type", Boolean)
], ScalarRow.prototype, "bool", void 0);
__decorate([
    (0, type_graphql_1.Field)(),
    __metadata("design:type", Date)
], ScalarRow.prototype, "date", void 0);
__decorate([
    (0, type_graphql_1.Field)(),
    __metadata("design:type", BigInt)
], ScalarRow.prototype, "bigInt", void 0);
__decorate([
    (0, type_graphql_1.Field)(() => big_decimal_1.BigDecimal),
    __metadata("design:type", Object)
], ScalarRow.prototype, "bigDecimal", void 0);
__decorate([
    (0, type_graphql_1.Field)(),
    __metadata("design:type", Buffer)
], ScalarRow.prototype, "bytes", void 0);
__decorate([
    (0, type_graphql_1.Field)(() => index_1.Json),
    __metadata("design:type", Object)
], ScalarRow.prototype, "attributes", void 0);
ScalarRow = __decorate([
    (0, type_graphql_1.ObjectType)({ simpleResolvers: true })
], ScalarRow);
exports.ScalarRow = ScalarRow;
let ScalarResolver = class ScalarResolver {
    constructor(tx) {
        this.tx = tx;
    }
    async scalarsExtension() {
        let em = await this.tx();
        return em.find(model_1.Scalar, {
            order: {
                id: 'ASC'
            }
        });
    }
};
__decorate([
    (0, type_graphql_1.Query)(() => [ScalarRow]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ScalarResolver.prototype, "scalarsExtension", null);
ScalarResolver = __decorate([
    (0, type_graphql_1.Resolver)(),
    __metadata("design:paramtypes", [Function])
], ScalarResolver);
exports.ScalarResolver = ScalarResolver;
//# sourceMappingURL=resolvers.js.map