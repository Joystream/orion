"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDatabase = exports.databaseDelete = exports.databaseInit = exports.db_config = exports.isCockroach = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const pg_1 = require("pg");
function isCockroach() {
    return process.env.DB_TYPE == 'cockroach';
}
exports.isCockroach = isCockroach;
const PORT = parseInt((0, util_internal_1.assertNotNull)(isCockroach() ? process.env.DB_PORT_COCKROACH : process.env.DB_PORT_PG));
process.env.DB_PORT = '' + PORT;
exports.db_config = {
    host: 'localhost',
    port: PORT,
    user: 'root',
    password: 'root',
    database: 'defaultdb'
};
async function withClient(block) {
    let client = new pg_1.Client(exports.db_config);
    await client.connect();
    try {
        await block(client);
    }
    finally {
        await client.end();
    }
}
function databaseInit(sql) {
    return withClient(async (client) => {
        for (let i = 0; i < sql.length; i++) {
            await client.query(sql[i]);
        }
    });
}
exports.databaseInit = databaseInit;
function databaseDelete() {
    return withClient(async (client) => {
        await client.query(`DROP SCHEMA IF EXISTS root CASCADE`);
        await client.query(`CREATE SCHEMA root`);
    });
}
exports.databaseDelete = databaseDelete;
function useDatabase(sql) {
    before(async () => {
        await databaseDelete();
        await databaseInit(sql);
    });
}
exports.useDatabase = useDatabase;
//# sourceMappingURL=db.js.map