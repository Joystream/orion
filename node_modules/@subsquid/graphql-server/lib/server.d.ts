import { Logger } from '@subsquid/logger';
import { ListeningServer } from '@subsquid/util-internal-http-server';
export interface ServerOptions {
    dir?: string;
    log?: Logger;
    maxRequestSizeBytes?: number;
    maxRootFields?: number;
    maxResponseNodes?: number;
    sqlStatementTimeout?: number;
    squidStatus?: boolean;
    subscriptions?: boolean;
    subscriptionPollInterval?: number;
    subscriptionMaxResponseNodes?: number;
    dumbCache?: DumbRedisCacheOptions | DumbInMemoryCacheOptions;
}
export interface DumbRedisCacheOptions {
    kind: 'redis';
    url: string;
    maxAgeMs: number;
}
export interface DumbInMemoryCacheOptions {
    kind: 'in-memory';
    maxSizeMb: number;
    ttlMs: number;
    maxAgeMs: number;
}
export declare class Server {
    private options;
    private dir;
    private disposals;
    constructor(options?: ServerOptions);
    start(): Promise<ListeningServer>;
    private bootstrap;
    private schema;
    private squidStatusSchema;
    private customResolvers;
    private customCheck;
    private module;
    private context;
    private createTypeormConnection;
    private createPgPool;
    private connectionPoolSize;
    private dialect;
    private model;
    private cache;
    private port;
    private path;
}
//# sourceMappingURL=server.d.ts.map