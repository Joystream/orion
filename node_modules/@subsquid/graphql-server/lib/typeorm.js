"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeormOpenreaderContext = exports.EMDatabase = void 0;
const subscription_1 = require("@subsquid/openreader/lib/subscription");
const error_handling_1 = require("@subsquid/openreader/lib/util/error-handling");
const lazy_transaction_1 = require("@subsquid/openreader/lib/util/lazy-transaction");
class EMDatabase {
    constructor(em) {
        this.em = em;
    }
    async query(sql, parameters) {
        let records = await this.em.query(sql, parameters).catch((0, error_handling_1.withErrorContext)({ sql, parameters }));
        let rows = new Array(records.length);
        let len = 0;
        for (let i = 0; i < records.length; i++) {
            let rec = records[i];
            let row = new Array(len);
            let j = 0;
            for (let key in rec) {
                row[j] = rec[key];
                j += 1;
            }
            len = j;
            rows[i] = row;
        }
        return rows;
    }
}
exports.EMDatabase = EMDatabase;
class TypeormOpenreaderContext {
    constructor(dialect, connection, subscriptionConnection, subscriptionPollInterval = 1000) {
        this.dialect = dialect;
        this.connection = connection;
        this.subscriptionPollInterval = subscriptionPollInterval;
        this.tx = new lazy_transaction_1.LazyTransaction(cb => this.connection.transaction(cb));
        this.subscriptionConnection = subscriptionConnection || this.connection;
    }
    async executeQuery(query) {
        let em = await this.tx.get();
        let db = new EMDatabase(em);
        let result = await db.query(query.sql, query.params);
        return query.map(result);
    }
    subscription(query) {
        return new subscription_1.Subscription(this.subscriptionPollInterval, () => this.subscriptionConnection.transaction(async (em) => {
            let db = new EMDatabase(em);
            let result = await db.query(query.sql, query.params);
            return query.map(result);
        }));
    }
    getEntityManager() {
        return this.tx.get();
    }
    close() {
        return this.tx.close();
    }
}
exports.TypeormOpenreaderContext = TypeormOpenreaderContext;
//# sourceMappingURL=typeorm.js.map