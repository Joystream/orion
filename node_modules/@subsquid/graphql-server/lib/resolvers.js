"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadCustomResolvers = void 0;
const type_graphql_1 = require("type-graphql");
const scalars_1 = require("./scalars");
async function loadCustomResolvers(mod) {
    let scalarsMap = [
        { type: Date, scalar: scalars_1.DateTime },
        { type: BigInt, scalar: scalars_1.BigInteger },
        { type: Buffer, scalar: scalars_1.Bytes }
    ];
    try {
        scalarsMap.push({
            type: require('@subsquid/big-decimal').BigDecimal,
            scalar: scalars_1.BigDecimalScalar
        });
    }
    catch (e) { }
    return (0, type_graphql_1.buildSchema)({
        resolvers: [mod],
        scalarsMap,
        validate: { forbidUnknownValues: false },
        container: resolverData => new CustomResolversContainer(resolverData)
    });
}
exports.loadCustomResolvers = loadCustomResolvers;
class CustomResolversContainer {
    constructor(resolverData) {
        this.ctx = resolverData.context.openreader;
    }
    get(resolverClass) {
        return new resolverClass(() => this.ctx.getEntityManager());
    }
}
//# sourceMappingURL=resolvers.js.map