"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Progress = void 0;
const assert_1 = __importDefault(require("assert"));
class Progress {
    constructor(options) {
        this.window = [];
        this.tail = 0;
        this._hasNews = false;
        let windowSize = options?.windowSize ?? 50;
        let windowGranularitySeconds = options?.windowGranularitySeconds ?? 0;
        (0, assert_1.default)(windowSize > 1);
        (0, assert_1.default)(windowGranularitySeconds >= 0);
        this.size = windowSize + 1;
        this.granularity = BigInt(windowGranularitySeconds) * 1000000000n;
        this.initialValue = options?.initialValue;
        this.targetValue = options?.targetValue;
    }
    setInitialValue(value) {
        this.initialValue = value;
    }
    setTargetValue(value) {
        this.targetValue = value;
    }
    setCurrentValue(value, time) {
        time = time ?? process.hrtime.bigint();
        if (this.window.length == 0) {
            this.window[0] = { value, time };
            this.tail = 1;
            return;
        }
        let last = this.last();
        value = Math.max(value, last.value);
        if (time <= last.time) {
            last.value = value;
        }
        else if (this.window.length > 1 && time <= last.time + this.granularity) {
            last.value = value;
        }
        else {
            this.window[this.tail] = { value, time };
            this.tail = (this.tail + 1) % this.size;
        }
        this._hasNews = true;
    }
    last() {
        (0, assert_1.default)(this.window.length > 0);
        return this.window[(this.size + this.tail - 1) % this.size];
    }
    getCurrentValue() {
        (0, assert_1.default)(this.window.length > 0, 'no current value available');
        return this.last().value;
    }
    speed() {
        this._hasNews = false;
        if (this.window.length < 2)
            return 0;
        let beg = this.window.length < this.size ? this.window[0] : this.window[this.tail];
        let end = this.last();
        let duration = end.time - beg.time;
        let inc = end.value - beg.value;
        return inc * 1000000000 / Number(duration);
    }
    eta() {
        this._hasNews = false;
        if (this.targetValue == null)
            return 0;
        let speed = this.speed();
        if (speed == 0)
            return 0;
        let last = this.last();
        let left = this.targetValue - Math.min(this.targetValue, last.value);
        return left / speed;
    }
    ratio() {
        this._hasNews = false;
        if (this.targetValue == null || this.initialValue == null || this.window.length == 1)
            return 0;
        let distance = Math.max(this.targetValue, this.initialValue) - this.initialValue;
        if (distance <= 0)
            return 1;
        let pos = Math.max(this.getCurrentValue(), this.initialValue) - this.initialValue;
        return Math.min(pos, distance) / distance;
    }
    hasNews() {
        return this._hasNews;
    }
}
exports.Progress = Progress;
//# sourceMappingURL=progress.js.map