import type { ClientBase, Pool } from "pg";
import { OpenreaderContext } from "./context";
import { Dialect } from "./dialect";
import { Query } from "./sql/query";
export interface Database {
    query(sql: string, parameters?: any[]): Promise<any[][]>;
}
export declare class PgDatabase implements Database {
    private client;
    constructor(client: ClientBase);
    query(sql: string, parameters?: any[]): Promise<any[][]>;
}
export declare class PoolOpenreaderContext implements OpenreaderContext {
    readonly dialect: Dialect;
    private subscriptionPollInterval;
    private tx;
    private subscriptionPool;
    constructor(dialect: Dialect, pool: Pool, subscriptionPool?: Pool, subscriptionPollInterval?: number);
    close(): Promise<void>;
    executeQuery<T>(query: Query<T>): Promise<T>;
    subscription<T>(query: Query<T>): AsyncIterable<T>;
}
//# sourceMappingURL=db.d.ts.map