"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@subsquid/logger");
const substrate_metadata_1 = require("@subsquid/substrate-metadata");
const archiveApi_1 = require("@subsquid/substrate-metadata-explorer/lib/archiveApi");
const specVersion_1 = require("@subsquid/substrate-metadata-explorer/lib/specVersion");
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_config_1 = require("@subsquid/util-internal-config");
const commander_1 = require("commander");
const config_1 = require("./config");
const typegen_1 = require("./typegen");
const log = (0, logger_1.createLogger)('sqd:substrate-typegen');
(0, util_internal_1.runProgram)(async () => {
    let program = new commander_1.Command();
    program.description(`
Generates TypeScript classes for events, calls and storage items
    `.trim());
    program.argument('config', 'JSON file with options');
    let configFile = program.parse().args[0];
    let config = await (0, config_1.readConfig)(configFile);
    let typesBundle;
    if (config.typesBundle) {
        typesBundle = (0, substrate_metadata_1.getOldTypesBundle)(config.typesBundle) || (0, substrate_metadata_1.readOldTypesBundle)(config.typesBundle);
    }
    let specVersions;
    if (/^https?:\/\//.test(config.specVersions)) {
        log.info(`downloading spec versions from ${config.specVersions}`);
        specVersions = await new archiveApi_1.ArchiveApi(config.specVersions, log.child('archive')).fetchVersions();
    }
    else {
        specVersions = (0, specVersion_1.readSpecVersions)(config.specVersions);
    }
    typegen_1.Typegen.generate({
        outDir: config.outDir,
        specVersions,
        typesBundle,
        events: config.events,
        calls: config.calls,
        storage: config.storage,
        constants: config.constants
    });
}, err => {
    if (err instanceof util_internal_config_1.ConfigError || err instanceof substrate_metadata_1.OldTypesBundleError || err instanceof specVersion_1.SpecFileError) {
        log.fatal(err.message);
    }
    else {
        log.fatal(err);
    }
});
//# sourceMappingURL=main.js.map