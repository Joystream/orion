import { ChainDescription, OldSpecsBundle, OldTypesBundle, Type } from '@subsquid/substrate-metadata';
import { SpecVersion } from '@subsquid/substrate-metadata-explorer/lib/specVersion';
import * as eac from '@subsquid/substrate-metadata/lib/events-and-calls';
import { Interfaces } from './ifs';
export interface TypegenOptions {
    outDir: string;
    specVersions: SpecVersion[];
    typesBundle?: OldTypesBundle | OldSpecsBundle;
    events?: string[] | boolean;
    calls?: string[] | boolean;
    storage?: string[] | boolean;
    constants?: string[] | boolean;
}
export declare class Typegen {
    private options;
    static generate(options: TypegenOptions): void;
    private interfaces;
    private dir;
    constructor(options: TypegenOptions);
    generate(): void;
    private generateEnums;
    private generateConsts;
    private generateStorage;
    /**
     * Create a mapping between qualified name and list of unique versions
     */
    private collectItems;
    private getVersionName;
    private specNameNotChanged;
    chain(): VersionDescription[];
    getInterface(version: VersionDescription): Interfaces;
    private importInterfaces;
    private qualify;
}
interface VersionDescription {
    specName: string;
    specVersion: number;
    blockNumber: number;
    types: Type[];
    events: eac.Registry;
    calls: eac.Registry;
    description: ChainDescription;
}
export {};
//# sourceMappingURL=typegen.d.ts.map