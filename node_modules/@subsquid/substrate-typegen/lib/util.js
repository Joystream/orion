"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upperCaseFirst = exports.groupBy = exports.toNativePrimitive = exports.asOptionType = exports.asResultType = exports.isEmptyVariant = void 0;
const substrate_metadata_1 = require("@subsquid/substrate-metadata");
const util_internal_1 = require("@subsquid/util-internal");
function isEmptyVariant(type) {
    return type.kind == substrate_metadata_1.TypeKind.Variant && type.variants.length == 0;
}
exports.isEmptyVariant = isEmptyVariant;
function asResultType(type) {
    if (type.kind != substrate_metadata_1.TypeKind.Variant)
        return undefined;
    if (type.variants.length != 2)
        return undefined;
    let v0 = type.variants[0];
    let v1 = type.variants[1];
    let yes = v0.name == 'Ok' &&
        v0.index == 0 &&
        v0.fields.length == 1 &&
        v0.fields[0].name == null &&
        v1.name == 'Err' &&
        v1.index == 1 &&
        v1.fields.length == 1 &&
        v1.fields[0].name == null;
    return yes ? { ok: v0.fields[0].type, err: v1.fields[0].type } : undefined;
}
exports.asResultType = asResultType;
function asOptionType(type) {
    if (type.kind !== substrate_metadata_1.TypeKind.Variant)
        return;
    if (type.variants.length != 2)
        return;
    let v0 = type.variants[0];
    let v1 = type.variants[1];
    let yes = v0.name == 'None' &&
        v0.fields.length == 0 &&
        v0.index == 0 &&
        v1.name == 'Some' &&
        v1.index == 1 &&
        v1.fields.length == 1 &&
        v1.fields[0].name == null;
    if (yes)
        return {
            some: v1.fields[0].type
        };
}
exports.asOptionType = asOptionType;
function toNativePrimitive(primitive) {
    switch (primitive) {
        case "I8":
        case "U8":
        case "I16":
        case "U16":
        case "I32":
        case "U32":
            return "number";
        case "I64":
        case "U64":
        case "I128":
        case "U128":
        case "I256":
        case "U256":
            return "bigint";
        case "Bool":
            return "boolean";
        case "Str":
            return "string";
        default:
            throw (0, util_internal_1.unexpectedCase)(primitive);
    }
}
exports.toNativePrimitive = toNativePrimitive;
function groupBy(arr, group) {
    let grouping = new Map();
    for (let i = 0; i < arr.length; i++) {
        let item = arr[i];
        let key = group(item);
        let g = grouping.get(key);
        if (g == null) {
            grouping.set(key, [item]);
        }
        else {
            g.push(item);
        }
    }
    return grouping;
}
exports.groupBy = groupBy;
function upperCaseFirst(s) {
    return s[0].toUpperCase() + s.slice(1);
}
exports.upperCaseFirst = upperCaseFirst;
//# sourceMappingURL=util.js.map