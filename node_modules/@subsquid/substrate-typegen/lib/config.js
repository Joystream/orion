"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfig = void 0;
const substrate_metadata_1 = require("@subsquid/substrate-metadata");
const util_internal_config_1 = require("@subsquid/util-internal-config");
const path = __importStar(require("path"));
const config_schema_json_1 = __importDefault(require("./config.schema.json"));
async function readConfig(file) {
    let cfg = await (0, util_internal_config_1.read)(file, config_schema_json_1.default);
    let dir = path.dirname(path.resolve(file));
    let outDir = path.resolve(dir, cfg.outDir);
    let specVersions = cfg.specVersions;
    if (specVersions) {
        if (!/^https?:\/\//.test(specVersions)) {
            specVersions = path.resolve(dir, specVersions);
        }
    }
    let typesBundle = cfg.typesBundle;
    if (typesBundle && (0, substrate_metadata_1.getOldTypesBundle)(typesBundle) == null) {
        typesBundle = path.resolve(dir, typesBundle);
    }
    return {
        outDir,
        specVersions,
        typesBundle,
        events: cfg.events,
        calls: cfg.calls,
        storage: cfg.storage,
        constants: cfg.constants
    };
}
exports.readConfig = readConfig;
//# sourceMappingURL=config.js.map