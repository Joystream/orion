import { NetworkSubstrate, ArchiveProviderSubstrate, ArchiveRegistrySubstrate, ArchiveRegistryEVM, ArchiveProviderEVM } from ".";
import { KnownArchives, KnownArchivesEVM, KnownArchivesSubstrate } from "./chains";
export declare type RegistryType = "Substrate" | "EVM";
export interface LookupOptionsSubstrate {
    type?: 'Substrate';
    /**
     * Network genesis hex string (must start with "0x...")
     */
    genesis?: string;
    /**
     * Archive image name
     */
    image?: string;
    /**
     * Archive image name
     */
    ingest?: string;
    /**
     * Archive gateway image
     */
    gateway?: string;
    /**
     * Archive release
     */
    release?: 'FireSquid';
}
export interface LookupOptionsEVM {
    type?: 'EVM';
    /**
     * Network genesis hex string (must start with "0x...")
     */
    genesis?: string;
    /**
     * Archive ingester name
     */
    ingester?: string;
    /**
     * Archive worker image
     */
    worker?: string;
    /**
     * Archive release
     */
    release?: 'Stage 1';
}
/**
 * Lookup providers matching the optional filtering criteria in a given Substrate or EVM registry
 * @param network network name for lookup
 * @returnsArchive endpoint url matching the filter
 * @throws If none matching archive is found or if there's ambiguity in choosing the network
 */
export declare function lookupArchive(network: KnownArchives): string;
/**
 * Lookup providers matching the optional filtering criteria in a given Substrate registry
 * @param network network name for lookup
 * @param opts susbtrate archive lookup options
 * @returnsArchive endpoint url matching the filter
 * @throws If none matching archive is found or if there's ambiguity in choosing the network
 */
export declare function lookupArchive(network: KnownArchivesSubstrate, opts: LookupOptionsSubstrate): string;
/**
 * Lookup providers matching the optional filtering criteria in a given Substrate or EVM registry
 * @param network network name for lookup
 * @param opts evm archive lookup options
 * @returns Archive endpoint url matching the filter
 * @throws If none matching archive is found or if there's ambiguity in choosing the network
 */
export declare function lookupArchive(network: KnownArchivesEVM, opts: LookupOptionsEVM): string;
/**
 * Lookup providers matching the optional filtering criteria in a given Substrate registry
 *
 * @param network network name for lookup
 * @param opts.genesis network genesis hex string (must start with "0x...")
 * @param opts.image archive image name
 * @param opts.ingest archive image name
 * @param opts.gateway archive gateway image
 *
 * @returns A list of matching providers
 * @throws If none matching archive is found or if there's ambiguity in choosing the network
 */
export declare function lookupInSubstrateRegistry(network: string, registry: ArchiveRegistrySubstrate, opts?: LookupOptionsSubstrate): (ArchiveProviderSubstrate)[];
/**
 * Lookup Subsquid Substrate Archive endpoint by network name
 *
 * @param network network name for lookup
 * @param opts.ingester archive ingester name
 * @param opts.worker archive worker image
 * @param opts.release archive release (for example Stage version)
 *
 * @returns Archive endpoint url matching the filter
 * @throws If none matching archive is found or if there's ambiguity in choosing the network
 */
export declare function lookupInEVMRegistry(network: string, registry: ArchiveRegistryEVM, opts?: LookupOptionsEVM): (ArchiveProviderEVM)[];
/**
 * Get parachain information by its name
 *
 * @param network Network name
 * @returns Chain info incluing genesis hash, token symbols, parachainId if relevent, etc
 */
export declare function getChainInfo(network: string, genesis?: string): NetworkSubstrate;
export declare function getGenesisHash(endpoint: string): Promise<string>;
//# sourceMappingURL=lookup.d.ts.map