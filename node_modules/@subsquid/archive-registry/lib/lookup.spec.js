"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const _1 = require(".");
const mockRegistrySubstrate = {
    "archives": [
        {
            "network": "polkadot",
            "providers": [
                {
                    "provider": "subsquid",
                    "dataSourceUrl": "https://polkadot.archive.subsquid.io/graphql",
                    "explorerUrl": "https://polkadot.explorer.subsquid.io/graphql",
                    "release": "FireSquid",
                    "image": "substrate-ingest:1",
                    "ingest": "substrate-ingest:1",
                    "gateway": "archive-gateway:2"
                }
            ],
            "genesisHash": "0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d"
        },
    ]
};
const mockRegistryEVM = {
    "archives": [
        {
            "network": "binance",
            "providers": [
                {
                    "provider": "subsquid",
                    "dataSourceUrl": "https://binance.archive.subsquid.io",
                    "release": "Stage 1",
                    "ingester": "eth-stage1-ingester:0.0.43",
                    "worker": "eth-stage1-worker:0.0.43"
                }
            ]
        },
    ]
};
describe("archive lookup", function () {
    it("looks up by archive name", () => {
        const polkaArchive = (0, _1.lookupInSubstrateRegistry)("polkadot", mockRegistrySubstrate)[0].dataSourceUrl;
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
    });
    it("looks up by a named version", () => {
        const polkaArchive = (0, _1.lookupInSubstrateRegistry)("polkadot", mockRegistrySubstrate)[0].dataSourceUrl;
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
    });
    it("lookups up by name and genesis hash", () => {
        const polkaArchive = (0, _1.lookupInSubstrateRegistry)("polkadot", mockRegistrySubstrate, { genesis: "0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d" })[0].dataSourceUrl;
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
    });
    it("fails to lookup by wrong hash", () => {
        assert_1.default.throws(() => (0, _1.lookupInSubstrateRegistry)("polkadot", mockRegistrySubstrate, { genesis: "0xaaa" }), Error);
    });
    it("looks up by evm archive name", () => {
        const binanceArchive = (0, _1.lookupInEVMRegistry)("binance", mockRegistryEVM)[0].dataSourceUrl;
        (0, assert_1.default)(binanceArchive === "https://binance.archive.subsquid.io");
    });
    it("lookups up fire squid archive by name", () => {
        const polkaArchive = (0, _1.lookupArchive)("polkadot", { release: "FireSquid" });
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
    });
    it("lookups up evm archive by name", () => {
        const binanceArchive = (0, _1.lookupArchive)("binance", { type: "EVM" });
        (0, assert_1.default)(binanceArchive === "https://binance.archive.subsquid.io");
    });
    it("looks up by archive name without type specification", () => {
        const polkaArchive = (0, _1.lookupArchive)("polkadot");
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
        const binanceArchive = (0, _1.lookupArchive)("binance");
        (0, assert_1.default)(binanceArchive === "https://binance.archive.subsquid.io");
    });
});
//# sourceMappingURL=lookup.spec.js.map