import { RpcErrorInfo } from "./rpc";
declare type Call = string | [method: string] | [method: string, params?: unknown[]];
export declare class RpcClient {
    private url;
    private ids;
    private requests;
    private sendQueue;
    private ws;
    private connection;
    private error?;
    private _connected;
    onclose?: (err: Error) => void;
    constructor(url: string);
    private onMessage;
    private handleResponse;
    close(err?: Error): void;
    private setError;
    private rejectRequests;
    connect(): Promise<void>;
    get isConnected(): boolean;
    call<T = any>(method: string, params?: unknown[]): Promise<T>;
    batch(calls: Call[]): Promise<(any | Error)[]>;
    private send;
}
/**
 * Server violated RPC protocol
 */
export declare class RpcProtocolError extends Error {
    readonly code?: number | undefined;
    constructor(code?: number | undefined, msg?: string);
}
/**
 * Received error message from server
 */
export declare class RpcError extends Error {
    readonly code: number;
    readonly data?: number | string;
    constructor(info: RpcErrorInfo);
}
/**
 * Problem with websocket connection
 */
export declare class RpcConnectionError extends Error {
}
export {};
//# sourceMappingURL=client.d.ts.map