import { RpcConnectionError } from "./client";
export interface ResilientRpcClientOptions {
    readonly url: string;
    readonly timeoutSeconds?: number;
    readonly maxRetries?: number;
    onRetry?(err: RpcConnectionError, errorsInRow: number, backoff: number): void;
}
export declare class ResilientRpcClient {
    private options;
    private errors;
    private backoff;
    private closed;
    private client;
    constructor(options: ResilientRpcClientOptions);
    call<T = any>(method: string, params?: unknown[]): Promise<T>;
    private reconnect;
    private addTimeout;
    close(err?: Error): void;
}
export declare function isRateLimitError(err: unknown): boolean;
export declare function isRetryableError(err: unknown): err is Error;
//# sourceMappingURL=resilient.d.ts.map