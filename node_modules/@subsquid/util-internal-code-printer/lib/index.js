"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutDir = exports.FileOutput = exports.Output = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class Output {
    constructor() {
        this.lines = [];
        this.indent = '';
    }
    line(s) {
        if (s) {
            this.lines.push(this.indent + s);
        }
        else {
            this.lines.push('');
        }
    }
    block(start, cb) {
        this.line(start + ' {');
        this.indentation(cb);
        this.line('}');
    }
    indentation(cb) {
        this.indent += '    ';
        try {
            cb();
        }
        finally {
            this.indent = this.indent.slice(0, this.indent.length - 4);
        }
    }
    blockComment(lines) {
        if (!lines?.length)
            return;
        this.line(`/**`);
        lines.forEach((line) => this.line(' * ' + escapeBlockComment(line)));
        this.line(' */');
    }
    lazy(gen) {
        this.lines.push({ indent: this.indent, gen });
    }
    toString() {
        return this.printLines(this.lines, '', '');
    }
    printLines(lines, indent, out) {
        for (let i = 0; i < lines.length; i++) {
            let line = lines[i];
            if (typeof line == 'string') {
                out += indent + line + '\n';
            }
            else {
                out = this.printLazyLine(line, indent, out);
            }
        }
        return out;
    }
    printLazyLine(line, indent, out) {
        let currentLines = this.lines;
        this.lines = [];
        try {
            line.gen();
            out = this.printLines(this.lines, indent + line.indent, out);
        }
        finally {
            this.lines = currentLines;
        }
        return out;
    }
}
exports.Output = Output;
class FileOutput extends Output {
    constructor(file) {
        super();
        this.file = file;
    }
    write() {
        fs_1.default.mkdirSync(path_1.default.dirname(this.file), { recursive: true });
        fs_1.default.writeFileSync(this.file, this.toString());
    }
}
exports.FileOutput = FileOutput;
class OutDir {
    constructor(dir) {
        this.dir = path_1.default.normalize(dir);
    }
    del() {
        fs_1.default.rmSync(this.dir, { recursive: true, force: true });
    }
    file(name) {
        return new FileOutput(this.path(name));
    }
    write(name, content) {
        const dst = this.path(name);
        fs_1.default.mkdirSync(path_1.default.dirname(dst), { recursive: true });
        fs_1.default.writeFileSync(dst, content);
    }
    child(name) {
        return new OutDir(this.path(name));
    }
    mkdir() {
        fs_1.default.mkdirSync(this.dir, { recursive: true });
    }
    add(name, srcFile) {
        let src = Array.isArray(srcFile) ? path_1.default.join(...srcFile) : srcFile;
        let dst = this.path(name);
        fs_1.default.mkdirSync(path_1.default.dirname(dst), { recursive: true });
        fs_1.default.copyFileSync(src, this.path(name));
    }
    path(name) {
        return name == null ? this.dir : path_1.default.join(this.dir, name);
    }
    exists() {
        return fs_1.default.existsSync(this.dir);
    }
}
exports.OutDir = OutDir;
function escapeBlockComment(s) {
    return s.replace(/\*\//g, 'x/');
}
//# sourceMappingURL=index.js.map