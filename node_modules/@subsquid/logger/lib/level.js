"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LEVELS = exports.Levels = exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["TRACE"] = 0] = "TRACE";
    LogLevel[LogLevel["DEBUG"] = 1] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["FATAL"] = 5] = "FATAL";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
function compileLevelConfig(config) {
    let variants = config.split(',').map(ns => {
        ns = ns.trim();
        let regex = new RegExp('^' + ns.split('*').map(escapeRegex).join('(.*)') + '(:.*)?$');
        return function match(ns) {
            let m = regex.exec(ns);
            if (!m)
                return 0;
            let specificity = ns.length + 1;
            for (let i = 1; i < m.length; i++) {
                specificity -= m[i]?.length || 0;
            }
            return specificity;
        };
    });
    return function matchLevel(ns) {
        let specificity = 0;
        for (let i = 0; i < variants.length; i++) {
            specificity = Math.max(specificity, variants[i](ns));
        }
        return specificity;
    };
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping
function escapeRegex(s) {
    return s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
function noMatch(ns) {
    return 0;
}
class Levels {
    constructor() {
        this.cache = {};
        this.levels = [noMatch, noMatch, noMatch, noMatch, noMatch, noMatch];
    }
    get(ns) {
        let level = this.cache[ns];
        if (level == null) {
            return this.cache[ns] = this.determineLevel(ns);
        }
        else {
            return level;
        }
    }
    determineLevel(ns) {
        let specificity = 0;
        let level = LogLevel.INFO;
        for (let i = 0; i < this.levels.length; i++) {
            let s = this.levels[i](ns);
            if (s > specificity) {
                level = i;
                specificity = s;
            }
        }
        return level;
    }
    configure(level, config) {
        this.levels[level] = compileLevelConfig(config);
        this.cache = {};
    }
}
exports.Levels = Levels;
exports.LEVELS = new Levels();
['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL'].forEach((name, level) => {
    let env = process.env[`SQD_${name}`];
    if (env) {
        exports.LEVELS.configure(level, env);
    }
});
//# sourceMappingURL=level.js.map