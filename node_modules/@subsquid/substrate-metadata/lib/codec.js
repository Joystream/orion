"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeMetadata = void 0;
const scale_codec_1 = require("@subsquid/scale-codec");
const assert_1 = __importDefault(require("assert"));
const metadataDefinition = __importStar(require("./old/definitions/metadata"));
const typeRegistry_1 = require("./old/typeRegistry");
const { codec, versions } = createScaleCodec();
function decodeMetadata(data) {
    if (typeof data == 'string') {
        data = Buffer.from(data.slice(2), 'hex');
    }
    let src = new scale_codec_1.Src(data);
    let magic = src.u32();
    (0, assert_1.default)(magic === 0x6174656d, 'No magic number 0x6174656d at the start of data');
    let version = src.u8();
    (0, assert_1.default)(9 <= version && version < 15, 'Invalid metadata version');
    // See https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
    // for why try-catch and version decoding stuff is here
    try {
        return decode(version, src);
    }
    catch (e) {
        if (version != 9)
            throw e;
        try {
            src = new scale_codec_1.Src(data);
            src.u32();
            src.u8();
            return decode(10, src);
        }
        catch (anotherError) {
            throw e;
        }
    }
}
exports.decodeMetadata = decodeMetadata;
function decode(version, src) {
    let metadata = codec.decode(versions[version - 9], src);
    src.assertEOF();
    return {
        __kind: `V${version}`,
        value: metadata
    };
}
function createScaleCodec() {
    let registry = new typeRegistry_1.OldTypeRegistry(metadataDefinition);
    let versions = new Array(6);
    for (let i = 9; i < 15; i++) {
        versions[i - 9] = registry.use(`MetadataV${i}`);
    }
    return {
        codec: new scale_codec_1.Codec(registry.getTypes()),
        versions
    };
}
//# sourceMappingURL=codec.js.map