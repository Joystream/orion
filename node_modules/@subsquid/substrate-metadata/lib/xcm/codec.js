"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeXcm = exports.decodeXcm = void 0;
const scale_codec_1 = require("@subsquid/scale-codec");
const definitions = __importStar(require("../old/definitions/xcm"));
const typeRegistry_1 = require("../old/typeRegistry");
const [TI, CODEC] = (() => {
    let registry = new typeRegistry_1.OldTypeRegistry(definitions);
    let ti = registry.use('VersionedXcm');
    let types = registry.getTypes();
    let codec = new scale_codec_1.Codec(types);
    return [ti, codec];
})();
function decodeXcm(bytes) {
    let src = new scale_codec_1.Src(bytes);
    return CODEC.decode(TI, src);
}
exports.decodeXcm = decodeXcm;
function encodeXcm(msg) {
    return CODEC.encodeToBinary(TI, msg);
}
exports.encodeXcm = encodeXcm;
//# sourceMappingURL=codec.js.map