export declare const types: {
    GenericAccountId: string;
    GenericAccountIndex: string;
    GenericLookupSource: string;
    GenericConsensusEngineId: string;
    GenericMultiAddress: {
        _enum: {
            Id: string;
            Index: string;
            Raw: string;
            Address32: string;
            Address20: string;
        };
    };
    GenericVote: string;
    StorageKey: string;
    Data: {
        _enum: {
            None: string;
            Raw0: string;
            Raw1: string;
            Raw2: string;
            Raw3: string;
            Raw4: string;
            Raw5: string;
            Raw6: string;
            Raw7: string;
            Raw8: string;
            Raw9: string;
            Raw10: string;
            Raw11: string;
            Raw12: string;
            Raw13: string;
            Raw14: string;
            Raw15: string;
            Raw16: string;
            Raw17: string;
            Raw18: string;
            Raw19: string;
            Raw20: string;
            Raw21: string;
            Raw22: string;
            Raw23: string;
            Raw24: string;
            Raw25: string;
            Raw26: string;
            Raw27: string;
            Raw28: string;
            Raw29: string;
            Raw30: string;
            Raw31: string;
            Raw32: string;
            BlakeTwo256: string;
            Sha256: string;
            Keccak256: string;
            ShaThree256: string;
        };
    };
    AssetApprovalKey: {
        owner: string;
        delegate: string;
    };
    AssetApproval: {
        amount: string;
        deposit: string;
    };
    AssetBalance: {
        balance: string;
        isFrozen: string;
        isSufficient: string;
    };
    AssetDestroyWitness: {
        accounts: string;
        sufficients: string;
        approvals: string;
    };
    AssetDetails: {
        owner: string;
        issuer: string;
        admin: string;
        freezer: string;
        supply: string;
        deposit: string;
        minBalance: string;
        isSufficient: string;
        accounts: string;
        sufficients: string;
        approvals: string;
        isFrozen: string;
    };
    AssetMetadata: {
        deposit: string;
        name: string;
        symbol: string;
        decimals: string;
        isFrozen: string;
    };
    TAssetBalance: string;
    TAssetDepositBalance: string;
    BlockAttestations: {
        receipt: string;
        valid: string;
        invalid: string;
    };
    IncludedBlocks: {
        actualNumber: string;
        session: string;
        randomSeed: string;
        activeParachains: string;
        paraBlocks: string;
    };
    MoreAttestations: {};
    RawAuraPreDigest: {
        slotNumber: string;
    };
    ExtrinsicOrHash: {
        _enum: {
            Hash: string;
            Extrinsic: string;
        };
    };
    ExtrinsicStatus: {
        _enum: {
            Future: string;
            Ready: string;
            Broadcast: string;
            InBlock: string;
            Retracted: string;
            FinalityTimeout: string;
            Finalized: string;
            Usurped: string;
            Dropped: string;
            Invalid: string;
        };
    };
    UncleEntryItem: {
        _enum: {
            InclusionHeight: string;
            Uncle: string;
        };
    };
    AllowedSlots: {
        _enum: string[];
    };
    BabeAuthorityWeight: string;
    BabeEpochConfiguration: {
        c: string;
        allowedSlots: string;
    };
    BabeBlockWeight: string;
    BabeEquivocationProof: {
        offender: string;
        slotNumber: string;
        firstHeader: string;
        secondHeader: string;
    };
    BabeWeight: string;
    MaybeRandomness: string;
    MaybeVrf: string;
    EpochAuthorship: {
        primary: string;
        secondary: string;
        secondary_vrf: string;
    };
    NextConfigDescriptor: {
        _enum: {
            V0: string;
            V1: string;
        };
    };
    NextConfigDescriptorV1: {
        c: string;
        allowedSlots: string;
    };
    Randomness: string;
    RawBabePreDigest: {
        _enum: {
            Phantom: string;
            Primary: string;
            SecondaryPlain: string;
            SecondaryVRF: string;
        };
    };
    RawBabePreDigestPrimary: {
        authorityIndex: string;
        slotNumber: string;
        vrfOutput: string;
        vrfProof: string;
    };
    RawBabePreDigestSecondaryPlain: {
        authorityIndex: string;
        slotNumber: string;
    };
    RawBabePreDigestSecondaryVRF: {
        authorityIndex: string;
        slotNumber: string;
        vrfOutput: string;
        vrfProof: string;
    };
    RawBabePreDigestTo159: {
        _enum: {
            Primary: string;
            Secondary: string;
        };
    };
    RawBabePreDigestPrimaryTo159: {
        authorityIndex: string;
        slotNumber: string;
        weight: string;
        vrfOutput: string;
        vrfProof: string;
    };
    RawBabePreDigestSecondaryTo159: {
        authorityIndex: string;
        slotNumber: string;
        weight: string;
    };
    RawBabePreDigestCompat: {
        _enum: {
            Zero: string;
            One: string;
            Two: string;
            Three: string;
        };
    };
    SlotNumber: string;
    VrfData: string;
    VrfOutput: string;
    VrfProof: string;
    AccountData: {
        free: string;
        reserved: string;
        miscFrozen: string;
        feeFrozen: string;
    };
    BalanceLockTo212: {
        id: string;
        amount: string;
        until: string;
        reasons: string;
    };
    BalanceLock: {
        id: string;
        amount: string;
        reasons: string;
    };
    BalanceStatus: {
        _enum: string[];
    };
    Reasons: {
        _enum: string[];
    };
    ReserveData: {
        id: string;
        amount: string;
    };
    ReserveIdentifier: string;
    VestingSchedule: {
        offset: string;
        perBlock: string;
        startingBlock: string;
    };
    WithdrawReasons: {
        _set: {
            TransactionPayment: number;
            Transfer: number;
            Reserve: number;
            Fee: number;
            Tip: number;
        };
    };
    BeefyCommitment: {
        payload: string;
        blockNumber: string;
        validatorSetId: string;
    };
    BeefyId: string;
    BeefySignedCommitment: {
        commitment: string;
        signatures: string;
    };
    BeefyNextAuthoritySet: {
        id: string;
        len: string;
        root: string;
    };
    BeefyPayload: string;
    MmrRootHash: string;
    ValidatorSetId: string;
    BridgedBlockHash: string;
    BridgedBlockNumber: string;
    BridgedHeader: string;
    BridgeMessageId: string;
    CallOrigin: {
        _enum: {
            SourceRoot: string;
            TargetAccount: string;
            SourceAccount: string;
        };
    };
    ChainId: string;
    DeliveredMessages: {
        begin: string;
        end: string;
        dispatchResults: string;
    };
    DispatchFeePayment: {
        _enum: string[];
    };
    InboundLaneData: {
        relayers: string;
        lastConfirmedNonce: string;
    };
    InboundRelayer: string;
    InitializationData: {
        header: string;
        authorityList: string;
        setId: string;
        isHalted: string;
    };
    LaneId: string;
    MessageData: {
        payload: string;
        fee: string;
    };
    MessagesDeliveryProofOf: {
        bridgedHeaderHash: string;
        storageProof: string;
        lane: string;
    };
    MessageKey: {
        laneId: string;
        nonce: string;
    };
    MessageNonce: string;
    MessagesProofOf: {
        bridgedHeaderHash: string;
        storageProof: string;
        lane: string;
        noncesStart: string;
        noncesEnd: string;
    };
    OperatingMode: {
        _enum: string[];
    };
    OutboundLaneData: {
        oldestUnprunedNonce: string;
        latestReceivedNonce: string;
        latestGeneratedNonce: string;
    };
    OutboundMessageFee: string;
    OutboundPayload: {
        specVersion: string;
        weight: string;
        origin: string;
        dispatchFeePayment: string;
        call: string;
    };
    Parameter: string;
    RelayerId: string;
    UnrewardedRelayer: {
        relayer: string;
        messages: string;
    };
    UnrewardedRelayersState: {
        unrewardedRelayer_Entries: string;
        messagesInOldestEntry: string;
        totalMessages: string;
    };
    BlockHash: string;
    PrefixedStorageKey: string;
    EthereumAddress: string;
    StatementKind: {
        _enum: string[];
    };
    CollectiveOrigin: {
        _enum: {
            Members: string;
            Member: string;
        };
    };
    MemberCount: string;
    ProposalIndex: string;
    VotesTo230: {
        index: string;
        threshold: string;
        ayes: string;
        nays: string;
    };
    Votes: {
        index: string;
        threshold: string;
        ayes: string;
        nays: string;
        end: string;
    };
    AuthorityId: string;
    RawVRFOutput: string;
    AliveContractInfo: {
        trieId: string;
        storageSize: string;
        pairCount: string;
        codeHash: string;
        rentAllowance: string;
        rentPaid: string;
        deductBlock: string;
        lastWrite: string;
        _reserved: string;
    };
    CodeHash: string;
    ContractCallRequest: {
        origin: string;
        dest: string;
        value: string;
        gasLimit: string;
        inputData: string;
    };
    ContractExecResultSuccessTo255: {
        status: string;
        data: string;
    };
    ContractExecResultTo255: {
        _enum: {
            Success: string;
            Error: string;
        };
    };
    ContractExecResultSuccessTo260: {
        flags: string;
        data: string;
        gasConsumed: string;
    };
    ContractExecResultTo260: {
        _enum: {
            Success: string;
            Error: string;
        };
    };
    ContractExecResultErrModule: {
        index: string;
        error: string;
        message: string;
    };
    ContractExecResultErr: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
        };
    };
    ContractExecResultOk: {
        flags: string;
        data: string;
    };
    ContractExecResultResult: {
        _enum: {
            Ok: string;
            Err: string;
        };
    };
    ContractExecResultTo267: {
        gasConsumed: string;
        debugMessage: string;
        result: string;
    };
    ContractExecResult: {
        gasConsumed: string;
        gasRequired: string;
        debugMessage: string;
        result: string;
    };
    ContractInfo: {
        _enum: {
            Alive: string;
            Tombstone: string;
        };
    };
    ContractStorageKey: string;
    DeletedContract: {
        pairCount: string;
        trieId: string;
    };
    ExecReturnValue: {
        flags: string;
        data: string;
    };
    Gas: string;
    HostFnWeightsTo264: {
        caller: string;
        address: string;
        gasLeft: string;
        balance: string;
        valueTransferred: string;
        minimumBalance: string;
        tombstoneDeposit: string;
        rentAllowance: string;
        blockNumber: string;
        now: string;
        weightToFee: string;
        gas: string;
        input: string;
        inputPerByte: string;
        return: string;
        returnPerByte: string;
        terminate: string;
        restoreTo: string;
        restoreToPerDelta: string;
        random: string;
        depositEvent: string;
        depositEventPerTopic: string;
        depositEventPerByte: string;
        setRentAllowance: string;
        setStorage: string;
        setStoragePerByte: string;
        clearStorage: string;
        getStorage: string;
        getStoragePerByte: string;
        transfer: string;
        call: string;
        callTransferSurcharge: string;
        callPerInputByte: string;
        callPerOutputByte: string;
        instantiate: string;
        instantiatePerInputByte: string;
        instantiatePerOutputByte: string;
        hashSha2256: string;
        hashSha2256PerByte: string;
        hashKeccak256: string;
        hashKeccak256PerByte: string;
        hashBlake2256: string;
        hashBlake2256PerByte: string;
        hashBlake2128: string;
        hashBlake2128PerByte: string;
    };
    HostFnWeights: {
        caller: string;
        address: string;
        gasLeft: string;
        balance: string;
        valueTransferred: string;
        minimumBalance: string;
        tombstoneDeposit: string;
        rentAllowance: string;
        blockNumber: string;
        now: string;
        weightToFee: string;
        gas: string;
        input: string;
        inputPerByte: string;
        return: string;
        returnPerByte: string;
        terminate: string;
        terminatePerCodeByte: string;
        restoreTo: string;
        restoreToPerCallerCodeByte: string;
        restoreToPerTombstoneCodeByte: string;
        restoreToPerDelta: string;
        random: string;
        depositEvent: string;
        depositEventPerTopic: string;
        depositEventPerByte: string;
        setRentAllowance: string;
        setStorage: string;
        setStoragePerByte: string;
        clearStorage: string;
        getStorage: string;
        getStoragePerByte: string;
        transfer: string;
        call: string;
        callPerCodeByte: string;
        callTransferSurcharge: string;
        callPerInputByte: string;
        callPerOutputByte: string;
        instantiate: string;
        instantiatePerCodeByte: string;
        instantiatePerInputByte: string;
        instantiatePerOutputByte: string;
        instantiatePerSaltByte: string;
        hashSha2256: string;
        hashSha2256PerByte: string;
        hashKeccak256: string;
        hashKeccak256PerByte: string;
        hashBlake2256: string;
        hashBlake2256PerByte: string;
        hashBlake2128: string;
        hashBlake2128PerByte: string;
        rentParams: string;
    };
    InstantiateRequest: {
        origin: string;
        endowment: string;
        gasLimit: string;
        code: string;
        data: string;
        salt: string;
    };
    ContractInstantiateResultTo267: {
        _enum: {
            Ok: string;
            Err: string;
        };
    };
    ContractInstantiateResult: {
        _enum: {
            Ok: string;
            Err: string;
        };
    };
    InstantiateReturnValueTo267: {
        result: string;
        accountId: string;
        rentProjection: string;
    };
    InstantiateReturnValue: {
        result: string;
        accountId: string;
    };
    InstructionWeights: {
        i64const: string;
        i64load: string;
        i64store: string;
        select: string;
        rIf: string;
        br: string;
        brIf: string;
        brIable: string;
        brIablePerEntry: string;
        call: string;
        callIndirect: string;
        callIndirectPerParam: string;
        localGet: string;
        localSet: string;
        local_tee: string;
        globalGet: string;
        globalSet: string;
        memoryCurrent: string;
        memoryGrow: string;
        i64clz: string;
        i64ctz: string;
        i64popcnt: string;
        i64eqz: string;
        i64extendsi32: string;
        i64extendui32: string;
        i32wrapi64: string;
        i64eq: string;
        i64ne: string;
        i64lts: string;
        i64ltu: string;
        i64gts: string;
        i64gtu: string;
        i64les: string;
        i64leu: string;
        i64ges: string;
        i64geu: string;
        i64add: string;
        i64sub: string;
        i64mul: string;
        i64divs: string;
        i64divu: string;
        i64rems: string;
        i64remu: string;
        i64and: string;
        i64or: string;
        i64xor: string;
        i64shl: string;
        i64shrs: string;
        i64shru: string;
        i64rotl: string;
        i64rotr: string;
    };
    LimitsTo264: {
        eventTopics: string;
        stackHeight: string;
        globals: string;
        parameters: string;
        memoryPages: string;
        tableSize: string;
        brTableSize: string;
        subjectLen: string;
        codeSize: string;
    };
    Limits: {
        eventTopics: string;
        stackHeight: string;
        globals: string;
        parameters: string;
        memoryPages: string;
        tableSize: string;
        brTableSize: string;
        subjectLen: string;
    };
    PrefabWasmModule: {
        scheduleVersion: string;
        initial: string;
        maximum: string;
        refcount: string;
        _reserved: string;
        code: string;
        originalCodeLen: string;
    };
    RentProjection: {
        _enum: {
            EvictionAt: string;
            NoEviction: string;
        };
    };
    ScheduleTo212: {
        version: string;
        putCodePerByteCost: string;
        growMemCost: string;
        regularOpCost: string;
        returnDataPerByteCost: string;
        eventDataPerByteCost: string;
        eventPerTopicCost: string;
        eventBaseCost: string;
        sandboxDataReadCost: string;
        sandboxDataWriteCost: string;
        maxEventTopics: string;
        maxStackHeight: string;
        maxMemoryPages: string;
        enablePrintln: string;
        maxSubjectLen: string;
    };
    ScheduleTo258: {
        version: string;
        putCodePerByteCost: string;
        growMemCost: string;
        regularOpCost: string;
        returnDataPerByteCost: string;
        eventDataPerByteCost: string;
        eventPerTopicCost: string;
        eventBaseCost: string;
        sandboxDataReadCost: string;
        sandboxDataWriteCost: string;
        transferCost: string;
        maxEventTopics: string;
        maxStackHeight: string;
        maxMemoryPages: string;
        enablePrintln: string;
        maxSubjectLen: string;
    };
    ScheduleTo264: {
        version: string;
        enablePrintln: string;
        limits: string;
        instructionWeights: string;
        hostFnWeights: string;
    };
    Schedule: {
        version: string;
        enablePrintln: string;
        limits: string;
        instructionWeights: string;
        hostFnWeights: string;
    };
    SeedOf: string;
    TombstoneContractInfo: string;
    TrieId: string;
    ContractCryptoHasher: {
        _enum: string[];
    };
    ContractDiscriminant: string;
    ContractLayoutArray: {
        offset: string;
        len: string;
        cellsPerElem: string;
        layout: string;
    };
    ContractLayoutCell: {
        key: string;
        ty: string;
    };
    ContractLayoutEnum: {
        dispatchKey: string;
        variants: string;
    };
    ContractLayoutHash: {
        offset: string;
        strategy: string;
        layout: string;
    };
    ContractLayoutHashingStrategy: {
        hasher: string;
        postfix: string;
        prefix: string;
    };
    ContractLayoutKey: string;
    ContractLayoutStruct: {
        fields: string;
    };
    ContractLayoutStructField: {
        layout: string;
        name: string;
    };
    ContractStorageLayout: {
        _enum: {
            Cell: string;
            Hash: string;
            Array: string;
            Struct: string;
            Enum: string;
        };
    };
    ContractConstructorSpec: {
        name: string;
        selector: string;
        args: string;
        docs: string;
    };
    ContractContractSpec: {
        constructors: string;
        messages: string;
        events: string;
        docs: string;
    };
    ContractDisplayName: string;
    ContractEventParamSpec: {
        name: string;
        indexed: string;
        type: string;
        docs: string;
    };
    ContractEventSpec: {
        name: string;
        args: string;
        docs: string;
    };
    ContractMessageParamSpec: {
        name: string;
        type: string;
    };
    ContractMessageSpec: {
        name: string;
        selector: string;
        mutates: string;
        payable: string;
        args: string;
        returnType: string;
        docs: string;
    };
    ContractSelector: string;
    ContractTypeSpec: {
        type: string;
        displayName: string;
    };
    ContractProjectInfo: {
        source: string;
        contract: string;
    };
    ContractMetadataV0: {
        types: string;
        spec: string;
    };
    ContractMetadataV1: {
        types: string;
        spec: string;
    };
    ContractMetadata: {
        _enum: {
            V0: string;
            V1: string;
        };
    };
    ContractMetadataLatest: string;
    ContractProjectV0: {
        metadataVersion: string;
        source: string;
        contract: string;
        types: string;
        spec: string;
    };
    ContractProject: string;
    ContractProjectContract: {
        name: string;
        version: string;
        authors: string;
        description: string;
        docs: string;
        repository: string;
        homepage: string;
        license: string;
    };
    ContractProjectSource: {
        wasmHash: string;
        language: string;
        compiler: string;
        wasm: string;
    };
    FundIndex: string;
    LastContribution: {
        _enum: {
            Never: string;
            PreEnding: string;
            Ending: string;
        };
    };
    FundInfo: {
        depositor: string;
        verifier: string;
        deposit: string;
        raised: string;
        end: string;
        cap: string;
        lastContribution: string;
        firstPeriod: string;
        lastPeriod: string;
        trieIndex: string;
    };
    TrieIndex: string;
    ConfigData: {
        maxIndividual: string;
    };
    MessageId: string;
    OverweightIndex: string;
    PageCounter: string;
    PageIndexData: {
        beginUsed: string;
        endUsed: string;
        overweightCount: string;
    };
    AccountVote: {
        _enum: {
            Standard: string;
            Split: string;
        };
    };
    AccountVoteSplit: {
        aye: string;
        nay: string;
    };
    AccountVoteStandard: {
        vote: string;
        balance: string;
    };
    Conviction: {
        _enum: string[];
    };
    Delegations: {
        votes: string;
        capital: string;
    };
    PreimageStatus: {
        _enum: {
            Missing: string;
            Available: string;
        };
    };
    PreimageStatusAvailable: {
        data: string;
        provider: string;
        deposit: string;
        since: string;
        expiry: string;
    };
    PriorLock: string;
    PropIndex: string;
    Proposal: string;
    ProxyState: {
        _enum: {
            Open: string;
            Active: string;
        };
    };
    ReferendumIndex: string;
    ReferendumInfoTo239: {
        end: string;
        proposalHash: string;
        threshold: string;
        delay: string;
    };
    ReferendumInfo: {
        _enum: {
            Ongoing: string;
            Finished: string;
        };
    };
    ReferendumInfoFinished: {
        approved: string;
        end: string;
    };
    ReferendumStatus: {
        end: string;
        proposalHash: string;
        threshold: string;
        delay: string;
        tally: string;
    };
    Tally: {
        ayes: string;
        nays: string;
        turnout: string;
    };
    Voting: {
        _enum: {
            Direct: string;
            Delegating: string;
        };
    };
    VotingDirect: {
        votes: string;
        delegations: string;
        prior: string;
    };
    VotingDirectVote: string;
    VotingDelegating: {
        balance: string;
        target: string;
        conviction: string;
        delegations: string;
        prior: string;
    };
    ApprovalFlag: string;
    DefunctVoter: {
        who: string;
        voteCount: string;
        candidateCount: string;
    };
    Renouncing: {
        _enum: {
            Member: string;
            RunnerUp: string;
            Candidate: string;
        };
    };
    SetIndex: string;
    Vote: string;
    VoteIndex: string;
    VoterInfo: {
        lastActive: string;
        lastWin: string;
        pot: string;
        stake: string;
    };
    VoteThreshold: {
        _enum: string[];
    };
    CreatedBlock: {
        hash: string;
        aux: string;
    };
    ImportedAux: {
        headerOnly: string;
        clearJustificationRequests: string;
        needsJustification: string;
        badJustification: string;
        needsFinalityProof: string;
        isNewBest: string;
    };
    BlockV0: {
        header: string;
        transactions: string;
        ommers: string;
    };
    LegacyTransaction: {
        nonce: string;
        gasPrice: string;
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        signature: string;
    };
    TransactionV0: string;
    BlockV1: {
        header: string;
        transactions: string;
        ommers: string;
    };
    EIP2930Transaction: {
        chainId: string;
        nonce: string;
        gasPrice: string;
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        accessList: string;
        oddYParity: string;
        r: string;
        s: string;
    };
    TransactionV1: {
        _enum: {
            Legacy: string;
            EIP2930: string;
        };
    };
    BlockV2: {
        header: string;
        transactions: string;
        ommers: string;
    };
    EIP1559Transaction: {
        chainId: string;
        nonce: string;
        maxPriorityFeePerGas: string;
        maxFeePerGas: string;
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        accessList: string;
        oddYParity: string;
        r: string;
        s: string;
    };
    TransactionV2: {
        _enum: {
            Legacy: string;
            EIP2930: string;
            EIP1559: string;
        };
    };
    EthereumAccountId: string;
    EthereumLookupSource: string;
    EthereumSignature: string;
    EthAccessListItem: {
        address: string;
        slots: string;
    };
    EthAccessList: string;
    EthAccount: {
        address: string;
        balance: string;
        nonce: string;
        codeHash: string;
        storageHash: string;
        accountProof: string;
        storageProof: string;
    };
    EthAddress: string;
    EthBlock: {
        header: string;
        transactions: string;
        ommers: string;
    };
    EthHeader: {
        parentHash: string;
        ommersHash: string;
        beneficiary: string;
        stateRoot: string;
        transactionsRoot: string;
        receiptsRoot: string;
        logsBloom: string;
        difficulty: string;
        number: string;
        gasLimit: string;
        gasUsed: string;
        timestamp: string;
        extraData: string;
        mixMash: string;
        nonce: string;
    };
    EthRichBlock: {
        blockHash: string;
        parentHash: string;
        sha3Uncles: string;
        author: string;
        miner: string;
        stateRoot: string;
        transactionsRoot: string;
        receiptsRoot: string;
        number: string;
        gasUsed: string;
        gasLimit: string;
        extraData: string;
        logsBloom: string;
        timestamp: string;
        difficulty: string;
        totalDifficulty: string;
        sealFields: string;
        uncles: string;
        transactions: string;
        blockSize: string;
    };
    EthBloom: string;
    EthCallRequest: {
        from: string;
        to: string;
        gasPrice: string;
        gas: string;
        value: string;
        data: string;
        nonce: string;
    };
    EthFilter: {
        fromBlock: string;
        toBlock: string;
        blockHash: string;
        address: string;
        topics: string;
    };
    EthFilterAddress: {
        _enum: {
            Single: string;
            Multiple: string;
            Null: string;
        };
    };
    EthFilterChanges: {
        _enum: {
            Logs: string;
            Hashes: string;
            Empty: string;
        };
    };
    EthFilterTopic: {
        _enum: {
            Single: string;
            Multiple: string;
            Null: string;
        };
    };
    EthFilterTopicEntry: string;
    EthFilterTopicInner: {
        _enum: {
            Single: string;
            Multiple: string;
            Null: string;
        };
    };
    EthRichHeader: {
        blockHash: string;
        parentHash: string;
        sha3Uncles: string;
        author: string;
        miner: string;
        stateRoot: string;
        transactionsRoot: string;
        receiptsRoot: string;
        number: string;
        gasUsed: string;
        gasLimit: string;
        extraData: string;
        logsBloom: string;
        timestamp: string;
        difficulty: string;
        sealFields: string;
        blockSize: string;
    };
    EthLog: {
        address: string;
        topics: string;
        data: string;
        blockHash: string;
        blockNumber: string;
        transactionHash: string;
        transactionIndex: string;
        logIndex: string;
        transactionLogIndex: string;
        removed: string;
    };
    EthReceipt: {
        transactionHash: string;
        transactionIndex: string;
        blockHash: string;
        from: string;
        to: string;
        blockNumber: string;
        cumulativeGasUsed: string;
        gasUsed: string;
        contractAddress: string;
        logs: string;
        root: string;
        logsBloom: string;
        statusCode: string;
    };
    EthStorageProof: {
        key: string;
        value: string;
        proof: string;
    };
    EthSubKind: {
        _enum: string[];
    };
    EthSubParams: {
        _enum: {
            None: string;
            Logs: string;
        };
    };
    EthSubResult: {
        _enum: {
            Header: string;
            Log: string;
            TransactionHash: string;
            SyncState: string;
        };
    };
    EthSyncInfo: {
        startingBlock: string;
        currentBlock: string;
        highestBlock: string;
        warpChunksAmount: string;
        warpChunksProcessed: string;
    };
    EthSyncStatus: {
        _enum: {
            Info: string;
            None: string;
        };
    };
    EthTransaction: string;
    EthTransactionSignature: {
        v: string;
        r: string;
        s: string;
    };
    EthTransactionAction: {
        _enum: {
            Call: string;
            Create: string;
        };
    };
    EthTransactionCondition: {
        _enum: {
            block: string;
            time: string;
        };
    };
    EthTransactionRequest: {
        from: string;
        to: string;
        gasPrice: string;
        gas: string;
        value: string;
        data: string;
        nonce: string;
    };
    EthTransactionStatus: {
        transactionHash: string;
        transactionIndex: string;
        from: string;
        to: string;
        contractAddress: string;
        logs: string;
        logsBloom: string;
    };
    EthWork: {
        powHash: string;
        seedHash: string;
        target: string;
        number: string;
    };
    EvmAccount: {
        nonce: string;
        balance: string;
    };
    EvmLog: {
        address: string;
        topics: string;
        data: string;
    };
    EvmVicinity: {
        gasPrice: string;
        origin: string;
    };
    ExitError: {
        _enum: {
            StackUnderflow: string;
            StackOverflow: string;
            InvalidJump: string;
            InvalidRange: string;
            DesignatedInvalid: string;
            CallTooDeep: string;
            CreateCollision: string;
            CreateContractLimit: string;
            OutOfOffset: string;
            OutOfGas: string;
            OutOfFund: string;
            PCUnderflow: string;
            CreateEmpty: string;
            Other: string;
        };
    };
    ExitFatal: {
        _enum: {
            NotSupported: string;
            UnhandledInterrupt: string;
            CallErrorAsFatal: string;
            Other: string;
        };
    };
    ExitReason: {
        _enum: {
            Succeed: string;
            Error: string;
            Revert: string;
            Fatal: string;
        };
    };
    ExitRevert: {
        _enum: string[];
    };
    ExitSucceed: {
        _enum: string[];
    };
    Extrinsic: string;
    ExtrinsicEra: string;
    ExtrinsicPayload: string;
    ExtrinsicSignature: string;
    ExtrinsicV4: string;
    ExtrinsicPayloadV4: string;
    ExtrinsicSignatureV4: string;
    ExtrinsicUnknown: string;
    ExtrinsicPayloadUnknown: string;
    Era: string;
    ImmortalEra: string;
    MortalEra: string;
    AnySignature: string;
    MultiSignature: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
        };
    };
    Signature: string;
    SignerPayload: string;
    EcdsaSignature: string;
    Ed25519Signature: string;
    Sr25519Signature: string;
    AssetOptions: {
        initalIssuance: string;
        permissions: string;
    };
    Owner: {
        _enum: {
            None: string;
            Address: string;
        };
    };
    PermissionsV1: {
        update: string;
        mint: string;
        burn: string;
    };
    PermissionVersions: {
        _enum: {
            V1: string;
        };
    };
    PermissionLatest: string;
    ActiveGilt: {
        proportion: string;
        amount: string;
        who: string;
        expiry: string;
    };
    ActiveGiltsTotal: {
        frozen: string;
        proportion: string;
        index: string;
        target: string;
    };
    ActiveIndex: string;
    GiltBid: {
        amount: string;
        who: string;
    };
    AuthorityIndex: string;
    AuthorityList: string;
    AuthoritySet: {
        currentAuthorities: string;
        setId: string;
        pendingStandardChanges: string;
        pendingForcedChanges: string;
        authoritySetChanges: string;
    };
    ForkTreePendingChange: {
        roots: string;
        bestFinalizedNumber: string;
    };
    ForkTreePendingChangeNode: {
        hash: string;
        number: string;
        data: string;
        children: string;
    };
    AuthoritySetChange: string;
    AuthoritySetChanges: string;
    AuthorityWeight: string;
    DelayKind: {
        _enum: {
            Finalized: string;
            Best: string;
        };
    };
    DelayKindBest: {
        medianLastFinalized: string;
    };
    EncodedFinalityProofs: string;
    GrandpaEquivocation: {
        _enum: {
            Prevote: string;
            Precommit: string;
        };
    };
    GrandpaEquivocationProof: {
        setId: string;
        equivocation: string;
    };
    GrandpaEquivocationValue: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    GrandpaPrevote: {
        targetHash: string;
        targetNumber: string;
    };
    GrandpaCommit: {
        targetHash: string;
        targetNumber: string;
        precommits: string;
    };
    GrandpaPrecommit: {
        targetHash: string;
        targetNumber: string;
    };
    GrandpaSignedPrecommit: {
        precommit: string;
        signature: string;
        id: string;
    };
    GrandpaJustification: {
        round: string;
        commit: string;
        votesAncestries: string;
    };
    JustificationNotification: string;
    KeyOwnerProof: string;
    NextAuthority: string;
    PendingChange: {
        nextAuthorities: string;
        delay: string;
        canonHeight: string;
        canonHash: string;
        delayKind: string;
    };
    PendingPause: {
        scheduledAt: string;
        delay: string;
    };
    PendingResume: {
        scheduledAt: string;
        delay: string;
    };
    Precommits: {
        currentWeight: string;
        missing: string;
    };
    Prevotes: {
        currentWeight: string;
        missing: string;
    };
    ReportedRoundStates: {
        setId: string;
        best: string;
        background: string;
    };
    RoundState: {
        round: string;
        totalWeight: string;
        thresholdWeight: string;
        prevotes: string;
        precommits: string;
    };
    SetId: string;
    StoredPendingChange: {
        scheduledAt: string;
        delay: string;
        nextAuthorities: string;
    };
    StoredState: {
        _enum: {
            Live: string;
            PendingPause: string;
            Paused: string;
            PendingResume: string;
        };
    };
    IdentityFields: {
        _set: {
            _bitLength: number;
            Display: number;
            Legal: number;
            Web: number;
            Riot: number;
            Email: number;
            PgpFingerprint: number;
            Image: number;
            Twitter: number;
        };
    };
    IdentityInfoAdditional: string;
    IdentityInfoTo198: {
        additional: string;
        display: string;
        legal: string;
        web: string;
        riot: string;
        email: string;
        pgpFingerprint: string;
        image: string;
    };
    IdentityInfo: {
        additional: string;
        display: string;
        legal: string;
        web: string;
        riot: string;
        email: string;
        pgpFingerprint: string;
        image: string;
        twitter: string;
    };
    IdentityJudgement: {
        _enum: {
            Unknown: string;
            FeePaid: string;
            Reasonable: string;
            KnownGood: string;
            OutOfDate: string;
            LowQuality: string;
            Erroneous: string;
        };
    };
    RegistrationJudgement: string;
    RegistrationTo198: {
        judgements: string;
        deposit: string;
        info: string;
    };
    Registration: {
        judgements: string;
        deposit: string;
        info: string;
    };
    RegistrarIndex: string;
    RegistrarInfo: {
        account: string;
        fee: string;
        fields: string;
    };
    AuthIndex: string;
    AuthoritySignature: string;
    Heartbeat: {
        blockNumber: string;
        networkState: string;
        sessionIndex: string;
        authorityIndex: string;
        validatorsLen: string;
    };
    HeartbeatTo244: {
        blockNumber: string;
        networkState: string;
        sessionIndex: string;
        authorityIndex: string;
    };
    OpaqueMultiaddr: string;
    OpaquePeerId: string;
    OpaqueNetworkState: {
        peerId: string;
        externalAddresses: string;
    };
    CallIndex: string;
    LotteryConfig: {
        price: string;
        start: string;
        length: string;
        delay: string;
        repeat: string;
    };
    MmrLeafProof: {
        blockHash: string;
        leaf: string;
        proof: string;
    };
    StorageKind: {
        _enum: {
            PERSISTENT: number;
            LOCAL: number;
        };
    };
    DeferredOffenceOf: string;
    Kind: string;
    OffenceDetails: {
        offender: string;
        reporters: string;
    };
    Offender: string;
    OpaqueTimeSlot: string;
    ReportIdOf: string;
    Reporter: string;
    ServiceQuality: {
        _enum: string[];
    };
    DisputeLocation: {
        _enum: string[];
    };
    DisputeResult: {
        _enum: string[];
    };
    DisputeState: {
        validatorsFor: string;
        validatorsAgainst: string;
        start: string;
        concludedAt: string;
    };
    DisputeStatement: {
        _enum: {
            Valid: string;
            Invalid: string;
        };
    };
    DisputeStatementSet: {
        candidateHash: string;
        session: string;
        statements: string;
    };
    ExplicitDisputeStatement: {
        valid: string;
        candidateHash: string;
        session: string;
    };
    InvalidDisputeStatementKind: {
        _enum: string[];
    };
    MultiDisputeStatementSet: string;
    ValidDisputeStatementKind: {
        _enum: {
            Explicit: string;
            BackingSeconded: string;
            BackingValid: string;
            ApprovalChecking: string;
        };
    };
    HrmpChannel: {
        maxCapacity: string;
        maxTotalSize: string;
        maxMessageSize: string;
        msgCount: string;
        totalSize: string;
        mqcHead: string;
        senderDeposit: string;
        recipientDeposit: string;
    };
    HrmpChannelId: {
        sender: string;
        receiver: string;
    };
    HrmpOpenChannelRequest: {
        confirmed: string;
        age: string;
        senderDeposit: string;
        maxMessageSize: string;
        maxCapacity: string;
        maxTotalSize: string;
    };
    ParachainProposal: {
        proposer: string;
        genesisHead: string;
        validators: string;
        name: string;
        balance: string;
    };
    RegisteredParachainInfo: {
        validators: string;
        proposer: string;
    };
    Bidder: {
        _enum: {
            New: string;
            Existing: string;
        };
    };
    IncomingParachain: {
        _enum: {
            Unset: string;
            Fixed: string;
            Deploy: string;
        };
    };
    IncomingParachainDeploy: {
        code: string;
        initialHeadData: string;
    };
    IncomingParachainFixed: {
        codeHash: string;
        codeSize: string;
        initialHeadData: string;
    };
    NewBidder: {
        who: string;
        sub: string;
    };
    SubId: string;
    AuctionIndex: string;
    LeasePeriod: string;
    LeasePeriodOf: string;
    SlotRange: {
        _enum: string[];
    };
    WinningData: string;
    WinningDataEntry: string;
    WinnersData: string;
    WinnersDataTuple: string;
    AbridgedCandidateReceipt: {
        parachainIndex: string;
        relayParent: string;
        headData: string;
        collator: string;
        signature: string;
        povBlockHash: string;
        commitments: string;
    };
    AbridgedHostConfiguration: {
        maxCodeSize: string;
        maxHeadDataSize: string;
        maxUpwardQueueCount: string;
        maxUpwardQueueSize: string;
        maxUpwardMessageSize: string;
        maxUpwardMessageNumPerCandidate: string;
        hrmpMaxMessageNumPerCandidate: string;
        validationUpgradeFrequency: string;
        validationUpgradeDelay: string;
    };
    AbridgedHrmpChannel: {
        maxCapacity: string;
        maxTotalSize: string;
        maxMessageSize: string;
        msgCount: string;
        totalSize: string;
        mqcHead: string;
    };
    AssignmentId: string;
    AssignmentKind: {
        _enum: {
            Parachain: string;
            Parathread: string;
        };
    };
    AttestedCandidate: {
        candidate: string;
        validityVotes: string;
        validatorIndices: string;
    };
    AuthorityDiscoveryId: string;
    AvailabilityBitfield: string;
    AvailabilityBitfieldRecord: {
        bitfield: string;
        submittedTt: string;
    };
    BackedCandidate: {
        candidate: string;
        validityVotes: string;
        validatorIndices: string;
    };
    BufferedSessionChange: {
        applyAt: string;
        validators: string;
        queued: string;
        sessionIndex: string;
    };
    CandidateCommitments: {
        upwardMessages: string;
        horizontalMessages: string;
        newValidationCode: string;
        headData: string;
        processedDownwardMessages: string;
        hrmpWatermark: string;
    };
    CandidateDescriptor: {
        paraId: string;
        relayParent: string;
        collatorId: string;
        persistedValidationDataHash: string;
        povHash: string;
        erasureRoot: string;
        signature: string;
        paraHead: string;
        validationCodeHash: string;
    };
    CandidateHash: string;
    CandidateInfo: {
        who: string;
        deposit: string;
    };
    CandidatePendingAvailability: {
        core: string;
        hash: string;
        descriptor: string;
        availabilityVotes: string;
        backers: string;
        relayParentNumber: string;
        backedInNumber: string;
        backingGroup: string;
    };
    CandidateReceipt: {
        descriptor: string;
        commitmentsHash: string;
    };
    GlobalValidationData: {
        maxCodeSize: string;
        maxHeadDataSize: string;
        blockNumber: string;
    };
    CollatorId: string;
    CollatorSignature: string;
    CommittedCandidateReceipt: {
        descriptor: string;
        commitments: string;
    };
    CoreAssignment: {
        core: string;
        paraId: string;
        kind: string;
        groupIdx: string;
    };
    CoreIndex: string;
    CoreOccupied: {
        _enum: {
            Parathread: string;
            Parachain: string;
        };
    };
    DoubleVoteReport: {
        identity: string;
        first: string;
        second: string;
        proof: string;
        signingContext: string;
    };
    DownwardMessage: string;
    GroupIndex: string;
    GlobalValidationSchedule: {
        maxCodeSize: string;
        maxHeadDataSize: string;
        blockNumber: string;
    };
    HeadData: string;
    HostConfiguration: {
        maxCodeSize: string;
        maxHeadDataSize: string;
        maxUpwardQueueCount: string;
        maxUpwardQueueSize: string;
        maxUpwardMessageSize: string;
        maxUpwardMessageNumPerCandidate: string;
        hrmpMaxMessageNumPerCandidate: string;
        validationUpgradeFrequency: string;
        validationUpgradeDelay: string;
        maxPovSize: string;
        maxDownwardMessageSize: string;
        preferredDispatchableUpwardMessagesStepWeight: string;
        hrmpMaxParachainOutboundChannels: string;
        hrmpMaxParathreadOutboundChannels: string;
        hrmpOpenRequestTtl: string;
        hrmpSenderDeposit: string;
        hrmpRecipientDeposit: string;
        hrmpChannelMaxCapacity: string;
        hrmpChannelMaxTotalSize: string;
        hrmpMaxParachainInboundChannels: string;
        hrmpMaxParathreadInboundChannels: string;
        hrmpChannelMaxMessageSize: string;
        codeRetentionPeriod: string;
        parathreadCores: string;
        parathreadRetries: string;
        groupRotationFrequency: string;
        chainAvailabilityPeriod: string;
        threadAvailabilityPeriod: string;
        schedulingLookahead: string;
        maxValidatorsPerCore: string;
        maxValidators: string;
        disputePeriod: string;
        disputePostConclusionAcceptancePeriod: string;
        disputeMaxSpamSlots: string;
        disputeConclusionByTimeOutPeriod: string;
        noShowSlots: string;
        nDelayTranches: string;
        zerothDelayTrancheWidth: string;
        neededApprovals: string;
        relayVrfModuloSamples: string;
    };
    InboundDownwardMessage: {
        pubSentAt: string;
        pubMsg: string;
    };
    InboundHrmpMessage: {
        sentAt: string;
        data: string;
    };
    InboundHrmpMessages: string;
    LocalValidationData: {
        parentHead: string;
        balance: string;
        codeUpgradeAllowed: string;
    };
    MessageIngestionType: {
        downwardMessages: string;
        horizontalMessages: string;
    };
    MessageQueueChain: string;
    OutboundHrmpMessage: {
        recipient: string;
        data: string;
    };
    ParachainDispatchOrigin: {
        _enum: string[];
    };
    ParachainInherentData: {
        validationData: string;
        relayChainState: string;
        downwardMessages: string;
        horizontalMessages: string;
    };
    ParachainsInherentData: {
        bitfields: string;
        backedCandidates: string;
        disputes: string;
        parentHeader: string;
    };
    ParaGenesisArgs: {
        genesisHead: string;
        validationCode: string;
        parachain: string;
    };
    ParaId: string;
    ParaInfo: {
        manager: string;
        deposit: string;
        locked: string;
    };
    ParaLifecycle: {
        _enum: string[];
    };
    ParaPastCodeMeta: {
        upgradeTimes: string;
        lastPruned: string;
    };
    ParaScheduling: {
        _enum: string[];
    };
    ParathreadClaim: string;
    ParathreadClaimQueue: {
        queue: string;
        nextCoreOffset: string;
    };
    ParathreadEntry: {
        claim: string;
        retries: string;
    };
    ParaValidatorIndex: string;
    PersistedValidationData: {
        parentHead: string;
        relayParentNumber: string;
        relayParentStorageRoot: string;
        maxPovSize: string;
    };
    QueuedParathread: {
        claim: string;
        coreOffset: string;
    };
    RelayBlockNumber: string;
    RelayChainBlockNumber: string;
    RelayHash: string;
    RelayChainHash: string;
    Remark: string;
    ReplacementTimes: {
        expectedAt: string;
        activatedAt: string;
    };
    Retriable: {
        _enum: {
            Never: string;
            WithRetries: string;
        };
    };
    Scheduling: {
        _enum: string[];
    };
    SessionInfo: {
        validators: string;
        discoveryKeys: string;
        assignmentKeys: string;
        validatorGroups: string;
        nCores: string;
        zerothDelayTrancheWidth: string;
        relayVrfModuloSamples: string;
        nDelayTranches: string;
        noShowSlots: string;
        neededApprovals: string;
    };
    SessionInfoValidatorGroup: string;
    SignedAvailabilityBitfield: {
        payload: string;
        validatorIndex: string;
        signature: string;
    };
    SignedAvailabilityBitfields: string;
    SigningContext: {
        sessionIndex: string;
        parentHash: string;
    };
    Statement: {
        _enum: {
            Never: string;
            Candidate: string;
            Valid: string;
            Invalid: string;
        };
    };
    TransientValidationData: {
        maxCodeSize: string;
        maxHeadDataSize: string;
        balance: string;
        codeUpgradeAllowed: string;
        dmqLength: string;
    };
    UpgradeGoAhead: {
        _enum: string[];
    };
    UpgradeRestriction: {
        _enum: string[];
    };
    UpwardMessage: string;
    ValidationFunctionParams: {
        maxCodeSize: string;
        relayChainHeight: string;
        codeUpgradeAllowed: string;
    };
    ValidationCode: string;
    ValidationCodeHash: string;
    ValidationData: {
        persisted: string;
        transient: string;
    };
    ValidationDataType: {
        validationData: string;
        relayChainState: string;
    };
    ValidatorSignature: string;
    ValidityAttestation: {
        _enum: {
            Never: string;
            Implicit: string;
            Explicit: string;
        };
    };
    MessagingStateSnapshot: {
        relayDispatchQueueSize: string;
        egressChannels: string;
    };
    MessagingStateSnapshotEgressEntry: string;
    SystemInherentData: string;
    VecInboundHrmpMessage: string;
    FeeDetails: {
        inclusionFee: string;
    };
    InclusionFee: {
        baseFee: string;
        lenFee: string;
        adjustedWeightFee: string;
    };
    RuntimeDispatchInfo: {
        weight: string;
        class: string;
        partialFee: string;
    };
    Approvals: string;
    ProxyDefinition: {
        delegate: string;
        proxyType: string;
        delay: string;
    };
    ProxyType: {
        _enum: string[];
    };
    ProxyAnnouncement: {
        real: string;
        callHash: string;
        height: string;
    };
    AccountStatus: {
        validity: string;
        freeBalance: string;
        lockedBalance: string;
        signature: string;
        vat: string;
    };
    AccountValidity: {
        _enum: string[];
    };
    ActiveRecovery: {
        created: string;
        deposit: string;
        friends: string;
    };
    RecoveryConfig: {
        delayPeriod: string;
        deposit: string;
        friends: string;
        threshold: string;
    };
    RpcMethods: {
        version: string;
        methods: string;
    };
    Fixed64: string;
    FixedI64: string;
    FixedU64: string;
    Fixed128: string;
    FixedI128: string;
    FixedU128: string;
    I32F32: string;
    U32F32: string;
    PerU16: string;
    Perbill: string;
    Percent: string;
    Permill: string;
    Perquintill: string;
    AccountId: string;
    AccountId20: string;
    AccountId32: string;
    AccountIdOf: string;
    AccountIndex: string;
    Address: string;
    AssetId: string;
    Balance: string;
    BalanceOf: string;
    Block: string;
    BlockNumber: string;
    BlockNumberFor: string;
    BlockNumberOf: string;
    Call: string;
    CallHash: string;
    CallHashOf: string;
    ChangesTrieConfiguration: {
        digestInterval: string;
        digestLevels: string;
    };
    ChangesTrieSignal: {
        _enum: {
            NewConfiguration: string;
        };
    };
    ConsensusEngineId: string;
    CodecHash: string;
    CrateVersion: {
        major: string;
        minor: string;
        patch: string;
    };
    Digest: {
        logs: string;
    };
    DigestItem: {
        _enum: {
            Other: string;
            AuthoritiesChange: string;
            ChangesTrieRoot: string;
            SealV0: string;
            Consensus: string;
            Seal: string;
            PreRuntime: string;
            ChangesTrieSignal: string;
            RuntimeEnvironmentUpdated: string;
        };
    };
    ExtrinsicsWeight: {
        normal: string;
        operational: string;
    };
    H32: string;
    H64: string;
    H128: string;
    H160: string;
    H256: string;
    H512: string;
    H1024: string;
    H2048: string;
    Hash: string;
    Header: {
        parentHash: string;
        number: string;
        stateRoot: string;
        extrinsicsRoot: string;
        digest: string;
    };
    HeaderPartial: {
        parentHash: string;
        number: string;
    };
    IndicesLookupSource: string;
    Index: string;
    Justification: string;
    EncodedJustification: string;
    Justifications: string;
    KeyValue: string;
    KeyTypeId: string;
    LockIdentifier: string;
    LookupSource: string;
    LookupTarget: string;
    ModuleId: string;
    MultiAddress: string;
    MultiSigner: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
        };
    };
    Moment: string;
    OpaqueCall: string;
    Origin: string;
    PalletId: string;
    PalletsOrigin: string;
    PalletVersion: {
        major: string;
        minor: string;
        patch: string;
    };
    Pays: {
        _enum: string[];
    };
    Phantom: string;
    PhantomData: string;
    Releases: {
        _enum: string[];
    };
    RuntimeDbWeight: {
        read: string;
        write: string;
    };
    SignedBlock: string;
    SignedBlockWithJustification: {
        block: string;
        justification: string;
    };
    SignedBlockWithJustifications: {
        block: string;
        justifications: string;
    };
    Slot: string;
    StorageData: string;
    StorageProof: {
        trieNodes: string;
    };
    TransactionPriority: string;
    TransactionInfo: {
        chunkRoot: string;
        contentHash: string;
        dataSize: string;
        blockChunks: string;
    };
    TransactionStorageProof: {
        chunk: string;
        proof: string;
    };
    ValidatorId: string;
    ValidatorIdOf: string;
    Weight: string;
    WeightMultiplier: string;
    PreRuntime: string;
    SealV0: string;
    Seal: string;
    Consensus: string;
    Si0Field: {
        name: string;
        type: string;
        typeName: string;
        docs: string;
    };
    Si0LookupTypeId: string;
    Si0Path: string;
    Si0Type: {
        path: string;
        params: string;
        def: string;
    };
    Si0TypeDef: {
        _enum: {
            Composite: string;
            Variant: string;
            Sequence: string;
            Array: string;
            Tuple: string;
            Primitive: string;
            Compact: string;
            Phantom: string;
            BitSequence: string;
        };
    };
    Si0TypeDefArray: {
        len: string;
        type: string;
    };
    Si0TypeDefBitSequence: {
        bitStoreType: string;
        bitOrderType: string;
    };
    Si0TypeDefCompact: {
        type: string;
    };
    Si0TypeDefComposite: {
        fields: string;
    };
    Si0TypeDefPhantom: string;
    Si0TypeDefVariant: {
        variants: string;
    };
    Si0TypeDefPrimitive: {
        _enum: string[];
    };
    Si0TypeDefSequence: {
        type: string;
    };
    Si0TypeDefTuple: string;
    Si0TypeParameter: {
        name: string;
        type: string;
    };
    Si0Variant: {
        name: string;
        fields: string;
        index: string;
        discriminant: string;
        docs: string;
    };
    Si1Field: {
        name: string;
        type: string;
        typeName: string;
        docs: string;
    };
    Si1LookupTypeId: string;
    Si1Path: string;
    Si1Type: {
        path: string;
        params: string;
        def: string;
        docs: string;
    };
    Si1TypeDef: {
        _enum: {
            Composite: string;
            Variant: string;
            Sequence: string;
            Array: string;
            Tuple: string;
            Primitive: string;
            Compact: string;
            BitSequence: string;
            HistoricMetaCompat: string;
        };
    };
    Si1TypeDefArray: {
        len: string;
        type: string;
    };
    Si1TypeDefBitSequence: {
        bitStoreType: string;
        bitOrderType: string;
    };
    Si1TypeDefCompact: {
        type: string;
    };
    Si1TypeDefComposite: {
        fields: string;
    };
    Si1TypeDefPrimitive: string;
    Si1TypeDefSequence: {
        type: string;
    };
    Si1TypeDefTuple: string;
    Si1TypeParameter: {
        name: string;
        type: string;
    };
    Si1TypeDefVariant: {
        variants: string;
    };
    Si1Variant: {
        name: string;
        fields: string;
        index: string;
        docs: string;
    };
    SiField: string;
    SiLookupTypeId: string;
    SiPath: string;
    SiType: string;
    SiTypeDef: string;
    SiTypeDefArray: string;
    SiTypeDefBitSequence: string;
    SiTypeDefCompact: string;
    SiTypeDefComposite: string;
    SiTypeDefPrimitive: string;
    SiTypeDefSequence: string;
    SiTypeDefTuple: string;
    SiTypeParameter: string;
    SiTypeDefVariant: string;
    SiVariant: string;
    Period: string;
    Priority: string;
    SchedulePeriod: string;
    SchedulePriority: string;
    Scheduled: {
        maybeId: string;
        priority: string;
        call: string;
        maybePeriodic: string;
        origin: string;
    };
    ScheduledTo254: {
        maybeId: string;
        priority: string;
        call: string;
        maybePeriodic: string;
    };
    TaskAddress: string;
    BeefyKey: string;
    Keys: string;
    SessionKeys1: string;
    SessionKeys2: string;
    SessionKeys3: string;
    SessionKeys4: string;
    SessionKeys5: string;
    SessionKeys6: string;
    SessionKeys6B: string;
    SessionKeys7: string;
    SessionKeys7B: string;
    SessionKeys8: string;
    SessionKeys8B: string;
    SessionKeys9: string;
    SessionKeys9B: string;
    SessionKeys10: string;
    SessionKeys10B: string;
    FullIdentification: string;
    IdentificationTuple: string;
    MembershipProof: {
        session: string;
        trieNodes: string;
        validatorCount: string;
    };
    SessionIndex: string;
    ValidatorCount: string;
    Bid: {
        who: string;
        kind: string;
        value: string;
    };
    BidKind: {
        _enum: {
            Deposit: string;
            Vouch: string;
        };
    };
    SocietyJudgement: {
        _enum: string[];
    };
    SocietyVote: {
        _enum: string[];
    };
    StrikeCount: string;
    VouchingStatus: {
        _enum: string[];
    };
    Points: string;
    EraPoints: {
        total: string;
        individual: string;
    };
    CompactAssignments: string;
    CompactAssignmentsWith16: {
        votes1: string;
        votes2: string;
        votes3: string;
        votes4: string;
        votes5: string;
        votes6: string;
        votes7: string;
        votes8: string;
        votes9: string;
        votes10: string;
        votes11: string;
        votes12: string;
        votes13: string;
        votes14: string;
        votes15: string;
        votes16: string;
    };
    CompactAssignmentsWith24: {
        votes1: string;
        votes2: string;
        votes3: string;
        votes4: string;
        votes5: string;
        votes6: string;
        votes7: string;
        votes8: string;
        votes9: string;
        votes10: string;
        votes11: string;
        votes12: string;
        votes13: string;
        votes14: string;
        votes15: string;
        votes16: string;
        votes17: string;
        votes18: string;
        votes19: string;
        votes20: string;
        votes21: string;
        votes22: string;
        votes23: string;
        votes24: string;
    };
    CompactAssignmentsTo265: string;
    CompactAssignmentsTo257: {
        votes1: string;
        votes2: string;
        votes3: string;
        votes4: string;
        votes5: string;
        votes6: string;
        votes7: string;
        votes8: string;
        votes9: string;
        votes10: string;
        votes11: string;
        votes12: string;
        votes13: string;
        votes14: string;
        votes15: string;
        votes16: string;
    };
    CompactScore: string;
    CompactScoreCompact: string;
    ElectionCompute: {
        _enum: string[];
    };
    ElectionPhase: {
        _enum: {
            Off: null;
            Signed: null;
            Unsigned: string;
            Emergency: null;
        };
    };
    ElectionResult: {
        compute: string;
        slotStake: string;
        electedStashes: string;
        exposures: string;
    };
    ElectionScore: string;
    ElectionSize: {
        validators: string;
        nominators: string;
    };
    ElectionStatus: {
        _enum: {
            Close: string;
            Open: string;
        };
    };
    ExtendedBalance: string;
    RawSolution: string;
    RawSolutionWith16: {
        compact: string;
        score: string;
        round: string;
    };
    RawSolutionWith24: {
        compact: string;
        score: string;
        round: string;
    };
    RawSolutionTo265: string;
    ReadySolution: {
        supports: string;
        score: string;
        compute: string;
    };
    RoundSnapshot: {
        voters: string;
        targets: string;
    };
    SeatHolder: {
        who: string;
        stake: string;
        deposit: string;
    };
    SignedSubmission: {
        who: string;
        deposit: string;
        solution: string;
        reward: string;
    };
    SignedSubmissionTo276: {
        who: string;
        deposit: string;
        solution: string;
    };
    SignedSubmissionOf: string;
    SolutionOrSnapshotSize: {
        voters: string;
        targets: string;
    };
    SolutionSupport: {
        total: string;
        voters: string;
    };
    SolutionSupports: string;
    Supports: string;
    SubmissionIndicesOf: string;
    Voter: {
        votes: string;
        stake: string;
        deposit: string;
    };
    VoteWeight: string;
    ActiveEraInfo: {
        index: string;
        start: string;
    };
    EraIndex: string;
    EraRewardPoints: {
        total: string;
        individual: string;
    };
    EraRewards: {
        total: string;
        rewards: string;
    };
    Exposure: {
        total: string;
        own: string;
        others: string;
    };
    Forcing: {
        _enum: string[];
    };
    IndividualExposure: {
        who: string;
        value: string;
    };
    KeyType: string;
    MomentOf: string;
    Nominations: {
        targets: string;
        submittedIn: string;
        suppressed: string;
    };
    NominatorIndex: string;
    NominatorIndexCompact: string;
    OffchainAccuracy: string;
    OffchainAccuracyCompact: string;
    PhragmenScore: string;
    RewardDestination: {
        _enum: {
            Staked: string;
            Stash: string;
            Controller: string;
            Account: string;
            None: string;
        };
    };
    RewardPoint: string;
    SlashJournalEntry: {
        who: string;
        amount: string;
        ownSlash: string;
    };
    SlashingSpansTo204: {
        spanIndex: string;
        lastStart: string;
        prior: string;
    };
    SlashingSpans: {
        spanIndex: string;
        lastStart: string;
        lastNonzeroSlash: string;
        prior: string;
    };
    SpanIndex: string;
    SpanRecord: {
        slashed: string;
        paidOut: string;
    };
    StakingLedgerTo223: {
        stash: string;
        total: string;
        active: string;
        unlocking: string;
    };
    StakingLedgerTo240: {
        stash: string;
        total: string;
        active: string;
        unlocking: string;
        lastReward: string;
    };
    StakingLedger: {
        stash: string;
        total: string;
        active: string;
        unlocking: string;
        claimedRewards: string;
    };
    UnappliedSlashOther: string;
    UnappliedSlash: {
        validator: string;
        own: string;
        others: string;
        reporters: string;
        payout: string;
    };
    UnlockChunk: {
        value: string;
        era: string;
    };
    ValidatorIndex: string;
    ValidatorIndexCompact: string;
    ValidatorPrefs: string;
    ValidatorPrefsWithCommission: {
        commission: string;
    };
    ValidatorPrefsWithBlocked: {
        commission: string;
        blocked: string;
    };
    ValidatorPrefsTo196: {
        validatorPayment: string;
    };
    ValidatorPrefsTo145: {
        unstakeThreshold: string;
        validatorPayment: string;
    };
    ApiId: string;
    BlockTrace: {
        blockHash: string;
        parentHash: string;
        tracingTargets: string;
        storageKeys: string;
        spans: string;
        events: string;
    };
    BlockTraceEvent: {
        target: string;
        data: string;
        parentId: string;
    };
    BlockTraceEventData: {
        stringValues: string;
    };
    BlockTraceSpan: {
        id: string;
        parentId: string;
        name: string;
        target: string;
        wasm: string;
    };
    KeyValueOption: string;
    ReadProof: {
        at: string;
        proof: string;
    };
    RuntimeVersionApi: string;
    RuntimeVersion: {
        specName: string;
        implName: string;
        authoringVersion: string;
        specVersion: string;
        implVersion: string;
        apis: string;
        transactionVersion: string;
    };
    RuntimeVersionPartial: {
        specName: string;
        specVersion: string;
    };
    SpecVersion: string;
    StorageChangeSet: {
        block: string;
        changes: string;
    };
    TraceBlockResponse: {
        _enum: {
            TraceError: string;
            BlockTrace: string;
        };
    };
    TraceError: {
        error: string;
    };
    WeightToFeeCoefficient: {
        coeffInteger: string;
        coeffFrac: string;
        negative: string;
        degree: string;
    };
    AccountInfo: string;
    AccountInfoWithRefCountU8: {
        nonce: string;
        refcount: string;
        data: string;
    };
    AccountInfoWithRefCount: {
        nonce: string;
        refcount: string;
        data: string;
    };
    AccountInfoWithDualRefCount: {
        nonce: string;
        consumers: string;
        providers: string;
        data: string;
    };
    AccountInfoWithProviders: string;
    AccountInfoWithTripleRefCount: {
        nonce: string;
        consumers: string;
        providers: string;
        sufficients: string;
        data: string;
    };
    ApplyExtrinsicResult: string;
    ArithmeticError: {
        _enum: string[];
    };
    BlockLength: {
        max: string;
    };
    BlockWeights: {
        baseBlock: string;
        maxBlock: string;
        perClass: string;
    };
    ChainProperties: string;
    ChainType: {
        _enum: {
            Development: string;
            Local: string;
            Live: string;
            Custom: string;
        };
    };
    ConsumedWeight: string;
    DigestOf: string;
    DispatchClass: {
        _enum: string[];
    };
    DispatchError: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            Token: string;
            Arithmetic: string;
        };
    };
    DispatchErrorModule: {
        index: string;
        error: string;
    };
    DispatchErrorPre6: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            TooManyConsumers: string;
            Token: string;
            Arithmetic: string;
            Transactional: string;
        };
    };
    DispatchErrorPre6First: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            Token: string;
            Arithmetic: string;
            Transactional: string;
        };
    };
    TransactionalError: {
        _enum: string[];
    };
    DispatchErrorTo198: {
        module: string;
        error: string;
    };
    DispatchInfo: {
        weight: string;
        class: string;
        paysFee: string;
    };
    DispatchInfoTo190: {
        weight: string;
        class: string;
    };
    DispatchInfoTo244: {
        weight: string;
        class: string;
        paysFee: string;
    };
    DispatchOutcome: string;
    DispatchResult: string;
    DispatchResultOf: string;
    DispatchResultTo198: string;
    Event: string;
    EventId: string;
    EventIndex: string;
    EventRecord: {
        phase: string;
        event: string;
        topics: string;
    };
    Health: {
        peers: string;
        isSyncing: string;
        shouldHavePeers: string;
    };
    InvalidTransaction: {
        _enum: {
            Call: string;
            Payment: string;
            Future: string;
            Stale: string;
            BadProof: string;
            AncientBirthBlock: string;
            ExhaustsResources: string;
            Custom: string;
            BadMandatory: string;
            MandatoryDispatch: string;
        };
    };
    Key: string;
    LastRuntimeUpgradeInfo: {
        specVersion: string;
        specName: string;
    };
    NetworkState: {
        peerId: string;
        listenedAddresses: string;
        externalAddresses: string;
        connectedPeers: string;
        notConnectedPeers: string;
        averageDownloadPerSec: string;
        averageUploadPerSec: string;
        peerset: string;
    };
    NetworkStatePeerset: {
        messageQueue: string;
        nodes: string;
    };
    NetworkStatePeersetInfo: {
        connected: string;
        reputation: string;
    };
    NodeRole: {
        _enum: {
            Full: string;
            LightClient: string;
            Authority: string;
            UnknownRole: string;
        };
    };
    NotConnectedPeer: {
        knownAddresses: string;
        latestPingTime: string;
        versionString: string;
    };
    Peer: {
        enabled: string;
        endpoint: string;
        knownAddresses: string;
        latestPingTime: string;
        open: string;
        versionString: string;
    };
    PeerEndpoint: {
        listening: string;
    };
    PeerEndpointAddr: {
        localAddr: string;
        sendBackAddr: string;
    };
    PeerPing: {
        nanos: string;
        secs: string;
    };
    PeerInfo: {
        peerId: string;
        roles: string;
        protocolVersion: string;
        bestHash: string;
        bestNumber: string;
    };
    PerDispatchClassU32: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    PerDispatchClassWeight: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    PerDispatchClassWeightsPerClass: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    Phase: {
        _enum: {
            ApplyExtrinsic: string;
            Finalization: string;
            Initialization: string;
        };
    };
    RawOrigin: {
        _enum: {
            Root: string;
            Signed: string;
            None: string;
        };
    };
    RefCount: string;
    RefCountTo259: string;
    SyncState: {
        startingBlock: string;
        currentBlock: string;
        highestBlock: string;
    };
    SystemOrigin: string;
    TokenError: {
        _enum: string[];
    };
    TransactionValidityError: {
        _enum: {
            Invalid: string;
            Unknown: string;
        };
    };
    UnknownTransaction: {
        _enum: {
            CannotLookup: string;
            NoUnsignedValidator: string;
            Custom: string;
        };
    };
    WeightPerClass: {
        baseExtrinsic: string;
        maxExtrinsic: string;
        maxTotal: string;
        reserved: string;
    };
    Bounty: {
        proposer: string;
        value: string;
        fee: string;
        curatorDeposit: string;
        bond: string;
        status: string;
    };
    BountyIndex: string;
    BountyStatus: {
        _enum: {
            Proposed: string;
            Approved: string;
            Funded: string;
            CuratorProposed: string;
            Active: string;
            PendingPayout: string;
        };
    };
    BountyStatusActive: {
        curator: string;
        updateDue: string;
    };
    BountyStatusCuratorProposed: {
        curator: string;
    };
    BountyStatusPendingPayout: {
        curator: string;
        beneficiary: string;
        unlockAt: string;
    };
    OpenTip: {
        reason: string;
        who: string;
        finder: string;
        deposit: string;
        closes: string;
        tips: string;
        findersFee: string;
    };
    OpenTipTo225: {
        reason: string;
        who: string;
        finder: string;
        closes: string;
        tips: string;
    };
    OpenTipFinderTo225: string;
    OpenTipTip: string;
    TreasuryProposal: {
        proposer: string;
        value: string;
        beneficiary: string;
        bond: string;
    };
    Multiplier: string;
    ClassId: string;
    InstanceId: string;
    DepositBalance: string;
    DepositBalanceOf: string;
    ClassDetails: {
        owner: string;
        issuer: string;
        admin: string;
        freezer: string;
        totalDeposit: string;
        freeHolding: string;
        instances: string;
        instanceMetadatas: string;
        attributes: string;
        isFrozen: string;
    };
    DestroyWitness: {
        instances: string;
        instanceMetadatas: string;
        attributes: string;
    };
    InstanceDetails: {
        owner: string;
        approved: string;
        isFrozen: string;
        deposit: string;
    };
    ClassMetadata: {
        deposit: string;
        data: string;
        isFrozen: string;
    };
    InstanceMetadata: {
        deposit: string;
        data: string;
        isFrozen: string;
    };
    Multisig: {
        when: string;
        deposit: string;
        depositor: string;
        approvals: string;
    };
    Timepoint: {
        height: string;
        index: string;
    };
    VestingInfo: {
        locked: string;
        perBlock: string;
        startingBlock: string;
    };
    BodyId: {
        _enum: {
            Unit: string;
            Named: string;
            Index: string;
            Executive: string;
            Technical: string;
            Legislative: string;
            Judicial: string;
        };
    };
    BodyPart: {
        _enum: {
            Voice: string;
            Members: string;
            Fraction: {
                nom: string;
                denom: string;
            };
            AtLeastProportion: {
                nom: string;
                denom: string;
            };
            MoreThanProportion: {
                nom: string;
                denom: string;
            };
        };
    };
    InteriorMultiLocation: string;
    NetworkId: {
        _enum: {
            Any: string;
            Named: string;
            Polkadot: string;
            Kusama: string;
        };
    };
    XcmOrigin: {
        _enum: {
            Xcm: string;
        };
    };
    XcmpMessageFormat: {
        _enum: string[];
    };
    XcmAssetId: {
        _enum: {
            Concrete: string;
            Abstract: string;
        };
    };
    InboundStatus: {
        _enum: string[];
    };
    OutboundStatus: {
        _enum: string[];
    };
    MultiAssets: string;
    FungibilityV0: string;
    WildFungibilityV0: string;
    AssetInstanceV0: {
        _enum: {
            Undefined: string;
            Index8: string;
            Index16: string;
            Index32: string;
            Index64: string;
            Index128: string;
            Array4: string;
            Array8: string;
            Array16: string;
            Array32: string;
            Blob: string;
        };
    };
    JunctionV0: {
        _enum: {
            Parent: string;
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: string;
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
        };
    };
    MultiAssetV0: {
        _enum: {
            None: string;
            All: string;
            AllFungible: string;
            AllNonFungible: string;
            AllAbstractFungible: string;
            AllAbstractNonFungible: string;
            AllConcreteFungible: string;
            AllConcreteNonFungible: string;
            AbstractFungible: {
                id: string;
                instance: string;
            };
            AbstractNonFungible: {
                class: string;
                instance: string;
            };
            ConcreteFungible: {
                id: string;
                amount: string;
            };
            ConcreteNonFungible: {
                class: string;
                instance: string;
            };
        };
    };
    MultiLocationV0: {
        _enum: {
            Here: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    OriginKindV0: {
        _enum: string[];
    };
    ResponseV0: {
        _enum: {
            Assets: string;
        };
    };
    XcmV0: {
        _enum: {
            WithdrawAsset: {
                assets: string;
                effects: string;
            };
            ReserveAssetDeposit: {
                assets: string;
                effects: string;
            };
            ReceiveTeleportedAsset: {
                assets: string;
                effects: string;
            };
            QueryResponse: {
                queryId: string;
                response: string;
            };
            TransferAsset: {
                assets: string;
                dest: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                effects: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            RelayedFrom: {
                who: string;
                message: string;
            };
        };
    };
    XcmErrorV0: {
        _enum: {
            Undefined: string;
            Overflow: string;
            Unimplemented: string;
            UnhandledXcmVersion: string;
            UnhandledXcmMessage: string;
            UnhandledEffect: string;
            EscalationOfPrivilege: string;
            UntrustedReserveLocation: string;
            UntrustedTeleportLocation: string;
            DestinationBufferOverflow: string;
            SendFailed: string;
            CannotReachDestination: string;
            MultiLocationFull: string;
            FailedToDecode: string;
            BadOrigin: string;
            ExceedsMaxMessageSize: string;
            FailedToTransactAsset: string;
            WeightLimitReached: string;
            Wildcard: string;
            TooMuchWeightRequired: string;
            NotHoldingFees: string;
            WeightNotComputable: string;
            Barrier: string;
            NotWithdrawable: string;
            LocationCannotHold: string;
            TooExpensive: string;
            AssetNotFound: string;
            RecursionLimitReached: string;
        };
    };
    XcmOrderV0: {
        _enum: {
            Null: string;
            DepositAsset: {
                assets: string;
                dest: string;
            };
            DepositReserveAsset: {
                assets: string;
                dest: string;
                effects: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                effects: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                effects: string;
            };
            QueryHolding: {
                queryId: string;
                dest: string;
                assets: string;
            };
            BuyExecution: {
                fees: string;
                weight: string;
                debt: string;
                haltOnError: string;
                xcm: string;
            };
        };
    };
    AssetInstanceV1: {
        _enum: {
            Undefined: string;
            Index: string;
            Array4: string;
            Array8: string;
            Array16: string;
            Array32: string;
            Blob: string;
        };
    };
    FungibilityV1: {
        _enum: {
            Fungible: string;
            NonFungible: string;
        };
    };
    JunctionV1: {
        _enum: {
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: string;
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
        };
    };
    JunctionsV1: {
        _enum: {
            Here: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    MultiAssetsV1: string;
    MultiAssetV1: {
        id: string;
        fungibility: string;
    };
    MultiAssetFilterV1: {
        _enum: {
            Definite: string;
            Wild: string;
        };
    };
    MultiLocationV1: {
        parents: string;
        interior: string;
    };
    OriginKindV1: string;
    ResponseV1: {
        _enum: {
            Assets: string;
        };
    };
    WildFungibilityV1: {
        _enum: string[];
    };
    WildMultiAssetV1: {
        _enum: {
            All: string;
            AllOf: {
                id: string;
                fungibility: string;
            };
        };
    };
    XcmV1: {
        _enum: {
            WithdrawAsset: {
                assets: string;
                effects: string;
            };
            ReserveAssetDeposit: {
                assets: string;
                effects: string;
            };
            ReceiveTeleportedAsset: {
                assets: string;
                effects: string;
            };
            QueryResponse: {
                queryId: string;
                response: string;
            };
            TransferAsset: {
                assets: string;
                dest: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                effects: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            RelayedFrom: {
                who: string;
                message: string;
            };
        };
    };
    XcmErrorV1: {
        _enum: {
            Undefined: string;
            Overflow: string;
            Unimplemented: string;
            UnhandledXcmVersion: string;
            UnhandledXcmMessage: string;
            UnhandledEffect: string;
            EscalationOfPrivilege: string;
            UntrustedReserveLocation: string;
            UntrustedTeleportLocation: string;
            DestinationBufferOverflow: string;
            SendFailed: string;
            CannotReachDestination: string;
            MultiLocationFull: string;
            FailedToDecode: string;
            BadOrigin: string;
            ExceedsMaxMessageSize: string;
            FailedToTransactAsset: string;
            WeightLimitReached: string;
            Wildcard: string;
            TooMuchWeightRequired: string;
            NotHoldingFees: string;
            WeightNotComputable: string;
            Barrier: string;
            NotWithdrawable: string;
            LocationCannotHold: string;
            TooExpensive: string;
            AssetNotFound: string;
            DestinationUnsupported: string;
            RecursionLimitReached: string;
        };
    };
    XcmOrderV1: {
        _enum: {
            Noop: string;
            DepositAsset: {
                assets: string;
                maxAssets: string;
                beneficiary: string;
            };
            DepositReserveAsset: {
                assets: string;
                maxAssets: string;
                dest: string;
                effects: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                effects: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                effects: string;
            };
            QueryHolding: {
                queryId: string;
                dest: string;
                assets: string;
            };
            BuyExecution: {
                fees: string;
                weight: string;
                debt: string;
                haltOnError: string;
                instructions: string;
            };
        };
    };
    AssetInstanceV2: string;
    FungibilityV2: string;
    JunctionV2: string;
    JunctionsV2: string;
    MultiAssetsV2: string;
    MultiAssetV2: string;
    MultiAssetFilterV2: string;
    MultiLocationV2: string;
    OriginKindV2: string;
    WildFungibilityV2: string;
    ResponseV2: {
        _enum: {
            Null: string;
            Assets: string;
            ExecutionResult: string;
        };
    };
    ResponseV2Error: string;
    ResponseV2Result: string;
    WeightLimitV2: {
        _enum: {
            Unlimited: string;
            Limited: string;
        };
    };
    InstructionV2: {
        _enum: {
            WithdrawAsset: string;
            ReserveAssetDeposited: string;
            ReceiveTeleportedAsset: string;
            QueryResponse: {
                queryId: string;
                response: string;
                maxWeight: string;
            };
            TransferAsset: {
                assets: string;
                beneficiary: string;
            };
            TransferReserveAsset: {
                assets: string;
                dest: string;
                xcm: string;
            };
            Transact: {
                originType: string;
                requireWeightAtMost: string;
                call: string;
            };
            HrmpNewChannelOpenRequest: {
                sender: string;
                maxMessageSize: string;
                maxCapacity: string;
            };
            HrmpChannelAccepted: {
                recipient: string;
            };
            HrmpChannelClosing: {
                initiator: string;
                sender: string;
                recipient: string;
            };
            ClearOrigin: string;
            DescendOrigin: string;
            ReportError: {
                queryId: string;
                dest: string;
                maxResponseWeight: string;
            };
            DepositAsset: {
                assets: string;
                maxAssets: string;
                beneficiary: string;
            };
            DepositReserveAsset: {
                assets: string;
                maxAssets: string;
                dest: string;
                xcm: string;
            };
            ExchangeAsset: {
                give: string;
                receive: string;
            };
            InitiateReserveWithdraw: {
                assets: string;
                reserve: string;
                xcm: string;
            };
            InitiateTeleport: {
                assets: string;
                dest: string;
                xcm: string;
            };
            QueryHolding: {
                query_id: string;
                dest: string;
                assets: string;
                maxResponse_Weight: string;
            };
            BuyExecution: {
                fees: string;
                weightLimit: string;
            };
            RefundSurplus: string;
            SetErrorHandler: string;
            SetAppendix: string;
            ClearError: string;
            ClaimAsset: {
                assets: string;
                ticket: string;
            };
            Trap: string;
        };
    };
    WildMultiAssetV2: string;
    XcmV2: string;
    XcmErrorV2: {
        _enum: {
            Undefined: string;
            Overflow: string;
            Unimplemented: string;
            UnhandledXcmVersion: string;
            UnhandledXcmMessage: string;
            UnhandledEffect: string;
            EscalationOfPrivilege: string;
            UntrustedReserveLocation: string;
            UntrustedTeleportLocation: string;
            DestinationBufferOverflow: string;
            MultiLocationFull: string;
            MultiLocationNotInvertible: string;
            FailedToDecode: string;
            BadOrigin: string;
            ExceedsMaxMessageSize: string;
            FailedToTransactAsset: string;
            WeightLimitReached: string;
            Wildcard: string;
            TooMuchWeightRequired: string;
            NotHoldingFees: string;
            WeightNotComputable: string;
            Barrier: string;
            NotWithdrawable: string;
            LocationCannotHold: string;
            TooExpensive: string;
            AssetNotFound: string;
            DestinationUnsupported: string;
            RecursionLimitReached: string;
            Transport: string;
            Unroutable: string;
            UnknownWeightRequired: string;
            Trap: string;
            UnknownClaim: string;
            InvalidLocation: string;
        };
    };
    XcmOrderV2: string;
    AssetInstance: string;
    Fungibility: string;
    Junction: string;
    Junctions: string;
    MultiAsset: string;
    MultiAssetFilter: string;
    MultiLocation: string;
    Response: string;
    WildFungibility: string;
    WildMultiAsset: string;
    Xcm: string;
    XcmError: string;
    XcmOrder: string;
    DoubleEncodedCall: {
        encoded: string;
    };
    XcmOriginKind: {
        _enum: string[];
    };
    Outcome: {
        _enum: {
            Complete: string;
            Incomplete: string;
            Error: string;
        };
    };
    QueryId: string;
    QueryStatus: {
        _enum: {
            Pending: {
                responder: string;
                maybeNotify: string;
                timeout: string;
            };
            Ready: {
                response: string;
                at: string;
            };
        };
    };
    QueueConfigData: {
        suspendThreshold: string;
        dropThreshold: string;
        resumeThreshold: string;
        thresholdWeight: string;
        weightRestrictDecay: string;
    };
    VersionMigrationStage: {
        _enum: {
            MigrateSupportedVersion: string;
            MigrateVersionNotifiers: string;
            NotifyCurrentTargets: string;
            MigrateAndNotifyOldTargets: string;
        };
    };
    VersionedMultiAsset: {
        _enum: {
            V0: string;
            V1: string;
            V2: string;
        };
    };
    VersionedMultiAssets: {
        _enum: {
            V0: string;
            V1: string;
            V2: string;
        };
    };
    VersionedMultiLocation: {
        _enum: {
            V0: string;
            V1: string;
            V2: string;
        };
    };
    VersionedResponse: {
        V0: string;
        V1: string;
        V2: string;
    };
    VersionedXcm: {
        _enum: {
            V0: string;
            V1: string;
            V2: string;
        };
    };
    XcmVersion: string;
};
//# sourceMappingURL=types.d.ts.map