"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.eliminatePolkadotjsTypesBundle = exports.convertPolkadotjsTypesBundle = void 0;
const assert_1 = __importDefault(require("assert"));
function convertPolkadotjsTypesBundle(typesBundle) {
    (0, assert_1.default)(typesBundle.chain == null, 'Incompatible polkadotjs bundle: per-chain types are not supported');
    let res = {};
    for (let specName in typesBundle.spec) {
        let spec = typesBundle.spec[specName];
        let versions = spec.types.map(v => {
            for (let typeName in v.types) {
                let type = v.types[typeName];
                (0, assert_1.default)(type._fallback == null, 'Incompatible polkadotjs types bundle: fallback types are not supported');
                (0, assert_1.default)(type._alias == null, 'Incompatible polkadotjs types bundle: field aliases are not supported');
            }
            return {
                minmax: [
                    v.minmax[0] || null,
                    v.minmax[1] || null
                ],
                types: v.types
            };
        });
        let signedExtensions = {};
        for (let extensionName in spec.signedExtensions) {
            let extension = spec.signedExtensions[extensionName];
            let fields = Object.values(extension.extrinsic);
            (0, assert_1.default)(fields.length < 2, 'Incompatible polkadotjs types bundle: multi-field signed extensions are not supported');
            signedExtensions[extensionName] = fields[0] || 'Null';
        }
        res[specName] = {
            types: {},
            typesAlias: spec.alias,
            signedExtensions,
            versions
        };
    }
    return res;
}
exports.convertPolkadotjsTypesBundle = convertPolkadotjsTypesBundle;
function eliminatePolkadotjsTypesBundle(bundle) {
    let b = bundle;
    if (b.types)
        return bundle;
    if (b.spec || b.chain)
        return convertPolkadotjsTypesBundle(bundle);
    return bundle;
}
exports.eliminatePolkadotjsTypesBundle = eliminatePolkadotjsTypesBundle;
//# sourceMappingURL=typesBundle-polkadotjs.js.map