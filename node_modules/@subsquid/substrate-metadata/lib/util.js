"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPreV14 = exports.sha256 = exports.isUnitType = exports.normalizeMetadataTypes = void 0;
const types_codec_1 = require("@subsquid/scale-codec/lib/types-codec");
const util_internal_1 = require("@subsquid/util-internal");
const util_naming_1 = require("@subsquid/util-naming");
const crypto_1 = __importDefault(require("crypto"));
const types_1 = require("./types");
function normalizeMetadataTypes(types) {
    types = fixWrapperKeepOpaqueTypes(types);
    types = fixU256Structs(types);
    types = introduceOptionType(types);
    types = eliminateOptionsChain(types);
    types = removeUnitFieldsFromStructs(types);
    types = replaceUnitOptionWithBoolean(types);
    types = normalizeFieldNames(types);
    return types;
}
exports.normalizeMetadataTypes = normalizeMetadataTypes;
function fixWrapperKeepOpaqueTypes(types) {
    let u8 = types.length;
    let replaced = false;
    types = types.map(type => {
        if (!type.path?.length)
            return type;
        if ((0, util_internal_1.last)(type.path) != 'WrapperKeepOpaque')
            return type;
        if (type.kind != types_1.TypeKind.Composite)
            return type;
        if (type.fields.length != 2)
            return type;
        if (types[type.fields[0].type].kind != types_1.TypeKind.Compact)
            return type;
        replaced = true;
        return {
            kind: types_1.TypeKind.Sequence,
            type: u8
        };
    });
    if (replaced) {
        types.push({
            kind: types_1.TypeKind.Primitive,
            primitive: 'U8'
        });
    }
    return types;
}
function fixU256Structs(types) {
    return types.map(type => {
        let field;
        let element;
        let isU256 = type.path && (0, util_internal_1.maybeLast)(type.path) == 'U256'
            && type.kind == types_1.TypeKind.Composite
            && type.fields.length == 1
            && (field = types[type.fields[0].type])
            && field.kind == types_1.TypeKind.Array
            && field.len == 4
            && (element = types[field.type])
            && element.kind == types_1.TypeKind.Primitive
            && element.primitive == 'U64';
        if (isU256)
            return {
                kind: types_1.TypeKind.Primitive,
                primitive: 'U256'
            };
        return type;
    });
}
function introduceOptionType(types) {
    return types.map(type => {
        if (isOptionType(type)) {
            return {
                kind: types_1.TypeKind.Option,
                type: type.variants[1].fields[0].type,
                docs: type.docs,
                path: type.path
            };
        }
        else {
            return type;
        }
    });
}
function isOptionType(type) {
    if (type.kind !== types_1.TypeKind.Variant)
        return false;
    if (type.variants.length != 2)
        return false;
    let v0 = type.variants[0];
    let v1 = type.variants[1];
    return v0.name == 'None' &&
        v0.fields.length == 0 &&
        v0.index == 0 &&
        v1.name == 'Some' &&
        v1.index == 1 &&
        v1.fields.length == 1 &&
        v1.fields[0].name == null;
}
function eliminateOptionsChain(types) {
    return types.map(type => {
        if (type.kind != types_1.TypeKind.Option)
            return type;
        let param = type.type;
        if (types[param].kind != types_1.TypeKind.Option)
            return type;
        return {
            kind: types_1.TypeKind.Variant,
            variants: [
                {
                    name: 'None',
                    index: 0,
                    fields: []
                },
                {
                    name: 'Some',
                    index: 1,
                    fields: [{ type: param }]
                }
            ]
        };
    });
}
function removeUnitFieldsFromStructs(types) {
    let changed = true;
    while (changed) {
        changed = false;
        types = types.map(type => {
            switch (type.kind) {
                case types_1.TypeKind.Composite: {
                    let fields = type.fields.filter(f => {
                        let fieldType = (0, types_codec_1.getUnwrappedType)(types, f.type);
                        return !isUnitType(fieldType);
                    });
                    if (fields.length == type.fields.length)
                        return type;
                    changed = true;
                    return {
                        ...type,
                        fields
                    };
                }
                case types_1.TypeKind.Variant: {
                    let variants = type.variants.map(v => {
                        let fields = v.fields.filter(f => {
                            let fieldType = (0, types_codec_1.getUnwrappedType)(types, f.type);
                            return !isUnitType(fieldType);
                        });
                        if (fields.length == v.fields.length)
                            return v;
                        if (v.fields[0]?.name == null && fields.length > 0)
                            return v;
                        changed = true;
                        return {
                            ...v,
                            fields
                        };
                    });
                    return {
                        ...type,
                        variants
                    };
                }
                default:
                    return type;
            }
        });
    }
    return types;
}
function isUnitType(type) {
    return type.kind == types_1.TypeKind.Tuple && type.tuple.length == 0;
}
exports.isUnitType = isUnitType;
function replaceUnitOptionWithBoolean(types) {
    return types.map(type => {
        if (type.kind == types_1.TypeKind.Option && isUnitType((0, types_codec_1.getUnwrappedType)(types, type.type))) {
            return {
                kind: types_1.TypeKind.Primitive,
                primitive: 'Bool',
                path: type.path,
                docs: type.docs
            };
        }
        else {
            return type;
        }
    });
}
function normalizeFieldNames(types) {
    return types.map(type => {
        switch (type.kind) {
            case types_1.TypeKind.Composite:
                return {
                    ...type,
                    fields: convertToCamelCase(type.fields)
                };
            case types_1.TypeKind.Variant:
                return {
                    ...type,
                    variants: type.variants.map(v => {
                        return {
                            ...v,
                            fields: convertToCamelCase(v.fields)
                        };
                    })
                };
            default:
                return type;
        }
    });
}
function convertToCamelCase(fields) {
    return fields.map(f => {
        if (f.name) {
            let name = f.name;
            if (name.startsWith('r#')) {
                name = name.slice(2);
            }
            name = (0, util_naming_1.toCamelCase)(name);
            return { ...f, name };
        }
        else {
            return f;
        }
    });
}
function sha256(obj) {
    let content = typeof obj == 'string' ? obj : JSON.stringify(obj);
    let hash = crypto_1.default.createHash('sha256');
    hash.update(content);
    return hash.digest().toString('hex');
}
exports.sha256 = sha256;
function isPreV14(metadata) {
    switch (metadata.__kind) {
        case 'V0':
        case 'V1':
        case 'V2':
        case 'V3':
        case 'V4':
        case 'V5':
        case 'V6':
        case 'V7':
        case 'V8':
        case 'V9':
        case 'V10':
        case 'V11':
        case 'V12':
        case 'V13':
            return true;
        default:
            return false;
    }
}
exports.isPreV14 = isPreV14;
//# sourceMappingURL=util.js.map