{
  "name": "@subsquid/ss58",
  "version": "0.1.3",
  "description": "SS58 registry and codec",
  "license": "GPL-3.0-or-later",
  "repository": "git@github.com:subsquid/squid.git",
  "publishConfig": {
    "access": "public"
  },
  "main": "lib/index.js",
  "files": [
    "lib",
    "src"
  ],
  "dependencies": {
    "@subsquid/ss58-codec": "^0.1.1"
  },
  "devDependencies": {
    "@types/node": "^16.11.41",
    "typescript": "~4.7.4"
  },
  "scripts": {
    "build": "rm -rf lib && tsc",
    "test": "node lib/test.js"
  },
  "readme": "# @subsquid/ss58\n\nSS58 [registry](https://github.com/paritytech/ss58-registry) and [codec](https://github.com/subsquid/squid/tree/master/ss58-codec).\n\n## Usage\n\n```typescript\nimport * as ss58 from \"@subsquid/ss58\"\n\nss58.registry.get('kusama') // => {prefix: 2, network: 'kusama', ...}\nss58.registry.get(2) // => {prefix: 2, network: 'kusama', ...}\n\nss58.codec('kusama').encode(rawAddressBytes) // => EXtQYFeY2...\nss58.codec(2).encode(rawAddressBytes) // Same as above\n\nss58.codec('kusama').decode('EXtQYFeY2...') // => rawAddressBytes\nss58.codec('kusama').decode(polkadotAddress) // => throws error\n\nlet address = ss58.decode('EXtQYFeY2ivDsfazZvGC9aG87DxnhWH2f9kjUUq2pXTZKF5')\naddress.prefix // => 2 (address type)\naddress.bytes  // => Uint8Array of raw address bytes\nss58.encode(address) // => EXtQYFeY2ivDsfazZvGC9aG87DxnhWH2f9kjUUq2pXTZKF5\n```\n"
}