import { expect } from 'chai'
import { ConfigVariable, config } from '../../utils/config'
import { Account, Notification, NotificationEmailDelivery } from '../../model'
import { globalEm } from '../../utils/globalEm'
import { clearDb, populateDbWithSeedData } from './testUtils'
import { EntityManager } from 'typeorm'
import { idStringFromNumber } from '../../utils/misc'
import { RUNTIME_NOTIFICATION_ID_TAG } from '../../utils/notification/helpers'

describe('Database seed data tests', () => {
  let em: EntityManager

  describe('seed data database population', () => {
    // populate the database with seed data
    let account: Account
    before(async () => {
      em = await globalEm
      await populateDbWithSeedData()
    })

    // check that seed date exists
    it('check that seed data exists', async () => {
      account = await em
        .getRepository(Account)
        .findOneOrFail({ where: { id: idStringFromNumber(1) }, relations: { membership: true } })
      expect(account).to.not.be.null
      expect(account?.membership.id).to.equal('1')
      expect(account?.membership.handle).to.equal('handle-1')
    })
    it('check that notification delivery entity is correct', async () => {
      const result = await em.getRepository(NotificationEmailDelivery).findOne({
        where: { notification: { id: RUNTIME_NOTIFICATION_ID_TAG + '-1' } },
        relations: { notification: { account: true } },
      })

      expect(result).to.not.be.null
      expect(result?.notification.account).to.not.be.null
    })
    it('check that max attempt config variable is set', async () => {
      const result = await config.get(ConfigVariable.EmailNotificationDeliveryMaxAttempts, em)

      expect(result).to.not.be.undefined
    })
  })

  describe('database cleanup', () => {
    before(async () => {
      await clearDb()
    })
    it('should clear the database', async () => {
      const accounts = await em.getRepository(Account).find({})
      const notifications = await em.getRepository(Notification).find({})
      const deliveries = await em.getRepository(NotificationEmailDelivery).find({})

      expect(accounts).to.be.empty
      expect(notifications).to.be.empty
      expect(deliveries).to.be.empty
    })
  })
})
