export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  BigInt: string
  Bytes: any
  DateTime: any
  JSONObject: any
}

export type Admin = {
  isKilled: Scalars['Boolean']
}

export type AmendConstitutionProposalDetails = {
  text: Scalars['String']
}

export type AnnouncingPeriodStartedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type AnnouncingPeriodStartedEventConnection = {
  edges: Array<AnnouncingPeriodStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AnnouncingPeriodStartedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type AnnouncingPeriodStartedEventEdge = {
  cursor: Scalars['String']
  node: AnnouncingPeriodStartedEvent
}

export enum AnnouncingPeriodStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type AnnouncingPeriodStartedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type AnnouncingPeriodStartedEventWhereInput = {
  AND?: Maybe<Array<AnnouncingPeriodStartedEventWhereInput>>
  NOT?: Maybe<Array<AnnouncingPeriodStartedEventWhereInput>>
  OR?: Maybe<Array<AnnouncingPeriodStartedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type AnnouncingPeriodStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type App = BaseGraphQlObject & {
  appChannels: Array<Channel>
  appVideos: Array<Video>
  authKey?: Maybe<Scalars['String']>
  bigIcon?: Maybe<Scalars['String']>
  category?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  mediumIcon?: Maybe<Scalars['String']>
  name: Scalars['String']
  oneLiner?: Maybe<Scalars['String']>
  ownerMember: Membership
  ownerMemberId: Scalars['String']
  platforms?: Maybe<Array<Scalars['String']>>
  smallIcon?: Maybe<Scalars['String']>
  termsOfService?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  useUri?: Maybe<Scalars['String']>
  version: Scalars['Int']
  websiteUrl?: Maybe<Scalars['String']>
}

export enum AppActionActionType {
  CreateChannel = 'CREATE_CHANNEL',
  CreateVideo = 'CREATE_VIDEO',
}

export type AppConnection = {
  edges: Array<AppEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AppCreateInput = {
  authKey?: Maybe<Scalars['String']>
  bigIcon?: Maybe<Scalars['String']>
  category?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  mediumIcon?: Maybe<Scalars['String']>
  name: Scalars['String']
  oneLiner?: Maybe<Scalars['String']>
  ownerMember: Scalars['ID']
  platforms?: Maybe<Array<Scalars['String']>>
  smallIcon?: Maybe<Scalars['String']>
  termsOfService?: Maybe<Scalars['String']>
  useUri?: Maybe<Scalars['String']>
  websiteUrl?: Maybe<Scalars['String']>
}

export type AppEdge = {
  cursor: Scalars['String']
  node: App
}

export enum AppOrderByInput {
  AuthKeyAsc = 'authKey_ASC',
  AuthKeyDesc = 'authKey_DESC',
  BigIconAsc = 'bigIcon_ASC',
  BigIconDesc = 'bigIcon_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  MediumIconAsc = 'mediumIcon_ASC',
  MediumIconDesc = 'mediumIcon_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  OneLinerAsc = 'oneLiner_ASC',
  OneLinerDesc = 'oneLiner_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  SmallIconAsc = 'smallIcon_ASC',
  SmallIconDesc = 'smallIcon_DESC',
  TermsOfServiceAsc = 'termsOfService_ASC',
  TermsOfServiceDesc = 'termsOfService_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UseUriAsc = 'useUri_ASC',
  UseUriDesc = 'useUri_DESC',
  WebsiteUrlAsc = 'websiteUrl_ASC',
  WebsiteUrlDesc = 'websiteUrl_DESC',
}

export type AppUpdateInput = {
  authKey?: Maybe<Scalars['String']>
  bigIcon?: Maybe<Scalars['String']>
  category?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  mediumIcon?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  oneLiner?: Maybe<Scalars['String']>
  ownerMember?: Maybe<Scalars['ID']>
  platforms?: Maybe<Array<Scalars['String']>>
  smallIcon?: Maybe<Scalars['String']>
  termsOfService?: Maybe<Scalars['String']>
  useUri?: Maybe<Scalars['String']>
  websiteUrl?: Maybe<Scalars['String']>
}

export type AppWhereInput = {
  AND?: Maybe<Array<AppWhereInput>>
  NOT?: Maybe<Array<AppWhereInput>>
  OR?: Maybe<Array<AppWhereInput>>
  appChannels_every?: Maybe<ChannelWhereInput>
  appChannels_none?: Maybe<ChannelWhereInput>
  appChannels_some?: Maybe<ChannelWhereInput>
  appVideos_every?: Maybe<VideoWhereInput>
  appVideos_none?: Maybe<VideoWhereInput>
  appVideos_some?: Maybe<VideoWhereInput>
  authKey_contains?: Maybe<Scalars['String']>
  authKey_endsWith?: Maybe<Scalars['String']>
  authKey_eq?: Maybe<Scalars['String']>
  authKey_in?: Maybe<Array<Scalars['String']>>
  authKey_startsWith?: Maybe<Scalars['String']>
  bigIcon_contains?: Maybe<Scalars['String']>
  bigIcon_endsWith?: Maybe<Scalars['String']>
  bigIcon_eq?: Maybe<Scalars['String']>
  bigIcon_in?: Maybe<Array<Scalars['String']>>
  bigIcon_startsWith?: Maybe<Scalars['String']>
  category_contains?: Maybe<Scalars['String']>
  category_endsWith?: Maybe<Scalars['String']>
  category_eq?: Maybe<Scalars['String']>
  category_in?: Maybe<Array<Scalars['String']>>
  category_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  mediumIcon_contains?: Maybe<Scalars['String']>
  mediumIcon_endsWith?: Maybe<Scalars['String']>
  mediumIcon_eq?: Maybe<Scalars['String']>
  mediumIcon_in?: Maybe<Array<Scalars['String']>>
  mediumIcon_startsWith?: Maybe<Scalars['String']>
  name_contains?: Maybe<Scalars['String']>
  name_endsWith?: Maybe<Scalars['String']>
  name_eq?: Maybe<Scalars['String']>
  name_in?: Maybe<Array<Scalars['String']>>
  name_startsWith?: Maybe<Scalars['String']>
  oneLiner_contains?: Maybe<Scalars['String']>
  oneLiner_endsWith?: Maybe<Scalars['String']>
  oneLiner_eq?: Maybe<Scalars['String']>
  oneLiner_in?: Maybe<Array<Scalars['String']>>
  oneLiner_startsWith?: Maybe<Scalars['String']>
  ownerMember?: Maybe<MembershipWhereInput>
  platforms_containsAll?: Maybe<Array<Scalars['String']>>
  platforms_containsAny?: Maybe<Array<Scalars['String']>>
  platforms_containsNone?: Maybe<Array<Scalars['String']>>
  smallIcon_contains?: Maybe<Scalars['String']>
  smallIcon_endsWith?: Maybe<Scalars['String']>
  smallIcon_eq?: Maybe<Scalars['String']>
  smallIcon_in?: Maybe<Array<Scalars['String']>>
  smallIcon_startsWith?: Maybe<Scalars['String']>
  termsOfService_contains?: Maybe<Scalars['String']>
  termsOfService_endsWith?: Maybe<Scalars['String']>
  termsOfService_eq?: Maybe<Scalars['String']>
  termsOfService_in?: Maybe<Array<Scalars['String']>>
  termsOfService_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  useUri_contains?: Maybe<Scalars['String']>
  useUri_endsWith?: Maybe<Scalars['String']>
  useUri_eq?: Maybe<Scalars['String']>
  useUri_in?: Maybe<Array<Scalars['String']>>
  useUri_startsWith?: Maybe<Scalars['String']>
  websiteUrl_contains?: Maybe<Scalars['String']>
  websiteUrl_endsWith?: Maybe<Scalars['String']>
  websiteUrl_eq?: Maybe<Scalars['String']>
  websiteUrl_in?: Maybe<Array<Scalars['String']>>
  websiteUrl_startsWith?: Maybe<Scalars['String']>
}

export type AppWhereUniqueInput = {
  id: Scalars['ID']
}

export type ApplicationFormQuestion = BaseGraphQlObject & {
  applicationformquestionanswerquestion?: Maybe<Array<ApplicationFormQuestionAnswer>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  index: Scalars['Int']
  openingMetadata: WorkingGroupOpeningMetadata
  openingMetadataId: Scalars['String']
  question?: Maybe<Scalars['String']>
  type: ApplicationFormQuestionType
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ApplicationFormQuestionAnswer = BaseGraphQlObject & {
  answer: Scalars['String']
  application: WorkingGroupApplication
  applicationId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  question: ApplicationFormQuestion
  questionId: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ApplicationFormQuestionAnswerConnection = {
  edges: Array<ApplicationFormQuestionAnswerEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ApplicationFormQuestionAnswerCreateInput = {
  answer: Scalars['String']
  application: Scalars['ID']
  question: Scalars['ID']
}

export type ApplicationFormQuestionAnswerEdge = {
  cursor: Scalars['String']
  node: ApplicationFormQuestionAnswer
}

export enum ApplicationFormQuestionAnswerOrderByInput {
  AnswerAsc = 'answer_ASC',
  AnswerDesc = 'answer_DESC',
  ApplicationAsc = 'application_ASC',
  ApplicationDesc = 'application_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  QuestionAsc = 'question_ASC',
  QuestionDesc = 'question_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ApplicationFormQuestionAnswerUpdateInput = {
  answer?: Maybe<Scalars['String']>
  application?: Maybe<Scalars['ID']>
  question?: Maybe<Scalars['ID']>
}

export type ApplicationFormQuestionAnswerWhereInput = {
  AND?: Maybe<Array<ApplicationFormQuestionAnswerWhereInput>>
  NOT?: Maybe<Array<ApplicationFormQuestionAnswerWhereInput>>
  OR?: Maybe<Array<ApplicationFormQuestionAnswerWhereInput>>
  answer_contains?: Maybe<Scalars['String']>
  answer_endsWith?: Maybe<Scalars['String']>
  answer_eq?: Maybe<Scalars['String']>
  answer_in?: Maybe<Array<Scalars['String']>>
  answer_startsWith?: Maybe<Scalars['String']>
  application?: Maybe<WorkingGroupApplicationWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  question?: Maybe<ApplicationFormQuestionWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ApplicationFormQuestionAnswerWhereUniqueInput = {
  id: Scalars['ID']
}

export type ApplicationFormQuestionConnection = {
  edges: Array<ApplicationFormQuestionEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ApplicationFormQuestionCreateInput = {
  index: Scalars['Float']
  openingMetadata: Scalars['ID']
  question?: Maybe<Scalars['String']>
  type: ApplicationFormQuestionType
}

export type ApplicationFormQuestionEdge = {
  cursor: Scalars['String']
  node: ApplicationFormQuestion
}

export enum ApplicationFormQuestionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IndexAsc = 'index_ASC',
  IndexDesc = 'index_DESC',
  OpeningMetadataAsc = 'openingMetadata_ASC',
  OpeningMetadataDesc = 'openingMetadata_DESC',
  QuestionAsc = 'question_ASC',
  QuestionDesc = 'question_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export enum ApplicationFormQuestionType {
  Text = 'TEXT',
  Textarea = 'TEXTAREA',
}

export type ApplicationFormQuestionUpdateInput = {
  index?: Maybe<Scalars['Float']>
  openingMetadata?: Maybe<Scalars['ID']>
  question?: Maybe<Scalars['String']>
  type?: Maybe<ApplicationFormQuestionType>
}

export type ApplicationFormQuestionWhereInput = {
  AND?: Maybe<Array<ApplicationFormQuestionWhereInput>>
  NOT?: Maybe<Array<ApplicationFormQuestionWhereInput>>
  OR?: Maybe<Array<ApplicationFormQuestionWhereInput>>
  applicationformquestionanswerquestion_every?: Maybe<ApplicationFormQuestionAnswerWhereInput>
  applicationformquestionanswerquestion_none?: Maybe<ApplicationFormQuestionAnswerWhereInput>
  applicationformquestionanswerquestion_some?: Maybe<ApplicationFormQuestionAnswerWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  index_eq?: Maybe<Scalars['Int']>
  index_gt?: Maybe<Scalars['Int']>
  index_gte?: Maybe<Scalars['Int']>
  index_in?: Maybe<Array<Scalars['Int']>>
  index_lt?: Maybe<Scalars['Int']>
  index_lte?: Maybe<Scalars['Int']>
  openingMetadata?: Maybe<WorkingGroupOpeningMetadataWhereInput>
  question_contains?: Maybe<Scalars['String']>
  question_endsWith?: Maybe<Scalars['String']>
  question_eq?: Maybe<Scalars['String']>
  question_in?: Maybe<Array<Scalars['String']>>
  question_startsWith?: Maybe<Scalars['String']>
  type_eq?: Maybe<ApplicationFormQuestionType>
  type_in?: Maybe<Array<ApplicationFormQuestionType>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ApplicationFormQuestionWhereUniqueInput = {
  id: Scalars['ID']
}

export type ApplicationStatusAccepted = {
  openingFilledEvent?: Maybe<OpeningFilledEvent>
}

export type ApplicationStatusCancelled = {
  openingCanceledEvent?: Maybe<OpeningCanceledEvent>
}

export type ApplicationStatusPending = {
  phantom?: Maybe<Scalars['Int']>
}

export type ApplicationStatusRejected = {
  openingFilledEvent?: Maybe<OpeningFilledEvent>
}

export type ApplicationStatusWithdrawn = {
  applicationWithdrawnEvent?: Maybe<ApplicationWithdrawnEvent>
}

export type ApplicationWithdrawnEvent = BaseGraphQlObject &
  Event & {
    application: WorkingGroupApplication
    applicationId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ApplicationWithdrawnEventConnection = {
  edges: Array<ApplicationWithdrawnEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ApplicationWithdrawnEventCreateInput = {
  application: Scalars['ID']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type ApplicationWithdrawnEventEdge = {
  cursor: Scalars['String']
  node: ApplicationWithdrawnEvent
}

export enum ApplicationWithdrawnEventOrderByInput {
  ApplicationAsc = 'application_ASC',
  ApplicationDesc = 'application_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ApplicationWithdrawnEventUpdateInput = {
  application?: Maybe<Scalars['ID']>
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type ApplicationWithdrawnEventWhereInput = {
  AND?: Maybe<Array<ApplicationWithdrawnEventWhereInput>>
  NOT?: Maybe<Array<ApplicationWithdrawnEventWhereInput>>
  OR?: Maybe<Array<ApplicationWithdrawnEventWhereInput>>
  application?: Maybe<WorkingGroupApplicationWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ApplicationWithdrawnEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type AppliedOnOpeningEvent = BaseGraphQlObject &
  Event & {
    application: WorkingGroupApplication
    applicationId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    opening: WorkingGroupOpening
    openingId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type AppliedOnOpeningEventConnection = {
  edges: Array<AppliedOnOpeningEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AppliedOnOpeningEventCreateInput = {
  application: Scalars['ID']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  opening: Scalars['ID']
}

export type AppliedOnOpeningEventEdge = {
  cursor: Scalars['String']
  node: AppliedOnOpeningEvent
}

export enum AppliedOnOpeningEventOrderByInput {
  ApplicationAsc = 'application_ASC',
  ApplicationDesc = 'application_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type AppliedOnOpeningEventUpdateInput = {
  application?: Maybe<Scalars['ID']>
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  opening?: Maybe<Scalars['ID']>
}

export type AppliedOnOpeningEventWhereInput = {
  AND?: Maybe<Array<AppliedOnOpeningEventWhereInput>>
  NOT?: Maybe<Array<AppliedOnOpeningEventWhereInput>>
  OR?: Maybe<Array<AppliedOnOpeningEventWhereInput>>
  application?: Maybe<WorkingGroupApplicationWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  opening?: Maybe<WorkingGroupOpeningWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type AppliedOnOpeningEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type Auction = BaseGraphQlObject & {
  auctionType: AuctionType
  bids: Array<Bid>
  buyNowPrice?: Maybe<Scalars['BigInt']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  endedAtBlock?: Maybe<Scalars['Int']>
  englishauctionstartedeventauction?: Maybe<Array<EnglishAuctionStartedEvent>>
  id: Scalars['ID']
  initialOwner?: Maybe<Membership>
  initialOwnerId?: Maybe<Scalars['String']>
  isCanceled: Scalars['Boolean']
  isCompleted: Scalars['Boolean']
  nft: OwnedNft
  nftId: Scalars['String']
  openauctionstartedeventauction?: Maybe<Array<OpenAuctionStartedEvent>>
  ownednfttransactionalStatusAuction?: Maybe<Array<OwnedNft>>
  startingPrice: Scalars['BigInt']
  startsAtBlock: Scalars['Int']
  topBid?: Maybe<Bid>
  topBidId?: Maybe<Scalars['String']>
  transactionalstatusupdatetransactionalStatusAuction?: Maybe<Array<TransactionalStatusUpdate>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  whitelistedMembers: Array<Membership>
  winningMember?: Maybe<Membership>
  winningMemberId?: Maybe<Scalars['String']>
}

export type AuctionBidCanceledEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type AuctionBidCanceledEventConnection = {
  edges: Array<AuctionBidCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuctionBidCanceledEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
}

export type AuctionBidCanceledEventEdge = {
  cursor: Scalars['String']
  node: AuctionBidCanceledEvent
}

export enum AuctionBidCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type AuctionBidCanceledEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
}

export type AuctionBidCanceledEventWhereInput = {
  AND?: Maybe<Array<AuctionBidCanceledEventWhereInput>>
  NOT?: Maybe<Array<AuctionBidCanceledEventWhereInput>>
  OR?: Maybe<Array<AuctionBidCanceledEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type AuctionBidCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type AuctionBidMadeEvent = BaseGraphQlObject &
  Event & {
    bidAmount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    previousTopBid?: Maybe<Bid>
    previousTopBidId?: Maybe<Scalars['String']>
    previousTopBidder?: Maybe<Membership>
    previousTopBidderId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type AuctionBidMadeEventConnection = {
  edges: Array<AuctionBidMadeEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuctionBidMadeEventCreateInput = {
  bidAmount: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  previousTopBid?: Maybe<Scalars['ID']>
  previousTopBidder?: Maybe<Scalars['ID']>
  video: Scalars['ID']
}

export type AuctionBidMadeEventEdge = {
  cursor: Scalars['String']
  node: AuctionBidMadeEvent
}

export enum AuctionBidMadeEventOrderByInput {
  BidAmountAsc = 'bidAmount_ASC',
  BidAmountDesc = 'bidAmount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  PreviousTopBidAsc = 'previousTopBid_ASC',
  PreviousTopBidDesc = 'previousTopBid_DESC',
  PreviousTopBidderAsc = 'previousTopBidder_ASC',
  PreviousTopBidderDesc = 'previousTopBidder_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type AuctionBidMadeEventUpdateInput = {
  bidAmount?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  previousTopBid?: Maybe<Scalars['ID']>
  previousTopBidder?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
}

export type AuctionBidMadeEventWhereInput = {
  AND?: Maybe<Array<AuctionBidMadeEventWhereInput>>
  NOT?: Maybe<Array<AuctionBidMadeEventWhereInput>>
  OR?: Maybe<Array<AuctionBidMadeEventWhereInput>>
  bidAmount_eq?: Maybe<Scalars['BigInt']>
  bidAmount_gt?: Maybe<Scalars['BigInt']>
  bidAmount_gte?: Maybe<Scalars['BigInt']>
  bidAmount_in?: Maybe<Array<Scalars['BigInt']>>
  bidAmount_lt?: Maybe<Scalars['BigInt']>
  bidAmount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  previousTopBid?: Maybe<BidWhereInput>
  previousTopBidder?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type AuctionBidMadeEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type AuctionCanceledEvent = BaseGraphQlObject &
  Event & {
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type AuctionCanceledEventConnection = {
  edges: Array<AuctionCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuctionCanceledEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
}

export type AuctionCanceledEventEdge = {
  cursor: Scalars['String']
  node: AuctionCanceledEvent
}

export enum AuctionCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type AuctionCanceledEventUpdateInput = {
  contentActor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
}

export type AuctionCanceledEventWhereInput = {
  AND?: Maybe<Array<AuctionCanceledEventWhereInput>>
  NOT?: Maybe<Array<AuctionCanceledEventWhereInput>>
  OR?: Maybe<Array<AuctionCanceledEventWhereInput>>
  contentActor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type AuctionCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type AuctionConnection = {
  edges: Array<AuctionEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuctionCreateInput = {
  auctionType: Scalars['JSONObject']
  buyNowPrice?: Maybe<Scalars['String']>
  endedAtBlock?: Maybe<Scalars['Float']>
  initialOwner?: Maybe<Scalars['ID']>
  isCanceled: Scalars['Boolean']
  isCompleted: Scalars['Boolean']
  nft: Scalars['ID']
  startingPrice: Scalars['String']
  startsAtBlock: Scalars['Float']
  topBid?: Maybe<Scalars['ID']>
  winningMember?: Maybe<Scalars['ID']>
}

export type AuctionEdge = {
  cursor: Scalars['String']
  node: Auction
}

export enum AuctionOrderByInput {
  BuyNowPriceAsc = 'buyNowPrice_ASC',
  BuyNowPriceDesc = 'buyNowPrice_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EndedAtBlockAsc = 'endedAtBlock_ASC',
  EndedAtBlockDesc = 'endedAtBlock_DESC',
  InitialOwnerAsc = 'initialOwner_ASC',
  InitialOwnerDesc = 'initialOwner_DESC',
  IsCanceledAsc = 'isCanceled_ASC',
  IsCanceledDesc = 'isCanceled_DESC',
  IsCompletedAsc = 'isCompleted_ASC',
  IsCompletedDesc = 'isCompleted_DESC',
  NftAsc = 'nft_ASC',
  NftDesc = 'nft_DESC',
  StartingPriceAsc = 'startingPrice_ASC',
  StartingPriceDesc = 'startingPrice_DESC',
  StartsAtBlockAsc = 'startsAtBlock_ASC',
  StartsAtBlockDesc = 'startsAtBlock_DESC',
  TopBidAsc = 'topBid_ASC',
  TopBidDesc = 'topBid_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningMemberAsc = 'winningMember_ASC',
  WinningMemberDesc = 'winningMember_DESC',
}

export type AuctionType = AuctionTypeEnglish | AuctionTypeOpen

export type AuctionTypeEnglish = {
  duration: Scalars['Int']
  extensionPeriod: Scalars['Int']
  minimalBidStep: Scalars['BigInt']
  plannedEndAtBlock: Scalars['Int']
}

export type AuctionTypeOpen = {
  bidLockDuration: Scalars['Int']
}

export type AuctionUpdateInput = {
  auctionType?: Maybe<Scalars['JSONObject']>
  buyNowPrice?: Maybe<Scalars['String']>
  endedAtBlock?: Maybe<Scalars['Float']>
  initialOwner?: Maybe<Scalars['ID']>
  isCanceled?: Maybe<Scalars['Boolean']>
  isCompleted?: Maybe<Scalars['Boolean']>
  nft?: Maybe<Scalars['ID']>
  startingPrice?: Maybe<Scalars['String']>
  startsAtBlock?: Maybe<Scalars['Float']>
  topBid?: Maybe<Scalars['ID']>
  winningMember?: Maybe<Scalars['ID']>
}

export type AuctionWhereInput = {
  AND?: Maybe<Array<AuctionWhereInput>>
  NOT?: Maybe<Array<AuctionWhereInput>>
  OR?: Maybe<Array<AuctionWhereInput>>
  auctionType_json?: Maybe<Scalars['JSONObject']>
  bids_every?: Maybe<BidWhereInput>
  bids_none?: Maybe<BidWhereInput>
  bids_some?: Maybe<BidWhereInput>
  buyNowPrice_eq?: Maybe<Scalars['BigInt']>
  buyNowPrice_gt?: Maybe<Scalars['BigInt']>
  buyNowPrice_gte?: Maybe<Scalars['BigInt']>
  buyNowPrice_in?: Maybe<Array<Scalars['BigInt']>>
  buyNowPrice_lt?: Maybe<Scalars['BigInt']>
  buyNowPrice_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  endedAtBlock_eq?: Maybe<Scalars['Int']>
  endedAtBlock_gt?: Maybe<Scalars['Int']>
  endedAtBlock_gte?: Maybe<Scalars['Int']>
  endedAtBlock_in?: Maybe<Array<Scalars['Int']>>
  endedAtBlock_lt?: Maybe<Scalars['Int']>
  endedAtBlock_lte?: Maybe<Scalars['Int']>
  englishauctionstartedeventauction_every?: Maybe<EnglishAuctionStartedEventWhereInput>
  englishauctionstartedeventauction_none?: Maybe<EnglishAuctionStartedEventWhereInput>
  englishauctionstartedeventauction_some?: Maybe<EnglishAuctionStartedEventWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  initialOwner?: Maybe<MembershipWhereInput>
  isCanceled_eq?: Maybe<Scalars['Boolean']>
  isCanceled_in?: Maybe<Array<Scalars['Boolean']>>
  isCompleted_eq?: Maybe<Scalars['Boolean']>
  isCompleted_in?: Maybe<Array<Scalars['Boolean']>>
  nft?: Maybe<OwnedNftWhereInput>
  openauctionstartedeventauction_every?: Maybe<OpenAuctionStartedEventWhereInput>
  openauctionstartedeventauction_none?: Maybe<OpenAuctionStartedEventWhereInput>
  openauctionstartedeventauction_some?: Maybe<OpenAuctionStartedEventWhereInput>
  ownednfttransactionalStatusAuction_every?: Maybe<OwnedNftWhereInput>
  ownednfttransactionalStatusAuction_none?: Maybe<OwnedNftWhereInput>
  ownednfttransactionalStatusAuction_some?: Maybe<OwnedNftWhereInput>
  startingPrice_eq?: Maybe<Scalars['BigInt']>
  startingPrice_gt?: Maybe<Scalars['BigInt']>
  startingPrice_gte?: Maybe<Scalars['BigInt']>
  startingPrice_in?: Maybe<Array<Scalars['BigInt']>>
  startingPrice_lt?: Maybe<Scalars['BigInt']>
  startingPrice_lte?: Maybe<Scalars['BigInt']>
  startsAtBlock_eq?: Maybe<Scalars['Int']>
  startsAtBlock_gt?: Maybe<Scalars['Int']>
  startsAtBlock_gte?: Maybe<Scalars['Int']>
  startsAtBlock_in?: Maybe<Array<Scalars['Int']>>
  startsAtBlock_lt?: Maybe<Scalars['Int']>
  startsAtBlock_lte?: Maybe<Scalars['Int']>
  topBid?: Maybe<BidWhereInput>
  transactionalstatusupdatetransactionalStatusAuction_every?: Maybe<TransactionalStatusUpdateWhereInput>
  transactionalstatusupdatetransactionalStatusAuction_none?: Maybe<TransactionalStatusUpdateWhereInput>
  transactionalstatusupdatetransactionalStatusAuction_some?: Maybe<TransactionalStatusUpdateWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  whitelistedMembers_every?: Maybe<MembershipWhereInput>
  whitelistedMembers_none?: Maybe<MembershipWhereInput>
  whitelistedMembers_some?: Maybe<MembershipWhereInput>
  winningMember?: Maybe<MembershipWhereInput>
}

export type AuctionWhereUniqueInput = {
  id: Scalars['ID']
}

export type Avatar = AvatarObject | AvatarUri

export type AvatarObject = {
  avatarObject?: Maybe<StorageDataObject>
}

export type AvatarUri = {
  avatarUri: Scalars['String']
}

export type BaseGraphQlObject = {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type BaseModel = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type BaseModelUuid = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type BaseWhereInput = {
  createdAt_eq?: Maybe<Scalars['String']>
  createdAt_gt?: Maybe<Scalars['String']>
  createdAt_gte?: Maybe<Scalars['String']>
  createdAt_lt?: Maybe<Scalars['String']>
  createdAt_lte?: Maybe<Scalars['String']>
  createdById_eq?: Maybe<Scalars['String']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['String']>
  deletedAt_gt?: Maybe<Scalars['String']>
  deletedAt_gte?: Maybe<Scalars['String']>
  deletedAt_lt?: Maybe<Scalars['String']>
  deletedAt_lte?: Maybe<Scalars['String']>
  deletedById_eq?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['String']>
  id_in?: Maybe<Array<Scalars['String']>>
  updatedAt_eq?: Maybe<Scalars['String']>
  updatedAt_gt?: Maybe<Scalars['String']>
  updatedAt_gte?: Maybe<Scalars['String']>
  updatedAt_lt?: Maybe<Scalars['String']>
  updatedAt_lte?: Maybe<Scalars['String']>
  updatedById_eq?: Maybe<Scalars['String']>
}

export type Bid = BaseGraphQlObject & {
  amount: Scalars['BigInt']
  auction: Auction
  auctionId: Scalars['String']
  auctionTopBid?: Maybe<Auction>
  auctionbidmadeeventpreviousTopBid?: Maybe<Array<AuctionBidMadeEvent>>
  bidder: Membership
  bidderId: Scalars['String']
  bidmadecompletingauctioneventpreviousTopBid?: Maybe<Array<BidMadeCompletingAuctionEvent>>
  bidmadecompletingauctioneventwinningBid?: Maybe<Array<BidMadeCompletingAuctionEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  englishauctionsettledeventwinningBid?: Maybe<Array<EnglishAuctionSettledEvent>>
  id: Scalars['ID']
  indexInBlock: Scalars['Int']
  isCanceled: Scalars['Boolean']
  nft: OwnedNft
  nftId: Scalars['String']
  openauctionbidacceptedeventwinningBid?: Maybe<Array<OpenAuctionBidAcceptedEvent>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type BidConnection = {
  edges: Array<BidEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BidCreateInput = {
  amount: Scalars['String']
  auction: Scalars['ID']
  bidder: Scalars['ID']
  createdInBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  isCanceled: Scalars['Boolean']
  nft: Scalars['ID']
}

export type BidEdge = {
  cursor: Scalars['String']
  node: Bid
}

export type BidMadeCompletingAuctionEvent = BaseGraphQlObject &
  Event & {
    bidders: Array<Membership>
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    previousTopBid?: Maybe<Bid>
    previousTopBidId?: Maybe<Scalars['String']>
    previousTopBidder?: Maybe<Membership>
    previousTopBidderId?: Maybe<Scalars['String']>
    price: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
    winningBid: Bid
    winningBidId: Scalars['String']
  }

export type BidMadeCompletingAuctionEventConnection = {
  edges: Array<BidMadeCompletingAuctionEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BidMadeCompletingAuctionEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  previousTopBid?: Maybe<Scalars['ID']>
  previousTopBidder?: Maybe<Scalars['ID']>
  price: Scalars['String']
  video: Scalars['ID']
  winningBid: Scalars['ID']
}

export type BidMadeCompletingAuctionEventEdge = {
  cursor: Scalars['String']
  node: BidMadeCompletingAuctionEvent
}

export enum BidMadeCompletingAuctionEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  PreviousTopBidAsc = 'previousTopBid_ASC',
  PreviousTopBidDesc = 'previousTopBid_DESC',
  PreviousTopBidderAsc = 'previousTopBidder_ASC',
  PreviousTopBidderDesc = 'previousTopBidder_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
  WinningBidAsc = 'winningBid_ASC',
  WinningBidDesc = 'winningBid_DESC',
}

export type BidMadeCompletingAuctionEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  previousTopBid?: Maybe<Scalars['ID']>
  previousTopBidder?: Maybe<Scalars['ID']>
  price?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
  winningBid?: Maybe<Scalars['ID']>
}

export type BidMadeCompletingAuctionEventWhereInput = {
  AND?: Maybe<Array<BidMadeCompletingAuctionEventWhereInput>>
  NOT?: Maybe<Array<BidMadeCompletingAuctionEventWhereInput>>
  OR?: Maybe<Array<BidMadeCompletingAuctionEventWhereInput>>
  bidders_every?: Maybe<MembershipWhereInput>
  bidders_none?: Maybe<MembershipWhereInput>
  bidders_some?: Maybe<MembershipWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  previousTopBid?: Maybe<BidWhereInput>
  previousTopBidder?: Maybe<MembershipWhereInput>
  price_eq?: Maybe<Scalars['BigInt']>
  price_gt?: Maybe<Scalars['BigInt']>
  price_gte?: Maybe<Scalars['BigInt']>
  price_in?: Maybe<Array<Scalars['BigInt']>>
  price_lt?: Maybe<Scalars['BigInt']>
  price_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  winningBid?: Maybe<BidWhereInput>
}

export type BidMadeCompletingAuctionEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum BidOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  AuctionAsc = 'auction_ASC',
  AuctionDesc = 'auction_DESC',
  BidderAsc = 'bidder_ASC',
  BidderDesc = 'bidder_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  IsCanceledAsc = 'isCanceled_ASC',
  IsCanceledDesc = 'isCanceled_DESC',
  NftAsc = 'nft_ASC',
  NftDesc = 'nft_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BidUpdateInput = {
  amount?: Maybe<Scalars['String']>
  auction?: Maybe<Scalars['ID']>
  bidder?: Maybe<Scalars['ID']>
  createdInBlock?: Maybe<Scalars['Float']>
  indexInBlock?: Maybe<Scalars['Float']>
  isCanceled?: Maybe<Scalars['Boolean']>
  nft?: Maybe<Scalars['ID']>
}

export type BidWhereInput = {
  AND?: Maybe<Array<BidWhereInput>>
  NOT?: Maybe<Array<BidWhereInput>>
  OR?: Maybe<Array<BidWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  auction?: Maybe<AuctionWhereInput>
  auctionTopBid?: Maybe<AuctionWhereInput>
  auctionbidmadeeventpreviousTopBid_every?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventpreviousTopBid_none?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventpreviousTopBid_some?: Maybe<AuctionBidMadeEventWhereInput>
  bidder?: Maybe<MembershipWhereInput>
  bidmadecompletingauctioneventpreviousTopBid_every?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventpreviousTopBid_none?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventpreviousTopBid_some?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventwinningBid_every?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventwinningBid_none?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventwinningBid_some?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInBlock_eq?: Maybe<Scalars['Int']>
  createdInBlock_gt?: Maybe<Scalars['Int']>
  createdInBlock_gte?: Maybe<Scalars['Int']>
  createdInBlock_in?: Maybe<Array<Scalars['Int']>>
  createdInBlock_lt?: Maybe<Scalars['Int']>
  createdInBlock_lte?: Maybe<Scalars['Int']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  englishauctionsettledeventwinningBid_every?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventwinningBid_none?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventwinningBid_some?: Maybe<EnglishAuctionSettledEventWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  isCanceled_eq?: Maybe<Scalars['Boolean']>
  isCanceled_in?: Maybe<Array<Scalars['Boolean']>>
  nft?: Maybe<OwnedNftWhereInput>
  openauctionbidacceptedeventwinningBid_every?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventwinningBid_none?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventwinningBid_some?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BidWhereUniqueInput = {
  id: Scalars['ID']
}

export type Bounty = BaseGraphQlObject & {
  bannerImageUri?: Maybe<Scalars['String']>
  bountycreatorcherrywithdrawaleventbounty?: Maybe<Array<BountyCreatorCherryWithdrawalEvent>>
  canceledEvent?: Maybe<BountyCanceledEvent>
  cherry: Scalars['BigInt']
  contributions?: Maybe<Array<BountyContribution>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInEvent: BountyCreatedEvent
  creator?: Maybe<Membership>
  creatorId?: Maybe<Scalars['String']>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  discussionThread?: Maybe<ForumThread>
  discussionThreadId?: Maybe<Scalars['String']>
  entrantStake: Scalars['BigInt']
  entrantWhitelist?: Maybe<BountyEntrantWhitelist>
  entrantWhitelistId?: Maybe<Scalars['String']>
  entries?: Maybe<Array<BountyEntry>>
  fundingType: BountyFundingType
  id: Scalars['ID']
  isTerminated: Scalars['Boolean']
  judgingPeriod: Scalars['Int']
  judgment?: Maybe<OracleJudgmentSubmittedEvent>
  maxFundingReachedEvent?: Maybe<BountyMaxFundingReachedEvent>
  oracle?: Maybe<Membership>
  oracleId?: Maybe<Scalars['String']>
  removedInEvent?: Maybe<BountyRemovedEvent>
  stage: BountyStage
  title?: Maybe<Scalars['String']>
  totalFunding: Scalars['BigInt']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  vetoedEvent?: Maybe<BountyVetoedEvent>
  workPeriod: Scalars['Int']
  worksubmittedeventbounty?: Maybe<Array<WorkSubmittedEvent>>
}

export type BountyCanceledEvent = BaseGraphQlObject &
  Event & {
    bounty: Bounty
    bountyId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BountyCanceledEventConnection = {
  edges: Array<BountyCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyCanceledEventCreateInput = {
  bounty: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BountyCanceledEventEdge = {
  cursor: Scalars['String']
  node: BountyCanceledEvent
}

export enum BountyCanceledEventOrderByInput {
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyCanceledEventUpdateInput = {
  bounty?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BountyCanceledEventWhereInput = {
  AND?: Maybe<Array<BountyCanceledEventWhereInput>>
  NOT?: Maybe<Array<BountyCanceledEventWhereInput>>
  OR?: Maybe<Array<BountyCanceledEventWhereInput>>
  bounty?: Maybe<BountyWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BountyCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BountyConnection = {
  edges: Array<BountyEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyContribution = BaseGraphQlObject & {
  amount: Scalars['BigInt']
  bounty: Bounty
  bountyFundedEvents: Array<BountyFundedEvent>
  bountyId: Scalars['String']
  contributor?: Maybe<Membership>
  contributorId?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  withdrawnInEvent?: Maybe<BountyFundingWithdrawalEvent>
}

export type BountyContributionConnection = {
  edges: Array<BountyContributionEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyContributionCreateInput = {
  amount: Scalars['String']
  bounty: Scalars['ID']
  contributor?: Maybe<Scalars['ID']>
  contributorId?: Maybe<Scalars['String']>
}

export type BountyContributionEdge = {
  cursor: Scalars['String']
  node: BountyContribution
}

export enum BountyContributionOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  ContributorIdAsc = 'contributorId_ASC',
  ContributorIdDesc = 'contributorId_DESC',
  ContributorAsc = 'contributor_ASC',
  ContributorDesc = 'contributor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyContributionUpdateInput = {
  amount?: Maybe<Scalars['String']>
  bounty?: Maybe<Scalars['ID']>
  contributor?: Maybe<Scalars['ID']>
  contributorId?: Maybe<Scalars['String']>
}

export type BountyContributionWhereInput = {
  AND?: Maybe<Array<BountyContributionWhereInput>>
  NOT?: Maybe<Array<BountyContributionWhereInput>>
  OR?: Maybe<Array<BountyContributionWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  bounty?: Maybe<BountyWhereInput>
  bountyFundedEvents_every?: Maybe<BountyFundedEventWhereInput>
  bountyFundedEvents_none?: Maybe<BountyFundedEventWhereInput>
  bountyFundedEvents_some?: Maybe<BountyFundedEventWhereInput>
  contributor?: Maybe<MembershipWhereInput>
  contributorId_contains?: Maybe<Scalars['String']>
  contributorId_endsWith?: Maybe<Scalars['String']>
  contributorId_eq?: Maybe<Scalars['String']>
  contributorId_in?: Maybe<Array<Scalars['String']>>
  contributorId_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  withdrawnInEvent?: Maybe<BountyFundingWithdrawalEventWhereInput>
}

export type BountyContributionWhereUniqueInput = {
  id: Scalars['ID']
}

export type BountyCreateInput = {
  bannerImageUri?: Maybe<Scalars['String']>
  cherry: Scalars['String']
  creator?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  discussionThread?: Maybe<Scalars['ID']>
  entrantStake: Scalars['String']
  entrantWhitelist?: Maybe<Scalars['ID']>
  fundingType: Scalars['JSONObject']
  isTerminated: Scalars['Boolean']
  judgingPeriod: Scalars['Float']
  oracle?: Maybe<Scalars['ID']>
  stage: BountyStage
  title?: Maybe<Scalars['String']>
  totalFunding: Scalars['String']
  workPeriod: Scalars['Float']
}

export type BountyCreatedEvent = BaseGraphQlObject &
  Event & {
    bounty: Bounty
    bountyId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BountyCreatedEventConnection = {
  edges: Array<BountyCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyCreatedEventCreateInput = {
  bounty: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BountyCreatedEventEdge = {
  cursor: Scalars['String']
  node: BountyCreatedEvent
}

export enum BountyCreatedEventOrderByInput {
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyCreatedEventUpdateInput = {
  bounty?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BountyCreatedEventWhereInput = {
  AND?: Maybe<Array<BountyCreatedEventWhereInput>>
  NOT?: Maybe<Array<BountyCreatedEventWhereInput>>
  OR?: Maybe<Array<BountyCreatedEventWhereInput>>
  bounty?: Maybe<BountyWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BountyCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BountyCreatorCherryWithdrawalEvent = BaseGraphQlObject &
  Event & {
    bounty: Bounty
    bountyId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BountyCreatorCherryWithdrawalEventConnection = {
  edges: Array<BountyCreatorCherryWithdrawalEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyCreatorCherryWithdrawalEventCreateInput = {
  bounty: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BountyCreatorCherryWithdrawalEventEdge = {
  cursor: Scalars['String']
  node: BountyCreatorCherryWithdrawalEvent
}

export enum BountyCreatorCherryWithdrawalEventOrderByInput {
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyCreatorCherryWithdrawalEventUpdateInput = {
  bounty?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BountyCreatorCherryWithdrawalEventWhereInput = {
  AND?: Maybe<Array<BountyCreatorCherryWithdrawalEventWhereInput>>
  NOT?: Maybe<Array<BountyCreatorCherryWithdrawalEventWhereInput>>
  OR?: Maybe<Array<BountyCreatorCherryWithdrawalEventWhereInput>>
  bounty?: Maybe<BountyWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BountyCreatorCherryWithdrawalEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BountyEdge = {
  cursor: Scalars['String']
  node: Bounty
}

export type BountyEntrantWhitelist = BaseGraphQlObject & {
  bountyentrantWhitelist?: Maybe<Array<Bounty>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  members: Array<Membership>
  phantom?: Maybe<Scalars['Int']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type BountyEntrantWhitelistConnection = {
  edges: Array<BountyEntrantWhitelistEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyEntrantWhitelistCreateInput = {
  phantom?: Maybe<Scalars['Float']>
}

export type BountyEntrantWhitelistEdge = {
  cursor: Scalars['String']
  node: BountyEntrantWhitelist
}

export enum BountyEntrantWhitelistOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  PhantomAsc = 'phantom_ASC',
  PhantomDesc = 'phantom_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyEntrantWhitelistUpdateInput = {
  phantom?: Maybe<Scalars['Float']>
}

export type BountyEntrantWhitelistWhereInput = {
  AND?: Maybe<Array<BountyEntrantWhitelistWhereInput>>
  NOT?: Maybe<Array<BountyEntrantWhitelistWhereInput>>
  OR?: Maybe<Array<BountyEntrantWhitelistWhereInput>>
  bountyentrantWhitelist_every?: Maybe<BountyWhereInput>
  bountyentrantWhitelist_none?: Maybe<BountyWhereInput>
  bountyentrantWhitelist_some?: Maybe<BountyWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  members_every?: Maybe<MembershipWhereInput>
  members_none?: Maybe<MembershipWhereInput>
  members_some?: Maybe<MembershipWhereInput>
  phantom_eq?: Maybe<Scalars['Int']>
  phantom_gt?: Maybe<Scalars['Int']>
  phantom_gte?: Maybe<Scalars['Int']>
  phantom_in?: Maybe<Array<Scalars['Int']>>
  phantom_lt?: Maybe<Scalars['Int']>
  phantom_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BountyEntrantWhitelistWhereUniqueInput = {
  id: Scalars['ID']
}

export type BountyEntry = BaseGraphQlObject & {
  announcedInEvent: WorkEntryAnnouncedEvent
  bounty: Bounty
  bountyId: Scalars['String']
  cashedOutInEvent?: Maybe<WorkEntrantFundsWithdrawnEvent>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  slashedInEvent?: Maybe<WorkEntrySlashedEvent>
  stakingAccount?: Maybe<Scalars['String']>
  status: BountyEntryStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  withdrawnInEvent?: Maybe<WorkEntryWithdrawnEvent>
  workSubmitted: Scalars['Boolean']
  worker: Membership
  workerId: Scalars['String']
  works?: Maybe<Array<WorkSubmittedEvent>>
}

export type BountyEntryConnection = {
  edges: Array<BountyEntryEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyEntryCreateInput = {
  bounty: Scalars['ID']
  stakingAccount?: Maybe<Scalars['String']>
  status: Scalars['JSONObject']
  workSubmitted: Scalars['Boolean']
  worker: Scalars['ID']
}

export type BountyEntryEdge = {
  cursor: Scalars['String']
  node: BountyEntry
}

export enum BountyEntryOrderByInput {
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  StakingAccountAsc = 'stakingAccount_ASC',
  StakingAccountDesc = 'stakingAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkSubmittedAsc = 'workSubmitted_ASC',
  WorkSubmittedDesc = 'workSubmitted_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type BountyEntryStatus =
  | BountyEntryStatusPassed
  | BountyEntryStatusRejected
  | BountyEntryStatusWinner
  | BountyEntryStatusWithdrawn
  | BountyEntryStatusWorking

export type BountyEntryStatusPassed = {
  dummy?: Maybe<Scalars['Int']>
}

export type BountyEntryStatusRejected = {
  dummy?: Maybe<Scalars['Int']>
}

export type BountyEntryStatusWinner = {
  reward: Scalars['BigInt']
}

export type BountyEntryStatusWithdrawn = {
  dummy?: Maybe<Scalars['Int']>
}

export type BountyEntryStatusWorking = {
  dummy?: Maybe<Scalars['Int']>
}

export type BountyEntryUpdateInput = {
  bounty?: Maybe<Scalars['ID']>
  stakingAccount?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['JSONObject']>
  workSubmitted?: Maybe<Scalars['Boolean']>
  worker?: Maybe<Scalars['ID']>
}

export type BountyEntryWhereInput = {
  AND?: Maybe<Array<BountyEntryWhereInput>>
  NOT?: Maybe<Array<BountyEntryWhereInput>>
  OR?: Maybe<Array<BountyEntryWhereInput>>
  announcedInEvent?: Maybe<WorkEntryAnnouncedEventWhereInput>
  bounty?: Maybe<BountyWhereInput>
  cashedOutInEvent?: Maybe<WorkEntrantFundsWithdrawnEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  slashedInEvent?: Maybe<WorkEntrySlashedEventWhereInput>
  stakingAccount_contains?: Maybe<Scalars['String']>
  stakingAccount_endsWith?: Maybe<Scalars['String']>
  stakingAccount_eq?: Maybe<Scalars['String']>
  stakingAccount_in?: Maybe<Array<Scalars['String']>>
  stakingAccount_startsWith?: Maybe<Scalars['String']>
  status_json?: Maybe<Scalars['JSONObject']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  withdrawnInEvent?: Maybe<WorkEntryWithdrawnEventWhereInput>
  workSubmitted_eq?: Maybe<Scalars['Boolean']>
  workSubmitted_in?: Maybe<Array<Scalars['Boolean']>>
  worker?: Maybe<MembershipWhereInput>
  works_every?: Maybe<WorkSubmittedEventWhereInput>
  works_none?: Maybe<WorkSubmittedEventWhereInput>
  works_some?: Maybe<WorkSubmittedEventWhereInput>
}

export type BountyEntryWhereUniqueInput = {
  id: Scalars['ID']
}

export type BountyFundedEvent = BaseGraphQlObject &
  Event & {
    contribution: BountyContribution
    contributionId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BountyFundedEventConnection = {
  edges: Array<BountyFundedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyFundedEventCreateInput = {
  contribution: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BountyFundedEventEdge = {
  cursor: Scalars['String']
  node: BountyFundedEvent
}

export enum BountyFundedEventOrderByInput {
  ContributionAsc = 'contribution_ASC',
  ContributionDesc = 'contribution_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyFundedEventUpdateInput = {
  contribution?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BountyFundedEventWhereInput = {
  AND?: Maybe<Array<BountyFundedEventWhereInput>>
  NOT?: Maybe<Array<BountyFundedEventWhereInput>>
  OR?: Maybe<Array<BountyFundedEventWhereInput>>
  contribution?: Maybe<BountyContributionWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BountyFundedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BountyFundingLimited = {
  fundingPeriod: Scalars['Int']
  maxFundingAmount: Scalars['BigInt']
  minFundingAmount: Scalars['BigInt']
}

export type BountyFundingPerpetual = {
  target: Scalars['BigInt']
}

export type BountyFundingType = BountyFundingLimited | BountyFundingPerpetual

export type BountyFundingWithdrawalEvent = BaseGraphQlObject &
  Event & {
    contribution: BountyContribution
    contributionId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BountyFundingWithdrawalEventConnection = {
  edges: Array<BountyFundingWithdrawalEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyFundingWithdrawalEventCreateInput = {
  contribution: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BountyFundingWithdrawalEventEdge = {
  cursor: Scalars['String']
  node: BountyFundingWithdrawalEvent
}

export enum BountyFundingWithdrawalEventOrderByInput {
  ContributionAsc = 'contribution_ASC',
  ContributionDesc = 'contribution_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyFundingWithdrawalEventUpdateInput = {
  contribution?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BountyFundingWithdrawalEventWhereInput = {
  AND?: Maybe<Array<BountyFundingWithdrawalEventWhereInput>>
  NOT?: Maybe<Array<BountyFundingWithdrawalEventWhereInput>>
  OR?: Maybe<Array<BountyFundingWithdrawalEventWhereInput>>
  contribution?: Maybe<BountyContributionWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BountyFundingWithdrawalEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BountyMaxFundingReachedEvent = BaseGraphQlObject &
  Event & {
    bounty: Bounty
    bountyId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BountyMaxFundingReachedEventConnection = {
  edges: Array<BountyMaxFundingReachedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyMaxFundingReachedEventCreateInput = {
  bounty: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BountyMaxFundingReachedEventEdge = {
  cursor: Scalars['String']
  node: BountyMaxFundingReachedEvent
}

export enum BountyMaxFundingReachedEventOrderByInput {
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyMaxFundingReachedEventUpdateInput = {
  bounty?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BountyMaxFundingReachedEventWhereInput = {
  AND?: Maybe<Array<BountyMaxFundingReachedEventWhereInput>>
  NOT?: Maybe<Array<BountyMaxFundingReachedEventWhereInput>>
  OR?: Maybe<Array<BountyMaxFundingReachedEventWhereInput>>
  bounty?: Maybe<BountyWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BountyMaxFundingReachedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum BountyOrderByInput {
  BannerImageUriAsc = 'bannerImageUri_ASC',
  BannerImageUriDesc = 'bannerImageUri_DESC',
  CherryAsc = 'cherry_ASC',
  CherryDesc = 'cherry_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatorAsc = 'creator_ASC',
  CreatorDesc = 'creator_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  DiscussionThreadAsc = 'discussionThread_ASC',
  DiscussionThreadDesc = 'discussionThread_DESC',
  EntrantStakeAsc = 'entrantStake_ASC',
  EntrantStakeDesc = 'entrantStake_DESC',
  EntrantWhitelistAsc = 'entrantWhitelist_ASC',
  EntrantWhitelistDesc = 'entrantWhitelist_DESC',
  IsTerminatedAsc = 'isTerminated_ASC',
  IsTerminatedDesc = 'isTerminated_DESC',
  JudgingPeriodAsc = 'judgingPeriod_ASC',
  JudgingPeriodDesc = 'judgingPeriod_DESC',
  OracleAsc = 'oracle_ASC',
  OracleDesc = 'oracle_DESC',
  StageAsc = 'stage_ASC',
  StageDesc = 'stage_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TotalFundingAsc = 'totalFunding_ASC',
  TotalFundingDesc = 'totalFunding_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkPeriodAsc = 'workPeriod_ASC',
  WorkPeriodDesc = 'workPeriod_DESC',
}

export type BountyRemovedEvent = BaseGraphQlObject &
  Event & {
    bounty: Bounty
    bountyId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BountyRemovedEventConnection = {
  edges: Array<BountyRemovedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyRemovedEventCreateInput = {
  bounty: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BountyRemovedEventEdge = {
  cursor: Scalars['String']
  node: BountyRemovedEvent
}

export enum BountyRemovedEventOrderByInput {
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyRemovedEventUpdateInput = {
  bounty?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BountyRemovedEventWhereInput = {
  AND?: Maybe<Array<BountyRemovedEventWhereInput>>
  NOT?: Maybe<Array<BountyRemovedEventWhereInput>>
  OR?: Maybe<Array<BountyRemovedEventWhereInput>>
  bounty?: Maybe<BountyWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BountyRemovedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum BountyStage {
  Expired = 'Expired',
  Failed = 'Failed',
  Funding = 'Funding',
  Judgment = 'Judgment',
  Successful = 'Successful',
  WorkSubmission = 'WorkSubmission',
}

export type BountyUpdateInput = {
  bannerImageUri?: Maybe<Scalars['String']>
  cherry?: Maybe<Scalars['String']>
  creator?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  discussionThread?: Maybe<Scalars['ID']>
  entrantStake?: Maybe<Scalars['String']>
  entrantWhitelist?: Maybe<Scalars['ID']>
  fundingType?: Maybe<Scalars['JSONObject']>
  isTerminated?: Maybe<Scalars['Boolean']>
  judgingPeriod?: Maybe<Scalars['Float']>
  oracle?: Maybe<Scalars['ID']>
  stage?: Maybe<BountyStage>
  title?: Maybe<Scalars['String']>
  totalFunding?: Maybe<Scalars['String']>
  workPeriod?: Maybe<Scalars['Float']>
}

export type BountyVetoedEvent = BaseGraphQlObject &
  Event & {
    bounty: Bounty
    bountyId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BountyVetoedEventConnection = {
  edges: Array<BountyVetoedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BountyVetoedEventCreateInput = {
  bounty: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BountyVetoedEventEdge = {
  cursor: Scalars['String']
  node: BountyVetoedEvent
}

export enum BountyVetoedEventOrderByInput {
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BountyVetoedEventUpdateInput = {
  bounty?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BountyVetoedEventWhereInput = {
  AND?: Maybe<Array<BountyVetoedEventWhereInput>>
  NOT?: Maybe<Array<BountyVetoedEventWhereInput>>
  OR?: Maybe<Array<BountyVetoedEventWhereInput>>
  bounty?: Maybe<BountyWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BountyVetoedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BountyWhereInput = {
  AND?: Maybe<Array<BountyWhereInput>>
  NOT?: Maybe<Array<BountyWhereInput>>
  OR?: Maybe<Array<BountyWhereInput>>
  bannerImageUri_contains?: Maybe<Scalars['String']>
  bannerImageUri_endsWith?: Maybe<Scalars['String']>
  bannerImageUri_eq?: Maybe<Scalars['String']>
  bannerImageUri_in?: Maybe<Array<Scalars['String']>>
  bannerImageUri_startsWith?: Maybe<Scalars['String']>
  bountycreatorcherrywithdrawaleventbounty_every?: Maybe<BountyCreatorCherryWithdrawalEventWhereInput>
  bountycreatorcherrywithdrawaleventbounty_none?: Maybe<BountyCreatorCherryWithdrawalEventWhereInput>
  bountycreatorcherrywithdrawaleventbounty_some?: Maybe<BountyCreatorCherryWithdrawalEventWhereInput>
  canceledEvent?: Maybe<BountyCanceledEventWhereInput>
  cherry_eq?: Maybe<Scalars['BigInt']>
  cherry_gt?: Maybe<Scalars['BigInt']>
  cherry_gte?: Maybe<Scalars['BigInt']>
  cherry_in?: Maybe<Array<Scalars['BigInt']>>
  cherry_lt?: Maybe<Scalars['BigInt']>
  cherry_lte?: Maybe<Scalars['BigInt']>
  contributions_every?: Maybe<BountyContributionWhereInput>
  contributions_none?: Maybe<BountyContributionWhereInput>
  contributions_some?: Maybe<BountyContributionWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInEvent?: Maybe<BountyCreatedEventWhereInput>
  creator?: Maybe<MembershipWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  discussionThread?: Maybe<ForumThreadWhereInput>
  entrantStake_eq?: Maybe<Scalars['BigInt']>
  entrantStake_gt?: Maybe<Scalars['BigInt']>
  entrantStake_gte?: Maybe<Scalars['BigInt']>
  entrantStake_in?: Maybe<Array<Scalars['BigInt']>>
  entrantStake_lt?: Maybe<Scalars['BigInt']>
  entrantStake_lte?: Maybe<Scalars['BigInt']>
  entrantWhitelist?: Maybe<BountyEntrantWhitelistWhereInput>
  entries_every?: Maybe<BountyEntryWhereInput>
  entries_none?: Maybe<BountyEntryWhereInput>
  entries_some?: Maybe<BountyEntryWhereInput>
  fundingType_json?: Maybe<Scalars['JSONObject']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isTerminated_eq?: Maybe<Scalars['Boolean']>
  isTerminated_in?: Maybe<Array<Scalars['Boolean']>>
  judgingPeriod_eq?: Maybe<Scalars['Int']>
  judgingPeriod_gt?: Maybe<Scalars['Int']>
  judgingPeriod_gte?: Maybe<Scalars['Int']>
  judgingPeriod_in?: Maybe<Array<Scalars['Int']>>
  judgingPeriod_lt?: Maybe<Scalars['Int']>
  judgingPeriod_lte?: Maybe<Scalars['Int']>
  judgment?: Maybe<OracleJudgmentSubmittedEventWhereInput>
  maxFundingReachedEvent?: Maybe<BountyMaxFundingReachedEventWhereInput>
  oracle?: Maybe<MembershipWhereInput>
  removedInEvent?: Maybe<BountyRemovedEventWhereInput>
  stage_eq?: Maybe<BountyStage>
  stage_in?: Maybe<Array<BountyStage>>
  title_contains?: Maybe<Scalars['String']>
  title_endsWith?: Maybe<Scalars['String']>
  title_eq?: Maybe<Scalars['String']>
  title_in?: Maybe<Array<Scalars['String']>>
  title_startsWith?: Maybe<Scalars['String']>
  totalFunding_eq?: Maybe<Scalars['BigInt']>
  totalFunding_gt?: Maybe<Scalars['BigInt']>
  totalFunding_gte?: Maybe<Scalars['BigInt']>
  totalFunding_in?: Maybe<Array<Scalars['BigInt']>>
  totalFunding_lt?: Maybe<Scalars['BigInt']>
  totalFunding_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  vetoedEvent?: Maybe<BountyVetoedEventWhereInput>
  workPeriod_eq?: Maybe<Scalars['Int']>
  workPeriod_gt?: Maybe<Scalars['Int']>
  workPeriod_gte?: Maybe<Scalars['Int']>
  workPeriod_in?: Maybe<Array<Scalars['Int']>>
  workPeriod_lt?: Maybe<Scalars['Int']>
  workPeriod_lte?: Maybe<Scalars['Int']>
  worksubmittedeventbounty_every?: Maybe<WorkSubmittedEventWhereInput>
  worksubmittedeventbounty_none?: Maybe<WorkSubmittedEventWhereInput>
  worksubmittedeventbounty_some?: Maybe<WorkSubmittedEventWhereInput>
}

export type BountyWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetBalanceSetEvent = BaseGraphQlObject &
  Event & {
    balance: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BudgetBalanceSetEventConnection = {
  edges: Array<BudgetBalanceSetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetBalanceSetEventCreateInput = {
  balance: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BudgetBalanceSetEventEdge = {
  cursor: Scalars['String']
  node: BudgetBalanceSetEvent
}

export enum BudgetBalanceSetEventOrderByInput {
  BalanceAsc = 'balance_ASC',
  BalanceDesc = 'balance_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetBalanceSetEventUpdateInput = {
  balance?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BudgetBalanceSetEventWhereInput = {
  AND?: Maybe<Array<BudgetBalanceSetEventWhereInput>>
  NOT?: Maybe<Array<BudgetBalanceSetEventWhereInput>>
  OR?: Maybe<Array<BudgetBalanceSetEventWhereInput>>
  balance_eq?: Maybe<Scalars['BigInt']>
  balance_gt?: Maybe<Scalars['BigInt']>
  balance_gte?: Maybe<Scalars['BigInt']>
  balance_in?: Maybe<Array<Scalars['BigInt']>>
  balance_lt?: Maybe<Scalars['BigInt']>
  balance_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BudgetBalanceSetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetFundedEvent = BaseGraphQlObject &
  Event & {
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    rationale: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BudgetFundedEventConnection = {
  edges: Array<BudgetFundedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetFundedEventCreateInput = {
  amount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
  rationale: Scalars['String']
}

export type BudgetFundedEventEdge = {
  cursor: Scalars['String']
  node: BudgetFundedEvent
}

export enum BudgetFundedEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetFundedEventUpdateInput = {
  amount?: Maybe<Scalars['String']>
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
}

export type BudgetFundedEventWhereInput = {
  AND?: Maybe<Array<BudgetFundedEventWhereInput>>
  NOT?: Maybe<Array<BudgetFundedEventWhereInput>>
  OR?: Maybe<Array<BudgetFundedEventWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BudgetFundedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetIncrementUpdatedEvent = BaseGraphQlObject &
  Event & {
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BudgetIncrementUpdatedEventConnection = {
  edges: Array<BudgetIncrementUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetIncrementUpdatedEventCreateInput = {
  amount: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BudgetIncrementUpdatedEventEdge = {
  cursor: Scalars['String']
  node: BudgetIncrementUpdatedEvent
}

export enum BudgetIncrementUpdatedEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetIncrementUpdatedEventUpdateInput = {
  amount?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BudgetIncrementUpdatedEventWhereInput = {
  AND?: Maybe<Array<BudgetIncrementUpdatedEventWhereInput>>
  NOT?: Maybe<Array<BudgetIncrementUpdatedEventWhereInput>>
  OR?: Maybe<Array<BudgetIncrementUpdatedEventWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BudgetIncrementUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetRefillEvent = BaseGraphQlObject &
  Event & {
    balance: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BudgetRefillEventConnection = {
  edges: Array<BudgetRefillEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetRefillEventCreateInput = {
  balance: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BudgetRefillEventEdge = {
  cursor: Scalars['String']
  node: BudgetRefillEvent
}

export enum BudgetRefillEventOrderByInput {
  BalanceAsc = 'balance_ASC',
  BalanceDesc = 'balance_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetRefillEventUpdateInput = {
  balance?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BudgetRefillEventWhereInput = {
  AND?: Maybe<Array<BudgetRefillEventWhereInput>>
  NOT?: Maybe<Array<BudgetRefillEventWhereInput>>
  OR?: Maybe<Array<BudgetRefillEventWhereInput>>
  balance_eq?: Maybe<Scalars['BigInt']>
  balance_gt?: Maybe<Scalars['BigInt']>
  balance_gte?: Maybe<Scalars['BigInt']>
  balance_in?: Maybe<Array<Scalars['BigInt']>>
  balance_lt?: Maybe<Scalars['BigInt']>
  balance_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BudgetRefillEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetRefillPlannedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    nextRefillInBlock: Scalars['Int']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BudgetRefillPlannedEventConnection = {
  edges: Array<BudgetRefillPlannedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetRefillPlannedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  nextRefillInBlock: Scalars['Float']
}

export type BudgetRefillPlannedEventEdge = {
  cursor: Scalars['String']
  node: BudgetRefillPlannedEvent
}

export enum BudgetRefillPlannedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NextRefillInBlockAsc = 'nextRefillInBlock_ASC',
  NextRefillInBlockDesc = 'nextRefillInBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetRefillPlannedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  nextRefillInBlock?: Maybe<Scalars['Float']>
}

export type BudgetRefillPlannedEventWhereInput = {
  AND?: Maybe<Array<BudgetRefillPlannedEventWhereInput>>
  NOT?: Maybe<Array<BudgetRefillPlannedEventWhereInput>>
  OR?: Maybe<Array<BudgetRefillPlannedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  nextRefillInBlock_eq?: Maybe<Scalars['Int']>
  nextRefillInBlock_gt?: Maybe<Scalars['Int']>
  nextRefillInBlock_gte?: Maybe<Scalars['Int']>
  nextRefillInBlock_in?: Maybe<Array<Scalars['Int']>>
  nextRefillInBlock_lt?: Maybe<Scalars['Int']>
  nextRefillInBlock_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BudgetRefillPlannedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetSetEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newBudget: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BudgetSetEventConnection = {
  edges: Array<BudgetSetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetSetEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newBudget: Scalars['String']
}

export type BudgetSetEventEdge = {
  cursor: Scalars['String']
  node: BudgetSetEvent
}

export enum BudgetSetEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewBudgetAsc = 'newBudget_ASC',
  NewBudgetDesc = 'newBudget_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetSetEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newBudget?: Maybe<Scalars['String']>
}

export type BudgetSetEventWhereInput = {
  AND?: Maybe<Array<BudgetSetEventWhereInput>>
  NOT?: Maybe<Array<BudgetSetEventWhereInput>>
  OR?: Maybe<Array<BudgetSetEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newBudget_eq?: Maybe<Scalars['BigInt']>
  newBudget_gt?: Maybe<Scalars['BigInt']>
  newBudget_gte?: Maybe<Scalars['BigInt']>
  newBudget_in?: Maybe<Array<Scalars['BigInt']>>
  newBudget_lt?: Maybe<Scalars['BigInt']>
  newBudget_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BudgetSetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetSpendingEvent = BaseGraphQlObject &
  Event & {
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    rationale?: Maybe<Scalars['String']>
    reciever: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BudgetSpendingEventConnection = {
  edges: Array<BudgetSpendingEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetSpendingEventCreateInput = {
  amount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale?: Maybe<Scalars['String']>
  reciever: Scalars['String']
}

export type BudgetSpendingEventEdge = {
  cursor: Scalars['String']
  node: BudgetSpendingEvent
}

export enum BudgetSpendingEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  RecieverAsc = 'reciever_ASC',
  RecieverDesc = 'reciever_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetSpendingEventUpdateInput = {
  amount?: Maybe<Scalars['String']>
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
  reciever?: Maybe<Scalars['String']>
}

export type BudgetSpendingEventWhereInput = {
  AND?: Maybe<Array<BudgetSpendingEventWhereInput>>
  NOT?: Maybe<Array<BudgetSpendingEventWhereInput>>
  OR?: Maybe<Array<BudgetSpendingEventWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  reciever_contains?: Maybe<Scalars['String']>
  reciever_endsWith?: Maybe<Scalars['String']>
  reciever_eq?: Maybe<Scalars['String']>
  reciever_in?: Maybe<Array<Scalars['String']>>
  reciever_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BudgetSpendingEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetUpdatedEvent = BaseGraphQlObject &
  Event & {
    budgetChangeAmount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type BudgetUpdatedEventConnection = {
  edges: Array<BudgetUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetUpdatedEventCreateInput = {
  budgetChangeAmount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type BudgetUpdatedEventEdge = {
  cursor: Scalars['String']
  node: BudgetUpdatedEvent
}

export enum BudgetUpdatedEventOrderByInput {
  BudgetChangeAmountAsc = 'budgetChangeAmount_ASC',
  BudgetChangeAmountDesc = 'budgetChangeAmount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetUpdatedEventUpdateInput = {
  budgetChangeAmount?: Maybe<Scalars['String']>
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type BudgetUpdatedEventWhereInput = {
  AND?: Maybe<Array<BudgetUpdatedEventWhereInput>>
  NOT?: Maybe<Array<BudgetUpdatedEventWhereInput>>
  OR?: Maybe<Array<BudgetUpdatedEventWhereInput>>
  budgetChangeAmount_eq?: Maybe<Scalars['BigInt']>
  budgetChangeAmount_gt?: Maybe<Scalars['BigInt']>
  budgetChangeAmount_gte?: Maybe<Scalars['BigInt']>
  budgetChangeAmount_in?: Maybe<Array<Scalars['BigInt']>>
  budgetChangeAmount_lt?: Maybe<Scalars['BigInt']>
  budgetChangeAmount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type BudgetUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BuyNowCanceledEvent = BaseGraphQlObject &
  Event & {
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type BuyNowCanceledEventConnection = {
  edges: Array<BuyNowCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BuyNowCanceledEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
}

export type BuyNowCanceledEventEdge = {
  cursor: Scalars['String']
  node: BuyNowCanceledEvent
}

export enum BuyNowCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type BuyNowCanceledEventUpdateInput = {
  contentActor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
}

export type BuyNowCanceledEventWhereInput = {
  AND?: Maybe<Array<BuyNowCanceledEventWhereInput>>
  NOT?: Maybe<Array<BuyNowCanceledEventWhereInput>>
  OR?: Maybe<Array<BuyNowCanceledEventWhereInput>>
  contentActor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type BuyNowCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BuyNowPriceUpdatedEvent = BaseGraphQlObject &
  Event & {
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newPrice: Scalars['BigInt']
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type BuyNowPriceUpdatedEventConnection = {
  edges: Array<BuyNowPriceUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BuyNowPriceUpdatedEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newPrice: Scalars['String']
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
}

export type BuyNowPriceUpdatedEventEdge = {
  cursor: Scalars['String']
  node: BuyNowPriceUpdatedEvent
}

export enum BuyNowPriceUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewPriceAsc = 'newPrice_ASC',
  NewPriceDesc = 'newPrice_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type BuyNowPriceUpdatedEventUpdateInput = {
  contentActor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newPrice?: Maybe<Scalars['String']>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
}

export type BuyNowPriceUpdatedEventWhereInput = {
  AND?: Maybe<Array<BuyNowPriceUpdatedEventWhereInput>>
  NOT?: Maybe<Array<BuyNowPriceUpdatedEventWhereInput>>
  OR?: Maybe<Array<BuyNowPriceUpdatedEventWhereInput>>
  contentActor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newPrice_eq?: Maybe<Scalars['BigInt']>
  newPrice_gt?: Maybe<Scalars['BigInt']>
  newPrice_gte?: Maybe<Scalars['BigInt']>
  newPrice_in?: Maybe<Array<Scalars['BigInt']>>
  newPrice_lt?: Maybe<Scalars['BigInt']>
  newPrice_lte?: Maybe<Scalars['BigInt']>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type BuyNowPriceUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CancelWorkingGroupLeadOpeningProposalDetails = {
  opening?: Maybe<WorkingGroupOpening>
}

export type CandidacyNoteMetadata = BaseGraphQlObject & {
  bannerImageUri?: Maybe<Scalars['String']>
  bulletPoints: Array<Scalars['String']>
  candidacynoteseteventnoteMetadata?: Maybe<Array<CandidacyNoteSetEvent>>
  candidatenoteMetadata?: Maybe<Array<Candidate>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  header?: Maybe<Scalars['String']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type CandidacyNoteMetadataConnection = {
  edges: Array<CandidacyNoteMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidacyNoteMetadataCreateInput = {
  bannerImageUri?: Maybe<Scalars['String']>
  bulletPoints: Array<Scalars['String']>
  description?: Maybe<Scalars['String']>
  header?: Maybe<Scalars['String']>
}

export type CandidacyNoteMetadataEdge = {
  cursor: Scalars['String']
  node: CandidacyNoteMetadata
}

export enum CandidacyNoteMetadataOrderByInput {
  BannerImageUriAsc = 'bannerImageUri_ASC',
  BannerImageUriDesc = 'bannerImageUri_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  HeaderAsc = 'header_ASC',
  HeaderDesc = 'header_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CandidacyNoteMetadataUpdateInput = {
  bannerImageUri?: Maybe<Scalars['String']>
  bulletPoints?: Maybe<Array<Scalars['String']>>
  description?: Maybe<Scalars['String']>
  header?: Maybe<Scalars['String']>
}

export type CandidacyNoteMetadataWhereInput = {
  AND?: Maybe<Array<CandidacyNoteMetadataWhereInput>>
  NOT?: Maybe<Array<CandidacyNoteMetadataWhereInput>>
  OR?: Maybe<Array<CandidacyNoteMetadataWhereInput>>
  bannerImageUri_contains?: Maybe<Scalars['String']>
  bannerImageUri_endsWith?: Maybe<Scalars['String']>
  bannerImageUri_eq?: Maybe<Scalars['String']>
  bannerImageUri_in?: Maybe<Array<Scalars['String']>>
  bannerImageUri_startsWith?: Maybe<Scalars['String']>
  bulletPoints_containsAll?: Maybe<Array<Scalars['String']>>
  bulletPoints_containsAny?: Maybe<Array<Scalars['String']>>
  bulletPoints_containsNone?: Maybe<Array<Scalars['String']>>
  candidacynoteseteventnoteMetadata_every?: Maybe<CandidacyNoteSetEventWhereInput>
  candidacynoteseteventnoteMetadata_none?: Maybe<CandidacyNoteSetEventWhereInput>
  candidacynoteseteventnoteMetadata_some?: Maybe<CandidacyNoteSetEventWhereInput>
  candidatenoteMetadata_every?: Maybe<CandidateWhereInput>
  candidatenoteMetadata_none?: Maybe<CandidateWhereInput>
  candidatenoteMetadata_some?: Maybe<CandidateWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  header_contains?: Maybe<Scalars['String']>
  header_endsWith?: Maybe<Scalars['String']>
  header_eq?: Maybe<Scalars['String']>
  header_in?: Maybe<Array<Scalars['String']>>
  header_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CandidacyNoteMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type CandidacyNoteSetEvent = BaseGraphQlObject &
  Event & {
    candidate: Candidate
    candidateId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    noteMetadata: CandidacyNoteMetadata
    noteMetadataId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CandidacyNoteSetEventConnection = {
  edges: Array<CandidacyNoteSetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidacyNoteSetEventCreateInput = {
  candidate: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  noteMetadata: Scalars['ID']
}

export type CandidacyNoteSetEventEdge = {
  cursor: Scalars['String']
  node: CandidacyNoteSetEvent
}

export enum CandidacyNoteSetEventOrderByInput {
  CandidateAsc = 'candidate_ASC',
  CandidateDesc = 'candidate_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NoteMetadataAsc = 'noteMetadata_ASC',
  NoteMetadataDesc = 'noteMetadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CandidacyNoteSetEventUpdateInput = {
  candidate?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  noteMetadata?: Maybe<Scalars['ID']>
}

export type CandidacyNoteSetEventWhereInput = {
  AND?: Maybe<Array<CandidacyNoteSetEventWhereInput>>
  NOT?: Maybe<Array<CandidacyNoteSetEventWhereInput>>
  OR?: Maybe<Array<CandidacyNoteSetEventWhereInput>>
  candidate?: Maybe<CandidateWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  noteMetadata?: Maybe<CandidacyNoteMetadataWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CandidacyNoteSetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CandidacyStakeReleaseEvent = BaseGraphQlObject &
  Event & {
    candidate: Candidate
    candidateId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CandidacyStakeReleaseEventConnection = {
  edges: Array<CandidacyStakeReleaseEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidacyStakeReleaseEventCreateInput = {
  candidate: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type CandidacyStakeReleaseEventEdge = {
  cursor: Scalars['String']
  node: CandidacyStakeReleaseEvent
}

export enum CandidacyStakeReleaseEventOrderByInput {
  CandidateAsc = 'candidate_ASC',
  CandidateDesc = 'candidate_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CandidacyStakeReleaseEventUpdateInput = {
  candidate?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type CandidacyStakeReleaseEventWhereInput = {
  AND?: Maybe<Array<CandidacyStakeReleaseEventWhereInput>>
  NOT?: Maybe<Array<CandidacyStakeReleaseEventWhereInput>>
  OR?: Maybe<Array<CandidacyStakeReleaseEventWhereInput>>
  candidate?: Maybe<CandidateWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CandidacyStakeReleaseEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CandidacyStatus {
  Active = 'ACTIVE',
  Elected = 'ELECTED',
  Failed = 'FAILED',
  Withdrawn = 'WITHDRAWN',
}

export type CandidacyWithdrawEvent = BaseGraphQlObject &
  Event & {
    candidate: Candidate
    candidateId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CandidacyWithdrawEventConnection = {
  edges: Array<CandidacyWithdrawEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidacyWithdrawEventCreateInput = {
  candidate: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type CandidacyWithdrawEventEdge = {
  cursor: Scalars['String']
  node: CandidacyWithdrawEvent
}

export enum CandidacyWithdrawEventOrderByInput {
  CandidateAsc = 'candidate_ASC',
  CandidateDesc = 'candidate_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CandidacyWithdrawEventUpdateInput = {
  candidate?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type CandidacyWithdrawEventWhereInput = {
  AND?: Maybe<Array<CandidacyWithdrawEventWhereInput>>
  NOT?: Maybe<Array<CandidacyWithdrawEventWhereInput>>
  OR?: Maybe<Array<CandidacyWithdrawEventWhereInput>>
  candidate?: Maybe<CandidateWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CandidacyWithdrawEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type Candidate = BaseGraphQlObject & {
  candidacynoteseteventcandidate?: Maybe<Array<CandidacyNoteSetEvent>>
  candidacystakereleaseeventcandidate?: Maybe<Array<CandidacyStakeReleaseEvent>>
  candidacywithdraweventcandidate?: Maybe<Array<CandidacyWithdrawEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  electionRound: ElectionRound
  electionRoundId: Scalars['String']
  id: Scalars['ID']
  lastVoteReceivedAtBlock?: Maybe<Scalars['BigInt']>
  lastVoteReceivedAtEventNumber?: Maybe<Scalars['Int']>
  member: Membership
  memberId: Scalars['String']
  newcandidateeventcandidate?: Maybe<Array<NewCandidateEvent>>
  noteMetadata: CandidacyNoteMetadata
  noteMetadataId: Scalars['String']
  rewardAccountId: Scalars['String']
  stake: Scalars['BigInt']
  stakeLocked: Scalars['Boolean']
  stakingAccountId: Scalars['String']
  status: CandidacyStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  votePower: Scalars['BigInt']
  votesReceived: Array<CastVote>
}

export type CandidateConnection = {
  edges: Array<CandidateEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidateCreateInput = {
  electionRound: Scalars['ID']
  lastVoteReceivedAtBlock?: Maybe<Scalars['String']>
  lastVoteReceivedAtEventNumber?: Maybe<Scalars['Float']>
  member: Scalars['ID']
  noteMetadata: Scalars['ID']
  rewardAccountId: Scalars['String']
  stake: Scalars['String']
  stakeLocked: Scalars['Boolean']
  stakingAccountId: Scalars['String']
  status: CandidacyStatus
  votePower: Scalars['String']
}

export type CandidateEdge = {
  cursor: Scalars['String']
  node: Candidate
}

export enum CandidateOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectionRoundAsc = 'electionRound_ASC',
  ElectionRoundDesc = 'electionRound_DESC',
  LastVoteReceivedAtBlockAsc = 'lastVoteReceivedAtBlock_ASC',
  LastVoteReceivedAtBlockDesc = 'lastVoteReceivedAtBlock_DESC',
  LastVoteReceivedAtEventNumberAsc = 'lastVoteReceivedAtEventNumber_ASC',
  LastVoteReceivedAtEventNumberDesc = 'lastVoteReceivedAtEventNumber_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NoteMetadataAsc = 'noteMetadata_ASC',
  NoteMetadataDesc = 'noteMetadata_DESC',
  RewardAccountIdAsc = 'rewardAccountId_ASC',
  RewardAccountIdDesc = 'rewardAccountId_DESC',
  StakeLockedAsc = 'stakeLocked_ASC',
  StakeLockedDesc = 'stakeLocked_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StakingAccountIdAsc = 'stakingAccountId_ASC',
  StakingAccountIdDesc = 'stakingAccountId_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VotePowerAsc = 'votePower_ASC',
  VotePowerDesc = 'votePower_DESC',
}

export type CandidateUpdateInput = {
  electionRound?: Maybe<Scalars['ID']>
  lastVoteReceivedAtBlock?: Maybe<Scalars['String']>
  lastVoteReceivedAtEventNumber?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  noteMetadata?: Maybe<Scalars['ID']>
  rewardAccountId?: Maybe<Scalars['String']>
  stake?: Maybe<Scalars['String']>
  stakeLocked?: Maybe<Scalars['Boolean']>
  stakingAccountId?: Maybe<Scalars['String']>
  status?: Maybe<CandidacyStatus>
  votePower?: Maybe<Scalars['String']>
}

export type CandidateWhereInput = {
  AND?: Maybe<Array<CandidateWhereInput>>
  NOT?: Maybe<Array<CandidateWhereInput>>
  OR?: Maybe<Array<CandidateWhereInput>>
  candidacynoteseteventcandidate_every?: Maybe<CandidacyNoteSetEventWhereInput>
  candidacynoteseteventcandidate_none?: Maybe<CandidacyNoteSetEventWhereInput>
  candidacynoteseteventcandidate_some?: Maybe<CandidacyNoteSetEventWhereInput>
  candidacystakereleaseeventcandidate_every?: Maybe<CandidacyStakeReleaseEventWhereInput>
  candidacystakereleaseeventcandidate_none?: Maybe<CandidacyStakeReleaseEventWhereInput>
  candidacystakereleaseeventcandidate_some?: Maybe<CandidacyStakeReleaseEventWhereInput>
  candidacywithdraweventcandidate_every?: Maybe<CandidacyWithdrawEventWhereInput>
  candidacywithdraweventcandidate_none?: Maybe<CandidacyWithdrawEventWhereInput>
  candidacywithdraweventcandidate_some?: Maybe<CandidacyWithdrawEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electionRound?: Maybe<ElectionRoundWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  lastVoteReceivedAtBlock_eq?: Maybe<Scalars['BigInt']>
  lastVoteReceivedAtBlock_gt?: Maybe<Scalars['BigInt']>
  lastVoteReceivedAtBlock_gte?: Maybe<Scalars['BigInt']>
  lastVoteReceivedAtBlock_in?: Maybe<Array<Scalars['BigInt']>>
  lastVoteReceivedAtBlock_lt?: Maybe<Scalars['BigInt']>
  lastVoteReceivedAtBlock_lte?: Maybe<Scalars['BigInt']>
  lastVoteReceivedAtEventNumber_eq?: Maybe<Scalars['Int']>
  lastVoteReceivedAtEventNumber_gt?: Maybe<Scalars['Int']>
  lastVoteReceivedAtEventNumber_gte?: Maybe<Scalars['Int']>
  lastVoteReceivedAtEventNumber_in?: Maybe<Array<Scalars['Int']>>
  lastVoteReceivedAtEventNumber_lt?: Maybe<Scalars['Int']>
  lastVoteReceivedAtEventNumber_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  newcandidateeventcandidate_every?: Maybe<NewCandidateEventWhereInput>
  newcandidateeventcandidate_none?: Maybe<NewCandidateEventWhereInput>
  newcandidateeventcandidate_some?: Maybe<NewCandidateEventWhereInput>
  noteMetadata?: Maybe<CandidacyNoteMetadataWhereInput>
  rewardAccountId_contains?: Maybe<Scalars['String']>
  rewardAccountId_endsWith?: Maybe<Scalars['String']>
  rewardAccountId_eq?: Maybe<Scalars['String']>
  rewardAccountId_in?: Maybe<Array<Scalars['String']>>
  rewardAccountId_startsWith?: Maybe<Scalars['String']>
  stakeLocked_eq?: Maybe<Scalars['Boolean']>
  stakeLocked_in?: Maybe<Array<Scalars['Boolean']>>
  stake_eq?: Maybe<Scalars['BigInt']>
  stake_gt?: Maybe<Scalars['BigInt']>
  stake_gte?: Maybe<Scalars['BigInt']>
  stake_in?: Maybe<Array<Scalars['BigInt']>>
  stake_lt?: Maybe<Scalars['BigInt']>
  stake_lte?: Maybe<Scalars['BigInt']>
  stakingAccountId_contains?: Maybe<Scalars['String']>
  stakingAccountId_endsWith?: Maybe<Scalars['String']>
  stakingAccountId_eq?: Maybe<Scalars['String']>
  stakingAccountId_in?: Maybe<Array<Scalars['String']>>
  stakingAccountId_startsWith?: Maybe<Scalars['String']>
  status_eq?: Maybe<CandidacyStatus>
  status_in?: Maybe<Array<CandidacyStatus>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  votePower_eq?: Maybe<Scalars['BigInt']>
  votePower_gt?: Maybe<Scalars['BigInt']>
  votePower_gte?: Maybe<Scalars['BigInt']>
  votePower_in?: Maybe<Array<Scalars['BigInt']>>
  votePower_lt?: Maybe<Scalars['BigInt']>
  votePower_lte?: Maybe<Scalars['BigInt']>
  votesReceived_every?: Maybe<CastVoteWhereInput>
  votesReceived_none?: Maybe<CastVoteWhereInput>
  votesReceived_some?: Maybe<CastVoteWhereInput>
}

export type CandidateWhereUniqueInput = {
  id: Scalars['ID']
}

export type CastVote = BaseGraphQlObject & {
  castBy: Scalars['String']
  commitment: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  electionRound: ElectionRound
  electionRoundId: Scalars['String']
  id: Scalars['ID']
  stake: Scalars['BigInt']
  stakeLocked: Scalars['Boolean']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  voteFor?: Maybe<Candidate>
  voteForId?: Maybe<Scalars['String']>
  votePower: Scalars['BigInt']
  votecasteventcastVote?: Maybe<Array<VoteCastEvent>>
  voterevealedeventcastVote?: Maybe<Array<VoteRevealedEvent>>
}

export type CastVoteConnection = {
  edges: Array<CastVoteEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CastVoteCreateInput = {
  castBy: Scalars['String']
  commitment: Scalars['String']
  electionRound: Scalars['ID']
  stake: Scalars['String']
  stakeLocked: Scalars['Boolean']
  voteFor?: Maybe<Scalars['ID']>
  votePower: Scalars['String']
}

export type CastVoteEdge = {
  cursor: Scalars['String']
  node: CastVote
}

export enum CastVoteOrderByInput {
  CastByAsc = 'castBy_ASC',
  CastByDesc = 'castBy_DESC',
  CommitmentAsc = 'commitment_ASC',
  CommitmentDesc = 'commitment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectionRoundAsc = 'electionRound_ASC',
  ElectionRoundDesc = 'electionRound_DESC',
  StakeLockedAsc = 'stakeLocked_ASC',
  StakeLockedDesc = 'stakeLocked_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VoteForAsc = 'voteFor_ASC',
  VoteForDesc = 'voteFor_DESC',
  VotePowerAsc = 'votePower_ASC',
  VotePowerDesc = 'votePower_DESC',
}

export type CastVoteUpdateInput = {
  castBy?: Maybe<Scalars['String']>
  commitment?: Maybe<Scalars['String']>
  electionRound?: Maybe<Scalars['ID']>
  stake?: Maybe<Scalars['String']>
  stakeLocked?: Maybe<Scalars['Boolean']>
  voteFor?: Maybe<Scalars['ID']>
  votePower?: Maybe<Scalars['String']>
}

export type CastVoteWhereInput = {
  AND?: Maybe<Array<CastVoteWhereInput>>
  NOT?: Maybe<Array<CastVoteWhereInput>>
  OR?: Maybe<Array<CastVoteWhereInput>>
  castBy_contains?: Maybe<Scalars['String']>
  castBy_endsWith?: Maybe<Scalars['String']>
  castBy_eq?: Maybe<Scalars['String']>
  castBy_in?: Maybe<Array<Scalars['String']>>
  castBy_startsWith?: Maybe<Scalars['String']>
  commitment_contains?: Maybe<Scalars['String']>
  commitment_endsWith?: Maybe<Scalars['String']>
  commitment_eq?: Maybe<Scalars['String']>
  commitment_in?: Maybe<Array<Scalars['String']>>
  commitment_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electionRound?: Maybe<ElectionRoundWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  stakeLocked_eq?: Maybe<Scalars['Boolean']>
  stakeLocked_in?: Maybe<Array<Scalars['Boolean']>>
  stake_eq?: Maybe<Scalars['BigInt']>
  stake_gt?: Maybe<Scalars['BigInt']>
  stake_gte?: Maybe<Scalars['BigInt']>
  stake_in?: Maybe<Array<Scalars['BigInt']>>
  stake_lt?: Maybe<Scalars['BigInt']>
  stake_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  voteFor?: Maybe<CandidateWhereInput>
  votePower_eq?: Maybe<Scalars['BigInt']>
  votePower_gt?: Maybe<Scalars['BigInt']>
  votePower_gte?: Maybe<Scalars['BigInt']>
  votePower_in?: Maybe<Array<Scalars['BigInt']>>
  votePower_lt?: Maybe<Scalars['BigInt']>
  votePower_lte?: Maybe<Scalars['BigInt']>
  votecasteventcastVote_every?: Maybe<VoteCastEventWhereInput>
  votecasteventcastVote_none?: Maybe<VoteCastEventWhereInput>
  votecasteventcastVote_some?: Maybe<VoteCastEventWhereInput>
  voterevealedeventcastVote_every?: Maybe<VoteRevealedEventWhereInput>
  voterevealedeventcastVote_none?: Maybe<VoteRevealedEventWhereInput>
  voterevealedeventcastVote_some?: Maybe<VoteRevealedEventWhereInput>
}

export type CastVoteWhereUniqueInput = {
  id: Scalars['ID']
}

export type CategoryArchivalStatusUpdatedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newArchivalStatus: Scalars['Boolean']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CategoryArchivalStatusUpdatedEventConnection = {
  edges: Array<CategoryArchivalStatusUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryArchivalStatusUpdatedEventCreateInput = {
  actor: Scalars['ID']
  category: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newArchivalStatus: Scalars['Boolean']
}

export type CategoryArchivalStatusUpdatedEventEdge = {
  cursor: Scalars['String']
  node: CategoryArchivalStatusUpdatedEvent
}

export enum CategoryArchivalStatusUpdatedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewArchivalStatusAsc = 'newArchivalStatus_ASC',
  NewArchivalStatusDesc = 'newArchivalStatus_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryArchivalStatusUpdatedEventUpdateInput = {
  actor?: Maybe<Scalars['ID']>
  category?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newArchivalStatus?: Maybe<Scalars['Boolean']>
}

export type CategoryArchivalStatusUpdatedEventWhereInput = {
  AND?: Maybe<Array<CategoryArchivalStatusUpdatedEventWhereInput>>
  NOT?: Maybe<Array<CategoryArchivalStatusUpdatedEventWhereInput>>
  OR?: Maybe<Array<CategoryArchivalStatusUpdatedEventWhereInput>>
  actor?: Maybe<WorkerWhereInput>
  category?: Maybe<ForumCategoryWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newArchivalStatus_eq?: Maybe<Scalars['Boolean']>
  newArchivalStatus_in?: Maybe<Array<Scalars['Boolean']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CategoryArchivalStatusUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CategoryCreatedEvent = BaseGraphQlObject &
  Event & {
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CategoryCreatedEventConnection = {
  edges: Array<CategoryCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryCreatedEventCreateInput = {
  category: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type CategoryCreatedEventEdge = {
  cursor: Scalars['String']
  node: CategoryCreatedEvent
}

export enum CategoryCreatedEventOrderByInput {
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryCreatedEventUpdateInput = {
  category?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type CategoryCreatedEventWhereInput = {
  AND?: Maybe<Array<CategoryCreatedEventWhereInput>>
  NOT?: Maybe<Array<CategoryCreatedEventWhereInput>>
  OR?: Maybe<Array<CategoryCreatedEventWhereInput>>
  category?: Maybe<ForumCategoryWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CategoryCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CategoryDeletedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CategoryDeletedEventConnection = {
  edges: Array<CategoryDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryDeletedEventCreateInput = {
  actor: Scalars['ID']
  category: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type CategoryDeletedEventEdge = {
  cursor: Scalars['String']
  node: CategoryDeletedEvent
}

export enum CategoryDeletedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryDeletedEventUpdateInput = {
  actor?: Maybe<Scalars['ID']>
  category?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type CategoryDeletedEventWhereInput = {
  AND?: Maybe<Array<CategoryDeletedEventWhereInput>>
  NOT?: Maybe<Array<CategoryDeletedEventWhereInput>>
  OR?: Maybe<Array<CategoryDeletedEventWhereInput>>
  actor?: Maybe<WorkerWhereInput>
  category?: Maybe<ForumCategoryWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CategoryDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CategoryFeaturedVideos = {
  category: VideoCategory
  categoryFeaturedVideos: Array<FeaturedVideo>
  categoryId: Scalars['ID']
}

export type CategoryMembershipOfModeratorUpdatedEvent = BaseGraphQlObject &
  Event & {
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    moderator: Worker
    moderatorId: Scalars['String']
    network: Network
    newCanModerateValue: Scalars['Boolean']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CategoryMembershipOfModeratorUpdatedEventConnection = {
  edges: Array<CategoryMembershipOfModeratorUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryMembershipOfModeratorUpdatedEventCreateInput = {
  category: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  moderator: Scalars['ID']
  network: Network
  newCanModerateValue: Scalars['Boolean']
}

export type CategoryMembershipOfModeratorUpdatedEventEdge = {
  cursor: Scalars['String']
  node: CategoryMembershipOfModeratorUpdatedEvent
}

export enum CategoryMembershipOfModeratorUpdatedEventOrderByInput {
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  ModeratorAsc = 'moderator_ASC',
  ModeratorDesc = 'moderator_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewCanModerateValueAsc = 'newCanModerateValue_ASC',
  NewCanModerateValueDesc = 'newCanModerateValue_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryMembershipOfModeratorUpdatedEventUpdateInput = {
  category?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  moderator?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  newCanModerateValue?: Maybe<Scalars['Boolean']>
}

export type CategoryMembershipOfModeratorUpdatedEventWhereInput = {
  AND?: Maybe<Array<CategoryMembershipOfModeratorUpdatedEventWhereInput>>
  NOT?: Maybe<Array<CategoryMembershipOfModeratorUpdatedEventWhereInput>>
  OR?: Maybe<Array<CategoryMembershipOfModeratorUpdatedEventWhereInput>>
  category?: Maybe<ForumCategoryWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  moderator?: Maybe<WorkerWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newCanModerateValue_eq?: Maybe<Scalars['Boolean']>
  newCanModerateValue_in?: Maybe<Array<Scalars['Boolean']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CategoryMembershipOfModeratorUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CategoryStatus = CategoryStatusActive | CategoryStatusArchived | CategoryStatusRemoved

export type CategoryStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type CategoryStatusArchived = {
  categoryArchivalStatusUpdatedEvent?: Maybe<CategoryArchivalStatusUpdatedEvent>
}

export type CategoryStatusRemoved = {
  categoryDeletedEvent?: Maybe<CategoryDeletedEvent>
}

export type CategoryStickyThreadUpdateEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newStickyThreads: Array<ForumThread>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CategoryStickyThreadUpdateEventConnection = {
  edges: Array<CategoryStickyThreadUpdateEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryStickyThreadUpdateEventCreateInput = {
  actor: Scalars['ID']
  category: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type CategoryStickyThreadUpdateEventEdge = {
  cursor: Scalars['String']
  node: CategoryStickyThreadUpdateEvent
}

export enum CategoryStickyThreadUpdateEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryStickyThreadUpdateEventUpdateInput = {
  actor?: Maybe<Scalars['ID']>
  category?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type CategoryStickyThreadUpdateEventWhereInput = {
  AND?: Maybe<Array<CategoryStickyThreadUpdateEventWhereInput>>
  NOT?: Maybe<Array<CategoryStickyThreadUpdateEventWhereInput>>
  OR?: Maybe<Array<CategoryStickyThreadUpdateEventWhereInput>>
  actor?: Maybe<WorkerWhereInput>
  category?: Maybe<ForumCategoryWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newStickyThreads_every?: Maybe<ForumThreadWhereInput>
  newStickyThreads_none?: Maybe<ForumThreadWhereInput>
  newStickyThreads_some?: Maybe<ForumThreadWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CategoryStickyThreadUpdateEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type Channel = BaseGraphQlObject & {
  activeVideosCounter: Scalars['Int']
  avatarPhoto?: Maybe<StorageDataObject>
  avatarPhotoId?: Maybe<Scalars['String']>
  bannedMembers: Array<Membership>
  channelNftCollectors: Array<ChannelNftCollectors>
  channelStateBloatBond: Scalars['BigInt']
  channelfundswithdrawneventchannel?: Maybe<Array<ChannelFundsWithdrawnEvent>>
  channelpaymentmadeeventpayeeChannel?: Maybe<Array<ChannelPaymentMadeEvent>>
  channelrewardclaimedandwithdrawneventchannel?: Maybe<Array<ChannelRewardClaimedAndWithdrawnEvent>>
  claimedRewards: Array<ChannelRewardClaimedEvent>
  collaborators: Array<Collaborator>
  commentcreatedeventvideoChannel?: Maybe<Array<CommentCreatedEvent>>
  commentdeletedeventvideoChannel?: Maybe<Array<CommentDeletedEvent>>
  commentmoderatedeventvideoChannel?: Maybe<Array<CommentModeratedEvent>>
  commentpinnedeventvideoChannel?: Maybe<Array<CommentPinnedEvent>>
  commentreactedeventvideoChannel?: Maybe<Array<CommentReactedEvent>>
  commenttextupdatedeventvideoChannel?: Maybe<Array<CommentTextUpdatedEvent>>
  coverPhoto?: Maybe<StorageDataObject>
  coverPhotoId?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInBlock: Scalars['Int']
  cumulativeRewardClaimed?: Maybe<Scalars['BigInt']>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  entryApp?: Maybe<App>
  entryAppId?: Maybe<Scalars['String']>
  follows: Scalars['Int']
  id: Scalars['ID']
  isCensored: Scalars['Boolean']
  isPublic?: Maybe<Scalars['Boolean']>
  language?: Maybe<Language>
  languageId?: Maybe<Scalars['String']>
  memberbannedfromchanneleventchannel?: Maybe<Array<MemberBannedFromChannelEvent>>
  ownednftcreatorChannel?: Maybe<Array<OwnedNft>>
  ownerCuratorGroup?: Maybe<CuratorGroup>
  ownerCuratorGroupId?: Maybe<Scalars['String']>
  ownerMember?: Maybe<Membership>
  ownerMemberId?: Maybe<Scalars['String']>
  privilegeLevel?: Maybe<Scalars['Int']>
  rewardAccount: Scalars['String']
  title?: Maybe<Scalars['String']>
  totalVideosCreated: Scalars['Int']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videoreactedeventvideoChannel?: Maybe<Array<VideoReactedEvent>>
  videos: Array<Video>
  views: Scalars['Int']
}

export type ChannelAssetsDeletedByModeratorEvent = BaseGraphQlObject & {
  actor: ContentActor
  assetIds: Array<Scalars['Int']>
  channelId: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  network: Network
  rationale: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ChannelAssetsDeletedByModeratorEventConnection = {
  edges: Array<ChannelAssetsDeletedByModeratorEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelAssetsDeletedByModeratorEventCreateInput = {
  actor: Scalars['JSONObject']
  assetIds: Array<Scalars['Int']>
  channelId: Scalars['Float']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale: Scalars['String']
}

export type ChannelAssetsDeletedByModeratorEventEdge = {
  cursor: Scalars['String']
  node: ChannelAssetsDeletedByModeratorEvent
}

export enum ChannelAssetsDeletedByModeratorEventOrderByInput {
  ChannelIdAsc = 'channelId_ASC',
  ChannelIdDesc = 'channelId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelAssetsDeletedByModeratorEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  assetIds?: Maybe<Array<Scalars['Int']>>
  channelId?: Maybe<Scalars['Float']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
}

export type ChannelAssetsDeletedByModeratorEventWhereInput = {
  AND?: Maybe<Array<ChannelAssetsDeletedByModeratorEventWhereInput>>
  NOT?: Maybe<Array<ChannelAssetsDeletedByModeratorEventWhereInput>>
  OR?: Maybe<Array<ChannelAssetsDeletedByModeratorEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  assetIds_containsAll?: Maybe<Array<Scalars['Int']>>
  assetIds_containsAny?: Maybe<Array<Scalars['Int']>>
  assetIds_containsNone?: Maybe<Array<Scalars['Int']>>
  channelId_eq?: Maybe<Scalars['Int']>
  channelId_gt?: Maybe<Scalars['Int']>
  channelId_gte?: Maybe<Scalars['Int']>
  channelId_in?: Maybe<Array<Scalars['Int']>>
  channelId_lt?: Maybe<Scalars['Int']>
  channelId_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ChannelAssetsDeletedByModeratorEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ChannelConnection = {
  edges: Array<ChannelEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelCreateInput = {
  activeVideosCounter: Scalars['Float']
  avatarPhoto?: Maybe<Scalars['ID']>
  channelStateBloatBond: Scalars['String']
  coverPhoto?: Maybe<Scalars['ID']>
  createdInBlock: Scalars['Float']
  cumulativeRewardClaimed?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  entryApp?: Maybe<Scalars['ID']>
  isCensored: Scalars['Boolean']
  isPublic?: Maybe<Scalars['Boolean']>
  language?: Maybe<Scalars['ID']>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  privilegeLevel?: Maybe<Scalars['Float']>
  rewardAccount: Scalars['String']
  title?: Maybe<Scalars['String']>
  totalVideosCreated: Scalars['Float']
}

export type ChannelDeletedByModeratorEvent = BaseGraphQlObject & {
  actor: ContentActor
  channelId: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  network: Network
  rationale: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ChannelDeletedByModeratorEventConnection = {
  edges: Array<ChannelDeletedByModeratorEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelDeletedByModeratorEventCreateInput = {
  actor: Scalars['JSONObject']
  channelId: Scalars['Float']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale: Scalars['String']
}

export type ChannelDeletedByModeratorEventEdge = {
  cursor: Scalars['String']
  node: ChannelDeletedByModeratorEvent
}

export enum ChannelDeletedByModeratorEventOrderByInput {
  ChannelIdAsc = 'channelId_ASC',
  ChannelIdDesc = 'channelId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelDeletedByModeratorEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  channelId?: Maybe<Scalars['Float']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
}

export type ChannelDeletedByModeratorEventWhereInput = {
  AND?: Maybe<Array<ChannelDeletedByModeratorEventWhereInput>>
  NOT?: Maybe<Array<ChannelDeletedByModeratorEventWhereInput>>
  OR?: Maybe<Array<ChannelDeletedByModeratorEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  channelId_eq?: Maybe<Scalars['Int']>
  channelId_gt?: Maybe<Scalars['Int']>
  channelId_gte?: Maybe<Scalars['Int']>
  channelId_in?: Maybe<Array<Scalars['Int']>>
  channelId_lt?: Maybe<Scalars['Int']>
  channelId_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ChannelDeletedByModeratorEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ChannelEdge = {
  cursor: Scalars['String']
  node: Channel
}

export type ChannelFollowsInfo = {
  follows: Scalars['Int']
  id: Scalars['ID']
}

export type ChannelFundsWithdrawnEvent = BaseGraphQlObject &
  Event & {
    account?: Maybe<Scalars['String']>
    actor: ContentActor
    amount: Scalars['BigInt']
    channel: Channel
    channelId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ChannelFundsWithdrawnEventConnection = {
  edges: Array<ChannelFundsWithdrawnEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelFundsWithdrawnEventCreateInput = {
  account?: Maybe<Scalars['String']>
  actor: Scalars['JSONObject']
  amount: Scalars['String']
  channel: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type ChannelFundsWithdrawnEventEdge = {
  cursor: Scalars['String']
  node: ChannelFundsWithdrawnEvent
}

export enum ChannelFundsWithdrawnEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  ChannelAsc = 'channel_ASC',
  ChannelDesc = 'channel_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelFundsWithdrawnEventUpdateInput = {
  account?: Maybe<Scalars['String']>
  actor?: Maybe<Scalars['JSONObject']>
  amount?: Maybe<Scalars['String']>
  channel?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type ChannelFundsWithdrawnEventWhereInput = {
  AND?: Maybe<Array<ChannelFundsWithdrawnEventWhereInput>>
  NOT?: Maybe<Array<ChannelFundsWithdrawnEventWhereInput>>
  OR?: Maybe<Array<ChannelFundsWithdrawnEventWhereInput>>
  account_contains?: Maybe<Scalars['String']>
  account_endsWith?: Maybe<Scalars['String']>
  account_eq?: Maybe<Scalars['String']>
  account_in?: Maybe<Array<Scalars['String']>>
  account_startsWith?: Maybe<Scalars['String']>
  actor_json?: Maybe<Scalars['JSONObject']>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  channel?: Maybe<ChannelWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ChannelFundsWithdrawnEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ChannelNftCollectors = BaseGraphQlObject & {
  amount: Scalars['Int']
  channel: Channel
  channelId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  curatorGroup?: Maybe<CuratorGroup>
  curatorGroupId?: Maybe<Scalars['String']>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  lastIncreaseAt: Scalars['DateTime']
  member?: Maybe<Membership>
  memberId?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ChannelNftCollectorsConnection = {
  edges: Array<ChannelNftCollectorsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelNftCollectorsCreateInput = {
  amount: Scalars['Float']
  channel: Scalars['ID']
  curatorGroup?: Maybe<Scalars['ID']>
  lastIncreaseAt: Scalars['DateTime']
  member?: Maybe<Scalars['ID']>
}

export type ChannelNftCollectorsEdge = {
  cursor: Scalars['String']
  node: ChannelNftCollectors
}

export enum ChannelNftCollectorsOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  ChannelAsc = 'channel_ASC',
  ChannelDesc = 'channel_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CuratorGroupAsc = 'curatorGroup_ASC',
  CuratorGroupDesc = 'curatorGroup_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  LastIncreaseAtAsc = 'lastIncreaseAt_ASC',
  LastIncreaseAtDesc = 'lastIncreaseAt_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelNftCollectorsUpdateInput = {
  amount?: Maybe<Scalars['Float']>
  channel?: Maybe<Scalars['ID']>
  curatorGroup?: Maybe<Scalars['ID']>
  lastIncreaseAt?: Maybe<Scalars['DateTime']>
  member?: Maybe<Scalars['ID']>
}

export type ChannelNftCollectorsWhereInput = {
  AND?: Maybe<Array<ChannelNftCollectorsWhereInput>>
  NOT?: Maybe<Array<ChannelNftCollectorsWhereInput>>
  OR?: Maybe<Array<ChannelNftCollectorsWhereInput>>
  amount_eq?: Maybe<Scalars['Int']>
  amount_gt?: Maybe<Scalars['Int']>
  amount_gte?: Maybe<Scalars['Int']>
  amount_in?: Maybe<Array<Scalars['Int']>>
  amount_lt?: Maybe<Scalars['Int']>
  amount_lte?: Maybe<Scalars['Int']>
  channel?: Maybe<ChannelWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  curatorGroup?: Maybe<CuratorGroupWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  lastIncreaseAt_eq?: Maybe<Scalars['DateTime']>
  lastIncreaseAt_gt?: Maybe<Scalars['DateTime']>
  lastIncreaseAt_gte?: Maybe<Scalars['DateTime']>
  lastIncreaseAt_lt?: Maybe<Scalars['DateTime']>
  lastIncreaseAt_lte?: Maybe<Scalars['DateTime']>
  member?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ChannelNftCollectorsWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ChannelOrderByInput {
  ActiveVideosCounterAsc = 'activeVideosCounter_ASC',
  ActiveVideosCounterDesc = 'activeVideosCounter_DESC',
  AvatarPhotoAsc = 'avatarPhoto_ASC',
  AvatarPhotoDesc = 'avatarPhoto_DESC',
  ChannelStateBloatBondAsc = 'channelStateBloatBond_ASC',
  ChannelStateBloatBondDesc = 'channelStateBloatBond_DESC',
  CoverPhotoAsc = 'coverPhoto_ASC',
  CoverPhotoDesc = 'coverPhoto_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  CumulativeRewardClaimedAsc = 'cumulativeRewardClaimed_ASC',
  CumulativeRewardClaimedDesc = 'cumulativeRewardClaimed_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EntryAppAsc = 'entryApp_ASC',
  EntryAppDesc = 'entryApp_DESC',
  IsCensoredAsc = 'isCensored_ASC',
  IsCensoredDesc = 'isCensored_DESC',
  IsPublicAsc = 'isPublic_ASC',
  IsPublicDesc = 'isPublic_DESC',
  LanguageAsc = 'language_ASC',
  LanguageDesc = 'language_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  PrivilegeLevelAsc = 'privilegeLevel_ASC',
  PrivilegeLevelDesc = 'privilegeLevel_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TotalVideosCreatedAsc = 'totalVideosCreated_ASC',
  TotalVideosCreatedDesc = 'totalVideosCreated_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelPaymentMadeEvent = BaseGraphQlObject & {
  amount: Scalars['BigInt']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  network: Network
  payeeChannel?: Maybe<Channel>
  payeeChannelId?: Maybe<Scalars['String']>
  payer: Membership
  payerId: Scalars['String']
  paymentContext?: Maybe<PaymentContext>
  rationale?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ChannelPaymentMadeEventConnection = {
  edges: Array<ChannelPaymentMadeEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelPaymentMadeEventCreateInput = {
  amount: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  payeeChannel?: Maybe<Scalars['ID']>
  payer: Scalars['ID']
  paymentContext: Scalars['JSONObject']
  rationale?: Maybe<Scalars['String']>
}

export type ChannelPaymentMadeEventEdge = {
  cursor: Scalars['String']
  node: ChannelPaymentMadeEvent
}

export enum ChannelPaymentMadeEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PayeeChannelAsc = 'payeeChannel_ASC',
  PayeeChannelDesc = 'payeeChannel_DESC',
  PayerAsc = 'payer_ASC',
  PayerDesc = 'payer_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelPaymentMadeEventUpdateInput = {
  amount?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  payeeChannel?: Maybe<Scalars['ID']>
  payer?: Maybe<Scalars['ID']>
  paymentContext?: Maybe<Scalars['JSONObject']>
  rationale?: Maybe<Scalars['String']>
}

export type ChannelPaymentMadeEventWhereInput = {
  AND?: Maybe<Array<ChannelPaymentMadeEventWhereInput>>
  NOT?: Maybe<Array<ChannelPaymentMadeEventWhereInput>>
  OR?: Maybe<Array<ChannelPaymentMadeEventWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  payeeChannel?: Maybe<ChannelWhereInput>
  payer?: Maybe<MembershipWhereInput>
  paymentContext_json?: Maybe<Scalars['JSONObject']>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ChannelPaymentMadeEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ChannelPayoutsUpdatedEvent = BaseGraphQlObject & {
  channelCashoutsEnabled?: Maybe<Scalars['Boolean']>
  commitment?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  maxCashoutAllowed?: Maybe<Scalars['BigInt']>
  minCashoutAllowed?: Maybe<Scalars['BigInt']>
  network: Network
  payloadDataObject?: Maybe<StorageDataObject>
  payloadDataObjectId?: Maybe<Scalars['String']>
  payloadHash?: Maybe<Scalars['String']>
  payloadSize?: Maybe<Scalars['BigInt']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ChannelPayoutsUpdatedEventConnection = {
  edges: Array<ChannelPayoutsUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelPayoutsUpdatedEventCreateInput = {
  channelCashoutsEnabled?: Maybe<Scalars['Boolean']>
  commitment?: Maybe<Scalars['String']>
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  maxCashoutAllowed?: Maybe<Scalars['String']>
  minCashoutAllowed?: Maybe<Scalars['String']>
  network: Network
  payloadDataObject?: Maybe<Scalars['ID']>
  payloadHash?: Maybe<Scalars['String']>
  payloadSize?: Maybe<Scalars['String']>
}

export type ChannelPayoutsUpdatedEventEdge = {
  cursor: Scalars['String']
  node: ChannelPayoutsUpdatedEvent
}

export enum ChannelPayoutsUpdatedEventOrderByInput {
  ChannelCashoutsEnabledAsc = 'channelCashoutsEnabled_ASC',
  ChannelCashoutsEnabledDesc = 'channelCashoutsEnabled_DESC',
  CommitmentAsc = 'commitment_ASC',
  CommitmentDesc = 'commitment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MaxCashoutAllowedAsc = 'maxCashoutAllowed_ASC',
  MaxCashoutAllowedDesc = 'maxCashoutAllowed_DESC',
  MinCashoutAllowedAsc = 'minCashoutAllowed_ASC',
  MinCashoutAllowedDesc = 'minCashoutAllowed_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PayloadDataObjectAsc = 'payloadDataObject_ASC',
  PayloadDataObjectDesc = 'payloadDataObject_DESC',
  PayloadHashAsc = 'payloadHash_ASC',
  PayloadHashDesc = 'payloadHash_DESC',
  PayloadSizeAsc = 'payloadSize_ASC',
  PayloadSizeDesc = 'payloadSize_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelPayoutsUpdatedEventUpdateInput = {
  channelCashoutsEnabled?: Maybe<Scalars['Boolean']>
  commitment?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  maxCashoutAllowed?: Maybe<Scalars['String']>
  minCashoutAllowed?: Maybe<Scalars['String']>
  network?: Maybe<Network>
  payloadDataObject?: Maybe<Scalars['ID']>
  payloadHash?: Maybe<Scalars['String']>
  payloadSize?: Maybe<Scalars['String']>
}

export type ChannelPayoutsUpdatedEventWhereInput = {
  AND?: Maybe<Array<ChannelPayoutsUpdatedEventWhereInput>>
  NOT?: Maybe<Array<ChannelPayoutsUpdatedEventWhereInput>>
  OR?: Maybe<Array<ChannelPayoutsUpdatedEventWhereInput>>
  channelCashoutsEnabled_eq?: Maybe<Scalars['Boolean']>
  channelCashoutsEnabled_in?: Maybe<Array<Scalars['Boolean']>>
  commitment_contains?: Maybe<Scalars['String']>
  commitment_endsWith?: Maybe<Scalars['String']>
  commitment_eq?: Maybe<Scalars['String']>
  commitment_in?: Maybe<Array<Scalars['String']>>
  commitment_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  maxCashoutAllowed_eq?: Maybe<Scalars['BigInt']>
  maxCashoutAllowed_gt?: Maybe<Scalars['BigInt']>
  maxCashoutAllowed_gte?: Maybe<Scalars['BigInt']>
  maxCashoutAllowed_in?: Maybe<Array<Scalars['BigInt']>>
  maxCashoutAllowed_lt?: Maybe<Scalars['BigInt']>
  maxCashoutAllowed_lte?: Maybe<Scalars['BigInt']>
  minCashoutAllowed_eq?: Maybe<Scalars['BigInt']>
  minCashoutAllowed_gt?: Maybe<Scalars['BigInt']>
  minCashoutAllowed_gte?: Maybe<Scalars['BigInt']>
  minCashoutAllowed_in?: Maybe<Array<Scalars['BigInt']>>
  minCashoutAllowed_lt?: Maybe<Scalars['BigInt']>
  minCashoutAllowed_lte?: Maybe<Scalars['BigInt']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  payloadDataObject?: Maybe<StorageDataObjectWhereInput>
  payloadHash_contains?: Maybe<Scalars['String']>
  payloadHash_endsWith?: Maybe<Scalars['String']>
  payloadHash_eq?: Maybe<Scalars['String']>
  payloadHash_in?: Maybe<Array<Scalars['String']>>
  payloadHash_startsWith?: Maybe<Scalars['String']>
  payloadSize_eq?: Maybe<Scalars['BigInt']>
  payloadSize_gt?: Maybe<Scalars['BigInt']>
  payloadSize_gte?: Maybe<Scalars['BigInt']>
  payloadSize_in?: Maybe<Array<Scalars['BigInt']>>
  payloadSize_lt?: Maybe<Scalars['BigInt']>
  payloadSize_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ChannelPayoutsUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ChannelReportInfo = {
  channelId: Scalars['ID']
  createdAt: Scalars['DateTime']
  id: Scalars['ID']
  rationale: Scalars['String']
  reporterIp: Scalars['String']
}

export enum ChannelReportOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
}

export type ChannelReportsWhereInput = {
  channelId?: Maybe<Scalars['ID']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  reporterIp?: Maybe<Scalars['String']>
}

export type ChannelRewardClaimedAndWithdrawnEvent = BaseGraphQlObject &
  Event & {
    account?: Maybe<Scalars['String']>
    actor: ContentActor
    amount: Scalars['BigInt']
    channel: Channel
    channelId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ChannelRewardClaimedAndWithdrawnEventConnection = {
  edges: Array<ChannelRewardClaimedAndWithdrawnEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelRewardClaimedAndWithdrawnEventCreateInput = {
  account?: Maybe<Scalars['String']>
  actor: Scalars['JSONObject']
  amount: Scalars['String']
  channel: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type ChannelRewardClaimedAndWithdrawnEventEdge = {
  cursor: Scalars['String']
  node: ChannelRewardClaimedAndWithdrawnEvent
}

export enum ChannelRewardClaimedAndWithdrawnEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  ChannelAsc = 'channel_ASC',
  ChannelDesc = 'channel_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelRewardClaimedAndWithdrawnEventUpdateInput = {
  account?: Maybe<Scalars['String']>
  actor?: Maybe<Scalars['JSONObject']>
  amount?: Maybe<Scalars['String']>
  channel?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type ChannelRewardClaimedAndWithdrawnEventWhereInput = {
  AND?: Maybe<Array<ChannelRewardClaimedAndWithdrawnEventWhereInput>>
  NOT?: Maybe<Array<ChannelRewardClaimedAndWithdrawnEventWhereInput>>
  OR?: Maybe<Array<ChannelRewardClaimedAndWithdrawnEventWhereInput>>
  account_contains?: Maybe<Scalars['String']>
  account_endsWith?: Maybe<Scalars['String']>
  account_eq?: Maybe<Scalars['String']>
  account_in?: Maybe<Array<Scalars['String']>>
  account_startsWith?: Maybe<Scalars['String']>
  actor_json?: Maybe<Scalars['JSONObject']>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  channel?: Maybe<ChannelWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ChannelRewardClaimedAndWithdrawnEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ChannelRewardClaimedEvent = BaseGraphQlObject &
  Event & {
    amount: Scalars['BigInt']
    channel: Channel
    channelId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ChannelRewardClaimedEventConnection = {
  edges: Array<ChannelRewardClaimedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelRewardClaimedEventCreateInput = {
  amount: Scalars['String']
  channel: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type ChannelRewardClaimedEventEdge = {
  cursor: Scalars['String']
  node: ChannelRewardClaimedEvent
}

export enum ChannelRewardClaimedEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  ChannelAsc = 'channel_ASC',
  ChannelDesc = 'channel_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelRewardClaimedEventUpdateInput = {
  amount?: Maybe<Scalars['String']>
  channel?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type ChannelRewardClaimedEventWhereInput = {
  AND?: Maybe<Array<ChannelRewardClaimedEventWhereInput>>
  NOT?: Maybe<Array<ChannelRewardClaimedEventWhereInput>>
  OR?: Maybe<Array<ChannelRewardClaimedEventWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  channel?: Maybe<ChannelWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ChannelRewardClaimedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ChannelUpdateInput = {
  activeVideosCounter?: Maybe<Scalars['Float']>
  avatarPhoto?: Maybe<Scalars['ID']>
  channelStateBloatBond?: Maybe<Scalars['String']>
  coverPhoto?: Maybe<Scalars['ID']>
  createdInBlock?: Maybe<Scalars['Float']>
  cumulativeRewardClaimed?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  entryApp?: Maybe<Scalars['ID']>
  isCensored?: Maybe<Scalars['Boolean']>
  isPublic?: Maybe<Scalars['Boolean']>
  language?: Maybe<Scalars['ID']>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  privilegeLevel?: Maybe<Scalars['Float']>
  rewardAccount?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  totalVideosCreated?: Maybe<Scalars['Float']>
}

export type ChannelVisibilitySetByModeratorEvent = BaseGraphQlObject & {
  actor: ContentActor
  channelId: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  isHidden: Scalars['Boolean']
  network: Network
  rationale: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ChannelVisibilitySetByModeratorEventConnection = {
  edges: Array<ChannelVisibilitySetByModeratorEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelVisibilitySetByModeratorEventCreateInput = {
  actor: Scalars['JSONObject']
  channelId: Scalars['Float']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  isHidden: Scalars['Boolean']
  network: Network
  rationale: Scalars['String']
}

export type ChannelVisibilitySetByModeratorEventEdge = {
  cursor: Scalars['String']
  node: ChannelVisibilitySetByModeratorEvent
}

export enum ChannelVisibilitySetByModeratorEventOrderByInput {
  ChannelIdAsc = 'channelId_ASC',
  ChannelIdDesc = 'channelId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelVisibilitySetByModeratorEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  channelId?: Maybe<Scalars['Float']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  isHidden?: Maybe<Scalars['Boolean']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
}

export type ChannelVisibilitySetByModeratorEventWhereInput = {
  AND?: Maybe<Array<ChannelVisibilitySetByModeratorEventWhereInput>>
  NOT?: Maybe<Array<ChannelVisibilitySetByModeratorEventWhereInput>>
  OR?: Maybe<Array<ChannelVisibilitySetByModeratorEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  channelId_eq?: Maybe<Scalars['Int']>
  channelId_gt?: Maybe<Scalars['Int']>
  channelId_gte?: Maybe<Scalars['Int']>
  channelId_in?: Maybe<Array<Scalars['Int']>>
  channelId_lt?: Maybe<Scalars['Int']>
  channelId_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  isHidden_eq?: Maybe<Scalars['Boolean']>
  isHidden_in?: Maybe<Array<Scalars['Boolean']>>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ChannelVisibilitySetByModeratorEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ChannelWhereInput = {
  AND?: Maybe<Array<ChannelWhereInput>>
  NOT?: Maybe<Array<ChannelWhereInput>>
  OR?: Maybe<Array<ChannelWhereInput>>
  activeVideosCounter_eq?: Maybe<Scalars['Int']>
  activeVideosCounter_gt?: Maybe<Scalars['Int']>
  activeVideosCounter_gte?: Maybe<Scalars['Int']>
  activeVideosCounter_in?: Maybe<Array<Scalars['Int']>>
  activeVideosCounter_lt?: Maybe<Scalars['Int']>
  activeVideosCounter_lte?: Maybe<Scalars['Int']>
  avatarPhoto?: Maybe<StorageDataObjectWhereInput>
  bannedMembers_every?: Maybe<MembershipWhereInput>
  bannedMembers_none?: Maybe<MembershipWhereInput>
  bannedMembers_some?: Maybe<MembershipWhereInput>
  channelNftCollectors_every?: Maybe<ChannelNftCollectorsWhereInput>
  channelNftCollectors_none?: Maybe<ChannelNftCollectorsWhereInput>
  channelNftCollectors_some?: Maybe<ChannelNftCollectorsWhereInput>
  channelStateBloatBond_eq?: Maybe<Scalars['BigInt']>
  channelStateBloatBond_gt?: Maybe<Scalars['BigInt']>
  channelStateBloatBond_gte?: Maybe<Scalars['BigInt']>
  channelStateBloatBond_in?: Maybe<Array<Scalars['BigInt']>>
  channelStateBloatBond_lt?: Maybe<Scalars['BigInt']>
  channelStateBloatBond_lte?: Maybe<Scalars['BigInt']>
  channelfundswithdrawneventchannel_every?: Maybe<ChannelFundsWithdrawnEventWhereInput>
  channelfundswithdrawneventchannel_none?: Maybe<ChannelFundsWithdrawnEventWhereInput>
  channelfundswithdrawneventchannel_some?: Maybe<ChannelFundsWithdrawnEventWhereInput>
  channelpaymentmadeeventpayeeChannel_every?: Maybe<ChannelPaymentMadeEventWhereInput>
  channelpaymentmadeeventpayeeChannel_none?: Maybe<ChannelPaymentMadeEventWhereInput>
  channelpaymentmadeeventpayeeChannel_some?: Maybe<ChannelPaymentMadeEventWhereInput>
  channelrewardclaimedandwithdrawneventchannel_every?: Maybe<ChannelRewardClaimedAndWithdrawnEventWhereInput>
  channelrewardclaimedandwithdrawneventchannel_none?: Maybe<ChannelRewardClaimedAndWithdrawnEventWhereInput>
  channelrewardclaimedandwithdrawneventchannel_some?: Maybe<ChannelRewardClaimedAndWithdrawnEventWhereInput>
  claimedRewards_every?: Maybe<ChannelRewardClaimedEventWhereInput>
  claimedRewards_none?: Maybe<ChannelRewardClaimedEventWhereInput>
  claimedRewards_some?: Maybe<ChannelRewardClaimedEventWhereInput>
  collaborators_every?: Maybe<CollaboratorWhereInput>
  collaborators_none?: Maybe<CollaboratorWhereInput>
  collaborators_some?: Maybe<CollaboratorWhereInput>
  commentcreatedeventvideoChannel_every?: Maybe<CommentCreatedEventWhereInput>
  commentcreatedeventvideoChannel_none?: Maybe<CommentCreatedEventWhereInput>
  commentcreatedeventvideoChannel_some?: Maybe<CommentCreatedEventWhereInput>
  commentdeletedeventvideoChannel_every?: Maybe<CommentDeletedEventWhereInput>
  commentdeletedeventvideoChannel_none?: Maybe<CommentDeletedEventWhereInput>
  commentdeletedeventvideoChannel_some?: Maybe<CommentDeletedEventWhereInput>
  commentmoderatedeventvideoChannel_every?: Maybe<CommentModeratedEventWhereInput>
  commentmoderatedeventvideoChannel_none?: Maybe<CommentModeratedEventWhereInput>
  commentmoderatedeventvideoChannel_some?: Maybe<CommentModeratedEventWhereInput>
  commentpinnedeventvideoChannel_every?: Maybe<CommentPinnedEventWhereInput>
  commentpinnedeventvideoChannel_none?: Maybe<CommentPinnedEventWhereInput>
  commentpinnedeventvideoChannel_some?: Maybe<CommentPinnedEventWhereInput>
  commentreactedeventvideoChannel_every?: Maybe<CommentReactedEventWhereInput>
  commentreactedeventvideoChannel_none?: Maybe<CommentReactedEventWhereInput>
  commentreactedeventvideoChannel_some?: Maybe<CommentReactedEventWhereInput>
  commenttextupdatedeventvideoChannel_every?: Maybe<CommentTextUpdatedEventWhereInput>
  commenttextupdatedeventvideoChannel_none?: Maybe<CommentTextUpdatedEventWhereInput>
  commenttextupdatedeventvideoChannel_some?: Maybe<CommentTextUpdatedEventWhereInput>
  coverPhoto?: Maybe<StorageDataObjectWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInBlock_eq?: Maybe<Scalars['Int']>
  createdInBlock_gt?: Maybe<Scalars['Int']>
  createdInBlock_gte?: Maybe<Scalars['Int']>
  createdInBlock_in?: Maybe<Array<Scalars['Int']>>
  createdInBlock_lt?: Maybe<Scalars['Int']>
  createdInBlock_lte?: Maybe<Scalars['Int']>
  cumulativeRewardClaimed_eq?: Maybe<Scalars['BigInt']>
  cumulativeRewardClaimed_gt?: Maybe<Scalars['BigInt']>
  cumulativeRewardClaimed_gte?: Maybe<Scalars['BigInt']>
  cumulativeRewardClaimed_in?: Maybe<Array<Scalars['BigInt']>>
  cumulativeRewardClaimed_lt?: Maybe<Scalars['BigInt']>
  cumulativeRewardClaimed_lte?: Maybe<Scalars['BigInt']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  entryApp?: Maybe<AppWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isCensored_eq?: Maybe<Scalars['Boolean']>
  isCensored_in?: Maybe<Array<Scalars['Boolean']>>
  isPublic_eq?: Maybe<Scalars['Boolean']>
  isPublic_in?: Maybe<Array<Scalars['Boolean']>>
  language?: Maybe<LanguageWhereInput>
  memberbannedfromchanneleventchannel_every?: Maybe<MemberBannedFromChannelEventWhereInput>
  memberbannedfromchanneleventchannel_none?: Maybe<MemberBannedFromChannelEventWhereInput>
  memberbannedfromchanneleventchannel_some?: Maybe<MemberBannedFromChannelEventWhereInput>
  ownednftcreatorChannel_every?: Maybe<OwnedNftWhereInput>
  ownednftcreatorChannel_none?: Maybe<OwnedNftWhereInput>
  ownednftcreatorChannel_some?: Maybe<OwnedNftWhereInput>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  privilegeLevel_eq?: Maybe<Scalars['Int']>
  privilegeLevel_gt?: Maybe<Scalars['Int']>
  privilegeLevel_gte?: Maybe<Scalars['Int']>
  privilegeLevel_in?: Maybe<Array<Scalars['Int']>>
  privilegeLevel_lt?: Maybe<Scalars['Int']>
  privilegeLevel_lte?: Maybe<Scalars['Int']>
  rewardAccount_contains?: Maybe<Scalars['String']>
  rewardAccount_endsWith?: Maybe<Scalars['String']>
  rewardAccount_eq?: Maybe<Scalars['String']>
  rewardAccount_in?: Maybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: Maybe<Scalars['String']>
  title_contains?: Maybe<Scalars['String']>
  title_endsWith?: Maybe<Scalars['String']>
  title_eq?: Maybe<Scalars['String']>
  title_in?: Maybe<Array<Scalars['String']>>
  title_startsWith?: Maybe<Scalars['String']>
  totalVideosCreated_eq?: Maybe<Scalars['Int']>
  totalVideosCreated_gt?: Maybe<Scalars['Int']>
  totalVideosCreated_gte?: Maybe<Scalars['Int']>
  totalVideosCreated_in?: Maybe<Array<Scalars['Int']>>
  totalVideosCreated_lt?: Maybe<Scalars['Int']>
  totalVideosCreated_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videoreactedeventvideoChannel_every?: Maybe<VideoReactedEventWhereInput>
  videoreactedeventvideoChannel_none?: Maybe<VideoReactedEventWhereInput>
  videoreactedeventvideoChannel_some?: Maybe<VideoReactedEventWhereInput>
  videos_every?: Maybe<VideoWhereInput>
  videos_none?: Maybe<VideoWhereInput>
  videos_some?: Maybe<VideoWhereInput>
}

export type ChannelWhereUniqueInput = {
  id: Scalars['ID']
}

export type Collaborator = BaseGraphQlObject & {
  channel: Channel
  channelId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  member: Membership
  memberId: Scalars['String']
  permissions: Array<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type CollaboratorConnection = {
  edges: Array<CollaboratorEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CollaboratorCreateInput = {
  channel: Scalars['ID']
  member: Scalars['ID']
  permissions: Array<Scalars['String']>
}

export type CollaboratorEdge = {
  cursor: Scalars['String']
  node: Collaborator
}

export enum CollaboratorOrderByInput {
  ChannelAsc = 'channel_ASC',
  ChannelDesc = 'channel_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CollaboratorUpdateInput = {
  channel?: Maybe<Scalars['ID']>
  member?: Maybe<Scalars['ID']>
  permissions?: Maybe<Array<Scalars['String']>>
}

export type CollaboratorWhereInput = {
  AND?: Maybe<Array<CollaboratorWhereInput>>
  NOT?: Maybe<Array<CollaboratorWhereInput>>
  OR?: Maybe<Array<CollaboratorWhereInput>>
  channel?: Maybe<ChannelWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  member?: Maybe<MembershipWhereInput>
  permissions_containsAll?: Maybe<Array<Scalars['String']>>
  permissions_containsAny?: Maybe<Array<Scalars['String']>>
  permissions_containsNone?: Maybe<Array<Scalars['String']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CollaboratorWhereUniqueInput = {
  id: Scalars['ID']
}

export type Comment = BaseGraphQlObject & {
  author: Membership
  authorId: Scalars['String']
  commentcreatedeventcomment?: Maybe<Array<CommentCreatedEvent>>
  commentparentComment?: Maybe<Array<Comment>>
  commentpinnedeventcomment?: Maybe<Array<CommentPinnedEvent>>
  commentreactedeventcomment?: Maybe<Array<CommentReactedEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  deletedInEvent?: Maybe<CommentDeletedEvent>
  edits: Array<CommentTextUpdatedEvent>
  id: Scalars['ID']
  isEdited: Scalars['Boolean']
  moderatedInEvent?: Maybe<CommentModeratedEvent>
  parentComment?: Maybe<Comment>
  parentCommentId?: Maybe<Scalars['String']>
  reactions: Array<CommentReaction>
  reactionsAndRepliesCount: Scalars['Int']
  reactionsCount: Scalars['Int']
  reactionsCountByReactionId: Array<CommentReactionsCountByReactionId>
  repliesCount: Scalars['Int']
  status: CommentStatus
  text: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  video: Video
  videoId: Scalars['String']
}

export type CommentConnection = {
  edges: Array<CommentEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentCreateInput = {
  author: Scalars['ID']
  isEdited: Scalars['Boolean']
  parentComment?: Maybe<Scalars['ID']>
  reactionsAndRepliesCount: Scalars['Float']
  reactionsCount: Scalars['Float']
  repliesCount: Scalars['Float']
  status: CommentStatus
  text: Scalars['String']
  video: Scalars['ID']
}

export type CommentCreatedEvent = BaseGraphQlObject &
  Event & {
    comment: Comment
    commentId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    parentCommentAuthor?: Maybe<Membership>
    parentCommentAuthorId?: Maybe<Scalars['String']>
    text: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoChannel: Channel
    videoChannelId: Scalars['String']
    videoId: Scalars['String']
  }

export type CommentCreatedEventConnection = {
  edges: Array<CommentCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentCreatedEventCreateInput = {
  comment: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  parentCommentAuthor?: Maybe<Scalars['ID']>
  text: Scalars['String']
  video: Scalars['ID']
  videoChannel: Scalars['ID']
}

export type CommentCreatedEventEdge = {
  cursor: Scalars['String']
  node: CommentCreatedEvent
}

export enum CommentCreatedEventOrderByInput {
  CommentAsc = 'comment_ASC',
  CommentDesc = 'comment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ParentCommentAuthorAsc = 'parentCommentAuthor_ASC',
  ParentCommentAuthorDesc = 'parentCommentAuthor_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoChannelAsc = 'videoChannel_ASC',
  VideoChannelDesc = 'videoChannel_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type CommentCreatedEventUpdateInput = {
  comment?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  parentCommentAuthor?: Maybe<Scalars['ID']>
  text?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
  videoChannel?: Maybe<Scalars['ID']>
}

export type CommentCreatedEventWhereInput = {
  AND?: Maybe<Array<CommentCreatedEventWhereInput>>
  NOT?: Maybe<Array<CommentCreatedEventWhereInput>>
  OR?: Maybe<Array<CommentCreatedEventWhereInput>>
  comment?: Maybe<CommentWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  parentCommentAuthor?: Maybe<MembershipWhereInput>
  text_contains?: Maybe<Scalars['String']>
  text_endsWith?: Maybe<Scalars['String']>
  text_eq?: Maybe<Scalars['String']>
  text_in?: Maybe<Array<Scalars['String']>>
  text_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  videoChannel?: Maybe<ChannelWhereInput>
}

export type CommentCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CommentDeletedEvent = BaseGraphQlObject &
  Event & {
    comment: Comment
    commentId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoChannel: Channel
    videoChannelId: Scalars['String']
    videoId: Scalars['String']
  }

export type CommentDeletedEventConnection = {
  edges: Array<CommentDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentDeletedEventCreateInput = {
  comment: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  video: Scalars['ID']
  videoChannel: Scalars['ID']
}

export type CommentDeletedEventEdge = {
  cursor: Scalars['String']
  node: CommentDeletedEvent
}

export enum CommentDeletedEventOrderByInput {
  CommentAsc = 'comment_ASC',
  CommentDesc = 'comment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoChannelAsc = 'videoChannel_ASC',
  VideoChannelDesc = 'videoChannel_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type CommentDeletedEventUpdateInput = {
  comment?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  video?: Maybe<Scalars['ID']>
  videoChannel?: Maybe<Scalars['ID']>
}

export type CommentDeletedEventWhereInput = {
  AND?: Maybe<Array<CommentDeletedEventWhereInput>>
  NOT?: Maybe<Array<CommentDeletedEventWhereInput>>
  OR?: Maybe<Array<CommentDeletedEventWhereInput>>
  comment?: Maybe<CommentWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  videoChannel?: Maybe<ChannelWhereInput>
}

export type CommentDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CommentEdge = {
  cursor: Scalars['String']
  node: Comment
}

export type CommentModeratedEvent = BaseGraphQlObject &
  Event & {
    actor: ContentActor
    comment: Comment
    commentId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    rationale: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoChannel: Channel
    videoChannelId: Scalars['String']
    videoId: Scalars['String']
  }

export type CommentModeratedEventConnection = {
  edges: Array<CommentModeratedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentModeratedEventCreateInput = {
  actor: Scalars['JSONObject']
  comment: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale: Scalars['String']
  video: Scalars['ID']
  videoChannel: Scalars['ID']
}

export type CommentModeratedEventEdge = {
  cursor: Scalars['String']
  node: CommentModeratedEvent
}

export enum CommentModeratedEventOrderByInput {
  CommentAsc = 'comment_ASC',
  CommentDesc = 'comment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoChannelAsc = 'videoChannel_ASC',
  VideoChannelDesc = 'videoChannel_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type CommentModeratedEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  comment?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
  videoChannel?: Maybe<Scalars['ID']>
}

export type CommentModeratedEventWhereInput = {
  AND?: Maybe<Array<CommentModeratedEventWhereInput>>
  NOT?: Maybe<Array<CommentModeratedEventWhereInput>>
  OR?: Maybe<Array<CommentModeratedEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  comment?: Maybe<CommentWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  videoChannel?: Maybe<ChannelWhereInput>
}

export type CommentModeratedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CommentOrderByInput {
  AuthorAsc = 'author_ASC',
  AuthorDesc = 'author_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IsEditedAsc = 'isEdited_ASC',
  IsEditedDesc = 'isEdited_DESC',
  ParentCommentAsc = 'parentComment_ASC',
  ParentCommentDesc = 'parentComment_DESC',
  ReactionsAndRepliesCountAsc = 'reactionsAndRepliesCount_ASC',
  ReactionsAndRepliesCountDesc = 'reactionsAndRepliesCount_DESC',
  ReactionsCountAsc = 'reactionsCount_ASC',
  ReactionsCountDesc = 'reactionsCount_DESC',
  RepliesCountAsc = 'repliesCount_ASC',
  RepliesCountDesc = 'repliesCount_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type CommentPinnedEvent = BaseGraphQlObject &
  Event & {
    action: Scalars['Boolean']
    comment: Comment
    commentId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoChannel: Channel
    videoChannelId: Scalars['String']
    videoId: Scalars['String']
  }

export type CommentPinnedEventConnection = {
  edges: Array<CommentPinnedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentPinnedEventCreateInput = {
  action: Scalars['Boolean']
  comment: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  video: Scalars['ID']
  videoChannel: Scalars['ID']
}

export type CommentPinnedEventEdge = {
  cursor: Scalars['String']
  node: CommentPinnedEvent
}

export enum CommentPinnedEventOrderByInput {
  ActionAsc = 'action_ASC',
  ActionDesc = 'action_DESC',
  CommentAsc = 'comment_ASC',
  CommentDesc = 'comment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoChannelAsc = 'videoChannel_ASC',
  VideoChannelDesc = 'videoChannel_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type CommentPinnedEventUpdateInput = {
  action?: Maybe<Scalars['Boolean']>
  comment?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  video?: Maybe<Scalars['ID']>
  videoChannel?: Maybe<Scalars['ID']>
}

export type CommentPinnedEventWhereInput = {
  AND?: Maybe<Array<CommentPinnedEventWhereInput>>
  NOT?: Maybe<Array<CommentPinnedEventWhereInput>>
  OR?: Maybe<Array<CommentPinnedEventWhereInput>>
  action_eq?: Maybe<Scalars['Boolean']>
  action_in?: Maybe<Array<Scalars['Boolean']>>
  comment?: Maybe<CommentWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  videoChannel?: Maybe<ChannelWhereInput>
}

export type CommentPinnedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CommentReactedEvent = BaseGraphQlObject &
  Event & {
    comment: Comment
    commentId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    reactingMember: Membership
    reactingMemberId: Scalars['String']
    reactionResult: Scalars['Int']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoChannel: Channel
    videoChannelId: Scalars['String']
    videoId: Scalars['String']
  }

export type CommentReactedEventConnection = {
  edges: Array<CommentReactedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentReactedEventCreateInput = {
  comment: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  reactingMember: Scalars['ID']
  reactionResult: Scalars['Float']
  video: Scalars['ID']
  videoChannel: Scalars['ID']
}

export type CommentReactedEventEdge = {
  cursor: Scalars['String']
  node: CommentReactedEvent
}

export enum CommentReactedEventOrderByInput {
  CommentAsc = 'comment_ASC',
  CommentDesc = 'comment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ReactingMemberAsc = 'reactingMember_ASC',
  ReactingMemberDesc = 'reactingMember_DESC',
  ReactionResultAsc = 'reactionResult_ASC',
  ReactionResultDesc = 'reactionResult_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoChannelAsc = 'videoChannel_ASC',
  VideoChannelDesc = 'videoChannel_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type CommentReactedEventUpdateInput = {
  comment?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  reactingMember?: Maybe<Scalars['ID']>
  reactionResult?: Maybe<Scalars['Float']>
  video?: Maybe<Scalars['ID']>
  videoChannel?: Maybe<Scalars['ID']>
}

export type CommentReactedEventWhereInput = {
  AND?: Maybe<Array<CommentReactedEventWhereInput>>
  NOT?: Maybe<Array<CommentReactedEventWhereInput>>
  OR?: Maybe<Array<CommentReactedEventWhereInput>>
  comment?: Maybe<CommentWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  reactingMember?: Maybe<MembershipWhereInput>
  reactionResult_eq?: Maybe<Scalars['Int']>
  reactionResult_gt?: Maybe<Scalars['Int']>
  reactionResult_gte?: Maybe<Scalars['Int']>
  reactionResult_in?: Maybe<Array<Scalars['Int']>>
  reactionResult_lt?: Maybe<Scalars['Int']>
  reactionResult_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  videoChannel?: Maybe<ChannelWhereInput>
}

export type CommentReactedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CommentReaction = BaseGraphQlObject & {
  comment: Comment
  commentId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  member: Membership
  memberId: Scalars['String']
  reactionId: Scalars['Int']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  video: Video
  videoId: Scalars['String']
}

export type CommentReactionConnection = {
  edges: Array<CommentReactionEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentReactionCreateInput = {
  comment: Scalars['ID']
  member: Scalars['ID']
  memberId: Scalars['String']
  reactionId: Scalars['Float']
  video: Scalars['ID']
}

export type CommentReactionEdge = {
  cursor: Scalars['String']
  node: CommentReaction
}

export enum CommentReactionOrderByInput {
  CommentAsc = 'comment_ASC',
  CommentDesc = 'comment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MemberIdAsc = 'memberId_ASC',
  MemberIdDesc = 'memberId_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  ReactionIdAsc = 'reactionId_ASC',
  ReactionIdDesc = 'reactionId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type CommentReactionUpdateInput = {
  comment?: Maybe<Scalars['ID']>
  member?: Maybe<Scalars['ID']>
  memberId?: Maybe<Scalars['String']>
  reactionId?: Maybe<Scalars['Float']>
  video?: Maybe<Scalars['ID']>
}

export type CommentReactionWhereInput = {
  AND?: Maybe<Array<CommentReactionWhereInput>>
  NOT?: Maybe<Array<CommentReactionWhereInput>>
  OR?: Maybe<Array<CommentReactionWhereInput>>
  comment?: Maybe<CommentWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  member?: Maybe<MembershipWhereInput>
  memberId_contains?: Maybe<Scalars['String']>
  memberId_endsWith?: Maybe<Scalars['String']>
  memberId_eq?: Maybe<Scalars['String']>
  memberId_in?: Maybe<Array<Scalars['String']>>
  memberId_startsWith?: Maybe<Scalars['String']>
  reactionId_eq?: Maybe<Scalars['Int']>
  reactionId_gt?: Maybe<Scalars['Int']>
  reactionId_gte?: Maybe<Scalars['Int']>
  reactionId_in?: Maybe<Array<Scalars['Int']>>
  reactionId_lt?: Maybe<Scalars['Int']>
  reactionId_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type CommentReactionWhereUniqueInput = {
  id: Scalars['ID']
}

export type CommentReactionsCountByReactionId = BaseGraphQlObject & {
  comment: Comment
  commentId: Scalars['String']
  count: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  reactionId: Scalars['Int']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  video: Video
  videoId: Scalars['String']
}

export type CommentReactionsCountByReactionIdConnection = {
  edges: Array<CommentReactionsCountByReactionIdEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentReactionsCountByReactionIdCreateInput = {
  comment: Scalars['ID']
  count: Scalars['Float']
  reactionId: Scalars['Float']
  video: Scalars['ID']
}

export type CommentReactionsCountByReactionIdEdge = {
  cursor: Scalars['String']
  node: CommentReactionsCountByReactionId
}

export enum CommentReactionsCountByReactionIdOrderByInput {
  CommentAsc = 'comment_ASC',
  CommentDesc = 'comment_DESC',
  CountAsc = 'count_ASC',
  CountDesc = 'count_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ReactionIdAsc = 'reactionId_ASC',
  ReactionIdDesc = 'reactionId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type CommentReactionsCountByReactionIdUpdateInput = {
  comment?: Maybe<Scalars['ID']>
  count?: Maybe<Scalars['Float']>
  reactionId?: Maybe<Scalars['Float']>
  video?: Maybe<Scalars['ID']>
}

export type CommentReactionsCountByReactionIdWhereInput = {
  AND?: Maybe<Array<CommentReactionsCountByReactionIdWhereInput>>
  NOT?: Maybe<Array<CommentReactionsCountByReactionIdWhereInput>>
  OR?: Maybe<Array<CommentReactionsCountByReactionIdWhereInput>>
  comment?: Maybe<CommentWhereInput>
  count_eq?: Maybe<Scalars['Int']>
  count_gt?: Maybe<Scalars['Int']>
  count_gte?: Maybe<Scalars['Int']>
  count_in?: Maybe<Array<Scalars['Int']>>
  count_lt?: Maybe<Scalars['Int']>
  count_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  reactionId_eq?: Maybe<Scalars['Int']>
  reactionId_gt?: Maybe<Scalars['Int']>
  reactionId_gte?: Maybe<Scalars['Int']>
  reactionId_in?: Maybe<Array<Scalars['Int']>>
  reactionId_lt?: Maybe<Scalars['Int']>
  reactionId_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type CommentReactionsCountByReactionIdWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CommentStatus {
  Deleted = 'DELETED',
  Moderated = 'MODERATED',
  Visible = 'VISIBLE',
}

export type CommentTextFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: CommentTextSearchResult
  rank: Scalars['Float']
}

export type CommentTextSearchResult = Comment

export type CommentTextUpdatedEvent = BaseGraphQlObject &
  Event & {
    comment: Comment
    commentId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newText: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoChannel: Channel
    videoChannelId: Scalars['String']
    videoId: Scalars['String']
  }

export type CommentTextUpdatedEventConnection = {
  edges: Array<CommentTextUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentTextUpdatedEventCreateInput = {
  comment: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newText: Scalars['String']
  video: Scalars['ID']
  videoChannel: Scalars['ID']
}

export type CommentTextUpdatedEventEdge = {
  cursor: Scalars['String']
  node: CommentTextUpdatedEvent
}

export enum CommentTextUpdatedEventOrderByInput {
  CommentAsc = 'comment_ASC',
  CommentDesc = 'comment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewTextAsc = 'newText_ASC',
  NewTextDesc = 'newText_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoChannelAsc = 'videoChannel_ASC',
  VideoChannelDesc = 'videoChannel_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type CommentTextUpdatedEventUpdateInput = {
  comment?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newText?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
  videoChannel?: Maybe<Scalars['ID']>
}

export type CommentTextUpdatedEventWhereInput = {
  AND?: Maybe<Array<CommentTextUpdatedEventWhereInput>>
  NOT?: Maybe<Array<CommentTextUpdatedEventWhereInput>>
  OR?: Maybe<Array<CommentTextUpdatedEventWhereInput>>
  comment?: Maybe<CommentWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newText_contains?: Maybe<Scalars['String']>
  newText_endsWith?: Maybe<Scalars['String']>
  newText_eq?: Maybe<Scalars['String']>
  newText_in?: Maybe<Array<Scalars['String']>>
  newText_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  videoChannel?: Maybe<ChannelWhereInput>
}

export type CommentTextUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CommentUpdateInput = {
  author?: Maybe<Scalars['ID']>
  isEdited?: Maybe<Scalars['Boolean']>
  parentComment?: Maybe<Scalars['ID']>
  reactionsAndRepliesCount?: Maybe<Scalars['Float']>
  reactionsCount?: Maybe<Scalars['Float']>
  repliesCount?: Maybe<Scalars['Float']>
  status?: Maybe<CommentStatus>
  text?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
}

export type CommentWhereInput = {
  AND?: Maybe<Array<CommentWhereInput>>
  NOT?: Maybe<Array<CommentWhereInput>>
  OR?: Maybe<Array<CommentWhereInput>>
  author?: Maybe<MembershipWhereInput>
  commentcreatedeventcomment_every?: Maybe<CommentCreatedEventWhereInput>
  commentcreatedeventcomment_none?: Maybe<CommentCreatedEventWhereInput>
  commentcreatedeventcomment_some?: Maybe<CommentCreatedEventWhereInput>
  commentparentComment_every?: Maybe<CommentWhereInput>
  commentparentComment_none?: Maybe<CommentWhereInput>
  commentparentComment_some?: Maybe<CommentWhereInput>
  commentpinnedeventcomment_every?: Maybe<CommentPinnedEventWhereInput>
  commentpinnedeventcomment_none?: Maybe<CommentPinnedEventWhereInput>
  commentpinnedeventcomment_some?: Maybe<CommentPinnedEventWhereInput>
  commentreactedeventcomment_every?: Maybe<CommentReactedEventWhereInput>
  commentreactedeventcomment_none?: Maybe<CommentReactedEventWhereInput>
  commentreactedeventcomment_some?: Maybe<CommentReactedEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  deletedInEvent?: Maybe<CommentDeletedEventWhereInput>
  edits_every?: Maybe<CommentTextUpdatedEventWhereInput>
  edits_none?: Maybe<CommentTextUpdatedEventWhereInput>
  edits_some?: Maybe<CommentTextUpdatedEventWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isEdited_eq?: Maybe<Scalars['Boolean']>
  isEdited_in?: Maybe<Array<Scalars['Boolean']>>
  moderatedInEvent?: Maybe<CommentModeratedEventWhereInput>
  parentComment?: Maybe<CommentWhereInput>
  reactionsAndRepliesCount_eq?: Maybe<Scalars['Int']>
  reactionsAndRepliesCount_gt?: Maybe<Scalars['Int']>
  reactionsAndRepliesCount_gte?: Maybe<Scalars['Int']>
  reactionsAndRepliesCount_in?: Maybe<Array<Scalars['Int']>>
  reactionsAndRepliesCount_lt?: Maybe<Scalars['Int']>
  reactionsAndRepliesCount_lte?: Maybe<Scalars['Int']>
  reactionsCountByReactionId_every?: Maybe<CommentReactionsCountByReactionIdWhereInput>
  reactionsCountByReactionId_none?: Maybe<CommentReactionsCountByReactionIdWhereInput>
  reactionsCountByReactionId_some?: Maybe<CommentReactionsCountByReactionIdWhereInput>
  reactionsCount_eq?: Maybe<Scalars['Int']>
  reactionsCount_gt?: Maybe<Scalars['Int']>
  reactionsCount_gte?: Maybe<Scalars['Int']>
  reactionsCount_in?: Maybe<Array<Scalars['Int']>>
  reactionsCount_lt?: Maybe<Scalars['Int']>
  reactionsCount_lte?: Maybe<Scalars['Int']>
  reactions_every?: Maybe<CommentReactionWhereInput>
  reactions_none?: Maybe<CommentReactionWhereInput>
  reactions_some?: Maybe<CommentReactionWhereInput>
  repliesCount_eq?: Maybe<Scalars['Int']>
  repliesCount_gt?: Maybe<Scalars['Int']>
  repliesCount_gte?: Maybe<Scalars['Int']>
  repliesCount_in?: Maybe<Array<Scalars['Int']>>
  repliesCount_lt?: Maybe<Scalars['Int']>
  repliesCount_lte?: Maybe<Scalars['Int']>
  status_eq?: Maybe<CommentStatus>
  status_in?: Maybe<Array<CommentStatus>>
  text_contains?: Maybe<Scalars['String']>
  text_endsWith?: Maybe<Scalars['String']>
  text_eq?: Maybe<Scalars['String']>
  text_in?: Maybe<Array<Scalars['String']>>
  text_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type CommentWhereUniqueInput = {
  id: Scalars['ID']
}

export type ContentActor = ContentActorCurator | ContentActorLead | ContentActorMember

export type ContentActorCurator = {
  curator?: Maybe<Curator>
  dummy?: Maybe<Scalars['Int']>
}

export type ContentActorLead = {
  dummy?: Maybe<Scalars['Int']>
}

export type ContentActorMember = {
  dummy?: Maybe<Scalars['Int']>
  member?: Maybe<Membership>
}

export enum Continent {
  Af = 'AF',
  An = 'AN',
  As = 'AS',
  Eu = 'EU',
  Na = 'NA',
  Oc = 'OC',
  Sa = 'SA',
}

export type CouncilBudgetFundedEvent = BaseGraphQlObject &
  Event & {
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    memberId: Scalars['Int']
    network: Network
    rationale: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CouncilBudgetFundedEventConnection = {
  edges: Array<CouncilBudgetFundedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CouncilBudgetFundedEventCreateInput = {
  amount: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  memberId: Scalars['Float']
  network: Network
  rationale: Scalars['String']
}

export type CouncilBudgetFundedEventEdge = {
  cursor: Scalars['String']
  node: CouncilBudgetFundedEvent
}

export enum CouncilBudgetFundedEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberIdAsc = 'memberId_ASC',
  MemberIdDesc = 'memberId_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CouncilBudgetFundedEventUpdateInput = {
  amount?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  memberId?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
}

export type CouncilBudgetFundedEventWhereInput = {
  AND?: Maybe<Array<CouncilBudgetFundedEventWhereInput>>
  NOT?: Maybe<Array<CouncilBudgetFundedEventWhereInput>>
  OR?: Maybe<Array<CouncilBudgetFundedEventWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  memberId_eq?: Maybe<Scalars['Int']>
  memberId_gt?: Maybe<Scalars['Int']>
  memberId_gte?: Maybe<Scalars['Int']>
  memberId_in?: Maybe<Array<Scalars['Int']>>
  memberId_lt?: Maybe<Scalars['Int']>
  memberId_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CouncilBudgetFundedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CouncilMember = BaseGraphQlObject & {
  accumulatedReward: Scalars['BigInt']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  electedInCouncil: ElectedCouncil
  electedInCouncilId: Scalars['String']
  id: Scalars['ID']
  lastPaymentBlock: Scalars['BigInt']
  member: Membership
  memberId: Scalars['String']
  rewardAccountId: Scalars['String']
  rewardpaymenteventcouncilMember?: Maybe<Array<RewardPaymentEvent>>
  stake: Scalars['BigInt']
  stakingAccountId: Scalars['String']
  unpaidReward: Scalars['BigInt']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type CouncilMemberConnection = {
  edges: Array<CouncilMemberEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CouncilMemberCreateInput = {
  accumulatedReward: Scalars['String']
  electedInCouncil: Scalars['ID']
  lastPaymentBlock: Scalars['String']
  member: Scalars['ID']
  rewardAccountId: Scalars['String']
  stake: Scalars['String']
  stakingAccountId: Scalars['String']
  unpaidReward: Scalars['String']
}

export type CouncilMemberEdge = {
  cursor: Scalars['String']
  node: CouncilMember
}

export enum CouncilMemberOrderByInput {
  AccumulatedRewardAsc = 'accumulatedReward_ASC',
  AccumulatedRewardDesc = 'accumulatedReward_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedInCouncilAsc = 'electedInCouncil_ASC',
  ElectedInCouncilDesc = 'electedInCouncil_DESC',
  LastPaymentBlockAsc = 'lastPaymentBlock_ASC',
  LastPaymentBlockDesc = 'lastPaymentBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  RewardAccountIdAsc = 'rewardAccountId_ASC',
  RewardAccountIdDesc = 'rewardAccountId_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StakingAccountIdAsc = 'stakingAccountId_ASC',
  StakingAccountIdDesc = 'stakingAccountId_DESC',
  UnpaidRewardAsc = 'unpaidReward_ASC',
  UnpaidRewardDesc = 'unpaidReward_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CouncilMemberUpdateInput = {
  accumulatedReward?: Maybe<Scalars['String']>
  electedInCouncil?: Maybe<Scalars['ID']>
  lastPaymentBlock?: Maybe<Scalars['String']>
  member?: Maybe<Scalars['ID']>
  rewardAccountId?: Maybe<Scalars['String']>
  stake?: Maybe<Scalars['String']>
  stakingAccountId?: Maybe<Scalars['String']>
  unpaidReward?: Maybe<Scalars['String']>
}

export type CouncilMemberWhereInput = {
  AND?: Maybe<Array<CouncilMemberWhereInput>>
  NOT?: Maybe<Array<CouncilMemberWhereInput>>
  OR?: Maybe<Array<CouncilMemberWhereInput>>
  accumulatedReward_eq?: Maybe<Scalars['BigInt']>
  accumulatedReward_gt?: Maybe<Scalars['BigInt']>
  accumulatedReward_gte?: Maybe<Scalars['BigInt']>
  accumulatedReward_in?: Maybe<Array<Scalars['BigInt']>>
  accumulatedReward_lt?: Maybe<Scalars['BigInt']>
  accumulatedReward_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electedInCouncil?: Maybe<ElectedCouncilWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  lastPaymentBlock_eq?: Maybe<Scalars['BigInt']>
  lastPaymentBlock_gt?: Maybe<Scalars['BigInt']>
  lastPaymentBlock_gte?: Maybe<Scalars['BigInt']>
  lastPaymentBlock_in?: Maybe<Array<Scalars['BigInt']>>
  lastPaymentBlock_lt?: Maybe<Scalars['BigInt']>
  lastPaymentBlock_lte?: Maybe<Scalars['BigInt']>
  member?: Maybe<MembershipWhereInput>
  rewardAccountId_contains?: Maybe<Scalars['String']>
  rewardAccountId_endsWith?: Maybe<Scalars['String']>
  rewardAccountId_eq?: Maybe<Scalars['String']>
  rewardAccountId_in?: Maybe<Array<Scalars['String']>>
  rewardAccountId_startsWith?: Maybe<Scalars['String']>
  rewardpaymenteventcouncilMember_every?: Maybe<RewardPaymentEventWhereInput>
  rewardpaymenteventcouncilMember_none?: Maybe<RewardPaymentEventWhereInput>
  rewardpaymenteventcouncilMember_some?: Maybe<RewardPaymentEventWhereInput>
  stake_eq?: Maybe<Scalars['BigInt']>
  stake_gt?: Maybe<Scalars['BigInt']>
  stake_gte?: Maybe<Scalars['BigInt']>
  stake_in?: Maybe<Array<Scalars['BigInt']>>
  stake_lt?: Maybe<Scalars['BigInt']>
  stake_lte?: Maybe<Scalars['BigInt']>
  stakingAccountId_contains?: Maybe<Scalars['String']>
  stakingAccountId_endsWith?: Maybe<Scalars['String']>
  stakingAccountId_eq?: Maybe<Scalars['String']>
  stakingAccountId_in?: Maybe<Array<Scalars['String']>>
  stakingAccountId_startsWith?: Maybe<Scalars['String']>
  unpaidReward_eq?: Maybe<Scalars['BigInt']>
  unpaidReward_gt?: Maybe<Scalars['BigInt']>
  unpaidReward_gte?: Maybe<Scalars['BigInt']>
  unpaidReward_in?: Maybe<Array<Scalars['BigInt']>>
  unpaidReward_lt?: Maybe<Scalars['BigInt']>
  unpaidReward_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CouncilMemberWhereUniqueInput = {
  id: Scalars['ID']
}

export type CouncilStage =
  | CouncilStageAnnouncing
  | CouncilStageElection
  | CouncilStageIdle
  | VariantNone

export type CouncilStageAnnouncing = {
  candidatesCount: Scalars['BigInt']
  endsAt: Scalars['Int']
}

export type CouncilStageElection = {
  candidatesCount: Scalars['BigInt']
}

export type CouncilStageIdle = {
  endsAt: Scalars['Int']
}

export type CouncilStageUpdate = BaseGraphQlObject & {
  changedAt: Scalars['BigInt']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  electedCouncil?: Maybe<ElectedCouncil>
  electedCouncilId?: Maybe<Scalars['String']>
  electionProblem?: Maybe<ElectionProblem>
  id: Scalars['ID']
  stage: CouncilStage
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type CouncilStageUpdateConnection = {
  edges: Array<CouncilStageUpdateEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CouncilStageUpdateCreateInput = {
  changedAt: Scalars['String']
  electedCouncil?: Maybe<Scalars['ID']>
  electionProblem?: Maybe<ElectionProblem>
  stage: Scalars['JSONObject']
}

export type CouncilStageUpdateEdge = {
  cursor: Scalars['String']
  node: CouncilStageUpdate
}

export enum CouncilStageUpdateOrderByInput {
  ChangedAtAsc = 'changedAt_ASC',
  ChangedAtDesc = 'changedAt_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedCouncilAsc = 'electedCouncil_ASC',
  ElectedCouncilDesc = 'electedCouncil_DESC',
  ElectionProblemAsc = 'electionProblem_ASC',
  ElectionProblemDesc = 'electionProblem_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CouncilStageUpdateUpdateInput = {
  changedAt?: Maybe<Scalars['String']>
  electedCouncil?: Maybe<Scalars['ID']>
  electionProblem?: Maybe<ElectionProblem>
  stage?: Maybe<Scalars['JSONObject']>
}

export type CouncilStageUpdateWhereInput = {
  AND?: Maybe<Array<CouncilStageUpdateWhereInput>>
  NOT?: Maybe<Array<CouncilStageUpdateWhereInput>>
  OR?: Maybe<Array<CouncilStageUpdateWhereInput>>
  changedAt_eq?: Maybe<Scalars['BigInt']>
  changedAt_gt?: Maybe<Scalars['BigInt']>
  changedAt_gte?: Maybe<Scalars['BigInt']>
  changedAt_in?: Maybe<Array<Scalars['BigInt']>>
  changedAt_lt?: Maybe<Scalars['BigInt']>
  changedAt_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electedCouncil?: Maybe<ElectedCouncilWhereInput>
  electionProblem_eq?: Maybe<ElectionProblem>
  electionProblem_in?: Maybe<Array<ElectionProblem>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  stage_json?: Maybe<Scalars['JSONObject']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CouncilStageUpdateWhereUniqueInput = {
  id: Scalars['ID']
}

export type CouncilorRewardUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    rewardAmount: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type CouncilorRewardUpdatedEventConnection = {
  edges: Array<CouncilorRewardUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CouncilorRewardUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rewardAmount: Scalars['String']
}

export type CouncilorRewardUpdatedEventEdge = {
  cursor: Scalars['String']
  node: CouncilorRewardUpdatedEvent
}

export enum CouncilorRewardUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RewardAmountAsc = 'rewardAmount_ASC',
  RewardAmountDesc = 'rewardAmount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CouncilorRewardUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rewardAmount?: Maybe<Scalars['String']>
}

export type CouncilorRewardUpdatedEventWhereInput = {
  AND?: Maybe<Array<CouncilorRewardUpdatedEventWhereInput>>
  NOT?: Maybe<Array<CouncilorRewardUpdatedEventWhereInput>>
  OR?: Maybe<Array<CouncilorRewardUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rewardAmount_eq?: Maybe<Scalars['BigInt']>
  rewardAmount_gt?: Maybe<Scalars['BigInt']>
  rewardAmount_gte?: Maybe<Scalars['BigInt']>
  rewardAmount_in?: Maybe<Array<Scalars['BigInt']>>
  rewardAmount_lt?: Maybe<Scalars['BigInt']>
  rewardAmount_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CouncilorRewardUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CreateWorkingGroupLeadOpeningProposalDetails = {
  group?: Maybe<WorkingGroup>
  metadata?: Maybe<WorkingGroupOpeningMetadata>
  rewardPerBlock: Scalars['BigInt']
  stakeAmount: Scalars['BigInt']
  unstakingPeriod: Scalars['Int']
}

export type Curator = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  curatorGroups: Array<CuratorAgentPermissions>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  dummy?: Maybe<Scalars['Int']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type CuratorAgentPermissions = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  curator: Curator
  curatorGroup: CuratorGroup
  curatorGroupId: Scalars['String']
  curatorId: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  permissions: Array<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type CuratorAgentPermissionsConnection = {
  edges: Array<CuratorAgentPermissionsEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CuratorAgentPermissionsCreateInput = {
  curator: Scalars['ID']
  curatorGroup: Scalars['ID']
  permissions: Array<Scalars['String']>
}

export type CuratorAgentPermissionsEdge = {
  cursor: Scalars['String']
  node: CuratorAgentPermissions
}

export enum CuratorAgentPermissionsOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CuratorGroupAsc = 'curatorGroup_ASC',
  CuratorGroupDesc = 'curatorGroup_DESC',
  CuratorAsc = 'curator_ASC',
  CuratorDesc = 'curator_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CuratorAgentPermissionsUpdateInput = {
  curator?: Maybe<Scalars['ID']>
  curatorGroup?: Maybe<Scalars['ID']>
  permissions?: Maybe<Array<Scalars['String']>>
}

export type CuratorAgentPermissionsWhereInput = {
  AND?: Maybe<Array<CuratorAgentPermissionsWhereInput>>
  NOT?: Maybe<Array<CuratorAgentPermissionsWhereInput>>
  OR?: Maybe<Array<CuratorAgentPermissionsWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  curator?: Maybe<CuratorWhereInput>
  curatorGroup?: Maybe<CuratorGroupWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  permissions_containsAll?: Maybe<Array<Scalars['String']>>
  permissions_containsAny?: Maybe<Array<Scalars['String']>>
  permissions_containsNone?: Maybe<Array<Scalars['String']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CuratorAgentPermissionsWhereUniqueInput = {
  id: Scalars['ID']
}

export type CuratorConnection = {
  edges: Array<CuratorEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CuratorCreateInput = {
  dummy?: Maybe<Scalars['Float']>
}

export type CuratorEdge = {
  cursor: Scalars['String']
  node: Curator
}

export type CuratorGroup = BaseGraphQlObject & {
  auctionbidcanceledeventownerCuratorGroup?: Maybe<Array<AuctionBidCanceledEvent>>
  auctionbidmadeeventownerCuratorGroup?: Maybe<Array<AuctionBidMadeEvent>>
  auctioncanceledeventownerCuratorGroup?: Maybe<Array<AuctionCanceledEvent>>
  bidmadecompletingauctioneventownerCuratorGroup?: Maybe<Array<BidMadeCompletingAuctionEvent>>
  buynowcanceledeventownerCuratorGroup?: Maybe<Array<BuyNowCanceledEvent>>
  buynowpriceupdatedeventownerCuratorGroup?: Maybe<Array<BuyNowPriceUpdatedEvent>>
  channels: Array<Channel>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  curators: Array<CuratorAgentPermissions>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  englishauctionsettledeventownerCuratorGroup?: Maybe<Array<EnglishAuctionSettledEvent>>
  englishauctionstartedeventownerCuratorGroup?: Maybe<Array<EnglishAuctionStartedEvent>>
  id: Scalars['ID']
  isActive: Scalars['Boolean']
  nftCollectorInChannels: Array<ChannelNftCollectors>
  nftboughteventownerCuratorGroup?: Maybe<Array<NftBoughtEvent>>
  nftissuedeventownerCuratorGroup?: Maybe<Array<NftIssuedEvent>>
  nftsellordermadeeventownerCuratorGroup?: Maybe<Array<NftSellOrderMadeEvent>>
  nftslingedbacktotheoriginalartisteventownerCuratorGroup?: Maybe<
    Array<NftSlingedBackToTheOriginalArtistEvent>
  >
  offeracceptedeventownerCuratorGroup?: Maybe<Array<OfferAcceptedEvent>>
  offercanceledeventownerCuratorGroup?: Maybe<Array<OfferCanceledEvent>>
  offerstartedeventownerCuratorGroup?: Maybe<Array<OfferStartedEvent>>
  openauctionbidacceptedeventownerCuratorGroup?: Maybe<Array<OpenAuctionBidAcceptedEvent>>
  openauctionstartedeventownerCuratorGroup?: Maybe<Array<OpenAuctionStartedEvent>>
  ownednftownerCuratorGroup?: Maybe<Array<OwnedNft>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type CuratorGroupConnection = {
  edges: Array<CuratorGroupEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CuratorGroupCreateInput = {
  isActive: Scalars['Boolean']
}

export type CuratorGroupEdge = {
  cursor: Scalars['String']
  node: CuratorGroup
}

export enum CuratorGroupOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CuratorGroupUpdateInput = {
  isActive?: Maybe<Scalars['Boolean']>
}

export type CuratorGroupWhereInput = {
  AND?: Maybe<Array<CuratorGroupWhereInput>>
  NOT?: Maybe<Array<CuratorGroupWhereInput>>
  OR?: Maybe<Array<CuratorGroupWhereInput>>
  auctionbidcanceledeventownerCuratorGroup_every?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventownerCuratorGroup_none?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventownerCuratorGroup_some?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidmadeeventownerCuratorGroup_every?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventownerCuratorGroup_none?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventownerCuratorGroup_some?: Maybe<AuctionBidMadeEventWhereInput>
  auctioncanceledeventownerCuratorGroup_every?: Maybe<AuctionCanceledEventWhereInput>
  auctioncanceledeventownerCuratorGroup_none?: Maybe<AuctionCanceledEventWhereInput>
  auctioncanceledeventownerCuratorGroup_some?: Maybe<AuctionCanceledEventWhereInput>
  bidmadecompletingauctioneventownerCuratorGroup_every?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventownerCuratorGroup_none?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventownerCuratorGroup_some?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  buynowcanceledeventownerCuratorGroup_every?: Maybe<BuyNowCanceledEventWhereInput>
  buynowcanceledeventownerCuratorGroup_none?: Maybe<BuyNowCanceledEventWhereInput>
  buynowcanceledeventownerCuratorGroup_some?: Maybe<BuyNowCanceledEventWhereInput>
  buynowpriceupdatedeventownerCuratorGroup_every?: Maybe<BuyNowPriceUpdatedEventWhereInput>
  buynowpriceupdatedeventownerCuratorGroup_none?: Maybe<BuyNowPriceUpdatedEventWhereInput>
  buynowpriceupdatedeventownerCuratorGroup_some?: Maybe<BuyNowPriceUpdatedEventWhereInput>
  channels_every?: Maybe<ChannelWhereInput>
  channels_none?: Maybe<ChannelWhereInput>
  channels_some?: Maybe<ChannelWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  curators_every?: Maybe<CuratorAgentPermissionsWhereInput>
  curators_none?: Maybe<CuratorAgentPermissionsWhereInput>
  curators_some?: Maybe<CuratorAgentPermissionsWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  englishauctionsettledeventownerCuratorGroup_every?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventownerCuratorGroup_none?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventownerCuratorGroup_some?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionstartedeventownerCuratorGroup_every?: Maybe<EnglishAuctionStartedEventWhereInput>
  englishauctionstartedeventownerCuratorGroup_none?: Maybe<EnglishAuctionStartedEventWhereInput>
  englishauctionstartedeventownerCuratorGroup_some?: Maybe<EnglishAuctionStartedEventWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isActive_eq?: Maybe<Scalars['Boolean']>
  isActive_in?: Maybe<Array<Scalars['Boolean']>>
  nftCollectorInChannels_every?: Maybe<ChannelNftCollectorsWhereInput>
  nftCollectorInChannels_none?: Maybe<ChannelNftCollectorsWhereInput>
  nftCollectorInChannels_some?: Maybe<ChannelNftCollectorsWhereInput>
  nftboughteventownerCuratorGroup_every?: Maybe<NftBoughtEventWhereInput>
  nftboughteventownerCuratorGroup_none?: Maybe<NftBoughtEventWhereInput>
  nftboughteventownerCuratorGroup_some?: Maybe<NftBoughtEventWhereInput>
  nftissuedeventownerCuratorGroup_every?: Maybe<NftIssuedEventWhereInput>
  nftissuedeventownerCuratorGroup_none?: Maybe<NftIssuedEventWhereInput>
  nftissuedeventownerCuratorGroup_some?: Maybe<NftIssuedEventWhereInput>
  nftsellordermadeeventownerCuratorGroup_every?: Maybe<NftSellOrderMadeEventWhereInput>
  nftsellordermadeeventownerCuratorGroup_none?: Maybe<NftSellOrderMadeEventWhereInput>
  nftsellordermadeeventownerCuratorGroup_some?: Maybe<NftSellOrderMadeEventWhereInput>
  nftslingedbacktotheoriginalartisteventownerCuratorGroup_every?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
  nftslingedbacktotheoriginalartisteventownerCuratorGroup_none?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
  nftslingedbacktotheoriginalartisteventownerCuratorGroup_some?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
  offeracceptedeventownerCuratorGroup_every?: Maybe<OfferAcceptedEventWhereInput>
  offeracceptedeventownerCuratorGroup_none?: Maybe<OfferAcceptedEventWhereInput>
  offeracceptedeventownerCuratorGroup_some?: Maybe<OfferAcceptedEventWhereInput>
  offercanceledeventownerCuratorGroup_every?: Maybe<OfferCanceledEventWhereInput>
  offercanceledeventownerCuratorGroup_none?: Maybe<OfferCanceledEventWhereInput>
  offercanceledeventownerCuratorGroup_some?: Maybe<OfferCanceledEventWhereInput>
  offerstartedeventownerCuratorGroup_every?: Maybe<OfferStartedEventWhereInput>
  offerstartedeventownerCuratorGroup_none?: Maybe<OfferStartedEventWhereInput>
  offerstartedeventownerCuratorGroup_some?: Maybe<OfferStartedEventWhereInput>
  openauctionbidacceptedeventownerCuratorGroup_every?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventownerCuratorGroup_none?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventownerCuratorGroup_some?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionstartedeventownerCuratorGroup_every?: Maybe<OpenAuctionStartedEventWhereInput>
  openauctionstartedeventownerCuratorGroup_none?: Maybe<OpenAuctionStartedEventWhereInput>
  openauctionstartedeventownerCuratorGroup_some?: Maybe<OpenAuctionStartedEventWhereInput>
  ownednftownerCuratorGroup_every?: Maybe<OwnedNftWhereInput>
  ownednftownerCuratorGroup_none?: Maybe<OwnedNftWhereInput>
  ownednftownerCuratorGroup_some?: Maybe<OwnedNftWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CuratorGroupWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CuratorOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DummyAsc = 'dummy_ASC',
  DummyDesc = 'dummy_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CuratorUpdateInput = {
  dummy?: Maybe<Scalars['Float']>
}

export type CuratorWhereInput = {
  AND?: Maybe<Array<CuratorWhereInput>>
  NOT?: Maybe<Array<CuratorWhereInput>>
  OR?: Maybe<Array<CuratorWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  curatorGroups_every?: Maybe<CuratorAgentPermissionsWhereInput>
  curatorGroups_none?: Maybe<CuratorAgentPermissionsWhereInput>
  curatorGroups_some?: Maybe<CuratorAgentPermissionsWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  dummy_eq?: Maybe<Scalars['Int']>
  dummy_gt?: Maybe<Scalars['Int']>
  dummy_gte?: Maybe<Scalars['Int']>
  dummy_in?: Maybe<Array<Scalars['Int']>>
  dummy_lt?: Maybe<Scalars['Int']>
  dummy_lte?: Maybe<Scalars['Int']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type CuratorWhereUniqueInput = {
  id: Scalars['ID']
}

export type DataObjectType =
  | DataObjectTypeChannelAvatar
  | DataObjectTypeChannelCoverPhoto
  | DataObjectTypeChannelPayoutsPayload
  | DataObjectTypeUnknown
  | DataObjectTypeVideoMedia
  | DataObjectTypeVideoSubtitle
  | DataObjectTypeVideoThumbnail

export type DataObjectTypeChannelAvatar = {
  channel?: Maybe<Channel>
}

export type DataObjectTypeChannelCoverPhoto = {
  channel?: Maybe<Channel>
}

export type DataObjectTypeChannelPayoutsPayload = {
  phantom?: Maybe<Scalars['Int']>
}

export type DataObjectTypeUnknown = {
  phantom?: Maybe<Scalars['Int']>
}

export type DataObjectTypeVideoMedia = {
  video?: Maybe<Video>
}

export type DataObjectTypeVideoSubtitle = {
  subtitle?: Maybe<VideoSubtitle>
  video?: Maybe<Video>
}

export type DataObjectTypeVideoThumbnail = {
  video?: Maybe<Video>
}

export type DecreaseWorkingGroupLeadStakeProposalDetails = {
  amount: Scalars['BigInt']
  lead?: Maybe<Worker>
}

export type DeleteResponse = {
  id: Scalars['ID']
}

export type DistributionBucket = BaseGraphQlObject & {
  acceptingNewBags: Scalars['Boolean']
  bags: Array<StorageBag>
  bucketIndex: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  distributing: Scalars['Boolean']
  family: DistributionBucketFamily
  familyId: Scalars['String']
  id: Scalars['ID']
  operators: Array<DistributionBucketOperator>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type DistributionBucketConnection = {
  edges: Array<DistributionBucketEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketCreateInput = {
  acceptingNewBags: Scalars['Boolean']
  bucketIndex: Scalars['Float']
  distributing: Scalars['Boolean']
  family: Scalars['ID']
}

export type DistributionBucketEdge = {
  cursor: Scalars['String']
  node: DistributionBucket
}

export type DistributionBucketFamily = BaseGraphQlObject & {
  buckets: Array<DistributionBucket>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  metadata?: Maybe<DistributionBucketFamilyMetadata>
  metadataId?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type DistributionBucketFamilyConnection = {
  edges: Array<DistributionBucketFamilyEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketFamilyCreateInput = {
  metadata?: Maybe<Scalars['ID']>
}

export type DistributionBucketFamilyEdge = {
  cursor: Scalars['String']
  node: DistributionBucketFamily
}

export type DistributionBucketFamilyGeographicArea = BaseGraphQlObject & {
  area: GeographicalArea
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  distributionBucketFamilyMetadata: DistributionBucketFamilyMetadata
  distributionBucketFamilyMetadataId: Scalars['String']
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type DistributionBucketFamilyGeographicAreaConnection = {
  edges: Array<DistributionBucketFamilyGeographicAreaEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketFamilyGeographicAreaCreateInput = {
  area: Scalars['JSONObject']
  distributionBucketFamilyMetadata: Scalars['ID']
}

export type DistributionBucketFamilyGeographicAreaEdge = {
  cursor: Scalars['String']
  node: DistributionBucketFamilyGeographicArea
}

export enum DistributionBucketFamilyGeographicAreaOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DistributionBucketFamilyMetadataAsc = 'distributionBucketFamilyMetadata_ASC',
  DistributionBucketFamilyMetadataDesc = 'distributionBucketFamilyMetadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketFamilyGeographicAreaUpdateInput = {
  area?: Maybe<Scalars['JSONObject']>
  distributionBucketFamilyMetadata?: Maybe<Scalars['ID']>
}

export type DistributionBucketFamilyGeographicAreaWhereInput = {
  AND?: Maybe<Array<DistributionBucketFamilyGeographicAreaWhereInput>>
  NOT?: Maybe<Array<DistributionBucketFamilyGeographicAreaWhereInput>>
  OR?: Maybe<Array<DistributionBucketFamilyGeographicAreaWhereInput>>
  area_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  distributionBucketFamilyMetadata?: Maybe<DistributionBucketFamilyMetadataWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type DistributionBucketFamilyGeographicAreaWhereUniqueInput = {
  id: Scalars['ID']
}

export type DistributionBucketFamilyMetadata = BaseGraphQlObject & {
  areas: Array<DistributionBucketFamilyGeographicArea>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  distributionbucketfamilymetadata?: Maybe<Array<DistributionBucketFamily>>
  id: Scalars['ID']
  latencyTestTargets?: Maybe<Array<Scalars['String']>>
  region?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type DistributionBucketFamilyMetadataConnection = {
  edges: Array<DistributionBucketFamilyMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketFamilyMetadataCreateInput = {
  description?: Maybe<Scalars['String']>
  latencyTestTargets?: Maybe<Array<Scalars['String']>>
  region?: Maybe<Scalars['String']>
}

export type DistributionBucketFamilyMetadataEdge = {
  cursor: Scalars['String']
  node: DistributionBucketFamilyMetadata
}

export enum DistributionBucketFamilyMetadataOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  RegionAsc = 'region_ASC',
  RegionDesc = 'region_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketFamilyMetadataUpdateInput = {
  description?: Maybe<Scalars['String']>
  latencyTestTargets?: Maybe<Array<Scalars['String']>>
  region?: Maybe<Scalars['String']>
}

export type DistributionBucketFamilyMetadataWhereInput = {
  AND?: Maybe<Array<DistributionBucketFamilyMetadataWhereInput>>
  NOT?: Maybe<Array<DistributionBucketFamilyMetadataWhereInput>>
  OR?: Maybe<Array<DistributionBucketFamilyMetadataWhereInput>>
  areas_every?: Maybe<DistributionBucketFamilyGeographicAreaWhereInput>
  areas_none?: Maybe<DistributionBucketFamilyGeographicAreaWhereInput>
  areas_some?: Maybe<DistributionBucketFamilyGeographicAreaWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  distributionbucketfamilymetadata_every?: Maybe<DistributionBucketFamilyWhereInput>
  distributionbucketfamilymetadata_none?: Maybe<DistributionBucketFamilyWhereInput>
  distributionbucketfamilymetadata_some?: Maybe<DistributionBucketFamilyWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  latencyTestTargets_containsAll?: Maybe<Array<Scalars['String']>>
  latencyTestTargets_containsAny?: Maybe<Array<Scalars['String']>>
  latencyTestTargets_containsNone?: Maybe<Array<Scalars['String']>>
  region_contains?: Maybe<Scalars['String']>
  region_endsWith?: Maybe<Scalars['String']>
  region_eq?: Maybe<Scalars['String']>
  region_in?: Maybe<Array<Scalars['String']>>
  region_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type DistributionBucketFamilyMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export enum DistributionBucketFamilyOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketFamilyUpdateInput = {
  metadata?: Maybe<Scalars['ID']>
}

export type DistributionBucketFamilyWhereInput = {
  AND?: Maybe<Array<DistributionBucketFamilyWhereInput>>
  NOT?: Maybe<Array<DistributionBucketFamilyWhereInput>>
  OR?: Maybe<Array<DistributionBucketFamilyWhereInput>>
  buckets_every?: Maybe<DistributionBucketWhereInput>
  buckets_none?: Maybe<DistributionBucketWhereInput>
  buckets_some?: Maybe<DistributionBucketWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  metadata?: Maybe<DistributionBucketFamilyMetadataWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type DistributionBucketFamilyWhereUniqueInput = {
  id: Scalars['ID']
}

export type DistributionBucketOperator = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  distributionBucket: DistributionBucket
  distributionBucketId: Scalars['String']
  id: Scalars['ID']
  metadata?: Maybe<DistributionBucketOperatorMetadata>
  metadataId?: Maybe<Scalars['String']>
  status: DistributionBucketOperatorStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  workerId: Scalars['Int']
}

export type DistributionBucketOperatorConnection = {
  edges: Array<DistributionBucketOperatorEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketOperatorCreateInput = {
  distributionBucket: Scalars['ID']
  metadata?: Maybe<Scalars['ID']>
  status: DistributionBucketOperatorStatus
  workerId: Scalars['Float']
}

export type DistributionBucketOperatorEdge = {
  cursor: Scalars['String']
  node: DistributionBucketOperator
}

export type DistributionBucketOperatorMetadata = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  distributionbucketoperatormetadata?: Maybe<Array<DistributionBucketOperator>>
  extra?: Maybe<Scalars['String']>
  id: Scalars['ID']
  nodeEndpoint?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<NodeLocationMetadata>
  nodeLocationId?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type DistributionBucketOperatorMetadataConnection = {
  edges: Array<DistributionBucketOperatorMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketOperatorMetadataCreateInput = {
  extra?: Maybe<Scalars['String']>
  nodeEndpoint?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<Scalars['ID']>
}

export type DistributionBucketOperatorMetadataEdge = {
  cursor: Scalars['String']
  node: DistributionBucketOperatorMetadata
}

export enum DistributionBucketOperatorMetadataOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ExtraAsc = 'extra_ASC',
  ExtraDesc = 'extra_DESC',
  NodeEndpointAsc = 'nodeEndpoint_ASC',
  NodeEndpointDesc = 'nodeEndpoint_DESC',
  NodeLocationAsc = 'nodeLocation_ASC',
  NodeLocationDesc = 'nodeLocation_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketOperatorMetadataUpdateInput = {
  extra?: Maybe<Scalars['String']>
  nodeEndpoint?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<Scalars['ID']>
}

export type DistributionBucketOperatorMetadataWhereInput = {
  AND?: Maybe<Array<DistributionBucketOperatorMetadataWhereInput>>
  NOT?: Maybe<Array<DistributionBucketOperatorMetadataWhereInput>>
  OR?: Maybe<Array<DistributionBucketOperatorMetadataWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  distributionbucketoperatormetadata_every?: Maybe<DistributionBucketOperatorWhereInput>
  distributionbucketoperatormetadata_none?: Maybe<DistributionBucketOperatorWhereInput>
  distributionbucketoperatormetadata_some?: Maybe<DistributionBucketOperatorWhereInput>
  extra_contains?: Maybe<Scalars['String']>
  extra_endsWith?: Maybe<Scalars['String']>
  extra_eq?: Maybe<Scalars['String']>
  extra_in?: Maybe<Array<Scalars['String']>>
  extra_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  nodeEndpoint_contains?: Maybe<Scalars['String']>
  nodeEndpoint_endsWith?: Maybe<Scalars['String']>
  nodeEndpoint_eq?: Maybe<Scalars['String']>
  nodeEndpoint_in?: Maybe<Array<Scalars['String']>>
  nodeEndpoint_startsWith?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<NodeLocationMetadataWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type DistributionBucketOperatorMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export enum DistributionBucketOperatorOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DistributionBucketAsc = 'distributionBucket_ASC',
  DistributionBucketDesc = 'distributionBucket_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerIdAsc = 'workerId_ASC',
  WorkerIdDesc = 'workerId_DESC',
}

export enum DistributionBucketOperatorStatus {
  Active = 'ACTIVE',
  Invited = 'INVITED',
}

export type DistributionBucketOperatorUpdateInput = {
  distributionBucket?: Maybe<Scalars['ID']>
  metadata?: Maybe<Scalars['ID']>
  status?: Maybe<DistributionBucketOperatorStatus>
  workerId?: Maybe<Scalars['Float']>
}

export type DistributionBucketOperatorWhereInput = {
  AND?: Maybe<Array<DistributionBucketOperatorWhereInput>>
  NOT?: Maybe<Array<DistributionBucketOperatorWhereInput>>
  OR?: Maybe<Array<DistributionBucketOperatorWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  distributionBucket?: Maybe<DistributionBucketWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  metadata?: Maybe<DistributionBucketOperatorMetadataWhereInput>
  status_eq?: Maybe<DistributionBucketOperatorStatus>
  status_in?: Maybe<Array<DistributionBucketOperatorStatus>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  workerId_eq?: Maybe<Scalars['Int']>
  workerId_gt?: Maybe<Scalars['Int']>
  workerId_gte?: Maybe<Scalars['Int']>
  workerId_in?: Maybe<Array<Scalars['Int']>>
  workerId_lt?: Maybe<Scalars['Int']>
  workerId_lte?: Maybe<Scalars['Int']>
}

export type DistributionBucketOperatorWhereUniqueInput = {
  id: Scalars['ID']
}

export enum DistributionBucketOrderByInput {
  AcceptingNewBagsAsc = 'acceptingNewBags_ASC',
  AcceptingNewBagsDesc = 'acceptingNewBags_DESC',
  BucketIndexAsc = 'bucketIndex_ASC',
  BucketIndexDesc = 'bucketIndex_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DistributingAsc = 'distributing_ASC',
  DistributingDesc = 'distributing_DESC',
  FamilyAsc = 'family_ASC',
  FamilyDesc = 'family_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketUpdateInput = {
  acceptingNewBags?: Maybe<Scalars['Boolean']>
  bucketIndex?: Maybe<Scalars['Float']>
  distributing?: Maybe<Scalars['Boolean']>
  family?: Maybe<Scalars['ID']>
}

export type DistributionBucketWhereInput = {
  AND?: Maybe<Array<DistributionBucketWhereInput>>
  NOT?: Maybe<Array<DistributionBucketWhereInput>>
  OR?: Maybe<Array<DistributionBucketWhereInput>>
  acceptingNewBags_eq?: Maybe<Scalars['Boolean']>
  acceptingNewBags_in?: Maybe<Array<Scalars['Boolean']>>
  bags_every?: Maybe<StorageBagWhereInput>
  bags_none?: Maybe<StorageBagWhereInput>
  bags_some?: Maybe<StorageBagWhereInput>
  bucketIndex_eq?: Maybe<Scalars['Int']>
  bucketIndex_gt?: Maybe<Scalars['Int']>
  bucketIndex_gte?: Maybe<Scalars['Int']>
  bucketIndex_in?: Maybe<Array<Scalars['Int']>>
  bucketIndex_lt?: Maybe<Scalars['Int']>
  bucketIndex_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  distributing_eq?: Maybe<Scalars['Boolean']>
  distributing_in?: Maybe<Array<Scalars['Boolean']>>
  family?: Maybe<DistributionBucketFamilyWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  operators_every?: Maybe<DistributionBucketOperatorWhereInput>
  operators_none?: Maybe<DistributionBucketOperatorWhereInput>
  operators_some?: Maybe<DistributionBucketOperatorWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type DistributionBucketWhereUniqueInput = {
  id: Scalars['ID']
}

export type ElectedCouncil = BaseGraphQlObject & {
  councilElections: Array<ElectionRound>
  councilMembers: Array<CouncilMember>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  electedAtBlock: Scalars['Int']
  electedAtNetwork: Network
  electedAtTime: Scalars['DateTime']
  endedAtBlock?: Maybe<Scalars['Int']>
  endedAtNetwork?: Maybe<Network>
  endedAtTime?: Maybe<Scalars['DateTime']>
  id: Scalars['ID']
  isResigned: Scalars['Boolean']
  newcouncilelectedeventelectedCouncil?: Maybe<Array<NewCouncilElectedEvent>>
  nextCouncilElections: Array<ElectionRound>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  updates: Array<CouncilStageUpdate>
  version: Scalars['Int']
}

export type ElectedCouncilConnection = {
  edges: Array<ElectedCouncilEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ElectedCouncilCreateInput = {
  electedAtBlock: Scalars['Float']
  electedAtNetwork: Network
  electedAtTime: Scalars['DateTime']
  endedAtBlock?: Maybe<Scalars['Float']>
  endedAtNetwork?: Maybe<Network>
  endedAtTime?: Maybe<Scalars['DateTime']>
  isResigned: Scalars['Boolean']
}

export type ElectedCouncilEdge = {
  cursor: Scalars['String']
  node: ElectedCouncil
}

export enum ElectedCouncilOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedAtBlockAsc = 'electedAtBlock_ASC',
  ElectedAtBlockDesc = 'electedAtBlock_DESC',
  ElectedAtNetworkAsc = 'electedAtNetwork_ASC',
  ElectedAtNetworkDesc = 'electedAtNetwork_DESC',
  ElectedAtTimeAsc = 'electedAtTime_ASC',
  ElectedAtTimeDesc = 'electedAtTime_DESC',
  EndedAtBlockAsc = 'endedAtBlock_ASC',
  EndedAtBlockDesc = 'endedAtBlock_DESC',
  EndedAtNetworkAsc = 'endedAtNetwork_ASC',
  EndedAtNetworkDesc = 'endedAtNetwork_DESC',
  EndedAtTimeAsc = 'endedAtTime_ASC',
  EndedAtTimeDesc = 'endedAtTime_DESC',
  IsResignedAsc = 'isResigned_ASC',
  IsResignedDesc = 'isResigned_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ElectedCouncilUpdateInput = {
  electedAtBlock?: Maybe<Scalars['Float']>
  electedAtNetwork?: Maybe<Network>
  electedAtTime?: Maybe<Scalars['DateTime']>
  endedAtBlock?: Maybe<Scalars['Float']>
  endedAtNetwork?: Maybe<Network>
  endedAtTime?: Maybe<Scalars['DateTime']>
  isResigned?: Maybe<Scalars['Boolean']>
}

export type ElectedCouncilWhereInput = {
  AND?: Maybe<Array<ElectedCouncilWhereInput>>
  NOT?: Maybe<Array<ElectedCouncilWhereInput>>
  OR?: Maybe<Array<ElectedCouncilWhereInput>>
  councilElections_every?: Maybe<ElectionRoundWhereInput>
  councilElections_none?: Maybe<ElectionRoundWhereInput>
  councilElections_some?: Maybe<ElectionRoundWhereInput>
  councilMembers_every?: Maybe<CouncilMemberWhereInput>
  councilMembers_none?: Maybe<CouncilMemberWhereInput>
  councilMembers_some?: Maybe<CouncilMemberWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electedAtBlock_eq?: Maybe<Scalars['Int']>
  electedAtBlock_gt?: Maybe<Scalars['Int']>
  electedAtBlock_gte?: Maybe<Scalars['Int']>
  electedAtBlock_in?: Maybe<Array<Scalars['Int']>>
  electedAtBlock_lt?: Maybe<Scalars['Int']>
  electedAtBlock_lte?: Maybe<Scalars['Int']>
  electedAtNetwork_eq?: Maybe<Network>
  electedAtNetwork_in?: Maybe<Array<Network>>
  electedAtTime_eq?: Maybe<Scalars['DateTime']>
  electedAtTime_gt?: Maybe<Scalars['DateTime']>
  electedAtTime_gte?: Maybe<Scalars['DateTime']>
  electedAtTime_lt?: Maybe<Scalars['DateTime']>
  electedAtTime_lte?: Maybe<Scalars['DateTime']>
  endedAtBlock_eq?: Maybe<Scalars['Int']>
  endedAtBlock_gt?: Maybe<Scalars['Int']>
  endedAtBlock_gte?: Maybe<Scalars['Int']>
  endedAtBlock_in?: Maybe<Array<Scalars['Int']>>
  endedAtBlock_lt?: Maybe<Scalars['Int']>
  endedAtBlock_lte?: Maybe<Scalars['Int']>
  endedAtNetwork_eq?: Maybe<Network>
  endedAtNetwork_in?: Maybe<Array<Network>>
  endedAtTime_eq?: Maybe<Scalars['DateTime']>
  endedAtTime_gt?: Maybe<Scalars['DateTime']>
  endedAtTime_gte?: Maybe<Scalars['DateTime']>
  endedAtTime_lt?: Maybe<Scalars['DateTime']>
  endedAtTime_lte?: Maybe<Scalars['DateTime']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isResigned_eq?: Maybe<Scalars['Boolean']>
  isResigned_in?: Maybe<Array<Scalars['Boolean']>>
  newcouncilelectedeventelectedCouncil_every?: Maybe<NewCouncilElectedEventWhereInput>
  newcouncilelectedeventelectedCouncil_none?: Maybe<NewCouncilElectedEventWhereInput>
  newcouncilelectedeventelectedCouncil_some?: Maybe<NewCouncilElectedEventWhereInput>
  nextCouncilElections_every?: Maybe<ElectionRoundWhereInput>
  nextCouncilElections_none?: Maybe<ElectionRoundWhereInput>
  nextCouncilElections_some?: Maybe<ElectionRoundWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  updates_every?: Maybe<CouncilStageUpdateWhereInput>
  updates_none?: Maybe<CouncilStageUpdateWhereInput>
  updates_some?: Maybe<CouncilStageUpdateWhereInput>
}

export type ElectedCouncilWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ElectionProblem {
  NewCouncilNotElected = 'NEW_COUNCIL_NOT_ELECTED',
  NotEnoughCandidates = 'NOT_ENOUGH_CANDIDATES',
}

export type ElectionRound = BaseGraphQlObject & {
  candidates: Array<Candidate>
  castVotes: Array<CastVote>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  cycleId: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  electedCouncil: ElectedCouncil
  electedCouncilId: Scalars['String']
  endedAtBlock?: Maybe<Scalars['Int']>
  endedAtNetwork?: Maybe<Network>
  endedAtTime?: Maybe<Scalars['DateTime']>
  id: Scalars['ID']
  isFinished: Scalars['Boolean']
  newcandidateeventelectionRound?: Maybe<Array<NewCandidateEvent>>
  nextElectedCouncil?: Maybe<ElectedCouncil>
  nextElectedCouncilId?: Maybe<Scalars['String']>
  referendumStageRevealing?: Maybe<ReferendumStageRevealing>
  referendumStageVoting?: Maybe<ReferendumStageVoting>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ElectionRoundConnection = {
  edges: Array<ElectionRoundEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ElectionRoundCreateInput = {
  cycleId: Scalars['Float']
  electedCouncil: Scalars['ID']
  endedAtBlock?: Maybe<Scalars['Float']>
  endedAtNetwork?: Maybe<Network>
  endedAtTime?: Maybe<Scalars['DateTime']>
  isFinished: Scalars['Boolean']
  nextElectedCouncil?: Maybe<Scalars['ID']>
}

export type ElectionRoundEdge = {
  cursor: Scalars['String']
  node: ElectionRound
}

export enum ElectionRoundOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CycleIdAsc = 'cycleId_ASC',
  CycleIdDesc = 'cycleId_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedCouncilAsc = 'electedCouncil_ASC',
  ElectedCouncilDesc = 'electedCouncil_DESC',
  EndedAtBlockAsc = 'endedAtBlock_ASC',
  EndedAtBlockDesc = 'endedAtBlock_DESC',
  EndedAtNetworkAsc = 'endedAtNetwork_ASC',
  EndedAtNetworkDesc = 'endedAtNetwork_DESC',
  EndedAtTimeAsc = 'endedAtTime_ASC',
  EndedAtTimeDesc = 'endedAtTime_DESC',
  IsFinishedAsc = 'isFinished_ASC',
  IsFinishedDesc = 'isFinished_DESC',
  NextElectedCouncilAsc = 'nextElectedCouncil_ASC',
  NextElectedCouncilDesc = 'nextElectedCouncil_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ElectionRoundUpdateInput = {
  cycleId?: Maybe<Scalars['Float']>
  electedCouncil?: Maybe<Scalars['ID']>
  endedAtBlock?: Maybe<Scalars['Float']>
  endedAtNetwork?: Maybe<Network>
  endedAtTime?: Maybe<Scalars['DateTime']>
  isFinished?: Maybe<Scalars['Boolean']>
  nextElectedCouncil?: Maybe<Scalars['ID']>
}

export type ElectionRoundWhereInput = {
  AND?: Maybe<Array<ElectionRoundWhereInput>>
  NOT?: Maybe<Array<ElectionRoundWhereInput>>
  OR?: Maybe<Array<ElectionRoundWhereInput>>
  candidates_every?: Maybe<CandidateWhereInput>
  candidates_none?: Maybe<CandidateWhereInput>
  candidates_some?: Maybe<CandidateWhereInput>
  castVotes_every?: Maybe<CastVoteWhereInput>
  castVotes_none?: Maybe<CastVoteWhereInput>
  castVotes_some?: Maybe<CastVoteWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  cycleId_eq?: Maybe<Scalars['Int']>
  cycleId_gt?: Maybe<Scalars['Int']>
  cycleId_gte?: Maybe<Scalars['Int']>
  cycleId_in?: Maybe<Array<Scalars['Int']>>
  cycleId_lt?: Maybe<Scalars['Int']>
  cycleId_lte?: Maybe<Scalars['Int']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electedCouncil?: Maybe<ElectedCouncilWhereInput>
  endedAtBlock_eq?: Maybe<Scalars['Int']>
  endedAtBlock_gt?: Maybe<Scalars['Int']>
  endedAtBlock_gte?: Maybe<Scalars['Int']>
  endedAtBlock_in?: Maybe<Array<Scalars['Int']>>
  endedAtBlock_lt?: Maybe<Scalars['Int']>
  endedAtBlock_lte?: Maybe<Scalars['Int']>
  endedAtNetwork_eq?: Maybe<Network>
  endedAtNetwork_in?: Maybe<Array<Network>>
  endedAtTime_eq?: Maybe<Scalars['DateTime']>
  endedAtTime_gt?: Maybe<Scalars['DateTime']>
  endedAtTime_gte?: Maybe<Scalars['DateTime']>
  endedAtTime_lt?: Maybe<Scalars['DateTime']>
  endedAtTime_lte?: Maybe<Scalars['DateTime']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isFinished_eq?: Maybe<Scalars['Boolean']>
  isFinished_in?: Maybe<Array<Scalars['Boolean']>>
  newcandidateeventelectionRound_every?: Maybe<NewCandidateEventWhereInput>
  newcandidateeventelectionRound_none?: Maybe<NewCandidateEventWhereInput>
  newcandidateeventelectionRound_some?: Maybe<NewCandidateEventWhereInput>
  nextElectedCouncil?: Maybe<ElectedCouncilWhereInput>
  referendumStageRevealing?: Maybe<ReferendumStageRevealingWhereInput>
  referendumStageVoting?: Maybe<ReferendumStageVotingWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ElectionRoundWhereUniqueInput = {
  id: Scalars['ID']
}

export type EnglishAuctionSettledEvent = BaseGraphQlObject &
  Event & {
    bidders: Array<Membership>
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
    winner: Membership
    winnerId: Scalars['String']
    winningBid: Bid
    winningBidId: Scalars['String']
  }

export type EnglishAuctionSettledEventConnection = {
  edges: Array<EnglishAuctionSettledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type EnglishAuctionSettledEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
  winner: Scalars['ID']
  winningBid: Scalars['ID']
}

export type EnglishAuctionSettledEventEdge = {
  cursor: Scalars['String']
  node: EnglishAuctionSettledEvent
}

export enum EnglishAuctionSettledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
  WinnerAsc = 'winner_ASC',
  WinnerDesc = 'winner_DESC',
  WinningBidAsc = 'winningBid_ASC',
  WinningBidDesc = 'winningBid_DESC',
}

export type EnglishAuctionSettledEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
  winner?: Maybe<Scalars['ID']>
  winningBid?: Maybe<Scalars['ID']>
}

export type EnglishAuctionSettledEventWhereInput = {
  AND?: Maybe<Array<EnglishAuctionSettledEventWhereInput>>
  NOT?: Maybe<Array<EnglishAuctionSettledEventWhereInput>>
  OR?: Maybe<Array<EnglishAuctionSettledEventWhereInput>>
  bidders_every?: Maybe<MembershipWhereInput>
  bidders_none?: Maybe<MembershipWhereInput>
  bidders_some?: Maybe<MembershipWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  winner?: Maybe<MembershipWhereInput>
  winningBid?: Maybe<BidWhereInput>
}

export type EnglishAuctionSettledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type EnglishAuctionStartedEvent = BaseGraphQlObject &
  Event & {
    actor: ContentActor
    auction: Auction
    auctionId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type EnglishAuctionStartedEventConnection = {
  edges: Array<EnglishAuctionStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type EnglishAuctionStartedEventCreateInput = {
  actor: Scalars['JSONObject']
  auction: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
}

export type EnglishAuctionStartedEventEdge = {
  cursor: Scalars['String']
  node: EnglishAuctionStartedEvent
}

export enum EnglishAuctionStartedEventOrderByInput {
  AuctionAsc = 'auction_ASC',
  AuctionDesc = 'auction_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type EnglishAuctionStartedEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  auction?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
}

export type EnglishAuctionStartedEventWhereInput = {
  AND?: Maybe<Array<EnglishAuctionStartedEventWhereInput>>
  NOT?: Maybe<Array<EnglishAuctionStartedEventWhereInput>>
  OR?: Maybe<Array<EnglishAuctionStartedEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  auction?: Maybe<AuctionWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type EnglishAuctionStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type EntityViewsInfo = {
  id: Scalars['ID']
  views: Scalars['Int']
}

export type Event = {
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  network: Network
  type?: Maybe<EventTypeOptions>
}

export type EventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  type?: Maybe<EventTypeOptions>
}

export enum EventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export enum EventTypeOptions {
  AnnouncingPeriodStartedEvent = 'AnnouncingPeriodStartedEvent',
  ApplicationWithdrawnEvent = 'ApplicationWithdrawnEvent',
  AppliedOnOpeningEvent = 'AppliedOnOpeningEvent',
  AuctionBidCanceledEvent = 'AuctionBidCanceledEvent',
  AuctionBidMadeEvent = 'AuctionBidMadeEvent',
  AuctionCanceledEvent = 'AuctionCanceledEvent',
  BidMadeCompletingAuctionEvent = 'BidMadeCompletingAuctionEvent',
  BountyCanceledEvent = 'BountyCanceledEvent',
  BountyCreatedEvent = 'BountyCreatedEvent',
  BountyCreatorCherryWithdrawalEvent = 'BountyCreatorCherryWithdrawalEvent',
  BountyFundedEvent = 'BountyFundedEvent',
  BountyFundingWithdrawalEvent = 'BountyFundingWithdrawalEvent',
  BountyMaxFundingReachedEvent = 'BountyMaxFundingReachedEvent',
  BountyRemovedEvent = 'BountyRemovedEvent',
  BountyVetoedEvent = 'BountyVetoedEvent',
  BudgetBalanceSetEvent = 'BudgetBalanceSetEvent',
  BudgetFundedEvent = 'BudgetFundedEvent',
  BudgetIncrementUpdatedEvent = 'BudgetIncrementUpdatedEvent',
  BudgetRefillEvent = 'BudgetRefillEvent',
  BudgetRefillPlannedEvent = 'BudgetRefillPlannedEvent',
  BudgetSetEvent = 'BudgetSetEvent',
  BudgetSpendingEvent = 'BudgetSpendingEvent',
  BudgetUpdatedEvent = 'BudgetUpdatedEvent',
  BuyNowCanceledEvent = 'BuyNowCanceledEvent',
  BuyNowPriceUpdatedEvent = 'BuyNowPriceUpdatedEvent',
  CandidacyNoteSetEvent = 'CandidacyNoteSetEvent',
  CandidacyStakeReleaseEvent = 'CandidacyStakeReleaseEvent',
  CandidacyWithdrawEvent = 'CandidacyWithdrawEvent',
  CategoryArchivalStatusUpdatedEvent = 'CategoryArchivalStatusUpdatedEvent',
  CategoryCreatedEvent = 'CategoryCreatedEvent',
  CategoryDeletedEvent = 'CategoryDeletedEvent',
  CategoryMembershipOfModeratorUpdatedEvent = 'CategoryMembershipOfModeratorUpdatedEvent',
  CategoryStickyThreadUpdateEvent = 'CategoryStickyThreadUpdateEvent',
  ChannelFundsWithdrawnEvent = 'ChannelFundsWithdrawnEvent',
  ChannelRewardClaimedAndWithdrawnEvent = 'ChannelRewardClaimedAndWithdrawnEvent',
  ChannelRewardClaimedEvent = 'ChannelRewardClaimedEvent',
  CommentCreatedEvent = 'CommentCreatedEvent',
  CommentDeletedEvent = 'CommentDeletedEvent',
  CommentModeratedEvent = 'CommentModeratedEvent',
  CommentPinnedEvent = 'CommentPinnedEvent',
  CommentReactedEvent = 'CommentReactedEvent',
  CommentTextUpdatedEvent = 'CommentTextUpdatedEvent',
  CouncilBudgetFundedEvent = 'CouncilBudgetFundedEvent',
  CouncilorRewardUpdatedEvent = 'CouncilorRewardUpdatedEvent',
  EnglishAuctionSettledEvent = 'EnglishAuctionSettledEvent',
  EnglishAuctionStartedEvent = 'EnglishAuctionStartedEvent',
  InitialInvitationBalanceUpdatedEvent = 'InitialInvitationBalanceUpdatedEvent',
  InitialInvitationCountUpdatedEvent = 'InitialInvitationCountUpdatedEvent',
  InvitesTransferredEvent = 'InvitesTransferredEvent',
  LeaderInvitationQuotaUpdatedEvent = 'LeaderInvitationQuotaUpdatedEvent',
  LeaderSetEvent = 'LeaderSetEvent',
  LeaderUnsetEvent = 'LeaderUnsetEvent',
  MemberAccountsUpdatedEvent = 'MemberAccountsUpdatedEvent',
  MemberBannedFromChannelEvent = 'MemberBannedFromChannelEvent',
  MemberCreatedEvent = 'MemberCreatedEvent',
  MemberInvitedEvent = 'MemberInvitedEvent',
  MemberProfileUpdatedEvent = 'MemberProfileUpdatedEvent',
  MemberVerificationStatusUpdatedEvent = 'MemberVerificationStatusUpdatedEvent',
  MembershipBoughtEvent = 'MembershipBoughtEvent',
  MembershipGiftedEvent = 'MembershipGiftedEvent',
  MembershipPriceUpdatedEvent = 'MembershipPriceUpdatedEvent',
  MetaprotocolTransactionStatusEvent = 'MetaprotocolTransactionStatusEvent',
  NewCandidateEvent = 'NewCandidateEvent',
  NewCouncilElectedEvent = 'NewCouncilElectedEvent',
  NewCouncilNotElectedEvent = 'NewCouncilNotElectedEvent',
  NewMissedRewardLevelReachedEvent = 'NewMissedRewardLevelReachedEvent',
  NftBoughtEvent = 'NftBoughtEvent',
  NftIssuedEvent = 'NftIssuedEvent',
  NftSlingedBackToTheOriginalArtistEvent = 'NftSlingedBackToTheOriginalArtistEvent',
  NotEnoughCandidatesEvent = 'NotEnoughCandidatesEvent',
  OfferAcceptedEvent = 'OfferAcceptedEvent',
  OfferCanceledEvent = 'OfferCanceledEvent',
  OfferStartedEvent = 'OfferStartedEvent',
  OpenAuctionBidAcceptedEvent = 'OpenAuctionBidAcceptedEvent',
  OpenAuctionStartedEvent = 'OpenAuctionStartedEvent',
  OpeningAddedEvent = 'OpeningAddedEvent',
  OpeningCanceledEvent = 'OpeningCanceledEvent',
  OpeningFilledEvent = 'OpeningFilledEvent',
  OracleJudgmentSubmittedEvent = 'OracleJudgmentSubmittedEvent',
  PostAddedEvent = 'PostAddedEvent',
  PostDeletedEvent = 'PostDeletedEvent',
  PostModeratedEvent = 'PostModeratedEvent',
  PostTextUpdatedEvent = 'PostTextUpdatedEvent',
  ProposalCancelledEvent = 'ProposalCancelledEvent',
  ProposalCreatedEvent = 'ProposalCreatedEvent',
  ProposalDecisionMadeEvent = 'ProposalDecisionMadeEvent',
  ProposalDiscussionPostCreatedEvent = 'ProposalDiscussionPostCreatedEvent',
  ProposalDiscussionPostDeletedEvent = 'ProposalDiscussionPostDeletedEvent',
  ProposalDiscussionPostUpdatedEvent = 'ProposalDiscussionPostUpdatedEvent',
  ProposalDiscussionThreadModeChangedEvent = 'ProposalDiscussionThreadModeChangedEvent',
  ProposalExecutedEvent = 'ProposalExecutedEvent',
  ProposalStatusUpdatedEvent = 'ProposalStatusUpdatedEvent',
  ProposalVotedEvent = 'ProposalVotedEvent',
  ReferendumFinishedEvent = 'ReferendumFinishedEvent',
  ReferendumStartedEvent = 'ReferendumStartedEvent',
  ReferendumStartedForcefullyEvent = 'ReferendumStartedForcefullyEvent',
  ReferralCutUpdatedEvent = 'ReferralCutUpdatedEvent',
  RequestFundedEvent = 'RequestFundedEvent',
  RevealingStageStartedEvent = 'RevealingStageStartedEvent',
  RewardPaidEvent = 'RewardPaidEvent',
  RewardPaymentEvent = 'RewardPaymentEvent',
  StakeDecreasedEvent = 'StakeDecreasedEvent',
  StakeIncreasedEvent = 'StakeIncreasedEvent',
  StakeReleasedEvent = 'StakeReleasedEvent',
  StakeSlashedEvent = 'StakeSlashedEvent',
  StakingAccountAddedEvent = 'StakingAccountAddedEvent',
  StakingAccountConfirmedEvent = 'StakingAccountConfirmedEvent',
  StakingAccountRemovedEvent = 'StakingAccountRemovedEvent',
  StatusTextChangedEvent = 'StatusTextChangedEvent',
  TerminatedLeaderEvent = 'TerminatedLeaderEvent',
  TerminatedWorkerEvent = 'TerminatedWorkerEvent',
  ThreadCreatedEvent = 'ThreadCreatedEvent',
  ThreadDeletedEvent = 'ThreadDeletedEvent',
  ThreadMetadataUpdatedEvent = 'ThreadMetadataUpdatedEvent',
  ThreadModeratedEvent = 'ThreadModeratedEvent',
  ThreadMovedEvent = 'ThreadMovedEvent',
  VideoReactedEvent = 'VideoReactedEvent',
  VideoReactionsPreferenceEvent = 'VideoReactionsPreferenceEvent',
  VoteCastEvent = 'VoteCastEvent',
  VoteRevealedEvent = 'VoteRevealedEvent',
  VotingPeriodStartedEvent = 'VotingPeriodStartedEvent',
  WorkEntrantFundsWithdrawnEvent = 'WorkEntrantFundsWithdrawnEvent',
  WorkEntryAnnouncedEvent = 'WorkEntryAnnouncedEvent',
  WorkEntrySlashedEvent = 'WorkEntrySlashedEvent',
  WorkEntryWithdrawnEvent = 'WorkEntryWithdrawnEvent',
  WorkSubmittedEvent = 'WorkSubmittedEvent',
  WorkerExitedEvent = 'WorkerExitedEvent',
  WorkerRewardAccountUpdatedEvent = 'WorkerRewardAccountUpdatedEvent',
  WorkerRewardAmountUpdatedEvent = 'WorkerRewardAmountUpdatedEvent',
  WorkerRoleAccountUpdatedEvent = 'WorkerRoleAccountUpdatedEvent',
  WorkerStartedLeavingEvent = 'WorkerStartedLeavingEvent',
}

export type EventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  type?: Maybe<EventTypeOptions>
}

export type EventWhereInput = {
  AND?: Maybe<Array<EventWhereInput>>
  NOT?: Maybe<Array<EventWhereInput>>
  OR?: Maybe<Array<EventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  type_eq?: Maybe<EventTypeOptions>
  type_in?: Maybe<Array<EventTypeOptions>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type EventWhereUniqueInput = {
  id: Scalars['ID']
}

export type FeaturedVideo = {
  video: Video
  videoCutUrl?: Maybe<Scalars['String']>
  videoId: Scalars['ID']
}

export type FeaturedVideoInput = {
  videoCutUrl?: Maybe<Scalars['String']>
  videoId: Scalars['ID']
}

export type FillWorkingGroupLeadOpeningProposalDetails = {
  application?: Maybe<WorkingGroupApplication>
  opening?: Maybe<WorkingGroupOpening>
}

export type ForumCategory = BaseGraphQlObject & {
  categoryarchivalstatusupdatedeventcategory?: Maybe<Array<CategoryArchivalStatusUpdatedEvent>>
  categorydeletedeventcategory?: Maybe<Array<CategoryDeletedEvent>>
  categorymembershipofmoderatorupdatedeventcategory?: Maybe<
    Array<CategoryMembershipOfModeratorUpdatedEvent>
  >
  categorystickythreadupdateeventcategory?: Maybe<Array<CategoryStickyThreadUpdateEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInEvent: CategoryCreatedEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description: Scalars['String']
  forumcategoryparent?: Maybe<Array<ForumCategory>>
  id: Scalars['ID']
  moderators: Array<Worker>
  parent?: Maybe<ForumCategory>
  parentId?: Maybe<Scalars['String']>
  status: CategoryStatus
  threadmovedeventnewCategory?: Maybe<Array<ThreadMovedEvent>>
  threadmovedeventoldCategory?: Maybe<Array<ThreadMovedEvent>>
  threads: Array<ForumThread>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ForumCategoryConnection = {
  edges: Array<ForumCategoryEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumCategoryCreateInput = {
  description: Scalars['String']
  parent?: Maybe<Scalars['ID']>
  status: Scalars['JSONObject']
  title: Scalars['String']
}

export type ForumCategoryEdge = {
  cursor: Scalars['String']
  node: ForumCategory
}

export enum ForumCategoryOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ParentAsc = 'parent_ASC',
  ParentDesc = 'parent_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ForumCategoryUpdateInput = {
  description?: Maybe<Scalars['String']>
  parent?: Maybe<Scalars['ID']>
  status?: Maybe<Scalars['JSONObject']>
  title?: Maybe<Scalars['String']>
}

export type ForumCategoryWhereInput = {
  AND?: Maybe<Array<ForumCategoryWhereInput>>
  NOT?: Maybe<Array<ForumCategoryWhereInput>>
  OR?: Maybe<Array<ForumCategoryWhereInput>>
  categoryarchivalstatusupdatedeventcategory_every?: Maybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categoryarchivalstatusupdatedeventcategory_none?: Maybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categoryarchivalstatusupdatedeventcategory_some?: Maybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categorydeletedeventcategory_every?: Maybe<CategoryDeletedEventWhereInput>
  categorydeletedeventcategory_none?: Maybe<CategoryDeletedEventWhereInput>
  categorydeletedeventcategory_some?: Maybe<CategoryDeletedEventWhereInput>
  categorymembershipofmoderatorupdatedeventcategory_every?: Maybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorymembershipofmoderatorupdatedeventcategory_none?: Maybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorymembershipofmoderatorupdatedeventcategory_some?: Maybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorystickythreadupdateeventcategory_every?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
  categorystickythreadupdateeventcategory_none?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
  categorystickythreadupdateeventcategory_some?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInEvent?: Maybe<CategoryCreatedEventWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  forumcategoryparent_every?: Maybe<ForumCategoryWhereInput>
  forumcategoryparent_none?: Maybe<ForumCategoryWhereInput>
  forumcategoryparent_some?: Maybe<ForumCategoryWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  moderators_every?: Maybe<WorkerWhereInput>
  moderators_none?: Maybe<WorkerWhereInput>
  moderators_some?: Maybe<WorkerWhereInput>
  parent?: Maybe<ForumCategoryWhereInput>
  status_json?: Maybe<Scalars['JSONObject']>
  threadmovedeventnewCategory_every?: Maybe<ThreadMovedEventWhereInput>
  threadmovedeventnewCategory_none?: Maybe<ThreadMovedEventWhereInput>
  threadmovedeventnewCategory_some?: Maybe<ThreadMovedEventWhereInput>
  threadmovedeventoldCategory_every?: Maybe<ThreadMovedEventWhereInput>
  threadmovedeventoldCategory_none?: Maybe<ThreadMovedEventWhereInput>
  threadmovedeventoldCategory_some?: Maybe<ThreadMovedEventWhereInput>
  threads_every?: Maybe<ForumThreadWhereInput>
  threads_none?: Maybe<ForumThreadWhereInput>
  threads_some?: Maybe<ForumThreadWhereInput>
  title_contains?: Maybe<Scalars['String']>
  title_endsWith?: Maybe<Scalars['String']>
  title_eq?: Maybe<Scalars['String']>
  title_in?: Maybe<Array<Scalars['String']>>
  title_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ForumCategoryWhereUniqueInput = {
  id: Scalars['ID']
}

export type ForumPost = BaseGraphQlObject & {
  author: Membership
  authorId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  deletedInEvent?: Maybe<PostDeletedEvent>
  deletedInEventId?: Maybe<Scalars['String']>
  edits: Array<PostTextUpdatedEvent>
  forumpostrepliesTo?: Maybe<Array<ForumPost>>
  forumthreadinitialPost?: Maybe<Array<ForumThread>>
  id: Scalars['ID']
  isVisible: Scalars['Boolean']
  origin: PostOrigin
  postaddedeventpost?: Maybe<Array<PostAddedEvent>>
  postmoderatedeventpost?: Maybe<Array<PostModeratedEvent>>
  repliesTo?: Maybe<ForumPost>
  repliesToId?: Maybe<Scalars['String']>
  status: PostStatus
  text: Scalars['String']
  thread: ForumThread
  threadId: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ForumPostConnection = {
  edges: Array<ForumPostEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumPostCreateInput = {
  author: Scalars['ID']
  deletedInEvent?: Maybe<Scalars['ID']>
  isVisible: Scalars['Boolean']
  origin: Scalars['JSONObject']
  repliesTo?: Maybe<Scalars['ID']>
  status: Scalars['JSONObject']
  text: Scalars['String']
  thread: Scalars['ID']
}

export type ForumPostEdge = {
  cursor: Scalars['String']
  node: ForumPost
}

export enum ForumPostOrderByInput {
  AuthorAsc = 'author_ASC',
  AuthorDesc = 'author_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DeletedInEventAsc = 'deletedInEvent_ASC',
  DeletedInEventDesc = 'deletedInEvent_DESC',
  IsVisibleAsc = 'isVisible_ASC',
  IsVisibleDesc = 'isVisible_DESC',
  RepliesToAsc = 'repliesTo_ASC',
  RepliesToDesc = 'repliesTo_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ForumPostUpdateInput = {
  author?: Maybe<Scalars['ID']>
  deletedInEvent?: Maybe<Scalars['ID']>
  isVisible?: Maybe<Scalars['Boolean']>
  origin?: Maybe<Scalars['JSONObject']>
  repliesTo?: Maybe<Scalars['ID']>
  status?: Maybe<Scalars['JSONObject']>
  text?: Maybe<Scalars['String']>
  thread?: Maybe<Scalars['ID']>
}

export type ForumPostWhereInput = {
  AND?: Maybe<Array<ForumPostWhereInput>>
  NOT?: Maybe<Array<ForumPostWhereInput>>
  OR?: Maybe<Array<ForumPostWhereInput>>
  author?: Maybe<MembershipWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  deletedInEvent?: Maybe<PostDeletedEventWhereInput>
  edits_every?: Maybe<PostTextUpdatedEventWhereInput>
  edits_none?: Maybe<PostTextUpdatedEventWhereInput>
  edits_some?: Maybe<PostTextUpdatedEventWhereInput>
  forumpostrepliesTo_every?: Maybe<ForumPostWhereInput>
  forumpostrepliesTo_none?: Maybe<ForumPostWhereInput>
  forumpostrepliesTo_some?: Maybe<ForumPostWhereInput>
  forumthreadinitialPost_every?: Maybe<ForumThreadWhereInput>
  forumthreadinitialPost_none?: Maybe<ForumThreadWhereInput>
  forumthreadinitialPost_some?: Maybe<ForumThreadWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isVisible_eq?: Maybe<Scalars['Boolean']>
  isVisible_in?: Maybe<Array<Scalars['Boolean']>>
  origin_json?: Maybe<Scalars['JSONObject']>
  postaddedeventpost_every?: Maybe<PostAddedEventWhereInput>
  postaddedeventpost_none?: Maybe<PostAddedEventWhereInput>
  postaddedeventpost_some?: Maybe<PostAddedEventWhereInput>
  postmoderatedeventpost_every?: Maybe<PostModeratedEventWhereInput>
  postmoderatedeventpost_none?: Maybe<PostModeratedEventWhereInput>
  postmoderatedeventpost_some?: Maybe<PostModeratedEventWhereInput>
  repliesTo?: Maybe<ForumPostWhereInput>
  status_json?: Maybe<Scalars['JSONObject']>
  text_contains?: Maybe<Scalars['String']>
  text_endsWith?: Maybe<Scalars['String']>
  text_eq?: Maybe<Scalars['String']>
  text_in?: Maybe<Array<Scalars['String']>>
  text_startsWith?: Maybe<Scalars['String']>
  thread?: Maybe<ForumThreadWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ForumPostWhereUniqueInput = {
  id: Scalars['ID']
}

export type ForumThread = BaseGraphQlObject & {
  author: Membership
  authorId: Scalars['String']
  bountydiscussionThread?: Maybe<Array<Bounty>>
  category: ForumCategory
  categoryId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInEvent: ThreadCreatedEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  initialPost?: Maybe<ForumPost>
  initialPostId?: Maybe<Scalars['String']>
  isSticky: Scalars['Boolean']
  isVisible: Scalars['Boolean']
  madeStickyInEvents: Array<CategoryStickyThreadUpdateEvent>
  metadataUpdates: Array<ThreadMetadataUpdatedEvent>
  movedInEvents: Array<ThreadMovedEvent>
  posts: Array<ForumPost>
  status: ThreadStatus
  tags: Array<ForumThreadTag>
  threaddeletedeventthread?: Maybe<Array<ThreadDeletedEvent>>
  threadmoderatedeventthread?: Maybe<Array<ThreadModeratedEvent>>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  visiblePostsCount: Scalars['Int']
}

export type ForumThreadConnection = {
  edges: Array<ForumThreadEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumThreadCreateInput = {
  author: Scalars['ID']
  category: Scalars['ID']
  initialPost?: Maybe<Scalars['ID']>
  isSticky: Scalars['Boolean']
  isVisible: Scalars['Boolean']
  status: Scalars['JSONObject']
  title: Scalars['String']
  visiblePostsCount: Scalars['Float']
}

export type ForumThreadEdge = {
  cursor: Scalars['String']
  node: ForumThread
}

export enum ForumThreadOrderByInput {
  AuthorAsc = 'author_ASC',
  AuthorDesc = 'author_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InitialPostAsc = 'initialPost_ASC',
  InitialPostDesc = 'initialPost_DESC',
  IsStickyAsc = 'isSticky_ASC',
  IsStickyDesc = 'isSticky_DESC',
  IsVisibleAsc = 'isVisible_ASC',
  IsVisibleDesc = 'isVisible_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VisiblePostsCountAsc = 'visiblePostsCount_ASC',
  VisiblePostsCountDesc = 'visiblePostsCount_DESC',
}

export type ForumThreadTag = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  threads: Array<ForumThread>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  visibleThreadsCount: Scalars['Int']
}

export type ForumThreadTagConnection = {
  edges: Array<ForumThreadTagEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumThreadTagCreateInput = {
  visibleThreadsCount: Scalars['Float']
}

export type ForumThreadTagEdge = {
  cursor: Scalars['String']
  node: ForumThreadTag
}

export enum ForumThreadTagOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VisibleThreadsCountAsc = 'visibleThreadsCount_ASC',
  VisibleThreadsCountDesc = 'visibleThreadsCount_DESC',
}

export type ForumThreadTagUpdateInput = {
  visibleThreadsCount?: Maybe<Scalars['Float']>
}

export type ForumThreadTagWhereInput = {
  AND?: Maybe<Array<ForumThreadTagWhereInput>>
  NOT?: Maybe<Array<ForumThreadTagWhereInput>>
  OR?: Maybe<Array<ForumThreadTagWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  threads_every?: Maybe<ForumThreadWhereInput>
  threads_none?: Maybe<ForumThreadWhereInput>
  threads_some?: Maybe<ForumThreadWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  visibleThreadsCount_eq?: Maybe<Scalars['Int']>
  visibleThreadsCount_gt?: Maybe<Scalars['Int']>
  visibleThreadsCount_gte?: Maybe<Scalars['Int']>
  visibleThreadsCount_in?: Maybe<Array<Scalars['Int']>>
  visibleThreadsCount_lt?: Maybe<Scalars['Int']>
  visibleThreadsCount_lte?: Maybe<Scalars['Int']>
}

export type ForumThreadTagWhereUniqueInput = {
  id: Scalars['ID']
}

export type ForumThreadUpdateInput = {
  author?: Maybe<Scalars['ID']>
  category?: Maybe<Scalars['ID']>
  initialPost?: Maybe<Scalars['ID']>
  isSticky?: Maybe<Scalars['Boolean']>
  isVisible?: Maybe<Scalars['Boolean']>
  status?: Maybe<Scalars['JSONObject']>
  title?: Maybe<Scalars['String']>
  visiblePostsCount?: Maybe<Scalars['Float']>
}

export type ForumThreadWhereInput = {
  AND?: Maybe<Array<ForumThreadWhereInput>>
  NOT?: Maybe<Array<ForumThreadWhereInput>>
  OR?: Maybe<Array<ForumThreadWhereInput>>
  author?: Maybe<MembershipWhereInput>
  bountydiscussionThread_every?: Maybe<BountyWhereInput>
  bountydiscussionThread_none?: Maybe<BountyWhereInput>
  bountydiscussionThread_some?: Maybe<BountyWhereInput>
  category?: Maybe<ForumCategoryWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInEvent?: Maybe<ThreadCreatedEventWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  initialPost?: Maybe<ForumPostWhereInput>
  isSticky_eq?: Maybe<Scalars['Boolean']>
  isSticky_in?: Maybe<Array<Scalars['Boolean']>>
  isVisible_eq?: Maybe<Scalars['Boolean']>
  isVisible_in?: Maybe<Array<Scalars['Boolean']>>
  madeStickyInEvents_every?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
  madeStickyInEvents_none?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
  madeStickyInEvents_some?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
  metadataUpdates_every?: Maybe<ThreadMetadataUpdatedEventWhereInput>
  metadataUpdates_none?: Maybe<ThreadMetadataUpdatedEventWhereInput>
  metadataUpdates_some?: Maybe<ThreadMetadataUpdatedEventWhereInput>
  movedInEvents_every?: Maybe<ThreadMovedEventWhereInput>
  movedInEvents_none?: Maybe<ThreadMovedEventWhereInput>
  movedInEvents_some?: Maybe<ThreadMovedEventWhereInput>
  posts_every?: Maybe<ForumPostWhereInput>
  posts_none?: Maybe<ForumPostWhereInput>
  posts_some?: Maybe<ForumPostWhereInput>
  status_json?: Maybe<Scalars['JSONObject']>
  tags_every?: Maybe<ForumThreadTagWhereInput>
  tags_none?: Maybe<ForumThreadTagWhereInput>
  tags_some?: Maybe<ForumThreadTagWhereInput>
  threaddeletedeventthread_every?: Maybe<ThreadDeletedEventWhereInput>
  threaddeletedeventthread_none?: Maybe<ThreadDeletedEventWhereInput>
  threaddeletedeventthread_some?: Maybe<ThreadDeletedEventWhereInput>
  threadmoderatedeventthread_every?: Maybe<ThreadModeratedEventWhereInput>
  threadmoderatedeventthread_none?: Maybe<ThreadModeratedEventWhereInput>
  threadmoderatedeventthread_some?: Maybe<ThreadModeratedEventWhereInput>
  title_contains?: Maybe<Scalars['String']>
  title_endsWith?: Maybe<Scalars['String']>
  title_eq?: Maybe<Scalars['String']>
  title_in?: Maybe<Array<Scalars['String']>>
  title_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  visiblePostsCount_eq?: Maybe<Scalars['Int']>
  visiblePostsCount_gt?: Maybe<Scalars['Int']>
  visiblePostsCount_gte?: Maybe<Scalars['Int']>
  visiblePostsCount_in?: Maybe<Array<Scalars['Int']>>
  visiblePostsCount_lt?: Maybe<Scalars['Int']>
  visiblePostsCount_lte?: Maybe<Scalars['Int']>
}

export type ForumThreadWhereUniqueInput = {
  id: Scalars['ID']
}

export type FundingRequestDestination = BaseGraphQlObject & {
  account: Scalars['String']
  amount: Scalars['BigInt']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  list: FundingRequestDestinationsList
  listId: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type FundingRequestDestinationConnection = {
  edges: Array<FundingRequestDestinationEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type FundingRequestDestinationCreateInput = {
  account: Scalars['String']
  amount: Scalars['String']
  list: Scalars['ID']
}

export type FundingRequestDestinationEdge = {
  cursor: Scalars['String']
  node: FundingRequestDestination
}

export enum FundingRequestDestinationOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ListAsc = 'list_ASC',
  ListDesc = 'list_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type FundingRequestDestinationUpdateInput = {
  account?: Maybe<Scalars['String']>
  amount?: Maybe<Scalars['String']>
  list?: Maybe<Scalars['ID']>
}

export type FundingRequestDestinationWhereInput = {
  AND?: Maybe<Array<FundingRequestDestinationWhereInput>>
  NOT?: Maybe<Array<FundingRequestDestinationWhereInput>>
  OR?: Maybe<Array<FundingRequestDestinationWhereInput>>
  account_contains?: Maybe<Scalars['String']>
  account_endsWith?: Maybe<Scalars['String']>
  account_eq?: Maybe<Scalars['String']>
  account_in?: Maybe<Array<Scalars['String']>>
  account_startsWith?: Maybe<Scalars['String']>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  list?: Maybe<FundingRequestDestinationsListWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type FundingRequestDestinationWhereUniqueInput = {
  id: Scalars['ID']
}

export type FundingRequestDestinationsList = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  destinations: Array<FundingRequestDestination>
  id: Scalars['ID']
  phantom?: Maybe<Scalars['Int']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type FundingRequestDestinationsListConnection = {
  edges: Array<FundingRequestDestinationsListEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type FundingRequestDestinationsListCreateInput = {
  phantom?: Maybe<Scalars['Float']>
}

export type FundingRequestDestinationsListEdge = {
  cursor: Scalars['String']
  node: FundingRequestDestinationsList
}

export enum FundingRequestDestinationsListOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  PhantomAsc = 'phantom_ASC',
  PhantomDesc = 'phantom_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type FundingRequestDestinationsListUpdateInput = {
  phantom?: Maybe<Scalars['Float']>
}

export type FundingRequestDestinationsListWhereInput = {
  AND?: Maybe<Array<FundingRequestDestinationsListWhereInput>>
  NOT?: Maybe<Array<FundingRequestDestinationsListWhereInput>>
  OR?: Maybe<Array<FundingRequestDestinationsListWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  destinations_every?: Maybe<FundingRequestDestinationWhereInput>
  destinations_none?: Maybe<FundingRequestDestinationWhereInput>
  destinations_some?: Maybe<FundingRequestDestinationWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  phantom_eq?: Maybe<Scalars['Int']>
  phantom_gt?: Maybe<Scalars['Int']>
  phantom_gte?: Maybe<Scalars['Int']>
  phantom_in?: Maybe<Array<Scalars['Int']>>
  phantom_lt?: Maybe<Scalars['Int']>
  phantom_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type FundingRequestDestinationsListWhereUniqueInput = {
  id: Scalars['ID']
}

export type FundingRequestProposalDetails = {
  destinationsList?: Maybe<FundingRequestDestinationsList>
}

export type GeneratedSignature = {
  signature: Scalars['String']
}

export type GeoCoordinates = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  latitude: Scalars['Float']
  longitude: Scalars['Float']
  nodelocationmetadatacoordinates?: Maybe<Array<NodeLocationMetadata>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type GeoCoordinatesConnection = {
  edges: Array<GeoCoordinatesEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type GeoCoordinatesCreateInput = {
  latitude: Scalars['Float']
  longitude: Scalars['Float']
}

export type GeoCoordinatesEdge = {
  cursor: Scalars['String']
  node: GeoCoordinates
}

export enum GeoCoordinatesOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  LatitudeAsc = 'latitude_ASC',
  LatitudeDesc = 'latitude_DESC',
  LongitudeAsc = 'longitude_ASC',
  LongitudeDesc = 'longitude_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type GeoCoordinatesUpdateInput = {
  latitude?: Maybe<Scalars['Float']>
  longitude?: Maybe<Scalars['Float']>
}

export type GeoCoordinatesWhereInput = {
  AND?: Maybe<Array<GeoCoordinatesWhereInput>>
  NOT?: Maybe<Array<GeoCoordinatesWhereInput>>
  OR?: Maybe<Array<GeoCoordinatesWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  latitude_eq?: Maybe<Scalars['Float']>
  latitude_gt?: Maybe<Scalars['Float']>
  latitude_gte?: Maybe<Scalars['Float']>
  latitude_in?: Maybe<Array<Scalars['Float']>>
  latitude_lt?: Maybe<Scalars['Float']>
  latitude_lte?: Maybe<Scalars['Float']>
  longitude_eq?: Maybe<Scalars['Float']>
  longitude_gt?: Maybe<Scalars['Float']>
  longitude_gte?: Maybe<Scalars['Float']>
  longitude_in?: Maybe<Array<Scalars['Float']>>
  longitude_lt?: Maybe<Scalars['Float']>
  longitude_lte?: Maybe<Scalars['Float']>
  nodelocationmetadatacoordinates_every?: Maybe<NodeLocationMetadataWhereInput>
  nodelocationmetadatacoordinates_none?: Maybe<NodeLocationMetadataWhereInput>
  nodelocationmetadatacoordinates_some?: Maybe<NodeLocationMetadataWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type GeoCoordinatesWhereUniqueInput = {
  id: Scalars['ID']
}

export type GeographicalArea =
  | GeographicalAreaContinent
  | GeographicalAreaCountry
  | GeographicalAreaSubdivistion

export type GeographicalAreaContinent = {
  code?: Maybe<Continent>
}

export type GeographicalAreaContinentCreateInput = {
  code?: Maybe<Continent>
}

export type GeographicalAreaContinentUpdateInput = {
  code?: Maybe<Continent>
}

export type GeographicalAreaContinentWhereInput = {
  AND?: Maybe<Array<GeographicalAreaContinentWhereInput>>
  NOT?: Maybe<Array<GeographicalAreaContinentWhereInput>>
  OR?: Maybe<Array<GeographicalAreaContinentWhereInput>>
  code_eq?: Maybe<Continent>
  code_in?: Maybe<Array<Continent>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type GeographicalAreaContinentWhereUniqueInput = {
  id: Scalars['ID']
}

export type GeographicalAreaCountry = {
  code?: Maybe<Scalars['String']>
}

export type GeographicalAreaSubdivistion = {
  code?: Maybe<Scalars['String']>
}

export type InitialInvitationBalanceUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newInitialBalance: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type InitialInvitationBalanceUpdatedEventConnection = {
  edges: Array<InitialInvitationBalanceUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type InitialInvitationBalanceUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newInitialBalance: Scalars['String']
}

export type InitialInvitationBalanceUpdatedEventEdge = {
  cursor: Scalars['String']
  node: InitialInvitationBalanceUpdatedEvent
}

export enum InitialInvitationBalanceUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewInitialBalanceAsc = 'newInitialBalance_ASC',
  NewInitialBalanceDesc = 'newInitialBalance_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type InitialInvitationBalanceUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newInitialBalance?: Maybe<Scalars['String']>
}

export type InitialInvitationBalanceUpdatedEventWhereInput = {
  AND?: Maybe<Array<InitialInvitationBalanceUpdatedEventWhereInput>>
  NOT?: Maybe<Array<InitialInvitationBalanceUpdatedEventWhereInput>>
  OR?: Maybe<Array<InitialInvitationBalanceUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newInitialBalance_eq?: Maybe<Scalars['BigInt']>
  newInitialBalance_gt?: Maybe<Scalars['BigInt']>
  newInitialBalance_gte?: Maybe<Scalars['BigInt']>
  newInitialBalance_in?: Maybe<Array<Scalars['BigInt']>>
  newInitialBalance_lt?: Maybe<Scalars['BigInt']>
  newInitialBalance_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type InitialInvitationBalanceUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type InitialInvitationCountUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newInitialInvitationCount: Scalars['Int']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type InitialInvitationCountUpdatedEventConnection = {
  edges: Array<InitialInvitationCountUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type InitialInvitationCountUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newInitialInvitationCount: Scalars['Float']
}

export type InitialInvitationCountUpdatedEventEdge = {
  cursor: Scalars['String']
  node: InitialInvitationCountUpdatedEvent
}

export enum InitialInvitationCountUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewInitialInvitationCountAsc = 'newInitialInvitationCount_ASC',
  NewInitialInvitationCountDesc = 'newInitialInvitationCount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type InitialInvitationCountUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newInitialInvitationCount?: Maybe<Scalars['Float']>
}

export type InitialInvitationCountUpdatedEventWhereInput = {
  AND?: Maybe<Array<InitialInvitationCountUpdatedEventWhereInput>>
  NOT?: Maybe<Array<InitialInvitationCountUpdatedEventWhereInput>>
  OR?: Maybe<Array<InitialInvitationCountUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newInitialInvitationCount_eq?: Maybe<Scalars['Int']>
  newInitialInvitationCount_gt?: Maybe<Scalars['Int']>
  newInitialInvitationCount_gte?: Maybe<Scalars['Int']>
  newInitialInvitationCount_in?: Maybe<Array<Scalars['Int']>>
  newInitialInvitationCount_lt?: Maybe<Scalars['Int']>
  newInitialInvitationCount_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type InitialInvitationCountUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type InvalidActionMetadata = {
  reason: Scalars['String']
}

export type InvitesTransferredEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    numberOfInvites: Scalars['Int']
    sourceMember: Membership
    sourceMemberId: Scalars['String']
    targetMember: Membership
    targetMemberId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type InvitesTransferredEventConnection = {
  edges: Array<InvitesTransferredEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type InvitesTransferredEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  numberOfInvites: Scalars['Float']
  sourceMember: Scalars['ID']
  targetMember: Scalars['ID']
}

export type InvitesTransferredEventEdge = {
  cursor: Scalars['String']
  node: InvitesTransferredEvent
}

export enum InvitesTransferredEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NumberOfInvitesAsc = 'numberOfInvites_ASC',
  NumberOfInvitesDesc = 'numberOfInvites_DESC',
  SourceMemberAsc = 'sourceMember_ASC',
  SourceMemberDesc = 'sourceMember_DESC',
  TargetMemberAsc = 'targetMember_ASC',
  TargetMemberDesc = 'targetMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type InvitesTransferredEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  numberOfInvites?: Maybe<Scalars['Float']>
  sourceMember?: Maybe<Scalars['ID']>
  targetMember?: Maybe<Scalars['ID']>
}

export type InvitesTransferredEventWhereInput = {
  AND?: Maybe<Array<InvitesTransferredEventWhereInput>>
  NOT?: Maybe<Array<InvitesTransferredEventWhereInput>>
  OR?: Maybe<Array<InvitesTransferredEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  numberOfInvites_eq?: Maybe<Scalars['Int']>
  numberOfInvites_gt?: Maybe<Scalars['Int']>
  numberOfInvites_gte?: Maybe<Scalars['Int']>
  numberOfInvites_in?: Maybe<Array<Scalars['Int']>>
  numberOfInvites_lt?: Maybe<Scalars['Int']>
  numberOfInvites_lte?: Maybe<Scalars['Int']>
  sourceMember?: Maybe<MembershipWhereInput>
  targetMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type InvitesTransferredEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type Language = BaseGraphQlObject & {
  channellanguage?: Maybe<Array<Channel>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  iso: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videolanguage?: Maybe<Array<Video>>
  videosubtitlelanguage?: Maybe<Array<VideoSubtitle>>
}

export type LanguageConnection = {
  edges: Array<LanguageEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LanguageCreateInput = {
  createdInBlock: Scalars['Float']
  iso: Scalars['String']
}

export type LanguageEdge = {
  cursor: Scalars['String']
  node: Language
}

export enum LanguageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IsoAsc = 'iso_ASC',
  IsoDesc = 'iso_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type LanguageUpdateInput = {
  createdInBlock?: Maybe<Scalars['Float']>
  iso?: Maybe<Scalars['String']>
}

export type LanguageWhereInput = {
  AND?: Maybe<Array<LanguageWhereInput>>
  NOT?: Maybe<Array<LanguageWhereInput>>
  OR?: Maybe<Array<LanguageWhereInput>>
  channellanguage_every?: Maybe<ChannelWhereInput>
  channellanguage_none?: Maybe<ChannelWhereInput>
  channellanguage_some?: Maybe<ChannelWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInBlock_eq?: Maybe<Scalars['Int']>
  createdInBlock_gt?: Maybe<Scalars['Int']>
  createdInBlock_gte?: Maybe<Scalars['Int']>
  createdInBlock_in?: Maybe<Array<Scalars['Int']>>
  createdInBlock_lt?: Maybe<Scalars['Int']>
  createdInBlock_lte?: Maybe<Scalars['Int']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  iso_contains?: Maybe<Scalars['String']>
  iso_endsWith?: Maybe<Scalars['String']>
  iso_eq?: Maybe<Scalars['String']>
  iso_in?: Maybe<Array<Scalars['String']>>
  iso_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videolanguage_every?: Maybe<VideoWhereInput>
  videolanguage_none?: Maybe<VideoWhereInput>
  videolanguage_some?: Maybe<VideoWhereInput>
  videosubtitlelanguage_every?: Maybe<VideoSubtitleWhereInput>
  videosubtitlelanguage_none?: Maybe<VideoSubtitleWhereInput>
  videosubtitlelanguage_some?: Maybe<VideoSubtitleWhereInput>
}

export type LanguageWhereUniqueInput = {
  id: Scalars['ID']
}

export type LeaderInvitationQuotaUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newInvitationQuota: Scalars['Int']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type LeaderInvitationQuotaUpdatedEventConnection = {
  edges: Array<LeaderInvitationQuotaUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LeaderInvitationQuotaUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newInvitationQuota: Scalars['Float']
}

export type LeaderInvitationQuotaUpdatedEventEdge = {
  cursor: Scalars['String']
  node: LeaderInvitationQuotaUpdatedEvent
}

export enum LeaderInvitationQuotaUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewInvitationQuotaAsc = 'newInvitationQuota_ASC',
  NewInvitationQuotaDesc = 'newInvitationQuota_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type LeaderInvitationQuotaUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newInvitationQuota?: Maybe<Scalars['Float']>
}

export type LeaderInvitationQuotaUpdatedEventWhereInput = {
  AND?: Maybe<Array<LeaderInvitationQuotaUpdatedEventWhereInput>>
  NOT?: Maybe<Array<LeaderInvitationQuotaUpdatedEventWhereInput>>
  OR?: Maybe<Array<LeaderInvitationQuotaUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newInvitationQuota_eq?: Maybe<Scalars['Int']>
  newInvitationQuota_gt?: Maybe<Scalars['Int']>
  newInvitationQuota_gte?: Maybe<Scalars['Int']>
  newInvitationQuota_in?: Maybe<Array<Scalars['Int']>>
  newInvitationQuota_lt?: Maybe<Scalars['Int']>
  newInvitationQuota_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type LeaderInvitationQuotaUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type LeaderSetEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker?: Maybe<Worker>
    workerId?: Maybe<Scalars['String']>
  }

export type LeaderSetEventConnection = {
  edges: Array<LeaderSetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LeaderSetEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  worker?: Maybe<Scalars['ID']>
}

export type LeaderSetEventEdge = {
  cursor: Scalars['String']
  node: LeaderSetEvent
}

export enum LeaderSetEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type LeaderSetEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  worker?: Maybe<Scalars['ID']>
}

export type LeaderSetEventWhereInput = {
  AND?: Maybe<Array<LeaderSetEventWhereInput>>
  NOT?: Maybe<Array<LeaderSetEventWhereInput>>
  OR?: Maybe<Array<LeaderSetEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type LeaderSetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type LeaderUnsetEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    leader: Worker
    leaderId: Scalars['String']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type LeaderUnsetEventConnection = {
  edges: Array<LeaderUnsetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LeaderUnsetEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  leader: Scalars['ID']
  network: Network
}

export type LeaderUnsetEventEdge = {
  cursor: Scalars['String']
  node: LeaderUnsetEvent
}

export enum LeaderUnsetEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  LeaderAsc = 'leader_ASC',
  LeaderDesc = 'leader_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type LeaderUnsetEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  leader?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
}

export type LeaderUnsetEventWhereInput = {
  AND?: Maybe<Array<LeaderUnsetEventWhereInput>>
  NOT?: Maybe<Array<LeaderUnsetEventWhereInput>>
  OR?: Maybe<Array<LeaderUnsetEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  leader?: Maybe<WorkerWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type LeaderUnsetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type License = BaseGraphQlObject & {
  attribution?: Maybe<Scalars['String']>
  code?: Maybe<Scalars['Int']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  customText?: Maybe<Scalars['String']>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videolicense?: Maybe<Array<Video>>
}

export type LicenseConnection = {
  edges: Array<LicenseEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LicenseCreateInput = {
  attribution?: Maybe<Scalars['String']>
  code?: Maybe<Scalars['Float']>
  customText?: Maybe<Scalars['String']>
}

export type LicenseEdge = {
  cursor: Scalars['String']
  node: License
}

export enum LicenseOrderByInput {
  AttributionAsc = 'attribution_ASC',
  AttributionDesc = 'attribution_DESC',
  CodeAsc = 'code_ASC',
  CodeDesc = 'code_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CustomTextAsc = 'customText_ASC',
  CustomTextDesc = 'customText_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type LicenseUpdateInput = {
  attribution?: Maybe<Scalars['String']>
  code?: Maybe<Scalars['Float']>
  customText?: Maybe<Scalars['String']>
}

export type LicenseWhereInput = {
  AND?: Maybe<Array<LicenseWhereInput>>
  NOT?: Maybe<Array<LicenseWhereInput>>
  OR?: Maybe<Array<LicenseWhereInput>>
  attribution_contains?: Maybe<Scalars['String']>
  attribution_endsWith?: Maybe<Scalars['String']>
  attribution_eq?: Maybe<Scalars['String']>
  attribution_in?: Maybe<Array<Scalars['String']>>
  attribution_startsWith?: Maybe<Scalars['String']>
  code_eq?: Maybe<Scalars['Int']>
  code_gt?: Maybe<Scalars['Int']>
  code_gte?: Maybe<Scalars['Int']>
  code_in?: Maybe<Array<Scalars['Int']>>
  code_lt?: Maybe<Scalars['Int']>
  code_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  customText_contains?: Maybe<Scalars['String']>
  customText_endsWith?: Maybe<Scalars['String']>
  customText_eq?: Maybe<Scalars['String']>
  customText_in?: Maybe<Array<Scalars['String']>>
  customText_startsWith?: Maybe<Scalars['String']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videolicense_every?: Maybe<VideoWhereInput>
  videolicense_none?: Maybe<VideoWhereInput>
  videolicense_some?: Maybe<VideoWhereInput>
}

export type LicenseWhereUniqueInput = {
  id: Scalars['ID']
}

export type MemberAccountsUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    newControllerAccount?: Maybe<Scalars['String']>
    newRootAccount?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type MemberAccountsUpdatedEventConnection = {
  edges: Array<MemberAccountsUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberAccountsUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
  newControllerAccount?: Maybe<Scalars['String']>
  newRootAccount?: Maybe<Scalars['String']>
}

export type MemberAccountsUpdatedEventEdge = {
  cursor: Scalars['String']
  node: MemberAccountsUpdatedEvent
}

export enum MemberAccountsUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewControllerAccountAsc = 'newControllerAccount_ASC',
  NewControllerAccountDesc = 'newControllerAccount_DESC',
  NewRootAccountAsc = 'newRootAccount_ASC',
  NewRootAccountDesc = 'newRootAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberAccountsUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  newControllerAccount?: Maybe<Scalars['String']>
  newRootAccount?: Maybe<Scalars['String']>
}

export type MemberAccountsUpdatedEventWhereInput = {
  AND?: Maybe<Array<MemberAccountsUpdatedEventWhereInput>>
  NOT?: Maybe<Array<MemberAccountsUpdatedEventWhereInput>>
  OR?: Maybe<Array<MemberAccountsUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newControllerAccount_contains?: Maybe<Scalars['String']>
  newControllerAccount_endsWith?: Maybe<Scalars['String']>
  newControllerAccount_eq?: Maybe<Scalars['String']>
  newControllerAccount_in?: Maybe<Array<Scalars['String']>>
  newControllerAccount_startsWith?: Maybe<Scalars['String']>
  newRootAccount_contains?: Maybe<Scalars['String']>
  newRootAccount_endsWith?: Maybe<Scalars['String']>
  newRootAccount_eq?: Maybe<Scalars['String']>
  newRootAccount_in?: Maybe<Array<Scalars['String']>>
  newRootAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MemberAccountsUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MemberBannedFromChannelEvent = BaseGraphQlObject &
  Event & {
    action: Scalars['Boolean']
    channel: Channel
    channelId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type MemberBannedFromChannelEventConnection = {
  edges: Array<MemberBannedFromChannelEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberBannedFromChannelEventCreateInput = {
  action: Scalars['Boolean']
  channel: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
}

export type MemberBannedFromChannelEventEdge = {
  cursor: Scalars['String']
  node: MemberBannedFromChannelEvent
}

export enum MemberBannedFromChannelEventOrderByInput {
  ActionAsc = 'action_ASC',
  ActionDesc = 'action_DESC',
  ChannelAsc = 'channel_ASC',
  ChannelDesc = 'channel_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberBannedFromChannelEventUpdateInput = {
  action?: Maybe<Scalars['Boolean']>
  channel?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
}

export type MemberBannedFromChannelEventWhereInput = {
  AND?: Maybe<Array<MemberBannedFromChannelEventWhereInput>>
  NOT?: Maybe<Array<MemberBannedFromChannelEventWhereInput>>
  OR?: Maybe<Array<MemberBannedFromChannelEventWhereInput>>
  action_eq?: Maybe<Scalars['Boolean']>
  action_in?: Maybe<Array<Scalars['Boolean']>>
  channel?: Maybe<ChannelWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MemberBannedFromChannelEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MemberCreatedEvent = BaseGraphQlObject &
  Event & {
    controllerAccount: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    handle: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    isFoundingMember: Scalars['Boolean']
    metadata: MemberMetadata
    metadataId: Scalars['String']
    network: Network
    newMember: Membership
    newMemberId: Scalars['String']
    rootAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type MemberCreatedEventConnection = {
  edges: Array<MemberCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberCreatedEventCreateInput = {
  controllerAccount: Scalars['String']
  handle: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  isFoundingMember: Scalars['Boolean']
  metadata: Scalars['ID']
  network: Network
  newMember: Scalars['ID']
  rootAccount: Scalars['String']
}

export type MemberCreatedEventEdge = {
  cursor: Scalars['String']
  node: MemberCreatedEvent
}

export enum MemberCreatedEventOrderByInput {
  ControllerAccountAsc = 'controllerAccount_ASC',
  ControllerAccountDesc = 'controllerAccount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  IsFoundingMemberAsc = 'isFoundingMember_ASC',
  IsFoundingMemberDesc = 'isFoundingMember_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewMemberAsc = 'newMember_ASC',
  NewMemberDesc = 'newMember_DESC',
  RootAccountAsc = 'rootAccount_ASC',
  RootAccountDesc = 'rootAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberCreatedEventUpdateInput = {
  controllerAccount?: Maybe<Scalars['String']>
  handle?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  isFoundingMember?: Maybe<Scalars['Boolean']>
  metadata?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  newMember?: Maybe<Scalars['ID']>
  rootAccount?: Maybe<Scalars['String']>
}

export type MemberCreatedEventWhereInput = {
  AND?: Maybe<Array<MemberCreatedEventWhereInput>>
  NOT?: Maybe<Array<MemberCreatedEventWhereInput>>
  OR?: Maybe<Array<MemberCreatedEventWhereInput>>
  controllerAccount_contains?: Maybe<Scalars['String']>
  controllerAccount_endsWith?: Maybe<Scalars['String']>
  controllerAccount_eq?: Maybe<Scalars['String']>
  controllerAccount_in?: Maybe<Array<Scalars['String']>>
  controllerAccount_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  handle_contains?: Maybe<Scalars['String']>
  handle_endsWith?: Maybe<Scalars['String']>
  handle_eq?: Maybe<Scalars['String']>
  handle_in?: Maybe<Array<Scalars['String']>>
  handle_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  isFoundingMember_eq?: Maybe<Scalars['Boolean']>
  isFoundingMember_in?: Maybe<Array<Scalars['Boolean']>>
  metadata?: Maybe<MemberMetadataWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newMember?: Maybe<MembershipWhereInput>
  rootAccount_contains?: Maybe<Scalars['String']>
  rootAccount_endsWith?: Maybe<Scalars['String']>
  rootAccount_eq?: Maybe<Scalars['String']>
  rootAccount_in?: Maybe<Array<Scalars['String']>>
  rootAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MemberCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MemberInvitedEvent = BaseGraphQlObject &
  Event & {
    controllerAccount: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    handle: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    initialBalance: Scalars['BigInt']
    invitingMember: Membership
    invitingMemberId: Scalars['String']
    metadata: MemberMetadata
    metadataId: Scalars['String']
    network: Network
    newMember: Membership
    newMemberId: Scalars['String']
    rootAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type MemberInvitedEventConnection = {
  edges: Array<MemberInvitedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberInvitedEventCreateInput = {
  controllerAccount: Scalars['String']
  handle: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  initialBalance: Scalars['String']
  invitingMember: Scalars['ID']
  metadata: Scalars['ID']
  network: Network
  newMember: Scalars['ID']
  rootAccount: Scalars['String']
}

export type MemberInvitedEventEdge = {
  cursor: Scalars['String']
  node: MemberInvitedEvent
}

export enum MemberInvitedEventOrderByInput {
  ControllerAccountAsc = 'controllerAccount_ASC',
  ControllerAccountDesc = 'controllerAccount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InitialBalanceAsc = 'initialBalance_ASC',
  InitialBalanceDesc = 'initialBalance_DESC',
  InvitingMemberAsc = 'invitingMember_ASC',
  InvitingMemberDesc = 'invitingMember_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewMemberAsc = 'newMember_ASC',
  NewMemberDesc = 'newMember_DESC',
  RootAccountAsc = 'rootAccount_ASC',
  RootAccountDesc = 'rootAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberInvitedEventUpdateInput = {
  controllerAccount?: Maybe<Scalars['String']>
  handle?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  initialBalance?: Maybe<Scalars['String']>
  invitingMember?: Maybe<Scalars['ID']>
  metadata?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  newMember?: Maybe<Scalars['ID']>
  rootAccount?: Maybe<Scalars['String']>
}

export type MemberInvitedEventWhereInput = {
  AND?: Maybe<Array<MemberInvitedEventWhereInput>>
  NOT?: Maybe<Array<MemberInvitedEventWhereInput>>
  OR?: Maybe<Array<MemberInvitedEventWhereInput>>
  controllerAccount_contains?: Maybe<Scalars['String']>
  controllerAccount_endsWith?: Maybe<Scalars['String']>
  controllerAccount_eq?: Maybe<Scalars['String']>
  controllerAccount_in?: Maybe<Array<Scalars['String']>>
  controllerAccount_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  handle_contains?: Maybe<Scalars['String']>
  handle_endsWith?: Maybe<Scalars['String']>
  handle_eq?: Maybe<Scalars['String']>
  handle_in?: Maybe<Array<Scalars['String']>>
  handle_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  initialBalance_eq?: Maybe<Scalars['BigInt']>
  initialBalance_gt?: Maybe<Scalars['BigInt']>
  initialBalance_gte?: Maybe<Scalars['BigInt']>
  initialBalance_in?: Maybe<Array<Scalars['BigInt']>>
  initialBalance_lt?: Maybe<Scalars['BigInt']>
  initialBalance_lte?: Maybe<Scalars['BigInt']>
  invitingMember?: Maybe<MembershipWhereInput>
  metadata?: Maybe<MemberMetadataWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newMember?: Maybe<MembershipWhereInput>
  rootAccount_contains?: Maybe<Scalars['String']>
  rootAccount_endsWith?: Maybe<Scalars['String']>
  rootAccount_eq?: Maybe<Scalars['String']>
  rootAccount_in?: Maybe<Array<Scalars['String']>>
  rootAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MemberInvitedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MemberMetadata = BaseGraphQlObject & {
  about?: Maybe<Scalars['String']>
  avatar?: Maybe<Avatar>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  externalResources?: Maybe<Array<MembershipExternalResource>>
  id: Scalars['ID']
  member?: Maybe<Membership>
  membercreatedeventmetadata?: Maybe<Array<MemberCreatedEvent>>
  memberinvitedeventmetadata?: Maybe<Array<MemberInvitedEvent>>
  memberprofileupdatedeventnewMetadata?: Maybe<Array<MemberProfileUpdatedEvent>>
  membershipboughteventmetadata?: Maybe<Array<MembershipBoughtEvent>>
  membershipgiftedeventmetadata?: Maybe<Array<MembershipGiftedEvent>>
  name?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type MemberMetadataConnection = {
  edges: Array<MemberMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberMetadataCreateInput = {
  about?: Maybe<Scalars['String']>
  avatar: Scalars['JSONObject']
  name?: Maybe<Scalars['String']>
}

export type MemberMetadataEdge = {
  cursor: Scalars['String']
  node: MemberMetadata
}

export enum MemberMetadataOrderByInput {
  AboutAsc = 'about_ASC',
  AboutDesc = 'about_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberMetadataUpdateInput = {
  about?: Maybe<Scalars['String']>
  avatar?: Maybe<Scalars['JSONObject']>
  name?: Maybe<Scalars['String']>
}

export type MemberMetadataWhereInput = {
  AND?: Maybe<Array<MemberMetadataWhereInput>>
  NOT?: Maybe<Array<MemberMetadataWhereInput>>
  OR?: Maybe<Array<MemberMetadataWhereInput>>
  about_contains?: Maybe<Scalars['String']>
  about_endsWith?: Maybe<Scalars['String']>
  about_eq?: Maybe<Scalars['String']>
  about_in?: Maybe<Array<Scalars['String']>>
  about_startsWith?: Maybe<Scalars['String']>
  avatar_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  externalResources_every?: Maybe<MembershipExternalResourceWhereInput>
  externalResources_none?: Maybe<MembershipExternalResourceWhereInput>
  externalResources_some?: Maybe<MembershipExternalResourceWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  member?: Maybe<MembershipWhereInput>
  membercreatedeventmetadata_every?: Maybe<MemberCreatedEventWhereInput>
  membercreatedeventmetadata_none?: Maybe<MemberCreatedEventWhereInput>
  membercreatedeventmetadata_some?: Maybe<MemberCreatedEventWhereInput>
  memberinvitedeventmetadata_every?: Maybe<MemberInvitedEventWhereInput>
  memberinvitedeventmetadata_none?: Maybe<MemberInvitedEventWhereInput>
  memberinvitedeventmetadata_some?: Maybe<MemberInvitedEventWhereInput>
  memberprofileupdatedeventnewMetadata_every?: Maybe<MemberProfileUpdatedEventWhereInput>
  memberprofileupdatedeventnewMetadata_none?: Maybe<MemberProfileUpdatedEventWhereInput>
  memberprofileupdatedeventnewMetadata_some?: Maybe<MemberProfileUpdatedEventWhereInput>
  membershipboughteventmetadata_every?: Maybe<MembershipBoughtEventWhereInput>
  membershipboughteventmetadata_none?: Maybe<MembershipBoughtEventWhereInput>
  membershipboughteventmetadata_some?: Maybe<MembershipBoughtEventWhereInput>
  membershipgiftedeventmetadata_every?: Maybe<MembershipGiftedEventWhereInput>
  membershipgiftedeventmetadata_none?: Maybe<MembershipGiftedEventWhereInput>
  membershipgiftedeventmetadata_some?: Maybe<MembershipGiftedEventWhereInput>
  name_contains?: Maybe<Scalars['String']>
  name_endsWith?: Maybe<Scalars['String']>
  name_eq?: Maybe<Scalars['String']>
  name_in?: Maybe<Array<Scalars['String']>>
  name_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MemberMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type MemberProfileUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    newHandle?: Maybe<Scalars['String']>
    newMetadata: MemberMetadata
    newMetadataId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type MemberProfileUpdatedEventConnection = {
  edges: Array<MemberProfileUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberProfileUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
  newHandle?: Maybe<Scalars['String']>
  newMetadata: Scalars['ID']
}

export type MemberProfileUpdatedEventEdge = {
  cursor: Scalars['String']
  node: MemberProfileUpdatedEvent
}

export enum MemberProfileUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewHandleAsc = 'newHandle_ASC',
  NewHandleDesc = 'newHandle_DESC',
  NewMetadataAsc = 'newMetadata_ASC',
  NewMetadataDesc = 'newMetadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberProfileUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  newHandle?: Maybe<Scalars['String']>
  newMetadata?: Maybe<Scalars['ID']>
}

export type MemberProfileUpdatedEventWhereInput = {
  AND?: Maybe<Array<MemberProfileUpdatedEventWhereInput>>
  NOT?: Maybe<Array<MemberProfileUpdatedEventWhereInput>>
  OR?: Maybe<Array<MemberProfileUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newHandle_contains?: Maybe<Scalars['String']>
  newHandle_endsWith?: Maybe<Scalars['String']>
  newHandle_eq?: Maybe<Scalars['String']>
  newHandle_in?: Maybe<Array<Scalars['String']>>
  newHandle_startsWith?: Maybe<Scalars['String']>
  newMetadata?: Maybe<MemberMetadataWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MemberProfileUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MemberVerificationStatusUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    isVerified: Scalars['Boolean']
    member: Membership
    memberId: Scalars['String']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type MemberVerificationStatusUpdatedEventConnection = {
  edges: Array<MemberVerificationStatusUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberVerificationStatusUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  isVerified: Scalars['Boolean']
  member: Scalars['ID']
  network: Network
  worker: Scalars['ID']
}

export type MemberVerificationStatusUpdatedEventEdge = {
  cursor: Scalars['String']
  node: MemberVerificationStatusUpdatedEvent
}

export enum MemberVerificationStatusUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  IsVerifiedAsc = 'isVerified_ASC',
  IsVerifiedDesc = 'isVerified_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type MemberVerificationStatusUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  isVerified?: Maybe<Scalars['Boolean']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  worker?: Maybe<Scalars['ID']>
}

export type MemberVerificationStatusUpdatedEventWhereInput = {
  AND?: Maybe<Array<MemberVerificationStatusUpdatedEventWhereInput>>
  NOT?: Maybe<Array<MemberVerificationStatusUpdatedEventWhereInput>>
  OR?: Maybe<Array<MemberVerificationStatusUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  isVerified_eq?: Maybe<Scalars['Boolean']>
  isVerified_in?: Maybe<Array<Scalars['Boolean']>>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type MemberVerificationStatusUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MembersByHandleFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: MembersByHandleSearchResult
  rank: Scalars['Float']
}

export type MembersByHandleSearchResult = Membership

export type Membership = BaseGraphQlObject & {
  appownerMember?: Maybe<Array<App>>
  auctionbidcanceledeventmember?: Maybe<Array<AuctionBidCanceledEvent>>
  auctionbidcanceledeventownerMember?: Maybe<Array<AuctionBidCanceledEvent>>
  auctionbidmadeeventmember?: Maybe<Array<AuctionBidMadeEvent>>
  auctionbidmadeeventownerMember?: Maybe<Array<AuctionBidMadeEvent>>
  auctionbidmadeeventpreviousTopBidder?: Maybe<Array<AuctionBidMadeEvent>>
  auctioncanceledeventownerMember?: Maybe<Array<AuctionCanceledEvent>>
  auctioninitialOwner?: Maybe<Array<Auction>>
  auctionwinningMember?: Maybe<Array<Auction>>
  bidbidder?: Maybe<Array<Bid>>
  bidmadecompletingauctioneventmember?: Maybe<Array<BidMadeCompletingAuctionEvent>>
  bidmadecompletingauctioneventownerMember?: Maybe<Array<BidMadeCompletingAuctionEvent>>
  bidmadecompletingauctioneventpreviousTopBidder?: Maybe<Array<BidMadeCompletingAuctionEvent>>
  boundAccounts: Array<Scalars['String']>
  bountycontributioncontributor?: Maybe<Array<BountyContribution>>
  bountycreator?: Maybe<Array<Bounty>>
  bountyentryworker?: Maybe<Array<BountyEntry>>
  bountyoracle?: Maybe<Array<Bounty>>
  budgetfundedeventmember?: Maybe<Array<BudgetFundedEvent>>
  buynowcanceledeventownerMember?: Maybe<Array<BuyNowCanceledEvent>>
  buynowpriceupdatedeventownerMember?: Maybe<Array<BuyNowPriceUpdatedEvent>>
  channelpaymentmadeeventpayer?: Maybe<Array<ChannelPaymentMadeEvent>>
  channels: Array<Channel>
  collaboratorInChannels: Array<Collaborator>
  commentauthor?: Maybe<Array<Comment>>
  commentcreatedeventparentCommentAuthor?: Maybe<Array<CommentCreatedEvent>>
  commentreactedeventreactingMember?: Maybe<Array<CommentReactedEvent>>
  commentreactionmember?: Maybe<Array<CommentReaction>>
  controllerAccount: Scalars['String']
  councilCandidacies: Array<Candidate>
  councilMembers: Array<CouncilMember>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  englishauctionsettledeventownerMember?: Maybe<Array<EnglishAuctionSettledEvent>>
  englishauctionsettledeventwinner?: Maybe<Array<EnglishAuctionSettledEvent>>
  englishauctionstartedeventownerMember?: Maybe<Array<EnglishAuctionStartedEvent>>
  entry: MembershipEntryMethod
  externalResources?: Maybe<Array<MembershipExternalResource>>
  forumpostauthor?: Maybe<Array<ForumPost>>
  forumthreadauthor?: Maybe<Array<ForumThread>>
  handle: Scalars['String']
  id: Scalars['ID']
  inviteCount: Scalars['Int']
  invitedBy?: Maybe<Membership>
  invitedById?: Maybe<Scalars['String']>
  invitees: Array<Membership>
  invitestransferredeventsourceMember?: Maybe<Array<InvitesTransferredEvent>>
  invitestransferredeventtargetMember?: Maybe<Array<InvitesTransferredEvent>>
  isCouncilMember: Scalars['Boolean']
  isFoundingMember: Scalars['Boolean']
  isVerified: Scalars['Boolean']
  memberBannedFromChannels: Array<Channel>
  memberBidMadeCompletingAuctionEvents: Array<BidMadeCompletingAuctionEvent>
  memberEnglishAuctionSettledEvents: Array<EnglishAuctionSettledEvent>
  memberOpenAuctionAcceptedBidEvents: Array<OpenAuctionBidAcceptedEvent>
  memberaccountsupdatedeventmember?: Maybe<Array<MemberAccountsUpdatedEvent>>
  memberbannedfromchanneleventmember?: Maybe<Array<MemberBannedFromChannelEvent>>
  membercreatedeventnewMember?: Maybe<Array<MemberCreatedEvent>>
  memberinvitedeventinvitingMember?: Maybe<Array<MemberInvitedEvent>>
  memberinvitedeventnewMember?: Maybe<Array<MemberInvitedEvent>>
  memberprofileupdatedeventmember?: Maybe<Array<MemberProfileUpdatedEvent>>
  membershipboughteventnewMember?: Maybe<Array<MembershipBoughtEvent>>
  membershipboughteventreferrer?: Maybe<Array<MembershipBoughtEvent>>
  membershipgiftedeventnewMember?: Maybe<Array<MembershipGiftedEvent>>
  memberverificationstatusupdatedeventmember?: Maybe<Array<MemberVerificationStatusUpdatedEvent>>
  metadata: MemberMetadata
  metadataId: Scalars['String']
  nftCollectorInChannels: Array<ChannelNftCollectors>
  nftboughteventmember?: Maybe<Array<NftBoughtEvent>>
  nftboughteventownerMember?: Maybe<Array<NftBoughtEvent>>
  nftissuedeventownerMember?: Maybe<Array<NftIssuedEvent>>
  nftsellordermadeeventownerMember?: Maybe<Array<NftSellOrderMadeEvent>>
  nftslingedbacktotheoriginalartisteventownerMember?: Maybe<
    Array<NftSlingedBackToTheOriginalArtistEvent>
  >
  offeracceptedeventownerMember?: Maybe<Array<OfferAcceptedEvent>>
  offercanceledeventownerMember?: Maybe<Array<OfferCanceledEvent>>
  offerstartedeventmember?: Maybe<Array<OfferStartedEvent>>
  offerstartedeventownerMember?: Maybe<Array<OfferStartedEvent>>
  openauctionbidacceptedeventownerMember?: Maybe<Array<OpenAuctionBidAcceptedEvent>>
  openauctionbidacceptedeventwinningBidder?: Maybe<Array<OpenAuctionBidAcceptedEvent>>
  openauctionstartedeventownerMember?: Maybe<Array<OpenAuctionStartedEvent>>
  ownedNfts: Array<OwnedNft>
  postdeletedeventactor?: Maybe<Array<PostDeletedEvent>>
  proposalcreator?: Maybe<Array<Proposal>>
  proposaldiscussionpostauthor?: Maybe<Array<ProposalDiscussionPost>>
  proposaldiscussionpostdeletedeventactor?: Maybe<Array<ProposalDiscussionPostDeletedEvent>>
  proposaldiscussionthreadmodechangedeventactor?: Maybe<
    Array<ProposalDiscussionThreadModeChangedEvent>
  >
  proposalvotedeventvoter?: Maybe<Array<ProposalVotedEvent>>
  referredBy?: Maybe<Membership>
  referredById?: Maybe<Scalars['String']>
  referredMembers: Array<Membership>
  roles: Array<Worker>
  rootAccount: Scalars['String']
  stakingaccountaddedeventmember?: Maybe<Array<StakingAccountAddedEvent>>
  stakingaccountconfirmedeventmember?: Maybe<Array<StakingAccountConfirmedEvent>>
  stakingaccountremovedeventmember?: Maybe<Array<StakingAccountRemovedEvent>>
  totalChannelsCreated: Scalars['Int']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videoreactedeventreactingMember?: Maybe<Array<VideoReactedEvent>>
  videoreactionmember?: Maybe<Array<VideoReaction>>
  whitelistedIn: Array<ProposalDiscussionWhitelist>
  whitelistedInAuctions: Array<Auction>
  whitelistedInBounties: Array<BountyEntrantWhitelist>
  workinggroupapplicationapplicant?: Maybe<Array<WorkingGroupApplication>>
}

export type MembershipBoughtEvent = BaseGraphQlObject &
  Event & {
    controllerAccount: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    handle: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    metadata: MemberMetadata
    metadataId: Scalars['String']
    network: Network
    newMember: Membership
    newMemberId: Scalars['String']
    referrer?: Maybe<Membership>
    referrerId?: Maybe<Scalars['String']>
    rootAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type MembershipBoughtEventConnection = {
  edges: Array<MembershipBoughtEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipBoughtEventCreateInput = {
  controllerAccount: Scalars['String']
  handle: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  metadata: Scalars['ID']
  network: Network
  newMember: Scalars['ID']
  referrer?: Maybe<Scalars['ID']>
  rootAccount: Scalars['String']
}

export type MembershipBoughtEventEdge = {
  cursor: Scalars['String']
  node: MembershipBoughtEvent
}

export enum MembershipBoughtEventOrderByInput {
  ControllerAccountAsc = 'controllerAccount_ASC',
  ControllerAccountDesc = 'controllerAccount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewMemberAsc = 'newMember_ASC',
  NewMemberDesc = 'newMember_DESC',
  ReferrerAsc = 'referrer_ASC',
  ReferrerDesc = 'referrer_DESC',
  RootAccountAsc = 'rootAccount_ASC',
  RootAccountDesc = 'rootAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MembershipBoughtEventUpdateInput = {
  controllerAccount?: Maybe<Scalars['String']>
  handle?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  metadata?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  newMember?: Maybe<Scalars['ID']>
  referrer?: Maybe<Scalars['ID']>
  rootAccount?: Maybe<Scalars['String']>
}

export type MembershipBoughtEventWhereInput = {
  AND?: Maybe<Array<MembershipBoughtEventWhereInput>>
  NOT?: Maybe<Array<MembershipBoughtEventWhereInput>>
  OR?: Maybe<Array<MembershipBoughtEventWhereInput>>
  controllerAccount_contains?: Maybe<Scalars['String']>
  controllerAccount_endsWith?: Maybe<Scalars['String']>
  controllerAccount_eq?: Maybe<Scalars['String']>
  controllerAccount_in?: Maybe<Array<Scalars['String']>>
  controllerAccount_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  handle_contains?: Maybe<Scalars['String']>
  handle_endsWith?: Maybe<Scalars['String']>
  handle_eq?: Maybe<Scalars['String']>
  handle_in?: Maybe<Array<Scalars['String']>>
  handle_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  metadata?: Maybe<MemberMetadataWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newMember?: Maybe<MembershipWhereInput>
  referrer?: Maybe<MembershipWhereInput>
  rootAccount_contains?: Maybe<Scalars['String']>
  rootAccount_endsWith?: Maybe<Scalars['String']>
  rootAccount_eq?: Maybe<Scalars['String']>
  rootAccount_in?: Maybe<Array<Scalars['String']>>
  rootAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MembershipBoughtEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MembershipConnection = {
  edges: Array<MembershipEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipCreateInput = {
  boundAccounts: Array<Scalars['String']>
  controllerAccount: Scalars['String']
  entry: Scalars['JSONObject']
  handle: Scalars['String']
  inviteCount: Scalars['Float']
  invitedBy?: Maybe<Scalars['ID']>
  isCouncilMember: Scalars['Boolean']
  isFoundingMember: Scalars['Boolean']
  isVerified: Scalars['Boolean']
  metadata: Scalars['ID']
  referredBy?: Maybe<Scalars['ID']>
  rootAccount: Scalars['String']
  totalChannelsCreated: Scalars['Float']
}

export type MembershipEdge = {
  cursor: Scalars['String']
  node: Membership
}

export type MembershipEntryGenesis = {
  phantom?: Maybe<Scalars['Int']>
}

export type MembershipEntryGifted = {
  membershipGiftedEvent?: Maybe<MembershipGiftedEvent>
}

export type MembershipEntryInvited = {
  memberInvitedEvent?: Maybe<MemberInvitedEvent>
}

export type MembershipEntryMemberCreated = {
  memberCreatedEvent?: Maybe<MemberCreatedEvent>
}

export type MembershipEntryMethod =
  | MembershipEntryGenesis
  | MembershipEntryGifted
  | MembershipEntryInvited
  | MembershipEntryMemberCreated
  | MembershipEntryPaid

export type MembershipEntryPaid = {
  membershipBoughtEvent?: Maybe<MembershipBoughtEvent>
}

export type MembershipExternalResource = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  member?: Maybe<Membership>
  memberId?: Maybe<Scalars['String']>
  memberMetadata: MemberMetadata
  memberMetadataId: Scalars['String']
  type: MembershipExternalResourceType
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  value: Scalars['String']
  version: Scalars['Int']
}

export type MembershipExternalResourceConnection = {
  edges: Array<MembershipExternalResourceEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipExternalResourceCreateInput = {
  member?: Maybe<Scalars['ID']>
  memberMetadata: Scalars['ID']
  type: MembershipExternalResourceType
  value: Scalars['String']
}

export type MembershipExternalResourceEdge = {
  cursor: Scalars['String']
  node: MembershipExternalResource
}

export enum MembershipExternalResourceOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MemberMetadataAsc = 'memberMetadata_ASC',
  MemberMetadataDesc = 'memberMetadata_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  ValueAsc = 'value_ASC',
  ValueDesc = 'value_DESC',
}

export enum MembershipExternalResourceType {
  Discord = 'DISCORD',
  Email = 'EMAIL',
  Facebook = 'FACEBOOK',
  Hyperlink = 'HYPERLINK',
  Irc = 'IRC',
  Matrix = 'MATRIX',
  Telegram = 'TELEGRAM',
  Twitter = 'TWITTER',
  Wechat = 'WECHAT',
  Whatsapp = 'WHATSAPP',
  Youtube = 'YOUTUBE',
}

export type MembershipExternalResourceUpdateInput = {
  member?: Maybe<Scalars['ID']>
  memberMetadata?: Maybe<Scalars['ID']>
  type?: Maybe<MembershipExternalResourceType>
  value?: Maybe<Scalars['String']>
}

export type MembershipExternalResourceWhereInput = {
  AND?: Maybe<Array<MembershipExternalResourceWhereInput>>
  NOT?: Maybe<Array<MembershipExternalResourceWhereInput>>
  OR?: Maybe<Array<MembershipExternalResourceWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  member?: Maybe<MembershipWhereInput>
  memberMetadata?: Maybe<MemberMetadataWhereInput>
  type_eq?: Maybe<MembershipExternalResourceType>
  type_in?: Maybe<Array<MembershipExternalResourceType>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  value_contains?: Maybe<Scalars['String']>
  value_endsWith?: Maybe<Scalars['String']>
  value_eq?: Maybe<Scalars['String']>
  value_in?: Maybe<Array<Scalars['String']>>
  value_startsWith?: Maybe<Scalars['String']>
}

export type MembershipExternalResourceWhereUniqueInput = {
  id: Scalars['ID']
}

export type MembershipGiftedEvent = BaseGraphQlObject &
  Event & {
    controllerAccount: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    handle: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    metadata: MemberMetadata
    metadataId: Scalars['String']
    network: Network
    newMember: Membership
    newMemberId: Scalars['String']
    rootAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type MembershipGiftedEventConnection = {
  edges: Array<MembershipGiftedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipGiftedEventCreateInput = {
  controllerAccount: Scalars['String']
  handle: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  metadata: Scalars['ID']
  network: Network
  newMember: Scalars['ID']
  rootAccount: Scalars['String']
}

export type MembershipGiftedEventEdge = {
  cursor: Scalars['String']
  node: MembershipGiftedEvent
}

export enum MembershipGiftedEventOrderByInput {
  ControllerAccountAsc = 'controllerAccount_ASC',
  ControllerAccountDesc = 'controllerAccount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewMemberAsc = 'newMember_ASC',
  NewMemberDesc = 'newMember_DESC',
  RootAccountAsc = 'rootAccount_ASC',
  RootAccountDesc = 'rootAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MembershipGiftedEventUpdateInput = {
  controllerAccount?: Maybe<Scalars['String']>
  handle?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  metadata?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  newMember?: Maybe<Scalars['ID']>
  rootAccount?: Maybe<Scalars['String']>
}

export type MembershipGiftedEventWhereInput = {
  AND?: Maybe<Array<MembershipGiftedEventWhereInput>>
  NOT?: Maybe<Array<MembershipGiftedEventWhereInput>>
  OR?: Maybe<Array<MembershipGiftedEventWhereInput>>
  controllerAccount_contains?: Maybe<Scalars['String']>
  controllerAccount_endsWith?: Maybe<Scalars['String']>
  controllerAccount_eq?: Maybe<Scalars['String']>
  controllerAccount_in?: Maybe<Array<Scalars['String']>>
  controllerAccount_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  handle_contains?: Maybe<Scalars['String']>
  handle_endsWith?: Maybe<Scalars['String']>
  handle_eq?: Maybe<Scalars['String']>
  handle_in?: Maybe<Array<Scalars['String']>>
  handle_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  metadata?: Maybe<MemberMetadataWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newMember?: Maybe<MembershipWhereInput>
  rootAccount_contains?: Maybe<Scalars['String']>
  rootAccount_endsWith?: Maybe<Scalars['String']>
  rootAccount_eq?: Maybe<Scalars['String']>
  rootAccount_in?: Maybe<Array<Scalars['String']>>
  rootAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MembershipGiftedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum MembershipOrderByInput {
  ControllerAccountAsc = 'controllerAccount_ASC',
  ControllerAccountDesc = 'controllerAccount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  InviteCountAsc = 'inviteCount_ASC',
  InviteCountDesc = 'inviteCount_DESC',
  InvitedByAsc = 'invitedBy_ASC',
  InvitedByDesc = 'invitedBy_DESC',
  IsCouncilMemberAsc = 'isCouncilMember_ASC',
  IsCouncilMemberDesc = 'isCouncilMember_DESC',
  IsFoundingMemberAsc = 'isFoundingMember_ASC',
  IsFoundingMemberDesc = 'isFoundingMember_DESC',
  IsVerifiedAsc = 'isVerified_ASC',
  IsVerifiedDesc = 'isVerified_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  ReferredByAsc = 'referredBy_ASC',
  ReferredByDesc = 'referredBy_DESC',
  RootAccountAsc = 'rootAccount_ASC',
  RootAccountDesc = 'rootAccount_DESC',
  TotalChannelsCreatedAsc = 'totalChannelsCreated_ASC',
  TotalChannelsCreatedDesc = 'totalChannelsCreated_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MembershipPriceUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newPrice: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type MembershipPriceUpdatedEventConnection = {
  edges: Array<MembershipPriceUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipPriceUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newPrice: Scalars['String']
}

export type MembershipPriceUpdatedEventEdge = {
  cursor: Scalars['String']
  node: MembershipPriceUpdatedEvent
}

export enum MembershipPriceUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewPriceAsc = 'newPrice_ASC',
  NewPriceDesc = 'newPrice_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MembershipPriceUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newPrice?: Maybe<Scalars['String']>
}

export type MembershipPriceUpdatedEventWhereInput = {
  AND?: Maybe<Array<MembershipPriceUpdatedEventWhereInput>>
  NOT?: Maybe<Array<MembershipPriceUpdatedEventWhereInput>>
  OR?: Maybe<Array<MembershipPriceUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newPrice_eq?: Maybe<Scalars['BigInt']>
  newPrice_gt?: Maybe<Scalars['BigInt']>
  newPrice_gte?: Maybe<Scalars['BigInt']>
  newPrice_in?: Maybe<Array<Scalars['BigInt']>>
  newPrice_lt?: Maybe<Scalars['BigInt']>
  newPrice_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MembershipPriceUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MembershipUpdateInput = {
  boundAccounts?: Maybe<Array<Scalars['String']>>
  controllerAccount?: Maybe<Scalars['String']>
  entry?: Maybe<Scalars['JSONObject']>
  handle?: Maybe<Scalars['String']>
  inviteCount?: Maybe<Scalars['Float']>
  invitedBy?: Maybe<Scalars['ID']>
  isCouncilMember?: Maybe<Scalars['Boolean']>
  isFoundingMember?: Maybe<Scalars['Boolean']>
  isVerified?: Maybe<Scalars['Boolean']>
  metadata?: Maybe<Scalars['ID']>
  referredBy?: Maybe<Scalars['ID']>
  rootAccount?: Maybe<Scalars['String']>
  totalChannelsCreated?: Maybe<Scalars['Float']>
}

export type MembershipWhereInput = {
  AND?: Maybe<Array<MembershipWhereInput>>
  NOT?: Maybe<Array<MembershipWhereInput>>
  OR?: Maybe<Array<MembershipWhereInput>>
  appownerMember_every?: Maybe<AppWhereInput>
  appownerMember_none?: Maybe<AppWhereInput>
  appownerMember_some?: Maybe<AppWhereInput>
  auctionbidcanceledeventmember_every?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventmember_none?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventmember_some?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventownerMember_every?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventownerMember_none?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventownerMember_some?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidmadeeventmember_every?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventmember_none?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventmember_some?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventownerMember_every?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventownerMember_none?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventownerMember_some?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventpreviousTopBidder_every?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventpreviousTopBidder_none?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventpreviousTopBidder_some?: Maybe<AuctionBidMadeEventWhereInput>
  auctioncanceledeventownerMember_every?: Maybe<AuctionCanceledEventWhereInput>
  auctioncanceledeventownerMember_none?: Maybe<AuctionCanceledEventWhereInput>
  auctioncanceledeventownerMember_some?: Maybe<AuctionCanceledEventWhereInput>
  auctioninitialOwner_every?: Maybe<AuctionWhereInput>
  auctioninitialOwner_none?: Maybe<AuctionWhereInput>
  auctioninitialOwner_some?: Maybe<AuctionWhereInput>
  auctionwinningMember_every?: Maybe<AuctionWhereInput>
  auctionwinningMember_none?: Maybe<AuctionWhereInput>
  auctionwinningMember_some?: Maybe<AuctionWhereInput>
  bidbidder_every?: Maybe<BidWhereInput>
  bidbidder_none?: Maybe<BidWhereInput>
  bidbidder_some?: Maybe<BidWhereInput>
  bidmadecompletingauctioneventmember_every?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventmember_none?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventmember_some?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventownerMember_every?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventownerMember_none?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventownerMember_some?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventpreviousTopBidder_every?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventpreviousTopBidder_none?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventpreviousTopBidder_some?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  boundAccounts_containsAll?: Maybe<Array<Scalars['String']>>
  boundAccounts_containsAny?: Maybe<Array<Scalars['String']>>
  boundAccounts_containsNone?: Maybe<Array<Scalars['String']>>
  bountycontributioncontributor_every?: Maybe<BountyContributionWhereInput>
  bountycontributioncontributor_none?: Maybe<BountyContributionWhereInput>
  bountycontributioncontributor_some?: Maybe<BountyContributionWhereInput>
  bountycreator_every?: Maybe<BountyWhereInput>
  bountycreator_none?: Maybe<BountyWhereInput>
  bountycreator_some?: Maybe<BountyWhereInput>
  bountyentryworker_every?: Maybe<BountyEntryWhereInput>
  bountyentryworker_none?: Maybe<BountyEntryWhereInput>
  bountyentryworker_some?: Maybe<BountyEntryWhereInput>
  bountyoracle_every?: Maybe<BountyWhereInput>
  bountyoracle_none?: Maybe<BountyWhereInput>
  bountyoracle_some?: Maybe<BountyWhereInput>
  budgetfundedeventmember_every?: Maybe<BudgetFundedEventWhereInput>
  budgetfundedeventmember_none?: Maybe<BudgetFundedEventWhereInput>
  budgetfundedeventmember_some?: Maybe<BudgetFundedEventWhereInput>
  buynowcanceledeventownerMember_every?: Maybe<BuyNowCanceledEventWhereInput>
  buynowcanceledeventownerMember_none?: Maybe<BuyNowCanceledEventWhereInput>
  buynowcanceledeventownerMember_some?: Maybe<BuyNowCanceledEventWhereInput>
  buynowpriceupdatedeventownerMember_every?: Maybe<BuyNowPriceUpdatedEventWhereInput>
  buynowpriceupdatedeventownerMember_none?: Maybe<BuyNowPriceUpdatedEventWhereInput>
  buynowpriceupdatedeventownerMember_some?: Maybe<BuyNowPriceUpdatedEventWhereInput>
  channelpaymentmadeeventpayer_every?: Maybe<ChannelPaymentMadeEventWhereInput>
  channelpaymentmadeeventpayer_none?: Maybe<ChannelPaymentMadeEventWhereInput>
  channelpaymentmadeeventpayer_some?: Maybe<ChannelPaymentMadeEventWhereInput>
  channels_every?: Maybe<ChannelWhereInput>
  channels_none?: Maybe<ChannelWhereInput>
  channels_some?: Maybe<ChannelWhereInput>
  collaboratorInChannels_every?: Maybe<CollaboratorWhereInput>
  collaboratorInChannels_none?: Maybe<CollaboratorWhereInput>
  collaboratorInChannels_some?: Maybe<CollaboratorWhereInput>
  commentauthor_every?: Maybe<CommentWhereInput>
  commentauthor_none?: Maybe<CommentWhereInput>
  commentauthor_some?: Maybe<CommentWhereInput>
  commentcreatedeventparentCommentAuthor_every?: Maybe<CommentCreatedEventWhereInput>
  commentcreatedeventparentCommentAuthor_none?: Maybe<CommentCreatedEventWhereInput>
  commentcreatedeventparentCommentAuthor_some?: Maybe<CommentCreatedEventWhereInput>
  commentreactedeventreactingMember_every?: Maybe<CommentReactedEventWhereInput>
  commentreactedeventreactingMember_none?: Maybe<CommentReactedEventWhereInput>
  commentreactedeventreactingMember_some?: Maybe<CommentReactedEventWhereInput>
  commentreactionmember_every?: Maybe<CommentReactionWhereInput>
  commentreactionmember_none?: Maybe<CommentReactionWhereInput>
  commentreactionmember_some?: Maybe<CommentReactionWhereInput>
  controllerAccount_contains?: Maybe<Scalars['String']>
  controllerAccount_endsWith?: Maybe<Scalars['String']>
  controllerAccount_eq?: Maybe<Scalars['String']>
  controllerAccount_in?: Maybe<Array<Scalars['String']>>
  controllerAccount_startsWith?: Maybe<Scalars['String']>
  councilCandidacies_every?: Maybe<CandidateWhereInput>
  councilCandidacies_none?: Maybe<CandidateWhereInput>
  councilCandidacies_some?: Maybe<CandidateWhereInput>
  councilMembers_every?: Maybe<CouncilMemberWhereInput>
  councilMembers_none?: Maybe<CouncilMemberWhereInput>
  councilMembers_some?: Maybe<CouncilMemberWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  englishauctionsettledeventownerMember_every?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventownerMember_none?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventownerMember_some?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventwinner_every?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventwinner_none?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventwinner_some?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionstartedeventownerMember_every?: Maybe<EnglishAuctionStartedEventWhereInput>
  englishauctionstartedeventownerMember_none?: Maybe<EnglishAuctionStartedEventWhereInput>
  englishauctionstartedeventownerMember_some?: Maybe<EnglishAuctionStartedEventWhereInput>
  entry_json?: Maybe<Scalars['JSONObject']>
  externalResources_every?: Maybe<MembershipExternalResourceWhereInput>
  externalResources_none?: Maybe<MembershipExternalResourceWhereInput>
  externalResources_some?: Maybe<MembershipExternalResourceWhereInput>
  forumpostauthor_every?: Maybe<ForumPostWhereInput>
  forumpostauthor_none?: Maybe<ForumPostWhereInput>
  forumpostauthor_some?: Maybe<ForumPostWhereInput>
  forumthreadauthor_every?: Maybe<ForumThreadWhereInput>
  forumthreadauthor_none?: Maybe<ForumThreadWhereInput>
  forumthreadauthor_some?: Maybe<ForumThreadWhereInput>
  handle_contains?: Maybe<Scalars['String']>
  handle_endsWith?: Maybe<Scalars['String']>
  handle_eq?: Maybe<Scalars['String']>
  handle_in?: Maybe<Array<Scalars['String']>>
  handle_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inviteCount_eq?: Maybe<Scalars['Int']>
  inviteCount_gt?: Maybe<Scalars['Int']>
  inviteCount_gte?: Maybe<Scalars['Int']>
  inviteCount_in?: Maybe<Array<Scalars['Int']>>
  inviteCount_lt?: Maybe<Scalars['Int']>
  inviteCount_lte?: Maybe<Scalars['Int']>
  invitedBy?: Maybe<MembershipWhereInput>
  invitees_every?: Maybe<MembershipWhereInput>
  invitees_none?: Maybe<MembershipWhereInput>
  invitees_some?: Maybe<MembershipWhereInput>
  invitestransferredeventsourceMember_every?: Maybe<InvitesTransferredEventWhereInput>
  invitestransferredeventsourceMember_none?: Maybe<InvitesTransferredEventWhereInput>
  invitestransferredeventsourceMember_some?: Maybe<InvitesTransferredEventWhereInput>
  invitestransferredeventtargetMember_every?: Maybe<InvitesTransferredEventWhereInput>
  invitestransferredeventtargetMember_none?: Maybe<InvitesTransferredEventWhereInput>
  invitestransferredeventtargetMember_some?: Maybe<InvitesTransferredEventWhereInput>
  isCouncilMember_eq?: Maybe<Scalars['Boolean']>
  isCouncilMember_in?: Maybe<Array<Scalars['Boolean']>>
  isFoundingMember_eq?: Maybe<Scalars['Boolean']>
  isFoundingMember_in?: Maybe<Array<Scalars['Boolean']>>
  isVerified_eq?: Maybe<Scalars['Boolean']>
  isVerified_in?: Maybe<Array<Scalars['Boolean']>>
  memberBannedFromChannels_every?: Maybe<ChannelWhereInput>
  memberBannedFromChannels_none?: Maybe<ChannelWhereInput>
  memberBannedFromChannels_some?: Maybe<ChannelWhereInput>
  memberBidMadeCompletingAuctionEvents_every?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  memberBidMadeCompletingAuctionEvents_none?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  memberBidMadeCompletingAuctionEvents_some?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  memberEnglishAuctionSettledEvents_every?: Maybe<EnglishAuctionSettledEventWhereInput>
  memberEnglishAuctionSettledEvents_none?: Maybe<EnglishAuctionSettledEventWhereInput>
  memberEnglishAuctionSettledEvents_some?: Maybe<EnglishAuctionSettledEventWhereInput>
  memberOpenAuctionAcceptedBidEvents_every?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  memberOpenAuctionAcceptedBidEvents_none?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  memberOpenAuctionAcceptedBidEvents_some?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  memberaccountsupdatedeventmember_every?: Maybe<MemberAccountsUpdatedEventWhereInput>
  memberaccountsupdatedeventmember_none?: Maybe<MemberAccountsUpdatedEventWhereInput>
  memberaccountsupdatedeventmember_some?: Maybe<MemberAccountsUpdatedEventWhereInput>
  memberbannedfromchanneleventmember_every?: Maybe<MemberBannedFromChannelEventWhereInput>
  memberbannedfromchanneleventmember_none?: Maybe<MemberBannedFromChannelEventWhereInput>
  memberbannedfromchanneleventmember_some?: Maybe<MemberBannedFromChannelEventWhereInput>
  membercreatedeventnewMember_every?: Maybe<MemberCreatedEventWhereInput>
  membercreatedeventnewMember_none?: Maybe<MemberCreatedEventWhereInput>
  membercreatedeventnewMember_some?: Maybe<MemberCreatedEventWhereInput>
  memberinvitedeventinvitingMember_every?: Maybe<MemberInvitedEventWhereInput>
  memberinvitedeventinvitingMember_none?: Maybe<MemberInvitedEventWhereInput>
  memberinvitedeventinvitingMember_some?: Maybe<MemberInvitedEventWhereInput>
  memberinvitedeventnewMember_every?: Maybe<MemberInvitedEventWhereInput>
  memberinvitedeventnewMember_none?: Maybe<MemberInvitedEventWhereInput>
  memberinvitedeventnewMember_some?: Maybe<MemberInvitedEventWhereInput>
  memberprofileupdatedeventmember_every?: Maybe<MemberProfileUpdatedEventWhereInput>
  memberprofileupdatedeventmember_none?: Maybe<MemberProfileUpdatedEventWhereInput>
  memberprofileupdatedeventmember_some?: Maybe<MemberProfileUpdatedEventWhereInput>
  membershipboughteventnewMember_every?: Maybe<MembershipBoughtEventWhereInput>
  membershipboughteventnewMember_none?: Maybe<MembershipBoughtEventWhereInput>
  membershipboughteventnewMember_some?: Maybe<MembershipBoughtEventWhereInput>
  membershipboughteventreferrer_every?: Maybe<MembershipBoughtEventWhereInput>
  membershipboughteventreferrer_none?: Maybe<MembershipBoughtEventWhereInput>
  membershipboughteventreferrer_some?: Maybe<MembershipBoughtEventWhereInput>
  membershipgiftedeventnewMember_every?: Maybe<MembershipGiftedEventWhereInput>
  membershipgiftedeventnewMember_none?: Maybe<MembershipGiftedEventWhereInput>
  membershipgiftedeventnewMember_some?: Maybe<MembershipGiftedEventWhereInput>
  memberverificationstatusupdatedeventmember_every?: Maybe<MemberVerificationStatusUpdatedEventWhereInput>
  memberverificationstatusupdatedeventmember_none?: Maybe<MemberVerificationStatusUpdatedEventWhereInput>
  memberverificationstatusupdatedeventmember_some?: Maybe<MemberVerificationStatusUpdatedEventWhereInput>
  metadata?: Maybe<MemberMetadataWhereInput>
  nftCollectorInChannels_every?: Maybe<ChannelNftCollectorsWhereInput>
  nftCollectorInChannels_none?: Maybe<ChannelNftCollectorsWhereInput>
  nftCollectorInChannels_some?: Maybe<ChannelNftCollectorsWhereInput>
  nftboughteventmember_every?: Maybe<NftBoughtEventWhereInput>
  nftboughteventmember_none?: Maybe<NftBoughtEventWhereInput>
  nftboughteventmember_some?: Maybe<NftBoughtEventWhereInput>
  nftboughteventownerMember_every?: Maybe<NftBoughtEventWhereInput>
  nftboughteventownerMember_none?: Maybe<NftBoughtEventWhereInput>
  nftboughteventownerMember_some?: Maybe<NftBoughtEventWhereInput>
  nftissuedeventownerMember_every?: Maybe<NftIssuedEventWhereInput>
  nftissuedeventownerMember_none?: Maybe<NftIssuedEventWhereInput>
  nftissuedeventownerMember_some?: Maybe<NftIssuedEventWhereInput>
  nftsellordermadeeventownerMember_every?: Maybe<NftSellOrderMadeEventWhereInput>
  nftsellordermadeeventownerMember_none?: Maybe<NftSellOrderMadeEventWhereInput>
  nftsellordermadeeventownerMember_some?: Maybe<NftSellOrderMadeEventWhereInput>
  nftslingedbacktotheoriginalartisteventownerMember_every?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
  nftslingedbacktotheoriginalartisteventownerMember_none?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
  nftslingedbacktotheoriginalartisteventownerMember_some?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
  offeracceptedeventownerMember_every?: Maybe<OfferAcceptedEventWhereInput>
  offeracceptedeventownerMember_none?: Maybe<OfferAcceptedEventWhereInput>
  offeracceptedeventownerMember_some?: Maybe<OfferAcceptedEventWhereInput>
  offercanceledeventownerMember_every?: Maybe<OfferCanceledEventWhereInput>
  offercanceledeventownerMember_none?: Maybe<OfferCanceledEventWhereInput>
  offercanceledeventownerMember_some?: Maybe<OfferCanceledEventWhereInput>
  offerstartedeventmember_every?: Maybe<OfferStartedEventWhereInput>
  offerstartedeventmember_none?: Maybe<OfferStartedEventWhereInput>
  offerstartedeventmember_some?: Maybe<OfferStartedEventWhereInput>
  offerstartedeventownerMember_every?: Maybe<OfferStartedEventWhereInput>
  offerstartedeventownerMember_none?: Maybe<OfferStartedEventWhereInput>
  offerstartedeventownerMember_some?: Maybe<OfferStartedEventWhereInput>
  openauctionbidacceptedeventownerMember_every?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventownerMember_none?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventownerMember_some?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventwinningBidder_every?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventwinningBidder_none?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventwinningBidder_some?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionstartedeventownerMember_every?: Maybe<OpenAuctionStartedEventWhereInput>
  openauctionstartedeventownerMember_none?: Maybe<OpenAuctionStartedEventWhereInput>
  openauctionstartedeventownerMember_some?: Maybe<OpenAuctionStartedEventWhereInput>
  ownedNfts_every?: Maybe<OwnedNftWhereInput>
  ownedNfts_none?: Maybe<OwnedNftWhereInput>
  ownedNfts_some?: Maybe<OwnedNftWhereInput>
  postdeletedeventactor_every?: Maybe<PostDeletedEventWhereInput>
  postdeletedeventactor_none?: Maybe<PostDeletedEventWhereInput>
  postdeletedeventactor_some?: Maybe<PostDeletedEventWhereInput>
  proposalcreator_every?: Maybe<ProposalWhereInput>
  proposalcreator_none?: Maybe<ProposalWhereInput>
  proposalcreator_some?: Maybe<ProposalWhereInput>
  proposaldiscussionpostauthor_every?: Maybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostauthor_none?: Maybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostauthor_some?: Maybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostdeletedeventactor_every?: Maybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostdeletedeventactor_none?: Maybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostdeletedeventactor_some?: Maybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionthreadmodechangedeventactor_every?: Maybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  proposaldiscussionthreadmodechangedeventactor_none?: Maybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  proposaldiscussionthreadmodechangedeventactor_some?: Maybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  proposalvotedeventvoter_every?: Maybe<ProposalVotedEventWhereInput>
  proposalvotedeventvoter_none?: Maybe<ProposalVotedEventWhereInput>
  proposalvotedeventvoter_some?: Maybe<ProposalVotedEventWhereInput>
  referredBy?: Maybe<MembershipWhereInput>
  referredMembers_every?: Maybe<MembershipWhereInput>
  referredMembers_none?: Maybe<MembershipWhereInput>
  referredMembers_some?: Maybe<MembershipWhereInput>
  roles_every?: Maybe<WorkerWhereInput>
  roles_none?: Maybe<WorkerWhereInput>
  roles_some?: Maybe<WorkerWhereInput>
  rootAccount_contains?: Maybe<Scalars['String']>
  rootAccount_endsWith?: Maybe<Scalars['String']>
  rootAccount_eq?: Maybe<Scalars['String']>
  rootAccount_in?: Maybe<Array<Scalars['String']>>
  rootAccount_startsWith?: Maybe<Scalars['String']>
  stakingaccountaddedeventmember_every?: Maybe<StakingAccountAddedEventWhereInput>
  stakingaccountaddedeventmember_none?: Maybe<StakingAccountAddedEventWhereInput>
  stakingaccountaddedeventmember_some?: Maybe<StakingAccountAddedEventWhereInput>
  stakingaccountconfirmedeventmember_every?: Maybe<StakingAccountConfirmedEventWhereInput>
  stakingaccountconfirmedeventmember_none?: Maybe<StakingAccountConfirmedEventWhereInput>
  stakingaccountconfirmedeventmember_some?: Maybe<StakingAccountConfirmedEventWhereInput>
  stakingaccountremovedeventmember_every?: Maybe<StakingAccountRemovedEventWhereInput>
  stakingaccountremovedeventmember_none?: Maybe<StakingAccountRemovedEventWhereInput>
  stakingaccountremovedeventmember_some?: Maybe<StakingAccountRemovedEventWhereInput>
  totalChannelsCreated_eq?: Maybe<Scalars['Int']>
  totalChannelsCreated_gt?: Maybe<Scalars['Int']>
  totalChannelsCreated_gte?: Maybe<Scalars['Int']>
  totalChannelsCreated_in?: Maybe<Array<Scalars['Int']>>
  totalChannelsCreated_lt?: Maybe<Scalars['Int']>
  totalChannelsCreated_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videoreactedeventreactingMember_every?: Maybe<VideoReactedEventWhereInput>
  videoreactedeventreactingMember_none?: Maybe<VideoReactedEventWhereInput>
  videoreactedeventreactingMember_some?: Maybe<VideoReactedEventWhereInput>
  videoreactionmember_every?: Maybe<VideoReactionWhereInput>
  videoreactionmember_none?: Maybe<VideoReactionWhereInput>
  videoreactionmember_some?: Maybe<VideoReactionWhereInput>
  whitelistedInAuctions_every?: Maybe<AuctionWhereInput>
  whitelistedInAuctions_none?: Maybe<AuctionWhereInput>
  whitelistedInAuctions_some?: Maybe<AuctionWhereInput>
  whitelistedInBounties_every?: Maybe<BountyEntrantWhitelistWhereInput>
  whitelistedInBounties_none?: Maybe<BountyEntrantWhitelistWhereInput>
  whitelistedInBounties_some?: Maybe<BountyEntrantWhitelistWhereInput>
  whitelistedIn_every?: Maybe<ProposalDiscussionWhitelistWhereInput>
  whitelistedIn_none?: Maybe<ProposalDiscussionWhitelistWhereInput>
  whitelistedIn_some?: Maybe<ProposalDiscussionWhitelistWhereInput>
  workinggroupapplicationapplicant_every?: Maybe<WorkingGroupApplicationWhereInput>
  workinggroupapplicationapplicant_none?: Maybe<WorkingGroupApplicationWhereInput>
  workinggroupapplicationapplicant_some?: Maybe<WorkingGroupApplicationWhereInput>
}

export type MembershipWhereUniqueInput = {
  handle?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['ID']>
}

export type MetaprotocolTransactionErrored = {
  message: Scalars['String']
}

export type MetaprotocolTransactionStatus =
  | MetaprotocolTransactionErrored
  | MetaprotocolTransactionSuccessful

export type MetaprotocolTransactionStatusEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    status: MetaprotocolTransactionStatus
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type MetaprotocolTransactionStatusEventConnection = {
  edges: Array<MetaprotocolTransactionStatusEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MetaprotocolTransactionStatusEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  status: Scalars['JSONObject']
}

export type MetaprotocolTransactionStatusEventEdge = {
  cursor: Scalars['String']
  node: MetaprotocolTransactionStatusEvent
}

export enum MetaprotocolTransactionStatusEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MetaprotocolTransactionStatusEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  status?: Maybe<Scalars['JSONObject']>
}

export type MetaprotocolTransactionStatusEventWhereInput = {
  AND?: Maybe<Array<MetaprotocolTransactionStatusEventWhereInput>>
  NOT?: Maybe<Array<MetaprotocolTransactionStatusEventWhereInput>>
  OR?: Maybe<Array<MetaprotocolTransactionStatusEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  status_json?: Maybe<Scalars['JSONObject']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type MetaprotocolTransactionStatusEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MetaprotocolTransactionSuccessful = {
  channelPaid?: Maybe<Channel>
  commentCreated?: Maybe<Comment>
  commentDeleted?: Maybe<Comment>
  commentEdited?: Maybe<Comment>
  commentModerated?: Maybe<Comment>
  dummy?: Maybe<Scalars['Int']>
  videoCategoryCreated?: Maybe<Video>
  videoCategoryDeleted?: Maybe<Video>
  videoCategoryUpdated?: Maybe<Video>
}

export type Mutation = {
  addVideoView: EntityViewsInfo
  followChannel: ChannelFollowsInfo
  reportChannel: ChannelReportInfo
  reportVideo: VideoReportInfo
  setCategoryFeaturedVideos: Array<FeaturedVideo>
  setKillSwitch: Admin
  setVideoHero: VideoHero
  signAppActionCommitment: GeneratedSignature
  unfollowChannel: ChannelFollowsInfo
}

export type MutationAddVideoViewArgs = {
  categoryId?: Maybe<Scalars['ID']>
  channelId: Scalars['ID']
  videoId: Scalars['ID']
}

export type MutationFollowChannelArgs = {
  channelId: Scalars['ID']
}

export type MutationReportChannelArgs = {
  channelId: Scalars['ID']
  rationale: Scalars['String']
}

export type MutationReportVideoArgs = {
  rationale: Scalars['String']
  videoId: Scalars['ID']
}

export type MutationSetCategoryFeaturedVideosArgs = {
  categoryId: Scalars['ID']
  videos: Array<FeaturedVideoInput>
}

export type MutationSetKillSwitchArgs = {
  isKilled: Scalars['Boolean']
}

export type MutationSetVideoHeroArgs = {
  newVideoHero: VideoHeroInput
}

export type MutationSignAppActionCommitmentArgs = {
  actionType: AppActionActionType
  assets: Scalars['String']
  creatorId: Scalars['String']
  nonce: Scalars['Float']
  rawAction: Scalars['String']
}

export type MutationUnfollowChannelArgs = {
  channelId: Scalars['ID']
}

export enum Network {
  Alexandria = 'ALEXANDRIA',
  Babylon = 'BABYLON',
  Giza = 'GIZA',
  Olympia = 'OLYMPIA',
  Rome = 'ROME',
}

export type NewCandidateEvent = BaseGraphQlObject &
  Event & {
    balance: Scalars['BigInt']
    candidate: Candidate
    candidateId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    electionRound: ElectionRound
    electionRoundId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    rewardAccount: Scalars['String']
    stakingAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type NewCandidateEventConnection = {
  edges: Array<NewCandidateEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NewCandidateEventCreateInput = {
  balance: Scalars['String']
  candidate: Scalars['ID']
  electionRound: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rewardAccount: Scalars['String']
  stakingAccount: Scalars['String']
}

export type NewCandidateEventEdge = {
  cursor: Scalars['String']
  node: NewCandidateEvent
}

export enum NewCandidateEventOrderByInput {
  BalanceAsc = 'balance_ASC',
  BalanceDesc = 'balance_DESC',
  CandidateAsc = 'candidate_ASC',
  CandidateDesc = 'candidate_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectionRoundAsc = 'electionRound_ASC',
  ElectionRoundDesc = 'electionRound_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  StakingAccountAsc = 'stakingAccount_ASC',
  StakingAccountDesc = 'stakingAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NewCandidateEventUpdateInput = {
  balance?: Maybe<Scalars['String']>
  candidate?: Maybe<Scalars['ID']>
  electionRound?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rewardAccount?: Maybe<Scalars['String']>
  stakingAccount?: Maybe<Scalars['String']>
}

export type NewCandidateEventWhereInput = {
  AND?: Maybe<Array<NewCandidateEventWhereInput>>
  NOT?: Maybe<Array<NewCandidateEventWhereInput>>
  OR?: Maybe<Array<NewCandidateEventWhereInput>>
  balance_eq?: Maybe<Scalars['BigInt']>
  balance_gt?: Maybe<Scalars['BigInt']>
  balance_gte?: Maybe<Scalars['BigInt']>
  balance_in?: Maybe<Array<Scalars['BigInt']>>
  balance_lt?: Maybe<Scalars['BigInt']>
  balance_lte?: Maybe<Scalars['BigInt']>
  candidate?: Maybe<CandidateWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electionRound?: Maybe<ElectionRoundWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rewardAccount_contains?: Maybe<Scalars['String']>
  rewardAccount_endsWith?: Maybe<Scalars['String']>
  rewardAccount_eq?: Maybe<Scalars['String']>
  rewardAccount_in?: Maybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: Maybe<Scalars['String']>
  stakingAccount_contains?: Maybe<Scalars['String']>
  stakingAccount_endsWith?: Maybe<Scalars['String']>
  stakingAccount_eq?: Maybe<Scalars['String']>
  stakingAccount_in?: Maybe<Array<Scalars['String']>>
  stakingAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type NewCandidateEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NewCouncilElectedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    electedCouncil: ElectedCouncil
    electedCouncilId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type NewCouncilElectedEventConnection = {
  edges: Array<NewCouncilElectedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NewCouncilElectedEventCreateInput = {
  electedCouncil: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type NewCouncilElectedEventEdge = {
  cursor: Scalars['String']
  node: NewCouncilElectedEvent
}

export enum NewCouncilElectedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedCouncilAsc = 'electedCouncil_ASC',
  ElectedCouncilDesc = 'electedCouncil_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NewCouncilElectedEventUpdateInput = {
  electedCouncil?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type NewCouncilElectedEventWhereInput = {
  AND?: Maybe<Array<NewCouncilElectedEventWhereInput>>
  NOT?: Maybe<Array<NewCouncilElectedEventWhereInput>>
  OR?: Maybe<Array<NewCouncilElectedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electedCouncil?: Maybe<ElectedCouncilWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type NewCouncilElectedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NewCouncilNotElectedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type NewCouncilNotElectedEventConnection = {
  edges: Array<NewCouncilNotElectedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NewCouncilNotElectedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type NewCouncilNotElectedEventEdge = {
  cursor: Scalars['String']
  node: NewCouncilNotElectedEvent
}

export enum NewCouncilNotElectedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NewCouncilNotElectedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type NewCouncilNotElectedEventWhereInput = {
  AND?: Maybe<Array<NewCouncilNotElectedEventWhereInput>>
  NOT?: Maybe<Array<NewCouncilNotElectedEventWhereInput>>
  OR?: Maybe<Array<NewCouncilNotElectedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type NewCouncilNotElectedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NewMissedRewardLevelReachedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newMissedRewardAmount: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type NewMissedRewardLevelReachedEventConnection = {
  edges: Array<NewMissedRewardLevelReachedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NewMissedRewardLevelReachedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newMissedRewardAmount: Scalars['String']
  worker: Scalars['ID']
}

export type NewMissedRewardLevelReachedEventEdge = {
  cursor: Scalars['String']
  node: NewMissedRewardLevelReachedEvent
}

export enum NewMissedRewardLevelReachedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewMissedRewardAmountAsc = 'newMissedRewardAmount_ASC',
  NewMissedRewardAmountDesc = 'newMissedRewardAmount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type NewMissedRewardLevelReachedEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newMissedRewardAmount?: Maybe<Scalars['String']>
  worker?: Maybe<Scalars['ID']>
}

export type NewMissedRewardLevelReachedEventWhereInput = {
  AND?: Maybe<Array<NewMissedRewardLevelReachedEventWhereInput>>
  NOT?: Maybe<Array<NewMissedRewardLevelReachedEventWhereInput>>
  OR?: Maybe<Array<NewMissedRewardLevelReachedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newMissedRewardAmount_eq?: Maybe<Scalars['BigInt']>
  newMissedRewardAmount_gt?: Maybe<Scalars['BigInt']>
  newMissedRewardAmount_gte?: Maybe<Scalars['BigInt']>
  newMissedRewardAmount_in?: Maybe<Array<Scalars['BigInt']>>
  newMissedRewardAmount_lt?: Maybe<Scalars['BigInt']>
  newMissedRewardAmount_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type NewMissedRewardLevelReachedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NftBoughtEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    price: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type NftBoughtEventConnection = {
  edges: Array<NftBoughtEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NftBoughtEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  price: Scalars['String']
  video: Scalars['ID']
}

export type NftBoughtEventEdge = {
  cursor: Scalars['String']
  node: NftBoughtEvent
}

export enum NftBoughtEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type NftBoughtEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  price?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
}

export type NftBoughtEventWhereInput = {
  AND?: Maybe<Array<NftBoughtEventWhereInput>>
  NOT?: Maybe<Array<NftBoughtEventWhereInput>>
  OR?: Maybe<Array<NftBoughtEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  price_eq?: Maybe<Scalars['BigInt']>
  price_gt?: Maybe<Scalars['BigInt']>
  price_gte?: Maybe<Scalars['BigInt']>
  price_in?: Maybe<Array<Scalars['BigInt']>>
  price_lt?: Maybe<Scalars['BigInt']>
  price_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type NftBoughtEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NftIssuedEvent = BaseGraphQlObject &
  Event & {
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    metadata: Scalars['String']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    royalty?: Maybe<Scalars['Float']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoCategory?: Maybe<VideoCategory>
    videoCategoryId?: Maybe<Scalars['String']>
    videoId: Scalars['String']
  }

export type NftIssuedEventConnection = {
  edges: Array<NftIssuedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NftIssuedEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  metadata: Scalars['String']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  royalty?: Maybe<Scalars['Float']>
  video: Scalars['ID']
  videoCategory?: Maybe<Scalars['ID']>
}

export type NftIssuedEventEdge = {
  cursor: Scalars['String']
  node: NftIssuedEvent
}

export enum NftIssuedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  RoyaltyAsc = 'royalty_ASC',
  RoyaltyDesc = 'royalty_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoCategoryAsc = 'videoCategory_ASC',
  VideoCategoryDesc = 'videoCategory_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type NftIssuedEventUpdateInput = {
  contentActor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  metadata?: Maybe<Scalars['String']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  royalty?: Maybe<Scalars['Float']>
  video?: Maybe<Scalars['ID']>
  videoCategory?: Maybe<Scalars['ID']>
}

export type NftIssuedEventWhereInput = {
  AND?: Maybe<Array<NftIssuedEventWhereInput>>
  NOT?: Maybe<Array<NftIssuedEventWhereInput>>
  OR?: Maybe<Array<NftIssuedEventWhereInput>>
  contentActor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  metadata_contains?: Maybe<Scalars['String']>
  metadata_endsWith?: Maybe<Scalars['String']>
  metadata_eq?: Maybe<Scalars['String']>
  metadata_in?: Maybe<Array<Scalars['String']>>
  metadata_startsWith?: Maybe<Scalars['String']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  royalty_eq?: Maybe<Scalars['Float']>
  royalty_gt?: Maybe<Scalars['Float']>
  royalty_gte?: Maybe<Scalars['Float']>
  royalty_in?: Maybe<Array<Scalars['Float']>>
  royalty_lt?: Maybe<Scalars['Float']>
  royalty_lte?: Maybe<Scalars['Float']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  videoCategory?: Maybe<VideoCategoryWhereInput>
}

export type NftIssuedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NftSellOrderMadeEvent = BaseGraphQlObject & {
  contentActor: ContentActor
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  network: Network
  ownerCuratorGroup?: Maybe<CuratorGroup>
  ownerCuratorGroupId?: Maybe<Scalars['String']>
  ownerMember?: Maybe<Membership>
  ownerMemberId?: Maybe<Scalars['String']>
  price: Scalars['BigInt']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  video: Video
  videoId: Scalars['String']
}

export type NftSellOrderMadeEventConnection = {
  edges: Array<NftSellOrderMadeEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NftSellOrderMadeEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  price: Scalars['String']
  video: Scalars['ID']
}

export type NftSellOrderMadeEventEdge = {
  cursor: Scalars['String']
  node: NftSellOrderMadeEvent
}

export enum NftSellOrderMadeEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type NftSellOrderMadeEventUpdateInput = {
  contentActor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  price?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
}

export type NftSellOrderMadeEventWhereInput = {
  AND?: Maybe<Array<NftSellOrderMadeEventWhereInput>>
  NOT?: Maybe<Array<NftSellOrderMadeEventWhereInput>>
  OR?: Maybe<Array<NftSellOrderMadeEventWhereInput>>
  contentActor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  price_eq?: Maybe<Scalars['BigInt']>
  price_gt?: Maybe<Scalars['BigInt']>
  price_gte?: Maybe<Scalars['BigInt']>
  price_in?: Maybe<Array<Scalars['BigInt']>>
  price_lt?: Maybe<Scalars['BigInt']>
  price_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type NftSellOrderMadeEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NftSlingedBackToTheOriginalArtistEvent = BaseGraphQlObject &
  Event & {
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type NftSlingedBackToTheOriginalArtistEventConnection = {
  edges: Array<NftSlingedBackToTheOriginalArtistEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NftSlingedBackToTheOriginalArtistEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
}

export type NftSlingedBackToTheOriginalArtistEventEdge = {
  cursor: Scalars['String']
  node: NftSlingedBackToTheOriginalArtistEvent
}

export enum NftSlingedBackToTheOriginalArtistEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type NftSlingedBackToTheOriginalArtistEventUpdateInput = {
  contentActor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
}

export type NftSlingedBackToTheOriginalArtistEventWhereInput = {
  AND?: Maybe<Array<NftSlingedBackToTheOriginalArtistEventWhereInput>>
  NOT?: Maybe<Array<NftSlingedBackToTheOriginalArtistEventWhereInput>>
  OR?: Maybe<Array<NftSlingedBackToTheOriginalArtistEventWhereInput>>
  contentActor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type NftSlingedBackToTheOriginalArtistEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NodeLocationMetadata = BaseGraphQlObject & {
  city?: Maybe<Scalars['String']>
  coordinates?: Maybe<GeoCoordinates>
  coordinatesId?: Maybe<Scalars['String']>
  countryCode?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  distributionbucketoperatormetadatanodeLocation?: Maybe<Array<DistributionBucketOperatorMetadata>>
  id: Scalars['ID']
  storagebucketoperatormetadatanodeLocation?: Maybe<Array<StorageBucketOperatorMetadata>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type NodeLocationMetadataConnection = {
  edges: Array<NodeLocationMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NodeLocationMetadataCreateInput = {
  city?: Maybe<Scalars['String']>
  coordinates?: Maybe<Scalars['ID']>
  countryCode?: Maybe<Scalars['String']>
}

export type NodeLocationMetadataEdge = {
  cursor: Scalars['String']
  node: NodeLocationMetadata
}

export enum NodeLocationMetadataOrderByInput {
  CityAsc = 'city_ASC',
  CityDesc = 'city_DESC',
  CoordinatesAsc = 'coordinates_ASC',
  CoordinatesDesc = 'coordinates_DESC',
  CountryCodeAsc = 'countryCode_ASC',
  CountryCodeDesc = 'countryCode_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NodeLocationMetadataUpdateInput = {
  city?: Maybe<Scalars['String']>
  coordinates?: Maybe<Scalars['ID']>
  countryCode?: Maybe<Scalars['String']>
}

export type NodeLocationMetadataWhereInput = {
  AND?: Maybe<Array<NodeLocationMetadataWhereInput>>
  NOT?: Maybe<Array<NodeLocationMetadataWhereInput>>
  OR?: Maybe<Array<NodeLocationMetadataWhereInput>>
  city_contains?: Maybe<Scalars['String']>
  city_endsWith?: Maybe<Scalars['String']>
  city_eq?: Maybe<Scalars['String']>
  city_in?: Maybe<Array<Scalars['String']>>
  city_startsWith?: Maybe<Scalars['String']>
  coordinates?: Maybe<GeoCoordinatesWhereInput>
  countryCode_contains?: Maybe<Scalars['String']>
  countryCode_endsWith?: Maybe<Scalars['String']>
  countryCode_eq?: Maybe<Scalars['String']>
  countryCode_in?: Maybe<Array<Scalars['String']>>
  countryCode_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  distributionbucketoperatormetadatanodeLocation_every?: Maybe<DistributionBucketOperatorMetadataWhereInput>
  distributionbucketoperatormetadatanodeLocation_none?: Maybe<DistributionBucketOperatorMetadataWhereInput>
  distributionbucketoperatormetadatanodeLocation_some?: Maybe<DistributionBucketOperatorMetadataWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  storagebucketoperatormetadatanodeLocation_every?: Maybe<StorageBucketOperatorMetadataWhereInput>
  storagebucketoperatormetadatanodeLocation_none?: Maybe<StorageBucketOperatorMetadataWhereInput>
  storagebucketoperatormetadatanodeLocation_some?: Maybe<StorageBucketOperatorMetadataWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type NodeLocationMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type NotEnoughCandidatesEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type NotEnoughCandidatesEventConnection = {
  edges: Array<NotEnoughCandidatesEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NotEnoughCandidatesEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type NotEnoughCandidatesEventEdge = {
  cursor: Scalars['String']
  node: NotEnoughCandidatesEvent
}

export enum NotEnoughCandidatesEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NotEnoughCandidatesEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type NotEnoughCandidatesEventWhereInput = {
  AND?: Maybe<Array<NotEnoughCandidatesEventWhereInput>>
  NOT?: Maybe<Array<NotEnoughCandidatesEventWhereInput>>
  OR?: Maybe<Array<NotEnoughCandidatesEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type NotEnoughCandidatesEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OfferAcceptedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    price?: Maybe<Scalars['BigInt']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type OfferAcceptedEventConnection = {
  edges: Array<OfferAcceptedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OfferAcceptedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  price?: Maybe<Scalars['String']>
  video: Scalars['ID']
}

export type OfferAcceptedEventEdge = {
  cursor: Scalars['String']
  node: OfferAcceptedEvent
}

export enum OfferAcceptedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type OfferAcceptedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  price?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
}

export type OfferAcceptedEventWhereInput = {
  AND?: Maybe<Array<OfferAcceptedEventWhereInput>>
  NOT?: Maybe<Array<OfferAcceptedEventWhereInput>>
  OR?: Maybe<Array<OfferAcceptedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  price_eq?: Maybe<Scalars['BigInt']>
  price_gt?: Maybe<Scalars['BigInt']>
  price_gte?: Maybe<Scalars['BigInt']>
  price_in?: Maybe<Array<Scalars['BigInt']>>
  price_lt?: Maybe<Scalars['BigInt']>
  price_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type OfferAcceptedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OfferCanceledEvent = BaseGraphQlObject &
  Event & {
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type OfferCanceledEventConnection = {
  edges: Array<OfferCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OfferCanceledEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
}

export type OfferCanceledEventEdge = {
  cursor: Scalars['String']
  node: OfferCanceledEvent
}

export enum OfferCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type OfferCanceledEventUpdateInput = {
  contentActor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
}

export type OfferCanceledEventWhereInput = {
  AND?: Maybe<Array<OfferCanceledEventWhereInput>>
  NOT?: Maybe<Array<OfferCanceledEventWhereInput>>
  OR?: Maybe<Array<OfferCanceledEventWhereInput>>
  contentActor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type OfferCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OfferStartedEvent = BaseGraphQlObject &
  Event & {
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    price?: Maybe<Scalars['BigInt']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type OfferStartedEventConnection = {
  edges: Array<OfferStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OfferStartedEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  price?: Maybe<Scalars['String']>
  video: Scalars['ID']
}

export type OfferStartedEventEdge = {
  cursor: Scalars['String']
  node: OfferStartedEvent
}

export enum OfferStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type OfferStartedEventUpdateInput = {
  contentActor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  price?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
}

export type OfferStartedEventWhereInput = {
  AND?: Maybe<Array<OfferStartedEventWhereInput>>
  NOT?: Maybe<Array<OfferStartedEventWhereInput>>
  OR?: Maybe<Array<OfferStartedEventWhereInput>>
  contentActor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  price_eq?: Maybe<Scalars['BigInt']>
  price_gt?: Maybe<Scalars['BigInt']>
  price_gte?: Maybe<Scalars['BigInt']>
  price_in?: Maybe<Array<Scalars['BigInt']>>
  price_lt?: Maybe<Scalars['BigInt']>
  price_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type OfferStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OpenAuctionBidAcceptedEvent = BaseGraphQlObject &
  Event & {
    bidders: Array<Membership>
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
    winningBid?: Maybe<Bid>
    winningBidId?: Maybe<Scalars['String']>
    winningBidder?: Maybe<Membership>
    winningBidderId?: Maybe<Scalars['String']>
  }

export type OpenAuctionBidAcceptedEventConnection = {
  edges: Array<OpenAuctionBidAcceptedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OpenAuctionBidAcceptedEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
  winningBid?: Maybe<Scalars['ID']>
  winningBidder?: Maybe<Scalars['ID']>
}

export type OpenAuctionBidAcceptedEventEdge = {
  cursor: Scalars['String']
  node: OpenAuctionBidAcceptedEvent
}

export enum OpenAuctionBidAcceptedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
  WinningBidAsc = 'winningBid_ASC',
  WinningBidDesc = 'winningBid_DESC',
  WinningBidderAsc = 'winningBidder_ASC',
  WinningBidderDesc = 'winningBidder_DESC',
}

export type OpenAuctionBidAcceptedEventUpdateInput = {
  contentActor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
  winningBid?: Maybe<Scalars['ID']>
  winningBidder?: Maybe<Scalars['ID']>
}

export type OpenAuctionBidAcceptedEventWhereInput = {
  AND?: Maybe<Array<OpenAuctionBidAcceptedEventWhereInput>>
  NOT?: Maybe<Array<OpenAuctionBidAcceptedEventWhereInput>>
  OR?: Maybe<Array<OpenAuctionBidAcceptedEventWhereInput>>
  bidders_every?: Maybe<MembershipWhereInput>
  bidders_none?: Maybe<MembershipWhereInput>
  bidders_some?: Maybe<MembershipWhereInput>
  contentActor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  winningBid?: Maybe<BidWhereInput>
  winningBidder?: Maybe<MembershipWhereInput>
}

export type OpenAuctionBidAcceptedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OpenAuctionStartedEvent = BaseGraphQlObject &
  Event & {
    actor: ContentActor
    auction: Auction
    auctionId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    ownerCuratorGroup?: Maybe<CuratorGroup>
    ownerCuratorGroupId?: Maybe<Scalars['String']>
    ownerMember?: Maybe<Membership>
    ownerMemberId?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type OpenAuctionStartedEventConnection = {
  edges: Array<OpenAuctionStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OpenAuctionStartedEventCreateInput = {
  actor: Scalars['JSONObject']
  auction: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video: Scalars['ID']
}

export type OpenAuctionStartedEventEdge = {
  cursor: Scalars['String']
  node: OpenAuctionStartedEvent
}

export enum OpenAuctionStartedEventOrderByInput {
  AuctionAsc = 'auction_ASC',
  AuctionDesc = 'auction_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type OpenAuctionStartedEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  auction?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  video?: Maybe<Scalars['ID']>
}

export type OpenAuctionStartedEventWhereInput = {
  AND?: Maybe<Array<OpenAuctionStartedEventWhereInput>>
  NOT?: Maybe<Array<OpenAuctionStartedEventWhereInput>>
  OR?: Maybe<Array<OpenAuctionStartedEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  auction?: Maybe<AuctionWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type OpenAuctionStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OpeningAddedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    opening: WorkingGroupOpening
    openingId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type OpeningAddedEventConnection = {
  edges: Array<OpeningAddedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OpeningAddedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  opening: Scalars['ID']
}

export type OpeningAddedEventEdge = {
  cursor: Scalars['String']
  node: OpeningAddedEvent
}

export enum OpeningAddedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type OpeningAddedEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  opening?: Maybe<Scalars['ID']>
}

export type OpeningAddedEventWhereInput = {
  AND?: Maybe<Array<OpeningAddedEventWhereInput>>
  NOT?: Maybe<Array<OpeningAddedEventWhereInput>>
  OR?: Maybe<Array<OpeningAddedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  opening?: Maybe<WorkingGroupOpeningWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type OpeningAddedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OpeningCanceledEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    opening: WorkingGroupOpening
    openingId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type OpeningCanceledEventConnection = {
  edges: Array<OpeningCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OpeningCanceledEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  opening: Scalars['ID']
}

export type OpeningCanceledEventEdge = {
  cursor: Scalars['String']
  node: OpeningCanceledEvent
}

export enum OpeningCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type OpeningCanceledEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  opening?: Maybe<Scalars['ID']>
}

export type OpeningCanceledEventWhereInput = {
  AND?: Maybe<Array<OpeningCanceledEventWhereInput>>
  NOT?: Maybe<Array<OpeningCanceledEventWhereInput>>
  OR?: Maybe<Array<OpeningCanceledEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  opening?: Maybe<WorkingGroupOpeningWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type OpeningCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OpeningFilledEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    opening: WorkingGroupOpening
    openingId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    workersHired: Array<Worker>
  }

export type OpeningFilledEventConnection = {
  edges: Array<OpeningFilledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OpeningFilledEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  opening: Scalars['ID']
}

export type OpeningFilledEventEdge = {
  cursor: Scalars['String']
  node: OpeningFilledEvent
}

export enum OpeningFilledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type OpeningFilledEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  opening?: Maybe<Scalars['ID']>
}

export type OpeningFilledEventWhereInput = {
  AND?: Maybe<Array<OpeningFilledEventWhereInput>>
  NOT?: Maybe<Array<OpeningFilledEventWhereInput>>
  OR?: Maybe<Array<OpeningFilledEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  opening?: Maybe<WorkingGroupOpeningWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  workersHired_every?: Maybe<WorkerWhereInput>
  workersHired_none?: Maybe<WorkerWhereInput>
  workersHired_some?: Maybe<WorkerWhereInput>
}

export type OpeningFilledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OpeningStatusCancelled = {
  openingCanceledEvent?: Maybe<OpeningCanceledEvent>
}

export type OpeningStatusFilled = {
  openingFilledEvent?: Maybe<OpeningFilledEvent>
}

export type OpeningStatusOpen = {
  phantom?: Maybe<Scalars['Int']>
}

export type OracleJudgmentSubmittedEvent = BaseGraphQlObject &
  Event & {
    bounty: Bounty
    bountyId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    rationale?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type OracleJudgmentSubmittedEventConnection = {
  edges: Array<OracleJudgmentSubmittedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OracleJudgmentSubmittedEventCreateInput = {
  bounty: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale?: Maybe<Scalars['String']>
}

export type OracleJudgmentSubmittedEventEdge = {
  cursor: Scalars['String']
  node: OracleJudgmentSubmittedEvent
}

export enum OracleJudgmentSubmittedEventOrderByInput {
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type OracleJudgmentSubmittedEventUpdateInput = {
  bounty?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
}

export type OracleJudgmentSubmittedEventWhereInput = {
  AND?: Maybe<Array<OracleJudgmentSubmittedEventWhereInput>>
  NOT?: Maybe<Array<OracleJudgmentSubmittedEventWhereInput>>
  OR?: Maybe<Array<OracleJudgmentSubmittedEventWhereInput>>
  bounty?: Maybe<BountyWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type OracleJudgmentSubmittedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type OwnedNft = BaseGraphQlObject & {
  auctions: Array<Auction>
  bids: Array<Bid>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  creatorChannel: Channel
  creatorChannelId: Scalars['String']
  creatorRoyalty?: Maybe<Scalars['Float']>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  isOwnedByChannel: Scalars['Boolean']
  lastSaleDate?: Maybe<Scalars['DateTime']>
  lastSalePrice?: Maybe<Scalars['BigInt']>
  metadata: Scalars['String']
  ownerCuratorGroup?: Maybe<CuratorGroup>
  ownerCuratorGroupId?: Maybe<Scalars['String']>
  ownerMember?: Maybe<Membership>
  ownerMemberId?: Maybe<Scalars['String']>
  transactionalStatus?: Maybe<TransactionalStatus>
  transactionalStatusAuction?: Maybe<Auction>
  transactionalStatusAuctionId?: Maybe<Scalars['String']>
  transactionalStatusUpdates: Array<TransactionalStatusUpdate>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  video: Video
  videoCategory?: Maybe<VideoCategory>
  videoCategoryId?: Maybe<Scalars['String']>
}

export type OwnedNftConnection = {
  edges: Array<OwnedNftEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OwnedNftCreateInput = {
  creatorChannel: Scalars['ID']
  creatorRoyalty?: Maybe<Scalars['Float']>
  isOwnedByChannel: Scalars['Boolean']
  lastSaleDate?: Maybe<Scalars['DateTime']>
  lastSalePrice?: Maybe<Scalars['String']>
  metadata: Scalars['String']
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  transactionalStatus: Scalars['JSONObject']
  transactionalStatusAuction?: Maybe<Scalars['ID']>
  videoCategory?: Maybe<Scalars['ID']>
}

export type OwnedNftEdge = {
  cursor: Scalars['String']
  node: OwnedNft
}

export enum OwnedNftOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatorChannelAsc = 'creatorChannel_ASC',
  CreatorChannelDesc = 'creatorChannel_DESC',
  CreatorRoyaltyAsc = 'creatorRoyalty_ASC',
  CreatorRoyaltyDesc = 'creatorRoyalty_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IsOwnedByChannelAsc = 'isOwnedByChannel_ASC',
  IsOwnedByChannelDesc = 'isOwnedByChannel_DESC',
  LastSaleDateAsc = 'lastSaleDate_ASC',
  LastSaleDateDesc = 'lastSaleDate_DESC',
  LastSalePriceAsc = 'lastSalePrice_ASC',
  LastSalePriceDesc = 'lastSalePrice_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  TransactionalStatusAuctionAsc = 'transactionalStatusAuction_ASC',
  TransactionalStatusAuctionDesc = 'transactionalStatusAuction_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoCategoryAsc = 'videoCategory_ASC',
  VideoCategoryDesc = 'videoCategory_DESC',
}

export type OwnedNftUpdateInput = {
  creatorChannel?: Maybe<Scalars['ID']>
  creatorRoyalty?: Maybe<Scalars['Float']>
  isOwnedByChannel?: Maybe<Scalars['Boolean']>
  lastSaleDate?: Maybe<Scalars['DateTime']>
  lastSalePrice?: Maybe<Scalars['String']>
  metadata?: Maybe<Scalars['String']>
  ownerCuratorGroup?: Maybe<Scalars['ID']>
  ownerMember?: Maybe<Scalars['ID']>
  transactionalStatus?: Maybe<Scalars['JSONObject']>
  transactionalStatusAuction?: Maybe<Scalars['ID']>
  videoCategory?: Maybe<Scalars['ID']>
}

export type OwnedNftWhereInput = {
  AND?: Maybe<Array<OwnedNftWhereInput>>
  NOT?: Maybe<Array<OwnedNftWhereInput>>
  OR?: Maybe<Array<OwnedNftWhereInput>>
  auctions_every?: Maybe<AuctionWhereInput>
  auctions_none?: Maybe<AuctionWhereInput>
  auctions_some?: Maybe<AuctionWhereInput>
  bids_every?: Maybe<BidWhereInput>
  bids_none?: Maybe<BidWhereInput>
  bids_some?: Maybe<BidWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  creatorChannel?: Maybe<ChannelWhereInput>
  creatorRoyalty_eq?: Maybe<Scalars['Float']>
  creatorRoyalty_gt?: Maybe<Scalars['Float']>
  creatorRoyalty_gte?: Maybe<Scalars['Float']>
  creatorRoyalty_in?: Maybe<Array<Scalars['Float']>>
  creatorRoyalty_lt?: Maybe<Scalars['Float']>
  creatorRoyalty_lte?: Maybe<Scalars['Float']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isOwnedByChannel_eq?: Maybe<Scalars['Boolean']>
  isOwnedByChannel_in?: Maybe<Array<Scalars['Boolean']>>
  lastSaleDate_eq?: Maybe<Scalars['DateTime']>
  lastSaleDate_gt?: Maybe<Scalars['DateTime']>
  lastSaleDate_gte?: Maybe<Scalars['DateTime']>
  lastSaleDate_lt?: Maybe<Scalars['DateTime']>
  lastSaleDate_lte?: Maybe<Scalars['DateTime']>
  lastSalePrice_eq?: Maybe<Scalars['BigInt']>
  lastSalePrice_gt?: Maybe<Scalars['BigInt']>
  lastSalePrice_gte?: Maybe<Scalars['BigInt']>
  lastSalePrice_in?: Maybe<Array<Scalars['BigInt']>>
  lastSalePrice_lt?: Maybe<Scalars['BigInt']>
  lastSalePrice_lte?: Maybe<Scalars['BigInt']>
  metadata_contains?: Maybe<Scalars['String']>
  metadata_endsWith?: Maybe<Scalars['String']>
  metadata_eq?: Maybe<Scalars['String']>
  metadata_in?: Maybe<Array<Scalars['String']>>
  metadata_startsWith?: Maybe<Scalars['String']>
  ownerCuratorGroup?: Maybe<CuratorGroupWhereInput>
  ownerMember?: Maybe<MembershipWhereInput>
  transactionalStatusAuction?: Maybe<AuctionWhereInput>
  transactionalStatusUpdates_every?: Maybe<TransactionalStatusUpdateWhereInput>
  transactionalStatusUpdates_none?: Maybe<TransactionalStatusUpdateWhereInput>
  transactionalStatusUpdates_some?: Maybe<TransactionalStatusUpdateWhereInput>
  transactionalStatus_json?: Maybe<Scalars['JSONObject']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  videoCategory?: Maybe<VideoCategoryWhereInput>
}

export type OwnedNftWhereUniqueInput = {
  id: Scalars['ID']
}

export type PageInfo = {
  endCursor?: Maybe<Scalars['String']>
  hasNextPage: Scalars['Boolean']
  hasPreviousPage: Scalars['Boolean']
  startCursor?: Maybe<Scalars['String']>
}

export type PaymentContext = PaymentContextChannel | PaymentContextVideo

export type PaymentContextChannel = {
  channel?: Maybe<Channel>
}

export type PaymentContextVideo = {
  video?: Maybe<Video>
}

export type PostAddedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    isEditable?: Maybe<Scalars['Boolean']>
    network: Network
    post: ForumPost
    postId: Scalars['String']
    text: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type PostAddedEventConnection = {
  edges: Array<PostAddedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PostAddedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  isEditable?: Maybe<Scalars['Boolean']>
  network: Network
  post: Scalars['ID']
  text: Scalars['String']
}

export type PostAddedEventEdge = {
  cursor: Scalars['String']
  node: PostAddedEvent
}

export enum PostAddedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  IsEditableAsc = 'isEditable_ASC',
  IsEditableDesc = 'isEditable_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type PostAddedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  isEditable?: Maybe<Scalars['Boolean']>
  network?: Maybe<Network>
  post?: Maybe<Scalars['ID']>
  text?: Maybe<Scalars['String']>
}

export type PostAddedEventWhereInput = {
  AND?: Maybe<Array<PostAddedEventWhereInput>>
  NOT?: Maybe<Array<PostAddedEventWhereInput>>
  OR?: Maybe<Array<PostAddedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  isEditable_eq?: Maybe<Scalars['Boolean']>
  isEditable_in?: Maybe<Array<Scalars['Boolean']>>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  post?: Maybe<ForumPostWhereInput>
  text_contains?: Maybe<Scalars['String']>
  text_endsWith?: Maybe<Scalars['String']>
  text_eq?: Maybe<Scalars['String']>
  text_in?: Maybe<Array<Scalars['String']>>
  text_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type PostAddedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type PostDeletedEvent = BaseGraphQlObject &
  Event & {
    actor: Membership
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    posts: Array<ForumPost>
    rationale: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type PostDeletedEventConnection = {
  edges: Array<PostDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PostDeletedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale: Scalars['String']
}

export type PostDeletedEventEdge = {
  cursor: Scalars['String']
  node: PostDeletedEvent
}

export enum PostDeletedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type PostDeletedEventUpdateInput = {
  actor?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
}

export type PostDeletedEventWhereInput = {
  AND?: Maybe<Array<PostDeletedEventWhereInput>>
  NOT?: Maybe<Array<PostDeletedEventWhereInput>>
  OR?: Maybe<Array<PostDeletedEventWhereInput>>
  actor?: Maybe<MembershipWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  posts_every?: Maybe<ForumPostWhereInput>
  posts_none?: Maybe<ForumPostWhereInput>
  posts_some?: Maybe<ForumPostWhereInput>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type PostDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type PostModeratedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    post: ForumPost
    postId: Scalars['String']
    rationale: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type PostModeratedEventConnection = {
  edges: Array<PostModeratedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PostModeratedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  post: Scalars['ID']
  rationale: Scalars['String']
}

export type PostModeratedEventEdge = {
  cursor: Scalars['String']
  node: PostModeratedEvent
}

export enum PostModeratedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type PostModeratedEventUpdateInput = {
  actor?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  post?: Maybe<Scalars['ID']>
  rationale?: Maybe<Scalars['String']>
}

export type PostModeratedEventWhereInput = {
  AND?: Maybe<Array<PostModeratedEventWhereInput>>
  NOT?: Maybe<Array<PostModeratedEventWhereInput>>
  OR?: Maybe<Array<PostModeratedEventWhereInput>>
  actor?: Maybe<WorkerWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  post?: Maybe<ForumPostWhereInput>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type PostModeratedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type PostOrigin = PostOriginThreadInitial | PostOriginThreadReply

export type PostOriginThreadInitial = {
  threadCreatedEvent?: Maybe<ThreadCreatedEvent>
}

export type PostOriginThreadReply = {
  postAddedEvent?: Maybe<PostAddedEvent>
}

export type PostStatus =
  | PostStatusActive
  | PostStatusLocked
  | PostStatusModerated
  | PostStatusRemoved

export type PostStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type PostStatusLocked = {
  postDeletedEvent?: Maybe<PostDeletedEvent>
}

export type PostStatusModerated = {
  postModeratedEvent?: Maybe<PostModeratedEvent>
}

export type PostStatusRemoved = {
  postDeletedEvent?: Maybe<PostDeletedEvent>
}

export type PostTextUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newText: Scalars['String']
    post: ForumPost
    postId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type PostTextUpdatedEventConnection = {
  edges: Array<PostTextUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PostTextUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newText: Scalars['String']
  post: Scalars['ID']
}

export type PostTextUpdatedEventEdge = {
  cursor: Scalars['String']
  node: PostTextUpdatedEvent
}

export enum PostTextUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewTextAsc = 'newText_ASC',
  NewTextDesc = 'newText_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type PostTextUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newText?: Maybe<Scalars['String']>
  post?: Maybe<Scalars['ID']>
}

export type PostTextUpdatedEventWhereInput = {
  AND?: Maybe<Array<PostTextUpdatedEventWhereInput>>
  NOT?: Maybe<Array<PostTextUpdatedEventWhereInput>>
  OR?: Maybe<Array<PostTextUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newText_contains?: Maybe<Scalars['String']>
  newText_endsWith?: Maybe<Scalars['String']>
  newText_eq?: Maybe<Scalars['String']>
  newText_in?: Maybe<Array<Scalars['String']>>
  newText_startsWith?: Maybe<Scalars['String']>
  post?: Maybe<ForumPostWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type PostTextUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type PostsByTextFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: PostsByTextSearchResult
  rank: Scalars['Float']
}

export type PostsByTextSearchResult = ForumPost

export type ProcessorState = {
  chainHead: Scalars['Float']
  indexerHead: Scalars['Float']
  lastCompleteBlock: Scalars['Float']
  lastProcessedEvent: Scalars['String']
}

export type Proposal = BaseGraphQlObject & {
  councilApprovals: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInEvent: ProposalCreatedEvent
  creator: Membership
  creatorId: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description: Scalars['String']
  details: ProposalDetails
  discussionThread: ProposalDiscussionThread
  exactExecutionBlock?: Maybe<Scalars['Int']>
  id: Scalars['ID']
  isFinalized?: Maybe<Scalars['Boolean']>
  proposalStatusUpdates: Array<ProposalStatusUpdatedEvent>
  proposalcancelledeventproposal?: Maybe<Array<ProposalCancelledEvent>>
  proposaldecisionmadeeventproposal?: Maybe<Array<ProposalDecisionMadeEvent>>
  proposalexecutedeventproposal?: Maybe<Array<ProposalExecutedEvent>>
  stakingAccount?: Maybe<Scalars['String']>
  status: ProposalStatus
  statusSetAtBlock: Scalars['Int']
  statusSetAtTime: Scalars['DateTime']
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  votes: Array<ProposalVotedEvent>
}

export type ProposalCancelledEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ProposalCancelledEventConnection = {
  edges: Array<ProposalCancelledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalCancelledEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  proposal: Scalars['ID']
}

export type ProposalCancelledEventEdge = {
  cursor: Scalars['String']
  node: ProposalCancelledEvent
}

export enum ProposalCancelledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalCancelledEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  proposal?: Maybe<Scalars['ID']>
}

export type ProposalCancelledEventWhereInput = {
  AND?: Maybe<Array<ProposalCancelledEventWhereInput>>
  NOT?: Maybe<Array<ProposalCancelledEventWhereInput>>
  OR?: Maybe<Array<ProposalCancelledEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  proposal?: Maybe<ProposalWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalCancelledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalConnection = {
  edges: Array<ProposalEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalCreateInput = {
  councilApprovals: Scalars['Float']
  creator: Scalars['ID']
  description: Scalars['String']
  details: Scalars['JSONObject']
  exactExecutionBlock?: Maybe<Scalars['Float']>
  isFinalized?: Maybe<Scalars['Boolean']>
  stakingAccount?: Maybe<Scalars['String']>
  status: Scalars['JSONObject']
  statusSetAtBlock: Scalars['Float']
  statusSetAtTime: Scalars['DateTime']
  title: Scalars['String']
}

export type ProposalCreatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ProposalCreatedEventConnection = {
  edges: Array<ProposalCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalCreatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  proposal: Scalars['ID']
}

export type ProposalCreatedEventEdge = {
  cursor: Scalars['String']
  node: ProposalCreatedEvent
}

export enum ProposalCreatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalCreatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  proposal?: Maybe<Scalars['ID']>
}

export type ProposalCreatedEventWhereInput = {
  AND?: Maybe<Array<ProposalCreatedEventWhereInput>>
  NOT?: Maybe<Array<ProposalCreatedEventWhereInput>>
  OR?: Maybe<Array<ProposalCreatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  proposal?: Maybe<ProposalWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDecisionMadeEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    decisionStatus: ProposalDecisionStatus
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ProposalDecisionMadeEventConnection = {
  edges: Array<ProposalDecisionMadeEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDecisionMadeEventCreateInput = {
  decisionStatus: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  proposal: Scalars['ID']
}

export type ProposalDecisionMadeEventEdge = {
  cursor: Scalars['String']
  node: ProposalDecisionMadeEvent
}

export enum ProposalDecisionMadeEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDecisionMadeEventUpdateInput = {
  decisionStatus?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  proposal?: Maybe<Scalars['ID']>
}

export type ProposalDecisionMadeEventWhereInput = {
  AND?: Maybe<Array<ProposalDecisionMadeEventWhereInput>>
  NOT?: Maybe<Array<ProposalDecisionMadeEventWhereInput>>
  OR?: Maybe<Array<ProposalDecisionMadeEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  decisionStatus_json?: Maybe<Scalars['JSONObject']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  proposal?: Maybe<ProposalWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalDecisionMadeEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDecisionStatus =
  | ProposalStatusCanceledByRuntime
  | ProposalStatusCancelled
  | ProposalStatusDormant
  | ProposalStatusExpired
  | ProposalStatusGracing
  | ProposalStatusRejected
  | ProposalStatusSlashed
  | ProposalStatusVetoed

export type ProposalDetails =
  | AmendConstitutionProposalDetails
  | CancelWorkingGroupLeadOpeningProposalDetails
  | CreateWorkingGroupLeadOpeningProposalDetails
  | DecreaseWorkingGroupLeadStakeProposalDetails
  | FillWorkingGroupLeadOpeningProposalDetails
  | FundingRequestProposalDetails
  | RuntimeUpgradeProposalDetails
  | SetCouncilBudgetIncrementProposalDetails
  | SetCouncilorRewardProposalDetails
  | SetInitialInvitationBalanceProposalDetails
  | SetInitialInvitationCountProposalDetails
  | SetMaxValidatorCountProposalDetails
  | SetMembershipLeadInvitationQuotaProposalDetails
  | SetMembershipPriceProposalDetails
  | SetReferralCutProposalDetails
  | SetWorkingGroupLeadRewardProposalDetails
  | SignalProposalDetails
  | SlashWorkingGroupLeadProposalDetails
  | TerminateWorkingGroupLeadProposalDetails
  | UpdateChannelPayoutsProposalDetails
  | UpdateWorkingGroupBudgetProposalDetails
  | VetoProposalDetails

export type ProposalDiscussionPost = BaseGraphQlObject & {
  author: Membership
  authorId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInEvent: ProposalDiscussionPostCreatedEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  discussionThread: ProposalDiscussionThread
  discussionThreadId: Scalars['String']
  id: Scalars['ID']
  isVisible: Scalars['Boolean']
  proposaldiscussionpostdeletedeventpost?: Maybe<Array<ProposalDiscussionPostDeletedEvent>>
  proposaldiscussionpostrepliesTo?: Maybe<Array<ProposalDiscussionPost>>
  repliesTo?: Maybe<ProposalDiscussionPost>
  repliesToId?: Maybe<Scalars['String']>
  status: ProposalDiscussionPostStatus
  text: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  updates: Array<ProposalDiscussionPostUpdatedEvent>
  version: Scalars['Int']
}

export type ProposalDiscussionPostConnection = {
  edges: Array<ProposalDiscussionPostEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionPostCreateInput = {
  author: Scalars['ID']
  discussionThread: Scalars['ID']
  isVisible: Scalars['Boolean']
  repliesTo?: Maybe<Scalars['ID']>
  status: Scalars['JSONObject']
  text: Scalars['String']
}

export type ProposalDiscussionPostCreatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    post: ProposalDiscussionPost
    postId: Scalars['String']
    text: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ProposalDiscussionPostCreatedEventConnection = {
  edges: Array<ProposalDiscussionPostCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionPostCreatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  post: Scalars['ID']
  text: Scalars['String']
}

export type ProposalDiscussionPostCreatedEventEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionPostCreatedEvent
}

export enum ProposalDiscussionPostCreatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionPostCreatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  post?: Maybe<Scalars['ID']>
  text?: Maybe<Scalars['String']>
}

export type ProposalDiscussionPostCreatedEventWhereInput = {
  AND?: Maybe<Array<ProposalDiscussionPostCreatedEventWhereInput>>
  NOT?: Maybe<Array<ProposalDiscussionPostCreatedEventWhereInput>>
  OR?: Maybe<Array<ProposalDiscussionPostCreatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  post?: Maybe<ProposalDiscussionPostWhereInput>
  text_contains?: Maybe<Scalars['String']>
  text_endsWith?: Maybe<Scalars['String']>
  text_eq?: Maybe<Scalars['String']>
  text_in?: Maybe<Array<Scalars['String']>>
  text_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionPostCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDiscussionPostDeletedEvent = BaseGraphQlObject &
  Event & {
    actor: Membership
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    post: ProposalDiscussionPost
    postId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ProposalDiscussionPostDeletedEventConnection = {
  edges: Array<ProposalDiscussionPostDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionPostDeletedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  post: Scalars['ID']
}

export type ProposalDiscussionPostDeletedEventEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionPostDeletedEvent
}

export enum ProposalDiscussionPostDeletedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionPostDeletedEventUpdateInput = {
  actor?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  post?: Maybe<Scalars['ID']>
}

export type ProposalDiscussionPostDeletedEventWhereInput = {
  AND?: Maybe<Array<ProposalDiscussionPostDeletedEventWhereInput>>
  NOT?: Maybe<Array<ProposalDiscussionPostDeletedEventWhereInput>>
  OR?: Maybe<Array<ProposalDiscussionPostDeletedEventWhereInput>>
  actor?: Maybe<MembershipWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  post?: Maybe<ProposalDiscussionPostWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionPostDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDiscussionPostEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionPost
}

export enum ProposalDiscussionPostOrderByInput {
  AuthorAsc = 'author_ASC',
  AuthorDesc = 'author_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DiscussionThreadAsc = 'discussionThread_ASC',
  DiscussionThreadDesc = 'discussionThread_DESC',
  IsVisibleAsc = 'isVisible_ASC',
  IsVisibleDesc = 'isVisible_DESC',
  RepliesToAsc = 'repliesTo_ASC',
  RepliesToDesc = 'repliesTo_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionPostStatus =
  | ProposalDiscussionPostStatusActive
  | ProposalDiscussionPostStatusLocked
  | ProposalDiscussionPostStatusRemoved

export type ProposalDiscussionPostStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type ProposalDiscussionPostStatusLocked = {
  deletedInEvent?: Maybe<ProposalDiscussionPostDeletedEvent>
}

export type ProposalDiscussionPostStatusRemoved = {
  deletedInEvent?: Maybe<ProposalDiscussionPostDeletedEvent>
}

export type ProposalDiscussionPostUpdateInput = {
  author?: Maybe<Scalars['ID']>
  discussionThread?: Maybe<Scalars['ID']>
  isVisible?: Maybe<Scalars['Boolean']>
  repliesTo?: Maybe<Scalars['ID']>
  status?: Maybe<Scalars['JSONObject']>
  text?: Maybe<Scalars['String']>
}

export type ProposalDiscussionPostUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    post: ProposalDiscussionPost
    postId: Scalars['String']
    text: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ProposalDiscussionPostUpdatedEventConnection = {
  edges: Array<ProposalDiscussionPostUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionPostUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  post: Scalars['ID']
  text: Scalars['String']
}

export type ProposalDiscussionPostUpdatedEventEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionPostUpdatedEvent
}

export enum ProposalDiscussionPostUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionPostUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  post?: Maybe<Scalars['ID']>
  text?: Maybe<Scalars['String']>
}

export type ProposalDiscussionPostUpdatedEventWhereInput = {
  AND?: Maybe<Array<ProposalDiscussionPostUpdatedEventWhereInput>>
  NOT?: Maybe<Array<ProposalDiscussionPostUpdatedEventWhereInput>>
  OR?: Maybe<Array<ProposalDiscussionPostUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  post?: Maybe<ProposalDiscussionPostWhereInput>
  text_contains?: Maybe<Scalars['String']>
  text_endsWith?: Maybe<Scalars['String']>
  text_eq?: Maybe<Scalars['String']>
  text_in?: Maybe<Array<Scalars['String']>>
  text_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionPostUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDiscussionPostWhereInput = {
  AND?: Maybe<Array<ProposalDiscussionPostWhereInput>>
  NOT?: Maybe<Array<ProposalDiscussionPostWhereInput>>
  OR?: Maybe<Array<ProposalDiscussionPostWhereInput>>
  author?: Maybe<MembershipWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInEvent?: Maybe<ProposalDiscussionPostCreatedEventWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  discussionThread?: Maybe<ProposalDiscussionThreadWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isVisible_eq?: Maybe<Scalars['Boolean']>
  isVisible_in?: Maybe<Array<Scalars['Boolean']>>
  proposaldiscussionpostdeletedeventpost_every?: Maybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostdeletedeventpost_none?: Maybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostdeletedeventpost_some?: Maybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostrepliesTo_every?: Maybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostrepliesTo_none?: Maybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostrepliesTo_some?: Maybe<ProposalDiscussionPostWhereInput>
  repliesTo?: Maybe<ProposalDiscussionPostWhereInput>
  status_json?: Maybe<Scalars['JSONObject']>
  text_contains?: Maybe<Scalars['String']>
  text_endsWith?: Maybe<Scalars['String']>
  text_eq?: Maybe<Scalars['String']>
  text_in?: Maybe<Array<Scalars['String']>>
  text_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  updates_every?: Maybe<ProposalDiscussionPostUpdatedEventWhereInput>
  updates_none?: Maybe<ProposalDiscussionPostUpdatedEventWhereInput>
  updates_some?: Maybe<ProposalDiscussionPostUpdatedEventWhereInput>
}

export type ProposalDiscussionPostWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDiscussionThread = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  mode: ProposalDiscussionThreadMode
  modeChanges: Array<ProposalDiscussionThreadModeChangedEvent>
  posts: Array<ProposalDiscussionPost>
  proposal: Proposal
  proposalId: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ProposalDiscussionThreadConnection = {
  edges: Array<ProposalDiscussionThreadEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionThreadCreateInput = {
  mode: Scalars['JSONObject']
  proposal: Scalars['ID']
}

export type ProposalDiscussionThreadEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionThread
}

export type ProposalDiscussionThreadMode =
  | ProposalDiscussionThreadModeClosed
  | ProposalDiscussionThreadModeOpen

export type ProposalDiscussionThreadModeChangedEvent = BaseGraphQlObject &
  Event & {
    actor: Membership
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newMode: ProposalDiscussionThreadMode
    thread: ProposalDiscussionThread
    threadId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ProposalDiscussionThreadModeChangedEventConnection = {
  edges: Array<ProposalDiscussionThreadModeChangedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionThreadModeChangedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newMode: Scalars['JSONObject']
  thread: Scalars['ID']
}

export type ProposalDiscussionThreadModeChangedEventEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionThreadModeChangedEvent
}

export enum ProposalDiscussionThreadModeChangedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionThreadModeChangedEventUpdateInput = {
  actor?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newMode?: Maybe<Scalars['JSONObject']>
  thread?: Maybe<Scalars['ID']>
}

export type ProposalDiscussionThreadModeChangedEventWhereInput = {
  AND?: Maybe<Array<ProposalDiscussionThreadModeChangedEventWhereInput>>
  NOT?: Maybe<Array<ProposalDiscussionThreadModeChangedEventWhereInput>>
  OR?: Maybe<Array<ProposalDiscussionThreadModeChangedEventWhereInput>>
  actor?: Maybe<MembershipWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newMode_json?: Maybe<Scalars['JSONObject']>
  thread?: Maybe<ProposalDiscussionThreadWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionThreadModeChangedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDiscussionThreadModeClosed = {
  whitelist?: Maybe<ProposalDiscussionWhitelist>
}

export type ProposalDiscussionThreadModeOpen = {
  phantom?: Maybe<Scalars['Int']>
}

export enum ProposalDiscussionThreadOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionThreadUpdateInput = {
  mode?: Maybe<Scalars['JSONObject']>
  proposal?: Maybe<Scalars['ID']>
}

export type ProposalDiscussionThreadWhereInput = {
  AND?: Maybe<Array<ProposalDiscussionThreadWhereInput>>
  NOT?: Maybe<Array<ProposalDiscussionThreadWhereInput>>
  OR?: Maybe<Array<ProposalDiscussionThreadWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  modeChanges_every?: Maybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  modeChanges_none?: Maybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  modeChanges_some?: Maybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  mode_json?: Maybe<Scalars['JSONObject']>
  posts_every?: Maybe<ProposalDiscussionPostWhereInput>
  posts_none?: Maybe<ProposalDiscussionPostWhereInput>
  posts_some?: Maybe<ProposalDiscussionPostWhereInput>
  proposal?: Maybe<ProposalWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionThreadWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDiscussionWhitelist = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  members: Array<Membership>
  phantom?: Maybe<Scalars['Int']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type ProposalDiscussionWhitelistConnection = {
  edges: Array<ProposalDiscussionWhitelistEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionWhitelistCreateInput = {
  phantom?: Maybe<Scalars['Float']>
}

export type ProposalDiscussionWhitelistEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionWhitelist
}

export enum ProposalDiscussionWhitelistOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  PhantomAsc = 'phantom_ASC',
  PhantomDesc = 'phantom_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionWhitelistUpdateInput = {
  phantom?: Maybe<Scalars['Float']>
}

export type ProposalDiscussionWhitelistWhereInput = {
  AND?: Maybe<Array<ProposalDiscussionWhitelistWhereInput>>
  NOT?: Maybe<Array<ProposalDiscussionWhitelistWhereInput>>
  OR?: Maybe<Array<ProposalDiscussionWhitelistWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  members_every?: Maybe<MembershipWhereInput>
  members_none?: Maybe<MembershipWhereInput>
  members_some?: Maybe<MembershipWhereInput>
  phantom_eq?: Maybe<Scalars['Int']>
  phantom_gt?: Maybe<Scalars['Int']>
  phantom_gte?: Maybe<Scalars['Int']>
  phantom_in?: Maybe<Array<Scalars['Int']>>
  phantom_lt?: Maybe<Scalars['Int']>
  phantom_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionWhitelistWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalEdge = {
  cursor: Scalars['String']
  node: Proposal
}

export type ProposalExecutedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    executionStatus: ProposalExecutionStatus
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ProposalExecutedEventConnection = {
  edges: Array<ProposalExecutedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalExecutedEventCreateInput = {
  executionStatus: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  proposal: Scalars['ID']
}

export type ProposalExecutedEventEdge = {
  cursor: Scalars['String']
  node: ProposalExecutedEvent
}

export enum ProposalExecutedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalExecutedEventUpdateInput = {
  executionStatus?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  proposal?: Maybe<Scalars['ID']>
}

export type ProposalExecutedEventWhereInput = {
  AND?: Maybe<Array<ProposalExecutedEventWhereInput>>
  NOT?: Maybe<Array<ProposalExecutedEventWhereInput>>
  OR?: Maybe<Array<ProposalExecutedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  executionStatus_json?: Maybe<Scalars['JSONObject']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  proposal?: Maybe<ProposalWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalExecutedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalExecutionStatus = ProposalStatusExecuted | ProposalStatusExecutionFailed

export type ProposalIntermediateStatus =
  | ProposalStatusDeciding
  | ProposalStatusDormant
  | ProposalStatusGracing

export enum ProposalOrderByInput {
  CouncilApprovalsAsc = 'councilApprovals_ASC',
  CouncilApprovalsDesc = 'councilApprovals_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatorAsc = 'creator_ASC',
  CreatorDesc = 'creator_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ExactExecutionBlockAsc = 'exactExecutionBlock_ASC',
  ExactExecutionBlockDesc = 'exactExecutionBlock_DESC',
  IsFinalizedAsc = 'isFinalized_ASC',
  IsFinalizedDesc = 'isFinalized_DESC',
  StakingAccountAsc = 'stakingAccount_ASC',
  StakingAccountDesc = 'stakingAccount_DESC',
  StatusSetAtBlockAsc = 'statusSetAtBlock_ASC',
  StatusSetAtBlockDesc = 'statusSetAtBlock_DESC',
  StatusSetAtTimeAsc = 'statusSetAtTime_ASC',
  StatusSetAtTimeDesc = 'statusSetAtTime_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalStatus =
  | ProposalStatusCanceledByRuntime
  | ProposalStatusCancelled
  | ProposalStatusDeciding
  | ProposalStatusDormant
  | ProposalStatusExecuted
  | ProposalStatusExecutionFailed
  | ProposalStatusExpired
  | ProposalStatusGracing
  | ProposalStatusRejected
  | ProposalStatusSlashed
  | ProposalStatusVetoed

export type ProposalStatusCanceledByRuntime = {
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalStatusCancelled = {
  cancelledInEvent?: Maybe<ProposalCancelledEvent>
}

export type ProposalStatusDeciding = {
  proposalStatusUpdatedEvent?: Maybe<ProposalStatusUpdatedEvent>
}

export type ProposalStatusDormant = {
  proposalStatusUpdatedEvent?: Maybe<ProposalStatusUpdatedEvent>
}

export type ProposalStatusExecuted = {
  proposalExecutedEvent?: Maybe<ProposalExecutedEvent>
}

export type ProposalStatusExecutionFailed = {
  errorMessage: Scalars['String']
  proposalExecutedEvent?: Maybe<ProposalExecutedEvent>
}

export type ProposalStatusExpired = {
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalStatusGracing = {
  proposalStatusUpdatedEvent?: Maybe<ProposalStatusUpdatedEvent>
}

export type ProposalStatusRejected = {
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalStatusSlashed = {
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalStatusUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newStatus: ProposalIntermediateStatus
    proposal: Proposal
    proposalId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ProposalStatusUpdatedEventConnection = {
  edges: Array<ProposalStatusUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalStatusUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newStatus: Scalars['JSONObject']
  proposal: Scalars['ID']
}

export type ProposalStatusUpdatedEventEdge = {
  cursor: Scalars['String']
  node: ProposalStatusUpdatedEvent
}

export enum ProposalStatusUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalStatusUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newStatus?: Maybe<Scalars['JSONObject']>
  proposal?: Maybe<Scalars['ID']>
}

export type ProposalStatusUpdatedEventWhereInput = {
  AND?: Maybe<Array<ProposalStatusUpdatedEventWhereInput>>
  NOT?: Maybe<Array<ProposalStatusUpdatedEventWhereInput>>
  OR?: Maybe<Array<ProposalStatusUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newStatus_json?: Maybe<Scalars['JSONObject']>
  proposal?: Maybe<ProposalWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ProposalStatusUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalStatusVetoed = {
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalUpdateInput = {
  councilApprovals?: Maybe<Scalars['Float']>
  creator?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  details?: Maybe<Scalars['JSONObject']>
  exactExecutionBlock?: Maybe<Scalars['Float']>
  isFinalized?: Maybe<Scalars['Boolean']>
  stakingAccount?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['JSONObject']>
  statusSetAtBlock?: Maybe<Scalars['Float']>
  statusSetAtTime?: Maybe<Scalars['DateTime']>
  title?: Maybe<Scalars['String']>
}

export enum ProposalVoteKind {
  Abstain = 'ABSTAIN',
  Approve = 'APPROVE',
  Reject = 'REJECT',
  Slash = 'SLASH',
}

export type ProposalVotedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    rationale: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    voteKind: ProposalVoteKind
    voter: Membership
    voterId: Scalars['String']
    votingRound: Scalars['Int']
  }

export type ProposalVotedEventConnection = {
  edges: Array<ProposalVotedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalVotedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  proposal: Scalars['ID']
  rationale: Scalars['String']
  voteKind: ProposalVoteKind
  voter: Scalars['ID']
  votingRound: Scalars['Float']
}

export type ProposalVotedEventEdge = {
  cursor: Scalars['String']
  node: ProposalVotedEvent
}

export enum ProposalVotedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VoteKindAsc = 'voteKind_ASC',
  VoteKindDesc = 'voteKind_DESC',
  VoterAsc = 'voter_ASC',
  VoterDesc = 'voter_DESC',
  VotingRoundAsc = 'votingRound_ASC',
  VotingRoundDesc = 'votingRound_DESC',
}

export type ProposalVotedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  proposal?: Maybe<Scalars['ID']>
  rationale?: Maybe<Scalars['String']>
  voteKind?: Maybe<ProposalVoteKind>
  voter?: Maybe<Scalars['ID']>
  votingRound?: Maybe<Scalars['Float']>
}

export type ProposalVotedEventWhereInput = {
  AND?: Maybe<Array<ProposalVotedEventWhereInput>>
  NOT?: Maybe<Array<ProposalVotedEventWhereInput>>
  OR?: Maybe<Array<ProposalVotedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  proposal?: Maybe<ProposalWhereInput>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  voteKind_eq?: Maybe<ProposalVoteKind>
  voteKind_in?: Maybe<Array<ProposalVoteKind>>
  voter?: Maybe<MembershipWhereInput>
  votingRound_eq?: Maybe<Scalars['Int']>
  votingRound_gt?: Maybe<Scalars['Int']>
  votingRound_gte?: Maybe<Scalars['Int']>
  votingRound_in?: Maybe<Array<Scalars['Int']>>
  votingRound_lt?: Maybe<Scalars['Int']>
  votingRound_lte?: Maybe<Scalars['Int']>
}

export type ProposalVotedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalWhereInput = {
  AND?: Maybe<Array<ProposalWhereInput>>
  NOT?: Maybe<Array<ProposalWhereInput>>
  OR?: Maybe<Array<ProposalWhereInput>>
  councilApprovals_eq?: Maybe<Scalars['Int']>
  councilApprovals_gt?: Maybe<Scalars['Int']>
  councilApprovals_gte?: Maybe<Scalars['Int']>
  councilApprovals_in?: Maybe<Array<Scalars['Int']>>
  councilApprovals_lt?: Maybe<Scalars['Int']>
  councilApprovals_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInEvent?: Maybe<ProposalCreatedEventWhereInput>
  creator?: Maybe<MembershipWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  details_json?: Maybe<Scalars['JSONObject']>
  discussionThread?: Maybe<ProposalDiscussionThreadWhereInput>
  exactExecutionBlock_eq?: Maybe<Scalars['Int']>
  exactExecutionBlock_gt?: Maybe<Scalars['Int']>
  exactExecutionBlock_gte?: Maybe<Scalars['Int']>
  exactExecutionBlock_in?: Maybe<Array<Scalars['Int']>>
  exactExecutionBlock_lt?: Maybe<Scalars['Int']>
  exactExecutionBlock_lte?: Maybe<Scalars['Int']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isFinalized_eq?: Maybe<Scalars['Boolean']>
  isFinalized_in?: Maybe<Array<Scalars['Boolean']>>
  proposalStatusUpdates_every?: Maybe<ProposalStatusUpdatedEventWhereInput>
  proposalStatusUpdates_none?: Maybe<ProposalStatusUpdatedEventWhereInput>
  proposalStatusUpdates_some?: Maybe<ProposalStatusUpdatedEventWhereInput>
  proposalcancelledeventproposal_every?: Maybe<ProposalCancelledEventWhereInput>
  proposalcancelledeventproposal_none?: Maybe<ProposalCancelledEventWhereInput>
  proposalcancelledeventproposal_some?: Maybe<ProposalCancelledEventWhereInput>
  proposaldecisionmadeeventproposal_every?: Maybe<ProposalDecisionMadeEventWhereInput>
  proposaldecisionmadeeventproposal_none?: Maybe<ProposalDecisionMadeEventWhereInput>
  proposaldecisionmadeeventproposal_some?: Maybe<ProposalDecisionMadeEventWhereInput>
  proposalexecutedeventproposal_every?: Maybe<ProposalExecutedEventWhereInput>
  proposalexecutedeventproposal_none?: Maybe<ProposalExecutedEventWhereInput>
  proposalexecutedeventproposal_some?: Maybe<ProposalExecutedEventWhereInput>
  stakingAccount_contains?: Maybe<Scalars['String']>
  stakingAccount_endsWith?: Maybe<Scalars['String']>
  stakingAccount_eq?: Maybe<Scalars['String']>
  stakingAccount_in?: Maybe<Array<Scalars['String']>>
  stakingAccount_startsWith?: Maybe<Scalars['String']>
  statusSetAtBlock_eq?: Maybe<Scalars['Int']>
  statusSetAtBlock_gt?: Maybe<Scalars['Int']>
  statusSetAtBlock_gte?: Maybe<Scalars['Int']>
  statusSetAtBlock_in?: Maybe<Array<Scalars['Int']>>
  statusSetAtBlock_lt?: Maybe<Scalars['Int']>
  statusSetAtBlock_lte?: Maybe<Scalars['Int']>
  statusSetAtTime_eq?: Maybe<Scalars['DateTime']>
  statusSetAtTime_gt?: Maybe<Scalars['DateTime']>
  statusSetAtTime_gte?: Maybe<Scalars['DateTime']>
  statusSetAtTime_lt?: Maybe<Scalars['DateTime']>
  statusSetAtTime_lte?: Maybe<Scalars['DateTime']>
  status_json?: Maybe<Scalars['JSONObject']>
  title_contains?: Maybe<Scalars['String']>
  title_endsWith?: Maybe<Scalars['String']>
  title_eq?: Maybe<Scalars['String']>
  title_in?: Maybe<Array<Scalars['String']>>
  title_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  votes_every?: Maybe<ProposalVotedEventWhereInput>
  votes_none?: Maybe<ProposalVotedEventWhereInput>
  votes_some?: Maybe<ProposalVotedEventWhereInput>
}

export type ProposalWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalsByTitleFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: ProposalsByTitleSearchResult
  rank: Scalars['Float']
}

export type ProposalsByTitleSearchResult = Proposal

export type Query = {
  admin: Admin
  allCategoriesFeaturedVideos: Array<CategoryFeaturedVideos>
  announcingPeriodStartedEventByUniqueInput?: Maybe<AnnouncingPeriodStartedEvent>
  announcingPeriodStartedEvents: Array<AnnouncingPeriodStartedEvent>
  announcingPeriodStartedEventsConnection: AnnouncingPeriodStartedEventConnection
  appByUniqueInput?: Maybe<App>
  applicationFormQuestionAnswerByUniqueInput?: Maybe<ApplicationFormQuestionAnswer>
  applicationFormQuestionAnswers: Array<ApplicationFormQuestionAnswer>
  applicationFormQuestionAnswersConnection: ApplicationFormQuestionAnswerConnection
  applicationFormQuestionByUniqueInput?: Maybe<ApplicationFormQuestion>
  applicationFormQuestions: Array<ApplicationFormQuestion>
  applicationFormQuestionsConnection: ApplicationFormQuestionConnection
  applicationWithdrawnEventByUniqueInput?: Maybe<ApplicationWithdrawnEvent>
  applicationWithdrawnEvents: Array<ApplicationWithdrawnEvent>
  applicationWithdrawnEventsConnection: ApplicationWithdrawnEventConnection
  appliedOnOpeningEventByUniqueInput?: Maybe<AppliedOnOpeningEvent>
  appliedOnOpeningEvents: Array<AppliedOnOpeningEvent>
  appliedOnOpeningEventsConnection: AppliedOnOpeningEventConnection
  apps: Array<App>
  appsConnection: AppConnection
  auctionBidCanceledEventByUniqueInput?: Maybe<AuctionBidCanceledEvent>
  auctionBidCanceledEvents: Array<AuctionBidCanceledEvent>
  auctionBidCanceledEventsConnection: AuctionBidCanceledEventConnection
  auctionBidMadeEventByUniqueInput?: Maybe<AuctionBidMadeEvent>
  auctionBidMadeEvents: Array<AuctionBidMadeEvent>
  auctionBidMadeEventsConnection: AuctionBidMadeEventConnection
  auctionByUniqueInput?: Maybe<Auction>
  auctionCanceledEventByUniqueInput?: Maybe<AuctionCanceledEvent>
  auctionCanceledEvents: Array<AuctionCanceledEvent>
  auctionCanceledEventsConnection: AuctionCanceledEventConnection
  auctions: Array<Auction>
  auctionsConnection: AuctionConnection
  bidByUniqueInput?: Maybe<Bid>
  bidMadeCompletingAuctionEventByUniqueInput?: Maybe<BidMadeCompletingAuctionEvent>
  bidMadeCompletingAuctionEvents: Array<BidMadeCompletingAuctionEvent>
  bidMadeCompletingAuctionEventsConnection: BidMadeCompletingAuctionEventConnection
  bids: Array<Bid>
  bidsConnection: BidConnection
  bounties: Array<Bounty>
  bountiesConnection: BountyConnection
  bountyByUniqueInput?: Maybe<Bounty>
  bountyCanceledEventByUniqueInput?: Maybe<BountyCanceledEvent>
  bountyCanceledEvents: Array<BountyCanceledEvent>
  bountyCanceledEventsConnection: BountyCanceledEventConnection
  bountyContributionByUniqueInput?: Maybe<BountyContribution>
  bountyContributions: Array<BountyContribution>
  bountyContributionsConnection: BountyContributionConnection
  bountyCreatedEventByUniqueInput?: Maybe<BountyCreatedEvent>
  bountyCreatedEvents: Array<BountyCreatedEvent>
  bountyCreatedEventsConnection: BountyCreatedEventConnection
  bountyCreatorCherryWithdrawalEventByUniqueInput?: Maybe<BountyCreatorCherryWithdrawalEvent>
  bountyCreatorCherryWithdrawalEvents: Array<BountyCreatorCherryWithdrawalEvent>
  bountyCreatorCherryWithdrawalEventsConnection: BountyCreatorCherryWithdrawalEventConnection
  bountyEntrantWhitelistByUniqueInput?: Maybe<BountyEntrantWhitelist>
  bountyEntrantWhitelists: Array<BountyEntrantWhitelist>
  bountyEntrantWhitelistsConnection: BountyEntrantWhitelistConnection
  bountyEntries: Array<BountyEntry>
  bountyEntriesConnection: BountyEntryConnection
  bountyEntryByUniqueInput?: Maybe<BountyEntry>
  bountyFundedEventByUniqueInput?: Maybe<BountyFundedEvent>
  bountyFundedEvents: Array<BountyFundedEvent>
  bountyFundedEventsConnection: BountyFundedEventConnection
  bountyFundingWithdrawalEventByUniqueInput?: Maybe<BountyFundingWithdrawalEvent>
  bountyFundingWithdrawalEvents: Array<BountyFundingWithdrawalEvent>
  bountyFundingWithdrawalEventsConnection: BountyFundingWithdrawalEventConnection
  bountyMaxFundingReachedEventByUniqueInput?: Maybe<BountyMaxFundingReachedEvent>
  bountyMaxFundingReachedEvents: Array<BountyMaxFundingReachedEvent>
  bountyMaxFundingReachedEventsConnection: BountyMaxFundingReachedEventConnection
  bountyRemovedEventByUniqueInput?: Maybe<BountyRemovedEvent>
  bountyRemovedEvents: Array<BountyRemovedEvent>
  bountyRemovedEventsConnection: BountyRemovedEventConnection
  bountyVetoedEventByUniqueInput?: Maybe<BountyVetoedEvent>
  bountyVetoedEvents: Array<BountyVetoedEvent>
  bountyVetoedEventsConnection: BountyVetoedEventConnection
  budgetBalanceSetEventByUniqueInput?: Maybe<BudgetBalanceSetEvent>
  budgetBalanceSetEvents: Array<BudgetBalanceSetEvent>
  budgetBalanceSetEventsConnection: BudgetBalanceSetEventConnection
  budgetFundedEventByUniqueInput?: Maybe<BudgetFundedEvent>
  budgetFundedEvents: Array<BudgetFundedEvent>
  budgetFundedEventsConnection: BudgetFundedEventConnection
  budgetIncrementUpdatedEventByUniqueInput?: Maybe<BudgetIncrementUpdatedEvent>
  budgetIncrementUpdatedEvents: Array<BudgetIncrementUpdatedEvent>
  budgetIncrementUpdatedEventsConnection: BudgetIncrementUpdatedEventConnection
  budgetRefillEventByUniqueInput?: Maybe<BudgetRefillEvent>
  budgetRefillEvents: Array<BudgetRefillEvent>
  budgetRefillEventsConnection: BudgetRefillEventConnection
  budgetRefillPlannedEventByUniqueInput?: Maybe<BudgetRefillPlannedEvent>
  budgetRefillPlannedEvents: Array<BudgetRefillPlannedEvent>
  budgetRefillPlannedEventsConnection: BudgetRefillPlannedEventConnection
  budgetSetEventByUniqueInput?: Maybe<BudgetSetEvent>
  budgetSetEvents: Array<BudgetSetEvent>
  budgetSetEventsConnection: BudgetSetEventConnection
  budgetSpendingEventByUniqueInput?: Maybe<BudgetSpendingEvent>
  budgetSpendingEvents: Array<BudgetSpendingEvent>
  budgetSpendingEventsConnection: BudgetSpendingEventConnection
  budgetUpdatedEventByUniqueInput?: Maybe<BudgetUpdatedEvent>
  budgetUpdatedEvents: Array<BudgetUpdatedEvent>
  budgetUpdatedEventsConnection: BudgetUpdatedEventConnection
  buyNowCanceledEventByUniqueInput?: Maybe<BuyNowCanceledEvent>
  buyNowCanceledEvents: Array<BuyNowCanceledEvent>
  buyNowCanceledEventsConnection: BuyNowCanceledEventConnection
  buyNowPriceUpdatedEventByUniqueInput?: Maybe<BuyNowPriceUpdatedEvent>
  buyNowPriceUpdatedEvents: Array<BuyNowPriceUpdatedEvent>
  buyNowPriceUpdatedEventsConnection: BuyNowPriceUpdatedEventConnection
  candidacyNoteMetadata: Array<CandidacyNoteMetadata>
  candidacyNoteMetadataByUniqueInput?: Maybe<CandidacyNoteMetadata>
  candidacyNoteMetadataConnection: CandidacyNoteMetadataConnection
  candidacyNoteSetEventByUniqueInput?: Maybe<CandidacyNoteSetEvent>
  candidacyNoteSetEvents: Array<CandidacyNoteSetEvent>
  candidacyNoteSetEventsConnection: CandidacyNoteSetEventConnection
  candidacyStakeReleaseEventByUniqueInput?: Maybe<CandidacyStakeReleaseEvent>
  candidacyStakeReleaseEvents: Array<CandidacyStakeReleaseEvent>
  candidacyStakeReleaseEventsConnection: CandidacyStakeReleaseEventConnection
  candidacyWithdrawEventByUniqueInput?: Maybe<CandidacyWithdrawEvent>
  candidacyWithdrawEvents: Array<CandidacyWithdrawEvent>
  candidacyWithdrawEventsConnection: CandidacyWithdrawEventConnection
  candidateByUniqueInput?: Maybe<Candidate>
  candidates: Array<Candidate>
  candidatesConnection: CandidateConnection
  castVoteByUniqueInput?: Maybe<CastVote>
  castVotes: Array<CastVote>
  castVotesConnection: CastVoteConnection
  categoryArchivalStatusUpdatedEventByUniqueInput?: Maybe<CategoryArchivalStatusUpdatedEvent>
  categoryArchivalStatusUpdatedEvents: Array<CategoryArchivalStatusUpdatedEvent>
  categoryArchivalStatusUpdatedEventsConnection: CategoryArchivalStatusUpdatedEventConnection
  categoryCreatedEventByUniqueInput?: Maybe<CategoryCreatedEvent>
  categoryCreatedEvents: Array<CategoryCreatedEvent>
  categoryCreatedEventsConnection: CategoryCreatedEventConnection
  categoryDeletedEventByUniqueInput?: Maybe<CategoryDeletedEvent>
  categoryDeletedEvents: Array<CategoryDeletedEvent>
  categoryDeletedEventsConnection: CategoryDeletedEventConnection
  categoryFeaturedVideos: Array<FeaturedVideo>
  categoryMembershipOfModeratorUpdatedEventByUniqueInput?: Maybe<CategoryMembershipOfModeratorUpdatedEvent>
  categoryMembershipOfModeratorUpdatedEvents: Array<CategoryMembershipOfModeratorUpdatedEvent>
  categoryMembershipOfModeratorUpdatedEventsConnection: CategoryMembershipOfModeratorUpdatedEventConnection
  categoryStickyThreadUpdateEventByUniqueInput?: Maybe<CategoryStickyThreadUpdateEvent>
  categoryStickyThreadUpdateEvents: Array<CategoryStickyThreadUpdateEvent>
  categoryStickyThreadUpdateEventsConnection: CategoryStickyThreadUpdateEventConnection
  channelAssetsDeletedByModeratorEventByUniqueInput?: Maybe<ChannelAssetsDeletedByModeratorEvent>
  channelAssetsDeletedByModeratorEvents: Array<ChannelAssetsDeletedByModeratorEvent>
  channelAssetsDeletedByModeratorEventsConnection: ChannelAssetsDeletedByModeratorEventConnection
  channelByUniqueInput?: Maybe<Channel>
  channelDeletedByModeratorEventByUniqueInput?: Maybe<ChannelDeletedByModeratorEvent>
  channelDeletedByModeratorEvents: Array<ChannelDeletedByModeratorEvent>
  channelDeletedByModeratorEventsConnection: ChannelDeletedByModeratorEventConnection
  channelFundsWithdrawnEventByUniqueInput?: Maybe<ChannelFundsWithdrawnEvent>
  channelFundsWithdrawnEvents: Array<ChannelFundsWithdrawnEvent>
  channelFundsWithdrawnEventsConnection: ChannelFundsWithdrawnEventConnection
  channelNftCollectors: Array<ChannelNftCollectors>
  channelNftCollectorsByUniqueInput?: Maybe<ChannelNftCollectors>
  channelNftCollectorsConnection: ChannelNftCollectorsConnection
  channelPaymentMadeEventByUniqueInput?: Maybe<ChannelPaymentMadeEvent>
  channelPaymentMadeEvents: Array<ChannelPaymentMadeEvent>
  channelPaymentMadeEventsConnection: ChannelPaymentMadeEventConnection
  channelPayoutsUpdatedEventByUniqueInput?: Maybe<ChannelPayoutsUpdatedEvent>
  channelPayoutsUpdatedEvents: Array<ChannelPayoutsUpdatedEvent>
  channelPayoutsUpdatedEventsConnection: ChannelPayoutsUpdatedEventConnection
  channelRewardClaimedAndWithdrawnEventByUniqueInput?: Maybe<ChannelRewardClaimedAndWithdrawnEvent>
  channelRewardClaimedAndWithdrawnEvents: Array<ChannelRewardClaimedAndWithdrawnEvent>
  channelRewardClaimedAndWithdrawnEventsConnection: ChannelRewardClaimedAndWithdrawnEventConnection
  channelRewardClaimedEventByUniqueInput?: Maybe<ChannelRewardClaimedEvent>
  channelRewardClaimedEvents: Array<ChannelRewardClaimedEvent>
  channelRewardClaimedEventsConnection: ChannelRewardClaimedEventConnection
  channelVisibilitySetByModeratorEventByUniqueInput?: Maybe<ChannelVisibilitySetByModeratorEvent>
  channelVisibilitySetByModeratorEvents: Array<ChannelVisibilitySetByModeratorEvent>
  channelVisibilitySetByModeratorEventsConnection: ChannelVisibilitySetByModeratorEventConnection
  channels: Array<Channel>
  channelsConnection: ChannelConnection
  collaboratorByUniqueInput?: Maybe<Collaborator>
  collaborators: Array<Collaborator>
  collaboratorsConnection: CollaboratorConnection
  commentByUniqueInput?: Maybe<Comment>
  commentCreatedEventByUniqueInput?: Maybe<CommentCreatedEvent>
  commentCreatedEvents: Array<CommentCreatedEvent>
  commentCreatedEventsConnection: CommentCreatedEventConnection
  commentDeletedEventByUniqueInput?: Maybe<CommentDeletedEvent>
  commentDeletedEvents: Array<CommentDeletedEvent>
  commentDeletedEventsConnection: CommentDeletedEventConnection
  commentModeratedEventByUniqueInput?: Maybe<CommentModeratedEvent>
  commentModeratedEvents: Array<CommentModeratedEvent>
  commentModeratedEventsConnection: CommentModeratedEventConnection
  commentPinnedEventByUniqueInput?: Maybe<CommentPinnedEvent>
  commentPinnedEvents: Array<CommentPinnedEvent>
  commentPinnedEventsConnection: CommentPinnedEventConnection
  commentReactedEventByUniqueInput?: Maybe<CommentReactedEvent>
  commentReactedEvents: Array<CommentReactedEvent>
  commentReactedEventsConnection: CommentReactedEventConnection
  commentReactionByUniqueInput?: Maybe<CommentReaction>
  commentReactions: Array<CommentReaction>
  commentReactionsConnection: CommentReactionConnection
  commentReactionsCountByReactionIdByUniqueInput?: Maybe<CommentReactionsCountByReactionId>
  commentReactionsCountByReactionIds: Array<CommentReactionsCountByReactionId>
  commentReactionsCountByReactionIdsConnection: CommentReactionsCountByReactionIdConnection
  commentText: Array<CommentTextFtsOutput>
  commentTextUpdatedEventByUniqueInput?: Maybe<CommentTextUpdatedEvent>
  commentTextUpdatedEvents: Array<CommentTextUpdatedEvent>
  commentTextUpdatedEventsConnection: CommentTextUpdatedEventConnection
  comments: Array<Comment>
  commentsConnection: CommentConnection
  councilBudgetFundedEventByUniqueInput?: Maybe<CouncilBudgetFundedEvent>
  councilBudgetFundedEvents: Array<CouncilBudgetFundedEvent>
  councilBudgetFundedEventsConnection: CouncilBudgetFundedEventConnection
  councilMemberByUniqueInput?: Maybe<CouncilMember>
  councilMembers: Array<CouncilMember>
  councilMembersConnection: CouncilMemberConnection
  councilStageUpdateByUniqueInput?: Maybe<CouncilStageUpdate>
  councilStageUpdates: Array<CouncilStageUpdate>
  councilStageUpdatesConnection: CouncilStageUpdateConnection
  councilorRewardUpdatedEventByUniqueInput?: Maybe<CouncilorRewardUpdatedEvent>
  councilorRewardUpdatedEvents: Array<CouncilorRewardUpdatedEvent>
  councilorRewardUpdatedEventsConnection: CouncilorRewardUpdatedEventConnection
  curatorAgentPermissions: Array<CuratorAgentPermissions>
  curatorAgentPermissionsByUniqueInput?: Maybe<CuratorAgentPermissions>
  curatorAgentPermissionsConnection: CuratorAgentPermissionsConnection
  curatorByUniqueInput?: Maybe<Curator>
  curatorGroupByUniqueInput?: Maybe<CuratorGroup>
  curatorGroups: Array<CuratorGroup>
  curatorGroupsConnection: CuratorGroupConnection
  curators: Array<Curator>
  curatorsConnection: CuratorConnection
  discoverChannels: Array<Channel>
  distributionBucketByUniqueInput?: Maybe<DistributionBucket>
  distributionBucketFamilies: Array<DistributionBucketFamily>
  distributionBucketFamiliesConnection: DistributionBucketFamilyConnection
  distributionBucketFamilyByUniqueInput?: Maybe<DistributionBucketFamily>
  distributionBucketFamilyGeographicAreaByUniqueInput?: Maybe<DistributionBucketFamilyGeographicArea>
  distributionBucketFamilyGeographicAreas: Array<DistributionBucketFamilyGeographicArea>
  distributionBucketFamilyGeographicAreasConnection: DistributionBucketFamilyGeographicAreaConnection
  distributionBucketFamilyMetadata: Array<DistributionBucketFamilyMetadata>
  distributionBucketFamilyMetadataByUniqueInput?: Maybe<DistributionBucketFamilyMetadata>
  distributionBucketFamilyMetadataConnection: DistributionBucketFamilyMetadataConnection
  distributionBucketOperatorByUniqueInput?: Maybe<DistributionBucketOperator>
  distributionBucketOperatorMetadata: Array<DistributionBucketOperatorMetadata>
  distributionBucketOperatorMetadataByUniqueInput?: Maybe<DistributionBucketOperatorMetadata>
  distributionBucketOperatorMetadataConnection: DistributionBucketOperatorMetadataConnection
  distributionBucketOperators: Array<DistributionBucketOperator>
  distributionBucketOperatorsConnection: DistributionBucketOperatorConnection
  distributionBuckets: Array<DistributionBucket>
  distributionBucketsConnection: DistributionBucketConnection
  electedCouncilByUniqueInput?: Maybe<ElectedCouncil>
  electedCouncils: Array<ElectedCouncil>
  electedCouncilsConnection: ElectedCouncilConnection
  electionRoundByUniqueInput?: Maybe<ElectionRound>
  electionRounds: Array<ElectionRound>
  electionRoundsConnection: ElectionRoundConnection
  englishAuctionSettledEventByUniqueInput?: Maybe<EnglishAuctionSettledEvent>
  englishAuctionSettledEvents: Array<EnglishAuctionSettledEvent>
  englishAuctionSettledEventsConnection: EnglishAuctionSettledEventConnection
  englishAuctionStartedEventByUniqueInput?: Maybe<EnglishAuctionStartedEvent>
  englishAuctionStartedEvents: Array<EnglishAuctionStartedEvent>
  englishAuctionStartedEventsConnection: EnglishAuctionStartedEventConnection
  events: Array<Event>
  forumCategories: Array<ForumCategory>
  forumCategoriesConnection: ForumCategoryConnection
  forumCategoryByUniqueInput?: Maybe<ForumCategory>
  forumPostByUniqueInput?: Maybe<ForumPost>
  forumPosts: Array<ForumPost>
  forumPostsConnection: ForumPostConnection
  forumThreadByUniqueInput?: Maybe<ForumThread>
  forumThreadTagByUniqueInput?: Maybe<ForumThreadTag>
  forumThreadTags: Array<ForumThreadTag>
  forumThreadTagsConnection: ForumThreadTagConnection
  forumThreads: Array<ForumThread>
  forumThreadsConnection: ForumThreadConnection
  fundingRequestDestinationByUniqueInput?: Maybe<FundingRequestDestination>
  fundingRequestDestinations: Array<FundingRequestDestination>
  fundingRequestDestinationsConnection: FundingRequestDestinationConnection
  fundingRequestDestinationsListByUniqueInput?: Maybe<FundingRequestDestinationsList>
  fundingRequestDestinationsLists: Array<FundingRequestDestinationsList>
  fundingRequestDestinationsListsConnection: FundingRequestDestinationsListConnection
  geoCoordinates: Array<GeoCoordinates>
  geoCoordinatesByUniqueInput?: Maybe<GeoCoordinates>
  geoCoordinatesConnection: GeoCoordinatesConnection
  initialInvitationBalanceUpdatedEventByUniqueInput?: Maybe<InitialInvitationBalanceUpdatedEvent>
  initialInvitationBalanceUpdatedEvents: Array<InitialInvitationBalanceUpdatedEvent>
  initialInvitationBalanceUpdatedEventsConnection: InitialInvitationBalanceUpdatedEventConnection
  initialInvitationCountUpdatedEventByUniqueInput?: Maybe<InitialInvitationCountUpdatedEvent>
  initialInvitationCountUpdatedEvents: Array<InitialInvitationCountUpdatedEvent>
  initialInvitationCountUpdatedEventsConnection: InitialInvitationCountUpdatedEventConnection
  invitesTransferredEventByUniqueInput?: Maybe<InvitesTransferredEvent>
  invitesTransferredEvents: Array<InvitesTransferredEvent>
  invitesTransferredEventsConnection: InvitesTransferredEventConnection
  languageByUniqueInput?: Maybe<Language>
  languages: Array<Language>
  languagesConnection: LanguageConnection
  leaderInvitationQuotaUpdatedEventByUniqueInput?: Maybe<LeaderInvitationQuotaUpdatedEvent>
  leaderInvitationQuotaUpdatedEvents: Array<LeaderInvitationQuotaUpdatedEvent>
  leaderInvitationQuotaUpdatedEventsConnection: LeaderInvitationQuotaUpdatedEventConnection
  leaderSetEventByUniqueInput?: Maybe<LeaderSetEvent>
  leaderSetEvents: Array<LeaderSetEvent>
  leaderSetEventsConnection: LeaderSetEventConnection
  leaderUnsetEventByUniqueInput?: Maybe<LeaderUnsetEvent>
  leaderUnsetEvents: Array<LeaderUnsetEvent>
  leaderUnsetEventsConnection: LeaderUnsetEventConnection
  licenseByUniqueInput?: Maybe<License>
  licenses: Array<License>
  licensesConnection: LicenseConnection
  memberAccountsUpdatedEventByUniqueInput?: Maybe<MemberAccountsUpdatedEvent>
  memberAccountsUpdatedEvents: Array<MemberAccountsUpdatedEvent>
  memberAccountsUpdatedEventsConnection: MemberAccountsUpdatedEventConnection
  memberBannedFromChannelEventByUniqueInput?: Maybe<MemberBannedFromChannelEvent>
  memberBannedFromChannelEvents: Array<MemberBannedFromChannelEvent>
  memberBannedFromChannelEventsConnection: MemberBannedFromChannelEventConnection
  memberCreatedEventByUniqueInput?: Maybe<MemberCreatedEvent>
  memberCreatedEvents: Array<MemberCreatedEvent>
  memberCreatedEventsConnection: MemberCreatedEventConnection
  memberInvitedEventByUniqueInput?: Maybe<MemberInvitedEvent>
  memberInvitedEvents: Array<MemberInvitedEvent>
  memberInvitedEventsConnection: MemberInvitedEventConnection
  memberMetadata: Array<MemberMetadata>
  memberMetadataByUniqueInput?: Maybe<MemberMetadata>
  memberMetadataConnection: MemberMetadataConnection
  memberProfileUpdatedEventByUniqueInput?: Maybe<MemberProfileUpdatedEvent>
  memberProfileUpdatedEvents: Array<MemberProfileUpdatedEvent>
  memberProfileUpdatedEventsConnection: MemberProfileUpdatedEventConnection
  memberVerificationStatusUpdatedEventByUniqueInput?: Maybe<MemberVerificationStatusUpdatedEvent>
  memberVerificationStatusUpdatedEvents: Array<MemberVerificationStatusUpdatedEvent>
  memberVerificationStatusUpdatedEventsConnection: MemberVerificationStatusUpdatedEventConnection
  membersByHandle: Array<MembersByHandleFtsOutput>
  membershipBoughtEventByUniqueInput?: Maybe<MembershipBoughtEvent>
  membershipBoughtEvents: Array<MembershipBoughtEvent>
  membershipBoughtEventsConnection: MembershipBoughtEventConnection
  membershipByUniqueInput?: Maybe<Membership>
  membershipExternalResourceByUniqueInput?: Maybe<MembershipExternalResource>
  membershipExternalResources: Array<MembershipExternalResource>
  membershipExternalResourcesConnection: MembershipExternalResourceConnection
  membershipGiftedEventByUniqueInput?: Maybe<MembershipGiftedEvent>
  membershipGiftedEvents: Array<MembershipGiftedEvent>
  membershipGiftedEventsConnection: MembershipGiftedEventConnection
  membershipPriceUpdatedEventByUniqueInput?: Maybe<MembershipPriceUpdatedEvent>
  membershipPriceUpdatedEvents: Array<MembershipPriceUpdatedEvent>
  membershipPriceUpdatedEventsConnection: MembershipPriceUpdatedEventConnection
  memberships: Array<Membership>
  membershipsConnection: MembershipConnection
  metaprotocolTransactionStatusEventByUniqueInput?: Maybe<MetaprotocolTransactionStatusEvent>
  metaprotocolTransactionStatusEvents: Array<MetaprotocolTransactionStatusEvent>
  metaprotocolTransactionStatusEventsConnection: MetaprotocolTransactionStatusEventConnection
  mostFollowedChannelsConnection: ChannelConnection
  mostViewedCategories?: Maybe<Array<EntityViewsInfo>>
  mostViewedCategoriesAllTime?: Maybe<Array<EntityViewsInfo>>
  mostViewedChannelsConnection: ChannelConnection
  mostViewedVideosConnection: VideoConnection
  newCandidateEventByUniqueInput?: Maybe<NewCandidateEvent>
  newCandidateEvents: Array<NewCandidateEvent>
  newCandidateEventsConnection: NewCandidateEventConnection
  newCouncilElectedEventByUniqueInput?: Maybe<NewCouncilElectedEvent>
  newCouncilElectedEvents: Array<NewCouncilElectedEvent>
  newCouncilElectedEventsConnection: NewCouncilElectedEventConnection
  newCouncilNotElectedEventByUniqueInput?: Maybe<NewCouncilNotElectedEvent>
  newCouncilNotElectedEvents: Array<NewCouncilNotElectedEvent>
  newCouncilNotElectedEventsConnection: NewCouncilNotElectedEventConnection
  newMissedRewardLevelReachedEventByUniqueInput?: Maybe<NewMissedRewardLevelReachedEvent>
  newMissedRewardLevelReachedEvents: Array<NewMissedRewardLevelReachedEvent>
  newMissedRewardLevelReachedEventsConnection: NewMissedRewardLevelReachedEventConnection
  nftBoughtEventByUniqueInput?: Maybe<NftBoughtEvent>
  nftBoughtEvents: Array<NftBoughtEvent>
  nftBoughtEventsConnection: NftBoughtEventConnection
  nftIssuedEventByUniqueInput?: Maybe<NftIssuedEvent>
  nftIssuedEvents: Array<NftIssuedEvent>
  nftIssuedEventsConnection: NftIssuedEventConnection
  nftSellOrderMadeEventByUniqueInput?: Maybe<NftSellOrderMadeEvent>
  nftSellOrderMadeEvents: Array<NftSellOrderMadeEvent>
  nftSellOrderMadeEventsConnection: NftSellOrderMadeEventConnection
  nftSlingedBackToTheOriginalArtistEventByUniqueInput?: Maybe<NftSlingedBackToTheOriginalArtistEvent>
  nftSlingedBackToTheOriginalArtistEvents: Array<NftSlingedBackToTheOriginalArtistEvent>
  nftSlingedBackToTheOriginalArtistEventsConnection: NftSlingedBackToTheOriginalArtistEventConnection
  nodeLocationMetadata: Array<NodeLocationMetadata>
  nodeLocationMetadataByUniqueInput?: Maybe<NodeLocationMetadata>
  nodeLocationMetadataConnection: NodeLocationMetadataConnection
  notEnoughCandidatesEventByUniqueInput?: Maybe<NotEnoughCandidatesEvent>
  notEnoughCandidatesEvents: Array<NotEnoughCandidatesEvent>
  notEnoughCandidatesEventsConnection: NotEnoughCandidatesEventConnection
  offerAcceptedEventByUniqueInput?: Maybe<OfferAcceptedEvent>
  offerAcceptedEvents: Array<OfferAcceptedEvent>
  offerAcceptedEventsConnection: OfferAcceptedEventConnection
  offerCanceledEventByUniqueInput?: Maybe<OfferCanceledEvent>
  offerCanceledEvents: Array<OfferCanceledEvent>
  offerCanceledEventsConnection: OfferCanceledEventConnection
  offerStartedEventByUniqueInput?: Maybe<OfferStartedEvent>
  offerStartedEvents: Array<OfferStartedEvent>
  offerStartedEventsConnection: OfferStartedEventConnection
  openAuctionBidAcceptedEventByUniqueInput?: Maybe<OpenAuctionBidAcceptedEvent>
  openAuctionBidAcceptedEvents: Array<OpenAuctionBidAcceptedEvent>
  openAuctionBidAcceptedEventsConnection: OpenAuctionBidAcceptedEventConnection
  openAuctionStartedEventByUniqueInput?: Maybe<OpenAuctionStartedEvent>
  openAuctionStartedEvents: Array<OpenAuctionStartedEvent>
  openAuctionStartedEventsConnection: OpenAuctionStartedEventConnection
  openingAddedEventByUniqueInput?: Maybe<OpeningAddedEvent>
  openingAddedEvents: Array<OpeningAddedEvent>
  openingAddedEventsConnection: OpeningAddedEventConnection
  openingCanceledEventByUniqueInput?: Maybe<OpeningCanceledEvent>
  openingCanceledEvents: Array<OpeningCanceledEvent>
  openingCanceledEventsConnection: OpeningCanceledEventConnection
  openingFilledEventByUniqueInput?: Maybe<OpeningFilledEvent>
  openingFilledEvents: Array<OpeningFilledEvent>
  openingFilledEventsConnection: OpeningFilledEventConnection
  oracleJudgmentSubmittedEventByUniqueInput?: Maybe<OracleJudgmentSubmittedEvent>
  oracleJudgmentSubmittedEvents: Array<OracleJudgmentSubmittedEvent>
  oracleJudgmentSubmittedEventsConnection: OracleJudgmentSubmittedEventConnection
  ownedNftByUniqueInput?: Maybe<OwnedNft>
  ownedNfts: Array<OwnedNft>
  ownedNftsConnection: OwnedNftConnection
  popularChannels: Array<Channel>
  postAddedEventByUniqueInput?: Maybe<PostAddedEvent>
  postAddedEvents: Array<PostAddedEvent>
  postAddedEventsConnection: PostAddedEventConnection
  postDeletedEventByUniqueInput?: Maybe<PostDeletedEvent>
  postDeletedEvents: Array<PostDeletedEvent>
  postDeletedEventsConnection: PostDeletedEventConnection
  postModeratedEventByUniqueInput?: Maybe<PostModeratedEvent>
  postModeratedEvents: Array<PostModeratedEvent>
  postModeratedEventsConnection: PostModeratedEventConnection
  postTextUpdatedEventByUniqueInput?: Maybe<PostTextUpdatedEvent>
  postTextUpdatedEvents: Array<PostTextUpdatedEvent>
  postTextUpdatedEventsConnection: PostTextUpdatedEventConnection
  postsByText: Array<PostsByTextFtsOutput>
  promisingChannels: Array<Channel>
  proposalByUniqueInput?: Maybe<Proposal>
  proposalCancelledEventByUniqueInput?: Maybe<ProposalCancelledEvent>
  proposalCancelledEvents: Array<ProposalCancelledEvent>
  proposalCancelledEventsConnection: ProposalCancelledEventConnection
  proposalCreatedEventByUniqueInput?: Maybe<ProposalCreatedEvent>
  proposalCreatedEvents: Array<ProposalCreatedEvent>
  proposalCreatedEventsConnection: ProposalCreatedEventConnection
  proposalDecisionMadeEventByUniqueInput?: Maybe<ProposalDecisionMadeEvent>
  proposalDecisionMadeEvents: Array<ProposalDecisionMadeEvent>
  proposalDecisionMadeEventsConnection: ProposalDecisionMadeEventConnection
  proposalDiscussionPostByUniqueInput?: Maybe<ProposalDiscussionPost>
  proposalDiscussionPostCreatedEventByUniqueInput?: Maybe<ProposalDiscussionPostCreatedEvent>
  proposalDiscussionPostCreatedEvents: Array<ProposalDiscussionPostCreatedEvent>
  proposalDiscussionPostCreatedEventsConnection: ProposalDiscussionPostCreatedEventConnection
  proposalDiscussionPostDeletedEventByUniqueInput?: Maybe<ProposalDiscussionPostDeletedEvent>
  proposalDiscussionPostDeletedEvents: Array<ProposalDiscussionPostDeletedEvent>
  proposalDiscussionPostDeletedEventsConnection: ProposalDiscussionPostDeletedEventConnection
  proposalDiscussionPostUpdatedEventByUniqueInput?: Maybe<ProposalDiscussionPostUpdatedEvent>
  proposalDiscussionPostUpdatedEvents: Array<ProposalDiscussionPostUpdatedEvent>
  proposalDiscussionPostUpdatedEventsConnection: ProposalDiscussionPostUpdatedEventConnection
  proposalDiscussionPosts: Array<ProposalDiscussionPost>
  proposalDiscussionPostsConnection: ProposalDiscussionPostConnection
  proposalDiscussionThreadByUniqueInput?: Maybe<ProposalDiscussionThread>
  proposalDiscussionThreadModeChangedEventByUniqueInput?: Maybe<ProposalDiscussionThreadModeChangedEvent>
  proposalDiscussionThreadModeChangedEvents: Array<ProposalDiscussionThreadModeChangedEvent>
  proposalDiscussionThreadModeChangedEventsConnection: ProposalDiscussionThreadModeChangedEventConnection
  proposalDiscussionThreads: Array<ProposalDiscussionThread>
  proposalDiscussionThreadsConnection: ProposalDiscussionThreadConnection
  proposalDiscussionWhitelistByUniqueInput?: Maybe<ProposalDiscussionWhitelist>
  proposalDiscussionWhitelists: Array<ProposalDiscussionWhitelist>
  proposalDiscussionWhitelistsConnection: ProposalDiscussionWhitelistConnection
  proposalExecutedEventByUniqueInput?: Maybe<ProposalExecutedEvent>
  proposalExecutedEvents: Array<ProposalExecutedEvent>
  proposalExecutedEventsConnection: ProposalExecutedEventConnection
  proposalStatusUpdatedEventByUniqueInput?: Maybe<ProposalStatusUpdatedEvent>
  proposalStatusUpdatedEvents: Array<ProposalStatusUpdatedEvent>
  proposalStatusUpdatedEventsConnection: ProposalStatusUpdatedEventConnection
  proposalVotedEventByUniqueInput?: Maybe<ProposalVotedEvent>
  proposalVotedEvents: Array<ProposalVotedEvent>
  proposalVotedEventsConnection: ProposalVotedEventConnection
  proposals: Array<Proposal>
  proposalsByTitle: Array<ProposalsByTitleFtsOutput>
  proposalsConnection: ProposalConnection
  referendumFinishedEventByUniqueInput?: Maybe<ReferendumFinishedEvent>
  referendumFinishedEvents: Array<ReferendumFinishedEvent>
  referendumFinishedEventsConnection: ReferendumFinishedEventConnection
  referendumStageRevealingByUniqueInput?: Maybe<ReferendumStageRevealing>
  referendumStageRevealings: Array<ReferendumStageRevealing>
  referendumStageRevealingsConnection: ReferendumStageRevealingConnection
  referendumStageVotingByUniqueInput?: Maybe<ReferendumStageVoting>
  referendumStageVotings: Array<ReferendumStageVoting>
  referendumStageVotingsConnection: ReferendumStageVotingConnection
  referendumStartedEventByUniqueInput?: Maybe<ReferendumStartedEvent>
  referendumStartedEvents: Array<ReferendumStartedEvent>
  referendumStartedEventsConnection: ReferendumStartedEventConnection
  referendumStartedForcefullyEventByUniqueInput?: Maybe<ReferendumStartedForcefullyEvent>
  referendumStartedForcefullyEvents: Array<ReferendumStartedForcefullyEvent>
  referendumStartedForcefullyEventsConnection: ReferendumStartedForcefullyEventConnection
  referralCutUpdatedEventByUniqueInput?: Maybe<ReferralCutUpdatedEvent>
  referralCutUpdatedEvents: Array<ReferralCutUpdatedEvent>
  referralCutUpdatedEventsConnection: ReferralCutUpdatedEventConnection
  reportedChannels: Array<ChannelReportInfo>
  reportedVideos: Array<VideoReportInfo>
  requestFundedEventByUniqueInput?: Maybe<RequestFundedEvent>
  requestFundedEvents: Array<RequestFundedEvent>
  requestFundedEventsConnection: RequestFundedEventConnection
  revealingStageStartedEventByUniqueInput?: Maybe<RevealingStageStartedEvent>
  revealingStageStartedEvents: Array<RevealingStageStartedEvent>
  revealingStageStartedEventsConnection: RevealingStageStartedEventConnection
  rewardPaidEventByUniqueInput?: Maybe<RewardPaidEvent>
  rewardPaidEvents: Array<RewardPaidEvent>
  rewardPaidEventsConnection: RewardPaidEventConnection
  rewardPaymentEventByUniqueInput?: Maybe<RewardPaymentEvent>
  rewardPaymentEvents: Array<RewardPaymentEvent>
  rewardPaymentEventsConnection: RewardPaymentEventConnection
  runtimeWasmBytecodeByUniqueInput?: Maybe<RuntimeWasmBytecode>
  runtimeWasmBytecodes: Array<RuntimeWasmBytecode>
  runtimeWasmBytecodesConnection: RuntimeWasmBytecodeConnection
  search: Array<SearchFtsOutput>
  stakeDecreasedEventByUniqueInput?: Maybe<StakeDecreasedEvent>
  stakeDecreasedEvents: Array<StakeDecreasedEvent>
  stakeDecreasedEventsConnection: StakeDecreasedEventConnection
  stakeIncreasedEventByUniqueInput?: Maybe<StakeIncreasedEvent>
  stakeIncreasedEvents: Array<StakeIncreasedEvent>
  stakeIncreasedEventsConnection: StakeIncreasedEventConnection
  stakeReleasedEventByUniqueInput?: Maybe<StakeReleasedEvent>
  stakeReleasedEvents: Array<StakeReleasedEvent>
  stakeReleasedEventsConnection: StakeReleasedEventConnection
  stakeSlashedEventByUniqueInput?: Maybe<StakeSlashedEvent>
  stakeSlashedEvents: Array<StakeSlashedEvent>
  stakeSlashedEventsConnection: StakeSlashedEventConnection
  stakingAccountAddedEventByUniqueInput?: Maybe<StakingAccountAddedEvent>
  stakingAccountAddedEvents: Array<StakingAccountAddedEvent>
  stakingAccountAddedEventsConnection: StakingAccountAddedEventConnection
  stakingAccountConfirmedEventByUniqueInput?: Maybe<StakingAccountConfirmedEvent>
  stakingAccountConfirmedEvents: Array<StakingAccountConfirmedEvent>
  stakingAccountConfirmedEventsConnection: StakingAccountConfirmedEventConnection
  stakingAccountRemovedEventByUniqueInput?: Maybe<StakingAccountRemovedEvent>
  stakingAccountRemovedEvents: Array<StakingAccountRemovedEvent>
  stakingAccountRemovedEventsConnection: StakingAccountRemovedEventConnection
  statusTextChangedEventByUniqueInput?: Maybe<StatusTextChangedEvent>
  statusTextChangedEvents: Array<StatusTextChangedEvent>
  statusTextChangedEventsConnection: StatusTextChangedEventConnection
  storageBagByUniqueInput?: Maybe<StorageBag>
  storageBags: Array<StorageBag>
  storageBagsConnection: StorageBagConnection
  storageBucketByUniqueInput?: Maybe<StorageBucket>
  storageBucketOperatorMetadata: Array<StorageBucketOperatorMetadata>
  storageBucketOperatorMetadataByUniqueInput?: Maybe<StorageBucketOperatorMetadata>
  storageBucketOperatorMetadataConnection: StorageBucketOperatorMetadataConnection
  storageBuckets: Array<StorageBucket>
  storageBucketsConnection: StorageBucketConnection
  storageDataObjectByUniqueInput?: Maybe<StorageDataObject>
  storageDataObjects: Array<StorageDataObject>
  storageDataObjectsConnection: StorageDataObjectConnection
  terminatedLeaderEventByUniqueInput?: Maybe<TerminatedLeaderEvent>
  terminatedLeaderEvents: Array<TerminatedLeaderEvent>
  terminatedLeaderEventsConnection: TerminatedLeaderEventConnection
  terminatedWorkerEventByUniqueInput?: Maybe<TerminatedWorkerEvent>
  terminatedWorkerEvents: Array<TerminatedWorkerEvent>
  terminatedWorkerEventsConnection: TerminatedWorkerEventConnection
  threadCreatedEventByUniqueInput?: Maybe<ThreadCreatedEvent>
  threadCreatedEvents: Array<ThreadCreatedEvent>
  threadCreatedEventsConnection: ThreadCreatedEventConnection
  threadDeletedEventByUniqueInput?: Maybe<ThreadDeletedEvent>
  threadDeletedEvents: Array<ThreadDeletedEvent>
  threadDeletedEventsConnection: ThreadDeletedEventConnection
  threadMetadataUpdatedEventByUniqueInput?: Maybe<ThreadMetadataUpdatedEvent>
  threadMetadataUpdatedEvents: Array<ThreadMetadataUpdatedEvent>
  threadMetadataUpdatedEventsConnection: ThreadMetadataUpdatedEventConnection
  threadModeratedEventByUniqueInput?: Maybe<ThreadModeratedEvent>
  threadModeratedEvents: Array<ThreadModeratedEvent>
  threadModeratedEventsConnection: ThreadModeratedEventConnection
  threadMovedEventByUniqueInput?: Maybe<ThreadMovedEvent>
  threadMovedEvents: Array<ThreadMovedEvent>
  threadMovedEventsConnection: ThreadMovedEventConnection
  threadsByTitle: Array<ThreadsByTitleFtsOutput>
  top10Channels: Array<Channel>
  top10VideosThisMonth: Array<Video>
  top10VideosThisWeek: Array<Video>
  transactionalStatusUpdateByUniqueInput?: Maybe<TransactionalStatusUpdate>
  transactionalStatusUpdates: Array<TransactionalStatusUpdate>
  transactionalStatusUpdatesConnection: TransactionalStatusUpdateConnection
  upcomingWorkingGroupOpeningByUniqueInput?: Maybe<UpcomingWorkingGroupOpening>
  upcomingWorkingGroupOpenings: Array<UpcomingWorkingGroupOpening>
  upcomingWorkingGroupOpeningsConnection: UpcomingWorkingGroupOpeningConnection
  videoAssetsDeletedByModeratorEventByUniqueInput?: Maybe<VideoAssetsDeletedByModeratorEvent>
  videoAssetsDeletedByModeratorEvents: Array<VideoAssetsDeletedByModeratorEvent>
  videoAssetsDeletedByModeratorEventsConnection: VideoAssetsDeletedByModeratorEventConnection
  videoByUniqueInput?: Maybe<Video>
  videoCategories: Array<VideoCategory>
  videoCategoriesByName: Array<VideoCategoriesByNameFtsOutput>
  videoCategoriesConnection: VideoCategoryConnection
  videoCategoryByUniqueInput?: Maybe<VideoCategory>
  videoDeletedByModeratorEventByUniqueInput?: Maybe<VideoDeletedByModeratorEvent>
  videoDeletedByModeratorEvents: Array<VideoDeletedByModeratorEvent>
  videoDeletedByModeratorEventsConnection: VideoDeletedByModeratorEventConnection
  videoDeletedEventByUniqueInput?: Maybe<VideoDeletedEvent>
  videoDeletedEvents: Array<VideoDeletedEvent>
  videoDeletedEventsConnection: VideoDeletedEventConnection
  videoHero: VideoHero
  videoMediaEncodingByUniqueInput?: Maybe<VideoMediaEncoding>
  videoMediaEncodings: Array<VideoMediaEncoding>
  videoMediaEncodingsConnection: VideoMediaEncodingConnection
  videoMediaMetadata: Array<VideoMediaMetadata>
  videoMediaMetadataByUniqueInput?: Maybe<VideoMediaMetadata>
  videoMediaMetadataConnection: VideoMediaMetadataConnection
  videoReactedEventByUniqueInput?: Maybe<VideoReactedEvent>
  videoReactedEvents: Array<VideoReactedEvent>
  videoReactedEventsConnection: VideoReactedEventConnection
  videoReactionByUniqueInput?: Maybe<VideoReaction>
  videoReactions: Array<VideoReaction>
  videoReactionsConnection: VideoReactionConnection
  videoReactionsCountByReactionTypeByUniqueInput?: Maybe<VideoReactionsCountByReactionType>
  videoReactionsCountByReactionTypes: Array<VideoReactionsCountByReactionType>
  videoReactionsCountByReactionTypesConnection: VideoReactionsCountByReactionTypeConnection
  videoReactionsPreferenceEventByUniqueInput?: Maybe<VideoReactionsPreferenceEvent>
  videoReactionsPreferenceEvents: Array<VideoReactionsPreferenceEvent>
  videoReactionsPreferenceEventsConnection: VideoReactionsPreferenceEventConnection
  videoSubtitleByUniqueInput?: Maybe<VideoSubtitle>
  videoSubtitles: Array<VideoSubtitle>
  videoSubtitlesConnection: VideoSubtitleConnection
  videoVisibilitySetByModeratorEventByUniqueInput?: Maybe<VideoVisibilitySetByModeratorEvent>
  videoVisibilitySetByModeratorEvents: Array<VideoVisibilitySetByModeratorEvent>
  videoVisibilitySetByModeratorEventsConnection: VideoVisibilitySetByModeratorEventConnection
  videos: Array<Video>
  videosConnection: VideoConnection
  voteCastEventByUniqueInput?: Maybe<VoteCastEvent>
  voteCastEvents: Array<VoteCastEvent>
  voteCastEventsConnection: VoteCastEventConnection
  voteRevealedEventByUniqueInput?: Maybe<VoteRevealedEvent>
  voteRevealedEvents: Array<VoteRevealedEvent>
  voteRevealedEventsConnection: VoteRevealedEventConnection
  votingPeriodStartedEventByUniqueInput?: Maybe<VotingPeriodStartedEvent>
  votingPeriodStartedEvents: Array<VotingPeriodStartedEvent>
  votingPeriodStartedEventsConnection: VotingPeriodStartedEventConnection
  workEntrantFundsWithdrawnEventByUniqueInput?: Maybe<WorkEntrantFundsWithdrawnEvent>
  workEntrantFundsWithdrawnEvents: Array<WorkEntrantFundsWithdrawnEvent>
  workEntrantFundsWithdrawnEventsConnection: WorkEntrantFundsWithdrawnEventConnection
  workEntryAnnouncedEventByUniqueInput?: Maybe<WorkEntryAnnouncedEvent>
  workEntryAnnouncedEvents: Array<WorkEntryAnnouncedEvent>
  workEntryAnnouncedEventsConnection: WorkEntryAnnouncedEventConnection
  workEntrySlashedEventByUniqueInput?: Maybe<WorkEntrySlashedEvent>
  workEntrySlashedEvents: Array<WorkEntrySlashedEvent>
  workEntrySlashedEventsConnection: WorkEntrySlashedEventConnection
  workEntryWithdrawnEventByUniqueInput?: Maybe<WorkEntryWithdrawnEvent>
  workEntryWithdrawnEvents: Array<WorkEntryWithdrawnEvent>
  workEntryWithdrawnEventsConnection: WorkEntryWithdrawnEventConnection
  workSubmittedEventByUniqueInput?: Maybe<WorkSubmittedEvent>
  workSubmittedEvents: Array<WorkSubmittedEvent>
  workSubmittedEventsConnection: WorkSubmittedEventConnection
  workerByUniqueInput?: Maybe<Worker>
  workerExitedEventByUniqueInput?: Maybe<WorkerExitedEvent>
  workerExitedEvents: Array<WorkerExitedEvent>
  workerExitedEventsConnection: WorkerExitedEventConnection
  workerRewardAccountUpdatedEventByUniqueInput?: Maybe<WorkerRewardAccountUpdatedEvent>
  workerRewardAccountUpdatedEvents: Array<WorkerRewardAccountUpdatedEvent>
  workerRewardAccountUpdatedEventsConnection: WorkerRewardAccountUpdatedEventConnection
  workerRewardAmountUpdatedEventByUniqueInput?: Maybe<WorkerRewardAmountUpdatedEvent>
  workerRewardAmountUpdatedEvents: Array<WorkerRewardAmountUpdatedEvent>
  workerRewardAmountUpdatedEventsConnection: WorkerRewardAmountUpdatedEventConnection
  workerRoleAccountUpdatedEventByUniqueInput?: Maybe<WorkerRoleAccountUpdatedEvent>
  workerRoleAccountUpdatedEvents: Array<WorkerRoleAccountUpdatedEvent>
  workerRoleAccountUpdatedEventsConnection: WorkerRoleAccountUpdatedEventConnection
  workerStartedLeavingEventByUniqueInput?: Maybe<WorkerStartedLeavingEvent>
  workerStartedLeavingEvents: Array<WorkerStartedLeavingEvent>
  workerStartedLeavingEventsConnection: WorkerStartedLeavingEventConnection
  workers: Array<Worker>
  workersConnection: WorkerConnection
  workingGroupApplicationByUniqueInput?: Maybe<WorkingGroupApplication>
  workingGroupApplications: Array<WorkingGroupApplication>
  workingGroupApplicationsConnection: WorkingGroupApplicationConnection
  workingGroupByUniqueInput?: Maybe<WorkingGroup>
  workingGroupMetadata: Array<WorkingGroupMetadata>
  workingGroupMetadataByUniqueInput?: Maybe<WorkingGroupMetadata>
  workingGroupMetadataConnection: WorkingGroupMetadataConnection
  workingGroupOpeningByUniqueInput?: Maybe<WorkingGroupOpening>
  workingGroupOpeningMetadata: Array<WorkingGroupOpeningMetadata>
  workingGroupOpeningMetadataByUniqueInput?: Maybe<WorkingGroupOpeningMetadata>
  workingGroupOpeningMetadataConnection: WorkingGroupOpeningMetadataConnection
  workingGroupOpenings: Array<WorkingGroupOpening>
  workingGroupOpeningsConnection: WorkingGroupOpeningConnection
  workingGroups: Array<WorkingGroup>
  workingGroupsConnection: WorkingGroupConnection
}

export type QueryAllCategoriesFeaturedVideosArgs = {
  videosLimit: Scalars['Int']
}

export type QueryAnnouncingPeriodStartedEventByUniqueInputArgs = {
  where: AnnouncingPeriodStartedEventWhereUniqueInput
}

export type QueryAnnouncingPeriodStartedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AnnouncingPeriodStartedEventOrderByInput>>
  where?: Maybe<AnnouncingPeriodStartedEventWhereInput>
}

export type QueryAnnouncingPeriodStartedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AnnouncingPeriodStartedEventOrderByInput>>
  where?: Maybe<AnnouncingPeriodStartedEventWhereInput>
}

export type QueryAppByUniqueInputArgs = {
  where: AppWhereUniqueInput
}

export type QueryApplicationFormQuestionAnswerByUniqueInputArgs = {
  where: ApplicationFormQuestionAnswerWhereUniqueInput
}

export type QueryApplicationFormQuestionAnswersArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ApplicationFormQuestionAnswerOrderByInput>>
  where?: Maybe<ApplicationFormQuestionAnswerWhereInput>
}

export type QueryApplicationFormQuestionAnswersConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ApplicationFormQuestionAnswerOrderByInput>>
  where?: Maybe<ApplicationFormQuestionAnswerWhereInput>
}

export type QueryApplicationFormQuestionByUniqueInputArgs = {
  where: ApplicationFormQuestionWhereUniqueInput
}

export type QueryApplicationFormQuestionsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ApplicationFormQuestionOrderByInput>>
  where?: Maybe<ApplicationFormQuestionWhereInput>
}

export type QueryApplicationFormQuestionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ApplicationFormQuestionOrderByInput>>
  where?: Maybe<ApplicationFormQuestionWhereInput>
}

export type QueryApplicationWithdrawnEventByUniqueInputArgs = {
  where: ApplicationWithdrawnEventWhereUniqueInput
}

export type QueryApplicationWithdrawnEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ApplicationWithdrawnEventOrderByInput>>
  where?: Maybe<ApplicationWithdrawnEventWhereInput>
}

export type QueryApplicationWithdrawnEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ApplicationWithdrawnEventOrderByInput>>
  where?: Maybe<ApplicationWithdrawnEventWhereInput>
}

export type QueryAppliedOnOpeningEventByUniqueInputArgs = {
  where: AppliedOnOpeningEventWhereUniqueInput
}

export type QueryAppliedOnOpeningEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AppliedOnOpeningEventOrderByInput>>
  where?: Maybe<AppliedOnOpeningEventWhereInput>
}

export type QueryAppliedOnOpeningEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AppliedOnOpeningEventOrderByInput>>
  where?: Maybe<AppliedOnOpeningEventWhereInput>
}

export type QueryAppsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AppOrderByInput>>
  where?: Maybe<AppWhereInput>
}

export type QueryAppsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AppOrderByInput>>
  where?: Maybe<AppWhereInput>
}

export type QueryAuctionBidCanceledEventByUniqueInputArgs = {
  where: AuctionBidCanceledEventWhereUniqueInput
}

export type QueryAuctionBidCanceledEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AuctionBidCanceledEventOrderByInput>>
  where?: Maybe<AuctionBidCanceledEventWhereInput>
}

export type QueryAuctionBidCanceledEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AuctionBidCanceledEventOrderByInput>>
  where?: Maybe<AuctionBidCanceledEventWhereInput>
}

export type QueryAuctionBidMadeEventByUniqueInputArgs = {
  where: AuctionBidMadeEventWhereUniqueInput
}

export type QueryAuctionBidMadeEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AuctionBidMadeEventOrderByInput>>
  where?: Maybe<AuctionBidMadeEventWhereInput>
}

export type QueryAuctionBidMadeEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AuctionBidMadeEventOrderByInput>>
  where?: Maybe<AuctionBidMadeEventWhereInput>
}

export type QueryAuctionByUniqueInputArgs = {
  where: AuctionWhereUniqueInput
}

export type QueryAuctionCanceledEventByUniqueInputArgs = {
  where: AuctionCanceledEventWhereUniqueInput
}

export type QueryAuctionCanceledEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AuctionCanceledEventOrderByInput>>
  where?: Maybe<AuctionCanceledEventWhereInput>
}

export type QueryAuctionCanceledEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AuctionCanceledEventOrderByInput>>
  where?: Maybe<AuctionCanceledEventWhereInput>
}

export type QueryAuctionsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AuctionOrderByInput>>
  where?: Maybe<AuctionWhereInput>
}

export type QueryAuctionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<AuctionOrderByInput>>
  where?: Maybe<AuctionWhereInput>
}

export type QueryBidByUniqueInputArgs = {
  where: BidWhereUniqueInput
}

export type QueryBidMadeCompletingAuctionEventByUniqueInputArgs = {
  where: BidMadeCompletingAuctionEventWhereUniqueInput
}

export type QueryBidMadeCompletingAuctionEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BidMadeCompletingAuctionEventOrderByInput>>
  where?: Maybe<BidMadeCompletingAuctionEventWhereInput>
}

export type QueryBidMadeCompletingAuctionEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BidMadeCompletingAuctionEventOrderByInput>>
  where?: Maybe<BidMadeCompletingAuctionEventWhereInput>
}

export type QueryBidsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BidOrderByInput>>
  where?: Maybe<BidWhereInput>
}

export type QueryBidsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BidOrderByInput>>
  where?: Maybe<BidWhereInput>
}

export type QueryBountiesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyOrderByInput>>
  where?: Maybe<BountyWhereInput>
}

export type QueryBountiesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyOrderByInput>>
  where?: Maybe<BountyWhereInput>
}

export type QueryBountyByUniqueInputArgs = {
  where: BountyWhereUniqueInput
}

export type QueryBountyCanceledEventByUniqueInputArgs = {
  where: BountyCanceledEventWhereUniqueInput
}

export type QueryBountyCanceledEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyCanceledEventOrderByInput>>
  where?: Maybe<BountyCanceledEventWhereInput>
}

export type QueryBountyCanceledEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyCanceledEventOrderByInput>>
  where?: Maybe<BountyCanceledEventWhereInput>
}

export type QueryBountyContributionByUniqueInputArgs = {
  where: BountyContributionWhereUniqueInput
}

export type QueryBountyContributionsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyContributionOrderByInput>>
  where?: Maybe<BountyContributionWhereInput>
}

export type QueryBountyContributionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyContributionOrderByInput>>
  where?: Maybe<BountyContributionWhereInput>
}

export type QueryBountyCreatedEventByUniqueInputArgs = {
  where: BountyCreatedEventWhereUniqueInput
}

export type QueryBountyCreatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyCreatedEventOrderByInput>>
  where?: Maybe<BountyCreatedEventWhereInput>
}

export type QueryBountyCreatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyCreatedEventOrderByInput>>
  where?: Maybe<BountyCreatedEventWhereInput>
}

export type QueryBountyCreatorCherryWithdrawalEventByUniqueInputArgs = {
  where: BountyCreatorCherryWithdrawalEventWhereUniqueInput
}

export type QueryBountyCreatorCherryWithdrawalEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyCreatorCherryWithdrawalEventOrderByInput>>
  where?: Maybe<BountyCreatorCherryWithdrawalEventWhereInput>
}

export type QueryBountyCreatorCherryWithdrawalEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyCreatorCherryWithdrawalEventOrderByInput>>
  where?: Maybe<BountyCreatorCherryWithdrawalEventWhereInput>
}

export type QueryBountyEntrantWhitelistByUniqueInputArgs = {
  where: BountyEntrantWhitelistWhereUniqueInput
}

export type QueryBountyEntrantWhitelistsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyEntrantWhitelistOrderByInput>>
  where?: Maybe<BountyEntrantWhitelistWhereInput>
}

export type QueryBountyEntrantWhitelistsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyEntrantWhitelistOrderByInput>>
  where?: Maybe<BountyEntrantWhitelistWhereInput>
}

export type QueryBountyEntriesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyEntryOrderByInput>>
  where?: Maybe<BountyEntryWhereInput>
}

export type QueryBountyEntriesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyEntryOrderByInput>>
  where?: Maybe<BountyEntryWhereInput>
}

export type QueryBountyEntryByUniqueInputArgs = {
  where: BountyEntryWhereUniqueInput
}

export type QueryBountyFundedEventByUniqueInputArgs = {
  where: BountyFundedEventWhereUniqueInput
}

export type QueryBountyFundedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyFundedEventOrderByInput>>
  where?: Maybe<BountyFundedEventWhereInput>
}

export type QueryBountyFundedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyFundedEventOrderByInput>>
  where?: Maybe<BountyFundedEventWhereInput>
}

export type QueryBountyFundingWithdrawalEventByUniqueInputArgs = {
  where: BountyFundingWithdrawalEventWhereUniqueInput
}

export type QueryBountyFundingWithdrawalEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyFundingWithdrawalEventOrderByInput>>
  where?: Maybe<BountyFundingWithdrawalEventWhereInput>
}

export type QueryBountyFundingWithdrawalEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyFundingWithdrawalEventOrderByInput>>
  where?: Maybe<BountyFundingWithdrawalEventWhereInput>
}

export type QueryBountyMaxFundingReachedEventByUniqueInputArgs = {
  where: BountyMaxFundingReachedEventWhereUniqueInput
}

export type QueryBountyMaxFundingReachedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyMaxFundingReachedEventOrderByInput>>
  where?: Maybe<BountyMaxFundingReachedEventWhereInput>
}

export type QueryBountyMaxFundingReachedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyMaxFundingReachedEventOrderByInput>>
  where?: Maybe<BountyMaxFundingReachedEventWhereInput>
}

export type QueryBountyRemovedEventByUniqueInputArgs = {
  where: BountyRemovedEventWhereUniqueInput
}

export type QueryBountyRemovedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyRemovedEventOrderByInput>>
  where?: Maybe<BountyRemovedEventWhereInput>
}

export type QueryBountyRemovedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyRemovedEventOrderByInput>>
  where?: Maybe<BountyRemovedEventWhereInput>
}

export type QueryBountyVetoedEventByUniqueInputArgs = {
  where: BountyVetoedEventWhereUniqueInput
}

export type QueryBountyVetoedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyVetoedEventOrderByInput>>
  where?: Maybe<BountyVetoedEventWhereInput>
}

export type QueryBountyVetoedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BountyVetoedEventOrderByInput>>
  where?: Maybe<BountyVetoedEventWhereInput>
}

export type QueryBudgetBalanceSetEventByUniqueInputArgs = {
  where: BudgetBalanceSetEventWhereUniqueInput
}

export type QueryBudgetBalanceSetEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetBalanceSetEventOrderByInput>>
  where?: Maybe<BudgetBalanceSetEventWhereInput>
}

export type QueryBudgetBalanceSetEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetBalanceSetEventOrderByInput>>
  where?: Maybe<BudgetBalanceSetEventWhereInput>
}

export type QueryBudgetFundedEventByUniqueInputArgs = {
  where: BudgetFundedEventWhereUniqueInput
}

export type QueryBudgetFundedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetFundedEventOrderByInput>>
  where?: Maybe<BudgetFundedEventWhereInput>
}

export type QueryBudgetFundedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetFundedEventOrderByInput>>
  where?: Maybe<BudgetFundedEventWhereInput>
}

export type QueryBudgetIncrementUpdatedEventByUniqueInputArgs = {
  where: BudgetIncrementUpdatedEventWhereUniqueInput
}

export type QueryBudgetIncrementUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetIncrementUpdatedEventOrderByInput>>
  where?: Maybe<BudgetIncrementUpdatedEventWhereInput>
}

export type QueryBudgetIncrementUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetIncrementUpdatedEventOrderByInput>>
  where?: Maybe<BudgetIncrementUpdatedEventWhereInput>
}

export type QueryBudgetRefillEventByUniqueInputArgs = {
  where: BudgetRefillEventWhereUniqueInput
}

export type QueryBudgetRefillEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetRefillEventOrderByInput>>
  where?: Maybe<BudgetRefillEventWhereInput>
}

export type QueryBudgetRefillEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetRefillEventOrderByInput>>
  where?: Maybe<BudgetRefillEventWhereInput>
}

export type QueryBudgetRefillPlannedEventByUniqueInputArgs = {
  where: BudgetRefillPlannedEventWhereUniqueInput
}

export type QueryBudgetRefillPlannedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetRefillPlannedEventOrderByInput>>
  where?: Maybe<BudgetRefillPlannedEventWhereInput>
}

export type QueryBudgetRefillPlannedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetRefillPlannedEventOrderByInput>>
  where?: Maybe<BudgetRefillPlannedEventWhereInput>
}

export type QueryBudgetSetEventByUniqueInputArgs = {
  where: BudgetSetEventWhereUniqueInput
}

export type QueryBudgetSetEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetSetEventOrderByInput>>
  where?: Maybe<BudgetSetEventWhereInput>
}

export type QueryBudgetSetEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetSetEventOrderByInput>>
  where?: Maybe<BudgetSetEventWhereInput>
}

export type QueryBudgetSpendingEventByUniqueInputArgs = {
  where: BudgetSpendingEventWhereUniqueInput
}

export type QueryBudgetSpendingEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetSpendingEventOrderByInput>>
  where?: Maybe<BudgetSpendingEventWhereInput>
}

export type QueryBudgetSpendingEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetSpendingEventOrderByInput>>
  where?: Maybe<BudgetSpendingEventWhereInput>
}

export type QueryBudgetUpdatedEventByUniqueInputArgs = {
  where: BudgetUpdatedEventWhereUniqueInput
}

export type QueryBudgetUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetUpdatedEventOrderByInput>>
  where?: Maybe<BudgetUpdatedEventWhereInput>
}

export type QueryBudgetUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BudgetUpdatedEventOrderByInput>>
  where?: Maybe<BudgetUpdatedEventWhereInput>
}

export type QueryBuyNowCanceledEventByUniqueInputArgs = {
  where: BuyNowCanceledEventWhereUniqueInput
}

export type QueryBuyNowCanceledEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BuyNowCanceledEventOrderByInput>>
  where?: Maybe<BuyNowCanceledEventWhereInput>
}

export type QueryBuyNowCanceledEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BuyNowCanceledEventOrderByInput>>
  where?: Maybe<BuyNowCanceledEventWhereInput>
}

export type QueryBuyNowPriceUpdatedEventByUniqueInputArgs = {
  where: BuyNowPriceUpdatedEventWhereUniqueInput
}

export type QueryBuyNowPriceUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BuyNowPriceUpdatedEventOrderByInput>>
  where?: Maybe<BuyNowPriceUpdatedEventWhereInput>
}

export type QueryBuyNowPriceUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<BuyNowPriceUpdatedEventOrderByInput>>
  where?: Maybe<BuyNowPriceUpdatedEventWhereInput>
}

export type QueryCandidacyNoteMetadataArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidacyNoteMetadataOrderByInput>>
  where?: Maybe<CandidacyNoteMetadataWhereInput>
}

export type QueryCandidacyNoteMetadataByUniqueInputArgs = {
  where: CandidacyNoteMetadataWhereUniqueInput
}

export type QueryCandidacyNoteMetadataConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidacyNoteMetadataOrderByInput>>
  where?: Maybe<CandidacyNoteMetadataWhereInput>
}

export type QueryCandidacyNoteSetEventByUniqueInputArgs = {
  where: CandidacyNoteSetEventWhereUniqueInput
}

export type QueryCandidacyNoteSetEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidacyNoteSetEventOrderByInput>>
  where?: Maybe<CandidacyNoteSetEventWhereInput>
}

export type QueryCandidacyNoteSetEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidacyNoteSetEventOrderByInput>>
  where?: Maybe<CandidacyNoteSetEventWhereInput>
}

export type QueryCandidacyStakeReleaseEventByUniqueInputArgs = {
  where: CandidacyStakeReleaseEventWhereUniqueInput
}

export type QueryCandidacyStakeReleaseEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidacyStakeReleaseEventOrderByInput>>
  where?: Maybe<CandidacyStakeReleaseEventWhereInput>
}

export type QueryCandidacyStakeReleaseEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidacyStakeReleaseEventOrderByInput>>
  where?: Maybe<CandidacyStakeReleaseEventWhereInput>
}

export type QueryCandidacyWithdrawEventByUniqueInputArgs = {
  where: CandidacyWithdrawEventWhereUniqueInput
}

export type QueryCandidacyWithdrawEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidacyWithdrawEventOrderByInput>>
  where?: Maybe<CandidacyWithdrawEventWhereInput>
}

export type QueryCandidacyWithdrawEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidacyWithdrawEventOrderByInput>>
  where?: Maybe<CandidacyWithdrawEventWhereInput>
}

export type QueryCandidateByUniqueInputArgs = {
  where: CandidateWhereUniqueInput
}

export type QueryCandidatesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidateOrderByInput>>
  where?: Maybe<CandidateWhereInput>
}

export type QueryCandidatesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CandidateOrderByInput>>
  where?: Maybe<CandidateWhereInput>
}

export type QueryCastVoteByUniqueInputArgs = {
  where: CastVoteWhereUniqueInput
}

export type QueryCastVotesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CastVoteOrderByInput>>
  where?: Maybe<CastVoteWhereInput>
}

export type QueryCastVotesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CastVoteOrderByInput>>
  where?: Maybe<CastVoteWhereInput>
}

export type QueryCategoryArchivalStatusUpdatedEventByUniqueInputArgs = {
  where: CategoryArchivalStatusUpdatedEventWhereUniqueInput
}

export type QueryCategoryArchivalStatusUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryArchivalStatusUpdatedEventOrderByInput>>
  where?: Maybe<CategoryArchivalStatusUpdatedEventWhereInput>
}

export type QueryCategoryArchivalStatusUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryArchivalStatusUpdatedEventOrderByInput>>
  where?: Maybe<CategoryArchivalStatusUpdatedEventWhereInput>
}

export type QueryCategoryCreatedEventByUniqueInputArgs = {
  where: CategoryCreatedEventWhereUniqueInput
}

export type QueryCategoryCreatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryCreatedEventOrderByInput>>
  where?: Maybe<CategoryCreatedEventWhereInput>
}

export type QueryCategoryCreatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryCreatedEventOrderByInput>>
  where?: Maybe<CategoryCreatedEventWhereInput>
}

export type QueryCategoryDeletedEventByUniqueInputArgs = {
  where: CategoryDeletedEventWhereUniqueInput
}

export type QueryCategoryDeletedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryDeletedEventOrderByInput>>
  where?: Maybe<CategoryDeletedEventWhereInput>
}

export type QueryCategoryDeletedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryDeletedEventOrderByInput>>
  where?: Maybe<CategoryDeletedEventWhereInput>
}

export type QueryCategoryFeaturedVideosArgs = {
  categoryId: Scalars['ID']
}

export type QueryCategoryMembershipOfModeratorUpdatedEventByUniqueInputArgs = {
  where: CategoryMembershipOfModeratorUpdatedEventWhereUniqueInput
}

export type QueryCategoryMembershipOfModeratorUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryMembershipOfModeratorUpdatedEventOrderByInput>>
  where?: Maybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
}

export type QueryCategoryMembershipOfModeratorUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryMembershipOfModeratorUpdatedEventOrderByInput>>
  where?: Maybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
}

export type QueryCategoryStickyThreadUpdateEventByUniqueInputArgs = {
  where: CategoryStickyThreadUpdateEventWhereUniqueInput
}

export type QueryCategoryStickyThreadUpdateEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryStickyThreadUpdateEventOrderByInput>>
  where?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
}

export type QueryCategoryStickyThreadUpdateEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CategoryStickyThreadUpdateEventOrderByInput>>
  where?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
}

export type QueryChannelAssetsDeletedByModeratorEventByUniqueInputArgs = {
  where: ChannelAssetsDeletedByModeratorEventWhereUniqueInput
}

export type QueryChannelAssetsDeletedByModeratorEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelAssetsDeletedByModeratorEventOrderByInput>>
  where?: Maybe<ChannelAssetsDeletedByModeratorEventWhereInput>
}

export type QueryChannelAssetsDeletedByModeratorEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelAssetsDeletedByModeratorEventOrderByInput>>
  where?: Maybe<ChannelAssetsDeletedByModeratorEventWhereInput>
}

export type QueryChannelByUniqueInputArgs = {
  where: ChannelWhereUniqueInput
}

export type QueryChannelDeletedByModeratorEventByUniqueInputArgs = {
  where: ChannelDeletedByModeratorEventWhereUniqueInput
}

export type QueryChannelDeletedByModeratorEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelDeletedByModeratorEventOrderByInput>>
  where?: Maybe<ChannelDeletedByModeratorEventWhereInput>
}

export type QueryChannelDeletedByModeratorEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelDeletedByModeratorEventOrderByInput>>
  where?: Maybe<ChannelDeletedByModeratorEventWhereInput>
}

export type QueryChannelFundsWithdrawnEventByUniqueInputArgs = {
  where: ChannelFundsWithdrawnEventWhereUniqueInput
}

export type QueryChannelFundsWithdrawnEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelFundsWithdrawnEventOrderByInput>>
  where?: Maybe<ChannelFundsWithdrawnEventWhereInput>
}

export type QueryChannelFundsWithdrawnEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelFundsWithdrawnEventOrderByInput>>
  where?: Maybe<ChannelFundsWithdrawnEventWhereInput>
}

export type QueryChannelNftCollectorsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelNftCollectorsOrderByInput>>
  where?: Maybe<ChannelNftCollectorsWhereInput>
}

export type QueryChannelNftCollectorsByUniqueInputArgs = {
  where: ChannelNftCollectorsWhereUniqueInput
}

export type QueryChannelNftCollectorsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelNftCollectorsOrderByInput>>
  where?: Maybe<ChannelNftCollectorsWhereInput>
}

export type QueryChannelPaymentMadeEventByUniqueInputArgs = {
  where: ChannelPaymentMadeEventWhereUniqueInput
}

export type QueryChannelPaymentMadeEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelPaymentMadeEventOrderByInput>>
  where?: Maybe<ChannelPaymentMadeEventWhereInput>
}

export type QueryChannelPaymentMadeEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelPaymentMadeEventOrderByInput>>
  where?: Maybe<ChannelPaymentMadeEventWhereInput>
}

export type QueryChannelPayoutsUpdatedEventByUniqueInputArgs = {
  where: ChannelPayoutsUpdatedEventWhereUniqueInput
}

export type QueryChannelPayoutsUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelPayoutsUpdatedEventOrderByInput>>
  where?: Maybe<ChannelPayoutsUpdatedEventWhereInput>
}

export type QueryChannelPayoutsUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelPayoutsUpdatedEventOrderByInput>>
  where?: Maybe<ChannelPayoutsUpdatedEventWhereInput>
}

export type QueryChannelRewardClaimedAndWithdrawnEventByUniqueInputArgs = {
  where: ChannelRewardClaimedAndWithdrawnEventWhereUniqueInput
}

export type QueryChannelRewardClaimedAndWithdrawnEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelRewardClaimedAndWithdrawnEventOrderByInput>>
  where?: Maybe<ChannelRewardClaimedAndWithdrawnEventWhereInput>
}

export type QueryChannelRewardClaimedAndWithdrawnEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelRewardClaimedAndWithdrawnEventOrderByInput>>
  where?: Maybe<ChannelRewardClaimedAndWithdrawnEventWhereInput>
}

export type QueryChannelRewardClaimedEventByUniqueInputArgs = {
  where: ChannelRewardClaimedEventWhereUniqueInput
}

export type QueryChannelRewardClaimedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelRewardClaimedEventOrderByInput>>
  where?: Maybe<ChannelRewardClaimedEventWhereInput>
}

export type QueryChannelRewardClaimedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelRewardClaimedEventOrderByInput>>
  where?: Maybe<ChannelRewardClaimedEventWhereInput>
}

export type QueryChannelVisibilitySetByModeratorEventByUniqueInputArgs = {
  where: ChannelVisibilitySetByModeratorEventWhereUniqueInput
}

export type QueryChannelVisibilitySetByModeratorEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelVisibilitySetByModeratorEventOrderByInput>>
  where?: Maybe<ChannelVisibilitySetByModeratorEventWhereInput>
}

export type QueryChannelVisibilitySetByModeratorEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelVisibilitySetByModeratorEventOrderByInput>>
  where?: Maybe<ChannelVisibilitySetByModeratorEventWhereInput>
}

export type QueryChannelsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelOrderByInput>>
  where?: Maybe<ChannelWhereInput>
}

export type QueryChannelsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ChannelOrderByInput>>
  where?: Maybe<ChannelWhereInput>
}

export type QueryCollaboratorByUniqueInputArgs = {
  where: CollaboratorWhereUniqueInput
}

export type QueryCollaboratorsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CollaboratorOrderByInput>>
  where?: Maybe<CollaboratorWhereInput>
}

export type QueryCollaboratorsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CollaboratorOrderByInput>>
  where?: Maybe<CollaboratorWhereInput>
}

export type QueryCommentByUniqueInputArgs = {
  where: CommentWhereUniqueInput
}

export type QueryCommentCreatedEventByUniqueInputArgs = {
  where: CommentCreatedEventWhereUniqueInput
}

export type QueryCommentCreatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentCreatedEventOrderByInput>>
  where?: Maybe<CommentCreatedEventWhereInput>
}

export type QueryCommentCreatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentCreatedEventOrderByInput>>
  where?: Maybe<CommentCreatedEventWhereInput>
}

export type QueryCommentDeletedEventByUniqueInputArgs = {
  where: CommentDeletedEventWhereUniqueInput
}

export type QueryCommentDeletedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentDeletedEventOrderByInput>>
  where?: Maybe<CommentDeletedEventWhereInput>
}

export type QueryCommentDeletedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentDeletedEventOrderByInput>>
  where?: Maybe<CommentDeletedEventWhereInput>
}

export type QueryCommentModeratedEventByUniqueInputArgs = {
  where: CommentModeratedEventWhereUniqueInput
}

export type QueryCommentModeratedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentModeratedEventOrderByInput>>
  where?: Maybe<CommentModeratedEventWhereInput>
}

export type QueryCommentModeratedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentModeratedEventOrderByInput>>
  where?: Maybe<CommentModeratedEventWhereInput>
}

export type QueryCommentPinnedEventByUniqueInputArgs = {
  where: CommentPinnedEventWhereUniqueInput
}

export type QueryCommentPinnedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentPinnedEventOrderByInput>>
  where?: Maybe<CommentPinnedEventWhereInput>
}

export type QueryCommentPinnedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentPinnedEventOrderByInput>>
  where?: Maybe<CommentPinnedEventWhereInput>
}

export type QueryCommentReactedEventByUniqueInputArgs = {
  where: CommentReactedEventWhereUniqueInput
}

export type QueryCommentReactedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentReactedEventOrderByInput>>
  where?: Maybe<CommentReactedEventWhereInput>
}

export type QueryCommentReactedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentReactedEventOrderByInput>>
  where?: Maybe<CommentReactedEventWhereInput>
}

export type QueryCommentReactionByUniqueInputArgs = {
  where: CommentReactionWhereUniqueInput
}

export type QueryCommentReactionsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentReactionOrderByInput>>
  where?: Maybe<CommentReactionWhereInput>
}

export type QueryCommentReactionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentReactionOrderByInput>>
  where?: Maybe<CommentReactionWhereInput>
}

export type QueryCommentReactionsCountByReactionIdByUniqueInputArgs = {
  where: CommentReactionsCountByReactionIdWhereUniqueInput
}

export type QueryCommentReactionsCountByReactionIdsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentReactionsCountByReactionIdOrderByInput>>
  where?: Maybe<CommentReactionsCountByReactionIdWhereInput>
}

export type QueryCommentReactionsCountByReactionIdsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentReactionsCountByReactionIdOrderByInput>>
  where?: Maybe<CommentReactionsCountByReactionIdWhereInput>
}

export type QueryCommentTextArgs = {
  limit?: Maybe<Scalars['Int']>
  skip?: Maybe<Scalars['Int']>
  text: Scalars['String']
  whereComment?: Maybe<CommentWhereInput>
}

export type QueryCommentTextUpdatedEventByUniqueInputArgs = {
  where: CommentTextUpdatedEventWhereUniqueInput
}

export type QueryCommentTextUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentTextUpdatedEventOrderByInput>>
  where?: Maybe<CommentTextUpdatedEventWhereInput>
}

export type QueryCommentTextUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentTextUpdatedEventOrderByInput>>
  where?: Maybe<CommentTextUpdatedEventWhereInput>
}

export type QueryCommentsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentOrderByInput>>
  where?: Maybe<CommentWhereInput>
}

export type QueryCommentsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CommentOrderByInput>>
  where?: Maybe<CommentWhereInput>
}

export type QueryCouncilBudgetFundedEventByUniqueInputArgs = {
  where: CouncilBudgetFundedEventWhereUniqueInput
}

export type QueryCouncilBudgetFundedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CouncilBudgetFundedEventOrderByInput>>
  where?: Maybe<CouncilBudgetFundedEventWhereInput>
}

export type QueryCouncilBudgetFundedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CouncilBudgetFundedEventOrderByInput>>
  where?: Maybe<CouncilBudgetFundedEventWhereInput>
}

export type QueryCouncilMemberByUniqueInputArgs = {
  where: CouncilMemberWhereUniqueInput
}

export type QueryCouncilMembersArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CouncilMemberOrderByInput>>
  where?: Maybe<CouncilMemberWhereInput>
}

export type QueryCouncilMembersConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CouncilMemberOrderByInput>>
  where?: Maybe<CouncilMemberWhereInput>
}

export type QueryCouncilStageUpdateByUniqueInputArgs = {
  where: CouncilStageUpdateWhereUniqueInput
}

export type QueryCouncilStageUpdatesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CouncilStageUpdateOrderByInput>>
  where?: Maybe<CouncilStageUpdateWhereInput>
}

export type QueryCouncilStageUpdatesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CouncilStageUpdateOrderByInput>>
  where?: Maybe<CouncilStageUpdateWhereInput>
}

export type QueryCouncilorRewardUpdatedEventByUniqueInputArgs = {
  where: CouncilorRewardUpdatedEventWhereUniqueInput
}

export type QueryCouncilorRewardUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CouncilorRewardUpdatedEventOrderByInput>>
  where?: Maybe<CouncilorRewardUpdatedEventWhereInput>
}

export type QueryCouncilorRewardUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CouncilorRewardUpdatedEventOrderByInput>>
  where?: Maybe<CouncilorRewardUpdatedEventWhereInput>
}

export type QueryCuratorAgentPermissionsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CuratorAgentPermissionsOrderByInput>>
  where?: Maybe<CuratorAgentPermissionsWhereInput>
}

export type QueryCuratorAgentPermissionsByUniqueInputArgs = {
  where: CuratorAgentPermissionsWhereUniqueInput
}

export type QueryCuratorAgentPermissionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CuratorAgentPermissionsOrderByInput>>
  where?: Maybe<CuratorAgentPermissionsWhereInput>
}

export type QueryCuratorByUniqueInputArgs = {
  where: CuratorWhereUniqueInput
}

export type QueryCuratorGroupByUniqueInputArgs = {
  where: CuratorGroupWhereUniqueInput
}

export type QueryCuratorGroupsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CuratorGroupOrderByInput>>
  where?: Maybe<CuratorGroupWhereInput>
}

export type QueryCuratorGroupsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CuratorGroupOrderByInput>>
  where?: Maybe<CuratorGroupWhereInput>
}

export type QueryCuratorsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CuratorOrderByInput>>
  where?: Maybe<CuratorWhereInput>
}

export type QueryCuratorsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<CuratorOrderByInput>>
  where?: Maybe<CuratorWhereInput>
}

export type QueryDiscoverChannelsArgs = {
  where?: Maybe<ChannelWhereInput>
}

export type QueryDistributionBucketByUniqueInputArgs = {
  where: DistributionBucketWhereUniqueInput
}

export type QueryDistributionBucketFamiliesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketFamilyOrderByInput>>
  where?: Maybe<DistributionBucketFamilyWhereInput>
}

export type QueryDistributionBucketFamiliesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketFamilyOrderByInput>>
  where?: Maybe<DistributionBucketFamilyWhereInput>
}

export type QueryDistributionBucketFamilyByUniqueInputArgs = {
  where: DistributionBucketFamilyWhereUniqueInput
}

export type QueryDistributionBucketFamilyGeographicAreaByUniqueInputArgs = {
  where: DistributionBucketFamilyGeographicAreaWhereUniqueInput
}

export type QueryDistributionBucketFamilyGeographicAreasArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketFamilyGeographicAreaOrderByInput>>
  where?: Maybe<DistributionBucketFamilyGeographicAreaWhereInput>
}

export type QueryDistributionBucketFamilyGeographicAreasConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketFamilyGeographicAreaOrderByInput>>
  where?: Maybe<DistributionBucketFamilyGeographicAreaWhereInput>
}

export type QueryDistributionBucketFamilyMetadataArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketFamilyMetadataOrderByInput>>
  where?: Maybe<DistributionBucketFamilyMetadataWhereInput>
}

export type QueryDistributionBucketFamilyMetadataByUniqueInputArgs = {
  where: DistributionBucketFamilyMetadataWhereUniqueInput
}

export type QueryDistributionBucketFamilyMetadataConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketFamilyMetadataOrderByInput>>
  where?: Maybe<DistributionBucketFamilyMetadataWhereInput>
}

export type QueryDistributionBucketOperatorByUniqueInputArgs = {
  where: DistributionBucketOperatorWhereUniqueInput
}

export type QueryDistributionBucketOperatorMetadataArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketOperatorMetadataOrderByInput>>
  where?: Maybe<DistributionBucketOperatorMetadataWhereInput>
}

export type QueryDistributionBucketOperatorMetadataByUniqueInputArgs = {
  where: DistributionBucketOperatorMetadataWhereUniqueInput
}

export type QueryDistributionBucketOperatorMetadataConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketOperatorMetadataOrderByInput>>
  where?: Maybe<DistributionBucketOperatorMetadataWhereInput>
}

export type QueryDistributionBucketOperatorsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketOperatorOrderByInput>>
  where?: Maybe<DistributionBucketOperatorWhereInput>
}

export type QueryDistributionBucketOperatorsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketOperatorOrderByInput>>
  where?: Maybe<DistributionBucketOperatorWhereInput>
}

export type QueryDistributionBucketsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketOrderByInput>>
  where?: Maybe<DistributionBucketWhereInput>
}

export type QueryDistributionBucketsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<DistributionBucketOrderByInput>>
  where?: Maybe<DistributionBucketWhereInput>
}

export type QueryElectedCouncilByUniqueInputArgs = {
  where: ElectedCouncilWhereUniqueInput
}

export type QueryElectedCouncilsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ElectedCouncilOrderByInput>>
  where?: Maybe<ElectedCouncilWhereInput>
}

export type QueryElectedCouncilsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ElectedCouncilOrderByInput>>
  where?: Maybe<ElectedCouncilWhereInput>
}

export type QueryElectionRoundByUniqueInputArgs = {
  where: ElectionRoundWhereUniqueInput
}

export type QueryElectionRoundsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ElectionRoundOrderByInput>>
  where?: Maybe<ElectionRoundWhereInput>
}

export type QueryElectionRoundsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ElectionRoundOrderByInput>>
  where?: Maybe<ElectionRoundWhereInput>
}

export type QueryEnglishAuctionSettledEventByUniqueInputArgs = {
  where: EnglishAuctionSettledEventWhereUniqueInput
}

export type QueryEnglishAuctionSettledEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<EnglishAuctionSettledEventOrderByInput>>
  where?: Maybe<EnglishAuctionSettledEventWhereInput>
}

export type QueryEnglishAuctionSettledEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<EnglishAuctionSettledEventOrderByInput>>
  where?: Maybe<EnglishAuctionSettledEventWhereInput>
}

export type QueryEnglishAuctionStartedEventByUniqueInputArgs = {
  where: EnglishAuctionStartedEventWhereUniqueInput
}

export type QueryEnglishAuctionStartedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<EnglishAuctionStartedEventOrderByInput>>
  where?: Maybe<EnglishAuctionStartedEventWhereInput>
}

export type QueryEnglishAuctionStartedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<EnglishAuctionStartedEventOrderByInput>>
  where?: Maybe<EnglishAuctionStartedEventWhereInput>
}

export type QueryEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<EventOrderByInput>>
  where?: Maybe<EventWhereInput>
}

export type QueryForumCategoriesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ForumCategoryOrderByInput>>
  where?: Maybe<ForumCategoryWhereInput>
}

export type QueryForumCategoriesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ForumCategoryOrderByInput>>
  where?: Maybe<ForumCategoryWhereInput>
}

export type QueryForumCategoryByUniqueInputArgs = {
  where: ForumCategoryWhereUniqueInput
}

export type QueryForumPostByUniqueInputArgs = {
  where: ForumPostWhereUniqueInput
}

export type QueryForumPostsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ForumPostOrderByInput>>
  where?: Maybe<ForumPostWhereInput>
}

export type QueryForumPostsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ForumPostOrderByInput>>
  where?: Maybe<ForumPostWhereInput>
}

export type QueryForumThreadByUniqueInputArgs = {
  where: ForumThreadWhereUniqueInput
}

export type QueryForumThreadTagByUniqueInputArgs = {
  where: ForumThreadTagWhereUniqueInput
}

export type QueryForumThreadTagsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ForumThreadTagOrderByInput>>
  where?: Maybe<ForumThreadTagWhereInput>
}

export type QueryForumThreadTagsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ForumThreadTagOrderByInput>>
  where?: Maybe<ForumThreadTagWhereInput>
}

export type QueryForumThreadsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ForumThreadOrderByInput>>
  where?: Maybe<ForumThreadWhereInput>
}

export type QueryForumThreadsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ForumThreadOrderByInput>>
  where?: Maybe<ForumThreadWhereInput>
}

export type QueryFundingRequestDestinationByUniqueInputArgs = {
  where: FundingRequestDestinationWhereUniqueInput
}

export type QueryFundingRequestDestinationsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<FundingRequestDestinationOrderByInput>>
  where?: Maybe<FundingRequestDestinationWhereInput>
}

export type QueryFundingRequestDestinationsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<FundingRequestDestinationOrderByInput>>
  where?: Maybe<FundingRequestDestinationWhereInput>
}

export type QueryFundingRequestDestinationsListByUniqueInputArgs = {
  where: FundingRequestDestinationsListWhereUniqueInput
}

export type QueryFundingRequestDestinationsListsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<FundingRequestDestinationsListOrderByInput>>
  where?: Maybe<FundingRequestDestinationsListWhereInput>
}

export type QueryFundingRequestDestinationsListsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<FundingRequestDestinationsListOrderByInput>>
  where?: Maybe<FundingRequestDestinationsListWhereInput>
}

export type QueryGeoCoordinatesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<GeoCoordinatesOrderByInput>>
  where?: Maybe<GeoCoordinatesWhereInput>
}

export type QueryGeoCoordinatesByUniqueInputArgs = {
  where: GeoCoordinatesWhereUniqueInput
}

export type QueryGeoCoordinatesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<GeoCoordinatesOrderByInput>>
  where?: Maybe<GeoCoordinatesWhereInput>
}

export type QueryInitialInvitationBalanceUpdatedEventByUniqueInputArgs = {
  where: InitialInvitationBalanceUpdatedEventWhereUniqueInput
}

export type QueryInitialInvitationBalanceUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<InitialInvitationBalanceUpdatedEventOrderByInput>>
  where?: Maybe<InitialInvitationBalanceUpdatedEventWhereInput>
}

export type QueryInitialInvitationBalanceUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<InitialInvitationBalanceUpdatedEventOrderByInput>>
  where?: Maybe<InitialInvitationBalanceUpdatedEventWhereInput>
}

export type QueryInitialInvitationCountUpdatedEventByUniqueInputArgs = {
  where: InitialInvitationCountUpdatedEventWhereUniqueInput
}

export type QueryInitialInvitationCountUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<InitialInvitationCountUpdatedEventOrderByInput>>
  where?: Maybe<InitialInvitationCountUpdatedEventWhereInput>
}

export type QueryInitialInvitationCountUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<InitialInvitationCountUpdatedEventOrderByInput>>
  where?: Maybe<InitialInvitationCountUpdatedEventWhereInput>
}

export type QueryInvitesTransferredEventByUniqueInputArgs = {
  where: InvitesTransferredEventWhereUniqueInput
}

export type QueryInvitesTransferredEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<InvitesTransferredEventOrderByInput>>
  where?: Maybe<InvitesTransferredEventWhereInput>
}

export type QueryInvitesTransferredEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<InvitesTransferredEventOrderByInput>>
  where?: Maybe<InvitesTransferredEventWhereInput>
}

export type QueryLanguageByUniqueInputArgs = {
  where: LanguageWhereUniqueInput
}

export type QueryLanguagesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LanguageOrderByInput>>
  where?: Maybe<LanguageWhereInput>
}

export type QueryLanguagesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LanguageOrderByInput>>
  where?: Maybe<LanguageWhereInput>
}

export type QueryLeaderInvitationQuotaUpdatedEventByUniqueInputArgs = {
  where: LeaderInvitationQuotaUpdatedEventWhereUniqueInput
}

export type QueryLeaderInvitationQuotaUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LeaderInvitationQuotaUpdatedEventOrderByInput>>
  where?: Maybe<LeaderInvitationQuotaUpdatedEventWhereInput>
}

export type QueryLeaderInvitationQuotaUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LeaderInvitationQuotaUpdatedEventOrderByInput>>
  where?: Maybe<LeaderInvitationQuotaUpdatedEventWhereInput>
}

export type QueryLeaderSetEventByUniqueInputArgs = {
  where: LeaderSetEventWhereUniqueInput
}

export type QueryLeaderSetEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LeaderSetEventOrderByInput>>
  where?: Maybe<LeaderSetEventWhereInput>
}

export type QueryLeaderSetEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LeaderSetEventOrderByInput>>
  where?: Maybe<LeaderSetEventWhereInput>
}

export type QueryLeaderUnsetEventByUniqueInputArgs = {
  where: LeaderUnsetEventWhereUniqueInput
}

export type QueryLeaderUnsetEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LeaderUnsetEventOrderByInput>>
  where?: Maybe<LeaderUnsetEventWhereInput>
}

export type QueryLeaderUnsetEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LeaderUnsetEventOrderByInput>>
  where?: Maybe<LeaderUnsetEventWhereInput>
}

export type QueryLicenseByUniqueInputArgs = {
  where: LicenseWhereUniqueInput
}

export type QueryLicensesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LicenseOrderByInput>>
  where?: Maybe<LicenseWhereInput>
}

export type QueryLicensesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<LicenseOrderByInput>>
  where?: Maybe<LicenseWhereInput>
}

export type QueryMemberAccountsUpdatedEventByUniqueInputArgs = {
  where: MemberAccountsUpdatedEventWhereUniqueInput
}

export type QueryMemberAccountsUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberAccountsUpdatedEventOrderByInput>>
  where?: Maybe<MemberAccountsUpdatedEventWhereInput>
}

export type QueryMemberAccountsUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberAccountsUpdatedEventOrderByInput>>
  where?: Maybe<MemberAccountsUpdatedEventWhereInput>
}

export type QueryMemberBannedFromChannelEventByUniqueInputArgs = {
  where: MemberBannedFromChannelEventWhereUniqueInput
}

export type QueryMemberBannedFromChannelEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberBannedFromChannelEventOrderByInput>>
  where?: Maybe<MemberBannedFromChannelEventWhereInput>
}

export type QueryMemberBannedFromChannelEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberBannedFromChannelEventOrderByInput>>
  where?: Maybe<MemberBannedFromChannelEventWhereInput>
}

export type QueryMemberCreatedEventByUniqueInputArgs = {
  where: MemberCreatedEventWhereUniqueInput
}

export type QueryMemberCreatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberCreatedEventOrderByInput>>
  where?: Maybe<MemberCreatedEventWhereInput>
}

export type QueryMemberCreatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberCreatedEventOrderByInput>>
  where?: Maybe<MemberCreatedEventWhereInput>
}

export type QueryMemberInvitedEventByUniqueInputArgs = {
  where: MemberInvitedEventWhereUniqueInput
}

export type QueryMemberInvitedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberInvitedEventOrderByInput>>
  where?: Maybe<MemberInvitedEventWhereInput>
}

export type QueryMemberInvitedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberInvitedEventOrderByInput>>
  where?: Maybe<MemberInvitedEventWhereInput>
}

export type QueryMemberMetadataArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberMetadataOrderByInput>>
  where?: Maybe<MemberMetadataWhereInput>
}

export type QueryMemberMetadataByUniqueInputArgs = {
  where: MemberMetadataWhereUniqueInput
}

export type QueryMemberMetadataConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberMetadataOrderByInput>>
  where?: Maybe<MemberMetadataWhereInput>
}

export type QueryMemberProfileUpdatedEventByUniqueInputArgs = {
  where: MemberProfileUpdatedEventWhereUniqueInput
}

export type QueryMemberProfileUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberProfileUpdatedEventOrderByInput>>
  where?: Maybe<MemberProfileUpdatedEventWhereInput>
}

export type QueryMemberProfileUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberProfileUpdatedEventOrderByInput>>
  where?: Maybe<MemberProfileUpdatedEventWhereInput>
}

export type QueryMemberVerificationStatusUpdatedEventByUniqueInputArgs = {
  where: MemberVerificationStatusUpdatedEventWhereUniqueInput
}

export type QueryMemberVerificationStatusUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberVerificationStatusUpdatedEventOrderByInput>>
  where?: Maybe<MemberVerificationStatusUpdatedEventWhereInput>
}

export type QueryMemberVerificationStatusUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MemberVerificationStatusUpdatedEventOrderByInput>>
  where?: Maybe<MemberVerificationStatusUpdatedEventWhereInput>
}

export type QueryMembersByHandleArgs = {
  limit?: Maybe<Scalars['Int']>
  skip?: Maybe<Scalars['Int']>
  text: Scalars['String']
  whereMembership?: Maybe<MembershipWhereInput>
}

export type QueryMembershipBoughtEventByUniqueInputArgs = {
  where: MembershipBoughtEventWhereUniqueInput
}

export type QueryMembershipBoughtEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipBoughtEventOrderByInput>>
  where?: Maybe<MembershipBoughtEventWhereInput>
}

export type QueryMembershipBoughtEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipBoughtEventOrderByInput>>
  where?: Maybe<MembershipBoughtEventWhereInput>
}

export type QueryMembershipByUniqueInputArgs = {
  where: MembershipWhereUniqueInput
}

export type QueryMembershipExternalResourceByUniqueInputArgs = {
  where: MembershipExternalResourceWhereUniqueInput
}

export type QueryMembershipExternalResourcesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipExternalResourceOrderByInput>>
  where?: Maybe<MembershipExternalResourceWhereInput>
}

export type QueryMembershipExternalResourcesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipExternalResourceOrderByInput>>
  where?: Maybe<MembershipExternalResourceWhereInput>
}

export type QueryMembershipGiftedEventByUniqueInputArgs = {
  where: MembershipGiftedEventWhereUniqueInput
}

export type QueryMembershipGiftedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipGiftedEventOrderByInput>>
  where?: Maybe<MembershipGiftedEventWhereInput>
}

export type QueryMembershipGiftedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipGiftedEventOrderByInput>>
  where?: Maybe<MembershipGiftedEventWhereInput>
}

export type QueryMembershipPriceUpdatedEventByUniqueInputArgs = {
  where: MembershipPriceUpdatedEventWhereUniqueInput
}

export type QueryMembershipPriceUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipPriceUpdatedEventOrderByInput>>
  where?: Maybe<MembershipPriceUpdatedEventWhereInput>
}

export type QueryMembershipPriceUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipPriceUpdatedEventOrderByInput>>
  where?: Maybe<MembershipPriceUpdatedEventWhereInput>
}

export type QueryMembershipsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipOrderByInput>>
  where?: Maybe<MembershipWhereInput>
}

export type QueryMembershipsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MembershipOrderByInput>>
  where?: Maybe<MembershipWhereInput>
}

export type QueryMetaprotocolTransactionStatusEventByUniqueInputArgs = {
  where: MetaprotocolTransactionStatusEventWhereUniqueInput
}

export type QueryMetaprotocolTransactionStatusEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MetaprotocolTransactionStatusEventOrderByInput>>
  where?: Maybe<MetaprotocolTransactionStatusEventWhereInput>
}

export type QueryMetaprotocolTransactionStatusEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<MetaprotocolTransactionStatusEventOrderByInput>>
  where?: Maybe<MetaprotocolTransactionStatusEventWhereInput>
}

export type QueryMostFollowedChannelsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  limit: Scalars['Int']
  orderBy?: Maybe<Array<ChannelOrderByInput>>
  periodDays?: Maybe<Scalars['Int']>
  where?: Maybe<ChannelWhereInput>
}

export type QueryMostViewedCategoriesArgs = {
  limit?: Maybe<Scalars['Int']>
  timePeriodDays: Scalars['Int']
}

export type QueryMostViewedCategoriesAllTimeArgs = {
  limit: Scalars['Int']
}

export type QueryMostViewedChannelsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  limit: Scalars['Int']
  orderBy?: Maybe<Array<ChannelOrderByInput>>
  periodDays?: Maybe<Scalars['Int']>
  where?: Maybe<ChannelWhereInput>
}

export type QueryMostViewedVideosConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  limit: Scalars['Int']
  orderBy?: Maybe<Array<VideoOrderByInput>>
  periodDays?: Maybe<Scalars['Int']>
  where?: Maybe<VideoWhereInput>
}

export type QueryNewCandidateEventByUniqueInputArgs = {
  where: NewCandidateEventWhereUniqueInput
}

export type QueryNewCandidateEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NewCandidateEventOrderByInput>>
  where?: Maybe<NewCandidateEventWhereInput>
}

export type QueryNewCandidateEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NewCandidateEventOrderByInput>>
  where?: Maybe<NewCandidateEventWhereInput>
}

export type QueryNewCouncilElectedEventByUniqueInputArgs = {
  where: NewCouncilElectedEventWhereUniqueInput
}

export type QueryNewCouncilElectedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NewCouncilElectedEventOrderByInput>>
  where?: Maybe<NewCouncilElectedEventWhereInput>
}

export type QueryNewCouncilElectedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NewCouncilElectedEventOrderByInput>>
  where?: Maybe<NewCouncilElectedEventWhereInput>
}

export type QueryNewCouncilNotElectedEventByUniqueInputArgs = {
  where: NewCouncilNotElectedEventWhereUniqueInput
}

export type QueryNewCouncilNotElectedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NewCouncilNotElectedEventOrderByInput>>
  where?: Maybe<NewCouncilNotElectedEventWhereInput>
}

export type QueryNewCouncilNotElectedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NewCouncilNotElectedEventOrderByInput>>
  where?: Maybe<NewCouncilNotElectedEventWhereInput>
}

export type QueryNewMissedRewardLevelReachedEventByUniqueInputArgs = {
  where: NewMissedRewardLevelReachedEventWhereUniqueInput
}

export type QueryNewMissedRewardLevelReachedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NewMissedRewardLevelReachedEventOrderByInput>>
  where?: Maybe<NewMissedRewardLevelReachedEventWhereInput>
}

export type QueryNewMissedRewardLevelReachedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NewMissedRewardLevelReachedEventOrderByInput>>
  where?: Maybe<NewMissedRewardLevelReachedEventWhereInput>
}

export type QueryNftBoughtEventByUniqueInputArgs = {
  where: NftBoughtEventWhereUniqueInput
}

export type QueryNftBoughtEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NftBoughtEventOrderByInput>>
  where?: Maybe<NftBoughtEventWhereInput>
}

export type QueryNftBoughtEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NftBoughtEventOrderByInput>>
  where?: Maybe<NftBoughtEventWhereInput>
}

export type QueryNftIssuedEventByUniqueInputArgs = {
  where: NftIssuedEventWhereUniqueInput
}

export type QueryNftIssuedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NftIssuedEventOrderByInput>>
  where?: Maybe<NftIssuedEventWhereInput>
}

export type QueryNftIssuedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NftIssuedEventOrderByInput>>
  where?: Maybe<NftIssuedEventWhereInput>
}

export type QueryNftSellOrderMadeEventByUniqueInputArgs = {
  where: NftSellOrderMadeEventWhereUniqueInput
}

export type QueryNftSellOrderMadeEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NftSellOrderMadeEventOrderByInput>>
  where?: Maybe<NftSellOrderMadeEventWhereInput>
}

export type QueryNftSellOrderMadeEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NftSellOrderMadeEventOrderByInput>>
  where?: Maybe<NftSellOrderMadeEventWhereInput>
}

export type QueryNftSlingedBackToTheOriginalArtistEventByUniqueInputArgs = {
  where: NftSlingedBackToTheOriginalArtistEventWhereUniqueInput
}

export type QueryNftSlingedBackToTheOriginalArtistEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NftSlingedBackToTheOriginalArtistEventOrderByInput>>
  where?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
}

export type QueryNftSlingedBackToTheOriginalArtistEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NftSlingedBackToTheOriginalArtistEventOrderByInput>>
  where?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
}

export type QueryNodeLocationMetadataArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NodeLocationMetadataOrderByInput>>
  where?: Maybe<NodeLocationMetadataWhereInput>
}

export type QueryNodeLocationMetadataByUniqueInputArgs = {
  where: NodeLocationMetadataWhereUniqueInput
}

export type QueryNodeLocationMetadataConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NodeLocationMetadataOrderByInput>>
  where?: Maybe<NodeLocationMetadataWhereInput>
}

export type QueryNotEnoughCandidatesEventByUniqueInputArgs = {
  where: NotEnoughCandidatesEventWhereUniqueInput
}

export type QueryNotEnoughCandidatesEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NotEnoughCandidatesEventOrderByInput>>
  where?: Maybe<NotEnoughCandidatesEventWhereInput>
}

export type QueryNotEnoughCandidatesEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<NotEnoughCandidatesEventOrderByInput>>
  where?: Maybe<NotEnoughCandidatesEventWhereInput>
}

export type QueryOfferAcceptedEventByUniqueInputArgs = {
  where: OfferAcceptedEventWhereUniqueInput
}

export type QueryOfferAcceptedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OfferAcceptedEventOrderByInput>>
  where?: Maybe<OfferAcceptedEventWhereInput>
}

export type QueryOfferAcceptedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OfferAcceptedEventOrderByInput>>
  where?: Maybe<OfferAcceptedEventWhereInput>
}

export type QueryOfferCanceledEventByUniqueInputArgs = {
  where: OfferCanceledEventWhereUniqueInput
}

export type QueryOfferCanceledEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OfferCanceledEventOrderByInput>>
  where?: Maybe<OfferCanceledEventWhereInput>
}

export type QueryOfferCanceledEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OfferCanceledEventOrderByInput>>
  where?: Maybe<OfferCanceledEventWhereInput>
}

export type QueryOfferStartedEventByUniqueInputArgs = {
  where: OfferStartedEventWhereUniqueInput
}

export type QueryOfferStartedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OfferStartedEventOrderByInput>>
  where?: Maybe<OfferStartedEventWhereInput>
}

export type QueryOfferStartedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OfferStartedEventOrderByInput>>
  where?: Maybe<OfferStartedEventWhereInput>
}

export type QueryOpenAuctionBidAcceptedEventByUniqueInputArgs = {
  where: OpenAuctionBidAcceptedEventWhereUniqueInput
}

export type QueryOpenAuctionBidAcceptedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpenAuctionBidAcceptedEventOrderByInput>>
  where?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
}

export type QueryOpenAuctionBidAcceptedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpenAuctionBidAcceptedEventOrderByInput>>
  where?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
}

export type QueryOpenAuctionStartedEventByUniqueInputArgs = {
  where: OpenAuctionStartedEventWhereUniqueInput
}

export type QueryOpenAuctionStartedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpenAuctionStartedEventOrderByInput>>
  where?: Maybe<OpenAuctionStartedEventWhereInput>
}

export type QueryOpenAuctionStartedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpenAuctionStartedEventOrderByInput>>
  where?: Maybe<OpenAuctionStartedEventWhereInput>
}

export type QueryOpeningAddedEventByUniqueInputArgs = {
  where: OpeningAddedEventWhereUniqueInput
}

export type QueryOpeningAddedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpeningAddedEventOrderByInput>>
  where?: Maybe<OpeningAddedEventWhereInput>
}

export type QueryOpeningAddedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpeningAddedEventOrderByInput>>
  where?: Maybe<OpeningAddedEventWhereInput>
}

export type QueryOpeningCanceledEventByUniqueInputArgs = {
  where: OpeningCanceledEventWhereUniqueInput
}

export type QueryOpeningCanceledEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpeningCanceledEventOrderByInput>>
  where?: Maybe<OpeningCanceledEventWhereInput>
}

export type QueryOpeningCanceledEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpeningCanceledEventOrderByInput>>
  where?: Maybe<OpeningCanceledEventWhereInput>
}

export type QueryOpeningFilledEventByUniqueInputArgs = {
  where: OpeningFilledEventWhereUniqueInput
}

export type QueryOpeningFilledEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpeningFilledEventOrderByInput>>
  where?: Maybe<OpeningFilledEventWhereInput>
}

export type QueryOpeningFilledEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OpeningFilledEventOrderByInput>>
  where?: Maybe<OpeningFilledEventWhereInput>
}

export type QueryOracleJudgmentSubmittedEventByUniqueInputArgs = {
  where: OracleJudgmentSubmittedEventWhereUniqueInput
}

export type QueryOracleJudgmentSubmittedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OracleJudgmentSubmittedEventOrderByInput>>
  where?: Maybe<OracleJudgmentSubmittedEventWhereInput>
}

export type QueryOracleJudgmentSubmittedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OracleJudgmentSubmittedEventOrderByInput>>
  where?: Maybe<OracleJudgmentSubmittedEventWhereInput>
}

export type QueryOwnedNftByUniqueInputArgs = {
  where: OwnedNftWhereUniqueInput
}

export type QueryOwnedNftsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OwnedNftOrderByInput>>
  where?: Maybe<OwnedNftWhereInput>
}

export type QueryOwnedNftsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<OwnedNftOrderByInput>>
  where?: Maybe<OwnedNftWhereInput>
}

export type QueryPopularChannelsArgs = {
  where?: Maybe<ChannelWhereInput>
}

export type QueryPostAddedEventByUniqueInputArgs = {
  where: PostAddedEventWhereUniqueInput
}

export type QueryPostAddedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<PostAddedEventOrderByInput>>
  where?: Maybe<PostAddedEventWhereInput>
}

export type QueryPostAddedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<PostAddedEventOrderByInput>>
  where?: Maybe<PostAddedEventWhereInput>
}

export type QueryPostDeletedEventByUniqueInputArgs = {
  where: PostDeletedEventWhereUniqueInput
}

export type QueryPostDeletedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<PostDeletedEventOrderByInput>>
  where?: Maybe<PostDeletedEventWhereInput>
}

export type QueryPostDeletedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<PostDeletedEventOrderByInput>>
  where?: Maybe<PostDeletedEventWhereInput>
}

export type QueryPostModeratedEventByUniqueInputArgs = {
  where: PostModeratedEventWhereUniqueInput
}

export type QueryPostModeratedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<PostModeratedEventOrderByInput>>
  where?: Maybe<PostModeratedEventWhereInput>
}

export type QueryPostModeratedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<PostModeratedEventOrderByInput>>
  where?: Maybe<PostModeratedEventWhereInput>
}

export type QueryPostTextUpdatedEventByUniqueInputArgs = {
  where: PostTextUpdatedEventWhereUniqueInput
}

export type QueryPostTextUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<PostTextUpdatedEventOrderByInput>>
  where?: Maybe<PostTextUpdatedEventWhereInput>
}

export type QueryPostTextUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<PostTextUpdatedEventOrderByInput>>
  where?: Maybe<PostTextUpdatedEventWhereInput>
}

export type QueryPostsByTextArgs = {
  limit?: Maybe<Scalars['Int']>
  skip?: Maybe<Scalars['Int']>
  text: Scalars['String']
  whereForumPost?: Maybe<ForumPostWhereInput>
}

export type QueryPromisingChannelsArgs = {
  where?: Maybe<ChannelWhereInput>
}

export type QueryProposalByUniqueInputArgs = {
  where: ProposalWhereUniqueInput
}

export type QueryProposalCancelledEventByUniqueInputArgs = {
  where: ProposalCancelledEventWhereUniqueInput
}

export type QueryProposalCancelledEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalCancelledEventOrderByInput>>
  where?: Maybe<ProposalCancelledEventWhereInput>
}

export type QueryProposalCancelledEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalCancelledEventOrderByInput>>
  where?: Maybe<ProposalCancelledEventWhereInput>
}

export type QueryProposalCreatedEventByUniqueInputArgs = {
  where: ProposalCreatedEventWhereUniqueInput
}

export type QueryProposalCreatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalCreatedEventOrderByInput>>
  where?: Maybe<ProposalCreatedEventWhereInput>
}

export type QueryProposalCreatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalCreatedEventOrderByInput>>
  where?: Maybe<ProposalCreatedEventWhereInput>
}

export type QueryProposalDecisionMadeEventByUniqueInputArgs = {
  where: ProposalDecisionMadeEventWhereUniqueInput
}

export type QueryProposalDecisionMadeEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDecisionMadeEventOrderByInput>>
  where?: Maybe<ProposalDecisionMadeEventWhereInput>
}

export type QueryProposalDecisionMadeEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDecisionMadeEventOrderByInput>>
  where?: Maybe<ProposalDecisionMadeEventWhereInput>
}

export type QueryProposalDiscussionPostByUniqueInputArgs = {
  where: ProposalDiscussionPostWhereUniqueInput
}

export type QueryProposalDiscussionPostCreatedEventByUniqueInputArgs = {
  where: ProposalDiscussionPostCreatedEventWhereUniqueInput
}

export type QueryProposalDiscussionPostCreatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionPostCreatedEventOrderByInput>>
  where?: Maybe<ProposalDiscussionPostCreatedEventWhereInput>
}

export type QueryProposalDiscussionPostCreatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionPostCreatedEventOrderByInput>>
  where?: Maybe<ProposalDiscussionPostCreatedEventWhereInput>
}

export type QueryProposalDiscussionPostDeletedEventByUniqueInputArgs = {
  where: ProposalDiscussionPostDeletedEventWhereUniqueInput
}

export type QueryProposalDiscussionPostDeletedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionPostDeletedEventOrderByInput>>
  where?: Maybe<ProposalDiscussionPostDeletedEventWhereInput>
}

export type QueryProposalDiscussionPostDeletedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionPostDeletedEventOrderByInput>>
  where?: Maybe<ProposalDiscussionPostDeletedEventWhereInput>
}

export type QueryProposalDiscussionPostUpdatedEventByUniqueInputArgs = {
  where: ProposalDiscussionPostUpdatedEventWhereUniqueInput
}

export type QueryProposalDiscussionPostUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionPostUpdatedEventOrderByInput>>
  where?: Maybe<ProposalDiscussionPostUpdatedEventWhereInput>
}

export type QueryProposalDiscussionPostUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionPostUpdatedEventOrderByInput>>
  where?: Maybe<ProposalDiscussionPostUpdatedEventWhereInput>
}

export type QueryProposalDiscussionPostsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionPostOrderByInput>>
  where?: Maybe<ProposalDiscussionPostWhereInput>
}

export type QueryProposalDiscussionPostsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionPostOrderByInput>>
  where?: Maybe<ProposalDiscussionPostWhereInput>
}

export type QueryProposalDiscussionThreadByUniqueInputArgs = {
  where: ProposalDiscussionThreadWhereUniqueInput
}

export type QueryProposalDiscussionThreadModeChangedEventByUniqueInputArgs = {
  where: ProposalDiscussionThreadModeChangedEventWhereUniqueInput
}

export type QueryProposalDiscussionThreadModeChangedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionThreadModeChangedEventOrderByInput>>
  where?: Maybe<ProposalDiscussionThreadModeChangedEventWhereInput>
}

export type QueryProposalDiscussionThreadModeChangedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionThreadModeChangedEventOrderByInput>>
  where?: Maybe<ProposalDiscussionThreadModeChangedEventWhereInput>
}

export type QueryProposalDiscussionThreadsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionThreadOrderByInput>>
  where?: Maybe<ProposalDiscussionThreadWhereInput>
}

export type QueryProposalDiscussionThreadsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionThreadOrderByInput>>
  where?: Maybe<ProposalDiscussionThreadWhereInput>
}

export type QueryProposalDiscussionWhitelistByUniqueInputArgs = {
  where: ProposalDiscussionWhitelistWhereUniqueInput
}

export type QueryProposalDiscussionWhitelistsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionWhitelistOrderByInput>>
  where?: Maybe<ProposalDiscussionWhitelistWhereInput>
}

export type QueryProposalDiscussionWhitelistsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalDiscussionWhitelistOrderByInput>>
  where?: Maybe<ProposalDiscussionWhitelistWhereInput>
}

export type QueryProposalExecutedEventByUniqueInputArgs = {
  where: ProposalExecutedEventWhereUniqueInput
}

export type QueryProposalExecutedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalExecutedEventOrderByInput>>
  where?: Maybe<ProposalExecutedEventWhereInput>
}

export type QueryProposalExecutedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalExecutedEventOrderByInput>>
  where?: Maybe<ProposalExecutedEventWhereInput>
}

export type QueryProposalStatusUpdatedEventByUniqueInputArgs = {
  where: ProposalStatusUpdatedEventWhereUniqueInput
}

export type QueryProposalStatusUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalStatusUpdatedEventOrderByInput>>
  where?: Maybe<ProposalStatusUpdatedEventWhereInput>
}

export type QueryProposalStatusUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalStatusUpdatedEventOrderByInput>>
  where?: Maybe<ProposalStatusUpdatedEventWhereInput>
}

export type QueryProposalVotedEventByUniqueInputArgs = {
  where: ProposalVotedEventWhereUniqueInput
}

export type QueryProposalVotedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalVotedEventOrderByInput>>
  where?: Maybe<ProposalVotedEventWhereInput>
}

export type QueryProposalVotedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalVotedEventOrderByInput>>
  where?: Maybe<ProposalVotedEventWhereInput>
}

export type QueryProposalsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalOrderByInput>>
  where?: Maybe<ProposalWhereInput>
}

export type QueryProposalsByTitleArgs = {
  limit?: Maybe<Scalars['Int']>
  skip?: Maybe<Scalars['Int']>
  text: Scalars['String']
  whereProposal?: Maybe<ProposalWhereInput>
}

export type QueryProposalsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ProposalOrderByInput>>
  where?: Maybe<ProposalWhereInput>
}

export type QueryReferendumFinishedEventByUniqueInputArgs = {
  where: ReferendumFinishedEventWhereUniqueInput
}

export type QueryReferendumFinishedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumFinishedEventOrderByInput>>
  where?: Maybe<ReferendumFinishedEventWhereInput>
}

export type QueryReferendumFinishedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumFinishedEventOrderByInput>>
  where?: Maybe<ReferendumFinishedEventWhereInput>
}

export type QueryReferendumStageRevealingByUniqueInputArgs = {
  where: ReferendumStageRevealingWhereUniqueInput
}

export type QueryReferendumStageRevealingsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumStageRevealingOrderByInput>>
  where?: Maybe<ReferendumStageRevealingWhereInput>
}

export type QueryReferendumStageRevealingsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumStageRevealingOrderByInput>>
  where?: Maybe<ReferendumStageRevealingWhereInput>
}

export type QueryReferendumStageVotingByUniqueInputArgs = {
  where: ReferendumStageVotingWhereUniqueInput
}

export type QueryReferendumStageVotingsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumStageVotingOrderByInput>>
  where?: Maybe<ReferendumStageVotingWhereInput>
}

export type QueryReferendumStageVotingsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumStageVotingOrderByInput>>
  where?: Maybe<ReferendumStageVotingWhereInput>
}

export type QueryReferendumStartedEventByUniqueInputArgs = {
  where: ReferendumStartedEventWhereUniqueInput
}

export type QueryReferendumStartedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumStartedEventOrderByInput>>
  where?: Maybe<ReferendumStartedEventWhereInput>
}

export type QueryReferendumStartedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumStartedEventOrderByInput>>
  where?: Maybe<ReferendumStartedEventWhereInput>
}

export type QueryReferendumStartedForcefullyEventByUniqueInputArgs = {
  where: ReferendumStartedForcefullyEventWhereUniqueInput
}

export type QueryReferendumStartedForcefullyEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumStartedForcefullyEventOrderByInput>>
  where?: Maybe<ReferendumStartedForcefullyEventWhereInput>
}

export type QueryReferendumStartedForcefullyEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferendumStartedForcefullyEventOrderByInput>>
  where?: Maybe<ReferendumStartedForcefullyEventWhereInput>
}

export type QueryReferralCutUpdatedEventByUniqueInputArgs = {
  where: ReferralCutUpdatedEventWhereUniqueInput
}

export type QueryReferralCutUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferralCutUpdatedEventOrderByInput>>
  where?: Maybe<ReferralCutUpdatedEventWhereInput>
}

export type QueryReferralCutUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ReferralCutUpdatedEventOrderByInput>>
  where?: Maybe<ReferralCutUpdatedEventWhereInput>
}

export type QueryReportedChannelsArgs = {
  limit?: Maybe<Scalars['Int']>
  orderBy?: Maybe<ChannelReportOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<ChannelReportsWhereInput>
}

export type QueryReportedVideosArgs = {
  limit?: Maybe<Scalars['Int']>
  orderBy?: Maybe<VideoReportOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<VideoReportsWhereInput>
}

export type QueryRequestFundedEventByUniqueInputArgs = {
  where: RequestFundedEventWhereUniqueInput
}

export type QueryRequestFundedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RequestFundedEventOrderByInput>>
  where?: Maybe<RequestFundedEventWhereInput>
}

export type QueryRequestFundedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RequestFundedEventOrderByInput>>
  where?: Maybe<RequestFundedEventWhereInput>
}

export type QueryRevealingStageStartedEventByUniqueInputArgs = {
  where: RevealingStageStartedEventWhereUniqueInput
}

export type QueryRevealingStageStartedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RevealingStageStartedEventOrderByInput>>
  where?: Maybe<RevealingStageStartedEventWhereInput>
}

export type QueryRevealingStageStartedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RevealingStageStartedEventOrderByInput>>
  where?: Maybe<RevealingStageStartedEventWhereInput>
}

export type QueryRewardPaidEventByUniqueInputArgs = {
  where: RewardPaidEventWhereUniqueInput
}

export type QueryRewardPaidEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RewardPaidEventOrderByInput>>
  where?: Maybe<RewardPaidEventWhereInput>
}

export type QueryRewardPaidEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RewardPaidEventOrderByInput>>
  where?: Maybe<RewardPaidEventWhereInput>
}

export type QueryRewardPaymentEventByUniqueInputArgs = {
  where: RewardPaymentEventWhereUniqueInput
}

export type QueryRewardPaymentEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RewardPaymentEventOrderByInput>>
  where?: Maybe<RewardPaymentEventWhereInput>
}

export type QueryRewardPaymentEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RewardPaymentEventOrderByInput>>
  where?: Maybe<RewardPaymentEventWhereInput>
}

export type QueryRuntimeWasmBytecodeByUniqueInputArgs = {
  where: RuntimeWasmBytecodeWhereUniqueInput
}

export type QueryRuntimeWasmBytecodesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RuntimeWasmBytecodeOrderByInput>>
  where?: Maybe<RuntimeWasmBytecodeWhereInput>
}

export type QueryRuntimeWasmBytecodesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<RuntimeWasmBytecodeOrderByInput>>
  where?: Maybe<RuntimeWasmBytecodeWhereInput>
}

export type QuerySearchArgs = {
  limit?: Maybe<Scalars['Int']>
  skip?: Maybe<Scalars['Int']>
  text: Scalars['String']
  whereChannel?: Maybe<ChannelWhereInput>
  whereVideo?: Maybe<VideoWhereInput>
}

export type QueryStakeDecreasedEventByUniqueInputArgs = {
  where: StakeDecreasedEventWhereUniqueInput
}

export type QueryStakeDecreasedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakeDecreasedEventOrderByInput>>
  where?: Maybe<StakeDecreasedEventWhereInput>
}

export type QueryStakeDecreasedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakeDecreasedEventOrderByInput>>
  where?: Maybe<StakeDecreasedEventWhereInput>
}

export type QueryStakeIncreasedEventByUniqueInputArgs = {
  where: StakeIncreasedEventWhereUniqueInput
}

export type QueryStakeIncreasedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakeIncreasedEventOrderByInput>>
  where?: Maybe<StakeIncreasedEventWhereInput>
}

export type QueryStakeIncreasedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakeIncreasedEventOrderByInput>>
  where?: Maybe<StakeIncreasedEventWhereInput>
}

export type QueryStakeReleasedEventByUniqueInputArgs = {
  where: StakeReleasedEventWhereUniqueInput
}

export type QueryStakeReleasedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakeReleasedEventOrderByInput>>
  where?: Maybe<StakeReleasedEventWhereInput>
}

export type QueryStakeReleasedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakeReleasedEventOrderByInput>>
  where?: Maybe<StakeReleasedEventWhereInput>
}

export type QueryStakeSlashedEventByUniqueInputArgs = {
  where: StakeSlashedEventWhereUniqueInput
}

export type QueryStakeSlashedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakeSlashedEventOrderByInput>>
  where?: Maybe<StakeSlashedEventWhereInput>
}

export type QueryStakeSlashedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakeSlashedEventOrderByInput>>
  where?: Maybe<StakeSlashedEventWhereInput>
}

export type QueryStakingAccountAddedEventByUniqueInputArgs = {
  where: StakingAccountAddedEventWhereUniqueInput
}

export type QueryStakingAccountAddedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakingAccountAddedEventOrderByInput>>
  where?: Maybe<StakingAccountAddedEventWhereInput>
}

export type QueryStakingAccountAddedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakingAccountAddedEventOrderByInput>>
  where?: Maybe<StakingAccountAddedEventWhereInput>
}

export type QueryStakingAccountConfirmedEventByUniqueInputArgs = {
  where: StakingAccountConfirmedEventWhereUniqueInput
}

export type QueryStakingAccountConfirmedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakingAccountConfirmedEventOrderByInput>>
  where?: Maybe<StakingAccountConfirmedEventWhereInput>
}

export type QueryStakingAccountConfirmedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakingAccountConfirmedEventOrderByInput>>
  where?: Maybe<StakingAccountConfirmedEventWhereInput>
}

export type QueryStakingAccountRemovedEventByUniqueInputArgs = {
  where: StakingAccountRemovedEventWhereUniqueInput
}

export type QueryStakingAccountRemovedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakingAccountRemovedEventOrderByInput>>
  where?: Maybe<StakingAccountRemovedEventWhereInput>
}

export type QueryStakingAccountRemovedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StakingAccountRemovedEventOrderByInput>>
  where?: Maybe<StakingAccountRemovedEventWhereInput>
}

export type QueryStatusTextChangedEventByUniqueInputArgs = {
  where: StatusTextChangedEventWhereUniqueInput
}

export type QueryStatusTextChangedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StatusTextChangedEventOrderByInput>>
  where?: Maybe<StatusTextChangedEventWhereInput>
}

export type QueryStatusTextChangedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StatusTextChangedEventOrderByInput>>
  where?: Maybe<StatusTextChangedEventWhereInput>
}

export type QueryStorageBagByUniqueInputArgs = {
  where: StorageBagWhereUniqueInput
}

export type QueryStorageBagsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StorageBagOrderByInput>>
  where?: Maybe<StorageBagWhereInput>
}

export type QueryStorageBagsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StorageBagOrderByInput>>
  where?: Maybe<StorageBagWhereInput>
}

export type QueryStorageBucketByUniqueInputArgs = {
  where: StorageBucketWhereUniqueInput
}

export type QueryStorageBucketOperatorMetadataArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StorageBucketOperatorMetadataOrderByInput>>
  where?: Maybe<StorageBucketOperatorMetadataWhereInput>
}

export type QueryStorageBucketOperatorMetadataByUniqueInputArgs = {
  where: StorageBucketOperatorMetadataWhereUniqueInput
}

export type QueryStorageBucketOperatorMetadataConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StorageBucketOperatorMetadataOrderByInput>>
  where?: Maybe<StorageBucketOperatorMetadataWhereInput>
}

export type QueryStorageBucketsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StorageBucketOrderByInput>>
  where?: Maybe<StorageBucketWhereInput>
}

export type QueryStorageBucketsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StorageBucketOrderByInput>>
  where?: Maybe<StorageBucketWhereInput>
}

export type QueryStorageDataObjectByUniqueInputArgs = {
  where: StorageDataObjectWhereUniqueInput
}

export type QueryStorageDataObjectsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StorageDataObjectOrderByInput>>
  where?: Maybe<StorageDataObjectWhereInput>
}

export type QueryStorageDataObjectsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<StorageDataObjectOrderByInput>>
  where?: Maybe<StorageDataObjectWhereInput>
}

export type QueryTerminatedLeaderEventByUniqueInputArgs = {
  where: TerminatedLeaderEventWhereUniqueInput
}

export type QueryTerminatedLeaderEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<TerminatedLeaderEventOrderByInput>>
  where?: Maybe<TerminatedLeaderEventWhereInput>
}

export type QueryTerminatedLeaderEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<TerminatedLeaderEventOrderByInput>>
  where?: Maybe<TerminatedLeaderEventWhereInput>
}

export type QueryTerminatedWorkerEventByUniqueInputArgs = {
  where: TerminatedWorkerEventWhereUniqueInput
}

export type QueryTerminatedWorkerEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<TerminatedWorkerEventOrderByInput>>
  where?: Maybe<TerminatedWorkerEventWhereInput>
}

export type QueryTerminatedWorkerEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<TerminatedWorkerEventOrderByInput>>
  where?: Maybe<TerminatedWorkerEventWhereInput>
}

export type QueryThreadCreatedEventByUniqueInputArgs = {
  where: ThreadCreatedEventWhereUniqueInput
}

export type QueryThreadCreatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadCreatedEventOrderByInput>>
  where?: Maybe<ThreadCreatedEventWhereInput>
}

export type QueryThreadCreatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadCreatedEventOrderByInput>>
  where?: Maybe<ThreadCreatedEventWhereInput>
}

export type QueryThreadDeletedEventByUniqueInputArgs = {
  where: ThreadDeletedEventWhereUniqueInput
}

export type QueryThreadDeletedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadDeletedEventOrderByInput>>
  where?: Maybe<ThreadDeletedEventWhereInput>
}

export type QueryThreadDeletedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadDeletedEventOrderByInput>>
  where?: Maybe<ThreadDeletedEventWhereInput>
}

export type QueryThreadMetadataUpdatedEventByUniqueInputArgs = {
  where: ThreadMetadataUpdatedEventWhereUniqueInput
}

export type QueryThreadMetadataUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadMetadataUpdatedEventOrderByInput>>
  where?: Maybe<ThreadMetadataUpdatedEventWhereInput>
}

export type QueryThreadMetadataUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadMetadataUpdatedEventOrderByInput>>
  where?: Maybe<ThreadMetadataUpdatedEventWhereInput>
}

export type QueryThreadModeratedEventByUniqueInputArgs = {
  where: ThreadModeratedEventWhereUniqueInput
}

export type QueryThreadModeratedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadModeratedEventOrderByInput>>
  where?: Maybe<ThreadModeratedEventWhereInput>
}

export type QueryThreadModeratedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadModeratedEventOrderByInput>>
  where?: Maybe<ThreadModeratedEventWhereInput>
}

export type QueryThreadMovedEventByUniqueInputArgs = {
  where: ThreadMovedEventWhereUniqueInput
}

export type QueryThreadMovedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadMovedEventOrderByInput>>
  where?: Maybe<ThreadMovedEventWhereInput>
}

export type QueryThreadMovedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<ThreadMovedEventOrderByInput>>
  where?: Maybe<ThreadMovedEventWhereInput>
}

export type QueryThreadsByTitleArgs = {
  limit?: Maybe<Scalars['Int']>
  skip?: Maybe<Scalars['Int']>
  text: Scalars['String']
  whereForumThread?: Maybe<ForumThreadWhereInput>
}

export type QueryTop10ChannelsArgs = {
  where?: Maybe<ChannelWhereInput>
}

export type QueryTop10VideosThisMonthArgs = {
  where?: Maybe<VideoWhereInput>
}

export type QueryTop10VideosThisWeekArgs = {
  where?: Maybe<VideoWhereInput>
}

export type QueryTransactionalStatusUpdateByUniqueInputArgs = {
  where: TransactionalStatusUpdateWhereUniqueInput
}

export type QueryTransactionalStatusUpdatesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<TransactionalStatusUpdateOrderByInput>>
  where?: Maybe<TransactionalStatusUpdateWhereInput>
}

export type QueryTransactionalStatusUpdatesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<TransactionalStatusUpdateOrderByInput>>
  where?: Maybe<TransactionalStatusUpdateWhereInput>
}

export type QueryUpcomingWorkingGroupOpeningByUniqueInputArgs = {
  where: UpcomingWorkingGroupOpeningWhereUniqueInput
}

export type QueryUpcomingWorkingGroupOpeningsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<UpcomingWorkingGroupOpeningOrderByInput>>
  where?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
}

export type QueryUpcomingWorkingGroupOpeningsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<UpcomingWorkingGroupOpeningOrderByInput>>
  where?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
}

export type QueryVideoAssetsDeletedByModeratorEventByUniqueInputArgs = {
  where: VideoAssetsDeletedByModeratorEventWhereUniqueInput
}

export type QueryVideoAssetsDeletedByModeratorEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoAssetsDeletedByModeratorEventOrderByInput>>
  where?: Maybe<VideoAssetsDeletedByModeratorEventWhereInput>
}

export type QueryVideoAssetsDeletedByModeratorEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoAssetsDeletedByModeratorEventOrderByInput>>
  where?: Maybe<VideoAssetsDeletedByModeratorEventWhereInput>
}

export type QueryVideoByUniqueInputArgs = {
  where: VideoWhereUniqueInput
}

export type QueryVideoCategoriesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoCategoryOrderByInput>>
  where?: Maybe<VideoCategoryWhereInput>
}

export type QueryVideoCategoriesByNameArgs = {
  limit?: Maybe<Scalars['Int']>
  skip?: Maybe<Scalars['Int']>
  text: Scalars['String']
  whereVideoCategory?: Maybe<VideoCategoryWhereInput>
}

export type QueryVideoCategoriesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoCategoryOrderByInput>>
  where?: Maybe<VideoCategoryWhereInput>
}

export type QueryVideoCategoryByUniqueInputArgs = {
  where: VideoCategoryWhereUniqueInput
}

export type QueryVideoDeletedByModeratorEventByUniqueInputArgs = {
  where: VideoDeletedByModeratorEventWhereUniqueInput
}

export type QueryVideoDeletedByModeratorEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoDeletedByModeratorEventOrderByInput>>
  where?: Maybe<VideoDeletedByModeratorEventWhereInput>
}

export type QueryVideoDeletedByModeratorEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoDeletedByModeratorEventOrderByInput>>
  where?: Maybe<VideoDeletedByModeratorEventWhereInput>
}

export type QueryVideoDeletedEventByUniqueInputArgs = {
  where: VideoDeletedEventWhereUniqueInput
}

export type QueryVideoDeletedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoDeletedEventOrderByInput>>
  where?: Maybe<VideoDeletedEventWhereInput>
}

export type QueryVideoDeletedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoDeletedEventOrderByInput>>
  where?: Maybe<VideoDeletedEventWhereInput>
}

export type QueryVideoMediaEncodingByUniqueInputArgs = {
  where: VideoMediaEncodingWhereUniqueInput
}

export type QueryVideoMediaEncodingsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoMediaEncodingOrderByInput>>
  where?: Maybe<VideoMediaEncodingWhereInput>
}

export type QueryVideoMediaEncodingsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoMediaEncodingOrderByInput>>
  where?: Maybe<VideoMediaEncodingWhereInput>
}

export type QueryVideoMediaMetadataArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoMediaMetadataOrderByInput>>
  where?: Maybe<VideoMediaMetadataWhereInput>
}

export type QueryVideoMediaMetadataByUniqueInputArgs = {
  where: VideoMediaMetadataWhereUniqueInput
}

export type QueryVideoMediaMetadataConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoMediaMetadataOrderByInput>>
  where?: Maybe<VideoMediaMetadataWhereInput>
}

export type QueryVideoReactedEventByUniqueInputArgs = {
  where: VideoReactedEventWhereUniqueInput
}

export type QueryVideoReactedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoReactedEventOrderByInput>>
  where?: Maybe<VideoReactedEventWhereInput>
}

export type QueryVideoReactedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoReactedEventOrderByInput>>
  where?: Maybe<VideoReactedEventWhereInput>
}

export type QueryVideoReactionByUniqueInputArgs = {
  where: VideoReactionWhereUniqueInput
}

export type QueryVideoReactionsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoReactionOrderByInput>>
  where?: Maybe<VideoReactionWhereInput>
}

export type QueryVideoReactionsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoReactionOrderByInput>>
  where?: Maybe<VideoReactionWhereInput>
}

export type QueryVideoReactionsCountByReactionTypeByUniqueInputArgs = {
  where: VideoReactionsCountByReactionTypeWhereUniqueInput
}

export type QueryVideoReactionsCountByReactionTypesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoReactionsCountByReactionTypeOrderByInput>>
  where?: Maybe<VideoReactionsCountByReactionTypeWhereInput>
}

export type QueryVideoReactionsCountByReactionTypesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoReactionsCountByReactionTypeOrderByInput>>
  where?: Maybe<VideoReactionsCountByReactionTypeWhereInput>
}

export type QueryVideoReactionsPreferenceEventByUniqueInputArgs = {
  where: VideoReactionsPreferenceEventWhereUniqueInput
}

export type QueryVideoReactionsPreferenceEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoReactionsPreferenceEventOrderByInput>>
  where?: Maybe<VideoReactionsPreferenceEventWhereInput>
}

export type QueryVideoReactionsPreferenceEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoReactionsPreferenceEventOrderByInput>>
  where?: Maybe<VideoReactionsPreferenceEventWhereInput>
}

export type QueryVideoSubtitleByUniqueInputArgs = {
  where: VideoSubtitleWhereUniqueInput
}

export type QueryVideoSubtitlesArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoSubtitleOrderByInput>>
  where?: Maybe<VideoSubtitleWhereInput>
}

export type QueryVideoSubtitlesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoSubtitleOrderByInput>>
  where?: Maybe<VideoSubtitleWhereInput>
}

export type QueryVideoVisibilitySetByModeratorEventByUniqueInputArgs = {
  where: VideoVisibilitySetByModeratorEventWhereUniqueInput
}

export type QueryVideoVisibilitySetByModeratorEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoVisibilitySetByModeratorEventOrderByInput>>
  where?: Maybe<VideoVisibilitySetByModeratorEventWhereInput>
}

export type QueryVideoVisibilitySetByModeratorEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoVisibilitySetByModeratorEventOrderByInput>>
  where?: Maybe<VideoVisibilitySetByModeratorEventWhereInput>
}

export type QueryVideosArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoOrderByInput>>
  where?: Maybe<VideoWhereInput>
}

export type QueryVideosConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VideoOrderByInput>>
  where?: Maybe<VideoWhereInput>
}

export type QueryVoteCastEventByUniqueInputArgs = {
  where: VoteCastEventWhereUniqueInput
}

export type QueryVoteCastEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VoteCastEventOrderByInput>>
  where?: Maybe<VoteCastEventWhereInput>
}

export type QueryVoteCastEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VoteCastEventOrderByInput>>
  where?: Maybe<VoteCastEventWhereInput>
}

export type QueryVoteRevealedEventByUniqueInputArgs = {
  where: VoteRevealedEventWhereUniqueInput
}

export type QueryVoteRevealedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VoteRevealedEventOrderByInput>>
  where?: Maybe<VoteRevealedEventWhereInput>
}

export type QueryVoteRevealedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VoteRevealedEventOrderByInput>>
  where?: Maybe<VoteRevealedEventWhereInput>
}

export type QueryVotingPeriodStartedEventByUniqueInputArgs = {
  where: VotingPeriodStartedEventWhereUniqueInput
}

export type QueryVotingPeriodStartedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VotingPeriodStartedEventOrderByInput>>
  where?: Maybe<VotingPeriodStartedEventWhereInput>
}

export type QueryVotingPeriodStartedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<VotingPeriodStartedEventOrderByInput>>
  where?: Maybe<VotingPeriodStartedEventWhereInput>
}

export type QueryWorkEntrantFundsWithdrawnEventByUniqueInputArgs = {
  where: WorkEntrantFundsWithdrawnEventWhereUniqueInput
}

export type QueryWorkEntrantFundsWithdrawnEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkEntrantFundsWithdrawnEventOrderByInput>>
  where?: Maybe<WorkEntrantFundsWithdrawnEventWhereInput>
}

export type QueryWorkEntrantFundsWithdrawnEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkEntrantFundsWithdrawnEventOrderByInput>>
  where?: Maybe<WorkEntrantFundsWithdrawnEventWhereInput>
}

export type QueryWorkEntryAnnouncedEventByUniqueInputArgs = {
  where: WorkEntryAnnouncedEventWhereUniqueInput
}

export type QueryWorkEntryAnnouncedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkEntryAnnouncedEventOrderByInput>>
  where?: Maybe<WorkEntryAnnouncedEventWhereInput>
}

export type QueryWorkEntryAnnouncedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkEntryAnnouncedEventOrderByInput>>
  where?: Maybe<WorkEntryAnnouncedEventWhereInput>
}

export type QueryWorkEntrySlashedEventByUniqueInputArgs = {
  where: WorkEntrySlashedEventWhereUniqueInput
}

export type QueryWorkEntrySlashedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkEntrySlashedEventOrderByInput>>
  where?: Maybe<WorkEntrySlashedEventWhereInput>
}

export type QueryWorkEntrySlashedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkEntrySlashedEventOrderByInput>>
  where?: Maybe<WorkEntrySlashedEventWhereInput>
}

export type QueryWorkEntryWithdrawnEventByUniqueInputArgs = {
  where: WorkEntryWithdrawnEventWhereUniqueInput
}

export type QueryWorkEntryWithdrawnEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkEntryWithdrawnEventOrderByInput>>
  where?: Maybe<WorkEntryWithdrawnEventWhereInput>
}

export type QueryWorkEntryWithdrawnEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkEntryWithdrawnEventOrderByInput>>
  where?: Maybe<WorkEntryWithdrawnEventWhereInput>
}

export type QueryWorkSubmittedEventByUniqueInputArgs = {
  where: WorkSubmittedEventWhereUniqueInput
}

export type QueryWorkSubmittedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkSubmittedEventOrderByInput>>
  where?: Maybe<WorkSubmittedEventWhereInput>
}

export type QueryWorkSubmittedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkSubmittedEventOrderByInput>>
  where?: Maybe<WorkSubmittedEventWhereInput>
}

export type QueryWorkerByUniqueInputArgs = {
  where: WorkerWhereUniqueInput
}

export type QueryWorkerExitedEventByUniqueInputArgs = {
  where: WorkerExitedEventWhereUniqueInput
}

export type QueryWorkerExitedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerExitedEventOrderByInput>>
  where?: Maybe<WorkerExitedEventWhereInput>
}

export type QueryWorkerExitedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerExitedEventOrderByInput>>
  where?: Maybe<WorkerExitedEventWhereInput>
}

export type QueryWorkerRewardAccountUpdatedEventByUniqueInputArgs = {
  where: WorkerRewardAccountUpdatedEventWhereUniqueInput
}

export type QueryWorkerRewardAccountUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerRewardAccountUpdatedEventOrderByInput>>
  where?: Maybe<WorkerRewardAccountUpdatedEventWhereInput>
}

export type QueryWorkerRewardAccountUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerRewardAccountUpdatedEventOrderByInput>>
  where?: Maybe<WorkerRewardAccountUpdatedEventWhereInput>
}

export type QueryWorkerRewardAmountUpdatedEventByUniqueInputArgs = {
  where: WorkerRewardAmountUpdatedEventWhereUniqueInput
}

export type QueryWorkerRewardAmountUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerRewardAmountUpdatedEventOrderByInput>>
  where?: Maybe<WorkerRewardAmountUpdatedEventWhereInput>
}

export type QueryWorkerRewardAmountUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerRewardAmountUpdatedEventOrderByInput>>
  where?: Maybe<WorkerRewardAmountUpdatedEventWhereInput>
}

export type QueryWorkerRoleAccountUpdatedEventByUniqueInputArgs = {
  where: WorkerRoleAccountUpdatedEventWhereUniqueInput
}

export type QueryWorkerRoleAccountUpdatedEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerRoleAccountUpdatedEventOrderByInput>>
  where?: Maybe<WorkerRoleAccountUpdatedEventWhereInput>
}

export type QueryWorkerRoleAccountUpdatedEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerRoleAccountUpdatedEventOrderByInput>>
  where?: Maybe<WorkerRoleAccountUpdatedEventWhereInput>
}

export type QueryWorkerStartedLeavingEventByUniqueInputArgs = {
  where: WorkerStartedLeavingEventWhereUniqueInput
}

export type QueryWorkerStartedLeavingEventsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerStartedLeavingEventOrderByInput>>
  where?: Maybe<WorkerStartedLeavingEventWhereInput>
}

export type QueryWorkerStartedLeavingEventsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerStartedLeavingEventOrderByInput>>
  where?: Maybe<WorkerStartedLeavingEventWhereInput>
}

export type QueryWorkersArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerOrderByInput>>
  where?: Maybe<WorkerWhereInput>
}

export type QueryWorkersConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkerOrderByInput>>
  where?: Maybe<WorkerWhereInput>
}

export type QueryWorkingGroupApplicationByUniqueInputArgs = {
  where: WorkingGroupApplicationWhereUniqueInput
}

export type QueryWorkingGroupApplicationsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupApplicationOrderByInput>>
  where?: Maybe<WorkingGroupApplicationWhereInput>
}

export type QueryWorkingGroupApplicationsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupApplicationOrderByInput>>
  where?: Maybe<WorkingGroupApplicationWhereInput>
}

export type QueryWorkingGroupByUniqueInputArgs = {
  where: WorkingGroupWhereUniqueInput
}

export type QueryWorkingGroupMetadataArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupMetadataOrderByInput>>
  where?: Maybe<WorkingGroupMetadataWhereInput>
}

export type QueryWorkingGroupMetadataByUniqueInputArgs = {
  where: WorkingGroupMetadataWhereUniqueInput
}

export type QueryWorkingGroupMetadataConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupMetadataOrderByInput>>
  where?: Maybe<WorkingGroupMetadataWhereInput>
}

export type QueryWorkingGroupOpeningByUniqueInputArgs = {
  where: WorkingGroupOpeningWhereUniqueInput
}

export type QueryWorkingGroupOpeningMetadataArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupOpeningMetadataOrderByInput>>
  where?: Maybe<WorkingGroupOpeningMetadataWhereInput>
}

export type QueryWorkingGroupOpeningMetadataByUniqueInputArgs = {
  where: WorkingGroupOpeningMetadataWhereUniqueInput
}

export type QueryWorkingGroupOpeningMetadataConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupOpeningMetadataOrderByInput>>
  where?: Maybe<WorkingGroupOpeningMetadataWhereInput>
}

export type QueryWorkingGroupOpeningsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupOpeningOrderByInput>>
  where?: Maybe<WorkingGroupOpeningWhereInput>
}

export type QueryWorkingGroupOpeningsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupOpeningOrderByInput>>
  where?: Maybe<WorkingGroupOpeningWhereInput>
}

export type QueryWorkingGroupsArgs = {
  limit?: Maybe<Scalars['Int']>
  offset?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupOrderByInput>>
  where?: Maybe<WorkingGroupWhereInput>
}

export type QueryWorkingGroupsConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  orderBy?: Maybe<Array<WorkingGroupOrderByInput>>
  where?: Maybe<WorkingGroupWhereInput>
}

export type ReferendumFinishedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ReferendumFinishedEventConnection = {
  edges: Array<ReferendumFinishedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumFinishedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type ReferendumFinishedEventEdge = {
  cursor: Scalars['String']
  node: ReferendumFinishedEvent
}

export enum ReferendumFinishedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ReferendumFinishedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type ReferendumFinishedEventWhereInput = {
  AND?: Maybe<Array<ReferendumFinishedEventWhereInput>>
  NOT?: Maybe<Array<ReferendumFinishedEventWhereInput>>
  OR?: Maybe<Array<ReferendumFinishedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ReferendumFinishedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ReferendumStageRevealing = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  electionRound: ElectionRound
  electionRoundId: Scalars['String']
  endsAt: Scalars['Int']
  id: Scalars['ID']
  startedAtBlock: Scalars['BigInt']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  winningTargetCount: Scalars['BigInt']
}

export type ReferendumStageRevealingConnection = {
  edges: Array<ReferendumStageRevealingEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumStageRevealingCreateInput = {
  electionRound: Scalars['ID']
  endsAt: Scalars['Float']
  startedAtBlock: Scalars['String']
  winningTargetCount: Scalars['String']
}

export type ReferendumStageRevealingEdge = {
  cursor: Scalars['String']
  node: ReferendumStageRevealing
}

export enum ReferendumStageRevealingOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectionRoundAsc = 'electionRound_ASC',
  ElectionRoundDesc = 'electionRound_DESC',
  EndsAtAsc = 'endsAt_ASC',
  EndsAtDesc = 'endsAt_DESC',
  StartedAtBlockAsc = 'startedAtBlock_ASC',
  StartedAtBlockDesc = 'startedAtBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningTargetCountAsc = 'winningTargetCount_ASC',
  WinningTargetCountDesc = 'winningTargetCount_DESC',
}

export type ReferendumStageRevealingUpdateInput = {
  electionRound?: Maybe<Scalars['ID']>
  endsAt?: Maybe<Scalars['Float']>
  startedAtBlock?: Maybe<Scalars['String']>
  winningTargetCount?: Maybe<Scalars['String']>
}

export type ReferendumStageRevealingWhereInput = {
  AND?: Maybe<Array<ReferendumStageRevealingWhereInput>>
  NOT?: Maybe<Array<ReferendumStageRevealingWhereInput>>
  OR?: Maybe<Array<ReferendumStageRevealingWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electionRound?: Maybe<ElectionRoundWhereInput>
  endsAt_eq?: Maybe<Scalars['Int']>
  endsAt_gt?: Maybe<Scalars['Int']>
  endsAt_gte?: Maybe<Scalars['Int']>
  endsAt_in?: Maybe<Array<Scalars['Int']>>
  endsAt_lt?: Maybe<Scalars['Int']>
  endsAt_lte?: Maybe<Scalars['Int']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  startedAtBlock_eq?: Maybe<Scalars['BigInt']>
  startedAtBlock_gt?: Maybe<Scalars['BigInt']>
  startedAtBlock_gte?: Maybe<Scalars['BigInt']>
  startedAtBlock_in?: Maybe<Array<Scalars['BigInt']>>
  startedAtBlock_lt?: Maybe<Scalars['BigInt']>
  startedAtBlock_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  winningTargetCount_eq?: Maybe<Scalars['BigInt']>
  winningTargetCount_gt?: Maybe<Scalars['BigInt']>
  winningTargetCount_gte?: Maybe<Scalars['BigInt']>
  winningTargetCount_in?: Maybe<Array<Scalars['BigInt']>>
  winningTargetCount_lt?: Maybe<Scalars['BigInt']>
  winningTargetCount_lte?: Maybe<Scalars['BigInt']>
}

export type ReferendumStageRevealingWhereUniqueInput = {
  id: Scalars['ID']
}

export type ReferendumStageVoting = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  electionRound: ElectionRound
  electionRoundId: Scalars['String']
  endsAt: Scalars['Int']
  id: Scalars['ID']
  startedAtBlock: Scalars['BigInt']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  winningTargetCount: Scalars['BigInt']
}

export type ReferendumStageVotingConnection = {
  edges: Array<ReferendumStageVotingEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumStageVotingCreateInput = {
  electionRound: Scalars['ID']
  endsAt: Scalars['Float']
  startedAtBlock: Scalars['String']
  winningTargetCount: Scalars['String']
}

export type ReferendumStageVotingEdge = {
  cursor: Scalars['String']
  node: ReferendumStageVoting
}

export enum ReferendumStageVotingOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectionRoundAsc = 'electionRound_ASC',
  ElectionRoundDesc = 'electionRound_DESC',
  EndsAtAsc = 'endsAt_ASC',
  EndsAtDesc = 'endsAt_DESC',
  StartedAtBlockAsc = 'startedAtBlock_ASC',
  StartedAtBlockDesc = 'startedAtBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningTargetCountAsc = 'winningTargetCount_ASC',
  WinningTargetCountDesc = 'winningTargetCount_DESC',
}

export type ReferendumStageVotingUpdateInput = {
  electionRound?: Maybe<Scalars['ID']>
  endsAt?: Maybe<Scalars['Float']>
  startedAtBlock?: Maybe<Scalars['String']>
  winningTargetCount?: Maybe<Scalars['String']>
}

export type ReferendumStageVotingWhereInput = {
  AND?: Maybe<Array<ReferendumStageVotingWhereInput>>
  NOT?: Maybe<Array<ReferendumStageVotingWhereInput>>
  OR?: Maybe<Array<ReferendumStageVotingWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  electionRound?: Maybe<ElectionRoundWhereInput>
  endsAt_eq?: Maybe<Scalars['Int']>
  endsAt_gt?: Maybe<Scalars['Int']>
  endsAt_gte?: Maybe<Scalars['Int']>
  endsAt_in?: Maybe<Array<Scalars['Int']>>
  endsAt_lt?: Maybe<Scalars['Int']>
  endsAt_lte?: Maybe<Scalars['Int']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  startedAtBlock_eq?: Maybe<Scalars['BigInt']>
  startedAtBlock_gt?: Maybe<Scalars['BigInt']>
  startedAtBlock_gte?: Maybe<Scalars['BigInt']>
  startedAtBlock_in?: Maybe<Array<Scalars['BigInt']>>
  startedAtBlock_lt?: Maybe<Scalars['BigInt']>
  startedAtBlock_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  winningTargetCount_eq?: Maybe<Scalars['BigInt']>
  winningTargetCount_gt?: Maybe<Scalars['BigInt']>
  winningTargetCount_gte?: Maybe<Scalars['BigInt']>
  winningTargetCount_in?: Maybe<Array<Scalars['BigInt']>>
  winningTargetCount_lt?: Maybe<Scalars['BigInt']>
  winningTargetCount_lte?: Maybe<Scalars['BigInt']>
}

export type ReferendumStageVotingWhereUniqueInput = {
  id: Scalars['ID']
}

export type ReferendumStartedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    winningTargetCount: Scalars['BigInt']
  }

export type ReferendumStartedEventConnection = {
  edges: Array<ReferendumStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumStartedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  winningTargetCount: Scalars['String']
}

export type ReferendumStartedEventEdge = {
  cursor: Scalars['String']
  node: ReferendumStartedEvent
}

export enum ReferendumStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningTargetCountAsc = 'winningTargetCount_ASC',
  WinningTargetCountDesc = 'winningTargetCount_DESC',
}

export type ReferendumStartedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  winningTargetCount?: Maybe<Scalars['String']>
}

export type ReferendumStartedEventWhereInput = {
  AND?: Maybe<Array<ReferendumStartedEventWhereInput>>
  NOT?: Maybe<Array<ReferendumStartedEventWhereInput>>
  OR?: Maybe<Array<ReferendumStartedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  winningTargetCount_eq?: Maybe<Scalars['BigInt']>
  winningTargetCount_gt?: Maybe<Scalars['BigInt']>
  winningTargetCount_gte?: Maybe<Scalars['BigInt']>
  winningTargetCount_in?: Maybe<Array<Scalars['BigInt']>>
  winningTargetCount_lt?: Maybe<Scalars['BigInt']>
  winningTargetCount_lte?: Maybe<Scalars['BigInt']>
}

export type ReferendumStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ReferendumStartedForcefullyEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    winningTargetCount: Scalars['BigInt']
  }

export type ReferendumStartedForcefullyEventConnection = {
  edges: Array<ReferendumStartedForcefullyEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumStartedForcefullyEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  winningTargetCount: Scalars['String']
}

export type ReferendumStartedForcefullyEventEdge = {
  cursor: Scalars['String']
  node: ReferendumStartedForcefullyEvent
}

export enum ReferendumStartedForcefullyEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningTargetCountAsc = 'winningTargetCount_ASC',
  WinningTargetCountDesc = 'winningTargetCount_DESC',
}

export type ReferendumStartedForcefullyEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  winningTargetCount?: Maybe<Scalars['String']>
}

export type ReferendumStartedForcefullyEventWhereInput = {
  AND?: Maybe<Array<ReferendumStartedForcefullyEventWhereInput>>
  NOT?: Maybe<Array<ReferendumStartedForcefullyEventWhereInput>>
  OR?: Maybe<Array<ReferendumStartedForcefullyEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  winningTargetCount_eq?: Maybe<Scalars['BigInt']>
  winningTargetCount_gt?: Maybe<Scalars['BigInt']>
  winningTargetCount_gte?: Maybe<Scalars['BigInt']>
  winningTargetCount_in?: Maybe<Array<Scalars['BigInt']>>
  winningTargetCount_lt?: Maybe<Scalars['BigInt']>
  winningTargetCount_lte?: Maybe<Scalars['BigInt']>
}

export type ReferendumStartedForcefullyEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ReferralCutUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newValue: Scalars['Int']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ReferralCutUpdatedEventConnection = {
  edges: Array<ReferralCutUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferralCutUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newValue: Scalars['Float']
}

export type ReferralCutUpdatedEventEdge = {
  cursor: Scalars['String']
  node: ReferralCutUpdatedEvent
}

export enum ReferralCutUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewValueAsc = 'newValue_ASC',
  NewValueDesc = 'newValue_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ReferralCutUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newValue?: Maybe<Scalars['Float']>
}

export type ReferralCutUpdatedEventWhereInput = {
  AND?: Maybe<Array<ReferralCutUpdatedEventWhereInput>>
  NOT?: Maybe<Array<ReferralCutUpdatedEventWhereInput>>
  OR?: Maybe<Array<ReferralCutUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newValue_eq?: Maybe<Scalars['Int']>
  newValue_gt?: Maybe<Scalars['Int']>
  newValue_gte?: Maybe<Scalars['Int']>
  newValue_in?: Maybe<Array<Scalars['Int']>>
  newValue_lt?: Maybe<Scalars['Int']>
  newValue_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ReferralCutUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type RequestFundedEvent = BaseGraphQlObject &
  Event & {
    account: Scalars['String']
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type RequestFundedEventConnection = {
  edges: Array<RequestFundedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RequestFundedEventCreateInput = {
  account: Scalars['String']
  amount: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type RequestFundedEventEdge = {
  cursor: Scalars['String']
  node: RequestFundedEvent
}

export enum RequestFundedEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type RequestFundedEventUpdateInput = {
  account?: Maybe<Scalars['String']>
  amount?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type RequestFundedEventWhereInput = {
  AND?: Maybe<Array<RequestFundedEventWhereInput>>
  NOT?: Maybe<Array<RequestFundedEventWhereInput>>
  OR?: Maybe<Array<RequestFundedEventWhereInput>>
  account_contains?: Maybe<Scalars['String']>
  account_endsWith?: Maybe<Scalars['String']>
  account_eq?: Maybe<Scalars['String']>
  account_in?: Maybe<Array<Scalars['String']>>
  account_startsWith?: Maybe<Scalars['String']>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type RequestFundedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type RevealingStageStartedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type RevealingStageStartedEventConnection = {
  edges: Array<RevealingStageStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RevealingStageStartedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type RevealingStageStartedEventEdge = {
  cursor: Scalars['String']
  node: RevealingStageStartedEvent
}

export enum RevealingStageStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type RevealingStageStartedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type RevealingStageStartedEventWhereInput = {
  AND?: Maybe<Array<RevealingStageStartedEventWhereInput>>
  NOT?: Maybe<Array<RevealingStageStartedEventWhereInput>>
  OR?: Maybe<Array<RevealingStageStartedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type RevealingStageStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type RewardPaidEvent = BaseGraphQlObject &
  Event & {
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    paymentType: RewardPaymentType
    rewardAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type RewardPaidEventConnection = {
  edges: Array<RewardPaidEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RewardPaidEventCreateInput = {
  amount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  paymentType: RewardPaymentType
  rewardAccount: Scalars['String']
  worker: Scalars['ID']
}

export type RewardPaidEventEdge = {
  cursor: Scalars['String']
  node: RewardPaidEvent
}

export enum RewardPaidEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PaymentTypeAsc = 'paymentType_ASC',
  PaymentTypeDesc = 'paymentType_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type RewardPaidEventUpdateInput = {
  amount?: Maybe<Scalars['String']>
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  paymentType?: Maybe<RewardPaymentType>
  rewardAccount?: Maybe<Scalars['String']>
  worker?: Maybe<Scalars['ID']>
}

export type RewardPaidEventWhereInput = {
  AND?: Maybe<Array<RewardPaidEventWhereInput>>
  NOT?: Maybe<Array<RewardPaidEventWhereInput>>
  OR?: Maybe<Array<RewardPaidEventWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  paymentType_eq?: Maybe<RewardPaymentType>
  paymentType_in?: Maybe<Array<RewardPaymentType>>
  rewardAccount_contains?: Maybe<Scalars['String']>
  rewardAccount_endsWith?: Maybe<Scalars['String']>
  rewardAccount_eq?: Maybe<Scalars['String']>
  rewardAccount_in?: Maybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type RewardPaidEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type RewardPaymentEvent = BaseGraphQlObject &
  Event & {
    councilMember: CouncilMember
    councilMemberId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    missingBalance: Scalars['BigInt']
    network: Network
    paidBalance: Scalars['BigInt']
    rewardAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type RewardPaymentEventConnection = {
  edges: Array<RewardPaymentEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RewardPaymentEventCreateInput = {
  councilMember: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  missingBalance: Scalars['String']
  network: Network
  paidBalance: Scalars['String']
  rewardAccount: Scalars['String']
}

export type RewardPaymentEventEdge = {
  cursor: Scalars['String']
  node: RewardPaymentEvent
}

export enum RewardPaymentEventOrderByInput {
  CouncilMemberAsc = 'councilMember_ASC',
  CouncilMemberDesc = 'councilMember_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MissingBalanceAsc = 'missingBalance_ASC',
  MissingBalanceDesc = 'missingBalance_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PaidBalanceAsc = 'paidBalance_ASC',
  PaidBalanceDesc = 'paidBalance_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type RewardPaymentEventUpdateInput = {
  councilMember?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  missingBalance?: Maybe<Scalars['String']>
  network?: Maybe<Network>
  paidBalance?: Maybe<Scalars['String']>
  rewardAccount?: Maybe<Scalars['String']>
}

export type RewardPaymentEventWhereInput = {
  AND?: Maybe<Array<RewardPaymentEventWhereInput>>
  NOT?: Maybe<Array<RewardPaymentEventWhereInput>>
  OR?: Maybe<Array<RewardPaymentEventWhereInput>>
  councilMember?: Maybe<CouncilMemberWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  missingBalance_eq?: Maybe<Scalars['BigInt']>
  missingBalance_gt?: Maybe<Scalars['BigInt']>
  missingBalance_gte?: Maybe<Scalars['BigInt']>
  missingBalance_in?: Maybe<Array<Scalars['BigInt']>>
  missingBalance_lt?: Maybe<Scalars['BigInt']>
  missingBalance_lte?: Maybe<Scalars['BigInt']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  paidBalance_eq?: Maybe<Scalars['BigInt']>
  paidBalance_gt?: Maybe<Scalars['BigInt']>
  paidBalance_gte?: Maybe<Scalars['BigInt']>
  paidBalance_in?: Maybe<Array<Scalars['BigInt']>>
  paidBalance_lt?: Maybe<Scalars['BigInt']>
  paidBalance_lte?: Maybe<Scalars['BigInt']>
  rewardAccount_contains?: Maybe<Scalars['String']>
  rewardAccount_endsWith?: Maybe<Scalars['String']>
  rewardAccount_eq?: Maybe<Scalars['String']>
  rewardAccount_in?: Maybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type RewardPaymentEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum RewardPaymentType {
  Missed = 'MISSED',
  Regular = 'REGULAR',
}

export type RuntimeUpgradeProposalDetails = {
  newRuntimeBytecode?: Maybe<RuntimeWasmBytecode>
}

export type RuntimeWasmBytecode = BaseGraphQlObject & {
  bytecode: Scalars['Bytes']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type RuntimeWasmBytecodeConnection = {
  edges: Array<RuntimeWasmBytecodeEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RuntimeWasmBytecodeCreateInput = {
  bytecode: Scalars['String']
}

export type RuntimeWasmBytecodeEdge = {
  cursor: Scalars['String']
  node: RuntimeWasmBytecode
}

export enum RuntimeWasmBytecodeOrderByInput {
  BytecodeAsc = 'bytecode_ASC',
  BytecodeDesc = 'bytecode_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type RuntimeWasmBytecodeUpdateInput = {
  bytecode?: Maybe<Scalars['String']>
}

export type RuntimeWasmBytecodeWhereInput = {
  AND?: Maybe<Array<RuntimeWasmBytecodeWhereInput>>
  NOT?: Maybe<Array<RuntimeWasmBytecodeWhereInput>>
  OR?: Maybe<Array<RuntimeWasmBytecodeWhereInput>>
  bytecode_eq?: Maybe<Scalars['Bytes']>
  bytecode_in?: Maybe<Array<Scalars['Bytes']>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type RuntimeWasmBytecodeWhereUniqueInput = {
  id: Scalars['ID']
}

export type SearchFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: SearchSearchResult
  rank: Scalars['Float']
}

export type SearchSearchResult = Channel | Video

export type SetCouncilBudgetIncrementProposalDetails = {
  newAmount: Scalars['BigInt']
}

export type SetCouncilorRewardProposalDetails = {
  newRewardPerBlock: Scalars['BigInt']
}

export type SetInitialInvitationBalanceProposalDetails = {
  newInitialInvitationBalance: Scalars['BigInt']
}

export type SetInitialInvitationCountProposalDetails = {
  newInitialInvitationsCount: Scalars['Int']
}

export type SetMaxValidatorCountProposalDetails = {
  newMaxValidatorCount: Scalars['Int']
}

export type SetMembershipLeadInvitationQuotaProposalDetails = {
  newLeadInvitationQuota: Scalars['Int']
}

export type SetMembershipPriceProposalDetails = {
  newPrice: Scalars['BigInt']
}

export type SetReferralCutProposalDetails = {
  newReferralCut: Scalars['Int']
}

export type SetWorkingGroupLeadRewardProposalDetails = {
  lead?: Maybe<Worker>
  newRewardPerBlock: Scalars['BigInt']
}

export type SignalProposalDetails = {
  text: Scalars['String']
}

export type SlashWorkingGroupLeadProposalDetails = {
  amount: Scalars['BigInt']
  lead?: Maybe<Worker>
}

export type StakeDecreasedEvent = BaseGraphQlObject &
  Event & {
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type StakeDecreasedEventConnection = {
  edges: Array<StakeDecreasedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakeDecreasedEventCreateInput = {
  amount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  worker: Scalars['ID']
}

export type StakeDecreasedEventEdge = {
  cursor: Scalars['String']
  node: StakeDecreasedEvent
}

export enum StakeDecreasedEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type StakeDecreasedEventUpdateInput = {
  amount?: Maybe<Scalars['String']>
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  worker?: Maybe<Scalars['ID']>
}

export type StakeDecreasedEventWhereInput = {
  AND?: Maybe<Array<StakeDecreasedEventWhereInput>>
  NOT?: Maybe<Array<StakeDecreasedEventWhereInput>>
  OR?: Maybe<Array<StakeDecreasedEventWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type StakeDecreasedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type StakeIncreasedEvent = BaseGraphQlObject &
  Event & {
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type StakeIncreasedEventConnection = {
  edges: Array<StakeIncreasedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakeIncreasedEventCreateInput = {
  amount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  worker: Scalars['ID']
}

export type StakeIncreasedEventEdge = {
  cursor: Scalars['String']
  node: StakeIncreasedEvent
}

export enum StakeIncreasedEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type StakeIncreasedEventUpdateInput = {
  amount?: Maybe<Scalars['String']>
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  worker?: Maybe<Scalars['ID']>
}

export type StakeIncreasedEventWhereInput = {
  AND?: Maybe<Array<StakeIncreasedEventWhereInput>>
  NOT?: Maybe<Array<StakeIncreasedEventWhereInput>>
  OR?: Maybe<Array<StakeIncreasedEventWhereInput>>
  amount_eq?: Maybe<Scalars['BigInt']>
  amount_gt?: Maybe<Scalars['BigInt']>
  amount_gte?: Maybe<Scalars['BigInt']>
  amount_in?: Maybe<Array<Scalars['BigInt']>>
  amount_lt?: Maybe<Scalars['BigInt']>
  amount_lte?: Maybe<Scalars['BigInt']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type StakeIncreasedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type StakeReleasedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    stakingAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type StakeReleasedEventConnection = {
  edges: Array<StakeReleasedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakeReleasedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  stakingAccount: Scalars['String']
}

export type StakeReleasedEventEdge = {
  cursor: Scalars['String']
  node: StakeReleasedEvent
}

export enum StakeReleasedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  StakingAccountAsc = 'stakingAccount_ASC',
  StakingAccountDesc = 'stakingAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StakeReleasedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  stakingAccount?: Maybe<Scalars['String']>
}

export type StakeReleasedEventWhereInput = {
  AND?: Maybe<Array<StakeReleasedEventWhereInput>>
  NOT?: Maybe<Array<StakeReleasedEventWhereInput>>
  OR?: Maybe<Array<StakeReleasedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  stakingAccount_contains?: Maybe<Scalars['String']>
  stakingAccount_endsWith?: Maybe<Scalars['String']>
  stakingAccount_eq?: Maybe<Scalars['String']>
  stakingAccount_in?: Maybe<Array<Scalars['String']>>
  stakingAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type StakeReleasedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type StakeSlashedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    rationale?: Maybe<Scalars['String']>
    requestedAmount: Scalars['BigInt']
    slashedAmount: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type StakeSlashedEventConnection = {
  edges: Array<StakeSlashedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakeSlashedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale?: Maybe<Scalars['String']>
  requestedAmount: Scalars['String']
  slashedAmount: Scalars['String']
  worker: Scalars['ID']
}

export type StakeSlashedEventEdge = {
  cursor: Scalars['String']
  node: StakeSlashedEvent
}

export enum StakeSlashedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  RequestedAmountAsc = 'requestedAmount_ASC',
  RequestedAmountDesc = 'requestedAmount_DESC',
  SlashedAmountAsc = 'slashedAmount_ASC',
  SlashedAmountDesc = 'slashedAmount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type StakeSlashedEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
  requestedAmount?: Maybe<Scalars['String']>
  slashedAmount?: Maybe<Scalars['String']>
  worker?: Maybe<Scalars['ID']>
}

export type StakeSlashedEventWhereInput = {
  AND?: Maybe<Array<StakeSlashedEventWhereInput>>
  NOT?: Maybe<Array<StakeSlashedEventWhereInput>>
  OR?: Maybe<Array<StakeSlashedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  requestedAmount_eq?: Maybe<Scalars['BigInt']>
  requestedAmount_gt?: Maybe<Scalars['BigInt']>
  requestedAmount_gte?: Maybe<Scalars['BigInt']>
  requestedAmount_in?: Maybe<Array<Scalars['BigInt']>>
  requestedAmount_lt?: Maybe<Scalars['BigInt']>
  requestedAmount_lte?: Maybe<Scalars['BigInt']>
  slashedAmount_eq?: Maybe<Scalars['BigInt']>
  slashedAmount_gt?: Maybe<Scalars['BigInt']>
  slashedAmount_gte?: Maybe<Scalars['BigInt']>
  slashedAmount_in?: Maybe<Array<Scalars['BigInt']>>
  slashedAmount_lt?: Maybe<Scalars['BigInt']>
  slashedAmount_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type StakeSlashedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type StakingAccountAddedEvent = BaseGraphQlObject &
  Event & {
    account: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type StakingAccountAddedEventConnection = {
  edges: Array<StakingAccountAddedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakingAccountAddedEventCreateInput = {
  account: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
}

export type StakingAccountAddedEventEdge = {
  cursor: Scalars['String']
  node: StakingAccountAddedEvent
}

export enum StakingAccountAddedEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StakingAccountAddedEventUpdateInput = {
  account?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
}

export type StakingAccountAddedEventWhereInput = {
  AND?: Maybe<Array<StakingAccountAddedEventWhereInput>>
  NOT?: Maybe<Array<StakingAccountAddedEventWhereInput>>
  OR?: Maybe<Array<StakingAccountAddedEventWhereInput>>
  account_contains?: Maybe<Scalars['String']>
  account_endsWith?: Maybe<Scalars['String']>
  account_eq?: Maybe<Scalars['String']>
  account_in?: Maybe<Array<Scalars['String']>>
  account_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type StakingAccountAddedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type StakingAccountConfirmedEvent = BaseGraphQlObject &
  Event & {
    account: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type StakingAccountConfirmedEventConnection = {
  edges: Array<StakingAccountConfirmedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakingAccountConfirmedEventCreateInput = {
  account: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
}

export type StakingAccountConfirmedEventEdge = {
  cursor: Scalars['String']
  node: StakingAccountConfirmedEvent
}

export enum StakingAccountConfirmedEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StakingAccountConfirmedEventUpdateInput = {
  account?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
}

export type StakingAccountConfirmedEventWhereInput = {
  AND?: Maybe<Array<StakingAccountConfirmedEventWhereInput>>
  NOT?: Maybe<Array<StakingAccountConfirmedEventWhereInput>>
  OR?: Maybe<Array<StakingAccountConfirmedEventWhereInput>>
  account_contains?: Maybe<Scalars['String']>
  account_endsWith?: Maybe<Scalars['String']>
  account_eq?: Maybe<Scalars['String']>
  account_in?: Maybe<Array<Scalars['String']>>
  account_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type StakingAccountConfirmedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type StakingAccountRemovedEvent = BaseGraphQlObject &
  Event & {
    account: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    member: Membership
    memberId: Scalars['String']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type StakingAccountRemovedEventConnection = {
  edges: Array<StakingAccountRemovedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakingAccountRemovedEventCreateInput = {
  account: Scalars['String']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  member: Scalars['ID']
  network: Network
}

export type StakingAccountRemovedEventEdge = {
  cursor: Scalars['String']
  node: StakingAccountRemovedEvent
}

export enum StakingAccountRemovedEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StakingAccountRemovedEventUpdateInput = {
  account?: Maybe<Scalars['String']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  member?: Maybe<Scalars['ID']>
  network?: Maybe<Network>
}

export type StakingAccountRemovedEventWhereInput = {
  AND?: Maybe<Array<StakingAccountRemovedEventWhereInput>>
  NOT?: Maybe<Array<StakingAccountRemovedEventWhereInput>>
  OR?: Maybe<Array<StakingAccountRemovedEventWhereInput>>
  account_contains?: Maybe<Scalars['String']>
  account_endsWith?: Maybe<Scalars['String']>
  account_eq?: Maybe<Scalars['String']>
  account_in?: Maybe<Array<Scalars['String']>>
  account_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  member?: Maybe<MembershipWhereInput>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type StakingAccountRemovedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type StandardDeleteResponse = {
  id: Scalars['ID']
}

export type StatusTextChangedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    metadata?: Maybe<Scalars['String']>
    network: Network
    result: WorkingGroupMetadataActionResult
    type?: Maybe<EventTypeOptions>
    upcomingworkinggroupopeningcreatedInEvent?: Maybe<Array<UpcomingWorkingGroupOpening>>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    workinggroupmetadatasetInEvent?: Maybe<Array<WorkingGroupMetadata>>
  }

export type StatusTextChangedEventConnection = {
  edges: Array<StatusTextChangedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StatusTextChangedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  metadata?: Maybe<Scalars['String']>
  network: Network
  result: Scalars['JSONObject']
}

export type StatusTextChangedEventEdge = {
  cursor: Scalars['String']
  node: StatusTextChangedEvent
}

export enum StatusTextChangedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StatusTextChangedEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  metadata?: Maybe<Scalars['String']>
  network?: Maybe<Network>
  result?: Maybe<Scalars['JSONObject']>
}

export type StatusTextChangedEventWhereInput = {
  AND?: Maybe<Array<StatusTextChangedEventWhereInput>>
  NOT?: Maybe<Array<StatusTextChangedEventWhereInput>>
  OR?: Maybe<Array<StatusTextChangedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  metadata_contains?: Maybe<Scalars['String']>
  metadata_endsWith?: Maybe<Scalars['String']>
  metadata_eq?: Maybe<Scalars['String']>
  metadata_in?: Maybe<Array<Scalars['String']>>
  metadata_startsWith?: Maybe<Scalars['String']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  result_json?: Maybe<Scalars['JSONObject']>
  upcomingworkinggroupopeningcreatedInEvent_every?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeningcreatedInEvent_none?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeningcreatedInEvent_some?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  workinggroupmetadatasetInEvent_every?: Maybe<WorkingGroupMetadataWhereInput>
  workinggroupmetadatasetInEvent_none?: Maybe<WorkingGroupMetadataWhereInput>
  workinggroupmetadatasetInEvent_some?: Maybe<WorkingGroupMetadataWhereInput>
}

export type StatusTextChangedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type StorageBag = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  distributionBuckets: Array<DistributionBucket>
  id: Scalars['ID']
  objects: Array<StorageDataObject>
  owner: StorageBagOwner
  storageBuckets: Array<StorageBucket>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type StorageBagConnection = {
  edges: Array<StorageBagEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StorageBagCreateInput = {
  owner: Scalars['JSONObject']
}

export type StorageBagEdge = {
  cursor: Scalars['String']
  node: StorageBag
}

export enum StorageBagOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StorageBagOwner =
  | StorageBagOwnerChannel
  | StorageBagOwnerCouncil
  | StorageBagOwnerDao
  | StorageBagOwnerMember
  | StorageBagOwnerWorkingGroup

export type StorageBagOwnerChannel = {
  channelId?: Maybe<Scalars['Int']>
}

export type StorageBagOwnerCouncil = {
  phantom?: Maybe<Scalars['Int']>
}

export type StorageBagOwnerDao = {
  daoId?: Maybe<Scalars['Int']>
}

export type StorageBagOwnerMember = {
  memberId?: Maybe<Scalars['Int']>
}

export type StorageBagOwnerWorkingGroup = {
  workingGroupId?: Maybe<Scalars['String']>
}

export type StorageBagUpdateInput = {
  owner?: Maybe<Scalars['JSONObject']>
}

export type StorageBagWhereInput = {
  AND?: Maybe<Array<StorageBagWhereInput>>
  NOT?: Maybe<Array<StorageBagWhereInput>>
  OR?: Maybe<Array<StorageBagWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  distributionBuckets_every?: Maybe<DistributionBucketWhereInput>
  distributionBuckets_none?: Maybe<DistributionBucketWhereInput>
  distributionBuckets_some?: Maybe<DistributionBucketWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  objects_every?: Maybe<StorageDataObjectWhereInput>
  objects_none?: Maybe<StorageDataObjectWhereInput>
  objects_some?: Maybe<StorageDataObjectWhereInput>
  owner_json?: Maybe<Scalars['JSONObject']>
  storageBuckets_every?: Maybe<StorageBucketWhereInput>
  storageBuckets_none?: Maybe<StorageBucketWhereInput>
  storageBuckets_some?: Maybe<StorageBucketWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type StorageBagWhereUniqueInput = {
  id: Scalars['ID']
}

export type StorageBucket = BaseGraphQlObject & {
  acceptingNewBags: Scalars['Boolean']
  bags: Array<StorageBag>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  dataObjectCountLimit: Scalars['BigInt']
  dataObjectsCount: Scalars['BigInt']
  dataObjectsSize: Scalars['BigInt']
  dataObjectsSizeLimit: Scalars['BigInt']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  operatorMetadata?: Maybe<StorageBucketOperatorMetadata>
  operatorMetadataId?: Maybe<Scalars['String']>
  operatorStatus: StorageBucketOperatorStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type StorageBucketConnection = {
  edges: Array<StorageBucketEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StorageBucketCreateInput = {
  acceptingNewBags: Scalars['Boolean']
  dataObjectCountLimit: Scalars['String']
  dataObjectsCount: Scalars['String']
  dataObjectsSize: Scalars['String']
  dataObjectsSizeLimit: Scalars['String']
  operatorMetadata?: Maybe<Scalars['ID']>
  operatorStatus: Scalars['JSONObject']
}

export type StorageBucketEdge = {
  cursor: Scalars['String']
  node: StorageBucket
}

export type StorageBucketOperatorMetadata = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  extra?: Maybe<Scalars['String']>
  id: Scalars['ID']
  nodeEndpoint?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<NodeLocationMetadata>
  nodeLocationId?: Maybe<Scalars['String']>
  storagebucketoperatorMetadata?: Maybe<Array<StorageBucket>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type StorageBucketOperatorMetadataConnection = {
  edges: Array<StorageBucketOperatorMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StorageBucketOperatorMetadataCreateInput = {
  extra?: Maybe<Scalars['String']>
  nodeEndpoint?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<Scalars['ID']>
}

export type StorageBucketOperatorMetadataEdge = {
  cursor: Scalars['String']
  node: StorageBucketOperatorMetadata
}

export enum StorageBucketOperatorMetadataOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ExtraAsc = 'extra_ASC',
  ExtraDesc = 'extra_DESC',
  NodeEndpointAsc = 'nodeEndpoint_ASC',
  NodeEndpointDesc = 'nodeEndpoint_DESC',
  NodeLocationAsc = 'nodeLocation_ASC',
  NodeLocationDesc = 'nodeLocation_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StorageBucketOperatorMetadataUpdateInput = {
  extra?: Maybe<Scalars['String']>
  nodeEndpoint?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<Scalars['ID']>
}

export type StorageBucketOperatorMetadataWhereInput = {
  AND?: Maybe<Array<StorageBucketOperatorMetadataWhereInput>>
  NOT?: Maybe<Array<StorageBucketOperatorMetadataWhereInput>>
  OR?: Maybe<Array<StorageBucketOperatorMetadataWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  extra_contains?: Maybe<Scalars['String']>
  extra_endsWith?: Maybe<Scalars['String']>
  extra_eq?: Maybe<Scalars['String']>
  extra_in?: Maybe<Array<Scalars['String']>>
  extra_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  nodeEndpoint_contains?: Maybe<Scalars['String']>
  nodeEndpoint_endsWith?: Maybe<Scalars['String']>
  nodeEndpoint_eq?: Maybe<Scalars['String']>
  nodeEndpoint_in?: Maybe<Array<Scalars['String']>>
  nodeEndpoint_startsWith?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<NodeLocationMetadataWhereInput>
  storagebucketoperatorMetadata_every?: Maybe<StorageBucketWhereInput>
  storagebucketoperatorMetadata_none?: Maybe<StorageBucketWhereInput>
  storagebucketoperatorMetadata_some?: Maybe<StorageBucketWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type StorageBucketOperatorMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type StorageBucketOperatorStatus =
  | StorageBucketOperatorStatusActive
  | StorageBucketOperatorStatusInvited
  | StorageBucketOperatorStatusMissing

export type StorageBucketOperatorStatusActive = {
  transactorAccountId: Scalars['String']
  workerId: Scalars['Int']
}

export type StorageBucketOperatorStatusInvited = {
  workerId: Scalars['Int']
}

export type StorageBucketOperatorStatusMissing = {
  phantom?: Maybe<Scalars['Int']>
}

export enum StorageBucketOrderByInput {
  AcceptingNewBagsAsc = 'acceptingNewBags_ASC',
  AcceptingNewBagsDesc = 'acceptingNewBags_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DataObjectCountLimitAsc = 'dataObjectCountLimit_ASC',
  DataObjectCountLimitDesc = 'dataObjectCountLimit_DESC',
  DataObjectsCountAsc = 'dataObjectsCount_ASC',
  DataObjectsCountDesc = 'dataObjectsCount_DESC',
  DataObjectsSizeLimitAsc = 'dataObjectsSizeLimit_ASC',
  DataObjectsSizeLimitDesc = 'dataObjectsSizeLimit_DESC',
  DataObjectsSizeAsc = 'dataObjectsSize_ASC',
  DataObjectsSizeDesc = 'dataObjectsSize_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  OperatorMetadataAsc = 'operatorMetadata_ASC',
  OperatorMetadataDesc = 'operatorMetadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StorageBucketUpdateInput = {
  acceptingNewBags?: Maybe<Scalars['Boolean']>
  dataObjectCountLimit?: Maybe<Scalars['String']>
  dataObjectsCount?: Maybe<Scalars['String']>
  dataObjectsSize?: Maybe<Scalars['String']>
  dataObjectsSizeLimit?: Maybe<Scalars['String']>
  operatorMetadata?: Maybe<Scalars['ID']>
  operatorStatus?: Maybe<Scalars['JSONObject']>
}

export type StorageBucketWhereInput = {
  AND?: Maybe<Array<StorageBucketWhereInput>>
  NOT?: Maybe<Array<StorageBucketWhereInput>>
  OR?: Maybe<Array<StorageBucketWhereInput>>
  acceptingNewBags_eq?: Maybe<Scalars['Boolean']>
  acceptingNewBags_in?: Maybe<Array<Scalars['Boolean']>>
  bags_every?: Maybe<StorageBagWhereInput>
  bags_none?: Maybe<StorageBagWhereInput>
  bags_some?: Maybe<StorageBagWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  dataObjectCountLimit_eq?: Maybe<Scalars['BigInt']>
  dataObjectCountLimit_gt?: Maybe<Scalars['BigInt']>
  dataObjectCountLimit_gte?: Maybe<Scalars['BigInt']>
  dataObjectCountLimit_in?: Maybe<Array<Scalars['BigInt']>>
  dataObjectCountLimit_lt?: Maybe<Scalars['BigInt']>
  dataObjectCountLimit_lte?: Maybe<Scalars['BigInt']>
  dataObjectsCount_eq?: Maybe<Scalars['BigInt']>
  dataObjectsCount_gt?: Maybe<Scalars['BigInt']>
  dataObjectsCount_gte?: Maybe<Scalars['BigInt']>
  dataObjectsCount_in?: Maybe<Array<Scalars['BigInt']>>
  dataObjectsCount_lt?: Maybe<Scalars['BigInt']>
  dataObjectsCount_lte?: Maybe<Scalars['BigInt']>
  dataObjectsSizeLimit_eq?: Maybe<Scalars['BigInt']>
  dataObjectsSizeLimit_gt?: Maybe<Scalars['BigInt']>
  dataObjectsSizeLimit_gte?: Maybe<Scalars['BigInt']>
  dataObjectsSizeLimit_in?: Maybe<Array<Scalars['BigInt']>>
  dataObjectsSizeLimit_lt?: Maybe<Scalars['BigInt']>
  dataObjectsSizeLimit_lte?: Maybe<Scalars['BigInt']>
  dataObjectsSize_eq?: Maybe<Scalars['BigInt']>
  dataObjectsSize_gt?: Maybe<Scalars['BigInt']>
  dataObjectsSize_gte?: Maybe<Scalars['BigInt']>
  dataObjectsSize_in?: Maybe<Array<Scalars['BigInt']>>
  dataObjectsSize_lt?: Maybe<Scalars['BigInt']>
  dataObjectsSize_lte?: Maybe<Scalars['BigInt']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  operatorMetadata?: Maybe<StorageBucketOperatorMetadataWhereInput>
  operatorStatus_json?: Maybe<Scalars['JSONObject']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type StorageBucketWhereUniqueInput = {
  id: Scalars['ID']
}

export type StorageDataObject = BaseGraphQlObject & {
  channelavatarPhoto?: Maybe<Array<Channel>>
  channelcoverPhoto?: Maybe<Array<Channel>>
  channelpayoutsupdatedeventpayloadDataObject?: Maybe<Array<ChannelPayoutsUpdatedEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  ipfsHash: Scalars['String']
  isAccepted: Scalars['Boolean']
  size: Scalars['BigInt']
  stateBloatBond: Scalars['BigInt']
  storageBag: StorageBag
  storageBagId: Scalars['String']
  type: DataObjectType
  unsetAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videoMedia?: Maybe<Video>
  videoSubtitle?: Maybe<VideoSubtitle>
  videoThumbnail?: Maybe<Video>
}

export type StorageDataObjectConnection = {
  edges: Array<StorageDataObjectEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StorageDataObjectCreateInput = {
  ipfsHash: Scalars['String']
  isAccepted: Scalars['Boolean']
  size: Scalars['String']
  stateBloatBond: Scalars['String']
  storageBag: Scalars['ID']
  type: Scalars['JSONObject']
  unsetAt?: Maybe<Scalars['DateTime']>
}

export type StorageDataObjectEdge = {
  cursor: Scalars['String']
  node: StorageDataObject
}

export enum StorageDataObjectOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IpfsHashAsc = 'ipfsHash_ASC',
  IpfsHashDesc = 'ipfsHash_DESC',
  IsAcceptedAsc = 'isAccepted_ASC',
  IsAcceptedDesc = 'isAccepted_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  StateBloatBondAsc = 'stateBloatBond_ASC',
  StateBloatBondDesc = 'stateBloatBond_DESC',
  StorageBagAsc = 'storageBag_ASC',
  StorageBagDesc = 'storageBag_DESC',
  UnsetAtAsc = 'unsetAt_ASC',
  UnsetAtDesc = 'unsetAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StorageDataObjectUpdateInput = {
  ipfsHash?: Maybe<Scalars['String']>
  isAccepted?: Maybe<Scalars['Boolean']>
  size?: Maybe<Scalars['String']>
  stateBloatBond?: Maybe<Scalars['String']>
  storageBag?: Maybe<Scalars['ID']>
  type?: Maybe<Scalars['JSONObject']>
  unsetAt?: Maybe<Scalars['DateTime']>
}

export type StorageDataObjectWhereInput = {
  AND?: Maybe<Array<StorageDataObjectWhereInput>>
  NOT?: Maybe<Array<StorageDataObjectWhereInput>>
  OR?: Maybe<Array<StorageDataObjectWhereInput>>
  channelavatarPhoto_every?: Maybe<ChannelWhereInput>
  channelavatarPhoto_none?: Maybe<ChannelWhereInput>
  channelavatarPhoto_some?: Maybe<ChannelWhereInput>
  channelcoverPhoto_every?: Maybe<ChannelWhereInput>
  channelcoverPhoto_none?: Maybe<ChannelWhereInput>
  channelcoverPhoto_some?: Maybe<ChannelWhereInput>
  channelpayoutsupdatedeventpayloadDataObject_every?: Maybe<ChannelPayoutsUpdatedEventWhereInput>
  channelpayoutsupdatedeventpayloadDataObject_none?: Maybe<ChannelPayoutsUpdatedEventWhereInput>
  channelpayoutsupdatedeventpayloadDataObject_some?: Maybe<ChannelPayoutsUpdatedEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  ipfsHash_contains?: Maybe<Scalars['String']>
  ipfsHash_endsWith?: Maybe<Scalars['String']>
  ipfsHash_eq?: Maybe<Scalars['String']>
  ipfsHash_in?: Maybe<Array<Scalars['String']>>
  ipfsHash_startsWith?: Maybe<Scalars['String']>
  isAccepted_eq?: Maybe<Scalars['Boolean']>
  isAccepted_in?: Maybe<Array<Scalars['Boolean']>>
  size_eq?: Maybe<Scalars['BigInt']>
  size_gt?: Maybe<Scalars['BigInt']>
  size_gte?: Maybe<Scalars['BigInt']>
  size_in?: Maybe<Array<Scalars['BigInt']>>
  size_lt?: Maybe<Scalars['BigInt']>
  size_lte?: Maybe<Scalars['BigInt']>
  stateBloatBond_eq?: Maybe<Scalars['BigInt']>
  stateBloatBond_gt?: Maybe<Scalars['BigInt']>
  stateBloatBond_gte?: Maybe<Scalars['BigInt']>
  stateBloatBond_in?: Maybe<Array<Scalars['BigInt']>>
  stateBloatBond_lt?: Maybe<Scalars['BigInt']>
  stateBloatBond_lte?: Maybe<Scalars['BigInt']>
  storageBag?: Maybe<StorageBagWhereInput>
  type_json?: Maybe<Scalars['JSONObject']>
  unsetAt_eq?: Maybe<Scalars['DateTime']>
  unsetAt_gt?: Maybe<Scalars['DateTime']>
  unsetAt_gte?: Maybe<Scalars['DateTime']>
  unsetAt_lt?: Maybe<Scalars['DateTime']>
  unsetAt_lte?: Maybe<Scalars['DateTime']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videoMedia?: Maybe<VideoWhereInput>
  videoSubtitle?: Maybe<VideoSubtitleWhereInput>
  videoThumbnail?: Maybe<VideoWhereInput>
}

export type StorageDataObjectWhereUniqueInput = {
  id: Scalars['ID']
}

export type Subscription = {
  stateSubscription: ProcessorState
}

export type TerminateWorkingGroupLeadProposalDetails = {
  lead?: Maybe<Worker>
  slashingAmount?: Maybe<Scalars['BigInt']>
}

export type TerminatedLeaderEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    penalty?: Maybe<Scalars['BigInt']>
    rationale?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type TerminatedLeaderEventConnection = {
  edges: Array<TerminatedLeaderEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type TerminatedLeaderEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  penalty?: Maybe<Scalars['String']>
  rationale?: Maybe<Scalars['String']>
  worker: Scalars['ID']
}

export type TerminatedLeaderEventEdge = {
  cursor: Scalars['String']
  node: TerminatedLeaderEvent
}

export enum TerminatedLeaderEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PenaltyAsc = 'penalty_ASC',
  PenaltyDesc = 'penalty_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type TerminatedLeaderEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  penalty?: Maybe<Scalars['String']>
  rationale?: Maybe<Scalars['String']>
  worker?: Maybe<Scalars['ID']>
}

export type TerminatedLeaderEventWhereInput = {
  AND?: Maybe<Array<TerminatedLeaderEventWhereInput>>
  NOT?: Maybe<Array<TerminatedLeaderEventWhereInput>>
  OR?: Maybe<Array<TerminatedLeaderEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  penalty_eq?: Maybe<Scalars['BigInt']>
  penalty_gt?: Maybe<Scalars['BigInt']>
  penalty_gte?: Maybe<Scalars['BigInt']>
  penalty_in?: Maybe<Array<Scalars['BigInt']>>
  penalty_lt?: Maybe<Scalars['BigInt']>
  penalty_lte?: Maybe<Scalars['BigInt']>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type TerminatedLeaderEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type TerminatedWorkerEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    penalty?: Maybe<Scalars['BigInt']>
    rationale?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type TerminatedWorkerEventConnection = {
  edges: Array<TerminatedWorkerEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type TerminatedWorkerEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  penalty?: Maybe<Scalars['String']>
  rationale?: Maybe<Scalars['String']>
  worker: Scalars['ID']
}

export type TerminatedWorkerEventEdge = {
  cursor: Scalars['String']
  node: TerminatedWorkerEvent
}

export enum TerminatedWorkerEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PenaltyAsc = 'penalty_ASC',
  PenaltyDesc = 'penalty_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type TerminatedWorkerEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  penalty?: Maybe<Scalars['String']>
  rationale?: Maybe<Scalars['String']>
  worker?: Maybe<Scalars['ID']>
}

export type TerminatedWorkerEventWhereInput = {
  AND?: Maybe<Array<TerminatedWorkerEventWhereInput>>
  NOT?: Maybe<Array<TerminatedWorkerEventWhereInput>>
  OR?: Maybe<Array<TerminatedWorkerEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  penalty_eq?: Maybe<Scalars['BigInt']>
  penalty_gt?: Maybe<Scalars['BigInt']>
  penalty_gte?: Maybe<Scalars['BigInt']>
  penalty_in?: Maybe<Array<Scalars['BigInt']>>
  penalty_lt?: Maybe<Scalars['BigInt']>
  penalty_lte?: Maybe<Scalars['BigInt']>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type TerminatedWorkerEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ThreadCreatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    text: Scalars['String']
    thread: ForumThread
    threadId: Scalars['String']
    title: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ThreadCreatedEventConnection = {
  edges: Array<ThreadCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadCreatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  text: Scalars['String']
  thread: Scalars['ID']
  title: Scalars['String']
}

export type ThreadCreatedEventEdge = {
  cursor: Scalars['String']
  node: ThreadCreatedEvent
}

export enum ThreadCreatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadCreatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  text?: Maybe<Scalars['String']>
  thread?: Maybe<Scalars['ID']>
  title?: Maybe<Scalars['String']>
}

export type ThreadCreatedEventWhereInput = {
  AND?: Maybe<Array<ThreadCreatedEventWhereInput>>
  NOT?: Maybe<Array<ThreadCreatedEventWhereInput>>
  OR?: Maybe<Array<ThreadCreatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  text_contains?: Maybe<Scalars['String']>
  text_endsWith?: Maybe<Scalars['String']>
  text_eq?: Maybe<Scalars['String']>
  text_in?: Maybe<Array<Scalars['String']>>
  text_startsWith?: Maybe<Scalars['String']>
  thread?: Maybe<ForumThreadWhereInput>
  title_contains?: Maybe<Scalars['String']>
  title_endsWith?: Maybe<Scalars['String']>
  title_eq?: Maybe<Scalars['String']>
  title_in?: Maybe<Array<Scalars['String']>>
  title_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ThreadCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ThreadDeletedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    thread: ForumThread
    threadId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ThreadDeletedEventConnection = {
  edges: Array<ThreadDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadDeletedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  thread: Scalars['ID']
}

export type ThreadDeletedEventEdge = {
  cursor: Scalars['String']
  node: ThreadDeletedEvent
}

export enum ThreadDeletedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadDeletedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  thread?: Maybe<Scalars['ID']>
}

export type ThreadDeletedEventWhereInput = {
  AND?: Maybe<Array<ThreadDeletedEventWhereInput>>
  NOT?: Maybe<Array<ThreadDeletedEventWhereInput>>
  OR?: Maybe<Array<ThreadDeletedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  thread?: Maybe<ForumThreadWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ThreadDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ThreadMetadataUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newTitle?: Maybe<Scalars['String']>
    thread: ForumThread
    threadId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ThreadMetadataUpdatedEventConnection = {
  edges: Array<ThreadMetadataUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadMetadataUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newTitle?: Maybe<Scalars['String']>
  thread: Scalars['ID']
}

export type ThreadMetadataUpdatedEventEdge = {
  cursor: Scalars['String']
  node: ThreadMetadataUpdatedEvent
}

export enum ThreadMetadataUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewTitleAsc = 'newTitle_ASC',
  NewTitleDesc = 'newTitle_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadMetadataUpdatedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newTitle?: Maybe<Scalars['String']>
  thread?: Maybe<Scalars['ID']>
}

export type ThreadMetadataUpdatedEventWhereInput = {
  AND?: Maybe<Array<ThreadMetadataUpdatedEventWhereInput>>
  NOT?: Maybe<Array<ThreadMetadataUpdatedEventWhereInput>>
  OR?: Maybe<Array<ThreadMetadataUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newTitle_contains?: Maybe<Scalars['String']>
  newTitle_endsWith?: Maybe<Scalars['String']>
  newTitle_eq?: Maybe<Scalars['String']>
  newTitle_in?: Maybe<Array<Scalars['String']>>
  newTitle_startsWith?: Maybe<Scalars['String']>
  thread?: Maybe<ForumThreadWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ThreadMetadataUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ThreadModeratedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    rationale: Scalars['String']
    thread: ForumThread
    threadId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ThreadModeratedEventConnection = {
  edges: Array<ThreadModeratedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadModeratedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale: Scalars['String']
  thread: Scalars['ID']
}

export type ThreadModeratedEventEdge = {
  cursor: Scalars['String']
  node: ThreadModeratedEvent
}

export enum ThreadModeratedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadModeratedEventUpdateInput = {
  actor?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
  thread?: Maybe<Scalars['ID']>
}

export type ThreadModeratedEventWhereInput = {
  AND?: Maybe<Array<ThreadModeratedEventWhereInput>>
  NOT?: Maybe<Array<ThreadModeratedEventWhereInput>>
  OR?: Maybe<Array<ThreadModeratedEventWhereInput>>
  actor?: Maybe<WorkerWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  thread?: Maybe<ForumThreadWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ThreadModeratedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ThreadMovedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newCategory: ForumCategory
    newCategoryId: Scalars['String']
    oldCategory: ForumCategory
    oldCategoryId: Scalars['String']
    thread: ForumThread
    threadId: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type ThreadMovedEventConnection = {
  edges: Array<ThreadMovedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadMovedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newCategory: Scalars['ID']
  oldCategory: Scalars['ID']
  thread: Scalars['ID']
}

export type ThreadMovedEventEdge = {
  cursor: Scalars['String']
  node: ThreadMovedEvent
}

export enum ThreadMovedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewCategoryAsc = 'newCategory_ASC',
  NewCategoryDesc = 'newCategory_DESC',
  OldCategoryAsc = 'oldCategory_ASC',
  OldCategoryDesc = 'oldCategory_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadMovedEventUpdateInput = {
  actor?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newCategory?: Maybe<Scalars['ID']>
  oldCategory?: Maybe<Scalars['ID']>
  thread?: Maybe<Scalars['ID']>
}

export type ThreadMovedEventWhereInput = {
  AND?: Maybe<Array<ThreadMovedEventWhereInput>>
  NOT?: Maybe<Array<ThreadMovedEventWhereInput>>
  OR?: Maybe<Array<ThreadMovedEventWhereInput>>
  actor?: Maybe<WorkerWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newCategory?: Maybe<ForumCategoryWhereInput>
  oldCategory?: Maybe<ForumCategoryWhereInput>
  thread?: Maybe<ForumThreadWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type ThreadMovedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ThreadStatus =
  | ThreadStatusActive
  | ThreadStatusLocked
  | ThreadStatusModerated
  | ThreadStatusRemoved

export type ThreadStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type ThreadStatusLocked = {
  threadDeletedEvent?: Maybe<ThreadDeletedEvent>
}

export type ThreadStatusModerated = {
  threadModeratedEvent?: Maybe<ThreadModeratedEvent>
}

export type ThreadStatusRemoved = {
  threadDeletedEvent?: Maybe<ThreadDeletedEvent>
}

export type ThreadsByTitleFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: ThreadsByTitleSearchResult
  rank: Scalars['Float']
}

export type ThreadsByTitleSearchResult = ForumThread

export type TransactionalStatus =
  | TransactionalStatusBuyNow
  | TransactionalStatusIdle
  | TransactionalStatusInitiatedOfferToMember

export type TransactionalStatusBuyNow = {
  price: Scalars['BigInt']
}

export type TransactionalStatusIdle = {
  dummy?: Maybe<Scalars['Int']>
}

export type TransactionalStatusInitiatedOfferToMember = {
  memberId: Scalars['Int']
  price?: Maybe<Scalars['BigInt']>
}

export type TransactionalStatusUpdate = BaseGraphQlObject & {
  changedAt: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  nft: OwnedNft
  nftId: Scalars['String']
  transactionalStatus?: Maybe<TransactionalStatus>
  transactionalStatusAuction?: Maybe<Auction>
  transactionalStatusAuctionId?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type TransactionalStatusUpdateConnection = {
  edges: Array<TransactionalStatusUpdateEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type TransactionalStatusUpdateCreateInput = {
  changedAt: Scalars['Float']
  nft: Scalars['ID']
  transactionalStatus: Scalars['JSONObject']
  transactionalStatusAuction?: Maybe<Scalars['ID']>
}

export type TransactionalStatusUpdateEdge = {
  cursor: Scalars['String']
  node: TransactionalStatusUpdate
}

export enum TransactionalStatusUpdateOrderByInput {
  ChangedAtAsc = 'changedAt_ASC',
  ChangedAtDesc = 'changedAt_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  NftAsc = 'nft_ASC',
  NftDesc = 'nft_DESC',
  TransactionalStatusAuctionAsc = 'transactionalStatusAuction_ASC',
  TransactionalStatusAuctionDesc = 'transactionalStatusAuction_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type TransactionalStatusUpdateUpdateInput = {
  changedAt?: Maybe<Scalars['Float']>
  nft?: Maybe<Scalars['ID']>
  transactionalStatus?: Maybe<Scalars['JSONObject']>
  transactionalStatusAuction?: Maybe<Scalars['ID']>
}

export type TransactionalStatusUpdateWhereInput = {
  AND?: Maybe<Array<TransactionalStatusUpdateWhereInput>>
  NOT?: Maybe<Array<TransactionalStatusUpdateWhereInput>>
  OR?: Maybe<Array<TransactionalStatusUpdateWhereInput>>
  changedAt_eq?: Maybe<Scalars['Int']>
  changedAt_gt?: Maybe<Scalars['Int']>
  changedAt_gte?: Maybe<Scalars['Int']>
  changedAt_in?: Maybe<Array<Scalars['Int']>>
  changedAt_lt?: Maybe<Scalars['Int']>
  changedAt_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  nft?: Maybe<OwnedNftWhereInput>
  transactionalStatusAuction?: Maybe<AuctionWhereInput>
  transactionalStatus_json?: Maybe<Scalars['JSONObject']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type TransactionalStatusUpdateWhereUniqueInput = {
  id: Scalars['ID']
}

export type UpcomingOpeningAdded = {
  upcomingOpeningId: Scalars['String']
}

export type UpcomingOpeningRemoved = {
  upcomingOpeningId: Scalars['String']
}

export type UpcomingWorkingGroupOpening = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInEvent: StatusTextChangedEvent
  createdInEventId: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  expectedStart?: Maybe<Scalars['DateTime']>
  group: WorkingGroup
  groupId: Scalars['String']
  id: Scalars['ID']
  metadata: WorkingGroupOpeningMetadata
  metadataId: Scalars['String']
  rewardPerBlock?: Maybe<Scalars['BigInt']>
  stakeAmount?: Maybe<Scalars['BigInt']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type UpcomingWorkingGroupOpeningConnection = {
  edges: Array<UpcomingWorkingGroupOpeningEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type UpcomingWorkingGroupOpeningCreateInput = {
  createdInEvent: Scalars['ID']
  expectedStart?: Maybe<Scalars['DateTime']>
  group: Scalars['ID']
  metadata: Scalars['ID']
  rewardPerBlock?: Maybe<Scalars['String']>
  stakeAmount?: Maybe<Scalars['String']>
}

export type UpcomingWorkingGroupOpeningEdge = {
  cursor: Scalars['String']
  node: UpcomingWorkingGroupOpening
}

export enum UpcomingWorkingGroupOpeningOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInEventAsc = 'createdInEvent_ASC',
  CreatedInEventDesc = 'createdInEvent_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ExpectedStartAsc = 'expectedStart_ASC',
  ExpectedStartDesc = 'expectedStart_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  RewardPerBlockAsc = 'rewardPerBlock_ASC',
  RewardPerBlockDesc = 'rewardPerBlock_DESC',
  StakeAmountAsc = 'stakeAmount_ASC',
  StakeAmountDesc = 'stakeAmount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type UpcomingWorkingGroupOpeningUpdateInput = {
  createdInEvent?: Maybe<Scalars['ID']>
  expectedStart?: Maybe<Scalars['DateTime']>
  group?: Maybe<Scalars['ID']>
  metadata?: Maybe<Scalars['ID']>
  rewardPerBlock?: Maybe<Scalars['String']>
  stakeAmount?: Maybe<Scalars['String']>
}

export type UpcomingWorkingGroupOpeningWhereInput = {
  AND?: Maybe<Array<UpcomingWorkingGroupOpeningWhereInput>>
  NOT?: Maybe<Array<UpcomingWorkingGroupOpeningWhereInput>>
  OR?: Maybe<Array<UpcomingWorkingGroupOpeningWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInEvent?: Maybe<StatusTextChangedEventWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  expectedStart_eq?: Maybe<Scalars['DateTime']>
  expectedStart_gt?: Maybe<Scalars['DateTime']>
  expectedStart_gte?: Maybe<Scalars['DateTime']>
  expectedStart_lt?: Maybe<Scalars['DateTime']>
  expectedStart_lte?: Maybe<Scalars['DateTime']>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  metadata?: Maybe<WorkingGroupOpeningMetadataWhereInput>
  rewardPerBlock_eq?: Maybe<Scalars['BigInt']>
  rewardPerBlock_gt?: Maybe<Scalars['BigInt']>
  rewardPerBlock_gte?: Maybe<Scalars['BigInt']>
  rewardPerBlock_in?: Maybe<Array<Scalars['BigInt']>>
  rewardPerBlock_lt?: Maybe<Scalars['BigInt']>
  rewardPerBlock_lte?: Maybe<Scalars['BigInt']>
  stakeAmount_eq?: Maybe<Scalars['BigInt']>
  stakeAmount_gt?: Maybe<Scalars['BigInt']>
  stakeAmount_gte?: Maybe<Scalars['BigInt']>
  stakeAmount_in?: Maybe<Array<Scalars['BigInt']>>
  stakeAmount_lt?: Maybe<Scalars['BigInt']>
  stakeAmount_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type UpcomingWorkingGroupOpeningWhereUniqueInput = {
  id: Scalars['ID']
}

export type UpdateChannelPayoutsProposalDetails = {
  channelCashoutsEnabled?: Maybe<Scalars['Boolean']>
  commitment?: Maybe<Scalars['String']>
  maxCashoutAllowed?: Maybe<Scalars['BigInt']>
  minCashoutAllowed?: Maybe<Scalars['BigInt']>
  payloadHash?: Maybe<Scalars['String']>
}

export type UpdateWorkingGroupBudgetProposalDetails = {
  amount: Scalars['BigInt']
  group?: Maybe<WorkingGroup>
}

export type VariantNone = {
  phantom?: Maybe<Scalars['Int']>
}

export type VetoProposalDetails = {
  proposal?: Maybe<Proposal>
}

export type Video = BaseGraphQlObject & {
  auctionbidcanceledeventvideo?: Maybe<Array<AuctionBidCanceledEvent>>
  auctionbidmadeeventvideo?: Maybe<Array<AuctionBidMadeEvent>>
  auctioncanceledeventvideo?: Maybe<Array<AuctionCanceledEvent>>
  bidmadecompletingauctioneventvideo?: Maybe<Array<BidMadeCompletingAuctionEvent>>
  buynowcanceledeventvideo?: Maybe<Array<BuyNowCanceledEvent>>
  buynowpriceupdatedeventvideo?: Maybe<Array<BuyNowPriceUpdatedEvent>>
  category?: Maybe<VideoCategory>
  categoryId?: Maybe<Scalars['String']>
  channel: Channel
  channelId: Scalars['String']
  commentcreatedeventvideo?: Maybe<Array<CommentCreatedEvent>>
  commentdeletedeventvideo?: Maybe<Array<CommentDeletedEvent>>
  commentmoderatedeventvideo?: Maybe<Array<CommentModeratedEvent>>
  commentpinnedeventvideo?: Maybe<Array<CommentPinnedEvent>>
  commentreactedeventvideo?: Maybe<Array<CommentReactedEvent>>
  commentreactionscountbyreactionidvideo?: Maybe<Array<CommentReactionsCountByReactionId>>
  commentreactionvideo?: Maybe<Array<CommentReaction>>
  comments: Array<Comment>
  commentsCount: Scalars['Int']
  commenttextupdatedeventvideo?: Maybe<Array<CommentTextUpdatedEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  duration?: Maybe<Scalars['Int']>
  englishauctionsettledeventvideo?: Maybe<Array<EnglishAuctionSettledEvent>>
  englishauctionstartedeventvideo?: Maybe<Array<EnglishAuctionStartedEvent>>
  entryApp?: Maybe<App>
  entryAppId?: Maybe<Scalars['String']>
  hasMarketing?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  isCensored: Scalars['Boolean']
  isCommentSectionEnabled: Scalars['Boolean']
  isExplicit?: Maybe<Scalars['Boolean']>
  isPublic?: Maybe<Scalars['Boolean']>
  isReactionFeatureEnabled: Scalars['Boolean']
  language?: Maybe<Language>
  languageId?: Maybe<Scalars['String']>
  license?: Maybe<License>
  licenseId?: Maybe<Scalars['String']>
  media?: Maybe<StorageDataObject>
  mediaId?: Maybe<Scalars['String']>
  mediaMetadata?: Maybe<VideoMediaMetadata>
  mediaMetadataId?: Maybe<Scalars['String']>
  nft?: Maybe<OwnedNft>
  nftId?: Maybe<Scalars['String']>
  nftboughteventvideo?: Maybe<Array<NftBoughtEvent>>
  nftissuedeventvideo?: Maybe<Array<NftIssuedEvent>>
  nftsellordermadeeventvideo?: Maybe<Array<NftSellOrderMadeEvent>>
  nftslingedbacktotheoriginalartisteventvideo?: Maybe<Array<NftSlingedBackToTheOriginalArtistEvent>>
  offeracceptedeventvideo?: Maybe<Array<OfferAcceptedEvent>>
  offercanceledeventvideo?: Maybe<Array<OfferCanceledEvent>>
  offerstartedeventvideo?: Maybe<Array<OfferStartedEvent>>
  openauctionbidacceptedeventvideo?: Maybe<Array<OpenAuctionBidAcceptedEvent>>
  openauctionstartedeventvideo?: Maybe<Array<OpenAuctionStartedEvent>>
  pinnedComment?: Maybe<Comment>
  publishedBeforeJoystream?: Maybe<Scalars['DateTime']>
  reactions: Array<VideoReaction>
  reactionsCount: Scalars['Int']
  reactionsCountByReactionId: Array<VideoReactionsCountByReactionType>
  subtitles: Array<VideoSubtitle>
  thumbnailPhoto?: Maybe<StorageDataObject>
  thumbnailPhotoId?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videoStateBloatBond: Scalars['BigInt']
  videoreactedeventvideo?: Maybe<Array<VideoReactedEvent>>
  videoreactionspreferenceeventvideo?: Maybe<Array<VideoReactionsPreferenceEvent>>
  views: Scalars['Int']
  ytVideoId?: Maybe<Scalars['String']>
}

export type VideoAssetsDeletedByModeratorEvent = BaseGraphQlObject & {
  actor: ContentActor
  areNftAssets?: Maybe<Scalars['Boolean']>
  assetIds: Array<Scalars['Int']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  network: Network
  rationale: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videoId: Scalars['Int']
}

export type VideoAssetsDeletedByModeratorEventConnection = {
  edges: Array<VideoAssetsDeletedByModeratorEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoAssetsDeletedByModeratorEventCreateInput = {
  actor: Scalars['JSONObject']
  areNftAssets?: Maybe<Scalars['Boolean']>
  assetIds: Array<Scalars['Int']>
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale: Scalars['String']
  videoId: Scalars['Float']
}

export type VideoAssetsDeletedByModeratorEventEdge = {
  cursor: Scalars['String']
  node: VideoAssetsDeletedByModeratorEvent
}

export enum VideoAssetsDeletedByModeratorEventOrderByInput {
  AreNftAssetsAsc = 'areNftAssets_ASC',
  AreNftAssetsDesc = 'areNftAssets_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoIdAsc = 'videoId_ASC',
  VideoIdDesc = 'videoId_DESC',
}

export type VideoAssetsDeletedByModeratorEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  areNftAssets?: Maybe<Scalars['Boolean']>
  assetIds?: Maybe<Array<Scalars['Int']>>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
  videoId?: Maybe<Scalars['Float']>
}

export type VideoAssetsDeletedByModeratorEventWhereInput = {
  AND?: Maybe<Array<VideoAssetsDeletedByModeratorEventWhereInput>>
  NOT?: Maybe<Array<VideoAssetsDeletedByModeratorEventWhereInput>>
  OR?: Maybe<Array<VideoAssetsDeletedByModeratorEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  areNftAssets_eq?: Maybe<Scalars['Boolean']>
  areNftAssets_in?: Maybe<Array<Scalars['Boolean']>>
  assetIds_containsAll?: Maybe<Array<Scalars['Int']>>
  assetIds_containsAny?: Maybe<Array<Scalars['Int']>>
  assetIds_containsNone?: Maybe<Array<Scalars['Int']>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videoId_eq?: Maybe<Scalars['Int']>
  videoId_gt?: Maybe<Scalars['Int']>
  videoId_gte?: Maybe<Scalars['Int']>
  videoId_in?: Maybe<Array<Scalars['Int']>>
  videoId_lt?: Maybe<Scalars['Int']>
  videoId_lte?: Maybe<Scalars['Int']>
}

export type VideoAssetsDeletedByModeratorEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoCategoriesByNameFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: VideoCategoriesByNameSearchResult
  rank: Scalars['Float']
}

export type VideoCategoriesByNameSearchResult = VideoCategory

export type VideoCategory = BaseGraphQlObject & {
  activeVideosCounter: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  name?: Maybe<Scalars['String']>
  nftissuedeventvideoCategory?: Maybe<Array<NftIssuedEvent>>
  nfts: Array<OwnedNft>
  parentCategory?: Maybe<VideoCategory>
  parentCategoryId?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videocategoryparentCategory?: Maybe<Array<VideoCategory>>
  videos: Array<Video>
}

export type VideoCategoryConnection = {
  edges: Array<VideoCategoryEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoCategoryCreateInput = {
  activeVideosCounter: Scalars['Float']
  createdInBlock: Scalars['Float']
  description?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  parentCategory?: Maybe<Scalars['ID']>
}

export type VideoCategoryEdge = {
  cursor: Scalars['String']
  node: VideoCategory
}

export enum VideoCategoryOrderByInput {
  ActiveVideosCounterAsc = 'activeVideosCounter_ASC',
  ActiveVideosCounterDesc = 'activeVideosCounter_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ParentCategoryAsc = 'parentCategory_ASC',
  ParentCategoryDesc = 'parentCategory_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VideoCategoryUpdateInput = {
  activeVideosCounter?: Maybe<Scalars['Float']>
  createdInBlock?: Maybe<Scalars['Float']>
  description?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  parentCategory?: Maybe<Scalars['ID']>
}

export type VideoCategoryWhereInput = {
  AND?: Maybe<Array<VideoCategoryWhereInput>>
  NOT?: Maybe<Array<VideoCategoryWhereInput>>
  OR?: Maybe<Array<VideoCategoryWhereInput>>
  activeVideosCounter_eq?: Maybe<Scalars['Int']>
  activeVideosCounter_gt?: Maybe<Scalars['Int']>
  activeVideosCounter_gte?: Maybe<Scalars['Int']>
  activeVideosCounter_in?: Maybe<Array<Scalars['Int']>>
  activeVideosCounter_lt?: Maybe<Scalars['Int']>
  activeVideosCounter_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInBlock_eq?: Maybe<Scalars['Int']>
  createdInBlock_gt?: Maybe<Scalars['Int']>
  createdInBlock_gte?: Maybe<Scalars['Int']>
  createdInBlock_in?: Maybe<Array<Scalars['Int']>>
  createdInBlock_lt?: Maybe<Scalars['Int']>
  createdInBlock_lte?: Maybe<Scalars['Int']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  name_contains?: Maybe<Scalars['String']>
  name_endsWith?: Maybe<Scalars['String']>
  name_eq?: Maybe<Scalars['String']>
  name_in?: Maybe<Array<Scalars['String']>>
  name_startsWith?: Maybe<Scalars['String']>
  nftissuedeventvideoCategory_every?: Maybe<NftIssuedEventWhereInput>
  nftissuedeventvideoCategory_none?: Maybe<NftIssuedEventWhereInput>
  nftissuedeventvideoCategory_some?: Maybe<NftIssuedEventWhereInput>
  nfts_every?: Maybe<OwnedNftWhereInput>
  nfts_none?: Maybe<OwnedNftWhereInput>
  nfts_some?: Maybe<OwnedNftWhereInput>
  parentCategory?: Maybe<VideoCategoryWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videocategoryparentCategory_every?: Maybe<VideoCategoryWhereInput>
  videocategoryparentCategory_none?: Maybe<VideoCategoryWhereInput>
  videocategoryparentCategory_some?: Maybe<VideoCategoryWhereInput>
  videos_every?: Maybe<VideoWhereInput>
  videos_none?: Maybe<VideoWhereInput>
  videos_some?: Maybe<VideoWhereInput>
}

export type VideoCategoryWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoConnection = {
  edges: Array<VideoEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoCreateInput = {
  category?: Maybe<Scalars['ID']>
  channel: Scalars['ID']
  commentsCount: Scalars['Float']
  createdInBlock: Scalars['Float']
  description?: Maybe<Scalars['String']>
  duration?: Maybe<Scalars['Float']>
  entryApp?: Maybe<Scalars['ID']>
  hasMarketing?: Maybe<Scalars['Boolean']>
  isCensored: Scalars['Boolean']
  isCommentSectionEnabled: Scalars['Boolean']
  isExplicit?: Maybe<Scalars['Boolean']>
  isPublic?: Maybe<Scalars['Boolean']>
  isReactionFeatureEnabled: Scalars['Boolean']
  language?: Maybe<Scalars['ID']>
  license?: Maybe<Scalars['ID']>
  media?: Maybe<Scalars['ID']>
  mediaMetadata?: Maybe<Scalars['ID']>
  nft?: Maybe<Scalars['ID']>
  publishedBeforeJoystream?: Maybe<Scalars['DateTime']>
  reactionsCount: Scalars['Float']
  thumbnailPhoto?: Maybe<Scalars['ID']>
  title?: Maybe<Scalars['String']>
  videoStateBloatBond: Scalars['String']
  ytVideoId?: Maybe<Scalars['String']>
}

export type VideoDeletedByModeratorEvent = BaseGraphQlObject & {
  actor: ContentActor
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  network: Network
  rationale: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videoId: Scalars['Int']
}

export type VideoDeletedByModeratorEventConnection = {
  edges: Array<VideoDeletedByModeratorEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoDeletedByModeratorEventCreateInput = {
  actor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale: Scalars['String']
  videoId: Scalars['Float']
}

export type VideoDeletedByModeratorEventEdge = {
  cursor: Scalars['String']
  node: VideoDeletedByModeratorEvent
}

export enum VideoDeletedByModeratorEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoIdAsc = 'videoId_ASC',
  VideoIdDesc = 'videoId_DESC',
}

export type VideoDeletedByModeratorEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
  videoId?: Maybe<Scalars['Float']>
}

export type VideoDeletedByModeratorEventWhereInput = {
  AND?: Maybe<Array<VideoDeletedByModeratorEventWhereInput>>
  NOT?: Maybe<Array<VideoDeletedByModeratorEventWhereInput>>
  OR?: Maybe<Array<VideoDeletedByModeratorEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videoId_eq?: Maybe<Scalars['Int']>
  videoId_gt?: Maybe<Scalars['Int']>
  videoId_gte?: Maybe<Scalars['Int']>
  videoId_in?: Maybe<Array<Scalars['Int']>>
  videoId_lt?: Maybe<Scalars['Int']>
  videoId_lte?: Maybe<Scalars['Int']>
}

export type VideoDeletedByModeratorEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoDeletedEvent = BaseGraphQlObject & {
  actor: ContentActor
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  network: Network
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videoId: Scalars['Int']
}

export type VideoDeletedEventConnection = {
  edges: Array<VideoDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoDeletedEventCreateInput = {
  actor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  videoId: Scalars['Float']
}

export type VideoDeletedEventEdge = {
  cursor: Scalars['String']
  node: VideoDeletedEvent
}

export enum VideoDeletedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoIdAsc = 'videoId_ASC',
  VideoIdDesc = 'videoId_DESC',
}

export type VideoDeletedEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  videoId?: Maybe<Scalars['Float']>
}

export type VideoDeletedEventWhereInput = {
  AND?: Maybe<Array<VideoDeletedEventWhereInput>>
  NOT?: Maybe<Array<VideoDeletedEventWhereInput>>
  OR?: Maybe<Array<VideoDeletedEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videoId_eq?: Maybe<Scalars['Int']>
  videoId_gt?: Maybe<Scalars['Int']>
  videoId_gte?: Maybe<Scalars['Int']>
  videoId_in?: Maybe<Array<Scalars['Int']>>
  videoId_lt?: Maybe<Scalars['Int']>
  videoId_lte?: Maybe<Scalars['Int']>
}

export type VideoDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoEdge = {
  cursor: Scalars['String']
  node: Video
}

export type VideoHero = {
  heroPosterUrl: Scalars['String']
  heroTitle: Scalars['String']
  heroVideoCutUrl: Scalars['String']
  video: Video
  videoId: Scalars['ID']
}

export type VideoHeroInput = {
  heroPosterUrl: Scalars['String']
  heroTitle: Scalars['String']
  heroVideoCutUrl: Scalars['String']
  videoId: Scalars['ID']
}

export type VideoMediaEncoding = BaseGraphQlObject & {
  codecName?: Maybe<Scalars['String']>
  container?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  mimeMediaType?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videomediametadataencoding?: Maybe<Array<VideoMediaMetadata>>
}

export type VideoMediaEncodingConnection = {
  edges: Array<VideoMediaEncodingEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoMediaEncodingCreateInput = {
  codecName?: Maybe<Scalars['String']>
  container?: Maybe<Scalars['String']>
  mimeMediaType?: Maybe<Scalars['String']>
}

export type VideoMediaEncodingEdge = {
  cursor: Scalars['String']
  node: VideoMediaEncoding
}

export enum VideoMediaEncodingOrderByInput {
  CodecNameAsc = 'codecName_ASC',
  CodecNameDesc = 'codecName_DESC',
  ContainerAsc = 'container_ASC',
  ContainerDesc = 'container_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MimeMediaTypeAsc = 'mimeMediaType_ASC',
  MimeMediaTypeDesc = 'mimeMediaType_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VideoMediaEncodingUpdateInput = {
  codecName?: Maybe<Scalars['String']>
  container?: Maybe<Scalars['String']>
  mimeMediaType?: Maybe<Scalars['String']>
}

export type VideoMediaEncodingWhereInput = {
  AND?: Maybe<Array<VideoMediaEncodingWhereInput>>
  NOT?: Maybe<Array<VideoMediaEncodingWhereInput>>
  OR?: Maybe<Array<VideoMediaEncodingWhereInput>>
  codecName_contains?: Maybe<Scalars['String']>
  codecName_endsWith?: Maybe<Scalars['String']>
  codecName_eq?: Maybe<Scalars['String']>
  codecName_in?: Maybe<Array<Scalars['String']>>
  codecName_startsWith?: Maybe<Scalars['String']>
  container_contains?: Maybe<Scalars['String']>
  container_endsWith?: Maybe<Scalars['String']>
  container_eq?: Maybe<Scalars['String']>
  container_in?: Maybe<Array<Scalars['String']>>
  container_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  mimeMediaType_contains?: Maybe<Scalars['String']>
  mimeMediaType_endsWith?: Maybe<Scalars['String']>
  mimeMediaType_eq?: Maybe<Scalars['String']>
  mimeMediaType_in?: Maybe<Array<Scalars['String']>>
  mimeMediaType_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videomediametadataencoding_every?: Maybe<VideoMediaMetadataWhereInput>
  videomediametadataencoding_none?: Maybe<VideoMediaMetadataWhereInput>
  videomediametadataencoding_some?: Maybe<VideoMediaMetadataWhereInput>
}

export type VideoMediaEncodingWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoMediaMetadata = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  encoding?: Maybe<VideoMediaEncoding>
  encodingId?: Maybe<Scalars['String']>
  id: Scalars['ID']
  pixelHeight?: Maybe<Scalars['Int']>
  pixelWidth?: Maybe<Scalars['Int']>
  size?: Maybe<Scalars['BigInt']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  video?: Maybe<Video>
}

export type VideoMediaMetadataConnection = {
  edges: Array<VideoMediaMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoMediaMetadataCreateInput = {
  createdInBlock: Scalars['Float']
  encoding?: Maybe<Scalars['ID']>
  pixelHeight?: Maybe<Scalars['Float']>
  pixelWidth?: Maybe<Scalars['Float']>
  size?: Maybe<Scalars['String']>
}

export type VideoMediaMetadataEdge = {
  cursor: Scalars['String']
  node: VideoMediaMetadata
}

export enum VideoMediaMetadataOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EncodingAsc = 'encoding_ASC',
  EncodingDesc = 'encoding_DESC',
  PixelHeightAsc = 'pixelHeight_ASC',
  PixelHeightDesc = 'pixelHeight_DESC',
  PixelWidthAsc = 'pixelWidth_ASC',
  PixelWidthDesc = 'pixelWidth_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VideoMediaMetadataUpdateInput = {
  createdInBlock?: Maybe<Scalars['Float']>
  encoding?: Maybe<Scalars['ID']>
  pixelHeight?: Maybe<Scalars['Float']>
  pixelWidth?: Maybe<Scalars['Float']>
  size?: Maybe<Scalars['String']>
}

export type VideoMediaMetadataWhereInput = {
  AND?: Maybe<Array<VideoMediaMetadataWhereInput>>
  NOT?: Maybe<Array<VideoMediaMetadataWhereInput>>
  OR?: Maybe<Array<VideoMediaMetadataWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInBlock_eq?: Maybe<Scalars['Int']>
  createdInBlock_gt?: Maybe<Scalars['Int']>
  createdInBlock_gte?: Maybe<Scalars['Int']>
  createdInBlock_in?: Maybe<Array<Scalars['Int']>>
  createdInBlock_lt?: Maybe<Scalars['Int']>
  createdInBlock_lte?: Maybe<Scalars['Int']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  encoding?: Maybe<VideoMediaEncodingWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  pixelHeight_eq?: Maybe<Scalars['Int']>
  pixelHeight_gt?: Maybe<Scalars['Int']>
  pixelHeight_gte?: Maybe<Scalars['Int']>
  pixelHeight_in?: Maybe<Array<Scalars['Int']>>
  pixelHeight_lt?: Maybe<Scalars['Int']>
  pixelHeight_lte?: Maybe<Scalars['Int']>
  pixelWidth_eq?: Maybe<Scalars['Int']>
  pixelWidth_gt?: Maybe<Scalars['Int']>
  pixelWidth_gte?: Maybe<Scalars['Int']>
  pixelWidth_in?: Maybe<Array<Scalars['Int']>>
  pixelWidth_lt?: Maybe<Scalars['Int']>
  pixelWidth_lte?: Maybe<Scalars['Int']>
  size_eq?: Maybe<Scalars['BigInt']>
  size_gt?: Maybe<Scalars['BigInt']>
  size_gte?: Maybe<Scalars['BigInt']>
  size_in?: Maybe<Array<Scalars['BigInt']>>
  size_lt?: Maybe<Scalars['BigInt']>
  size_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type VideoMediaMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export enum VideoOrderByInput {
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  ChannelAsc = 'channel_ASC',
  ChannelDesc = 'channel_DESC',
  CommentsCountAsc = 'commentsCount_ASC',
  CommentsCountDesc = 'commentsCount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  DurationAsc = 'duration_ASC',
  DurationDesc = 'duration_DESC',
  EntryAppAsc = 'entryApp_ASC',
  EntryAppDesc = 'entryApp_DESC',
  HasMarketingAsc = 'hasMarketing_ASC',
  HasMarketingDesc = 'hasMarketing_DESC',
  IsCensoredAsc = 'isCensored_ASC',
  IsCensoredDesc = 'isCensored_DESC',
  IsCommentSectionEnabledAsc = 'isCommentSectionEnabled_ASC',
  IsCommentSectionEnabledDesc = 'isCommentSectionEnabled_DESC',
  IsExplicitAsc = 'isExplicit_ASC',
  IsExplicitDesc = 'isExplicit_DESC',
  IsPublicAsc = 'isPublic_ASC',
  IsPublicDesc = 'isPublic_DESC',
  IsReactionFeatureEnabledAsc = 'isReactionFeatureEnabled_ASC',
  IsReactionFeatureEnabledDesc = 'isReactionFeatureEnabled_DESC',
  LanguageAsc = 'language_ASC',
  LanguageDesc = 'language_DESC',
  LicenseAsc = 'license_ASC',
  LicenseDesc = 'license_DESC',
  MediaMetadataAsc = 'mediaMetadata_ASC',
  MediaMetadataDesc = 'mediaMetadata_DESC',
  MediaAsc = 'media_ASC',
  MediaDesc = 'media_DESC',
  NftAsc = 'nft_ASC',
  NftDesc = 'nft_DESC',
  PublishedBeforeJoystreamAsc = 'publishedBeforeJoystream_ASC',
  PublishedBeforeJoystreamDesc = 'publishedBeforeJoystream_DESC',
  ReactionsCountAsc = 'reactionsCount_ASC',
  ReactionsCountDesc = 'reactionsCount_DESC',
  ThumbnailPhotoAsc = 'thumbnailPhoto_ASC',
  ThumbnailPhotoDesc = 'thumbnailPhoto_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoStateBloatBondAsc = 'videoStateBloatBond_ASC',
  VideoStateBloatBondDesc = 'videoStateBloatBond_DESC',
  YtVideoIdAsc = 'ytVideoId_ASC',
  YtVideoIdDesc = 'ytVideoId_DESC',
}

export type VideoReactedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    reactingMember: Membership
    reactingMemberId: Scalars['String']
    reactionResult: VideoReactionOptions
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoChannel: Channel
    videoChannelId: Scalars['String']
    videoId: Scalars['String']
  }

export type VideoReactedEventConnection = {
  edges: Array<VideoReactedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoReactedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  reactingMember: Scalars['ID']
  reactionResult: VideoReactionOptions
  video: Scalars['ID']
  videoChannel: Scalars['ID']
}

export type VideoReactedEventEdge = {
  cursor: Scalars['String']
  node: VideoReactedEvent
}

export enum VideoReactedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ReactingMemberAsc = 'reactingMember_ASC',
  ReactingMemberDesc = 'reactingMember_DESC',
  ReactionResultAsc = 'reactionResult_ASC',
  ReactionResultDesc = 'reactionResult_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoChannelAsc = 'videoChannel_ASC',
  VideoChannelDesc = 'videoChannel_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type VideoReactedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  reactingMember?: Maybe<Scalars['ID']>
  reactionResult?: Maybe<VideoReactionOptions>
  video?: Maybe<Scalars['ID']>
  videoChannel?: Maybe<Scalars['ID']>
}

export type VideoReactedEventWhereInput = {
  AND?: Maybe<Array<VideoReactedEventWhereInput>>
  NOT?: Maybe<Array<VideoReactedEventWhereInput>>
  OR?: Maybe<Array<VideoReactedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  reactingMember?: Maybe<MembershipWhereInput>
  reactionResult_eq?: Maybe<VideoReactionOptions>
  reactionResult_in?: Maybe<Array<VideoReactionOptions>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
  videoChannel?: Maybe<ChannelWhereInput>
}

export type VideoReactedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoReaction = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  member: Membership
  memberId: Scalars['String']
  reaction: VideoReactionOptions
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  video: Video
  videoId: Scalars['String']
}

export type VideoReactionConnection = {
  edges: Array<VideoReactionEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoReactionCreateInput = {
  member: Scalars['ID']
  memberId: Scalars['String']
  reaction: VideoReactionOptions
  video: Scalars['ID']
}

export type VideoReactionEdge = {
  cursor: Scalars['String']
  node: VideoReaction
}

export enum VideoReactionOptions {
  Like = 'LIKE',
  Unlike = 'UNLIKE',
}

export enum VideoReactionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MemberIdAsc = 'memberId_ASC',
  MemberIdDesc = 'memberId_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  ReactionAsc = 'reaction_ASC',
  ReactionDesc = 'reaction_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type VideoReactionUpdateInput = {
  member?: Maybe<Scalars['ID']>
  memberId?: Maybe<Scalars['String']>
  reaction?: Maybe<VideoReactionOptions>
  video?: Maybe<Scalars['ID']>
}

export type VideoReactionWhereInput = {
  AND?: Maybe<Array<VideoReactionWhereInput>>
  NOT?: Maybe<Array<VideoReactionWhereInput>>
  OR?: Maybe<Array<VideoReactionWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  member?: Maybe<MembershipWhereInput>
  memberId_contains?: Maybe<Scalars['String']>
  memberId_endsWith?: Maybe<Scalars['String']>
  memberId_eq?: Maybe<Scalars['String']>
  memberId_in?: Maybe<Array<Scalars['String']>>
  memberId_startsWith?: Maybe<Scalars['String']>
  reaction_eq?: Maybe<VideoReactionOptions>
  reaction_in?: Maybe<Array<VideoReactionOptions>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type VideoReactionWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoReactionsCountByReactionType = BaseGraphQlObject & {
  count: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  reaction: VideoReactionOptions
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  video: Video
  videoId: Scalars['String']
}

export type VideoReactionsCountByReactionTypeConnection = {
  edges: Array<VideoReactionsCountByReactionTypeEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoReactionsCountByReactionTypeCreateInput = {
  count: Scalars['Float']
  reaction: VideoReactionOptions
  video: Scalars['ID']
}

export type VideoReactionsCountByReactionTypeEdge = {
  cursor: Scalars['String']
  node: VideoReactionsCountByReactionType
}

export enum VideoReactionsCountByReactionTypeOrderByInput {
  CountAsc = 'count_ASC',
  CountDesc = 'count_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ReactionAsc = 'reaction_ASC',
  ReactionDesc = 'reaction_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type VideoReactionsCountByReactionTypeUpdateInput = {
  count?: Maybe<Scalars['Float']>
  reaction?: Maybe<VideoReactionOptions>
  video?: Maybe<Scalars['ID']>
}

export type VideoReactionsCountByReactionTypeWhereInput = {
  AND?: Maybe<Array<VideoReactionsCountByReactionTypeWhereInput>>
  NOT?: Maybe<Array<VideoReactionsCountByReactionTypeWhereInput>>
  OR?: Maybe<Array<VideoReactionsCountByReactionTypeWhereInput>>
  count_eq?: Maybe<Scalars['Int']>
  count_gt?: Maybe<Scalars['Int']>
  count_gte?: Maybe<Scalars['Int']>
  count_in?: Maybe<Array<Scalars['Int']>>
  count_lt?: Maybe<Scalars['Int']>
  count_lte?: Maybe<Scalars['Int']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  reaction_eq?: Maybe<VideoReactionOptions>
  reaction_in?: Maybe<Array<VideoReactionOptions>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type VideoReactionsCountByReactionTypeWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoReactionsPreferenceEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    reactionsStatus: Scalars['Boolean']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type VideoReactionsPreferenceEventConnection = {
  edges: Array<VideoReactionsPreferenceEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoReactionsPreferenceEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  reactionsStatus: Scalars['Boolean']
  video: Scalars['ID']
}

export type VideoReactionsPreferenceEventEdge = {
  cursor: Scalars['String']
  node: VideoReactionsPreferenceEvent
}

export enum VideoReactionsPreferenceEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ReactionsStatusAsc = 'reactionsStatus_ASC',
  ReactionsStatusDesc = 'reactionsStatus_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type VideoReactionsPreferenceEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  reactionsStatus?: Maybe<Scalars['Boolean']>
  video?: Maybe<Scalars['ID']>
}

export type VideoReactionsPreferenceEventWhereInput = {
  AND?: Maybe<Array<VideoReactionsPreferenceEventWhereInput>>
  NOT?: Maybe<Array<VideoReactionsPreferenceEventWhereInput>>
  OR?: Maybe<Array<VideoReactionsPreferenceEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  reactionsStatus_eq?: Maybe<Scalars['Boolean']>
  reactionsStatus_in?: Maybe<Array<Scalars['Boolean']>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type VideoReactionsPreferenceEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoReportInfo = {
  createdAt: Scalars['DateTime']
  id: Scalars['ID']
  rationale: Scalars['String']
  reporterIp: Scalars['String']
  videoId: Scalars['ID']
}

export enum VideoReportOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
}

export type VideoReportsWhereInput = {
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  reporterIp?: Maybe<Scalars['String']>
  videoId?: Maybe<Scalars['ID']>
}

export type VideoSubtitle = BaseGraphQlObject & {
  asset?: Maybe<StorageDataObject>
  assetId?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  language?: Maybe<Language>
  languageId?: Maybe<Scalars['String']>
  mimeType: Scalars['String']
  type: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  video: Video
  videoId: Scalars['String']
}

export type VideoSubtitleConnection = {
  edges: Array<VideoSubtitleEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoSubtitleCreateInput = {
  asset?: Maybe<Scalars['ID']>
  language?: Maybe<Scalars['ID']>
  mimeType: Scalars['String']
  type: Scalars['String']
  video: Scalars['ID']
}

export type VideoSubtitleEdge = {
  cursor: Scalars['String']
  node: VideoSubtitle
}

export enum VideoSubtitleOrderByInput {
  AssetAsc = 'asset_ASC',
  AssetDesc = 'asset_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  LanguageAsc = 'language_ASC',
  LanguageDesc = 'language_DESC',
  MimeTypeAsc = 'mimeType_ASC',
  MimeTypeDesc = 'mimeType_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type VideoSubtitleUpdateInput = {
  asset?: Maybe<Scalars['ID']>
  language?: Maybe<Scalars['ID']>
  mimeType?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  video?: Maybe<Scalars['ID']>
}

export type VideoSubtitleWhereInput = {
  AND?: Maybe<Array<VideoSubtitleWhereInput>>
  NOT?: Maybe<Array<VideoSubtitleWhereInput>>
  OR?: Maybe<Array<VideoSubtitleWhereInput>>
  asset?: Maybe<StorageDataObjectWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  language?: Maybe<LanguageWhereInput>
  mimeType_contains?: Maybe<Scalars['String']>
  mimeType_endsWith?: Maybe<Scalars['String']>
  mimeType_eq?: Maybe<Scalars['String']>
  mimeType_in?: Maybe<Array<Scalars['String']>>
  mimeType_startsWith?: Maybe<Scalars['String']>
  type_contains?: Maybe<Scalars['String']>
  type_endsWith?: Maybe<Scalars['String']>
  type_eq?: Maybe<Scalars['String']>
  type_in?: Maybe<Array<Scalars['String']>>
  type_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  video?: Maybe<VideoWhereInput>
}

export type VideoSubtitleWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoUpdateInput = {
  category?: Maybe<Scalars['ID']>
  channel?: Maybe<Scalars['ID']>
  commentsCount?: Maybe<Scalars['Float']>
  createdInBlock?: Maybe<Scalars['Float']>
  description?: Maybe<Scalars['String']>
  duration?: Maybe<Scalars['Float']>
  entryApp?: Maybe<Scalars['ID']>
  hasMarketing?: Maybe<Scalars['Boolean']>
  isCensored?: Maybe<Scalars['Boolean']>
  isCommentSectionEnabled?: Maybe<Scalars['Boolean']>
  isExplicit?: Maybe<Scalars['Boolean']>
  isPublic?: Maybe<Scalars['Boolean']>
  isReactionFeatureEnabled?: Maybe<Scalars['Boolean']>
  language?: Maybe<Scalars['ID']>
  license?: Maybe<Scalars['ID']>
  media?: Maybe<Scalars['ID']>
  mediaMetadata?: Maybe<Scalars['ID']>
  nft?: Maybe<Scalars['ID']>
  publishedBeforeJoystream?: Maybe<Scalars['DateTime']>
  reactionsCount?: Maybe<Scalars['Float']>
  thumbnailPhoto?: Maybe<Scalars['ID']>
  title?: Maybe<Scalars['String']>
  videoStateBloatBond?: Maybe<Scalars['String']>
  ytVideoId?: Maybe<Scalars['String']>
}

export type VideoVisibilitySetByModeratorEvent = BaseGraphQlObject & {
  actor: ContentActor
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  inBlock: Scalars['Int']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Int']
  isHidden: Scalars['Boolean']
  network: Network
  rationale: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  videoId: Scalars['Int']
}

export type VideoVisibilitySetByModeratorEventConnection = {
  edges: Array<VideoVisibilitySetByModeratorEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoVisibilitySetByModeratorEventCreateInput = {
  actor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  isHidden: Scalars['Boolean']
  network: Network
  rationale: Scalars['String']
  videoId: Scalars['Float']
}

export type VideoVisibilitySetByModeratorEventEdge = {
  cursor: Scalars['String']
  node: VideoVisibilitySetByModeratorEvent
}

export enum VideoVisibilitySetByModeratorEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoIdAsc = 'videoId_ASC',
  VideoIdDesc = 'videoId_DESC',
}

export type VideoVisibilitySetByModeratorEventUpdateInput = {
  actor?: Maybe<Scalars['JSONObject']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  isHidden?: Maybe<Scalars['Boolean']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
  videoId?: Maybe<Scalars['Float']>
}

export type VideoVisibilitySetByModeratorEventWhereInput = {
  AND?: Maybe<Array<VideoVisibilitySetByModeratorEventWhereInput>>
  NOT?: Maybe<Array<VideoVisibilitySetByModeratorEventWhereInput>>
  OR?: Maybe<Array<VideoVisibilitySetByModeratorEventWhereInput>>
  actor_json?: Maybe<Scalars['JSONObject']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  isHidden_eq?: Maybe<Scalars['Boolean']>
  isHidden_in?: Maybe<Array<Scalars['Boolean']>>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videoId_eq?: Maybe<Scalars['Int']>
  videoId_gt?: Maybe<Scalars['Int']>
  videoId_gte?: Maybe<Scalars['Int']>
  videoId_in?: Maybe<Array<Scalars['Int']>>
  videoId_lt?: Maybe<Scalars['Int']>
  videoId_lte?: Maybe<Scalars['Int']>
}

export type VideoVisibilitySetByModeratorEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoWhereInput = {
  AND?: Maybe<Array<VideoWhereInput>>
  NOT?: Maybe<Array<VideoWhereInput>>
  OR?: Maybe<Array<VideoWhereInput>>
  auctionbidcanceledeventvideo_every?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventvideo_none?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventvideo_some?: Maybe<AuctionBidCanceledEventWhereInput>
  auctionbidmadeeventvideo_every?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventvideo_none?: Maybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventvideo_some?: Maybe<AuctionBidMadeEventWhereInput>
  auctioncanceledeventvideo_every?: Maybe<AuctionCanceledEventWhereInput>
  auctioncanceledeventvideo_none?: Maybe<AuctionCanceledEventWhereInput>
  auctioncanceledeventvideo_some?: Maybe<AuctionCanceledEventWhereInput>
  bidmadecompletingauctioneventvideo_every?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventvideo_none?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventvideo_some?: Maybe<BidMadeCompletingAuctionEventWhereInput>
  buynowcanceledeventvideo_every?: Maybe<BuyNowCanceledEventWhereInput>
  buynowcanceledeventvideo_none?: Maybe<BuyNowCanceledEventWhereInput>
  buynowcanceledeventvideo_some?: Maybe<BuyNowCanceledEventWhereInput>
  buynowpriceupdatedeventvideo_every?: Maybe<BuyNowPriceUpdatedEventWhereInput>
  buynowpriceupdatedeventvideo_none?: Maybe<BuyNowPriceUpdatedEventWhereInput>
  buynowpriceupdatedeventvideo_some?: Maybe<BuyNowPriceUpdatedEventWhereInput>
  category?: Maybe<VideoCategoryWhereInput>
  channel?: Maybe<ChannelWhereInput>
  commentcreatedeventvideo_every?: Maybe<CommentCreatedEventWhereInput>
  commentcreatedeventvideo_none?: Maybe<CommentCreatedEventWhereInput>
  commentcreatedeventvideo_some?: Maybe<CommentCreatedEventWhereInput>
  commentdeletedeventvideo_every?: Maybe<CommentDeletedEventWhereInput>
  commentdeletedeventvideo_none?: Maybe<CommentDeletedEventWhereInput>
  commentdeletedeventvideo_some?: Maybe<CommentDeletedEventWhereInput>
  commentmoderatedeventvideo_every?: Maybe<CommentModeratedEventWhereInput>
  commentmoderatedeventvideo_none?: Maybe<CommentModeratedEventWhereInput>
  commentmoderatedeventvideo_some?: Maybe<CommentModeratedEventWhereInput>
  commentpinnedeventvideo_every?: Maybe<CommentPinnedEventWhereInput>
  commentpinnedeventvideo_none?: Maybe<CommentPinnedEventWhereInput>
  commentpinnedeventvideo_some?: Maybe<CommentPinnedEventWhereInput>
  commentreactedeventvideo_every?: Maybe<CommentReactedEventWhereInput>
  commentreactedeventvideo_none?: Maybe<CommentReactedEventWhereInput>
  commentreactedeventvideo_some?: Maybe<CommentReactedEventWhereInput>
  commentreactionscountbyreactionidvideo_every?: Maybe<CommentReactionsCountByReactionIdWhereInput>
  commentreactionscountbyreactionidvideo_none?: Maybe<CommentReactionsCountByReactionIdWhereInput>
  commentreactionscountbyreactionidvideo_some?: Maybe<CommentReactionsCountByReactionIdWhereInput>
  commentreactionvideo_every?: Maybe<CommentReactionWhereInput>
  commentreactionvideo_none?: Maybe<CommentReactionWhereInput>
  commentreactionvideo_some?: Maybe<CommentReactionWhereInput>
  commentsCount_eq?: Maybe<Scalars['Int']>
  commentsCount_gt?: Maybe<Scalars['Int']>
  commentsCount_gte?: Maybe<Scalars['Int']>
  commentsCount_in?: Maybe<Array<Scalars['Int']>>
  commentsCount_lt?: Maybe<Scalars['Int']>
  commentsCount_lte?: Maybe<Scalars['Int']>
  comments_every?: Maybe<CommentWhereInput>
  comments_none?: Maybe<CommentWhereInput>
  comments_some?: Maybe<CommentWhereInput>
  commenttextupdatedeventvideo_every?: Maybe<CommentTextUpdatedEventWhereInput>
  commenttextupdatedeventvideo_none?: Maybe<CommentTextUpdatedEventWhereInput>
  commenttextupdatedeventvideo_some?: Maybe<CommentTextUpdatedEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInBlock_eq?: Maybe<Scalars['Int']>
  createdInBlock_gt?: Maybe<Scalars['Int']>
  createdInBlock_gte?: Maybe<Scalars['Int']>
  createdInBlock_in?: Maybe<Array<Scalars['Int']>>
  createdInBlock_lt?: Maybe<Scalars['Int']>
  createdInBlock_lte?: Maybe<Scalars['Int']>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  duration_eq?: Maybe<Scalars['Int']>
  duration_gt?: Maybe<Scalars['Int']>
  duration_gte?: Maybe<Scalars['Int']>
  duration_in?: Maybe<Array<Scalars['Int']>>
  duration_lt?: Maybe<Scalars['Int']>
  duration_lte?: Maybe<Scalars['Int']>
  englishauctionsettledeventvideo_every?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventvideo_none?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionsettledeventvideo_some?: Maybe<EnglishAuctionSettledEventWhereInput>
  englishauctionstartedeventvideo_every?: Maybe<EnglishAuctionStartedEventWhereInput>
  englishauctionstartedeventvideo_none?: Maybe<EnglishAuctionStartedEventWhereInput>
  englishauctionstartedeventvideo_some?: Maybe<EnglishAuctionStartedEventWhereInput>
  entryApp?: Maybe<AppWhereInput>
  hasMarketing_eq?: Maybe<Scalars['Boolean']>
  hasMarketing_in?: Maybe<Array<Scalars['Boolean']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isCensored_eq?: Maybe<Scalars['Boolean']>
  isCensored_in?: Maybe<Array<Scalars['Boolean']>>
  isCommentSectionEnabled_eq?: Maybe<Scalars['Boolean']>
  isCommentSectionEnabled_in?: Maybe<Array<Scalars['Boolean']>>
  isExplicit_eq?: Maybe<Scalars['Boolean']>
  isExplicit_in?: Maybe<Array<Scalars['Boolean']>>
  isPublic_eq?: Maybe<Scalars['Boolean']>
  isPublic_in?: Maybe<Array<Scalars['Boolean']>>
  isReactionFeatureEnabled_eq?: Maybe<Scalars['Boolean']>
  isReactionFeatureEnabled_in?: Maybe<Array<Scalars['Boolean']>>
  language?: Maybe<LanguageWhereInput>
  license?: Maybe<LicenseWhereInput>
  media?: Maybe<StorageDataObjectWhereInput>
  mediaMetadata?: Maybe<VideoMediaMetadataWhereInput>
  nft?: Maybe<OwnedNftWhereInput>
  nftboughteventvideo_every?: Maybe<NftBoughtEventWhereInput>
  nftboughteventvideo_none?: Maybe<NftBoughtEventWhereInput>
  nftboughteventvideo_some?: Maybe<NftBoughtEventWhereInput>
  nftissuedeventvideo_every?: Maybe<NftIssuedEventWhereInput>
  nftissuedeventvideo_none?: Maybe<NftIssuedEventWhereInput>
  nftissuedeventvideo_some?: Maybe<NftIssuedEventWhereInput>
  nftsellordermadeeventvideo_every?: Maybe<NftSellOrderMadeEventWhereInput>
  nftsellordermadeeventvideo_none?: Maybe<NftSellOrderMadeEventWhereInput>
  nftsellordermadeeventvideo_some?: Maybe<NftSellOrderMadeEventWhereInput>
  nftslingedbacktotheoriginalartisteventvideo_every?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
  nftslingedbacktotheoriginalartisteventvideo_none?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
  nftslingedbacktotheoriginalartisteventvideo_some?: Maybe<NftSlingedBackToTheOriginalArtistEventWhereInput>
  offeracceptedeventvideo_every?: Maybe<OfferAcceptedEventWhereInput>
  offeracceptedeventvideo_none?: Maybe<OfferAcceptedEventWhereInput>
  offeracceptedeventvideo_some?: Maybe<OfferAcceptedEventWhereInput>
  offercanceledeventvideo_every?: Maybe<OfferCanceledEventWhereInput>
  offercanceledeventvideo_none?: Maybe<OfferCanceledEventWhereInput>
  offercanceledeventvideo_some?: Maybe<OfferCanceledEventWhereInput>
  offerstartedeventvideo_every?: Maybe<OfferStartedEventWhereInput>
  offerstartedeventvideo_none?: Maybe<OfferStartedEventWhereInput>
  offerstartedeventvideo_some?: Maybe<OfferStartedEventWhereInput>
  openauctionbidacceptedeventvideo_every?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventvideo_none?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventvideo_some?: Maybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionstartedeventvideo_every?: Maybe<OpenAuctionStartedEventWhereInput>
  openauctionstartedeventvideo_none?: Maybe<OpenAuctionStartedEventWhereInput>
  openauctionstartedeventvideo_some?: Maybe<OpenAuctionStartedEventWhereInput>
  pinnedComment?: Maybe<CommentWhereInput>
  publishedBeforeJoystream_eq?: Maybe<Scalars['DateTime']>
  publishedBeforeJoystream_gt?: Maybe<Scalars['DateTime']>
  publishedBeforeJoystream_gte?: Maybe<Scalars['DateTime']>
  publishedBeforeJoystream_lt?: Maybe<Scalars['DateTime']>
  publishedBeforeJoystream_lte?: Maybe<Scalars['DateTime']>
  reactionsCountByReactionId_every?: Maybe<VideoReactionsCountByReactionTypeWhereInput>
  reactionsCountByReactionId_none?: Maybe<VideoReactionsCountByReactionTypeWhereInput>
  reactionsCountByReactionId_some?: Maybe<VideoReactionsCountByReactionTypeWhereInput>
  reactionsCount_eq?: Maybe<Scalars['Int']>
  reactionsCount_gt?: Maybe<Scalars['Int']>
  reactionsCount_gte?: Maybe<Scalars['Int']>
  reactionsCount_in?: Maybe<Array<Scalars['Int']>>
  reactionsCount_lt?: Maybe<Scalars['Int']>
  reactionsCount_lte?: Maybe<Scalars['Int']>
  reactions_every?: Maybe<VideoReactionWhereInput>
  reactions_none?: Maybe<VideoReactionWhereInput>
  reactions_some?: Maybe<VideoReactionWhereInput>
  subtitles_every?: Maybe<VideoSubtitleWhereInput>
  subtitles_none?: Maybe<VideoSubtitleWhereInput>
  subtitles_some?: Maybe<VideoSubtitleWhereInput>
  thumbnailPhoto?: Maybe<StorageDataObjectWhereInput>
  title_contains?: Maybe<Scalars['String']>
  title_endsWith?: Maybe<Scalars['String']>
  title_eq?: Maybe<Scalars['String']>
  title_in?: Maybe<Array<Scalars['String']>>
  title_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  videoStateBloatBond_eq?: Maybe<Scalars['BigInt']>
  videoStateBloatBond_gt?: Maybe<Scalars['BigInt']>
  videoStateBloatBond_gte?: Maybe<Scalars['BigInt']>
  videoStateBloatBond_in?: Maybe<Array<Scalars['BigInt']>>
  videoStateBloatBond_lt?: Maybe<Scalars['BigInt']>
  videoStateBloatBond_lte?: Maybe<Scalars['BigInt']>
  videoreactedeventvideo_every?: Maybe<VideoReactedEventWhereInput>
  videoreactedeventvideo_none?: Maybe<VideoReactedEventWhereInput>
  videoreactedeventvideo_some?: Maybe<VideoReactedEventWhereInput>
  videoreactionspreferenceeventvideo_every?: Maybe<VideoReactionsPreferenceEventWhereInput>
  videoreactionspreferenceeventvideo_none?: Maybe<VideoReactionsPreferenceEventWhereInput>
  videoreactionspreferenceeventvideo_some?: Maybe<VideoReactionsPreferenceEventWhereInput>
  ytVideoId_contains?: Maybe<Scalars['String']>
  ytVideoId_endsWith?: Maybe<Scalars['String']>
  ytVideoId_eq?: Maybe<Scalars['String']>
  ytVideoId_in?: Maybe<Array<Scalars['String']>>
  ytVideoId_startsWith?: Maybe<Scalars['String']>
}

export type VideoWhereUniqueInput = {
  id: Scalars['ID']
}

export type VoteCastEvent = BaseGraphQlObject &
  Event & {
    castVote: CastVote
    castVoteId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type VoteCastEventConnection = {
  edges: Array<VoteCastEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VoteCastEventCreateInput = {
  castVote: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type VoteCastEventEdge = {
  cursor: Scalars['String']
  node: VoteCastEvent
}

export enum VoteCastEventOrderByInput {
  CastVoteAsc = 'castVote_ASC',
  CastVoteDesc = 'castVote_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VoteCastEventUpdateInput = {
  castVote?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type VoteCastEventWhereInput = {
  AND?: Maybe<Array<VoteCastEventWhereInput>>
  NOT?: Maybe<Array<VoteCastEventWhereInput>>
  OR?: Maybe<Array<VoteCastEventWhereInput>>
  castVote?: Maybe<CastVoteWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type VoteCastEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type VoteRevealedEvent = BaseGraphQlObject &
  Event & {
    castVote: CastVote
    castVoteId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type VoteRevealedEventConnection = {
  edges: Array<VoteRevealedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VoteRevealedEventCreateInput = {
  castVote: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type VoteRevealedEventEdge = {
  cursor: Scalars['String']
  node: VoteRevealedEvent
}

export enum VoteRevealedEventOrderByInput {
  CastVoteAsc = 'castVote_ASC',
  CastVoteDesc = 'castVote_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VoteRevealedEventUpdateInput = {
  castVote?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type VoteRevealedEventWhereInput = {
  AND?: Maybe<Array<VoteRevealedEventWhereInput>>
  NOT?: Maybe<Array<VoteRevealedEventWhereInput>>
  OR?: Maybe<Array<VoteRevealedEventWhereInput>>
  castVote?: Maybe<CastVoteWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type VoteRevealedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type VotingPeriodStartedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    numOfCandidates: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type VotingPeriodStartedEventConnection = {
  edges: Array<VotingPeriodStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VotingPeriodStartedEventCreateInput = {
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  numOfCandidates: Scalars['String']
}

export type VotingPeriodStartedEventEdge = {
  cursor: Scalars['String']
  node: VotingPeriodStartedEvent
}

export enum VotingPeriodStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NumOfCandidatesAsc = 'numOfCandidates_ASC',
  NumOfCandidatesDesc = 'numOfCandidates_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VotingPeriodStartedEventUpdateInput = {
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  numOfCandidates?: Maybe<Scalars['String']>
}

export type VotingPeriodStartedEventWhereInput = {
  AND?: Maybe<Array<VotingPeriodStartedEventWhereInput>>
  NOT?: Maybe<Array<VotingPeriodStartedEventWhereInput>>
  OR?: Maybe<Array<VotingPeriodStartedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  numOfCandidates_eq?: Maybe<Scalars['BigInt']>
  numOfCandidates_gt?: Maybe<Scalars['BigInt']>
  numOfCandidates_gte?: Maybe<Scalars['BigInt']>
  numOfCandidates_in?: Maybe<Array<Scalars['BigInt']>>
  numOfCandidates_lt?: Maybe<Scalars['BigInt']>
  numOfCandidates_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type VotingPeriodStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkEntrantFundsWithdrawnEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    entry: BountyEntry
    entryId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type WorkEntrantFundsWithdrawnEventConnection = {
  edges: Array<WorkEntrantFundsWithdrawnEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkEntrantFundsWithdrawnEventCreateInput = {
  entry: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type WorkEntrantFundsWithdrawnEventEdge = {
  cursor: Scalars['String']
  node: WorkEntrantFundsWithdrawnEvent
}

export enum WorkEntrantFundsWithdrawnEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EntryAsc = 'entry_ASC',
  EntryDesc = 'entry_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkEntrantFundsWithdrawnEventUpdateInput = {
  entry?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type WorkEntrantFundsWithdrawnEventWhereInput = {
  AND?: Maybe<Array<WorkEntrantFundsWithdrawnEventWhereInput>>
  NOT?: Maybe<Array<WorkEntrantFundsWithdrawnEventWhereInput>>
  OR?: Maybe<Array<WorkEntrantFundsWithdrawnEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  entry?: Maybe<BountyEntryWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type WorkEntrantFundsWithdrawnEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkEntryAnnouncedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    entry: BountyEntry
    entryId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type WorkEntryAnnouncedEventConnection = {
  edges: Array<WorkEntryAnnouncedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkEntryAnnouncedEventCreateInput = {
  entry: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type WorkEntryAnnouncedEventEdge = {
  cursor: Scalars['String']
  node: WorkEntryAnnouncedEvent
}

export enum WorkEntryAnnouncedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EntryAsc = 'entry_ASC',
  EntryDesc = 'entry_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkEntryAnnouncedEventUpdateInput = {
  entry?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type WorkEntryAnnouncedEventWhereInput = {
  AND?: Maybe<Array<WorkEntryAnnouncedEventWhereInput>>
  NOT?: Maybe<Array<WorkEntryAnnouncedEventWhereInput>>
  OR?: Maybe<Array<WorkEntryAnnouncedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  entry?: Maybe<BountyEntryWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type WorkEntryAnnouncedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkEntrySlashedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    entry: BountyEntry
    entryId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type WorkEntrySlashedEventConnection = {
  edges: Array<WorkEntrySlashedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkEntrySlashedEventCreateInput = {
  entry: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type WorkEntrySlashedEventEdge = {
  cursor: Scalars['String']
  node: WorkEntrySlashedEvent
}

export enum WorkEntrySlashedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EntryAsc = 'entry_ASC',
  EntryDesc = 'entry_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkEntrySlashedEventUpdateInput = {
  entry?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type WorkEntrySlashedEventWhereInput = {
  AND?: Maybe<Array<WorkEntrySlashedEventWhereInput>>
  NOT?: Maybe<Array<WorkEntrySlashedEventWhereInput>>
  OR?: Maybe<Array<WorkEntrySlashedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  entry?: Maybe<BountyEntryWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type WorkEntrySlashedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkEntryWithdrawnEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    entry: BountyEntry
    entryId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type WorkEntryWithdrawnEventConnection = {
  edges: Array<WorkEntryWithdrawnEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkEntryWithdrawnEventCreateInput = {
  entry: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
}

export type WorkEntryWithdrawnEventEdge = {
  cursor: Scalars['String']
  node: WorkEntryWithdrawnEvent
}

export enum WorkEntryWithdrawnEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EntryAsc = 'entry_ASC',
  EntryDesc = 'entry_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkEntryWithdrawnEventUpdateInput = {
  entry?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
}

export type WorkEntryWithdrawnEventWhereInput = {
  AND?: Maybe<Array<WorkEntryWithdrawnEventWhereInput>>
  NOT?: Maybe<Array<WorkEntryWithdrawnEventWhereInput>>
  OR?: Maybe<Array<WorkEntryWithdrawnEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  entry?: Maybe<BountyEntryWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type WorkEntryWithdrawnEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkSubmittedEvent = BaseGraphQlObject &
  Event & {
    bounty: Bounty
    bountyId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    description?: Maybe<Scalars['String']>
    entry: BountyEntry
    entryId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    title?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
  }

export type WorkSubmittedEventConnection = {
  edges: Array<WorkSubmittedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkSubmittedEventCreateInput = {
  bounty: Scalars['ID']
  description?: Maybe<Scalars['String']>
  entry: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  title?: Maybe<Scalars['String']>
}

export type WorkSubmittedEventEdge = {
  cursor: Scalars['String']
  node: WorkSubmittedEvent
}

export enum WorkSubmittedEventOrderByInput {
  BountyAsc = 'bounty_ASC',
  BountyDesc = 'bounty_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EntryAsc = 'entry_ASC',
  EntryDesc = 'entry_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkSubmittedEventUpdateInput = {
  bounty?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  entry?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  title?: Maybe<Scalars['String']>
}

export type WorkSubmittedEventWhereInput = {
  AND?: Maybe<Array<WorkSubmittedEventWhereInput>>
  NOT?: Maybe<Array<WorkSubmittedEventWhereInput>>
  OR?: Maybe<Array<WorkSubmittedEventWhereInput>>
  bounty?: Maybe<BountyWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  entry?: Maybe<BountyEntryWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  title_contains?: Maybe<Scalars['String']>
  title_endsWith?: Maybe<Scalars['String']>
  title_eq?: Maybe<Scalars['String']>
  title_in?: Maybe<Array<Scalars['String']>>
  title_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type WorkSubmittedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type Worker = BaseGraphQlObject & {
  application: WorkingGroupApplication
  applicationId: Scalars['String']
  categoryarchivalstatusupdatedeventactor?: Maybe<Array<CategoryArchivalStatusUpdatedEvent>>
  categorydeletedeventactor?: Maybe<Array<CategoryDeletedEvent>>
  categorymembershipofmoderatorupdatedeventmoderator?: Maybe<
    Array<CategoryMembershipOfModeratorUpdatedEvent>
  >
  categorystickythreadupdateeventactor?: Maybe<Array<CategoryStickyThreadUpdateEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  entry: OpeningFilledEvent
  entryId: Scalars['String']
  group: WorkingGroup
  groupId: Scalars['String']
  id: Scalars['ID']
  isActive: Scalars['Boolean']
  isLead: Scalars['Boolean']
  leaderseteventworker?: Maybe<Array<LeaderSetEvent>>
  leaderunseteventleader?: Maybe<Array<LeaderUnsetEvent>>
  managedForumCategories: Array<ForumCategory>
  membership: Membership
  membershipId: Scalars['String']
  memberverificationstatusupdatedeventworker?: Maybe<Array<MemberVerificationStatusUpdatedEvent>>
  missingRewardAmount?: Maybe<Scalars['BigInt']>
  newmissedrewardlevelreachedeventworker?: Maybe<Array<NewMissedRewardLevelReachedEvent>>
  payouts: Array<RewardPaidEvent>
  postmoderatedeventactor?: Maybe<Array<PostModeratedEvent>>
  rewardAccount: Scalars['String']
  rewardPerBlock: Scalars['BigInt']
  roleAccount: Scalars['String']
  runtimeId: Scalars['Int']
  slashes: Array<StakeSlashedEvent>
  stake: Scalars['BigInt']
  stakeAccount: Scalars['String']
  stakedecreasedeventworker?: Maybe<Array<StakeDecreasedEvent>>
  stakeincreasedeventworker?: Maybe<Array<StakeIncreasedEvent>>
  status: WorkerStatus
  storage?: Maybe<Scalars['String']>
  terminatedleadereventworker?: Maybe<Array<TerminatedLeaderEvent>>
  terminatedworkereventworker?: Maybe<Array<TerminatedWorkerEvent>>
  threadmoderatedeventactor?: Maybe<Array<ThreadModeratedEvent>>
  threadmovedeventactor?: Maybe<Array<ThreadMovedEvent>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  workerexitedeventworker?: Maybe<Array<WorkerExitedEvent>>
  workerrewardaccountupdatedeventworker?: Maybe<Array<WorkerRewardAccountUpdatedEvent>>
  workerrewardamountupdatedeventworker?: Maybe<Array<WorkerRewardAmountUpdatedEvent>>
  workerroleaccountupdatedeventworker?: Maybe<Array<WorkerRoleAccountUpdatedEvent>>
  workerstartedleavingeventworker?: Maybe<Array<WorkerStartedLeavingEvent>>
  workinggroupleader?: Maybe<Array<WorkingGroup>>
}

export type WorkerConnection = {
  edges: Array<WorkerEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerCreateInput = {
  application: Scalars['ID']
  entry: Scalars['ID']
  group: Scalars['ID']
  groupId: Scalars['String']
  isActive: Scalars['Boolean']
  isLead: Scalars['Boolean']
  membership: Scalars['ID']
  missingRewardAmount?: Maybe<Scalars['String']>
  rewardAccount: Scalars['String']
  rewardPerBlock: Scalars['String']
  roleAccount: Scalars['String']
  runtimeId: Scalars['Float']
  stake: Scalars['String']
  stakeAccount: Scalars['String']
  status: Scalars['JSONObject']
  storage?: Maybe<Scalars['String']>
}

export type WorkerEdge = {
  cursor: Scalars['String']
  node: Worker
}

export type WorkerExitedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerExitedEventConnection = {
  edges: Array<WorkerExitedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerExitedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  worker: Scalars['ID']
}

export type WorkerExitedEventEdge = {
  cursor: Scalars['String']
  node: WorkerExitedEvent
}

export enum WorkerExitedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerExitedEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  worker?: Maybe<Scalars['ID']>
}

export type WorkerExitedEventWhereInput = {
  AND?: Maybe<Array<WorkerExitedEventWhereInput>>
  NOT?: Maybe<Array<WorkerExitedEventWhereInput>>
  OR?: Maybe<Array<WorkerExitedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type WorkerExitedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkerOrderByInput {
  ApplicationAsc = 'application_ASC',
  ApplicationDesc = 'application_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EntryAsc = 'entry_ASC',
  EntryDesc = 'entry_DESC',
  GroupIdAsc = 'groupId_ASC',
  GroupIdDesc = 'groupId_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsLeadAsc = 'isLead_ASC',
  IsLeadDesc = 'isLead_DESC',
  MembershipAsc = 'membership_ASC',
  MembershipDesc = 'membership_DESC',
  MissingRewardAmountAsc = 'missingRewardAmount_ASC',
  MissingRewardAmountDesc = 'missingRewardAmount_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  RewardPerBlockAsc = 'rewardPerBlock_ASC',
  RewardPerBlockDesc = 'rewardPerBlock_DESC',
  RoleAccountAsc = 'roleAccount_ASC',
  RoleAccountDesc = 'roleAccount_DESC',
  RuntimeIdAsc = 'runtimeId_ASC',
  RuntimeIdDesc = 'runtimeId_DESC',
  StakeAccountAsc = 'stakeAccount_ASC',
  StakeAccountDesc = 'stakeAccount_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StorageAsc = 'storage_ASC',
  StorageDesc = 'storage_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkerRewardAccountUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newRewardAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerRewardAccountUpdatedEventConnection = {
  edges: Array<WorkerRewardAccountUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerRewardAccountUpdatedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newRewardAccount: Scalars['String']
  worker: Scalars['ID']
}

export type WorkerRewardAccountUpdatedEventEdge = {
  cursor: Scalars['String']
  node: WorkerRewardAccountUpdatedEvent
}

export enum WorkerRewardAccountUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewRewardAccountAsc = 'newRewardAccount_ASC',
  NewRewardAccountDesc = 'newRewardAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerRewardAccountUpdatedEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newRewardAccount?: Maybe<Scalars['String']>
  worker?: Maybe<Scalars['ID']>
}

export type WorkerRewardAccountUpdatedEventWhereInput = {
  AND?: Maybe<Array<WorkerRewardAccountUpdatedEventWhereInput>>
  NOT?: Maybe<Array<WorkerRewardAccountUpdatedEventWhereInput>>
  OR?: Maybe<Array<WorkerRewardAccountUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newRewardAccount_contains?: Maybe<Scalars['String']>
  newRewardAccount_endsWith?: Maybe<Scalars['String']>
  newRewardAccount_eq?: Maybe<Scalars['String']>
  newRewardAccount_in?: Maybe<Array<Scalars['String']>>
  newRewardAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type WorkerRewardAccountUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkerRewardAmountUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newRewardPerBlock: Scalars['BigInt']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerRewardAmountUpdatedEventConnection = {
  edges: Array<WorkerRewardAmountUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerRewardAmountUpdatedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newRewardPerBlock: Scalars['String']
  worker: Scalars['ID']
}

export type WorkerRewardAmountUpdatedEventEdge = {
  cursor: Scalars['String']
  node: WorkerRewardAmountUpdatedEvent
}

export enum WorkerRewardAmountUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewRewardPerBlockAsc = 'newRewardPerBlock_ASC',
  NewRewardPerBlockDesc = 'newRewardPerBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerRewardAmountUpdatedEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newRewardPerBlock?: Maybe<Scalars['String']>
  worker?: Maybe<Scalars['ID']>
}

export type WorkerRewardAmountUpdatedEventWhereInput = {
  AND?: Maybe<Array<WorkerRewardAmountUpdatedEventWhereInput>>
  NOT?: Maybe<Array<WorkerRewardAmountUpdatedEventWhereInput>>
  OR?: Maybe<Array<WorkerRewardAmountUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newRewardPerBlock_eq?: Maybe<Scalars['BigInt']>
  newRewardPerBlock_gt?: Maybe<Scalars['BigInt']>
  newRewardPerBlock_gte?: Maybe<Scalars['BigInt']>
  newRewardPerBlock_in?: Maybe<Array<Scalars['BigInt']>>
  newRewardPerBlock_lt?: Maybe<Scalars['BigInt']>
  newRewardPerBlock_lte?: Maybe<Scalars['BigInt']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type WorkerRewardAmountUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkerRoleAccountUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    newRoleAccount: Scalars['String']
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerRoleAccountUpdatedEventConnection = {
  edges: Array<WorkerRoleAccountUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerRoleAccountUpdatedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  newRoleAccount: Scalars['String']
  worker: Scalars['ID']
}

export type WorkerRoleAccountUpdatedEventEdge = {
  cursor: Scalars['String']
  node: WorkerRoleAccountUpdatedEvent
}

export enum WorkerRoleAccountUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewRoleAccountAsc = 'newRoleAccount_ASC',
  NewRoleAccountDesc = 'newRoleAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerRoleAccountUpdatedEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  newRoleAccount?: Maybe<Scalars['String']>
  worker?: Maybe<Scalars['ID']>
}

export type WorkerRoleAccountUpdatedEventWhereInput = {
  AND?: Maybe<Array<WorkerRoleAccountUpdatedEventWhereInput>>
  NOT?: Maybe<Array<WorkerRoleAccountUpdatedEventWhereInput>>
  OR?: Maybe<Array<WorkerRoleAccountUpdatedEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  newRoleAccount_contains?: Maybe<Scalars['String']>
  newRoleAccount_endsWith?: Maybe<Scalars['String']>
  newRoleAccount_eq?: Maybe<Scalars['String']>
  newRoleAccount_in?: Maybe<Array<Scalars['String']>>
  newRoleAccount_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type WorkerRoleAccountUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkerStartedLeavingEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['ID']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['ID']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    inBlock: Scalars['Int']
    inExtrinsic?: Maybe<Scalars['String']>
    indexInBlock: Scalars['Int']
    network: Network
    rationale?: Maybe<Scalars['String']>
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['ID']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerStartedLeavingEventConnection = {
  edges: Array<WorkerStartedLeavingEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerStartedLeavingEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock: Scalars['Float']
  network: Network
  rationale?: Maybe<Scalars['String']>
  worker: Scalars['ID']
}

export type WorkerStartedLeavingEventEdge = {
  cursor: Scalars['String']
  node: WorkerStartedLeavingEvent
}

export enum WorkerStartedLeavingEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerStartedLeavingEventUpdateInput = {
  group?: Maybe<Scalars['ID']>
  inBlock?: Maybe<Scalars['Float']>
  inExtrinsic?: Maybe<Scalars['String']>
  indexInBlock?: Maybe<Scalars['Float']>
  network?: Maybe<Network>
  rationale?: Maybe<Scalars['String']>
  worker?: Maybe<Scalars['ID']>
}

export type WorkerStartedLeavingEventWhereInput = {
  AND?: Maybe<Array<WorkerStartedLeavingEventWhereInput>>
  NOT?: Maybe<Array<WorkerStartedLeavingEventWhereInput>>
  OR?: Maybe<Array<WorkerStartedLeavingEventWhereInput>>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  inBlock_eq?: Maybe<Scalars['Int']>
  inBlock_gt?: Maybe<Scalars['Int']>
  inBlock_gte?: Maybe<Scalars['Int']>
  inBlock_in?: Maybe<Array<Scalars['Int']>>
  inBlock_lt?: Maybe<Scalars['Int']>
  inBlock_lte?: Maybe<Scalars['Int']>
  inExtrinsic_contains?: Maybe<Scalars['String']>
  inExtrinsic_endsWith?: Maybe<Scalars['String']>
  inExtrinsic_eq?: Maybe<Scalars['String']>
  inExtrinsic_in?: Maybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: Maybe<Scalars['String']>
  indexInBlock_eq?: Maybe<Scalars['Int']>
  indexInBlock_gt?: Maybe<Scalars['Int']>
  indexInBlock_gte?: Maybe<Scalars['Int']>
  indexInBlock_in?: Maybe<Array<Scalars['Int']>>
  indexInBlock_lt?: Maybe<Scalars['Int']>
  indexInBlock_lte?: Maybe<Scalars['Int']>
  network_eq?: Maybe<Network>
  network_in?: Maybe<Array<Network>>
  rationale_contains?: Maybe<Scalars['String']>
  rationale_endsWith?: Maybe<Scalars['String']>
  rationale_eq?: Maybe<Scalars['String']>
  rationale_in?: Maybe<Array<Scalars['String']>>
  rationale_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  worker?: Maybe<WorkerWhereInput>
}

export type WorkerStartedLeavingEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkerStatus =
  | WorkerStatusActive
  | WorkerStatusLeaving
  | WorkerStatusLeft
  | WorkerStatusTerminated

export type WorkerStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type WorkerStatusLeaving = {
  workerStartedLeavingEvent?: Maybe<WorkerStartedLeavingEvent>
}

export type WorkerStatusLeft = {
  workerExitedEvent?: Maybe<WorkerExitedEvent>
  workerStartedLeavingEvent?: Maybe<WorkerStartedLeavingEvent>
}

export type WorkerStatusTerminated = {
  terminatedWorkerEvent?: Maybe<TerminatedWorkerEvent>
}

export type WorkerUpdateInput = {
  application?: Maybe<Scalars['ID']>
  entry?: Maybe<Scalars['ID']>
  group?: Maybe<Scalars['ID']>
  groupId?: Maybe<Scalars['String']>
  isActive?: Maybe<Scalars['Boolean']>
  isLead?: Maybe<Scalars['Boolean']>
  membership?: Maybe<Scalars['ID']>
  missingRewardAmount?: Maybe<Scalars['String']>
  rewardAccount?: Maybe<Scalars['String']>
  rewardPerBlock?: Maybe<Scalars['String']>
  roleAccount?: Maybe<Scalars['String']>
  runtimeId?: Maybe<Scalars['Float']>
  stake?: Maybe<Scalars['String']>
  stakeAccount?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['JSONObject']>
  storage?: Maybe<Scalars['String']>
}

export type WorkerWhereInput = {
  AND?: Maybe<Array<WorkerWhereInput>>
  NOT?: Maybe<Array<WorkerWhereInput>>
  OR?: Maybe<Array<WorkerWhereInput>>
  application?: Maybe<WorkingGroupApplicationWhereInput>
  categoryarchivalstatusupdatedeventactor_every?: Maybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categoryarchivalstatusupdatedeventactor_none?: Maybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categoryarchivalstatusupdatedeventactor_some?: Maybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categorydeletedeventactor_every?: Maybe<CategoryDeletedEventWhereInput>
  categorydeletedeventactor_none?: Maybe<CategoryDeletedEventWhereInput>
  categorydeletedeventactor_some?: Maybe<CategoryDeletedEventWhereInput>
  categorymembershipofmoderatorupdatedeventmoderator_every?: Maybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorymembershipofmoderatorupdatedeventmoderator_none?: Maybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorymembershipofmoderatorupdatedeventmoderator_some?: Maybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorystickythreadupdateeventactor_every?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
  categorystickythreadupdateeventactor_none?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
  categorystickythreadupdateeventactor_some?: Maybe<CategoryStickyThreadUpdateEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  entry?: Maybe<OpeningFilledEventWhereInput>
  group?: Maybe<WorkingGroupWhereInput>
  groupId_contains?: Maybe<Scalars['String']>
  groupId_endsWith?: Maybe<Scalars['String']>
  groupId_eq?: Maybe<Scalars['String']>
  groupId_in?: Maybe<Array<Scalars['String']>>
  groupId_startsWith?: Maybe<Scalars['String']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  isActive_eq?: Maybe<Scalars['Boolean']>
  isActive_in?: Maybe<Array<Scalars['Boolean']>>
  isLead_eq?: Maybe<Scalars['Boolean']>
  isLead_in?: Maybe<Array<Scalars['Boolean']>>
  leaderseteventworker_every?: Maybe<LeaderSetEventWhereInput>
  leaderseteventworker_none?: Maybe<LeaderSetEventWhereInput>
  leaderseteventworker_some?: Maybe<LeaderSetEventWhereInput>
  leaderunseteventleader_every?: Maybe<LeaderUnsetEventWhereInput>
  leaderunseteventleader_none?: Maybe<LeaderUnsetEventWhereInput>
  leaderunseteventleader_some?: Maybe<LeaderUnsetEventWhereInput>
  managedForumCategories_every?: Maybe<ForumCategoryWhereInput>
  managedForumCategories_none?: Maybe<ForumCategoryWhereInput>
  managedForumCategories_some?: Maybe<ForumCategoryWhereInput>
  membership?: Maybe<MembershipWhereInput>
  memberverificationstatusupdatedeventworker_every?: Maybe<MemberVerificationStatusUpdatedEventWhereInput>
  memberverificationstatusupdatedeventworker_none?: Maybe<MemberVerificationStatusUpdatedEventWhereInput>
  memberverificationstatusupdatedeventworker_some?: Maybe<MemberVerificationStatusUpdatedEventWhereInput>
  missingRewardAmount_eq?: Maybe<Scalars['BigInt']>
  missingRewardAmount_gt?: Maybe<Scalars['BigInt']>
  missingRewardAmount_gte?: Maybe<Scalars['BigInt']>
  missingRewardAmount_in?: Maybe<Array<Scalars['BigInt']>>
  missingRewardAmount_lt?: Maybe<Scalars['BigInt']>
  missingRewardAmount_lte?: Maybe<Scalars['BigInt']>
  newmissedrewardlevelreachedeventworker_every?: Maybe<NewMissedRewardLevelReachedEventWhereInput>
  newmissedrewardlevelreachedeventworker_none?: Maybe<NewMissedRewardLevelReachedEventWhereInput>
  newmissedrewardlevelreachedeventworker_some?: Maybe<NewMissedRewardLevelReachedEventWhereInput>
  payouts_every?: Maybe<RewardPaidEventWhereInput>
  payouts_none?: Maybe<RewardPaidEventWhereInput>
  payouts_some?: Maybe<RewardPaidEventWhereInput>
  postmoderatedeventactor_every?: Maybe<PostModeratedEventWhereInput>
  postmoderatedeventactor_none?: Maybe<PostModeratedEventWhereInput>
  postmoderatedeventactor_some?: Maybe<PostModeratedEventWhereInput>
  rewardAccount_contains?: Maybe<Scalars['String']>
  rewardAccount_endsWith?: Maybe<Scalars['String']>
  rewardAccount_eq?: Maybe<Scalars['String']>
  rewardAccount_in?: Maybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: Maybe<Scalars['String']>
  rewardPerBlock_eq?: Maybe<Scalars['BigInt']>
  rewardPerBlock_gt?: Maybe<Scalars['BigInt']>
  rewardPerBlock_gte?: Maybe<Scalars['BigInt']>
  rewardPerBlock_in?: Maybe<Array<Scalars['BigInt']>>
  rewardPerBlock_lt?: Maybe<Scalars['BigInt']>
  rewardPerBlock_lte?: Maybe<Scalars['BigInt']>
  roleAccount_contains?: Maybe<Scalars['String']>
  roleAccount_endsWith?: Maybe<Scalars['String']>
  roleAccount_eq?: Maybe<Scalars['String']>
  roleAccount_in?: Maybe<Array<Scalars['String']>>
  roleAccount_startsWith?: Maybe<Scalars['String']>
  runtimeId_eq?: Maybe<Scalars['Int']>
  runtimeId_gt?: Maybe<Scalars['Int']>
  runtimeId_gte?: Maybe<Scalars['Int']>
  runtimeId_in?: Maybe<Array<Scalars['Int']>>
  runtimeId_lt?: Maybe<Scalars['Int']>
  runtimeId_lte?: Maybe<Scalars['Int']>
  slashes_every?: Maybe<StakeSlashedEventWhereInput>
  slashes_none?: Maybe<StakeSlashedEventWhereInput>
  slashes_some?: Maybe<StakeSlashedEventWhereInput>
  stakeAccount_contains?: Maybe<Scalars['String']>
  stakeAccount_endsWith?: Maybe<Scalars['String']>
  stakeAccount_eq?: Maybe<Scalars['String']>
  stakeAccount_in?: Maybe<Array<Scalars['String']>>
  stakeAccount_startsWith?: Maybe<Scalars['String']>
  stake_eq?: Maybe<Scalars['BigInt']>
  stake_gt?: Maybe<Scalars['BigInt']>
  stake_gte?: Maybe<Scalars['BigInt']>
  stake_in?: Maybe<Array<Scalars['BigInt']>>
  stake_lt?: Maybe<Scalars['BigInt']>
  stake_lte?: Maybe<Scalars['BigInt']>
  stakedecreasedeventworker_every?: Maybe<StakeDecreasedEventWhereInput>
  stakedecreasedeventworker_none?: Maybe<StakeDecreasedEventWhereInput>
  stakedecreasedeventworker_some?: Maybe<StakeDecreasedEventWhereInput>
  stakeincreasedeventworker_every?: Maybe<StakeIncreasedEventWhereInput>
  stakeincreasedeventworker_none?: Maybe<StakeIncreasedEventWhereInput>
  stakeincreasedeventworker_some?: Maybe<StakeIncreasedEventWhereInput>
  status_json?: Maybe<Scalars['JSONObject']>
  storage_contains?: Maybe<Scalars['String']>
  storage_endsWith?: Maybe<Scalars['String']>
  storage_eq?: Maybe<Scalars['String']>
  storage_in?: Maybe<Array<Scalars['String']>>
  storage_startsWith?: Maybe<Scalars['String']>
  terminatedleadereventworker_every?: Maybe<TerminatedLeaderEventWhereInput>
  terminatedleadereventworker_none?: Maybe<TerminatedLeaderEventWhereInput>
  terminatedleadereventworker_some?: Maybe<TerminatedLeaderEventWhereInput>
  terminatedworkereventworker_every?: Maybe<TerminatedWorkerEventWhereInput>
  terminatedworkereventworker_none?: Maybe<TerminatedWorkerEventWhereInput>
  terminatedworkereventworker_some?: Maybe<TerminatedWorkerEventWhereInput>
  threadmoderatedeventactor_every?: Maybe<ThreadModeratedEventWhereInput>
  threadmoderatedeventactor_none?: Maybe<ThreadModeratedEventWhereInput>
  threadmoderatedeventactor_some?: Maybe<ThreadModeratedEventWhereInput>
  threadmovedeventactor_every?: Maybe<ThreadMovedEventWhereInput>
  threadmovedeventactor_none?: Maybe<ThreadMovedEventWhereInput>
  threadmovedeventactor_some?: Maybe<ThreadMovedEventWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  workerexitedeventworker_every?: Maybe<WorkerExitedEventWhereInput>
  workerexitedeventworker_none?: Maybe<WorkerExitedEventWhereInput>
  workerexitedeventworker_some?: Maybe<WorkerExitedEventWhereInput>
  workerrewardaccountupdatedeventworker_every?: Maybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardaccountupdatedeventworker_none?: Maybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardaccountupdatedeventworker_some?: Maybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardamountupdatedeventworker_every?: Maybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerrewardamountupdatedeventworker_none?: Maybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerrewardamountupdatedeventworker_some?: Maybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerroleaccountupdatedeventworker_every?: Maybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerroleaccountupdatedeventworker_none?: Maybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerroleaccountupdatedeventworker_some?: Maybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerstartedleavingeventworker_every?: Maybe<WorkerStartedLeavingEventWhereInput>
  workerstartedleavingeventworker_none?: Maybe<WorkerStartedLeavingEventWhereInput>
  workerstartedleavingeventworker_some?: Maybe<WorkerStartedLeavingEventWhereInput>
  workinggroupleader_every?: Maybe<WorkingGroupWhereInput>
  workinggroupleader_none?: Maybe<WorkingGroupWhereInput>
  workinggroupleader_some?: Maybe<WorkingGroupWhereInput>
}

export type WorkerWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkingGroup = BaseGraphQlObject & {
  applicationwithdrawneventgroup?: Maybe<Array<ApplicationWithdrawnEvent>>
  appliedonopeningeventgroup?: Maybe<Array<AppliedOnOpeningEvent>>
  budget: Scalars['BigInt']
  budgetfundedeventgroup?: Maybe<Array<BudgetFundedEvent>>
  budgetseteventgroup?: Maybe<Array<BudgetSetEvent>>
  budgetspendingeventgroup?: Maybe<Array<BudgetSpendingEvent>>
  budgetupdatedeventgroup?: Maybe<Array<BudgetUpdatedEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  leader?: Maybe<Worker>
  leaderId?: Maybe<Scalars['String']>
  leaderseteventgroup?: Maybe<Array<LeaderSetEvent>>
  leaderunseteventgroup?: Maybe<Array<LeaderUnsetEvent>>
  metadata?: Maybe<WorkingGroupMetadata>
  metadataId?: Maybe<Scalars['String']>
  name: Scalars['String']
  newmissedrewardlevelreachedeventgroup?: Maybe<Array<NewMissedRewardLevelReachedEvent>>
  openingaddedeventgroup?: Maybe<Array<OpeningAddedEvent>>
  openingcanceledeventgroup?: Maybe<Array<OpeningCanceledEvent>>
  openingfilledeventgroup?: Maybe<Array<OpeningFilledEvent>>
  openings: Array<WorkingGroupOpening>
  rewardpaideventgroup?: Maybe<Array<RewardPaidEvent>>
  stakedecreasedeventgroup?: Maybe<Array<StakeDecreasedEvent>>
  stakeincreasedeventgroup?: Maybe<Array<StakeIncreasedEvent>>
  stakeslashedeventgroup?: Maybe<Array<StakeSlashedEvent>>
  statustextchangedeventgroup?: Maybe<Array<StatusTextChangedEvent>>
  terminatedleadereventgroup?: Maybe<Array<TerminatedLeaderEvent>>
  terminatedworkereventgroup?: Maybe<Array<TerminatedWorkerEvent>>
  upcomingworkinggroupopeninggroup?: Maybe<Array<UpcomingWorkingGroupOpening>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  workerexitedeventgroup?: Maybe<Array<WorkerExitedEvent>>
  workerrewardaccountupdatedeventgroup?: Maybe<Array<WorkerRewardAccountUpdatedEvent>>
  workerrewardamountupdatedeventgroup?: Maybe<Array<WorkerRewardAmountUpdatedEvent>>
  workerroleaccountupdatedeventgroup?: Maybe<Array<WorkerRoleAccountUpdatedEvent>>
  workers: Array<Worker>
  workerstartedleavingeventgroup?: Maybe<Array<WorkerStartedLeavingEvent>>
  workinggroupmetadatagroup?: Maybe<Array<WorkingGroupMetadata>>
}

export type WorkingGroupApplication = BaseGraphQlObject & {
  answers: Array<ApplicationFormQuestionAnswer>
  applicant: Membership
  applicantId: Scalars['String']
  applicationwithdrawneventapplication?: Maybe<Array<ApplicationWithdrawnEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInEvent: AppliedOnOpeningEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  opening: WorkingGroupOpening
  openingId: Scalars['String']
  rewardAccount: Scalars['String']
  roleAccount: Scalars['String']
  runtimeId: Scalars['Int']
  stake: Scalars['BigInt']
  stakingAccount: Scalars['String']
  status: WorkingGroupApplicationStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  workerapplication?: Maybe<Array<Worker>>
}

export type WorkingGroupApplicationConnection = {
  edges: Array<WorkingGroupApplicationEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupApplicationCreateInput = {
  applicant: Scalars['ID']
  opening: Scalars['ID']
  rewardAccount: Scalars['String']
  roleAccount: Scalars['String']
  runtimeId: Scalars['Float']
  stake: Scalars['String']
  stakingAccount: Scalars['String']
  status: Scalars['JSONObject']
}

export type WorkingGroupApplicationEdge = {
  cursor: Scalars['String']
  node: WorkingGroupApplication
}

export enum WorkingGroupApplicationOrderByInput {
  ApplicantAsc = 'applicant_ASC',
  ApplicantDesc = 'applicant_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  RoleAccountAsc = 'roleAccount_ASC',
  RoleAccountDesc = 'roleAccount_DESC',
  RuntimeIdAsc = 'runtimeId_ASC',
  RuntimeIdDesc = 'runtimeId_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StakingAccountAsc = 'stakingAccount_ASC',
  StakingAccountDesc = 'stakingAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupApplicationStatus =
  | ApplicationStatusAccepted
  | ApplicationStatusCancelled
  | ApplicationStatusPending
  | ApplicationStatusRejected
  | ApplicationStatusWithdrawn

export type WorkingGroupApplicationUpdateInput = {
  applicant?: Maybe<Scalars['ID']>
  opening?: Maybe<Scalars['ID']>
  rewardAccount?: Maybe<Scalars['String']>
  roleAccount?: Maybe<Scalars['String']>
  runtimeId?: Maybe<Scalars['Float']>
  stake?: Maybe<Scalars['String']>
  stakingAccount?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['JSONObject']>
}

export type WorkingGroupApplicationWhereInput = {
  AND?: Maybe<Array<WorkingGroupApplicationWhereInput>>
  NOT?: Maybe<Array<WorkingGroupApplicationWhereInput>>
  OR?: Maybe<Array<WorkingGroupApplicationWhereInput>>
  answers_every?: Maybe<ApplicationFormQuestionAnswerWhereInput>
  answers_none?: Maybe<ApplicationFormQuestionAnswerWhereInput>
  answers_some?: Maybe<ApplicationFormQuestionAnswerWhereInput>
  applicant?: Maybe<MembershipWhereInput>
  applicationwithdrawneventapplication_every?: Maybe<ApplicationWithdrawnEventWhereInput>
  applicationwithdrawneventapplication_none?: Maybe<ApplicationWithdrawnEventWhereInput>
  applicationwithdrawneventapplication_some?: Maybe<ApplicationWithdrawnEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInEvent?: Maybe<AppliedOnOpeningEventWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  opening?: Maybe<WorkingGroupOpeningWhereInput>
  rewardAccount_contains?: Maybe<Scalars['String']>
  rewardAccount_endsWith?: Maybe<Scalars['String']>
  rewardAccount_eq?: Maybe<Scalars['String']>
  rewardAccount_in?: Maybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: Maybe<Scalars['String']>
  roleAccount_contains?: Maybe<Scalars['String']>
  roleAccount_endsWith?: Maybe<Scalars['String']>
  roleAccount_eq?: Maybe<Scalars['String']>
  roleAccount_in?: Maybe<Array<Scalars['String']>>
  roleAccount_startsWith?: Maybe<Scalars['String']>
  runtimeId_eq?: Maybe<Scalars['Int']>
  runtimeId_gt?: Maybe<Scalars['Int']>
  runtimeId_gte?: Maybe<Scalars['Int']>
  runtimeId_in?: Maybe<Array<Scalars['Int']>>
  runtimeId_lt?: Maybe<Scalars['Int']>
  runtimeId_lte?: Maybe<Scalars['Int']>
  stake_eq?: Maybe<Scalars['BigInt']>
  stake_gt?: Maybe<Scalars['BigInt']>
  stake_gte?: Maybe<Scalars['BigInt']>
  stake_in?: Maybe<Array<Scalars['BigInt']>>
  stake_lt?: Maybe<Scalars['BigInt']>
  stake_lte?: Maybe<Scalars['BigInt']>
  stakingAccount_contains?: Maybe<Scalars['String']>
  stakingAccount_endsWith?: Maybe<Scalars['String']>
  stakingAccount_eq?: Maybe<Scalars['String']>
  stakingAccount_in?: Maybe<Array<Scalars['String']>>
  stakingAccount_startsWith?: Maybe<Scalars['String']>
  status_json?: Maybe<Scalars['JSONObject']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  workerapplication_every?: Maybe<WorkerWhereInput>
  workerapplication_none?: Maybe<WorkerWhereInput>
  workerapplication_some?: Maybe<WorkerWhereInput>
}

export type WorkingGroupApplicationWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkingGroupConnection = {
  edges: Array<WorkingGroupEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupCreateInput = {
  budget: Scalars['String']
  leader?: Maybe<Scalars['ID']>
  metadata?: Maybe<Scalars['ID']>
  name: Scalars['String']
}

export type WorkingGroupEdge = {
  cursor: Scalars['String']
  node: WorkingGroup
}

export type WorkingGroupMetadata = BaseGraphQlObject & {
  about?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  group: WorkingGroup
  groupId: Scalars['String']
  id: Scalars['ID']
  setInEvent: StatusTextChangedEvent
  setInEventId: Scalars['String']
  status?: Maybe<Scalars['String']>
  statusMessage?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  workinggroupmetadata?: Maybe<Array<WorkingGroup>>
}

export type WorkingGroupMetadataActionResult =
  | InvalidActionMetadata
  | UpcomingOpeningAdded
  | UpcomingOpeningRemoved
  | WorkingGroupMetadataSet

export type WorkingGroupMetadataConnection = {
  edges: Array<WorkingGroupMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupMetadataCreateInput = {
  about?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  group: Scalars['ID']
  setInEvent: Scalars['ID']
  status?: Maybe<Scalars['String']>
  statusMessage?: Maybe<Scalars['String']>
}

export type WorkingGroupMetadataEdge = {
  cursor: Scalars['String']
  node: WorkingGroupMetadata
}

export enum WorkingGroupMetadataOrderByInput {
  AboutAsc = 'about_ASC',
  AboutDesc = 'about_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  SetInEventAsc = 'setInEvent_ASC',
  SetInEventDesc = 'setInEvent_DESC',
  StatusMessageAsc = 'statusMessage_ASC',
  StatusMessageDesc = 'statusMessage_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupMetadataSet = {
  metadata?: Maybe<WorkingGroupMetadata>
}

export type WorkingGroupMetadataUpdateInput = {
  about?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  group?: Maybe<Scalars['ID']>
  setInEvent?: Maybe<Scalars['ID']>
  status?: Maybe<Scalars['String']>
  statusMessage?: Maybe<Scalars['String']>
}

export type WorkingGroupMetadataWhereInput = {
  AND?: Maybe<Array<WorkingGroupMetadataWhereInput>>
  NOT?: Maybe<Array<WorkingGroupMetadataWhereInput>>
  OR?: Maybe<Array<WorkingGroupMetadataWhereInput>>
  about_contains?: Maybe<Scalars['String']>
  about_endsWith?: Maybe<Scalars['String']>
  about_eq?: Maybe<Scalars['String']>
  about_in?: Maybe<Array<Scalars['String']>>
  about_startsWith?: Maybe<Scalars['String']>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  setInEvent?: Maybe<StatusTextChangedEventWhereInput>
  statusMessage_contains?: Maybe<Scalars['String']>
  statusMessage_endsWith?: Maybe<Scalars['String']>
  statusMessage_eq?: Maybe<Scalars['String']>
  statusMessage_in?: Maybe<Array<Scalars['String']>>
  statusMessage_startsWith?: Maybe<Scalars['String']>
  status_contains?: Maybe<Scalars['String']>
  status_endsWith?: Maybe<Scalars['String']>
  status_eq?: Maybe<Scalars['String']>
  status_in?: Maybe<Array<Scalars['String']>>
  status_startsWith?: Maybe<Scalars['String']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  workinggroupmetadata_every?: Maybe<WorkingGroupWhereInput>
  workinggroupmetadata_none?: Maybe<WorkingGroupWhereInput>
  workinggroupmetadata_some?: Maybe<WorkingGroupWhereInput>
}

export type WorkingGroupMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkingGroupOpening = BaseGraphQlObject & {
  applications: Array<WorkingGroupApplication>
  appliedonopeningeventopening?: Maybe<Array<AppliedOnOpeningEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  createdInEvent: OpeningAddedEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  group: WorkingGroup
  groupId: Scalars['String']
  id: Scalars['ID']
  metadata: WorkingGroupOpeningMetadata
  metadataId: Scalars['String']
  openingcanceledeventopening?: Maybe<Array<OpeningCanceledEvent>>
  openingfilledeventopening?: Maybe<Array<OpeningFilledEvent>>
  rewardPerBlock: Scalars['BigInt']
  runtimeId: Scalars['Int']
  stakeAmount: Scalars['BigInt']
  status: WorkingGroupOpeningStatus
  type: WorkingGroupOpeningType
  unstakingPeriod: Scalars['Int']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
}

export type WorkingGroupOpeningConnection = {
  edges: Array<WorkingGroupOpeningEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupOpeningCreateInput = {
  createdAt: Scalars['DateTime']
  group: Scalars['ID']
  metadata: Scalars['ID']
  rewardPerBlock: Scalars['String']
  runtimeId: Scalars['Float']
  stakeAmount: Scalars['String']
  status: Scalars['JSONObject']
  type: WorkingGroupOpeningType
  unstakingPeriod: Scalars['Float']
}

export type WorkingGroupOpeningEdge = {
  cursor: Scalars['String']
  node: WorkingGroupOpening
}

export type WorkingGroupOpeningMetadata = BaseGraphQlObject & {
  applicationDetails?: Maybe<Scalars['String']>
  applicationFormQuestions: Array<ApplicationFormQuestion>
  createdAt: Scalars['DateTime']
  createdById: Scalars['ID']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  expectedEnding?: Maybe<Scalars['DateTime']>
  hiringLimit?: Maybe<Scalars['Int']>
  id: Scalars['ID']
  originallyValid: Scalars['Boolean']
  shortDescription?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  upcomingworkinggroupopeningmetadata?: Maybe<Array<UpcomingWorkingGroupOpening>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['ID']>
  version: Scalars['Int']
  workinggroupopeningmetadata?: Maybe<Array<WorkingGroupOpening>>
}

export type WorkingGroupOpeningMetadataConnection = {
  edges: Array<WorkingGroupOpeningMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupOpeningMetadataCreateInput = {
  applicationDetails?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  expectedEnding?: Maybe<Scalars['DateTime']>
  hiringLimit?: Maybe<Scalars['Float']>
  originallyValid: Scalars['Boolean']
  shortDescription?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type WorkingGroupOpeningMetadataEdge = {
  cursor: Scalars['String']
  node: WorkingGroupOpeningMetadata
}

export enum WorkingGroupOpeningMetadataOrderByInput {
  ApplicationDetailsAsc = 'applicationDetails_ASC',
  ApplicationDetailsDesc = 'applicationDetails_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ExpectedEndingAsc = 'expectedEnding_ASC',
  ExpectedEndingDesc = 'expectedEnding_DESC',
  HiringLimitAsc = 'hiringLimit_ASC',
  HiringLimitDesc = 'hiringLimit_DESC',
  OriginallyValidAsc = 'originallyValid_ASC',
  OriginallyValidDesc = 'originallyValid_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupOpeningMetadataUpdateInput = {
  applicationDetails?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  expectedEnding?: Maybe<Scalars['DateTime']>
  hiringLimit?: Maybe<Scalars['Float']>
  originallyValid?: Maybe<Scalars['Boolean']>
  shortDescription?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type WorkingGroupOpeningMetadataWhereInput = {
  AND?: Maybe<Array<WorkingGroupOpeningMetadataWhereInput>>
  NOT?: Maybe<Array<WorkingGroupOpeningMetadataWhereInput>>
  OR?: Maybe<Array<WorkingGroupOpeningMetadataWhereInput>>
  applicationDetails_contains?: Maybe<Scalars['String']>
  applicationDetails_endsWith?: Maybe<Scalars['String']>
  applicationDetails_eq?: Maybe<Scalars['String']>
  applicationDetails_in?: Maybe<Array<Scalars['String']>>
  applicationDetails_startsWith?: Maybe<Scalars['String']>
  applicationFormQuestions_every?: Maybe<ApplicationFormQuestionWhereInput>
  applicationFormQuestions_none?: Maybe<ApplicationFormQuestionWhereInput>
  applicationFormQuestions_some?: Maybe<ApplicationFormQuestionWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  description_contains?: Maybe<Scalars['String']>
  description_endsWith?: Maybe<Scalars['String']>
  description_eq?: Maybe<Scalars['String']>
  description_in?: Maybe<Array<Scalars['String']>>
  description_startsWith?: Maybe<Scalars['String']>
  expectedEnding_eq?: Maybe<Scalars['DateTime']>
  expectedEnding_gt?: Maybe<Scalars['DateTime']>
  expectedEnding_gte?: Maybe<Scalars['DateTime']>
  expectedEnding_lt?: Maybe<Scalars['DateTime']>
  expectedEnding_lte?: Maybe<Scalars['DateTime']>
  hiringLimit_eq?: Maybe<Scalars['Int']>
  hiringLimit_gt?: Maybe<Scalars['Int']>
  hiringLimit_gte?: Maybe<Scalars['Int']>
  hiringLimit_in?: Maybe<Array<Scalars['Int']>>
  hiringLimit_lt?: Maybe<Scalars['Int']>
  hiringLimit_lte?: Maybe<Scalars['Int']>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  originallyValid_eq?: Maybe<Scalars['Boolean']>
  originallyValid_in?: Maybe<Array<Scalars['Boolean']>>
  shortDescription_contains?: Maybe<Scalars['String']>
  shortDescription_endsWith?: Maybe<Scalars['String']>
  shortDescription_eq?: Maybe<Scalars['String']>
  shortDescription_in?: Maybe<Array<Scalars['String']>>
  shortDescription_startsWith?: Maybe<Scalars['String']>
  title_contains?: Maybe<Scalars['String']>
  title_endsWith?: Maybe<Scalars['String']>
  title_eq?: Maybe<Scalars['String']>
  title_in?: Maybe<Array<Scalars['String']>>
  title_startsWith?: Maybe<Scalars['String']>
  upcomingworkinggroupopeningmetadata_every?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeningmetadata_none?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeningmetadata_some?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  workinggroupopeningmetadata_every?: Maybe<WorkingGroupOpeningWhereInput>
  workinggroupopeningmetadata_none?: Maybe<WorkingGroupOpeningWhereInput>
  workinggroupopeningmetadata_some?: Maybe<WorkingGroupOpeningWhereInput>
}

export type WorkingGroupOpeningMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkingGroupOpeningOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  RewardPerBlockAsc = 'rewardPerBlock_ASC',
  RewardPerBlockDesc = 'rewardPerBlock_DESC',
  RuntimeIdAsc = 'runtimeId_ASC',
  RuntimeIdDesc = 'runtimeId_DESC',
  StakeAmountAsc = 'stakeAmount_ASC',
  StakeAmountDesc = 'stakeAmount_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UnstakingPeriodAsc = 'unstakingPeriod_ASC',
  UnstakingPeriodDesc = 'unstakingPeriod_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupOpeningStatus =
  | OpeningStatusCancelled
  | OpeningStatusFilled
  | OpeningStatusOpen

export enum WorkingGroupOpeningType {
  Leader = 'LEADER',
  Regular = 'REGULAR',
}

export type WorkingGroupOpeningUpdateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  group?: Maybe<Scalars['ID']>
  metadata?: Maybe<Scalars['ID']>
  rewardPerBlock?: Maybe<Scalars['String']>
  runtimeId?: Maybe<Scalars['Float']>
  stakeAmount?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['JSONObject']>
  type?: Maybe<WorkingGroupOpeningType>
  unstakingPeriod?: Maybe<Scalars['Float']>
}

export type WorkingGroupOpeningWhereInput = {
  AND?: Maybe<Array<WorkingGroupOpeningWhereInput>>
  NOT?: Maybe<Array<WorkingGroupOpeningWhereInput>>
  OR?: Maybe<Array<WorkingGroupOpeningWhereInput>>
  applications_every?: Maybe<WorkingGroupApplicationWhereInput>
  applications_none?: Maybe<WorkingGroupApplicationWhereInput>
  applications_some?: Maybe<WorkingGroupApplicationWhereInput>
  appliedonopeningeventopening_every?: Maybe<AppliedOnOpeningEventWhereInput>
  appliedonopeningeventopening_none?: Maybe<AppliedOnOpeningEventWhereInput>
  appliedonopeningeventopening_some?: Maybe<AppliedOnOpeningEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  createdInEvent?: Maybe<OpeningAddedEventWhereInput>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  group?: Maybe<WorkingGroupWhereInput>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  metadata?: Maybe<WorkingGroupOpeningMetadataWhereInput>
  openingcanceledeventopening_every?: Maybe<OpeningCanceledEventWhereInput>
  openingcanceledeventopening_none?: Maybe<OpeningCanceledEventWhereInput>
  openingcanceledeventopening_some?: Maybe<OpeningCanceledEventWhereInput>
  openingfilledeventopening_every?: Maybe<OpeningFilledEventWhereInput>
  openingfilledeventopening_none?: Maybe<OpeningFilledEventWhereInput>
  openingfilledeventopening_some?: Maybe<OpeningFilledEventWhereInput>
  rewardPerBlock_eq?: Maybe<Scalars['BigInt']>
  rewardPerBlock_gt?: Maybe<Scalars['BigInt']>
  rewardPerBlock_gte?: Maybe<Scalars['BigInt']>
  rewardPerBlock_in?: Maybe<Array<Scalars['BigInt']>>
  rewardPerBlock_lt?: Maybe<Scalars['BigInt']>
  rewardPerBlock_lte?: Maybe<Scalars['BigInt']>
  runtimeId_eq?: Maybe<Scalars['Int']>
  runtimeId_gt?: Maybe<Scalars['Int']>
  runtimeId_gte?: Maybe<Scalars['Int']>
  runtimeId_in?: Maybe<Array<Scalars['Int']>>
  runtimeId_lt?: Maybe<Scalars['Int']>
  runtimeId_lte?: Maybe<Scalars['Int']>
  stakeAmount_eq?: Maybe<Scalars['BigInt']>
  stakeAmount_gt?: Maybe<Scalars['BigInt']>
  stakeAmount_gte?: Maybe<Scalars['BigInt']>
  stakeAmount_in?: Maybe<Array<Scalars['BigInt']>>
  stakeAmount_lt?: Maybe<Scalars['BigInt']>
  stakeAmount_lte?: Maybe<Scalars['BigInt']>
  status_json?: Maybe<Scalars['JSONObject']>
  type_eq?: Maybe<WorkingGroupOpeningType>
  type_in?: Maybe<Array<WorkingGroupOpeningType>>
  unstakingPeriod_eq?: Maybe<Scalars['Int']>
  unstakingPeriod_gt?: Maybe<Scalars['Int']>
  unstakingPeriod_gte?: Maybe<Scalars['Int']>
  unstakingPeriod_in?: Maybe<Array<Scalars['Int']>>
  unstakingPeriod_lt?: Maybe<Scalars['Int']>
  unstakingPeriod_lte?: Maybe<Scalars['Int']>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
}

export type WorkingGroupOpeningWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkingGroupOrderByInput {
  BudgetAsc = 'budget_ASC',
  BudgetDesc = 'budget_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  LeaderAsc = 'leader_ASC',
  LeaderDesc = 'leader_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupUpdateInput = {
  budget?: Maybe<Scalars['String']>
  leader?: Maybe<Scalars['ID']>
  metadata?: Maybe<Scalars['ID']>
  name?: Maybe<Scalars['String']>
}

export type WorkingGroupWhereInput = {
  AND?: Maybe<Array<WorkingGroupWhereInput>>
  NOT?: Maybe<Array<WorkingGroupWhereInput>>
  OR?: Maybe<Array<WorkingGroupWhereInput>>
  applicationwithdrawneventgroup_every?: Maybe<ApplicationWithdrawnEventWhereInput>
  applicationwithdrawneventgroup_none?: Maybe<ApplicationWithdrawnEventWhereInput>
  applicationwithdrawneventgroup_some?: Maybe<ApplicationWithdrawnEventWhereInput>
  appliedonopeningeventgroup_every?: Maybe<AppliedOnOpeningEventWhereInput>
  appliedonopeningeventgroup_none?: Maybe<AppliedOnOpeningEventWhereInput>
  appliedonopeningeventgroup_some?: Maybe<AppliedOnOpeningEventWhereInput>
  budget_eq?: Maybe<Scalars['BigInt']>
  budget_gt?: Maybe<Scalars['BigInt']>
  budget_gte?: Maybe<Scalars['BigInt']>
  budget_in?: Maybe<Array<Scalars['BigInt']>>
  budget_lt?: Maybe<Scalars['BigInt']>
  budget_lte?: Maybe<Scalars['BigInt']>
  budgetfundedeventgroup_every?: Maybe<BudgetFundedEventWhereInput>
  budgetfundedeventgroup_none?: Maybe<BudgetFundedEventWhereInput>
  budgetfundedeventgroup_some?: Maybe<BudgetFundedEventWhereInput>
  budgetseteventgroup_every?: Maybe<BudgetSetEventWhereInput>
  budgetseteventgroup_none?: Maybe<BudgetSetEventWhereInput>
  budgetseteventgroup_some?: Maybe<BudgetSetEventWhereInput>
  budgetspendingeventgroup_every?: Maybe<BudgetSpendingEventWhereInput>
  budgetspendingeventgroup_none?: Maybe<BudgetSpendingEventWhereInput>
  budgetspendingeventgroup_some?: Maybe<BudgetSpendingEventWhereInput>
  budgetupdatedeventgroup_every?: Maybe<BudgetUpdatedEventWhereInput>
  budgetupdatedeventgroup_none?: Maybe<BudgetUpdatedEventWhereInput>
  budgetupdatedeventgroup_some?: Maybe<BudgetUpdatedEventWhereInput>
  createdAt_eq?: Maybe<Scalars['DateTime']>
  createdAt_gt?: Maybe<Scalars['DateTime']>
  createdAt_gte?: Maybe<Scalars['DateTime']>
  createdAt_lt?: Maybe<Scalars['DateTime']>
  createdAt_lte?: Maybe<Scalars['DateTime']>
  createdById_eq?: Maybe<Scalars['ID']>
  createdById_in?: Maybe<Array<Scalars['ID']>>
  deletedAt_all?: Maybe<Scalars['Boolean']>
  deletedAt_eq?: Maybe<Scalars['DateTime']>
  deletedAt_gt?: Maybe<Scalars['DateTime']>
  deletedAt_gte?: Maybe<Scalars['DateTime']>
  deletedAt_lt?: Maybe<Scalars['DateTime']>
  deletedAt_lte?: Maybe<Scalars['DateTime']>
  deletedById_eq?: Maybe<Scalars['ID']>
  deletedById_in?: Maybe<Array<Scalars['ID']>>
  id_eq?: Maybe<Scalars['ID']>
  id_in?: Maybe<Array<Scalars['ID']>>
  leader?: Maybe<WorkerWhereInput>
  leaderseteventgroup_every?: Maybe<LeaderSetEventWhereInput>
  leaderseteventgroup_none?: Maybe<LeaderSetEventWhereInput>
  leaderseteventgroup_some?: Maybe<LeaderSetEventWhereInput>
  leaderunseteventgroup_every?: Maybe<LeaderUnsetEventWhereInput>
  leaderunseteventgroup_none?: Maybe<LeaderUnsetEventWhereInput>
  leaderunseteventgroup_some?: Maybe<LeaderUnsetEventWhereInput>
  metadata?: Maybe<WorkingGroupMetadataWhereInput>
  name_contains?: Maybe<Scalars['String']>
  name_endsWith?: Maybe<Scalars['String']>
  name_eq?: Maybe<Scalars['String']>
  name_in?: Maybe<Array<Scalars['String']>>
  name_startsWith?: Maybe<Scalars['String']>
  newmissedrewardlevelreachedeventgroup_every?: Maybe<NewMissedRewardLevelReachedEventWhereInput>
  newmissedrewardlevelreachedeventgroup_none?: Maybe<NewMissedRewardLevelReachedEventWhereInput>
  newmissedrewardlevelreachedeventgroup_some?: Maybe<NewMissedRewardLevelReachedEventWhereInput>
  openingaddedeventgroup_every?: Maybe<OpeningAddedEventWhereInput>
  openingaddedeventgroup_none?: Maybe<OpeningAddedEventWhereInput>
  openingaddedeventgroup_some?: Maybe<OpeningAddedEventWhereInput>
  openingcanceledeventgroup_every?: Maybe<OpeningCanceledEventWhereInput>
  openingcanceledeventgroup_none?: Maybe<OpeningCanceledEventWhereInput>
  openingcanceledeventgroup_some?: Maybe<OpeningCanceledEventWhereInput>
  openingfilledeventgroup_every?: Maybe<OpeningFilledEventWhereInput>
  openingfilledeventgroup_none?: Maybe<OpeningFilledEventWhereInput>
  openingfilledeventgroup_some?: Maybe<OpeningFilledEventWhereInput>
  openings_every?: Maybe<WorkingGroupOpeningWhereInput>
  openings_none?: Maybe<WorkingGroupOpeningWhereInput>
  openings_some?: Maybe<WorkingGroupOpeningWhereInput>
  rewardpaideventgroup_every?: Maybe<RewardPaidEventWhereInput>
  rewardpaideventgroup_none?: Maybe<RewardPaidEventWhereInput>
  rewardpaideventgroup_some?: Maybe<RewardPaidEventWhereInput>
  stakedecreasedeventgroup_every?: Maybe<StakeDecreasedEventWhereInput>
  stakedecreasedeventgroup_none?: Maybe<StakeDecreasedEventWhereInput>
  stakedecreasedeventgroup_some?: Maybe<StakeDecreasedEventWhereInput>
  stakeincreasedeventgroup_every?: Maybe<StakeIncreasedEventWhereInput>
  stakeincreasedeventgroup_none?: Maybe<StakeIncreasedEventWhereInput>
  stakeincreasedeventgroup_some?: Maybe<StakeIncreasedEventWhereInput>
  stakeslashedeventgroup_every?: Maybe<StakeSlashedEventWhereInput>
  stakeslashedeventgroup_none?: Maybe<StakeSlashedEventWhereInput>
  stakeslashedeventgroup_some?: Maybe<StakeSlashedEventWhereInput>
  statustextchangedeventgroup_every?: Maybe<StatusTextChangedEventWhereInput>
  statustextchangedeventgroup_none?: Maybe<StatusTextChangedEventWhereInput>
  statustextchangedeventgroup_some?: Maybe<StatusTextChangedEventWhereInput>
  terminatedleadereventgroup_every?: Maybe<TerminatedLeaderEventWhereInput>
  terminatedleadereventgroup_none?: Maybe<TerminatedLeaderEventWhereInput>
  terminatedleadereventgroup_some?: Maybe<TerminatedLeaderEventWhereInput>
  terminatedworkereventgroup_every?: Maybe<TerminatedWorkerEventWhereInput>
  terminatedworkereventgroup_none?: Maybe<TerminatedWorkerEventWhereInput>
  terminatedworkereventgroup_some?: Maybe<TerminatedWorkerEventWhereInput>
  upcomingworkinggroupopeninggroup_every?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeninggroup_none?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeninggroup_some?: Maybe<UpcomingWorkingGroupOpeningWhereInput>
  updatedAt_eq?: Maybe<Scalars['DateTime']>
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  updatedById_eq?: Maybe<Scalars['ID']>
  updatedById_in?: Maybe<Array<Scalars['ID']>>
  workerexitedeventgroup_every?: Maybe<WorkerExitedEventWhereInput>
  workerexitedeventgroup_none?: Maybe<WorkerExitedEventWhereInput>
  workerexitedeventgroup_some?: Maybe<WorkerExitedEventWhereInput>
  workerrewardaccountupdatedeventgroup_every?: Maybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardaccountupdatedeventgroup_none?: Maybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardaccountupdatedeventgroup_some?: Maybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardamountupdatedeventgroup_every?: Maybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerrewardamountupdatedeventgroup_none?: Maybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerrewardamountupdatedeventgroup_some?: Maybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerroleaccountupdatedeventgroup_every?: Maybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerroleaccountupdatedeventgroup_none?: Maybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerroleaccountupdatedeventgroup_some?: Maybe<WorkerRoleAccountUpdatedEventWhereInput>
  workers_every?: Maybe<WorkerWhereInput>
  workers_none?: Maybe<WorkerWhereInput>
  workers_some?: Maybe<WorkerWhereInput>
  workerstartedleavingeventgroup_every?: Maybe<WorkerStartedLeavingEventWhereInput>
  workerstartedleavingeventgroup_none?: Maybe<WorkerStartedLeavingEventWhereInput>
  workerstartedleavingeventgroup_some?: Maybe<WorkerStartedLeavingEventWhereInput>
  workinggroupmetadatagroup_every?: Maybe<WorkingGroupMetadataWhereInput>
  workinggroupmetadatagroup_none?: Maybe<WorkingGroupMetadataWhereInput>
  workinggroupmetadatagroup_some?: Maybe<WorkingGroupMetadataWhereInput>
}

export type WorkingGroupWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  name?: Maybe<Scalars['String']>
}
