import { RequestCheckFunction } from '@subsquid/graphql-server/lib/check'
import { TypeormOpenreaderContext } from '@subsquid/graphql-server/lib/typeorm'
import { Context as OpenreaderContext } from '@subsquid/openreader/lib/context'
import { UnauthorizedError } from 'type-graphql'
import { AuthContext, authenticate } from '../utils/auth'
import { OperatorPermission } from '../model'

export type Context = OpenreaderContext & AuthContext

const autogeneratedOperatorQueries = [
  'reports',
  'reportById',
  'reportsConnection',
  'reportByUniqueInput',
  'videoViewEvents',
  'videoViewEventById',
  'videoViewEventByUniqueInput',
  'videoViewEventsConnection',
  'channelFollows',
  'channelFollowById',
  'channelFollowByUniqueInput',
  'channelFollowsConnection',
  'nftFeaturingRequests',
  'nftFeaturingRequestById',
  'nftFeaturingRequestsConnection',
]

export const requestCheck: RequestCheckFunction = async (ctx) => {
  const context = ctx.context as Context

  // If bearer token is present, use bearer authentication, otherwise use cookie authentication
  const authType = context.req.headers.authorization?.toLowerCase().startsWith('bearer ')
    ? 'header'
    : 'cookie'
  const authContext = await authenticate(context.req, authType)

  Object.assign(context, authContext)

  if (
    (!authContext || !authContext.user.isRoot) &&
    ctx.operation.selectionSet.selections.some(
      (s) => s.kind === 'Field' && autogeneratedOperatorQueries.includes(s.name.value)
    )
  ) {
    throw new UnauthorizedError()
  }

  // Set search_path accordingly to user's permissions
  if (authContext?.user) {
    const em = await (context.openreader as unknown as TypeormOpenreaderContext).getEntityManager()
    const { user } = authContext
    const permissions = user.permissions || []
    if (user.isRoot || permissions.includes(OperatorPermission.VIEW_ADMIN_SCHEMA)) {
      await em.query('SET LOCAL search_path TO admin,curator,public')
    } else if (permissions.includes(OperatorPermission.VIEW_CURATOR_SCHEMA)) {
      await em.query('SET LOCAL search_path TO curator,public')
    }
  }

  return true
}

export default requestCheck
