version: '3.4'
services:
  # PostgerSQL database for Orion
  orion-db:
    image: postgres:14
    container_name: orion-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '127.0.0.1:${DB_PORT}:${DB_PORT}'
    command: ['postgres', '-c', 'config_file=/etc/postgresql/postgresql.conf', '-p', '${DB_PORT}']
    shm_size: 1g
    volumes:
      - orion-db-data:/var/lib/postgresql/data
      - ./postgres.conf:/etc/postgresql/postgresql.conf
  # Orion processor
  orion-processor:
    image: joystream/orion:latest
    container_name: orion-processor
    restart: unless-stopped
    depends_on:
      - orion-db
    env_file:
      - .env
    environment:
      - DB_HOST=orion-db
      - GQL_PORT=${GRAPHQL_API_PORT}
    volumes:
      - ./db/export:/squid/db/export
    command: >
      sh -c "npx squid-typeorm-migration apply && \
            node lib/processor.js"
    ports:
      - '127.0.0.1:${PROCESSOR_PROMETHEUS_PORT}:${PROCESSOR_PROMETHEUS_PORT}'
  # Orion GraphQL API
  orion-graphql-api:
    container_name: orion-graphql-api
    image: joystream/orion:latest
    restart: unless-stopped
    depends_on:
      - orion-db
    env_file:
      - .env
    environment:
      - DB_HOST=orion-db
      - GQL_PORT=${GRAPHQL_API_PORT}
    command: ['npm', 'run', 'graphql-server-start']
    ports:
      - '127.0.0.1:${GRAPHQL_API_PORT}:${GRAPHQL_API_PORT}'
  # Orion Authentication API
  orion-auth-api:
    container_name: orion-auth-api
    image: joystream/orion:latest
    restart: unless-stopped
    depends_on:
      - orion-db
    env_file:
      - .env
    environment:
      - DB_HOST=orion-db
    command: ['npm', 'run', 'auth-server-start']
    ports:
      - '127.0.0.1:${AUTH_API_PORT}:${AUTH_API_PORT}'
  # Caddy
  orion-caddy:
    profiles:
      - deploy
    container_name: orion-caddy
    image: caddy:2.6
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - '80:80'
      - '443:443'
      - '443:443/udp'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./atlas:/srv/atlas
      - ./caddy/data:/data
      - ./caddy/config:/config

  archive_db:
    container_name: orion_archive_db
    hostname: orion_archive_db
    image: postgres:14 # CockroachDB cluster might be a better fit for production deployment
    restart: unless-stopped
    volumes:
      - orion_archive_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: squid-archive
    ports:
      - '127.0.0.1:${ARCHIVE_DB_PORT}:${ARCHIVE_DB_PORT}'
      - '[::1]:${ARCHIVE_DB_PORT}:${ARCHIVE_DB_PORT}'
    command: ['postgres', '-c', 'log_statement=all', '-p', '${ARCHIVE_DB_PORT}']

  ingest:
    container_name: orion_archive_ingest
    depends_on:
      - archive_db
    restart: unless-stopped
    image: subsquid/substrate-ingest:firesquid
    command: [
        '-e',
        '${WS_SOURCE}',
        '-c',
        '20', # allow up to 20 pending requests for the above endpoint (default is 5)
        #  "--start-block", "1000000", # uncomment to specify a non-zero start block
        '--out',
        'postgres://postgres:postgres@orion_archive_db:${ARCHIVE_DB_PORT}/squid-archive',
      ]

  gateway:
    container_name: orion_archive_gateway
    hostname: orion_archive_gateway
    depends_on:
      - archive_db
    restart: unless-stopped
    image: subsquid/substrate-gateway:firesquid
    environment:
      DATABASE_MAX_CONNECTIONS: 5
      RUST_LOG: 'actix_web=info,actix_server=info'
    command: [
        '--database-url',
        'postgres://postgres:postgres@orion_archive_db:${ARCHIVE_DB_PORT}/squid-archive',
        # "--evm-support" # uncomment for chains with Frontier EVM pallet
        # (e.g. Moonbeam/Moonriver or Astar/Shiden)
      ]
    ports:
      - '127.0.0.1:${GATEWAY_PORT}:8000'
      - '[::1]:${GATEWAY_PORT}:8000'

  # Explorer service is optional.
  # It provides rich GraphQL API for querying archived data.
  # Many developers find it very useful for exploration and debugging.
  explorer:
    container_name: orion_archive_explorer
    hostname: orion_archive_explorer
    restart: unless-stopped
    image: subsquid/substrate-explorer:firesquid
    environment:
      DB_TYPE: postgres # set to `cockroach` for Cockroach DB
      DB_HOST: archive_db
      DB_PORT: '12345'
      DB_NAME: 'squid-archive'
      DB_USER: 'postgres'
      DB_PASS: 'postgres'
    ports:
      - '${EXPLORER_PORT}:3000'

volumes:
  orion_archive_db_data:
    driver: local
  orion-db-data:
    driver: local
